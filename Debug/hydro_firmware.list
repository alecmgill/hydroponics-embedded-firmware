
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a1c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08012ba8  08012ba8  00022ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801317c  0801317c  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  0801317c  0801317c  0002317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013184  08013184  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013184  08013184  00023184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013188  08013188  00023188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0801318c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d3ec  20000234  080133c0  00030234  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2000d620  080133c0  0003d620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f6ed  00000000  00000000  0003025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000636c  00000000  00000000  0006f94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  00075cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001600  00000000  00000000  00077520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009e17  00000000  00000000  00078b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024713  00000000  00000000  00082937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1f20  00000000  00000000  000a704a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00178f6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079b0  00000000  00000000  00178fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000234 	.word	0x20000234
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08012b8c 	.word	0x08012b8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000238 	.word	0x20000238
 80001c4:	08012b8c 	.word	0x08012b8c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_frsub>:
 8000bf4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	e002      	b.n	8000c00 <__addsf3>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fsub>:
 8000bfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c00 <__addsf3>:
 8000c00:	0042      	lsls	r2, r0, #1
 8000c02:	bf1f      	itttt	ne
 8000c04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c08:	ea92 0f03 	teqne	r2, r3
 8000c0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c14:	d06a      	beq.n	8000cec <__addsf3+0xec>
 8000c16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1e:	bfc1      	itttt	gt
 8000c20:	18d2      	addgt	r2, r2, r3
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	4048      	eorgt	r0, r1
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	bfb8      	it	lt
 8000c2a:	425b      	neglt	r3, r3
 8000c2c:	2b19      	cmp	r3, #25
 8000c2e:	bf88      	it	hi
 8000c30:	4770      	bxhi	lr
 8000c32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4240      	negne	r0, r0
 8000c42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4249      	negne	r1, r1
 8000c52:	ea92 0f03 	teq	r2, r3
 8000c56:	d03f      	beq.n	8000cd8 <__addsf3+0xd8>
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c60:	eb10 000c 	adds.w	r0, r0, ip
 8000c64:	f1c3 0320 	rsb	r3, r3, #32
 8000c68:	fa01 f103 	lsl.w	r1, r1, r3
 8000c6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__addsf3+0x78>
 8000c72:	4249      	negs	r1, r1
 8000c74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c7c:	d313      	bcc.n	8000ca6 <__addsf3+0xa6>
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c82:	d306      	bcc.n	8000c92 <__addsf3+0x92>
 8000c84:	0840      	lsrs	r0, r0, #1
 8000c86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8a:	f102 0201 	add.w	r2, r2, #1
 8000c8e:	2afe      	cmp	r2, #254	; 0xfe
 8000c90:	d251      	bcs.n	8000d36 <__addsf3+0x136>
 8000c92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9a:	bf08      	it	eq
 8000c9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	0049      	lsls	r1, r1, #1
 8000ca8:	eb40 0000 	adc.w	r0, r0, r0
 8000cac:	3a01      	subs	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb4:	d2ed      	bcs.n	8000c92 <__addsf3+0x92>
 8000cb6:	fab0 fc80 	clz	ip, r0
 8000cba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc6:	bfaa      	itet	ge
 8000cc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ccc:	4252      	neglt	r2, r2
 8000cce:	4318      	orrge	r0, r3
 8000cd0:	bfbc      	itt	lt
 8000cd2:	40d0      	lsrlt	r0, r2
 8000cd4:	4318      	orrlt	r0, r3
 8000cd6:	4770      	bx	lr
 8000cd8:	f092 0f00 	teq	r2, #0
 8000cdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce0:	bf06      	itte	eq
 8000ce2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce6:	3201      	addeq	r2, #1
 8000ce8:	3b01      	subne	r3, #1
 8000cea:	e7b5      	b.n	8000c58 <__addsf3+0x58>
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d021      	beq.n	8000d40 <__addsf3+0x140>
 8000cfc:	ea92 0f03 	teq	r2, r3
 8000d00:	d004      	beq.n	8000d0c <__addsf3+0x10c>
 8000d02:	f092 0f00 	teq	r2, #0
 8000d06:	bf08      	it	eq
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	4770      	bx	lr
 8000d0c:	ea90 0f01 	teq	r0, r1
 8000d10:	bf1c      	itt	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	4770      	bxne	lr
 8000d16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1a:	d104      	bne.n	8000d26 <__addsf3+0x126>
 8000d1c:	0040      	lsls	r0, r0, #1
 8000d1e:	bf28      	it	cs
 8000d20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2a:	bf3c      	itt	cc
 8000d2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d30:	4770      	bxcc	lr
 8000d32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d44:	bf16      	itet	ne
 8000d46:	4608      	movne	r0, r1
 8000d48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d4c:	4601      	movne	r1, r0
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	bf06      	itte	eq
 8000d52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d56:	ea90 0f01 	teqeq	r0, r1
 8000d5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_ui2f>:
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e004      	b.n	8000d70 <__aeabi_i2f+0x8>
 8000d66:	bf00      	nop

08000d68 <__aeabi_i2f>:
 8000d68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	ea5f 0c00 	movs.w	ip, r0
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	e01c      	b.n	8000dbe <__aeabi_l2f+0x2a>

08000d84 <__aeabi_ul2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e00a      	b.n	8000da8 <__aeabi_l2f+0x14>
 8000d92:	bf00      	nop

08000d94 <__aeabi_l2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_l2f+0x14>
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	ea5f 0c01 	movs.w	ip, r1
 8000dac:	bf02      	ittt	eq
 8000dae:	4684      	moveq	ip, r0
 8000db0:	4601      	moveq	r1, r0
 8000db2:	2000      	moveq	r0, #0
 8000db4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db8:	bf08      	it	eq
 8000dba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc2:	fabc f28c 	clz	r2, ip
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dcc:	db10      	blt.n	8000df0 <__aeabi_l2f+0x5c>
 8000dce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de0:	fa20 f202 	lsr.w	r2, r0, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f102 0220 	add.w	r2, r2, #32
 8000df4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e00:	fa21 f202 	lsr.w	r2, r1, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_fmul>:
 8000e10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e18:	bf1e      	ittt	ne
 8000e1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1e:	ea92 0f0c 	teqne	r2, ip
 8000e22:	ea93 0f0c 	teqne	r3, ip
 8000e26:	d06f      	beq.n	8000f08 <__aeabi_fmul+0xf8>
 8000e28:	441a      	add	r2, r3
 8000e2a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2e:	0240      	lsls	r0, r0, #9
 8000e30:	bf18      	it	ne
 8000e32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e36:	d01e      	beq.n	8000e76 <__aeabi_fmul+0x66>
 8000e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e44:	fba0 3101 	umull	r3, r1, r0, r1
 8000e48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e50:	bf3e      	ittt	cc
 8000e52:	0049      	lslcc	r1, r1, #1
 8000e54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e58:	005b      	lslcc	r3, r3, #1
 8000e5a:	ea40 0001 	orr.w	r0, r0, r1
 8000e5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e62:	2afd      	cmp	r2, #253	; 0xfd
 8000e64:	d81d      	bhi.n	8000ea2 <__aeabi_fmul+0x92>
 8000e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e6e:	bf08      	it	eq
 8000e70:	f020 0001 	biceq.w	r0, r0, #1
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e7e:	bf08      	it	eq
 8000e80:	0249      	lsleq	r1, r1, #9
 8000e82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8a:	3a7f      	subs	r2, #127	; 0x7f
 8000e8c:	bfc2      	ittt	gt
 8000e8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e96:	4770      	bxgt	lr
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	3a01      	subs	r2, #1
 8000ea2:	dc5d      	bgt.n	8000f60 <__aeabi_fmul+0x150>
 8000ea4:	f112 0f19 	cmn.w	r2, #25
 8000ea8:	bfdc      	itt	le
 8000eaa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eae:	4770      	bxle	lr
 8000eb0:	f1c2 0200 	rsb	r2, r2, #0
 8000eb4:	0041      	lsls	r1, r0, #1
 8000eb6:	fa21 f102 	lsr.w	r1, r1, r2
 8000eba:	f1c2 0220 	rsb	r2, r2, #32
 8000ebe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ec6:	f140 0000 	adc.w	r0, r0, #0
 8000eca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ece:	bf08      	it	eq
 8000ed0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed4:	4770      	bx	lr
 8000ed6:	f092 0f00 	teq	r2, #0
 8000eda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ede:	bf02      	ittt	eq
 8000ee0:	0040      	lsleq	r0, r0, #1
 8000ee2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee6:	3a01      	subeq	r2, #1
 8000ee8:	d0f9      	beq.n	8000ede <__aeabi_fmul+0xce>
 8000eea:	ea40 000c 	orr.w	r0, r0, ip
 8000eee:	f093 0f00 	teq	r3, #0
 8000ef2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef6:	bf02      	ittt	eq
 8000ef8:	0049      	lsleq	r1, r1, #1
 8000efa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efe:	3b01      	subeq	r3, #1
 8000f00:	d0f9      	beq.n	8000ef6 <__aeabi_fmul+0xe6>
 8000f02:	ea41 010c 	orr.w	r1, r1, ip
 8000f06:	e78f      	b.n	8000e28 <__aeabi_fmul+0x18>
 8000f08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f0c:	ea92 0f0c 	teq	r2, ip
 8000f10:	bf18      	it	ne
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d00a      	beq.n	8000f2e <__aeabi_fmul+0x11e>
 8000f18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f1c:	bf18      	it	ne
 8000f1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f22:	d1d8      	bne.n	8000ed6 <__aeabi_fmul+0xc6>
 8000f24:	ea80 0001 	eor.w	r0, r0, r1
 8000f28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f2c:	4770      	bx	lr
 8000f2e:	f090 0f00 	teq	r0, #0
 8000f32:	bf17      	itett	ne
 8000f34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f38:	4608      	moveq	r0, r1
 8000f3a:	f091 0f00 	teqne	r1, #0
 8000f3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f42:	d014      	beq.n	8000f6e <__aeabi_fmul+0x15e>
 8000f44:	ea92 0f0c 	teq	r2, ip
 8000f48:	d101      	bne.n	8000f4e <__aeabi_fmul+0x13e>
 8000f4a:	0242      	lsls	r2, r0, #9
 8000f4c:	d10f      	bne.n	8000f6e <__aeabi_fmul+0x15e>
 8000f4e:	ea93 0f0c 	teq	r3, ip
 8000f52:	d103      	bne.n	8000f5c <__aeabi_fmul+0x14c>
 8000f54:	024b      	lsls	r3, r1, #9
 8000f56:	bf18      	it	ne
 8000f58:	4608      	movne	r0, r1
 8000f5a:	d108      	bne.n	8000f6e <__aeabi_fmul+0x15e>
 8000f5c:	ea80 0001 	eor.w	r0, r0, r1
 8000f60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6c:	4770      	bx	lr
 8000f6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f76:	4770      	bx	lr

08000f78 <__aeabi_fdiv>:
 8000f78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f80:	bf1e      	ittt	ne
 8000f82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f86:	ea92 0f0c 	teqne	r2, ip
 8000f8a:	ea93 0f0c 	teqne	r3, ip
 8000f8e:	d069      	beq.n	8001064 <__aeabi_fdiv+0xec>
 8000f90:	eba2 0203 	sub.w	r2, r2, r3
 8000f94:	ea80 0c01 	eor.w	ip, r0, r1
 8000f98:	0249      	lsls	r1, r1, #9
 8000f9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f9e:	d037      	beq.n	8001010 <__aeabi_fdiv+0x98>
 8000fa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fa8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	bf38      	it	cc
 8000fb4:	005b      	lslcc	r3, r3, #1
 8000fb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	bf24      	itt	cs
 8000fc2:	1a5b      	subcs	r3, r3, r1
 8000fc4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fc8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fcc:	bf24      	itt	cs
 8000fce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fd6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fda:	bf24      	itt	cs
 8000fdc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fe8:	bf24      	itt	cs
 8000fea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	bf18      	it	ne
 8000ff6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffa:	d1e0      	bne.n	8000fbe <__aeabi_fdiv+0x46>
 8000ffc:	2afd      	cmp	r2, #253	; 0xfd
 8000ffe:	f63f af50 	bhi.w	8000ea2 <__aeabi_fmul+0x92>
 8001002:	428b      	cmp	r3, r1
 8001004:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001008:	bf08      	it	eq
 800100a:	f020 0001 	biceq.w	r0, r0, #1
 800100e:	4770      	bx	lr
 8001010:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001014:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001018:	327f      	adds	r2, #127	; 0x7f
 800101a:	bfc2      	ittt	gt
 800101c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001020:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001024:	4770      	bxgt	lr
 8001026:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	3a01      	subs	r2, #1
 8001030:	e737      	b.n	8000ea2 <__aeabi_fmul+0x92>
 8001032:	f092 0f00 	teq	r2, #0
 8001036:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800103a:	bf02      	ittt	eq
 800103c:	0040      	lsleq	r0, r0, #1
 800103e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001042:	3a01      	subeq	r2, #1
 8001044:	d0f9      	beq.n	800103a <__aeabi_fdiv+0xc2>
 8001046:	ea40 000c 	orr.w	r0, r0, ip
 800104a:	f093 0f00 	teq	r3, #0
 800104e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001052:	bf02      	ittt	eq
 8001054:	0049      	lsleq	r1, r1, #1
 8001056:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800105a:	3b01      	subeq	r3, #1
 800105c:	d0f9      	beq.n	8001052 <__aeabi_fdiv+0xda>
 800105e:	ea41 010c 	orr.w	r1, r1, ip
 8001062:	e795      	b.n	8000f90 <__aeabi_fdiv+0x18>
 8001064:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001068:	ea92 0f0c 	teq	r2, ip
 800106c:	d108      	bne.n	8001080 <__aeabi_fdiv+0x108>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	f47f af7d 	bne.w	8000f6e <__aeabi_fmul+0x15e>
 8001074:	ea93 0f0c 	teq	r3, ip
 8001078:	f47f af70 	bne.w	8000f5c <__aeabi_fmul+0x14c>
 800107c:	4608      	mov	r0, r1
 800107e:	e776      	b.n	8000f6e <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	d104      	bne.n	8001090 <__aeabi_fdiv+0x118>
 8001086:	024b      	lsls	r3, r1, #9
 8001088:	f43f af4c 	beq.w	8000f24 <__aeabi_fmul+0x114>
 800108c:	4608      	mov	r0, r1
 800108e:	e76e      	b.n	8000f6e <__aeabi_fmul+0x15e>
 8001090:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001094:	bf18      	it	ne
 8001096:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800109a:	d1ca      	bne.n	8001032 <__aeabi_fdiv+0xba>
 800109c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010a0:	f47f af5c 	bne.w	8000f5c <__aeabi_fmul+0x14c>
 80010a4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010a8:	f47f af3c 	bne.w	8000f24 <__aeabi_fmul+0x114>
 80010ac:	e75f      	b.n	8000f6e <__aeabi_fmul+0x15e>
 80010ae:	bf00      	nop

080010b0 <__aeabi_f2uiz>:
 80010b0:	0042      	lsls	r2, r0, #1
 80010b2:	d20e      	bcs.n	80010d2 <__aeabi_f2uiz+0x22>
 80010b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b8:	d30b      	bcc.n	80010d2 <__aeabi_f2uiz+0x22>
 80010ba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c2:	d409      	bmi.n	80010d8 <__aeabi_f2uiz+0x28>
 80010c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010cc:	fa23 f002 	lsr.w	r0, r3, r2
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	4770      	bx	lr
 80010d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010dc:	d101      	bne.n	80010e2 <__aeabi_f2uiz+0x32>
 80010de:	0242      	lsls	r2, r0, #9
 80010e0:	d102      	bne.n	80010e8 <__aeabi_f2uiz+0x38>
 80010e2:	f04f 30ff 	mov.w	r0, #4294967295
 80010e6:	4770      	bx	lr
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_uldivmod>:
 80010f0:	b953      	cbnz	r3, 8001108 <__aeabi_uldivmod+0x18>
 80010f2:	b94a      	cbnz	r2, 8001108 <__aeabi_uldivmod+0x18>
 80010f4:	2900      	cmp	r1, #0
 80010f6:	bf08      	it	eq
 80010f8:	2800      	cmpeq	r0, #0
 80010fa:	bf1c      	itt	ne
 80010fc:	f04f 31ff 	movne.w	r1, #4294967295
 8001100:	f04f 30ff 	movne.w	r0, #4294967295
 8001104:	f000 b9a6 	b.w	8001454 <__aeabi_idiv0>
 8001108:	f1ad 0c08 	sub.w	ip, sp, #8
 800110c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001110:	f000 f83e 	bl	8001190 <__udivmoddi4>
 8001114:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800111c:	b004      	add	sp, #16
 800111e:	4770      	bx	lr

08001120 <__aeabi_d2lz>:
 8001120:	b538      	push	{r3, r4, r5, lr}
 8001122:	460c      	mov	r4, r1
 8001124:	4605      	mov	r5, r0
 8001126:	4621      	mov	r1, r4
 8001128:	4628      	mov	r0, r5
 800112a:	2200      	movs	r2, #0
 800112c:	2300      	movs	r3, #0
 800112e:	f7ff fc8b 	bl	8000a48 <__aeabi_dcmplt>
 8001132:	b928      	cbnz	r0, 8001140 <__aeabi_d2lz+0x20>
 8001134:	4628      	mov	r0, r5
 8001136:	4621      	mov	r1, r4
 8001138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800113c:	f000 b80a 	b.w	8001154 <__aeabi_d2ulz>
 8001140:	4628      	mov	r0, r5
 8001142:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001146:	f000 f805 	bl	8001154 <__aeabi_d2ulz>
 800114a:	4240      	negs	r0, r0
 800114c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001150:	bd38      	pop	{r3, r4, r5, pc}
 8001152:	bf00      	nop

08001154 <__aeabi_d2ulz>:
 8001154:	b5d0      	push	{r4, r6, r7, lr}
 8001156:	2200      	movs	r2, #0
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <__aeabi_d2ulz+0x34>)
 800115a:	4606      	mov	r6, r0
 800115c:	460f      	mov	r7, r1
 800115e:	f7ff fa01 	bl	8000564 <__aeabi_dmul>
 8001162:	f7ff fcd7 	bl	8000b14 <__aeabi_d2uiz>
 8001166:	4604      	mov	r4, r0
 8001168:	f7ff f982 	bl	8000470 <__aeabi_ui2d>
 800116c:	2200      	movs	r2, #0
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <__aeabi_d2ulz+0x38>)
 8001170:	f7ff f9f8 	bl	8000564 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4630      	mov	r0, r6
 800117a:	4639      	mov	r1, r7
 800117c:	f7ff f83a 	bl	80001f4 <__aeabi_dsub>
 8001180:	f7ff fcc8 	bl	8000b14 <__aeabi_d2uiz>
 8001184:	4621      	mov	r1, r4
 8001186:	bdd0      	pop	{r4, r6, r7, pc}
 8001188:	3df00000 	.word	0x3df00000
 800118c:	41f00000 	.word	0x41f00000

08001190 <__udivmoddi4>:
 8001190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001194:	9e08      	ldr	r6, [sp, #32]
 8001196:	460d      	mov	r5, r1
 8001198:	4604      	mov	r4, r0
 800119a:	468e      	mov	lr, r1
 800119c:	2b00      	cmp	r3, #0
 800119e:	f040 8083 	bne.w	80012a8 <__udivmoddi4+0x118>
 80011a2:	428a      	cmp	r2, r1
 80011a4:	4617      	mov	r7, r2
 80011a6:	d947      	bls.n	8001238 <__udivmoddi4+0xa8>
 80011a8:	fab2 f382 	clz	r3, r2
 80011ac:	b14b      	cbz	r3, 80011c2 <__udivmoddi4+0x32>
 80011ae:	f1c3 0120 	rsb	r1, r3, #32
 80011b2:	fa05 fe03 	lsl.w	lr, r5, r3
 80011b6:	fa20 f101 	lsr.w	r1, r0, r1
 80011ba:	409f      	lsls	r7, r3
 80011bc:	ea41 0e0e 	orr.w	lr, r1, lr
 80011c0:	409c      	lsls	r4, r3
 80011c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011c6:	fbbe fcf8 	udiv	ip, lr, r8
 80011ca:	fa1f f987 	uxth.w	r9, r7
 80011ce:	fb08 e21c 	mls	r2, r8, ip, lr
 80011d2:	fb0c f009 	mul.w	r0, ip, r9
 80011d6:	0c21      	lsrs	r1, r4, #16
 80011d8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80011dc:	4290      	cmp	r0, r2
 80011de:	d90a      	bls.n	80011f6 <__udivmoddi4+0x66>
 80011e0:	18ba      	adds	r2, r7, r2
 80011e2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80011e6:	f080 8118 	bcs.w	800141a <__udivmoddi4+0x28a>
 80011ea:	4290      	cmp	r0, r2
 80011ec:	f240 8115 	bls.w	800141a <__udivmoddi4+0x28a>
 80011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011f4:	443a      	add	r2, r7
 80011f6:	1a12      	subs	r2, r2, r0
 80011f8:	fbb2 f0f8 	udiv	r0, r2, r8
 80011fc:	fb08 2210 	mls	r2, r8, r0, r2
 8001200:	fb00 f109 	mul.w	r1, r0, r9
 8001204:	b2a4      	uxth	r4, r4
 8001206:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800120a:	42a1      	cmp	r1, r4
 800120c:	d909      	bls.n	8001222 <__udivmoddi4+0x92>
 800120e:	193c      	adds	r4, r7, r4
 8001210:	f100 32ff 	add.w	r2, r0, #4294967295
 8001214:	f080 8103 	bcs.w	800141e <__udivmoddi4+0x28e>
 8001218:	42a1      	cmp	r1, r4
 800121a:	f240 8100 	bls.w	800141e <__udivmoddi4+0x28e>
 800121e:	3802      	subs	r0, #2
 8001220:	443c      	add	r4, r7
 8001222:	1a64      	subs	r4, r4, r1
 8001224:	2100      	movs	r1, #0
 8001226:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800122a:	b11e      	cbz	r6, 8001234 <__udivmoddi4+0xa4>
 800122c:	2200      	movs	r2, #0
 800122e:	40dc      	lsrs	r4, r3
 8001230:	e9c6 4200 	strd	r4, r2, [r6]
 8001234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001238:	b902      	cbnz	r2, 800123c <__udivmoddi4+0xac>
 800123a:	deff      	udf	#255	; 0xff
 800123c:	fab2 f382 	clz	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d14f      	bne.n	80012e4 <__udivmoddi4+0x154>
 8001244:	1a8d      	subs	r5, r1, r2
 8001246:	2101      	movs	r1, #1
 8001248:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800124c:	fa1f f882 	uxth.w	r8, r2
 8001250:	fbb5 fcfe 	udiv	ip, r5, lr
 8001254:	fb0e 551c 	mls	r5, lr, ip, r5
 8001258:	fb08 f00c 	mul.w	r0, r8, ip
 800125c:	0c22      	lsrs	r2, r4, #16
 800125e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001262:	42a8      	cmp	r0, r5
 8001264:	d907      	bls.n	8001276 <__udivmoddi4+0xe6>
 8001266:	197d      	adds	r5, r7, r5
 8001268:	f10c 32ff 	add.w	r2, ip, #4294967295
 800126c:	d202      	bcs.n	8001274 <__udivmoddi4+0xe4>
 800126e:	42a8      	cmp	r0, r5
 8001270:	f200 80e9 	bhi.w	8001446 <__udivmoddi4+0x2b6>
 8001274:	4694      	mov	ip, r2
 8001276:	1a2d      	subs	r5, r5, r0
 8001278:	fbb5 f0fe 	udiv	r0, r5, lr
 800127c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001280:	fb08 f800 	mul.w	r8, r8, r0
 8001284:	b2a4      	uxth	r4, r4
 8001286:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800128a:	45a0      	cmp	r8, r4
 800128c:	d907      	bls.n	800129e <__udivmoddi4+0x10e>
 800128e:	193c      	adds	r4, r7, r4
 8001290:	f100 32ff 	add.w	r2, r0, #4294967295
 8001294:	d202      	bcs.n	800129c <__udivmoddi4+0x10c>
 8001296:	45a0      	cmp	r8, r4
 8001298:	f200 80d9 	bhi.w	800144e <__udivmoddi4+0x2be>
 800129c:	4610      	mov	r0, r2
 800129e:	eba4 0408 	sub.w	r4, r4, r8
 80012a2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012a6:	e7c0      	b.n	800122a <__udivmoddi4+0x9a>
 80012a8:	428b      	cmp	r3, r1
 80012aa:	d908      	bls.n	80012be <__udivmoddi4+0x12e>
 80012ac:	2e00      	cmp	r6, #0
 80012ae:	f000 80b1 	beq.w	8001414 <__udivmoddi4+0x284>
 80012b2:	2100      	movs	r1, #0
 80012b4:	e9c6 0500 	strd	r0, r5, [r6]
 80012b8:	4608      	mov	r0, r1
 80012ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012be:	fab3 f183 	clz	r1, r3
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d14b      	bne.n	800135e <__udivmoddi4+0x1ce>
 80012c6:	42ab      	cmp	r3, r5
 80012c8:	d302      	bcc.n	80012d0 <__udivmoddi4+0x140>
 80012ca:	4282      	cmp	r2, r0
 80012cc:	f200 80b9 	bhi.w	8001442 <__udivmoddi4+0x2b2>
 80012d0:	1a84      	subs	r4, r0, r2
 80012d2:	eb65 0303 	sbc.w	r3, r5, r3
 80012d6:	2001      	movs	r0, #1
 80012d8:	469e      	mov	lr, r3
 80012da:	2e00      	cmp	r6, #0
 80012dc:	d0aa      	beq.n	8001234 <__udivmoddi4+0xa4>
 80012de:	e9c6 4e00 	strd	r4, lr, [r6]
 80012e2:	e7a7      	b.n	8001234 <__udivmoddi4+0xa4>
 80012e4:	409f      	lsls	r7, r3
 80012e6:	f1c3 0220 	rsb	r2, r3, #32
 80012ea:	40d1      	lsrs	r1, r2
 80012ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80012f4:	fa1f f887 	uxth.w	r8, r7
 80012f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80012fc:	fa24 f202 	lsr.w	r2, r4, r2
 8001300:	409d      	lsls	r5, r3
 8001302:	fb00 fc08 	mul.w	ip, r0, r8
 8001306:	432a      	orrs	r2, r5
 8001308:	0c15      	lsrs	r5, r2, #16
 800130a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800130e:	45ac      	cmp	ip, r5
 8001310:	fa04 f403 	lsl.w	r4, r4, r3
 8001314:	d909      	bls.n	800132a <__udivmoddi4+0x19a>
 8001316:	197d      	adds	r5, r7, r5
 8001318:	f100 31ff 	add.w	r1, r0, #4294967295
 800131c:	f080 808f 	bcs.w	800143e <__udivmoddi4+0x2ae>
 8001320:	45ac      	cmp	ip, r5
 8001322:	f240 808c 	bls.w	800143e <__udivmoddi4+0x2ae>
 8001326:	3802      	subs	r0, #2
 8001328:	443d      	add	r5, r7
 800132a:	eba5 050c 	sub.w	r5, r5, ip
 800132e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001332:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001336:	fb01 f908 	mul.w	r9, r1, r8
 800133a:	b295      	uxth	r5, r2
 800133c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001340:	45a9      	cmp	r9, r5
 8001342:	d907      	bls.n	8001354 <__udivmoddi4+0x1c4>
 8001344:	197d      	adds	r5, r7, r5
 8001346:	f101 32ff 	add.w	r2, r1, #4294967295
 800134a:	d274      	bcs.n	8001436 <__udivmoddi4+0x2a6>
 800134c:	45a9      	cmp	r9, r5
 800134e:	d972      	bls.n	8001436 <__udivmoddi4+0x2a6>
 8001350:	3902      	subs	r1, #2
 8001352:	443d      	add	r5, r7
 8001354:	eba5 0509 	sub.w	r5, r5, r9
 8001358:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800135c:	e778      	b.n	8001250 <__udivmoddi4+0xc0>
 800135e:	f1c1 0720 	rsb	r7, r1, #32
 8001362:	408b      	lsls	r3, r1
 8001364:	fa22 fc07 	lsr.w	ip, r2, r7
 8001368:	ea4c 0c03 	orr.w	ip, ip, r3
 800136c:	fa25 f407 	lsr.w	r4, r5, r7
 8001370:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001374:	fbb4 f9fe 	udiv	r9, r4, lr
 8001378:	fa1f f88c 	uxth.w	r8, ip
 800137c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001380:	fa20 f307 	lsr.w	r3, r0, r7
 8001384:	fb09 fa08 	mul.w	sl, r9, r8
 8001388:	408d      	lsls	r5, r1
 800138a:	431d      	orrs	r5, r3
 800138c:	0c2b      	lsrs	r3, r5, #16
 800138e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001392:	45a2      	cmp	sl, r4
 8001394:	fa02 f201 	lsl.w	r2, r2, r1
 8001398:	fa00 f301 	lsl.w	r3, r0, r1
 800139c:	d909      	bls.n	80013b2 <__udivmoddi4+0x222>
 800139e:	eb1c 0404 	adds.w	r4, ip, r4
 80013a2:	f109 30ff 	add.w	r0, r9, #4294967295
 80013a6:	d248      	bcs.n	800143a <__udivmoddi4+0x2aa>
 80013a8:	45a2      	cmp	sl, r4
 80013aa:	d946      	bls.n	800143a <__udivmoddi4+0x2aa>
 80013ac:	f1a9 0902 	sub.w	r9, r9, #2
 80013b0:	4464      	add	r4, ip
 80013b2:	eba4 040a 	sub.w	r4, r4, sl
 80013b6:	fbb4 f0fe 	udiv	r0, r4, lr
 80013ba:	fb0e 4410 	mls	r4, lr, r0, r4
 80013be:	fb00 fa08 	mul.w	sl, r0, r8
 80013c2:	b2ad      	uxth	r5, r5
 80013c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013c8:	45a2      	cmp	sl, r4
 80013ca:	d908      	bls.n	80013de <__udivmoddi4+0x24e>
 80013cc:	eb1c 0404 	adds.w	r4, ip, r4
 80013d0:	f100 35ff 	add.w	r5, r0, #4294967295
 80013d4:	d22d      	bcs.n	8001432 <__udivmoddi4+0x2a2>
 80013d6:	45a2      	cmp	sl, r4
 80013d8:	d92b      	bls.n	8001432 <__udivmoddi4+0x2a2>
 80013da:	3802      	subs	r0, #2
 80013dc:	4464      	add	r4, ip
 80013de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013e2:	fba0 8902 	umull	r8, r9, r0, r2
 80013e6:	eba4 040a 	sub.w	r4, r4, sl
 80013ea:	454c      	cmp	r4, r9
 80013ec:	46c6      	mov	lr, r8
 80013ee:	464d      	mov	r5, r9
 80013f0:	d319      	bcc.n	8001426 <__udivmoddi4+0x296>
 80013f2:	d016      	beq.n	8001422 <__udivmoddi4+0x292>
 80013f4:	b15e      	cbz	r6, 800140e <__udivmoddi4+0x27e>
 80013f6:	ebb3 020e 	subs.w	r2, r3, lr
 80013fa:	eb64 0405 	sbc.w	r4, r4, r5
 80013fe:	fa04 f707 	lsl.w	r7, r4, r7
 8001402:	fa22 f301 	lsr.w	r3, r2, r1
 8001406:	431f      	orrs	r7, r3
 8001408:	40cc      	lsrs	r4, r1
 800140a:	e9c6 7400 	strd	r7, r4, [r6]
 800140e:	2100      	movs	r1, #0
 8001410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001414:	4631      	mov	r1, r6
 8001416:	4630      	mov	r0, r6
 8001418:	e70c      	b.n	8001234 <__udivmoddi4+0xa4>
 800141a:	468c      	mov	ip, r1
 800141c:	e6eb      	b.n	80011f6 <__udivmoddi4+0x66>
 800141e:	4610      	mov	r0, r2
 8001420:	e6ff      	b.n	8001222 <__udivmoddi4+0x92>
 8001422:	4543      	cmp	r3, r8
 8001424:	d2e6      	bcs.n	80013f4 <__udivmoddi4+0x264>
 8001426:	ebb8 0e02 	subs.w	lr, r8, r2
 800142a:	eb69 050c 	sbc.w	r5, r9, ip
 800142e:	3801      	subs	r0, #1
 8001430:	e7e0      	b.n	80013f4 <__udivmoddi4+0x264>
 8001432:	4628      	mov	r0, r5
 8001434:	e7d3      	b.n	80013de <__udivmoddi4+0x24e>
 8001436:	4611      	mov	r1, r2
 8001438:	e78c      	b.n	8001354 <__udivmoddi4+0x1c4>
 800143a:	4681      	mov	r9, r0
 800143c:	e7b9      	b.n	80013b2 <__udivmoddi4+0x222>
 800143e:	4608      	mov	r0, r1
 8001440:	e773      	b.n	800132a <__udivmoddi4+0x19a>
 8001442:	4608      	mov	r0, r1
 8001444:	e749      	b.n	80012da <__udivmoddi4+0x14a>
 8001446:	f1ac 0c02 	sub.w	ip, ip, #2
 800144a:	443d      	add	r5, r7
 800144c:	e713      	b.n	8001276 <__udivmoddi4+0xe6>
 800144e:	3802      	subs	r0, #2
 8001450:	443c      	add	r4, r7
 8001452:	e724      	b.n	800129e <__udivmoddi4+0x10e>

08001454 <__aeabi_idiv0>:
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop

08001458 <Mount_USB>:




void Mount_USB (void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 800145c:	2201      	movs	r2, #1
 800145e:	4905      	ldr	r1, [pc, #20]	; (8001474 <Mount_USB+0x1c>)
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <Mount_USB+0x20>)
 8001462:	f00b fba1 	bl	800cba8 <f_mount>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <Mount_USB+0x24>)
 800146c:	701a      	strb	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000cad8 	.word	0x2000cad8
 8001478:	2000cd08 	.word	0x2000cd08
 800147c:	2000c8d0 	.word	0x2000c8d0

08001480 <Unmount_USB>:
void Unmount_USB (void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8001484:	2201      	movs	r2, #1
 8001486:	4905      	ldr	r1, [pc, #20]	; (800149c <Unmount_USB+0x1c>)
 8001488:	2000      	movs	r0, #0
 800148a:	f00b fb8d 	bl	800cba8 <f_mount>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <Unmount_USB+0x20>)
 8001494:	701a      	strb	r2, [r3, #0]
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000cad8 	.word	0x2000cad8
 80014a0:	2000c8d0 	.word	0x2000c8d0

080014a4 <Scan_USB>:
char *path[20*8] = {0};
/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	6018      	str	r0, [r3, #0]
    DIR dir;
    UINT i=0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c


    fresult = f_opendir(&dir, *path);                       /* Open the directory */
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <Scan_USB+0xd4>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00c f853 	bl	800d56c <f_opendir>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b2c      	ldr	r3, [pc, #176]	; (800157c <Scan_USB+0xd8>)
 80014cc:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80014ce:	4b2b      	ldr	r3, [pc, #172]	; (800157c <Scan_USB+0xd8>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d143      	bne.n	800155e <Scan_USB+0xba>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4929      	ldr	r1, [pc, #164]	; (8001580 <Scan_USB+0xdc>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f00c f8ec 	bl	800d6ba <f_readdir>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <Scan_USB+0xd8>)
 80014e8:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <Scan_USB+0xd8>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d130      	bne.n	8001554 <Scan_USB+0xb0>
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <Scan_USB+0xdc>)
 80014f4:	7a5b      	ldrb	r3, [r3, #9]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d02c      	beq.n	8001554 <Scan_USB+0xb0>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <Scan_USB+0xdc>)
 80014fc:	7a1b      	ldrb	r3, [r3, #8]
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0e7      	beq.n	80014d6 <Scan_USB+0x32>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001506:	491f      	ldr	r1, [pc, #124]	; (8001584 <Scan_USB+0xe0>)
 8001508:	481f      	ldr	r0, [pc, #124]	; (8001588 <Scan_USB+0xe4>)
 800150a:	f7fe fe5d 	bl	80001c8 <strcmp>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d01a      	beq.n	800154a <Scan_USB+0xa6>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8001514:	491b      	ldr	r1, [pc, #108]	; (8001584 <Scan_USB+0xe0>)
 8001516:	481d      	ldr	r0, [pc, #116]	; (800158c <Scan_USB+0xe8>)
 8001518:	f7fe fe56 	bl	80001c8 <strcmp>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d015      	beq.n	800154e <Scan_USB+0xaa>
                fresult = Scan_USB(*path);                     /* Enter the directory */
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <Scan_USB+0xd4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ffbc 	bl	80014a4 <Scan_USB>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <Scan_USB+0xd8>)
 8001532:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <Scan_USB+0xd8>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10a      	bne.n	8001552 <Scan_USB+0xae>
                path[i] = 0;
 800153c:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <Scan_USB+0xd4>)
 800153e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001542:	2100      	movs	r1, #0
 8001544:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001548:	e7c5      	b.n	80014d6 <Scan_USB+0x32>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 800154a:	bf00      	nop
 800154c:	e7c3      	b.n	80014d6 <Scan_USB+0x32>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800154e:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8001550:	e7c1      	b.n	80014d6 <Scan_USB+0x32>
                if (fresult != FR_OK) break;
 8001552:	bf00      	nop
            }
            else
            {
            }
        }
        f_closedir(&dir);
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	4618      	mov	r0, r3
 800155a:	f00c f889 	bl	800d670 <f_closedir>
    }
    free(*path);
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <Scan_USB+0xd4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f00c ff04 	bl	800e370 <free>
    return fresult;
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <Scan_USB+0xd8>)
 800156a:	781b      	ldrb	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000250 	.word	0x20000250
 800157c:	2000c8d0 	.word	0x2000c8d0
 8001580:	2000c8d4 	.word	0x2000c8d4
 8001584:	2000c8dd 	.word	0x2000c8dd
 8001588:	08012ba8 	.word	0x08012ba8
 800158c:	08012bb4 	.word	0x08012bb4

08001590 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 800159a:	491c      	ldr	r1, [pc, #112]	; (800160c <Write_File+0x7c>)
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f00c f8d2 	bl	800d746 <f_stat>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <Write_File+0x80>)
 80015a8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <Write_File+0x80>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <Write_File+0x28>
	{
	    return fresult;
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <Write_File+0x80>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	e025      	b.n	8001604 <Write_File+0x74>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 80015b8:	2202      	movs	r2, #2
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4815      	ldr	r0, [pc, #84]	; (8001614 <Write_File+0x84>)
 80015be:	f00b fb3b 	bl	800cc38 <f_open>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <Write_File+0x80>)
 80015c8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <Write_File+0x80>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <Write_File+0x48>
	    {
	        return fresult;
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <Write_File+0x80>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	e015      	b.n	8001604 <Write_File+0x74>
	    }

	    else
	    {

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 80015d8:	6838      	ldr	r0, [r7, #0]
 80015da:	f7fe fdff 	bl	80001dc <strlen>
 80015de:	4602      	mov	r2, r0
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <Write_File+0x88>)
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <Write_File+0x84>)
 80015e6:	f00b fd32 	bl	800d04e <f_write>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <Write_File+0x80>)
 80015f0:	701a      	strb	r2, [r3, #0]

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 80015f2:	4808      	ldr	r0, [pc, #32]	; (8001614 <Write_File+0x84>)
 80015f4:	f00b ff92 	bl	800d51c <f_close>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <Write_File+0x80>)
 80015fe:	701a      	strb	r2, [r3, #0]
	    }
	    return fresult;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <Write_File+0x80>)
 8001602:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000c8d4 	.word	0x2000c8d4
 8001610:	2000c8d0 	.word	0x2000c8d0
 8001614:	2000cadc 	.word	0x2000cadc
 8001618:	2000c8cc 	.word	0x2000c8cc

0800161c <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8001624:	4915      	ldr	r1, [pc, #84]	; (800167c <Create_File+0x60>)
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f00c f88d 	bl	800d746 <f_stat>
 800162c:	4603      	mov	r3, r0
 800162e:	461a      	mov	r2, r3
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <Create_File+0x64>)
 8001632:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <Create_File+0x64>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <Create_File+0x26>
	{
	    return fresult;
 800163c:	4b10      	ldr	r3, [pc, #64]	; (8001680 <Create_File+0x64>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	e018      	b.n	8001674 <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001642:	220b      	movs	r2, #11
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	480f      	ldr	r0, [pc, #60]	; (8001684 <Create_File+0x68>)
 8001648:	f00b faf6 	bl	800cc38 <f_open>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <Create_File+0x64>)
 8001652:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <Create_File+0x64>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <Create_File+0x46>
		{

		    return fresult;
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <Create_File+0x64>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	e008      	b.n	8001674 <Create_File+0x58>
		else
		{

		}

		fresult = f_close(&USBHFile);
 8001662:	4808      	ldr	r0, [pc, #32]	; (8001684 <Create_File+0x68>)
 8001664:	f00b ff5a 	bl	800d51c <f_close>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <Create_File+0x64>)
 800166e:	701a      	strb	r2, [r3, #0]

	}
    return fresult;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <Create_File+0x64>)
 8001672:	781b      	ldrb	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000c8d4 	.word	0x2000c8d4
 8001680:	2000c8d0 	.word	0x2000c8d0
 8001684:	2000cadc 	.word	0x2000cadc

08001688 <Check_USB_Details>:

    return fresult;
}

void Check_USB_Details (void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 800168c:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <Check_USB_Details+0x80>)
 800168e:	491f      	ldr	r1, [pc, #124]	; (800170c <Check_USB_Details+0x84>)
 8001690:	481f      	ldr	r0, [pc, #124]	; (8001710 <Check_USB_Details+0x88>)
 8001692:	f00c f8a1 	bl	800d7d8 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <Check_USB_Details+0x80>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800169e:	3b02      	subs	r3, #2
 80016a0:	4a19      	ldr	r2, [pc, #100]	; (8001708 <Check_USB_Details+0x80>)
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe fedf 	bl	8000470 <__aeabi_ui2d>
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <Check_USB_Details+0x8c>)
 80016b8:	f7fe ff54 	bl	8000564 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fa26 	bl	8000b14 <__aeabi_d2uiz>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4a13      	ldr	r2, [pc, #76]	; (8001718 <Check_USB_Details+0x90>)
 80016cc:	6013      	str	r3, [r2, #0]

    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <Check_USB_Details+0x80>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <Check_USB_Details+0x84>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fb03 f302 	mul.w	r3, r3, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fec5 	bl	8000470 <__aeabi_ui2d>
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <Check_USB_Details+0x8c>)
 80016ec:	f7fe ff3a 	bl	8000564 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff fa0c 	bl	8000b14 <__aeabi_d2uiz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a07      	ldr	r2, [pc, #28]	; (800171c <Check_USB_Details+0x94>)
 8001700:	6013      	str	r3, [r2, #0]
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000c8c4 	.word	0x2000c8c4
 800170c:	2000c8bc 	.word	0x2000c8bc
 8001710:	08012bd0 	.word	0x08012bd0
 8001714:	3fe00000 	.word	0x3fe00000
 8001718:	2000c8ec 	.word	0x2000c8ec
 800171c:	2000c8c8 	.word	0x2000c8c8

08001720 <setTimeDate>:
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &sDate,RTC_FORMAT_BIN);
}

void setTimeDate(uint8_t month, uint8_t day, uint8_t year, uint8_t hours, uint8_t min, uint8_t sec)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4604      	mov	r4, r0
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4623      	mov	r3, r4
 8001730:	71fb      	strb	r3, [r7, #7]
 8001732:	4603      	mov	r3, r0
 8001734:	71bb      	strb	r3, [r7, #6]
 8001736:	460b      	mov	r3, r1
 8001738:	717b      	strb	r3, [r7, #5]
 800173a:	4613      	mov	r3, r2
 800173c:	713b      	strb	r3, [r7, #4]
	sTime.Hours = hours;
 800173e:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <setTimeDate+0x84>)
 8001740:	793b      	ldrb	r3, [r7, #4]
 8001742:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 8001744:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <setTimeDate+0x84>)
 8001746:	7e3b      	ldrb	r3, [r7, #24]
 8001748:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 800174a:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <setTimeDate+0x84>)
 800174c:	7f3b      	ldrb	r3, [r7, #28]
 800174e:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <setTimeDate+0x84>)
 8001752:	2200      	movs	r2, #0
 8001754:	605a      	str	r2, [r3, #4]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <setTimeDate+0x84>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
	if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 800175c:	2201      	movs	r2, #1
 800175e:	4911      	ldr	r1, [pc, #68]	; (80017a4 <setTimeDate+0x84>)
 8001760:	4811      	ldr	r0, [pc, #68]	; (80017a8 <setTimeDate+0x88>)
 8001762:	f004 fb29 	bl	8005db8 <HAL_RTC_SetTime>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <setTimeDate+0x50>
 800176c:	f001 f80c 	bl	8002788 <Error_Handler>

	sDate.WeekDay = 0x01;
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <setTimeDate+0x8c>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
	sDate.Month = month;
 8001776:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <setTimeDate+0x8c>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	7053      	strb	r3, [r2, #1]
	sDate.Date = day;
 800177c:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <setTimeDate+0x8c>)
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	7093      	strb	r3, [r2, #2]
	sDate.Year = year;
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <setTimeDate+0x8c>)
 8001784:	797b      	ldrb	r3, [r7, #5]
 8001786:	70d3      	strb	r3, [r2, #3]
	if(HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 8001788:	2201      	movs	r2, #1
 800178a:	4908      	ldr	r1, [pc, #32]	; (80017ac <setTimeDate+0x8c>)
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <setTimeDate+0x88>)
 800178e:	f004 fbc9 	bl	8005f24 <HAL_RTC_SetDate>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <setTimeDate+0x7c>
 8001798:	f000 fff6 	bl	8002788 <Error_Handler>
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	2000c86c 	.word	0x2000c86c
 80017a8:	2000c9c8 	.word	0x2000c9c8
 80017ac:	2000c878 	.word	0x2000c878

080017b0 <fanOn>:

float system_fan_sp = 5.5;
float plant_fan_sp = 3.5;
float heat_cool_fan_sp = 3.5; // set default fan speed values
void fanOn()
{
 80017b0:	b598      	push	{r3, r4, r7, lr}
 80017b2:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// start heater cooler fan control
 80017b4:	2100      	movs	r1, #0
 80017b6:	482f      	ldr	r0, [pc, #188]	; (8001874 <fanOn+0xc4>)
 80017b8:	f004 ff06 	bl	80065c8 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 80017bc:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <fanOn+0xc8>)
 80017be:	f640 323f 	movw	r2, #2879	; 0xb3f
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;	// sets the fan speed
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <fanOn+0xc8>)
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fac9 	bl	8000d60 <__aeabi_ui2f>
 80017ce:	4602      	mov	r2, r0
 80017d0:	4b2a      	ldr	r3, [pc, #168]	; (800187c <fanOn+0xcc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4610      	mov	r0, r2
 80017d8:	f7ff fbce 	bl	8000f78 <__aeabi_fdiv>
 80017dc:	4603      	mov	r3, r0
 80017de:	4c26      	ldr	r4, [pc, #152]	; (8001878 <fanOn+0xc8>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fc65 	bl	80010b0 <__aeabi_f2uiz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <fanOn+0xc8>)
 80017ec:	f245 0214 	movw	r2, #20500	; 0x5014
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// start system fan control
 80017f2:	2108      	movs	r1, #8
 80017f4:	481f      	ldr	r0, [pc, #124]	; (8001874 <fanOn+0xc4>)
 80017f6:	f004 fee7 	bl	80065c8 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <fanOn+0xc8>)
 80017fc:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR3 = (TIM1->ARR)/system_fan_sp;		// sets the fan speed
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <fanOn+0xc8>)
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff faaa 	bl	8000d60 <__aeabi_ui2f>
 800180c:	4602      	mov	r2, r0
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <fanOn+0xd0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f7ff fbaf 	bl	8000f78 <__aeabi_fdiv>
 800181a:	4603      	mov	r3, r0
 800181c:	4c16      	ldr	r4, [pc, #88]	; (8001878 <fanOn+0xc8>)
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fc46 	bl	80010b0 <__aeabi_f2uiz>
 8001824:	4603      	mov	r3, r0
 8001826:	63e3      	str	r3, [r4, #60]	; 0x3c
   TIM1->CNT = 20500;
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <fanOn+0xc8>)
 800182a:	f245 0214 	movw	r2, #20500	; 0x5014
 800182e:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);	// start plant fan control
 8001830:	2100      	movs	r1, #0
 8001832:	4814      	ldr	r0, [pc, #80]	; (8001884 <fanOn+0xd4>)
 8001834:	f004 fec8 	bl	80065c8 <HAL_TIM_PWM_Start>
   TIM10->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <fanOn+0xd8>)
 800183a:	f640 323f 	movw	r2, #2879	; 0xb3f
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM10->CCR1 = (TIM10->ARR)/plant_fan_sp;		// sets the fan speed
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <fanOn+0xd8>)
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fa8b 	bl	8000d60 <__aeabi_ui2f>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <fanOn+0xdc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f7ff fb90 	bl	8000f78 <__aeabi_fdiv>
 8001858:	4603      	mov	r3, r0
 800185a:	4c0b      	ldr	r4, [pc, #44]	; (8001888 <fanOn+0xd8>)
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fc27 	bl	80010b0 <__aeabi_f2uiz>
 8001862:	4603      	mov	r3, r0
 8001864:	6363      	str	r3, [r4, #52]	; 0x34
   TIM10->CNT = 20500;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <fanOn+0xd8>)
 8001868:	f245 0214 	movw	r2, #20500	; 0x5014
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800186e:	bf00      	nop
 8001870:	bd98      	pop	{r3, r4, r7, pc}
 8001872:	bf00      	nop
 8001874:	2000c9fc 	.word	0x2000c9fc
 8001878:	40010000 	.word	0x40010000
 800187c:	20000008 	.word	0x20000008
 8001880:	20000000 	.word	0x20000000
 8001884:	2000c980 	.word	0x2000c980
 8001888:	40014400 	.word	0x40014400
 800188c:	20000004 	.word	0x20000004

08001890 <floatToString>:
char file_name[25] = "data_";
char extention[5] = ".csv";
char buffer[25] = {0};
char convertedString[10] = {0};

void floatToString(double FP_NUM) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	e9c7 0100 	strd	r0, r1, [r7]
        double fpnumber;
        long int befdec, aftdec;

        fpnumber = FP_NUM;
 800189a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800189e:	e9c7 2304 	strd	r2, r3, [r7, #16]

        befdec = fpnumber;                      // Fractional part is truncated
 80018a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018a6:	f7ff f90d 	bl	8000ac4 <__aeabi_d2iz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	60fb      	str	r3, [r7, #12]
                                                // 12.163456 becomes 12
        aftdec = fpnumber * 100;            // 12.163456 becomes 1216
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	4bae      	ldr	r3, [pc, #696]	; (8001b6c <floatToString+0x2dc>)
 80018b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018b8:	f7fe fe54 	bl	8000564 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f8fe 	bl	8000ac4 <__aeabi_d2iz>
 80018c8:	4603      	mov	r3, r0
 80018ca:	60bb      	str	r3, [r7, #8]
        aftdec = aftdec - (befdec * 100);   // 1216 - 1200 = 16
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	4413      	add	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]


        if (fpnumber < 1) {
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	4ba3      	ldr	r3, [pc, #652]	; (8001b70 <floatToString+0x2e0>)
 80018e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018e6:	f7ff f8af 	bl	8000a48 <__aeabi_dcmplt>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d02f      	beq.n	8001950 <floatToString+0xc0>
                convertedString[0] = '0';
 80018f0:	4ba0      	ldr	r3, [pc, #640]	; (8001b74 <floatToString+0x2e4>)
 80018f2:	2230      	movs	r2, #48	; 0x30
 80018f4:	701a      	strb	r2, [r3, #0]
                convertedString[1] = '.';
 80018f6:	4b9f      	ldr	r3, [pc, #636]	; (8001b74 <floatToString+0x2e4>)
 80018f8:	222e      	movs	r2, #46	; 0x2e
 80018fa:	705a      	strb	r2, [r3, #1]
                convertedString[2] = (aftdec/10) + 48;
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4a9e      	ldr	r2, [pc, #632]	; (8001b78 <floatToString+0x2e8>)
 8001900:	fb82 1203 	smull	r1, r2, r2, r3
 8001904:	1092      	asrs	r2, r2, #2
 8001906:	17db      	asrs	r3, r3, #31
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	3330      	adds	r3, #48	; 0x30
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b98      	ldr	r3, [pc, #608]	; (8001b74 <floatToString+0x2e4>)
 8001912:	709a      	strb	r2, [r3, #2]
                convertedString[3] = (aftdec/1)%10 + 48;
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	4b98      	ldr	r3, [pc, #608]	; (8001b78 <floatToString+0x2e8>)
 8001918:	fb83 1302 	smull	r1, r3, r3, r2
 800191c:	1099      	asrs	r1, r3, #2
 800191e:	17d3      	asrs	r3, r2, #31
 8001920:	1ac9      	subs	r1, r1, r3
 8001922:	460b      	mov	r3, r1
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	1ad1      	subs	r1, r2, r3
 800192c:	b2cb      	uxtb	r3, r1
 800192e:	3330      	adds	r3, #48	; 0x30
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b90      	ldr	r3, [pc, #576]	; (8001b74 <floatToString+0x2e4>)
 8001934:	70da      	strb	r2, [r3, #3]
                convertedString[4] = ' ';
 8001936:	4b8f      	ldr	r3, [pc, #572]	; (8001b74 <floatToString+0x2e4>)
 8001938:	2220      	movs	r2, #32
 800193a:	711a      	strb	r2, [r3, #4]
                convertedString[5] = ' ';
 800193c:	4b8d      	ldr	r3, [pc, #564]	; (8001b74 <floatToString+0x2e4>)
 800193e:	2220      	movs	r2, #32
 8001940:	715a      	strb	r2, [r3, #5]
                convertedString[6] = ' ';
 8001942:	4b8c      	ldr	r3, [pc, #560]	; (8001b74 <floatToString+0x2e4>)
 8001944:	2220      	movs	r2, #32
 8001946:	719a      	strb	r2, [r3, #6]
                convertedString[7] = '\0';
 8001948:	4b8a      	ldr	r3, [pc, #552]	; (8001b74 <floatToString+0x2e4>)
 800194a:	2200      	movs	r2, #0
 800194c:	71da      	strb	r2, [r3, #7]
                convertedString[7] = '\0';

        }


}
 800194e:	e21b      	b.n	8001d88 <floatToString+0x4f8>
        else if ((fpnumber >= 1) && (fpnumber < 10)) {
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4b86      	ldr	r3, [pc, #536]	; (8001b70 <floatToString+0x2e0>)
 8001956:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800195a:	f7ff f889 	bl	8000a70 <__aeabi_dcmpge>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d047      	beq.n	80019f4 <floatToString+0x164>
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b84      	ldr	r3, [pc, #528]	; (8001b7c <floatToString+0x2ec>)
 800196a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800196e:	f7ff f86b 	bl	8000a48 <__aeabi_dcmplt>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d03d      	beq.n	80019f4 <floatToString+0x164>
                convertedString[0] = (befdec/1)%10 + 48;
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	4b7f      	ldr	r3, [pc, #508]	; (8001b78 <floatToString+0x2e8>)
 800197c:	fb83 1302 	smull	r1, r3, r3, r2
 8001980:	1099      	asrs	r1, r3, #2
 8001982:	17d3      	asrs	r3, r2, #31
 8001984:	1ac9      	subs	r1, r1, r3
 8001986:	460b      	mov	r3, r1
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	1ad1      	subs	r1, r2, r3
 8001990:	b2cb      	uxtb	r3, r1
 8001992:	3330      	adds	r3, #48	; 0x30
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4b77      	ldr	r3, [pc, #476]	; (8001b74 <floatToString+0x2e4>)
 8001998:	701a      	strb	r2, [r3, #0]
                convertedString[1] = '.';
 800199a:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <floatToString+0x2e4>)
 800199c:	222e      	movs	r2, #46	; 0x2e
 800199e:	705a      	strb	r2, [r3, #1]
                convertedString[2] = (aftdec/10) + 48;
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4a75      	ldr	r2, [pc, #468]	; (8001b78 <floatToString+0x2e8>)
 80019a4:	fb82 1203 	smull	r1, r2, r2, r3
 80019a8:	1092      	asrs	r2, r2, #2
 80019aa:	17db      	asrs	r3, r3, #31
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3330      	adds	r3, #48	; 0x30
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <floatToString+0x2e4>)
 80019b6:	709a      	strb	r2, [r3, #2]
                convertedString[3] = (aftdec/1)%10 + 48;
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	4b6f      	ldr	r3, [pc, #444]	; (8001b78 <floatToString+0x2e8>)
 80019bc:	fb83 1302 	smull	r1, r3, r3, r2
 80019c0:	1099      	asrs	r1, r3, #2
 80019c2:	17d3      	asrs	r3, r2, #31
 80019c4:	1ac9      	subs	r1, r1, r3
 80019c6:	460b      	mov	r3, r1
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	1ad1      	subs	r1, r2, r3
 80019d0:	b2cb      	uxtb	r3, r1
 80019d2:	3330      	adds	r3, #48	; 0x30
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <floatToString+0x2e4>)
 80019d8:	70da      	strb	r2, [r3, #3]
                convertedString[4] = ' ';
 80019da:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <floatToString+0x2e4>)
 80019dc:	2220      	movs	r2, #32
 80019de:	711a      	strb	r2, [r3, #4]
                convertedString[5] = ' ';
 80019e0:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <floatToString+0x2e4>)
 80019e2:	2220      	movs	r2, #32
 80019e4:	715a      	strb	r2, [r3, #5]
                convertedString[6] = ' ';
 80019e6:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <floatToString+0x2e4>)
 80019e8:	2220      	movs	r2, #32
 80019ea:	719a      	strb	r2, [r3, #6]
                convertedString[7] = '\0';
 80019ec:	4b61      	ldr	r3, [pc, #388]	; (8001b74 <floatToString+0x2e4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	71da      	strb	r2, [r3, #7]
 80019f2:	e1c9      	b.n	8001d88 <floatToString+0x4f8>
        else if ((fpnumber >= 10) && (fpnumber < 100)) {
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	4b60      	ldr	r3, [pc, #384]	; (8001b7c <floatToString+0x2ec>)
 80019fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019fe:	f7ff f837 	bl	8000a70 <__aeabi_dcmpge>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d050      	beq.n	8001aaa <floatToString+0x21a>
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b57      	ldr	r3, [pc, #348]	; (8001b6c <floatToString+0x2dc>)
 8001a0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a12:	f7ff f819 	bl	8000a48 <__aeabi_dcmplt>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d046      	beq.n	8001aaa <floatToString+0x21a>
                convertedString[0] = (befdec/10) + 48;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4a56      	ldr	r2, [pc, #344]	; (8001b78 <floatToString+0x2e8>)
 8001a20:	fb82 1203 	smull	r1, r2, r2, r3
 8001a24:	1092      	asrs	r2, r2, #2
 8001a26:	17db      	asrs	r3, r3, #31
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	3330      	adds	r3, #48	; 0x30
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <floatToString+0x2e4>)
 8001a32:	701a      	strb	r2, [r3, #0]
                convertedString[1] = (befdec/1)%10 + 48;
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <floatToString+0x2e8>)
 8001a38:	fb83 1302 	smull	r1, r3, r3, r2
 8001a3c:	1099      	asrs	r1, r3, #2
 8001a3e:	17d3      	asrs	r3, r2, #31
 8001a40:	1ac9      	subs	r1, r1, r3
 8001a42:	460b      	mov	r3, r1
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	1ad1      	subs	r1, r2, r3
 8001a4c:	b2cb      	uxtb	r3, r1
 8001a4e:	3330      	adds	r3, #48	; 0x30
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <floatToString+0x2e4>)
 8001a54:	705a      	strb	r2, [r3, #1]
                convertedString[2] = '.';
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <floatToString+0x2e4>)
 8001a58:	222e      	movs	r2, #46	; 0x2e
 8001a5a:	709a      	strb	r2, [r3, #2]
                convertedString[3] = (aftdec/10) + 48;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4a46      	ldr	r2, [pc, #280]	; (8001b78 <floatToString+0x2e8>)
 8001a60:	fb82 1203 	smull	r1, r2, r2, r3
 8001a64:	1092      	asrs	r2, r2, #2
 8001a66:	17db      	asrs	r3, r3, #31
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	3330      	adds	r3, #48	; 0x30
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b40      	ldr	r3, [pc, #256]	; (8001b74 <floatToString+0x2e4>)
 8001a72:	70da      	strb	r2, [r3, #3]
                convertedString[4] = (aftdec/1)%10 + 48;
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	4b40      	ldr	r3, [pc, #256]	; (8001b78 <floatToString+0x2e8>)
 8001a78:	fb83 1302 	smull	r1, r3, r3, r2
 8001a7c:	1099      	asrs	r1, r3, #2
 8001a7e:	17d3      	asrs	r3, r2, #31
 8001a80:	1ac9      	subs	r1, r1, r3
 8001a82:	460b      	mov	r3, r1
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	1ad1      	subs	r1, r2, r3
 8001a8c:	b2cb      	uxtb	r3, r1
 8001a8e:	3330      	adds	r3, #48	; 0x30
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <floatToString+0x2e4>)
 8001a94:	711a      	strb	r2, [r3, #4]
                convertedString[5] = ' ';
 8001a96:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <floatToString+0x2e4>)
 8001a98:	2220      	movs	r2, #32
 8001a9a:	715a      	strb	r2, [r3, #5]
                convertedString[6] = ' ';
 8001a9c:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <floatToString+0x2e4>)
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	719a      	strb	r2, [r3, #6]
                convertedString[7] = '\0';
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <floatToString+0x2e4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	71da      	strb	r2, [r3, #7]
 8001aa8:	e16e      	b.n	8001d88 <floatToString+0x4f8>
        else if ((fpnumber >= 100) && (fpnumber < 1000)) {
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <floatToString+0x2dc>)
 8001ab0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ab4:	f7fe ffdc 	bl	8000a70 <__aeabi_dcmpge>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d064      	beq.n	8001b88 <floatToString+0x2f8>
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <floatToString+0x2f0>)
 8001ac4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ac8:	f7fe ffbe 	bl	8000a48 <__aeabi_dcmplt>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d05a      	beq.n	8001b88 <floatToString+0x2f8>
                convertedString[0] = (befdec/100) + 48;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4a2b      	ldr	r2, [pc, #172]	; (8001b84 <floatToString+0x2f4>)
 8001ad6:	fb82 1203 	smull	r1, r2, r2, r3
 8001ada:	1152      	asrs	r2, r2, #5
 8001adc:	17db      	asrs	r3, r3, #31
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3330      	adds	r3, #48	; 0x30
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <floatToString+0x2e4>)
 8001ae8:	701a      	strb	r2, [r3, #0]
                convertedString[1] = (befdec/10)%10 + 48;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <floatToString+0x2e8>)
 8001aee:	fb82 1203 	smull	r1, r2, r2, r3
 8001af2:	1092      	asrs	r2, r2, #2
 8001af4:	17db      	asrs	r3, r3, #31
 8001af6:	1ad2      	subs	r2, r2, r3
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <floatToString+0x2e8>)
 8001afa:	fb83 1302 	smull	r1, r3, r3, r2
 8001afe:	1099      	asrs	r1, r3, #2
 8001b00:	17d3      	asrs	r3, r2, #31
 8001b02:	1ac9      	subs	r1, r1, r3
 8001b04:	460b      	mov	r3, r1
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	1ad1      	subs	r1, r2, r3
 8001b0e:	b2cb      	uxtb	r3, r1
 8001b10:	3330      	adds	r3, #48	; 0x30
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <floatToString+0x2e4>)
 8001b16:	705a      	strb	r2, [r3, #1]
                convertedString[2] = (befdec/1)%10 + 48;
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <floatToString+0x2e8>)
 8001b1c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b20:	1099      	asrs	r1, r3, #2
 8001b22:	17d3      	asrs	r3, r2, #31
 8001b24:	1ac9      	subs	r1, r1, r3
 8001b26:	460b      	mov	r3, r1
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	1ad1      	subs	r1, r2, r3
 8001b30:	b2cb      	uxtb	r3, r1
 8001b32:	3330      	adds	r3, #48	; 0x30
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <floatToString+0x2e4>)
 8001b38:	709a      	strb	r2, [r3, #2]
                convertedString[3] = '.';
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <floatToString+0x2e4>)
 8001b3c:	222e      	movs	r2, #46	; 0x2e
 8001b3e:	70da      	strb	r2, [r3, #3]
                convertedString[4] = (aftdec/10) + 48;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <floatToString+0x2e8>)
 8001b44:	fb82 1203 	smull	r1, r2, r2, r3
 8001b48:	1092      	asrs	r2, r2, #2
 8001b4a:	17db      	asrs	r3, r3, #31
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	3330      	adds	r3, #48	; 0x30
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <floatToString+0x2e4>)
 8001b56:	711a      	strb	r2, [r3, #4]
                convertedString[5] = ' ';
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <floatToString+0x2e4>)
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	715a      	strb	r2, [r3, #5]
                convertedString[6] = ' ';
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <floatToString+0x2e4>)
 8001b60:	2220      	movs	r2, #32
 8001b62:	719a      	strb	r2, [r3, #6]
                convertedString[7] = '\0';
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <floatToString+0x2e4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	71da      	strb	r2, [r3, #7]
 8001b6a:	e10d      	b.n	8001d88 <floatToString+0x4f8>
 8001b6c:	40590000 	.word	0x40590000
 8001b70:	3ff00000 	.word	0x3ff00000
 8001b74:	2000c848 	.word	0x2000c848
 8001b78:	66666667 	.word	0x66666667
 8001b7c:	40240000 	.word	0x40240000
 8001b80:	408f4000 	.word	0x408f4000
 8001b84:	51eb851f 	.word	0x51eb851f
        else if ((fpnumber >= 1000) && (fpnumber < 10000)) {
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	4b84      	ldr	r3, [pc, #528]	; (8001da0 <floatToString+0x510>)
 8001b8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b92:	f7fe ff6d 	bl	8000a70 <__aeabi_dcmpge>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d06a      	beq.n	8001c72 <floatToString+0x3e2>
 8001b9c:	a37c      	add	r3, pc, #496	; (adr r3, 8001d90 <floatToString+0x500>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ba6:	f7fe ff4f 	bl	8000a48 <__aeabi_dcmplt>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d060      	beq.n	8001c72 <floatToString+0x3e2>
                convertedString[0] = (befdec/1000) + 48;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4a7c      	ldr	r2, [pc, #496]	; (8001da4 <floatToString+0x514>)
 8001bb4:	fb82 1203 	smull	r1, r2, r2, r3
 8001bb8:	1192      	asrs	r2, r2, #6
 8001bba:	17db      	asrs	r3, r3, #31
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	3330      	adds	r3, #48	; 0x30
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <floatToString+0x518>)
 8001bc6:	701a      	strb	r2, [r3, #0]
                convertedString[1] = (befdec/100)%10 + 48;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a78      	ldr	r2, [pc, #480]	; (8001dac <floatToString+0x51c>)
 8001bcc:	fb82 1203 	smull	r1, r2, r2, r3
 8001bd0:	1152      	asrs	r2, r2, #5
 8001bd2:	17db      	asrs	r3, r3, #31
 8001bd4:	1ad2      	subs	r2, r2, r3
 8001bd6:	4b76      	ldr	r3, [pc, #472]	; (8001db0 <floatToString+0x520>)
 8001bd8:	fb83 1302 	smull	r1, r3, r3, r2
 8001bdc:	1099      	asrs	r1, r3, #2
 8001bde:	17d3      	asrs	r3, r2, #31
 8001be0:	1ac9      	subs	r1, r1, r3
 8001be2:	460b      	mov	r3, r1
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	1ad1      	subs	r1, r2, r3
 8001bec:	b2cb      	uxtb	r3, r1
 8001bee:	3330      	adds	r3, #48	; 0x30
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <floatToString+0x518>)
 8001bf4:	705a      	strb	r2, [r3, #1]
                convertedString[2] = (befdec/10)%10 + 48;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4a6d      	ldr	r2, [pc, #436]	; (8001db0 <floatToString+0x520>)
 8001bfa:	fb82 1203 	smull	r1, r2, r2, r3
 8001bfe:	1092      	asrs	r2, r2, #2
 8001c00:	17db      	asrs	r3, r3, #31
 8001c02:	1ad2      	subs	r2, r2, r3
 8001c04:	4b6a      	ldr	r3, [pc, #424]	; (8001db0 <floatToString+0x520>)
 8001c06:	fb83 1302 	smull	r1, r3, r3, r2
 8001c0a:	1099      	asrs	r1, r3, #2
 8001c0c:	17d3      	asrs	r3, r2, #31
 8001c0e:	1ac9      	subs	r1, r1, r3
 8001c10:	460b      	mov	r3, r1
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	1ad1      	subs	r1, r2, r3
 8001c1a:	b2cb      	uxtb	r3, r1
 8001c1c:	3330      	adds	r3, #48	; 0x30
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b61      	ldr	r3, [pc, #388]	; (8001da8 <floatToString+0x518>)
 8001c22:	709a      	strb	r2, [r3, #2]
                convertedString[3] = (befdec/1)%10 + 48;
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4b62      	ldr	r3, [pc, #392]	; (8001db0 <floatToString+0x520>)
 8001c28:	fb83 1302 	smull	r1, r3, r3, r2
 8001c2c:	1099      	asrs	r1, r3, #2
 8001c2e:	17d3      	asrs	r3, r2, #31
 8001c30:	1ac9      	subs	r1, r1, r3
 8001c32:	460b      	mov	r3, r1
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	1ad1      	subs	r1, r2, r3
 8001c3c:	b2cb      	uxtb	r3, r1
 8001c3e:	3330      	adds	r3, #48	; 0x30
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <floatToString+0x518>)
 8001c44:	70da      	strb	r2, [r3, #3]
                convertedString[4] = '.';
 8001c46:	4b58      	ldr	r3, [pc, #352]	; (8001da8 <floatToString+0x518>)
 8001c48:	222e      	movs	r2, #46	; 0x2e
 8001c4a:	711a      	strb	r2, [r3, #4]
                convertedString[5] = (aftdec/10) + 48;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <floatToString+0x520>)
 8001c50:	fb82 1203 	smull	r1, r2, r2, r3
 8001c54:	1092      	asrs	r2, r2, #2
 8001c56:	17db      	asrs	r3, r3, #31
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	3330      	adds	r3, #48	; 0x30
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b51      	ldr	r3, [pc, #324]	; (8001da8 <floatToString+0x518>)
 8001c62:	715a      	strb	r2, [r3, #5]
                convertedString[6] = ' ';
 8001c64:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <floatToString+0x518>)
 8001c66:	2220      	movs	r2, #32
 8001c68:	719a      	strb	r2, [r3, #6]
                convertedString[7] = '\0';
 8001c6a:	4b4f      	ldr	r3, [pc, #316]	; (8001da8 <floatToString+0x518>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	71da      	strb	r2, [r3, #7]
 8001c70:	e08a      	b.n	8001d88 <floatToString+0x4f8>
        else if ((fpnumber >= 10000) && (fpnumber < 100000)) {
 8001c72:	a347      	add	r3, pc, #284	; (adr r3, 8001d90 <floatToString+0x500>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c7c:	f7fe fef8 	bl	8000a70 <__aeabi_dcmpge>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d100      	bne.n	8001c88 <floatToString+0x3f8>
}
 8001c86:	e07f      	b.n	8001d88 <floatToString+0x4f8>
        else if ((fpnumber >= 10000) && (fpnumber < 100000)) {
 8001c88:	a343      	add	r3, pc, #268	; (adr r3, 8001d98 <floatToString+0x508>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c92:	f7fe fed9 	bl	8000a48 <__aeabi_dcmplt>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d100      	bne.n	8001c9e <floatToString+0x40e>
}
 8001c9c:	e074      	b.n	8001d88 <floatToString+0x4f8>
                convertedString[0] = (befdec/10000) + 48;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4a44      	ldr	r2, [pc, #272]	; (8001db4 <floatToString+0x524>)
 8001ca2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca6:	1312      	asrs	r2, r2, #12
 8001ca8:	17db      	asrs	r3, r3, #31
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	3330      	adds	r3, #48	; 0x30
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <floatToString+0x518>)
 8001cb4:	701a      	strb	r2, [r3, #0]
                convertedString[1] = (befdec/1000)%10 + 48;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4a3a      	ldr	r2, [pc, #232]	; (8001da4 <floatToString+0x514>)
 8001cba:	fb82 1203 	smull	r1, r2, r2, r3
 8001cbe:	1192      	asrs	r2, r2, #6
 8001cc0:	17db      	asrs	r3, r3, #31
 8001cc2:	1ad2      	subs	r2, r2, r3
 8001cc4:	4b3a      	ldr	r3, [pc, #232]	; (8001db0 <floatToString+0x520>)
 8001cc6:	fb83 1302 	smull	r1, r3, r3, r2
 8001cca:	1099      	asrs	r1, r3, #2
 8001ccc:	17d3      	asrs	r3, r2, #31
 8001cce:	1ac9      	subs	r1, r1, r3
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	1ad1      	subs	r1, r2, r3
 8001cda:	b2cb      	uxtb	r3, r1
 8001cdc:	3330      	adds	r3, #48	; 0x30
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <floatToString+0x518>)
 8001ce2:	705a      	strb	r2, [r3, #1]
                convertedString[2] = (befdec/100)%10 + 48;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4a31      	ldr	r2, [pc, #196]	; (8001dac <floatToString+0x51c>)
 8001ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cec:	1152      	asrs	r2, r2, #5
 8001cee:	17db      	asrs	r3, r3, #31
 8001cf0:	1ad2      	subs	r2, r2, r3
 8001cf2:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <floatToString+0x520>)
 8001cf4:	fb83 1302 	smull	r1, r3, r3, r2
 8001cf8:	1099      	asrs	r1, r3, #2
 8001cfa:	17d3      	asrs	r3, r2, #31
 8001cfc:	1ac9      	subs	r1, r1, r3
 8001cfe:	460b      	mov	r3, r1
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	1ad1      	subs	r1, r2, r3
 8001d08:	b2cb      	uxtb	r3, r1
 8001d0a:	3330      	adds	r3, #48	; 0x30
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <floatToString+0x518>)
 8001d10:	709a      	strb	r2, [r3, #2]
                convertedString[3] = (befdec/10)%10 + 48;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <floatToString+0x520>)
 8001d16:	fb82 1203 	smull	r1, r2, r2, r3
 8001d1a:	1092      	asrs	r2, r2, #2
 8001d1c:	17db      	asrs	r3, r3, #31
 8001d1e:	1ad2      	subs	r2, r2, r3
 8001d20:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <floatToString+0x520>)
 8001d22:	fb83 1302 	smull	r1, r3, r3, r2
 8001d26:	1099      	asrs	r1, r3, #2
 8001d28:	17d3      	asrs	r3, r2, #31
 8001d2a:	1ac9      	subs	r1, r1, r3
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	1ad1      	subs	r1, r2, r3
 8001d36:	b2cb      	uxtb	r3, r1
 8001d38:	3330      	adds	r3, #48	; 0x30
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <floatToString+0x518>)
 8001d3e:	70da      	strb	r2, [r3, #3]
                convertedString[4] = (befdec/1)%10 + 48;
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <floatToString+0x520>)
 8001d44:	fb83 1302 	smull	r1, r3, r3, r2
 8001d48:	1099      	asrs	r1, r3, #2
 8001d4a:	17d3      	asrs	r3, r2, #31
 8001d4c:	1ac9      	subs	r1, r1, r3
 8001d4e:	460b      	mov	r3, r1
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	1ad1      	subs	r1, r2, r3
 8001d58:	b2cb      	uxtb	r3, r1
 8001d5a:	3330      	adds	r3, #48	; 0x30
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <floatToString+0x518>)
 8001d60:	711a      	strb	r2, [r3, #4]
                convertedString[5] = '.';
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <floatToString+0x518>)
 8001d64:	222e      	movs	r2, #46	; 0x2e
 8001d66:	715a      	strb	r2, [r3, #5]
                convertedString[6] = (aftdec/10) + 48;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <floatToString+0x520>)
 8001d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d70:	1092      	asrs	r2, r2, #2
 8001d72:	17db      	asrs	r3, r3, #31
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	3330      	adds	r3, #48	; 0x30
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <floatToString+0x518>)
 8001d7e:	719a      	strb	r2, [r3, #6]
                convertedString[7] = '\0';
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <floatToString+0x518>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	71da      	strb	r2, [r3, #7]
}
 8001d86:	e7ff      	b.n	8001d88 <floatToString+0x4f8>
 8001d88:	bf00      	nop
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	00000000 	.word	0x00000000
 8001d94:	40c38800 	.word	0x40c38800
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	40f86a00 	.word	0x40f86a00
 8001da0:	408f4000 	.word	0x408f4000
 8001da4:	10624dd3 	.word	0x10624dd3
 8001da8:	2000c848 	.word	0x2000c848
 8001dac:	51eb851f 	.word	0x51eb851f
 8001db0:	66666667 	.word	0x66666667
 8001db4:	68db8bad 	.word	0x68db8bad

08001db8 <write_file>:

void write_file()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	for(file_index = 0; file_index<16 && file_name[file_index] != '\0'; file_index++)
 8001dbc:	4b3c      	ldr	r3, [pc, #240]	; (8001eb0 <write_file+0xf8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	e00c      	b.n	8001dde <write_file+0x26>
	{
		buffer[file_index] = file_name[file_index];
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <write_file+0xf8>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <write_file+0xf8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4939      	ldr	r1, [pc, #228]	; (8001eb4 <write_file+0xfc>)
 8001dce:	5c89      	ldrb	r1, [r1, r2]
 8001dd0:	4a39      	ldr	r2, [pc, #228]	; (8001eb8 <write_file+0x100>)
 8001dd2:	54d1      	strb	r1, [r2, r3]
	for(file_index = 0; file_index<16 && file_name[file_index] != '\0'; file_index++)
 8001dd4:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <write_file+0xf8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	4a35      	ldr	r2, [pc, #212]	; (8001eb0 <write_file+0xf8>)
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <write_file+0xf8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	dc05      	bgt.n	8001df2 <write_file+0x3a>
 8001de6:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <write_file+0xf8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a32      	ldr	r2, [pc, #200]	; (8001eb4 <write_file+0xfc>)
 8001dec:	5cd3      	ldrb	r3, [r2, r3]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1e8      	bne.n	8001dc4 <write_file+0xc>
	}
	floatToString((int)file_number);
 8001df2:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <write_file+0x104>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb4a 	bl	8000490 <__aeabi_i2d>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7ff fd44 	bl	8001890 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0' && convertedString[i] != '.';i++,file_index++)
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <write_file+0x108>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e011      	b.n	8001e34 <write_file+0x7c>
	{
		buffer[file_index] = convertedString[i];
 8001e10:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <write_file+0x108>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <write_file+0xf8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	492a      	ldr	r1, [pc, #168]	; (8001ec4 <write_file+0x10c>)
 8001e1a:	5c89      	ldrb	r1, [r1, r2]
 8001e1c:	4a26      	ldr	r2, [pc, #152]	; (8001eb8 <write_file+0x100>)
 8001e1e:	54d1      	strb	r1, [r2, r3]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0' && convertedString[i] != '.';i++,file_index++)
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <write_file+0x108>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <write_file+0x108>)
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <write_file+0xf8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <write_file+0xf8>)
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <write_file+0x108>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b09      	cmp	r3, #9
 8001e3a:	d80b      	bhi.n	8001e54 <write_file+0x9c>
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <write_file+0x108>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a20      	ldr	r2, [pc, #128]	; (8001ec4 <write_file+0x10c>)
 8001e42:	5cd3      	ldrb	r3, [r2, r3]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <write_file+0x9c>
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <write_file+0x108>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1d      	ldr	r2, [pc, #116]	; (8001ec4 <write_file+0x10c>)
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	2b2e      	cmp	r3, #46	; 0x2e
 8001e52:	d1dd      	bne.n	8001e10 <write_file+0x58>


	//buffer[file_index] = convertedString[file_index];
	//file_index++;

	for(i=0;i<4 && extention[i]!='\0';i++,file_index++)buffer[file_index]=extention[i];
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <write_file+0x108>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e011      	b.n	8001e80 <write_file+0xc8>
 8001e5c:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <write_file+0x108>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <write_file+0xf8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4918      	ldr	r1, [pc, #96]	; (8001ec8 <write_file+0x110>)
 8001e66:	5c89      	ldrb	r1, [r1, r2]
 8001e68:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <write_file+0x100>)
 8001e6a:	54d1      	strb	r1, [r2, r3]
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <write_file+0x108>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3301      	adds	r3, #1
 8001e72:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <write_file+0x108>)
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <write_file+0xf8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	4a0c      	ldr	r2, [pc, #48]	; (8001eb0 <write_file+0xf8>)
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <write_file+0x108>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	dc05      	bgt.n	8001e94 <write_file+0xdc>
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <write_file+0x108>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <write_file+0x110>)
 8001e8e:	5cd3      	ldrb	r3, [r2, r3]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e3      	bne.n	8001e5c <write_file+0xa4>


	Create_File(buffer);								  // create the file based on the created file name
 8001e94:	4808      	ldr	r0, [pc, #32]	; (8001eb8 <write_file+0x100>)
 8001e96:	f7ff fbc1 	bl	800161c <Create_File>
	Write_File(buffer,balance_data);	      // write the data to the file.
 8001e9a:	490c      	ldr	r1, [pc, #48]	; (8001ecc <write_file+0x114>)
 8001e9c:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <write_file+0x100>)
 8001e9e:	f7ff fb77 	bl	8001590 <Write_File>
	file_number++;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <write_file+0x104>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <write_file+0x104>)
 8001eaa:	6013      	str	r3, [r2, #0]

}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	2000c828 	.word	0x2000c828
 8001eb4:	20000010 	.word	0x20000010
 8001eb8:	2000c82c 	.word	0x2000c82c
 8001ebc:	2000c824 	.word	0x2000c824
 8001ec0:	2000c820 	.word	0x2000c820
 8001ec4:	2000c848 	.word	0x2000c848
 8001ec8:	2000002c 	.word	0x2000002c
 8001ecc:	200004d0 	.word	0x200004d0

08001ed0 <systemControl>:
void waterTempControl()
{

}
void systemControl()
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af02      	add	r7, sp, #8


	if(run_once == 1)// && write_times == 2)
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <systemControl+0x4c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d114      	bne.n	8001f08 <systemControl+0x38>
	{
		//doseWater(30,30,50);
		run_once = 0;
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <systemControl+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
		fanOn();
 8001ee4:	f7ff fc64 	bl	80017b0 <fanOn>
		setTimeDate(0x01, 0x08, 0x22, 0x19, 0x09, 0x00); // MUST BE HEX BUT NOT CONVERTED i,e,(the 22 day of the month is represented as 0x22 NOT 0x16) (month, day, year, hours, min, sec)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	2309      	movs	r3, #9
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2319      	movs	r3, #25
 8001ef2:	2222      	movs	r2, #34	; 0x22
 8001ef4:	2108      	movs	r1, #8
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f7ff fc12 	bl	8001720 <setTimeDate>
		setLightCyle(19, 9, 19, 10); 			   		 // MUST BE INT (start hour, start min, start sec, end hour, end min)
 8001efc:	230a      	movs	r3, #10
 8001efe:	2213      	movs	r2, #19
 8001f00:	2109      	movs	r1, #9
 8001f02:	2013      	movs	r0, #19
 8001f04:	f000 f80e 	bl	8001f24 <setLightCyle>


	//float_to_string(10.21);
	//convertedString[1] = convertedString[1];

	if(usb_good == 1)//if(usb_good == 1 && (what_to_save < 3) && (what_to_save != 0))
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <systemControl+0x50>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <systemControl+0x44>
		{
			write_file();
 8001f10:	f7ff ff52 	bl	8001db8 <write_file>

	// Water Temp control



}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000000c 	.word	0x2000000c
 8001f20:	2000c8b0 	.word	0x2000c8b0

08001f24 <setLightCyle>:
	HAL_GPIO_WritePin(GPIOE,grow_light_Pin,GPIO_PIN_RESET);		// turn off grow light
	day_or_night = 0;											// it just turned to night time so set night status
}

void setLightCyle(uint8_t start_hour, uint8_t start_min, uint8_t end_hours, uint8_t end_min)
{
 8001f24:	b490      	push	{r4, r7}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	4611      	mov	r1, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	4623      	mov	r3, r4
 8001f34:	71fb      	strb	r3, [r7, #7]
 8001f36:	4603      	mov	r3, r0
 8001f38:	71bb      	strb	r3, [r7, #6]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	717b      	strb	r3, [r7, #5]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	713b      	strb	r3, [r7, #4]
	light_on_time.Hours = start_hour;
 8001f42:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <setLightCyle+0x40>)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	7013      	strb	r3, [r2, #0]
	light_on_time.Minutes = start_min;
 8001f48:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <setLightCyle+0x40>)
 8001f4a:	79bb      	ldrb	r3, [r7, #6]
 8001f4c:	7053      	strb	r3, [r2, #1]

	light_off_time.Hours = end_hours;
 8001f4e:	4a06      	ldr	r2, [pc, #24]	; (8001f68 <setLightCyle+0x44>)
 8001f50:	797b      	ldrb	r3, [r7, #5]
 8001f52:	7013      	strb	r3, [r2, #0]
	light_off_time.Minutes = end_min;
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <setLightCyle+0x44>)
 8001f56:	793b      	ldrb	r3, [r7, #4]
 8001f58:	7053      	strb	r3, [r2, #1]
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc90      	pop	{r4, r7}
 8001f62:	4770      	bx	lr
 8001f64:	2000c854 	.word	0x2000c854
 8001f68:	2000c860 	.word	0x2000c860

08001f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f70:	f000 fe8a 	bl	8002c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f74:	f000 f81b 	bl	8001fae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f78:	f000 fb40 	bl	80025fc <MX_GPIO_Init>
  MX_ADC2_Init();
 8001f7c:	f000 f878 	bl	8002070 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001f80:	f000 f96e 	bl	8002260 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f84:	f000 fa18 	bl	80023b8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001f88:	f000 fa62 	bl	8002450 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001f8c:	f000 faae 	bl	80024ec <MX_TIM10_Init>
  MX_RTC_Init();
 8001f90:	f000 f8d4 	bl	800213c <MX_RTC_Init>
  MX_TIM12_Init();
 8001f94:	f000 faf8 	bl	8002588 <MX_TIM12_Init>
  MX_FATFS_Init();
 8001f98:	f006 f8cc 	bl	8008134 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001f9c:	f00b fe70 	bl	800dc80 <MX_USB_HOST_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);*/

  while (1)
  {

	  MX_USB_HOST_Process();
 8001fa0:	f00b fe94 	bl	800dccc <MX_USB_HOST_Process>
	  systemControl();
 8001fa4:	f7ff ff94 	bl	8001ed0 <systemControl>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001fa8:	f00b fe90 	bl	800dccc <MX_USB_HOST_Process>
	  MX_USB_HOST_Process();
 8001fac:	e7f8      	b.n	8001fa0 <main+0x34>

08001fae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b096      	sub	sp, #88	; 0x58
 8001fb2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb8:	2230      	movs	r2, #48	; 0x30
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f00c f9ed 	bl	800e39c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
 8001fd0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001fe0:	230a      	movs	r3, #10
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fe8:	2310      	movs	r3, #16
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001fec:	2301      	movs	r3, #1
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001ffc:	23d8      	movs	r3, #216	; 0xd8
 8001ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8002000:	2306      	movs	r3, #6
 8002002:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002004:	2309      	movs	r3, #9
 8002006:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800200c:	4618      	mov	r0, r3
 800200e:	f003 f961 	bl	80052d4 <HAL_RCC_OscConfig>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002018:	f000 fbb6 	bl	8002788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800201c:	230f      	movs	r3, #15
 800201e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002020:	2302      	movs	r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002028:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800202c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800202e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002032:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2102      	movs	r1, #2
 800203a:	4618      	mov	r0, r3
 800203c:	f003 fb9a 	bl	8005774 <HAL_RCC_ClockConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002046:	f000 fb9f 	bl	8002788 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800204a:	2304      	movs	r3, #4
 800204c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800204e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002052:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002054:	463b      	mov	r3, r7
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fd2e 	bl	8005ab8 <HAL_RCCEx_PeriphCLKConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002062:	f000 fb91 	bl	8002788 <Error_Handler>
  }
}
 8002066:	bf00      	nop
 8002068:	3758      	adds	r7, #88	; 0x58
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002076:	463b      	mov	r3, r7
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC2_Init 1 */
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002082:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <MX_ADC2_Init+0xc0>)
 8002084:	2201      	movs	r2, #1
 8002086:	761a      	strb	r2, [r3, #24]
  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <MX_ADC2_Init+0xc0>)
 800208a:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <MX_ADC2_Init+0xc4>)
 800208c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800208e:	4b28      	ldr	r3, [pc, #160]	; (8002130 <MX_ADC2_Init+0xc0>)
 8002090:	2200      	movs	r2, #0
 8002092:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002094:	4b26      	ldr	r3, [pc, #152]	; (8002130 <MX_ADC2_Init+0xc0>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800209a:	4b25      	ldr	r3, [pc, #148]	; (8002130 <MX_ADC2_Init+0xc0>)
 800209c:	2201      	movs	r2, #1
 800209e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80020a0:	4b23      	ldr	r3, [pc, #140]	; (8002130 <MX_ADC2_Init+0xc0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <MX_ADC2_Init+0xc0>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <MX_ADC2_Init+0xc0>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020b4:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <MX_ADC2_Init+0xc0>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020ba:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <MX_ADC2_Init+0xc0>)
 80020bc:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <MX_ADC2_Init+0xc8>)
 80020be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <MX_ADC2_Init+0xc0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <MX_ADC2_Init+0xc0>)
 80020c8:	2202      	movs	r2, #2
 80020ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <MX_ADC2_Init+0xc0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <MX_ADC2_Init+0xc0>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80020da:	4815      	ldr	r0, [pc, #84]	; (8002130 <MX_ADC2_Init+0xc0>)
 80020dc:	f000 fe66 	bl	8002dac <HAL_ADC_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 80020e6:	f000 fb4f 	bl	8002788 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020ea:	2304      	movs	r3, #4
 80020ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020ee:	2301      	movs	r3, #1
 80020f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80020f6:	463b      	mov	r3, r7
 80020f8:	4619      	mov	r1, r3
 80020fa:	480d      	ldr	r0, [pc, #52]	; (8002130 <MX_ADC2_Init+0xc0>)
 80020fc:	f000 fe9a 	bl	8002e34 <HAL_ADC_ConfigChannel>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_ADC2_Init+0x9a>
  {
    Error_Handler();
 8002106:	f000 fb3f 	bl	8002788 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800210a:	2305      	movs	r3, #5
 800210c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800210e:	2302      	movs	r3, #2
 8002110:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002112:	463b      	mov	r3, r7
 8002114:	4619      	mov	r1, r3
 8002116:	4806      	ldr	r0, [pc, #24]	; (8002130 <MX_ADC2_Init+0xc0>)
 8002118:	f000 fe8c 	bl	8002e34 <HAL_ADC_ConfigChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8002122:	f000 fb31 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000c938 	.word	0x2000c938
 8002134:	40012100 	.word	0x40012100
 8002138:	0f000001 	.word	0x0f000001

0800213c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08c      	sub	sp, #48	; 0x30
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
 8002160:	615a      	str	r2, [r3, #20]
 8002162:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002164:	4b3c      	ldr	r3, [pc, #240]	; (8002258 <MX_RTC_Init+0x11c>)
 8002166:	4a3d      	ldr	r2, [pc, #244]	; (800225c <MX_RTC_Init+0x120>)
 8002168:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800216a:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <MX_RTC_Init+0x11c>)
 800216c:	2200      	movs	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002170:	4b39      	ldr	r3, [pc, #228]	; (8002258 <MX_RTC_Init+0x11c>)
 8002172:	227f      	movs	r2, #127	; 0x7f
 8002174:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002176:	4b38      	ldr	r3, [pc, #224]	; (8002258 <MX_RTC_Init+0x11c>)
 8002178:	22ff      	movs	r2, #255	; 0xff
 800217a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800217c:	4b36      	ldr	r3, [pc, #216]	; (8002258 <MX_RTC_Init+0x11c>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002182:	4b35      	ldr	r3, [pc, #212]	; (8002258 <MX_RTC_Init+0x11c>)
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002188:	4b33      	ldr	r3, [pc, #204]	; (8002258 <MX_RTC_Init+0x11c>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800218e:	4832      	ldr	r0, [pc, #200]	; (8002258 <MX_RTC_Init+0x11c>)
 8002190:	f003 fd88 	bl	8005ca4 <HAL_RTC_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800219a:	f000 faf5 	bl	8002788 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800219e:	2300      	movs	r3, #0
 80021a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0x0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0x0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80021b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021bc:	2201      	movs	r2, #1
 80021be:	4619      	mov	r1, r3
 80021c0:	4825      	ldr	r0, [pc, #148]	; (8002258 <MX_RTC_Init+0x11c>)
 80021c2:	f003 fdf9 	bl	8005db8 <HAL_RTC_SetTime>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80021cc:	f000 fadc 	bl	8002788 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 0x1;
 80021dc:	2301      	movs	r3, #1
 80021de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 0x0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80021e8:	f107 0320 	add.w	r3, r7, #32
 80021ec:	2201      	movs	r2, #1
 80021ee:	4619      	mov	r1, r3
 80021f0:	4819      	ldr	r0, [pc, #100]	; (8002258 <MX_RTC_Init+0x11c>)
 80021f2:	f003 fe97 	bl	8005f24 <HAL_RTC_SetDate>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80021fc:	f000 fac4 	bl	8002788 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002200:	2300      	movs	r3, #0
 8002202:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002204:	2300      	movs	r3, #0
 8002206:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002208:	2300      	movs	r3, #0
 800220a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 800221c:	2301      	movs	r3, #1
 800221e:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8002220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002224:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	2201      	movs	r2, #1
 800222a:	4619      	mov	r1, r3
 800222c:	480a      	ldr	r0, [pc, #40]	; (8002258 <MX_RTC_Init+0x11c>)
 800222e:	f003 ff19 	bl	8006064 <HAL_RTC_SetAlarm>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8002238:	f000 faa6 	bl	8002788 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	4805      	ldr	r0, [pc, #20]	; (8002258 <MX_RTC_Init+0x11c>)
 8002242:	f004 f886 	bl	8006352 <HAL_RTCEx_SetWakeUpTimer>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 800224c:	f000 fa9c 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002250:	bf00      	nop
 8002252:	3730      	adds	r7, #48	; 0x30
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	2000c9c8 	.word	0x2000c9c8
 800225c:	40002800 	.word	0x40002800

08002260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b096      	sub	sp, #88	; 0x58
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002274:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800227e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	615a      	str	r2, [r3, #20]
 8002290:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2220      	movs	r2, #32
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f00c f87f 	bl	800e39c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800229e:	4b44      	ldr	r3, [pc, #272]	; (80023b0 <MX_TIM1_Init+0x150>)
 80022a0:	4a44      	ldr	r2, [pc, #272]	; (80023b4 <MX_TIM1_Init+0x154>)
 80022a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022a4:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <MX_TIM1_Init+0x150>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022aa:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <MX_TIM1_Init+0x150>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022b0:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <MX_TIM1_Init+0x150>)
 80022b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b8:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <MX_TIM1_Init+0x150>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022be:	4b3c      	ldr	r3, [pc, #240]	; (80023b0 <MX_TIM1_Init+0x150>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022c4:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <MX_TIM1_Init+0x150>)
 80022c6:	2280      	movs	r2, #128	; 0x80
 80022c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022ca:	4839      	ldr	r0, [pc, #228]	; (80023b0 <MX_TIM1_Init+0x150>)
 80022cc:	f004 f8d5 	bl	800647a <HAL_TIM_Base_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80022d6:	f000 fa57 	bl	8002788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022e4:	4619      	mov	r1, r3
 80022e6:	4832      	ldr	r0, [pc, #200]	; (80023b0 <MX_TIM1_Init+0x150>)
 80022e8:	f004 faf4 	bl	80068d4 <HAL_TIM_ConfigClockSource>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022f2:	f000 fa49 	bl	8002788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022f6:	482e      	ldr	r0, [pc, #184]	; (80023b0 <MX_TIM1_Init+0x150>)
 80022f8:	f004 f90e 	bl	8006518 <HAL_TIM_PWM_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002302:	f000 fa41 	bl	8002788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800230e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002312:	4619      	mov	r1, r3
 8002314:	4826      	ldr	r0, [pc, #152]	; (80023b0 <MX_TIM1_Init+0x150>)
 8002316:	f004 fea5 	bl	8007064 <HAL_TIMEx_MasterConfigSynchronization>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002320:	f000 fa32 	bl	8002788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002324:	2360      	movs	r3, #96	; 0x60
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800232c:	2300      	movs	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002330:	2300      	movs	r3, #0
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002334:	2304      	movs	r3, #4
 8002336:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002344:	2200      	movs	r2, #0
 8002346:	4619      	mov	r1, r3
 8002348:	4819      	ldr	r0, [pc, #100]	; (80023b0 <MX_TIM1_Init+0x150>)
 800234a:	f004 fa05 	bl	8006758 <HAL_TIM_PWM_ConfigChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002354:	f000 fa18 	bl	8002788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235c:	2208      	movs	r2, #8
 800235e:	4619      	mov	r1, r3
 8002360:	4813      	ldr	r0, [pc, #76]	; (80023b0 <MX_TIM1_Init+0x150>)
 8002362:	f004 f9f9 	bl	8006758 <HAL_TIM_PWM_ConfigChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800236c:	f000 fa0c 	bl	8002788 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002374:	2300      	movs	r3, #0
 8002376:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002388:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	4619      	mov	r1, r3
 8002392:	4807      	ldr	r0, [pc, #28]	; (80023b0 <MX_TIM1_Init+0x150>)
 8002394:	f004 fee0 	bl	8007158 <HAL_TIMEx_ConfigBreakDeadTime>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800239e:	f000 f9f3 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023a2:	4803      	ldr	r0, [pc, #12]	; (80023b0 <MX_TIM1_Init+0x150>)
 80023a4:	f000 faec 	bl	8002980 <HAL_TIM_MspPostInit>

}
 80023a8:	bf00      	nop
 80023aa:	3758      	adds	r7, #88	; 0x58
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	2000c9fc 	.word	0x2000c9fc
 80023b4:	40010000 	.word	0x40010000

080023b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023cc:	463b      	mov	r3, r7
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023d4:	4b1d      	ldr	r3, [pc, #116]	; (800244c <MX_TIM2_Init+0x94>)
 80023d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <MX_TIM2_Init+0x94>)
 80023de:	2223      	movs	r2, #35	; 0x23
 80023e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <MX_TIM2_Init+0x94>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <MX_TIM2_Init+0x94>)
 80023ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80023ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <MX_TIM2_Init+0x94>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <MX_TIM2_Init+0x94>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023fc:	4813      	ldr	r0, [pc, #76]	; (800244c <MX_TIM2_Init+0x94>)
 80023fe:	f004 f83c 	bl	800647a <HAL_TIM_Base_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002408:	f000 f9be 	bl	8002788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800240c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002410:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002412:	f107 0308 	add.w	r3, r7, #8
 8002416:	4619      	mov	r1, r3
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <MX_TIM2_Init+0x94>)
 800241a:	f004 fa5b 	bl	80068d4 <HAL_TIM_ConfigClockSource>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002424:	f000 f9b0 	bl	8002788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002430:	463b      	mov	r3, r7
 8002432:	4619      	mov	r1, r3
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <MX_TIM2_Init+0x94>)
 8002436:	f004 fe15 	bl	8007064 <HAL_TIMEx_MasterConfigSynchronization>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002440:	f000 f9a2 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002444:	bf00      	nop
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	2000ca44 	.word	0x2000ca44

08002450 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002456:	f107 0308 	add.w	r3, r7, #8
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002464:	463b      	mov	r3, r7
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <MX_TIM4_Init+0x94>)
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <MX_TIM4_Init+0x98>)
 8002470:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 8002472:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <MX_TIM4_Init+0x94>)
 8002474:	2223      	movs	r2, #35	; 0x23
 8002476:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002478:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <MX_TIM4_Init+0x94>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800247e:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <MX_TIM4_Init+0x94>)
 8002480:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002484:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <MX_TIM4_Init+0x94>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248c:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <MX_TIM4_Init+0x94>)
 800248e:	2200      	movs	r2, #0
 8002490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002492:	4814      	ldr	r0, [pc, #80]	; (80024e4 <MX_TIM4_Init+0x94>)
 8002494:	f003 fff1 	bl	800647a <HAL_TIM_Base_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800249e:	f000 f973 	bl	8002788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024a8:	f107 0308 	add.w	r3, r7, #8
 80024ac:	4619      	mov	r1, r3
 80024ae:	480d      	ldr	r0, [pc, #52]	; (80024e4 <MX_TIM4_Init+0x94>)
 80024b0:	f004 fa10 	bl	80068d4 <HAL_TIM_ConfigClockSource>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80024ba:	f000 f965 	bl	8002788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024c6:	463b      	mov	r3, r7
 80024c8:	4619      	mov	r1, r3
 80024ca:	4806      	ldr	r0, [pc, #24]	; (80024e4 <MX_TIM4_Init+0x94>)
 80024cc:	f004 fdca 	bl	8007064 <HAL_TIMEx_MasterConfigSynchronization>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80024d6:	f000 f957 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000c8f0 	.word	0x2000c8f0
 80024e8:	40000800 	.word	0x40000800

080024ec <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	615a      	str	r2, [r3, #20]
 8002502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002504:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <MX_TIM10_Init+0x94>)
 8002506:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <MX_TIM10_Init+0x98>)
 8002508:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <MX_TIM10_Init+0x94>)
 800250c:	2200      	movs	r2, #0
 800250e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <MX_TIM10_Init+0x94>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <MX_TIM10_Init+0x94>)
 8002518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800251c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251e:	4b18      	ldr	r3, [pc, #96]	; (8002580 <MX_TIM10_Init+0x94>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002524:	4b16      	ldr	r3, [pc, #88]	; (8002580 <MX_TIM10_Init+0x94>)
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800252a:	4815      	ldr	r0, [pc, #84]	; (8002580 <MX_TIM10_Init+0x94>)
 800252c:	f003 ffa5 	bl	800647a <HAL_TIM_Base_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002536:	f000 f927 	bl	8002788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800253a:	4811      	ldr	r0, [pc, #68]	; (8002580 <MX_TIM10_Init+0x94>)
 800253c:	f003 ffec 	bl	8006518 <HAL_TIM_PWM_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002546:	f000 f91f 	bl	8002788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800254a:	2360      	movs	r3, #96	; 0x60
 800254c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	2200      	movs	r2, #0
 800255e:	4619      	mov	r1, r3
 8002560:	4807      	ldr	r0, [pc, #28]	; (8002580 <MX_TIM10_Init+0x94>)
 8002562:	f004 f8f9 	bl	8006758 <HAL_TIM_PWM_ConfigChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800256c:	f000 f90c 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002570:	4803      	ldr	r0, [pc, #12]	; (8002580 <MX_TIM10_Init+0x94>)
 8002572:	f000 fa05 	bl	8002980 <HAL_TIM_MspPostInit>

}
 8002576:	bf00      	nop
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	2000c980 	.word	0x2000c980
 8002584:	40014400 	.word	0x40014400

08002588 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258e:	463b      	mov	r3, r7
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <MX_TIM12_Init+0x6c>)
 800259c:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <MX_TIM12_Init+0x70>)
 800259e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1000;
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <MX_TIM12_Init+0x6c>)
 80025a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025a6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <MX_TIM12_Init+0x6c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 36000;
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <MX_TIM12_Init+0x6c>)
 80025b0:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80025b4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <MX_TIM12_Init+0x6c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025bc:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <MX_TIM12_Init+0x6c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80025c2:	480c      	ldr	r0, [pc, #48]	; (80025f4 <MX_TIM12_Init+0x6c>)
 80025c4:	f003 ff59 	bl	800647a <HAL_TIM_Base_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 80025ce:	f000 f8db 	bl	8002788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80025d8:	463b      	mov	r3, r7
 80025da:	4619      	mov	r1, r3
 80025dc:	4805      	ldr	r0, [pc, #20]	; (80025f4 <MX_TIM12_Init+0x6c>)
 80025de:	f004 f979 	bl	80068d4 <HAL_TIM_ConfigClockSource>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 80025e8:	f000 f8ce 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	2000ca8c 	.word	0x2000ca8c
 80025f8:	40001800 	.word	0x40001800

080025fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08c      	sub	sp, #48	; 0x30
 8002600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002602:	f107 031c 	add.w	r3, r7, #28
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]
 8002610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	4b58      	ldr	r3, [pc, #352]	; (8002778 <MX_GPIO_Init+0x17c>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a57      	ldr	r2, [pc, #348]	; (8002778 <MX_GPIO_Init+0x17c>)
 800261c:	f043 0310 	orr.w	r3, r3, #16
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b55      	ldr	r3, [pc, #340]	; (8002778 <MX_GPIO_Init+0x17c>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	4b51      	ldr	r3, [pc, #324]	; (8002778 <MX_GPIO_Init+0x17c>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a50      	ldr	r2, [pc, #320]	; (8002778 <MX_GPIO_Init+0x17c>)
 8002638:	f043 0320 	orr.w	r3, r3, #32
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b4e      	ldr	r3, [pc, #312]	; (8002778 <MX_GPIO_Init+0x17c>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	4b4a      	ldr	r3, [pc, #296]	; (8002778 <MX_GPIO_Init+0x17c>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a49      	ldr	r2, [pc, #292]	; (8002778 <MX_GPIO_Init+0x17c>)
 8002654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <MX_GPIO_Init+0x17c>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <MX_GPIO_Init+0x17c>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a42      	ldr	r2, [pc, #264]	; (8002778 <MX_GPIO_Init+0x17c>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	4b40      	ldr	r3, [pc, #256]	; (8002778 <MX_GPIO_Init+0x17c>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	4b3c      	ldr	r3, [pc, #240]	; (8002778 <MX_GPIO_Init+0x17c>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a3b      	ldr	r2, [pc, #236]	; (8002778 <MX_GPIO_Init+0x17c>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b39      	ldr	r3, [pc, #228]	; (8002778 <MX_GPIO_Init+0x17c>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	4b35      	ldr	r3, [pc, #212]	; (8002778 <MX_GPIO_Init+0x17c>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a34      	ldr	r2, [pc, #208]	; (8002778 <MX_GPIO_Init+0x17c>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b32      	ldr	r3, [pc, #200]	; (8002778 <MX_GPIO_Init+0x17c>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 80026ba:	2201      	movs	r2, #1
 80026bc:	21fc      	movs	r1, #252	; 0xfc
 80026be:	482f      	ldr	r0, [pc, #188]	; (800277c <MX_GPIO_Init+0x180>)
 80026c0:	f001 f88a 	bl	80037d8 <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80026c4:	2200      	movs	r2, #0
 80026c6:	2104      	movs	r1, #4
 80026c8:	482d      	ldr	r0, [pc, #180]	; (8002780 <MX_GPIO_Init+0x184>)
 80026ca:	f001 f885 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2104      	movs	r1, #4
 80026d2:	482c      	ldr	r0, [pc, #176]	; (8002784 <MX_GPIO_Init+0x188>)
 80026d4:	f001 f880 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, water_heat_cool_Pin|grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80026de:	4827      	ldr	r0, [pc, #156]	; (800277c <MX_GPIO_Init+0x180>)
 80026e0:	f001 f87a 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 80026e4:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 80026e8:	61fb      	str	r3, [r7, #28]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f2:	2303      	movs	r3, #3
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026f6:	f107 031c 	add.w	r3, r7, #28
 80026fa:	4619      	mov	r1, r3
 80026fc:	481f      	ldr	r0, [pc, #124]	; (800277c <MX_GPIO_Init+0x180>)
 80026fe:	f000 fecd 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002702:	2304      	movs	r3, #4
 8002704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002706:	2301      	movs	r3, #1
 8002708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002712:	f107 031c 	add.w	r3, r7, #28
 8002716:	4619      	mov	r1, r3
 8002718:	4819      	ldr	r0, [pc, #100]	; (8002780 <MX_GPIO_Init+0x184>)
 800271a:	f000 febf 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 800271e:	2304      	movs	r3, #4
 8002720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002722:	2301      	movs	r3, #1
 8002724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	2300      	movs	r3, #0
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	4619      	mov	r1, r3
 8002734:	4813      	ldr	r0, [pc, #76]	; (8002784 <MX_GPIO_Init+0x188>)
 8002736:	f000 feb1 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin water_heat_cool_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin;
 800273a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800273e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002740:	2301      	movs	r3, #1
 8002742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800274c:	f107 031c 	add.w	r3, r7, #28
 8002750:	4619      	mov	r1, r3
 8002752:	480a      	ldr	r0, [pc, #40]	; (800277c <MX_GPIO_Init+0x180>)
 8002754:	f000 fea2 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 8002758:	2302      	movs	r3, #2
 800275a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	4619      	mov	r1, r3
 800276a:	4804      	ldr	r0, [pc, #16]	; (800277c <MX_GPIO_Init+0x180>)
 800276c:	f000 fe96 	bl	800349c <HAL_GPIO_Init>

}
 8002770:	bf00      	nop
 8002772:	3730      	adds	r7, #48	; 0x30
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	40021000 	.word	0x40021000
 8002780:	40020800 	.word	0x40020800
 8002784:	40020400 	.word	0x40020400

08002788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800278c:	b672      	cpsid	i
}
 800278e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002790:	e7fe      	b.n	8002790 <Error_Handler+0x8>
	...

08002794 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <HAL_MspInit+0x48>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <HAL_MspInit+0x48>)
 80027a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a8:	6453      	str	r3, [r2, #68]	; 0x44
 80027aa:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <HAL_MspInit+0x48>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	603b      	str	r3, [r7, #0]
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_MspInit+0x48>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a07      	ldr	r2, [pc, #28]	; (80027dc <HAL_MspInit+0x48>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_MspInit+0x48>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40023800 	.word	0x40023800

080027e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a17      	ldr	r2, [pc, #92]	; (800285c <HAL_ADC_MspInit+0x7c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d127      	bne.n	8002852 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <HAL_ADC_MspInit+0x80>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a15      	ldr	r2, [pc, #84]	; (8002860 <HAL_ADC_MspInit+0x80>)
 800280c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b13      	ldr	r3, [pc, #76]	; (8002860 <HAL_ADC_MspInit+0x80>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_ADC_MspInit+0x80>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <HAL_ADC_MspInit+0x80>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <HAL_ADC_MspInit+0x80>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN4
    PA5     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = water_ph_Pin|nutrient_level_Pin;
 800283a:	2330      	movs	r3, #48	; 0x30
 800283c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800283e:	2303      	movs	r3, #3
 8002840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	4619      	mov	r1, r3
 800284c:	4805      	ldr	r0, [pc, #20]	; (8002864 <HAL_ADC_MspInit+0x84>)
 800284e:	f000 fe25 	bl	800349c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002852:	bf00      	nop
 8002854:	3728      	adds	r7, #40	; 0x28
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40012100 	.word	0x40012100
 8002860:	40023800 	.word	0x40023800
 8002864:	40020000 	.word	0x40020000

08002868 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a05      	ldr	r2, [pc, #20]	; (800288c <HAL_RTC_MspInit+0x24>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d102      	bne.n	8002880 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RTC_MspInit+0x28>)
 800287c:	2201      	movs	r2, #1
 800287e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40002800 	.word	0x40002800
 8002890:	42470e3c 	.word	0x42470e3c

08002894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a32      	ldr	r2, [pc, #200]	; (800296c <HAL_TIM_Base_MspInit+0xd8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10e      	bne.n	80028c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	4b31      	ldr	r3, [pc, #196]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a30      	ldr	r2, [pc, #192]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80028c2:	e04e      	b.n	8002962 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028cc:	d10e      	bne.n	80028ec <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a26      	ldr	r2, [pc, #152]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	69bb      	ldr	r3, [r7, #24]
}
 80028ea:	e03a      	b.n	8002962 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a20      	ldr	r2, [pc, #128]	; (8002974 <HAL_TIM_Base_MspInit+0xe0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10e      	bne.n	8002914 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
}
 8002912:	e026      	b.n	8002962 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a17      	ldr	r2, [pc, #92]	; (8002978 <HAL_TIM_Base_MspInit+0xe4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10e      	bne.n	800293c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	4b13      	ldr	r3, [pc, #76]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 8002928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292c:	6453      	str	r3, [r2, #68]	; 0x44
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
}
 800293a:	e012      	b.n	8002962 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM12)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0e      	ldr	r2, [pc, #56]	; (800297c <HAL_TIM_Base_MspInit+0xe8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10d      	bne.n	8002962 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a08      	ldr	r2, [pc, #32]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 8002950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_TIM_Base_MspInit+0xdc>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
}
 8002962:	bf00      	nop
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	40010000 	.word	0x40010000
 8002970:	40023800 	.word	0x40023800
 8002974:	40000800 	.word	0x40000800
 8002978:	40014400 	.word	0x40014400
 800297c:	40001800 	.word	0x40001800

08002980 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a24      	ldr	r2, [pc, #144]	; (8002a30 <HAL_TIM_MspPostInit+0xb0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d11f      	bne.n	80029e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <HAL_TIM_MspPostInit+0xb4>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <HAL_TIM_MspPostInit+0xb4>)
 80029ac:	f043 0310 	orr.w	r3, r3, #16
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_TIM_MspPostInit+0xb4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin|system_fan_speed_Pin;
 80029be:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2300      	movs	r3, #0
 80029ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029d0:	2301      	movs	r3, #1
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	4817      	ldr	r0, [pc, #92]	; (8002a38 <HAL_TIM_MspPostInit+0xb8>)
 80029dc:	f000 fd5e 	bl	800349c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80029e0:	e022      	b.n	8002a28 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a15      	ldr	r2, [pc, #84]	; (8002a3c <HAL_TIM_MspPostInit+0xbc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d11d      	bne.n	8002a28 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HAL_TIM_MspPostInit+0xb4>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	4a0f      	ldr	r2, [pc, #60]	; (8002a34 <HAL_TIM_MspPostInit+0xb4>)
 80029f6:	f043 0320 	orr.w	r3, r3, #32
 80029fa:	6313      	str	r3, [r2, #48]	; 0x30
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_TIM_MspPostInit+0xb4>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 8002a08:	2340      	movs	r3, #64	; 0x40
 8002a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4619      	mov	r1, r3
 8002a22:	4807      	ldr	r0, [pc, #28]	; (8002a40 <HAL_TIM_MspPostInit+0xc0>)
 8002a24:	f000 fd3a 	bl	800349c <HAL_GPIO_Init>
}
 8002a28:	bf00      	nop
 8002a2a:	3728      	adds	r7, #40	; 0x28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40010000 	.word	0x40010000
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40014400 	.word	0x40014400
 8002a40:	40021400 	.word	0x40021400

08002a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <NMI_Handler+0x4>

08002a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a4e:	e7fe      	b.n	8002a4e <HardFault_Handler+0x4>

08002a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <MemManage_Handler+0x4>

08002a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a5a:	e7fe      	b.n	8002a5a <BusFault_Handler+0x4>

08002a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a60:	e7fe      	b.n	8002a60 <UsageFault_Handler+0x4>

08002a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a8a:	f000 f94f 	bl	8002d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002a98:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <OTG_FS_IRQHandler+0x10>)
 8002a9a:	f001 f91f 	bl	8003cdc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	2000d30c 	.word	0x2000d30c

08002aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
	return 1;
 8002aac:	2301      	movs	r3, #1
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <_kill>:

int _kill(int pid, int sig)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ac0:	f00b fc24 	bl	800e30c <__errno>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2216      	movs	r2, #22
 8002ac8:	601a      	str	r2, [r3, #0]
	return -1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <_exit>:

void _exit (int status)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ade:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ffe7 	bl	8002ab6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ae8:	e7fe      	b.n	8002ae8 <_exit+0x12>

08002aea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e00a      	b.n	8002b12 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002afc:	f3af 8000 	nop.w
 8002b00:	4601      	mov	r1, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	60ba      	str	r2, [r7, #8]
 8002b08:	b2ca      	uxtb	r2, r1
 8002b0a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	dbf0      	blt.n	8002afc <_read+0x12>
	}

return len;
 8002b1a:	687b      	ldr	r3, [r7, #4]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	e009      	b.n	8002b4a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	60ba      	str	r2, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	dbf1      	blt.n	8002b36 <_write+0x12>
	}
	return len;
 8002b52:	687b      	ldr	r3, [r7, #4]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_close>:

int _close(int file)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	return -1;
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b82:	605a      	str	r2, [r3, #4]
	return 0;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <_isatty>:

int _isatty(int file)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	return 1;
 8002b98:	2301      	movs	r3, #1
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
	return 0;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc4:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <_sbrk+0x5c>)
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <_sbrk+0x60>)
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <_sbrk+0x64>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd8:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <_sbrk+0x64>)
 8002bda:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <_sbrk+0x68>)
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <_sbrk+0x64>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d207      	bcs.n	8002bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bec:	f00b fb8e 	bl	800e30c <__errno>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	e009      	b.n	8002c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <_sbrk+0x64>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <_sbrk+0x64>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <_sbrk+0x64>)
 8002c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	2001c000 	.word	0x2001c000
 8002c1c:	00000800 	.word	0x00000800
 8002c20:	2000c87c 	.word	0x2000c87c
 8002c24:	2000d620 	.word	0x2000d620

08002c28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c38:	480d      	ldr	r0, [pc, #52]	; (8002c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c3a:	490e      	ldr	r1, [pc, #56]	; (8002c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c3c:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c40:	e002      	b.n	8002c48 <LoopCopyDataInit>

08002c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c46:	3304      	adds	r3, #4

08002c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c4c:	d3f9      	bcc.n	8002c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c4e:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c50:	4c0b      	ldr	r4, [pc, #44]	; (8002c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c54:	e001      	b.n	8002c5a <LoopFillZerobss>

08002c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c58:	3204      	adds	r2, #4

08002c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c5c:	d3fb      	bcc.n	8002c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c5e:	f7ff ffe3 	bl	8002c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c62:	f00b fb59 	bl	800e318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c66:	f7ff f981 	bl	8001f6c <main>
  bx  lr
 8002c6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c6c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c74:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002c78:	0801318c 	.word	0x0801318c
  ldr r2, =_sbss
 8002c7c:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002c80:	2000d620 	.word	0x2000d620

08002c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c84:	e7fe      	b.n	8002c84 <ADC_IRQHandler>
	...

08002c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <HAL_Init+0x40>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <HAL_Init+0x40>)
 8002c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_Init+0x40>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_Init+0x40>)
 8002c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <HAL_Init+0x40>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a07      	ldr	r2, [pc, #28]	; (8002cc8 <HAL_Init+0x40>)
 8002caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	f000 fbb1 	bl	8003418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb6:	200f      	movs	r0, #15
 8002cb8:	f000 f808 	bl	8002ccc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002cbc:	f7ff fd6a 	bl	8002794 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023c00 	.word	0x40023c00

08002ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_InitTick+0x54>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_InitTick+0x58>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fbc9 	bl	8003482 <HAL_SYSTICK_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00e      	b.n	8002d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b0f      	cmp	r3, #15
 8002cfe:	d80a      	bhi.n	8002d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d00:	2200      	movs	r2, #0
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	f000 fb91 	bl	800342e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d0c:	4a06      	ldr	r2, [pc, #24]	; (8002d28 <HAL_InitTick+0x5c>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000034 	.word	0x20000034
 8002d24:	2000003c 	.word	0x2000003c
 8002d28:	20000038 	.word	0x20000038

08002d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_IncTick+0x1c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_IncTick+0x20>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a03      	ldr	r2, [pc, #12]	; (8002d4c <HAL_IncTick+0x20>)
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	2000003c 	.word	0x2000003c
 8002d4c:	2000cad4 	.word	0x2000cad4

08002d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return uwTick;
 8002d54:	4b02      	ldr	r3, [pc, #8]	; (8002d60 <HAL_GetTick+0x10>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	2000cad4 	.word	0x2000cad4

08002d64 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff fff0 	bl	8002d50 <HAL_GetTick>
 8002d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d005      	beq.n	8002d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_Delay+0x44>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d8a:	bf00      	nop
 8002d8c:	f7ff ffe0 	bl	8002d50 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d8f7      	bhi.n	8002d8c <HAL_Delay+0x28>
  {
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	2000003c 	.word	0x2000003c

08002dac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e033      	b.n	8002e2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff fd08 	bl	80027e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d118      	bne.n	8002e1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002df2:	f023 0302 	bic.w	r3, r3, #2
 8002df6:	f043 0202 	orr.w	r2, r3, #2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f938 	bl	8003074 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	f043 0201 	orr.w	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
 8002e1a:	e001      	b.n	8002e20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x1c>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e103      	b.n	8003058 <HAL_ADC_ConfigChannel+0x224>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b09      	cmp	r3, #9
 8002e5e:	d925      	bls.n	8002eac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68d9      	ldr	r1, [r3, #12]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	3b1e      	subs	r3, #30
 8002e76:	2207      	movs	r2, #7
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	400a      	ands	r2, r1
 8002e84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68d9      	ldr	r1, [r3, #12]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	4618      	mov	r0, r3
 8002e98:	4603      	mov	r3, r0
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4403      	add	r3, r0
 8002e9e:	3b1e      	subs	r3, #30
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	e022      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6919      	ldr	r1, [r3, #16]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4613      	mov	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4413      	add	r3, r2
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	400a      	ands	r2, r1
 8002ece:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6919      	ldr	r1, [r3, #16]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4403      	add	r3, r0
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d824      	bhi.n	8002f44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b05      	subs	r3, #5
 8002f0c:	221f      	movs	r2, #31
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	400a      	ands	r2, r1
 8002f1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	3b05      	subs	r3, #5
 8002f36:	fa00 f203 	lsl.w	r2, r0, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	635a      	str	r2, [r3, #52]	; 0x34
 8002f42:	e04c      	b.n	8002fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	d824      	bhi.n	8002f96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3b23      	subs	r3, #35	; 0x23
 8002f5e:	221f      	movs	r2, #31
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43da      	mvns	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	3b23      	subs	r3, #35	; 0x23
 8002f88:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
 8002f94:	e023      	b.n	8002fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3b41      	subs	r3, #65	; 0x41
 8002fa8:	221f      	movs	r2, #31
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b41      	subs	r3, #65	; 0x41
 8002fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a20      	ldr	r2, [pc, #128]	; (8003064 <HAL_ADC_ConfigChannel+0x230>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d109      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x1c8>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b12      	cmp	r3, #18
 8002fee:	d105      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_ADC_ConfigChannel+0x234>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a1c      	ldr	r2, [pc, #112]	; (8003068 <HAL_ADC_ConfigChannel+0x234>)
 8002ff6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ffa:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a18      	ldr	r2, [pc, #96]	; (8003064 <HAL_ADC_ConfigChannel+0x230>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d123      	bne.n	800304e <HAL_ADC_ConfigChannel+0x21a>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b10      	cmp	r3, #16
 800300c:	d003      	beq.n	8003016 <HAL_ADC_ConfigChannel+0x1e2>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b11      	cmp	r3, #17
 8003014:	d11b      	bne.n	800304e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003016:	4b14      	ldr	r3, [pc, #80]	; (8003068 <HAL_ADC_ConfigChannel+0x234>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4a13      	ldr	r2, [pc, #76]	; (8003068 <HAL_ADC_ConfigChannel+0x234>)
 800301c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003020:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b10      	cmp	r3, #16
 8003028:	d111      	bne.n	800304e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <HAL_ADC_ConfigChannel+0x238>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a10      	ldr	r2, [pc, #64]	; (8003070 <HAL_ADC_ConfigChannel+0x23c>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	0c9a      	lsrs	r2, r3, #18
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003040:	e002      	b.n	8003048 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3b01      	subs	r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f9      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40012000 	.word	0x40012000
 8003068:	40012300 	.word	0x40012300
 800306c:	20000034 	.word	0x20000034
 8003070:	431bde83 	.word	0x431bde83

08003074 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800307c:	4b7e      	ldr	r3, [pc, #504]	; (8003278 <ADC_Init+0x204>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a7d      	ldr	r2, [pc, #500]	; (8003278 <ADC_Init+0x204>)
 8003082:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003086:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003088:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <ADC_Init+0x204>)
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4979      	ldr	r1, [pc, #484]	; (8003278 <ADC_Init+0x204>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	021a      	lsls	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6899      	ldr	r1, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	4a5e      	ldr	r2, [pc, #376]	; (800327c <ADC_Init+0x208>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d022      	beq.n	800314e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003116:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6899      	ldr	r1, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6899      	ldr	r1, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	e00f      	b.n	800316e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800315c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800316c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0202 	bic.w	r2, r2, #2
 800317c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6899      	ldr	r1, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7e1b      	ldrb	r3, [r3, #24]
 8003188:	005a      	lsls	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d027      	beq.n	80031ec <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	3b01      	subs	r3, #1
 80031c2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80031c6:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	fa92 f2a2 	rbit	r2, r2
 80031ce:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	fab2 f282 	clz	r2, r2
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	fa03 f102 	lsl.w	r1, r3, r2
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	e007      	b.n	80031fc <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	3b01      	subs	r3, #1
 8003218:	051a      	lsls	r2, r3, #20
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003230:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6899      	ldr	r1, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800323e:	025a      	lsls	r2, r3, #9
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6899      	ldr	r1, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	029a      	lsls	r2, r3, #10
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	609a      	str	r2, [r3, #8]
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40012300 	.word	0x40012300
 800327c:	0f000001 	.word	0x0f000001

08003280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800329c:	4013      	ands	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032b2:	4a04      	ldr	r2, [pc, #16]	; (80032c4 <__NVIC_SetPriorityGrouping+0x44>)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	60d3      	str	r3, [r2, #12]
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	f003 0307 	and.w	r3, r3, #7
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	db0b      	blt.n	800330e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	f003 021f 	and.w	r2, r3, #31
 80032fc:	4906      	ldr	r1, [pc, #24]	; (8003318 <__NVIC_EnableIRQ+0x34>)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2001      	movs	r0, #1
 8003306:	fa00 f202 	lsl.w	r2, r0, r2
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	e000e100 	.word	0xe000e100

0800331c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	6039      	str	r1, [r7, #0]
 8003326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332c:	2b00      	cmp	r3, #0
 800332e:	db0a      	blt.n	8003346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	b2da      	uxtb	r2, r3
 8003334:	490c      	ldr	r1, [pc, #48]	; (8003368 <__NVIC_SetPriority+0x4c>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	0112      	lsls	r2, r2, #4
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	440b      	add	r3, r1
 8003340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003344:	e00a      	b.n	800335c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	4908      	ldr	r1, [pc, #32]	; (800336c <__NVIC_SetPriority+0x50>)
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	3b04      	subs	r3, #4
 8003354:	0112      	lsls	r2, r2, #4
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	440b      	add	r3, r1
 800335a:	761a      	strb	r2, [r3, #24]
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000e100 	.word	0xe000e100
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003370:	b480      	push	{r7}
 8003372:	b089      	sub	sp, #36	; 0x24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f1c3 0307 	rsb	r3, r3, #7
 800338a:	2b04      	cmp	r3, #4
 800338c:	bf28      	it	cs
 800338e:	2304      	movcs	r3, #4
 8003390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	3304      	adds	r3, #4
 8003396:	2b06      	cmp	r3, #6
 8003398:	d902      	bls.n	80033a0 <NVIC_EncodePriority+0x30>
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3b03      	subs	r3, #3
 800339e:	e000      	b.n	80033a2 <NVIC_EncodePriority+0x32>
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	f04f 32ff 	mov.w	r2, #4294967295
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43da      	mvns	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	401a      	ands	r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b8:	f04f 31ff 	mov.w	r1, #4294967295
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	43d9      	mvns	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c8:	4313      	orrs	r3, r2
         );
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3724      	adds	r7, #36	; 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033e4:	d301      	bcc.n	80033ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033e6:	2301      	movs	r3, #1
 80033e8:	e00f      	b.n	800340a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ea:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <SysTick_Config+0x40>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033f2:	210f      	movs	r1, #15
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	f7ff ff90 	bl	800331c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <SysTick_Config+0x40>)
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003402:	4b04      	ldr	r3, [pc, #16]	; (8003414 <SysTick_Config+0x40>)
 8003404:	2207      	movs	r2, #7
 8003406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	e000e010 	.word	0xe000e010

08003418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ff2d 	bl	8003280 <__NVIC_SetPriorityGrouping>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800342e:	b580      	push	{r7, lr}
 8003430:	b086      	sub	sp, #24
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003440:	f7ff ff42 	bl	80032c8 <__NVIC_GetPriorityGrouping>
 8003444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	6978      	ldr	r0, [r7, #20]
 800344c:	f7ff ff90 	bl	8003370 <NVIC_EncodePriority>
 8003450:	4602      	mov	r2, r0
 8003452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff5f 	bl	800331c <__NVIC_SetPriority>
}
 800345e:	bf00      	nop
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff35 	bl	80032e4 <__NVIC_EnableIRQ>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ffa2 	bl	80033d4 <SysTick_Config>
 8003490:	4603      	mov	r3, r0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034aa:	e16f      	b.n	800378c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	2101      	movs	r1, #1
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	4013      	ands	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8161 	beq.w	8003786 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d005      	beq.n	80034dc <HAL_GPIO_Init+0x40>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d130      	bne.n	800353e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003512:	2201      	movs	r2, #1
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	f003 0201 	and.w	r2, r3, #1
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b03      	cmp	r3, #3
 8003548:	d017      	beq.n	800357a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	2203      	movs	r2, #3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d123      	bne.n	80035ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	08da      	lsrs	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3208      	adds	r2, #8
 800358e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003592:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	220f      	movs	r2, #15
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	08da      	lsrs	r2, r3, #3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3208      	adds	r2, #8
 80035c8:	6939      	ldr	r1, [r7, #16]
 80035ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	2203      	movs	r2, #3
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0203 	and.w	r2, r3, #3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80bb 	beq.w	8003786 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003610:	2300      	movs	r3, #0
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	4b64      	ldr	r3, [pc, #400]	; (80037a8 <HAL_GPIO_Init+0x30c>)
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	4a63      	ldr	r2, [pc, #396]	; (80037a8 <HAL_GPIO_Init+0x30c>)
 800361a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800361e:	6453      	str	r3, [r2, #68]	; 0x44
 8003620:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <HAL_GPIO_Init+0x30c>)
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800362c:	4a5f      	ldr	r2, [pc, #380]	; (80037ac <HAL_GPIO_Init+0x310>)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	3302      	adds	r3, #2
 8003634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003638:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	220f      	movs	r2, #15
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a57      	ldr	r2, [pc, #348]	; (80037b0 <HAL_GPIO_Init+0x314>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d031      	beq.n	80036bc <HAL_GPIO_Init+0x220>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a56      	ldr	r2, [pc, #344]	; (80037b4 <HAL_GPIO_Init+0x318>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d02b      	beq.n	80036b8 <HAL_GPIO_Init+0x21c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a55      	ldr	r2, [pc, #340]	; (80037b8 <HAL_GPIO_Init+0x31c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d025      	beq.n	80036b4 <HAL_GPIO_Init+0x218>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a54      	ldr	r2, [pc, #336]	; (80037bc <HAL_GPIO_Init+0x320>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d01f      	beq.n	80036b0 <HAL_GPIO_Init+0x214>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a53      	ldr	r2, [pc, #332]	; (80037c0 <HAL_GPIO_Init+0x324>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d019      	beq.n	80036ac <HAL_GPIO_Init+0x210>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a52      	ldr	r2, [pc, #328]	; (80037c4 <HAL_GPIO_Init+0x328>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <HAL_GPIO_Init+0x20c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a51      	ldr	r2, [pc, #324]	; (80037c8 <HAL_GPIO_Init+0x32c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00d      	beq.n	80036a4 <HAL_GPIO_Init+0x208>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a50      	ldr	r2, [pc, #320]	; (80037cc <HAL_GPIO_Init+0x330>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <HAL_GPIO_Init+0x204>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a4f      	ldr	r2, [pc, #316]	; (80037d0 <HAL_GPIO_Init+0x334>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d101      	bne.n	800369c <HAL_GPIO_Init+0x200>
 8003698:	2308      	movs	r3, #8
 800369a:	e010      	b.n	80036be <HAL_GPIO_Init+0x222>
 800369c:	2309      	movs	r3, #9
 800369e:	e00e      	b.n	80036be <HAL_GPIO_Init+0x222>
 80036a0:	2307      	movs	r3, #7
 80036a2:	e00c      	b.n	80036be <HAL_GPIO_Init+0x222>
 80036a4:	2306      	movs	r3, #6
 80036a6:	e00a      	b.n	80036be <HAL_GPIO_Init+0x222>
 80036a8:	2305      	movs	r3, #5
 80036aa:	e008      	b.n	80036be <HAL_GPIO_Init+0x222>
 80036ac:	2304      	movs	r3, #4
 80036ae:	e006      	b.n	80036be <HAL_GPIO_Init+0x222>
 80036b0:	2303      	movs	r3, #3
 80036b2:	e004      	b.n	80036be <HAL_GPIO_Init+0x222>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e002      	b.n	80036be <HAL_GPIO_Init+0x222>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <HAL_GPIO_Init+0x222>
 80036bc:	2300      	movs	r3, #0
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	f002 0203 	and.w	r2, r2, #3
 80036c4:	0092      	lsls	r2, r2, #2
 80036c6:	4093      	lsls	r3, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036d0:	4936      	ldr	r1, [pc, #216]	; (80037ac <HAL_GPIO_Init+0x310>)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	3302      	adds	r3, #2
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036de:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <HAL_GPIO_Init+0x338>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003702:	4a34      	ldr	r2, [pc, #208]	; (80037d4 <HAL_GPIO_Init+0x338>)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003708:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <HAL_GPIO_Init+0x338>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	43db      	mvns	r3, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800372c:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <HAL_GPIO_Init+0x338>)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003732:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <HAL_GPIO_Init+0x338>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	43db      	mvns	r3, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003756:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <HAL_GPIO_Init+0x338>)
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <HAL_GPIO_Init+0x338>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <HAL_GPIO_Init+0x338>)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	3301      	adds	r3, #1
 800378a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa22 f303 	lsr.w	r3, r2, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	f47f ae88 	bne.w	80034ac <HAL_GPIO_Init+0x10>
  }
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40013800 	.word	0x40013800
 80037b0:	40020000 	.word	0x40020000
 80037b4:	40020400 	.word	0x40020400
 80037b8:	40020800 	.word	0x40020800
 80037bc:	40020c00 	.word	0x40020c00
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40021400 	.word	0x40021400
 80037c8:	40021800 	.word	0x40021800
 80037cc:	40021c00 	.word	0x40021c00
 80037d0:	40022000 	.word	0x40022000
 80037d4:	40013c00 	.word	0x40013c00

080037d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	807b      	strh	r3, [r7, #2]
 80037e4:	4613      	mov	r3, r2
 80037e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e8:	787b      	ldrb	r3, [r7, #1]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037f4:	e003      	b.n	80037fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	041a      	lsls	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	619a      	str	r2, [r3, #24]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800380a:	b08f      	sub	sp, #60	; 0x3c
 800380c:	af0a      	add	r7, sp, #40	; 0x28
 800380e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e054      	b.n	80038c4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f00a fa91 	bl	800dd5c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2203      	movs	r2, #3
 800383e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f003 fd35 	bl	80072c8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	687e      	ldr	r6, [r7, #4]
 8003866:	466d      	mov	r5, sp
 8003868:	f106 0410 	add.w	r4, r6, #16
 800386c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800386e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003874:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003878:	e885 0003 	stmia.w	r5, {r0, r1}
 800387c:	1d33      	adds	r3, r6, #4
 800387e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003880:	6838      	ldr	r0, [r7, #0]
 8003882:	f003 fcba 	bl	80071fa <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2101      	movs	r1, #1
 800388c:	4618      	mov	r0, r3
 800388e:	f003 fd2b 	bl	80072e8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	687e      	ldr	r6, [r7, #4]
 800389a:	466d      	mov	r5, sp
 800389c:	f106 0410 	add.w	r4, r6, #16
 80038a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80038b0:	1d33      	adds	r3, r6, #4
 80038b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038b4:	6838      	ldr	r0, [r7, #0]
 80038b6:	f003 fe8d 	bl	80075d4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038cc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af04      	add	r7, sp, #16
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	4608      	mov	r0, r1
 80038d6:	4611      	mov	r1, r2
 80038d8:	461a      	mov	r2, r3
 80038da:	4603      	mov	r3, r0
 80038dc:	70fb      	strb	r3, [r7, #3]
 80038de:	460b      	mov	r3, r1
 80038e0:	70bb      	strb	r3, [r7, #2]
 80038e2:	4613      	mov	r3, r2
 80038e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_HCD_HC_Init+0x28>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e076      	b.n	80039e2 <HAL_HCD_HC_Init+0x116>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	333d      	adds	r3, #61	; 0x3d
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	212c      	movs	r1, #44	; 0x2c
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	4413      	add	r3, r2
 800391a:	3338      	adds	r3, #56	; 0x38
 800391c:	787a      	ldrb	r2, [r7, #1]
 800391e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	212c      	movs	r1, #44	; 0x2c
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	4413      	add	r3, r2
 800392c:	3340      	adds	r3, #64	; 0x40
 800392e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003930:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	212c      	movs	r1, #44	; 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	3339      	adds	r3, #57	; 0x39
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	333f      	adds	r3, #63	; 0x3f
 8003952:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003956:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	78ba      	ldrb	r2, [r7, #2]
 800395c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003960:	b2d0      	uxtb	r0, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	333a      	adds	r3, #58	; 0x3a
 800396e:	4602      	mov	r2, r0
 8003970:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003972:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003976:	2b00      	cmp	r3, #0
 8003978:	da09      	bge.n	800398e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	333b      	adds	r3, #59	; 0x3b
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	e008      	b.n	80039a0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	212c      	movs	r1, #44	; 0x2c
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	4413      	add	r3, r2
 800399a:	333b      	adds	r3, #59	; 0x3b
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	212c      	movs	r1, #44	; 0x2c
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	333c      	adds	r3, #60	; 0x3c
 80039ae:	f897 2020 	ldrb.w	r2, [r7, #32]
 80039b2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	787c      	ldrb	r4, [r7, #1]
 80039ba:	78ba      	ldrb	r2, [r7, #2]
 80039bc:	78f9      	ldrb	r1, [r7, #3]
 80039be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80039c0:	9302      	str	r3, [sp, #8]
 80039c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	4623      	mov	r3, r4
 80039d0:	f003 ff76 	bl	80078c0 <USB_HC_Init>
 80039d4:	4603      	mov	r3, r0
 80039d6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd90      	pop	{r4, r7, pc}

080039ea <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_HCD_HC_Halt+0x1e>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e00f      	b.n	8003a28 <HAL_HCD_HC_Halt+0x3e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f004 f9b1 	bl	8007d80 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	70fb      	strb	r3, [r7, #3]
 8003a42:	460b      	mov	r3, r1
 8003a44:	70bb      	strb	r3, [r7, #2]
 8003a46:	4613      	mov	r3, r2
 8003a48:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	333b      	adds	r3, #59	; 0x3b
 8003a58:	78ba      	ldrb	r2, [r7, #2]
 8003a5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	333f      	adds	r3, #63	; 0x3f
 8003a6a:	787a      	ldrb	r2, [r7, #1]
 8003a6c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003a6e:	7c3b      	ldrb	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d112      	bne.n	8003a9a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	212c      	movs	r1, #44	; 0x2c
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	3342      	adds	r3, #66	; 0x42
 8003a82:	2203      	movs	r2, #3
 8003a84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	333d      	adds	r3, #61	; 0x3d
 8003a94:	7f3a      	ldrb	r2, [r7, #28]
 8003a96:	701a      	strb	r2, [r3, #0]
 8003a98:	e008      	b.n	8003aac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3342      	adds	r3, #66	; 0x42
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003aac:	787b      	ldrb	r3, [r7, #1]
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	f200 80c6 	bhi.w	8003c40 <HAL_HCD_HC_SubmitRequest+0x210>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003c2d 	.word	0x08003c2d
 8003ac4:	08003b31 	.word	0x08003b31
 8003ac8:	08003baf 	.word	0x08003baf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003acc:	7c3b      	ldrb	r3, [r7, #16]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	f040 80b8 	bne.w	8003c44 <HAL_HCD_HC_SubmitRequest+0x214>
 8003ad4:	78bb      	ldrb	r3, [r7, #2]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f040 80b4 	bne.w	8003c44 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003adc:	8b3b      	ldrh	r3, [r7, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d108      	bne.n	8003af4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	212c      	movs	r1, #44	; 0x2c
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	3355      	adds	r3, #85	; 0x55
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	212c      	movs	r1, #44	; 0x2c
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	4413      	add	r3, r2
 8003b00:	3355      	adds	r3, #85	; 0x55
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d109      	bne.n	8003b1c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	212c      	movs	r1, #44	; 0x2c
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	3342      	adds	r3, #66	; 0x42
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b1a:	e093      	b.n	8003c44 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	212c      	movs	r1, #44	; 0x2c
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	3342      	adds	r3, #66	; 0x42
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	701a      	strb	r2, [r3, #0]
      break;
 8003b2e:	e089      	b.n	8003c44 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003b30:	78bb      	ldrb	r3, [r7, #2]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d11d      	bne.n	8003b72 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	3355      	adds	r3, #85	; 0x55
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	212c      	movs	r1, #44	; 0x2c
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	3342      	adds	r3, #66	; 0x42
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003b5c:	e073      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b5e:	78fb      	ldrb	r3, [r7, #3]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3342      	adds	r3, #66	; 0x42
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	701a      	strb	r2, [r3, #0]
      break;
 8003b70:	e069      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	212c      	movs	r1, #44	; 0x2c
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3354      	adds	r3, #84	; 0x54
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	212c      	movs	r1, #44	; 0x2c
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	4413      	add	r3, r2
 8003b92:	3342      	adds	r3, #66	; 0x42
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
      break;
 8003b98:	e055      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	212c      	movs	r1, #44	; 0x2c
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3342      	adds	r3, #66	; 0x42
 8003ba8:	2202      	movs	r2, #2
 8003baa:	701a      	strb	r2, [r3, #0]
      break;
 8003bac:	e04b      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003bae:	78bb      	ldrb	r3, [r7, #2]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d11d      	bne.n	8003bf0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3355      	adds	r3, #85	; 0x55
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3342      	adds	r3, #66	; 0x42
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003bda:	e034      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	212c      	movs	r1, #44	; 0x2c
 8003be2:	fb01 f303 	mul.w	r3, r1, r3
 8003be6:	4413      	add	r3, r2
 8003be8:	3342      	adds	r3, #66	; 0x42
 8003bea:	2202      	movs	r2, #2
 8003bec:	701a      	strb	r2, [r3, #0]
      break;
 8003bee:	e02a      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	212c      	movs	r1, #44	; 0x2c
 8003bf6:	fb01 f303 	mul.w	r3, r1, r3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3354      	adds	r3, #84	; 0x54
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	212c      	movs	r1, #44	; 0x2c
 8003c0a:	fb01 f303 	mul.w	r3, r1, r3
 8003c0e:	4413      	add	r3, r2
 8003c10:	3342      	adds	r3, #66	; 0x42
 8003c12:	2200      	movs	r2, #0
 8003c14:	701a      	strb	r2, [r3, #0]
      break;
 8003c16:	e016      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	212c      	movs	r1, #44	; 0x2c
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	3342      	adds	r3, #66	; 0x42
 8003c26:	2202      	movs	r2, #2
 8003c28:	701a      	strb	r2, [r3, #0]
      break;
 8003c2a:	e00c      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	212c      	movs	r1, #44	; 0x2c
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	4413      	add	r3, r2
 8003c38:	3342      	adds	r3, #66	; 0x42
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
      break;
 8003c3e:	e002      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003c40:	bf00      	nop
 8003c42:	e000      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003c44:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	212c      	movs	r1, #44	; 0x2c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	3344      	adds	r3, #68	; 0x44
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	8b3a      	ldrh	r2, [r7, #24]
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	202c      	movs	r0, #44	; 0x2c
 8003c60:	fb00 f303 	mul.w	r3, r0, r3
 8003c64:	440b      	add	r3, r1
 8003c66:	334c      	adds	r3, #76	; 0x4c
 8003c68:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	212c      	movs	r1, #44	; 0x2c
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	4413      	add	r3, r2
 8003c76:	3360      	adds	r3, #96	; 0x60
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	212c      	movs	r1, #44	; 0x2c
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	3350      	adds	r3, #80	; 0x50
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	212c      	movs	r1, #44	; 0x2c
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	4413      	add	r3, r2
 8003c9a:	3339      	adds	r3, #57	; 0x39
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	212c      	movs	r1, #44	; 0x2c
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	3361      	adds	r3, #97	; 0x61
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	222c      	movs	r2, #44	; 0x2c
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	3338      	adds	r3, #56	; 0x38
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	18d1      	adds	r1, r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f003 ff06 	bl	8007adc <USB_HC_StartXfer>
 8003cd0:	4603      	mov	r3, r0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop

08003cdc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f003 fc2e 	bl	8007554 <USB_GetMode>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	f040 80ef 	bne.w	8003ede <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f003 fc13 	bl	8007530 <USB_ReadInterrupts>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80e5 	beq.w	8003edc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f003 fc0a 	bl	8007530 <USB_ReadInterrupts>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d26:	d104      	bne.n	8003d32 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f003 fbfa 	bl	8007530 <USB_ReadInterrupts>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d46:	d104      	bne.n	8003d52 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f003 fbea 	bl	8007530 <USB_ReadInterrupts>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d66:	d104      	bne.n	8003d72 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f003 fbda 	bl	8007530 <USB_ReadInterrupts>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d103      	bne.n	8003d8e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 fbcc 	bl	8007530 <USB_ReadInterrupts>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da2:	d115      	bne.n	8003dd0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003dac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d108      	bne.n	8003dd0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f00a f84a 	bl	800de58 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f003 fcb6 	bl	800773c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f003 fbab 	bl	8007530 <USB_ReadInterrupts>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003de4:	d102      	bne.n	8003dec <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f001 fa01 	bl	80051ee <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f003 fb9d 	bl	8007530 <USB_ReadInterrupts>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d106      	bne.n	8003e0e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f00a f80d 	bl	800de20 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f003 fb8c 	bl	8007530 <USB_ReadInterrupts>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	d101      	bne.n	8003e26 <HAL_HCD_IRQHandler+0x14a>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_HCD_IRQHandler+0x14c>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d012      	beq.n	8003e52 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0210 	bic.w	r2, r2, #16
 8003e3a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f001 f904 	bl	800504a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699a      	ldr	r2, [r3, #24]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0210 	orr.w	r2, r2, #16
 8003e50:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f003 fb6a 	bl	8007530 <USB_ReadInterrupts>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e66:	d13a      	bne.n	8003ede <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f003 ff77 	bl	8007d60 <USB_HC_ReadInterrupt>
 8003e72:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	e025      	b.n	8003ec6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	fa22 f303 	lsr.w	r3, r2, r3
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d018      	beq.n	8003ec0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea4:	d106      	bne.n	8003eb4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f8a9 	bl	8004004 <HCD_HC_IN_IRQHandler>
 8003eb2:	e005      	b.n	8003ec0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	4619      	mov	r1, r3
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fcc4 	bl	8004848 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d3d4      	bcc.n	8003e7a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ed8:	615a      	str	r2, [r3, #20]
 8003eda:	e000      	b.n	8003ede <HAL_HCD_IRQHandler+0x202>
      return;
 8003edc:	bf00      	nop
    }
  }
}
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_HCD_Start+0x16>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e013      	b.n	8003f22 <HAL_HCD_Start+0x3e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2101      	movs	r1, #1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f003 fc7a 	bl	8007802 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f003 f9c8 	bl	80072a8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_HCD_Stop+0x16>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e00d      	b.n	8003f5c <HAL_HCD_Stop+0x32>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f004 f86d 	bl	800802c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f003 fc1c 	bl	80077ae <USB_ResetPort>
 8003f76:	4603      	mov	r3, r0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	3360      	adds	r3, #96	; 0x60
 8003f9a:	781b      	ldrb	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	212c      	movs	r1, #44	; 0x2c
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3350      	adds	r3, #80	; 0x50
 8003fc0:	681b      	ldr	r3, [r3, #0]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr

08003fcc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f003 fc60 	bl	800789e <USB_GetCurrentFrame>
 8003fde:	4603      	mov	r3, r0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f003 fc3c 	bl	8007872 <USB_GetHostSpeed>
 8003ffa:	4603      	mov	r3, r0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4413      	add	r3, r2
 8004026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b04      	cmp	r3, #4
 8004032:	d119      	bne.n	8004068 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004040:	461a      	mov	r2, r3
 8004042:	2304      	movs	r3, #4
 8004044:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4413      	add	r3, r2
 800404e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	0151      	lsls	r1, r2, #5
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	440a      	add	r2, r1
 800405c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004060:	f043 0302 	orr.w	r3, r3, #2
 8004064:	60d3      	str	r3, [r2, #12]
 8004066:	e101      	b.n	800426c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407e:	d12b      	bne.n	80040d8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408c:	461a      	mov	r2, r3
 800408e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004092:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3361      	adds	r3, #97	; 0x61
 80040a2:	2207      	movs	r2, #7
 80040a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040c0:	f043 0302 	orr.w	r3, r3, #2
 80040c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	4611      	mov	r1, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f003 fe55 	bl	8007d80 <USB_HC_Halt>
 80040d6:	e0c9      	b.n	800426c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	d109      	bne.n	8004102 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fa:	461a      	mov	r2, r3
 80040fc:	2320      	movs	r3, #32
 80040fe:	6093      	str	r3, [r2, #8]
 8004100:	e0b4      	b.n	800426c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4413      	add	r3, r2
 800410a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b08      	cmp	r3, #8
 8004116:	d133      	bne.n	8004180 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4413      	add	r3, r2
 8004120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	0151      	lsls	r1, r2, #5
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	440a      	add	r2, r1
 800412e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004132:	f043 0302 	orr.w	r3, r3, #2
 8004136:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	212c      	movs	r1, #44	; 0x2c
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	4413      	add	r3, r2
 8004144:	3361      	adds	r3, #97	; 0x61
 8004146:	2205      	movs	r2, #5
 8004148:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4413      	add	r3, r2
 8004152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004156:	461a      	mov	r2, r3
 8004158:	2310      	movs	r3, #16
 800415a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004168:	461a      	mov	r2, r3
 800416a:	2308      	movs	r3, #8
 800416c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f003 fe01 	bl	8007d80 <USB_HC_Halt>
 800417e:	e075      	b.n	800426c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4413      	add	r3, r2
 8004188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004196:	d134      	bne.n	8004202 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	0151      	lsls	r1, r2, #5
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	440a      	add	r2, r1
 80041ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041b2:	f043 0302 	orr.w	r3, r3, #2
 80041b6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	212c      	movs	r1, #44	; 0x2c
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	3361      	adds	r3, #97	; 0x61
 80041c6:	2208      	movs	r2, #8
 80041c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d6:	461a      	mov	r2, r3
 80041d8:	2310      	movs	r3, #16
 80041da:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	461a      	mov	r2, r3
 80041ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ee:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f003 fdc0 	bl	8007d80 <USB_HC_Halt>
 8004200:	e034      	b.n	800426c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b80      	cmp	r3, #128	; 0x80
 8004216:	d129      	bne.n	800426c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	0151      	lsls	r1, r2, #5
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	440a      	add	r2, r1
 800422e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004232:	f043 0302 	orr.w	r3, r3, #2
 8004236:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	3361      	adds	r3, #97	; 0x61
 8004246:	2206      	movs	r2, #6
 8004248:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f003 fd93 	bl	8007d80 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4413      	add	r3, r2
 8004262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004266:	461a      	mov	r2, r3
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4413      	add	r3, r2
 8004274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800427e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004282:	d122      	bne.n	80042ca <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4413      	add	r3, r2
 800428c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	0151      	lsls	r1, r2, #5
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	440a      	add	r2, r1
 800429a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800429e:	f043 0302 	orr.w	r3, r3, #2
 80042a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f003 fd66 	bl	8007d80 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c0:	461a      	mov	r2, r3
 80042c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042c6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80042c8:	e2ba      	b.n	8004840 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b01      	cmp	r3, #1
 80042de:	f040 811b 	bne.w	8004518 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d019      	beq.n	800431e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	212c      	movs	r1, #44	; 0x2c
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	4413      	add	r3, r2
 80042f6:	3348      	adds	r3, #72	; 0x48
 80042f8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	0159      	lsls	r1, r3, #5
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	440b      	add	r3, r1
 8004302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800430c:	1ad2      	subs	r2, r2, r3
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	202c      	movs	r0, #44	; 0x2c
 8004314:	fb00 f303 	mul.w	r3, r0, r3
 8004318:	440b      	add	r3, r1
 800431a:	3350      	adds	r3, #80	; 0x50
 800431c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	212c      	movs	r1, #44	; 0x2c
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	4413      	add	r3, r2
 800432a:	3361      	adds	r3, #97	; 0x61
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	212c      	movs	r1, #44	; 0x2c
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	4413      	add	r3, r2
 800433c:	335c      	adds	r3, #92	; 0x5c
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4413      	add	r3, r2
 800434a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434e:	461a      	mov	r2, r3
 8004350:	2301      	movs	r3, #1
 8004352:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	212c      	movs	r1, #44	; 0x2c
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	4413      	add	r3, r2
 8004360:	333f      	adds	r3, #63	; 0x3f
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d009      	beq.n	800437c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	212c      	movs	r1, #44	; 0x2c
 800436e:	fb01 f303 	mul.w	r3, r1, r3
 8004372:	4413      	add	r3, r2
 8004374:	333f      	adds	r3, #63	; 0x3f
 8004376:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004378:	2b02      	cmp	r3, #2
 800437a:	d121      	bne.n	80043c0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4413      	add	r3, r2
 8004384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	0151      	lsls	r1, r2, #5
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	440a      	add	r2, r1
 8004392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004396:	f043 0302 	orr.w	r3, r3, #2
 800439a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f003 fcea 	bl	8007d80 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b8:	461a      	mov	r2, r3
 80043ba:	2310      	movs	r3, #16
 80043bc:	6093      	str	r3, [r2, #8]
 80043be:	e066      	b.n	800448e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	212c      	movs	r1, #44	; 0x2c
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	333f      	adds	r3, #63	; 0x3f
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d127      	bne.n	8004424 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	0151      	lsls	r1, r2, #5
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	440a      	add	r2, r1
 80043ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043f2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	212c      	movs	r1, #44	; 0x2c
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	4413      	add	r3, r2
 8004400:	3360      	adds	r3, #96	; 0x60
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	b2d9      	uxtb	r1, r3
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	202c      	movs	r0, #44	; 0x2c
 8004410:	fb00 f303 	mul.w	r3, r0, r3
 8004414:	4413      	add	r3, r2
 8004416:	3360      	adds	r3, #96	; 0x60
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f009 fd29 	bl	800de74 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004422:	e034      	b.n	800448e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	212c      	movs	r1, #44	; 0x2c
 800442a:	fb01 f303 	mul.w	r3, r1, r3
 800442e:	4413      	add	r3, r2
 8004430:	333f      	adds	r3, #63	; 0x3f
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d12a      	bne.n	800448e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	212c      	movs	r1, #44	; 0x2c
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	4413      	add	r3, r2
 8004444:	3360      	adds	r3, #96	; 0x60
 8004446:	2201      	movs	r2, #1
 8004448:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	212c      	movs	r1, #44	; 0x2c
 8004450:	fb01 f303 	mul.w	r3, r1, r3
 8004454:	4413      	add	r3, r2
 8004456:	3354      	adds	r3, #84	; 0x54
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	f083 0301 	eor.w	r3, r3, #1
 800445e:	b2d8      	uxtb	r0, r3
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	212c      	movs	r1, #44	; 0x2c
 8004466:	fb01 f303 	mul.w	r3, r1, r3
 800446a:	4413      	add	r3, r2
 800446c:	3354      	adds	r3, #84	; 0x54
 800446e:	4602      	mov	r2, r0
 8004470:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	b2d9      	uxtb	r1, r3
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	202c      	movs	r0, #44	; 0x2c
 800447c:	fb00 f303 	mul.w	r3, r0, r3
 8004480:	4413      	add	r3, r2
 8004482:	3360      	adds	r3, #96	; 0x60
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f009 fcf3 	bl	800de74 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d12b      	bne.n	80044ee <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	212c      	movs	r1, #44	; 0x2c
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	3348      	adds	r3, #72	; 0x48
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	202c      	movs	r0, #44	; 0x2c
 80044ac:	fb00 f202 	mul.w	r2, r0, r2
 80044b0:	440a      	add	r2, r1
 80044b2:	3240      	adds	r2, #64	; 0x40
 80044b4:	8812      	ldrh	r2, [r2, #0]
 80044b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 81be 	beq.w	8004840 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	212c      	movs	r1, #44	; 0x2c
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	3354      	adds	r3, #84	; 0x54
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	f083 0301 	eor.w	r3, r3, #1
 80044d8:	b2d8      	uxtb	r0, r3
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	3354      	adds	r3, #84	; 0x54
 80044e8:	4602      	mov	r2, r0
 80044ea:	701a      	strb	r2, [r3, #0]
}
 80044ec:	e1a8      	b.n	8004840 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	212c      	movs	r1, #44	; 0x2c
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	3354      	adds	r3, #84	; 0x54
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	f083 0301 	eor.w	r3, r3, #1
 8004502:	b2d8      	uxtb	r0, r3
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	212c      	movs	r1, #44	; 0x2c
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	4413      	add	r3, r2
 8004510:	3354      	adds	r3, #84	; 0x54
 8004512:	4602      	mov	r2, r0
 8004514:	701a      	strb	r2, [r3, #0]
}
 8004516:	e193      	b.n	8004840 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4413      	add	r3, r2
 8004520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b02      	cmp	r3, #2
 800452c:	f040 8106 	bne.w	800473c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	0151      	lsls	r1, r2, #5
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	440a      	add	r2, r1
 8004546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800454a:	f023 0302 	bic.w	r3, r3, #2
 800454e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	212c      	movs	r1, #44	; 0x2c
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	4413      	add	r3, r2
 800455c:	3361      	adds	r3, #97	; 0x61
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d109      	bne.n	8004578 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	212c      	movs	r1, #44	; 0x2c
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	4413      	add	r3, r2
 8004570:	3360      	adds	r3, #96	; 0x60
 8004572:	2201      	movs	r2, #1
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	e0c9      	b.n	800470c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	212c      	movs	r1, #44	; 0x2c
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	4413      	add	r3, r2
 8004584:	3361      	adds	r3, #97	; 0x61
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b05      	cmp	r3, #5
 800458a:	d109      	bne.n	80045a0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	212c      	movs	r1, #44	; 0x2c
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	4413      	add	r3, r2
 8004598:	3360      	adds	r3, #96	; 0x60
 800459a:	2205      	movs	r2, #5
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e0b5      	b.n	800470c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	212c      	movs	r1, #44	; 0x2c
 80045a6:	fb01 f303 	mul.w	r3, r1, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	3361      	adds	r3, #97	; 0x61
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b06      	cmp	r3, #6
 80045b2:	d009      	beq.n	80045c8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	212c      	movs	r1, #44	; 0x2c
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	4413      	add	r3, r2
 80045c0:	3361      	adds	r3, #97	; 0x61
 80045c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d150      	bne.n	800466a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	212c      	movs	r1, #44	; 0x2c
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	335c      	adds	r3, #92	; 0x5c
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	202c      	movs	r0, #44	; 0x2c
 80045e0:	fb00 f303 	mul.w	r3, r0, r3
 80045e4:	440b      	add	r3, r1
 80045e6:	335c      	adds	r3, #92	; 0x5c
 80045e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	212c      	movs	r1, #44	; 0x2c
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	4413      	add	r3, r2
 80045f6:	335c      	adds	r3, #92	; 0x5c
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d912      	bls.n	8004624 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	212c      	movs	r1, #44	; 0x2c
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	4413      	add	r3, r2
 800460a:	335c      	adds	r3, #92	; 0x5c
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	212c      	movs	r1, #44	; 0x2c
 8004616:	fb01 f303 	mul.w	r3, r1, r3
 800461a:	4413      	add	r3, r2
 800461c:	3360      	adds	r3, #96	; 0x60
 800461e:	2204      	movs	r2, #4
 8004620:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004622:	e073      	b.n	800470c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	212c      	movs	r1, #44	; 0x2c
 800462a:	fb01 f303 	mul.w	r3, r1, r3
 800462e:	4413      	add	r3, r2
 8004630:	3360      	adds	r3, #96	; 0x60
 8004632:	2202      	movs	r2, #2
 8004634:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4413      	add	r3, r2
 800463e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800464c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004654:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004662:	461a      	mov	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004668:	e050      	b.n	800470c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	212c      	movs	r1, #44	; 0x2c
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	4413      	add	r3, r2
 8004676:	3361      	adds	r3, #97	; 0x61
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d122      	bne.n	80046c4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	212c      	movs	r1, #44	; 0x2c
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	4413      	add	r3, r2
 800468a:	3360      	adds	r3, #96	; 0x60
 800468c:	2202      	movs	r2, #2
 800468e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4413      	add	r3, r2
 8004698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046a6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	461a      	mov	r2, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e023      	b.n	800470c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	212c      	movs	r1, #44	; 0x2c
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	4413      	add	r3, r2
 80046d0:	3361      	adds	r3, #97	; 0x61
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b07      	cmp	r3, #7
 80046d6:	d119      	bne.n	800470c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	212c      	movs	r1, #44	; 0x2c
 80046de:	fb01 f303 	mul.w	r3, r1, r3
 80046e2:	4413      	add	r3, r2
 80046e4:	335c      	adds	r3, #92	; 0x5c
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	202c      	movs	r0, #44	; 0x2c
 80046f0:	fb00 f303 	mul.w	r3, r0, r3
 80046f4:	440b      	add	r3, r1
 80046f6:	335c      	adds	r3, #92	; 0x5c
 80046f8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	212c      	movs	r1, #44	; 0x2c
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	4413      	add	r3, r2
 8004706:	3360      	adds	r3, #96	; 0x60
 8004708:	2204      	movs	r2, #4
 800470a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4413      	add	r3, r2
 8004714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004718:	461a      	mov	r2, r3
 800471a:	2302      	movs	r3, #2
 800471c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	b2d9      	uxtb	r1, r3
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	202c      	movs	r0, #44	; 0x2c
 8004728:	fb00 f303 	mul.w	r3, r0, r3
 800472c:	4413      	add	r3, r2
 800472e:	3360      	adds	r3, #96	; 0x60
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f009 fb9d 	bl	800de74 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800473a:	e081      	b.n	8004840 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4413      	add	r3, r2
 8004744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b10      	cmp	r3, #16
 8004750:	d176      	bne.n	8004840 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	212c      	movs	r1, #44	; 0x2c
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	4413      	add	r3, r2
 800475e:	333f      	adds	r3, #63	; 0x3f
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b03      	cmp	r3, #3
 8004764:	d121      	bne.n	80047aa <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	212c      	movs	r1, #44	; 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	335c      	adds	r3, #92	; 0x5c
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4413      	add	r3, r2
 8004780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	440a      	add	r2, r1
 800478e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004792:	f043 0302 	orr.w	r3, r3, #2
 8004796:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	4611      	mov	r1, r2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f003 faec 	bl	8007d80 <USB_HC_Halt>
 80047a8:	e041      	b.n	800482e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	212c      	movs	r1, #44	; 0x2c
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	4413      	add	r3, r2
 80047b6:	333f      	adds	r3, #63	; 0x3f
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	212c      	movs	r1, #44	; 0x2c
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	4413      	add	r3, r2
 80047ca:	333f      	adds	r3, #63	; 0x3f
 80047cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d12d      	bne.n	800482e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	212c      	movs	r1, #44	; 0x2c
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	4413      	add	r3, r2
 80047de:	335c      	adds	r3, #92	; 0x5c
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d120      	bne.n	800482e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	212c      	movs	r1, #44	; 0x2c
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	3361      	adds	r3, #97	; 0x61
 80047fa:	2203      	movs	r2, #3
 80047fc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4413      	add	r3, r2
 8004806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	440a      	add	r2, r1
 8004814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004818:	f043 0302 	orr.w	r3, r3, #2
 800481c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	4611      	mov	r1, r2
 8004828:	4618      	mov	r0, r3
 800482a:	f003 faa9 	bl	8007d80 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4413      	add	r3, r2
 8004836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483a:	461a      	mov	r2, r3
 800483c:	2310      	movs	r3, #16
 800483e:	6093      	str	r3, [r2, #8]
}
 8004840:	bf00      	nop
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800485e:	78fb      	ldrb	r3, [r7, #3]
 8004860:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	4413      	add	r3, r2
 800486a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b04      	cmp	r3, #4
 8004876:	d119      	bne.n	80048ac <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	4413      	add	r3, r2
 8004880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004884:	461a      	mov	r2, r3
 8004886:	2304      	movs	r3, #4
 8004888:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	4413      	add	r3, r2
 8004892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	0151      	lsls	r1, r2, #5
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	440a      	add	r2, r1
 80048a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048a4:	f043 0302 	orr.w	r3, r3, #2
 80048a8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80048aa:	e3ca      	b.n	8005042 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d13e      	bne.n	8004940 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ce:	461a      	mov	r2, r3
 80048d0:	2320      	movs	r3, #32
 80048d2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	212c      	movs	r1, #44	; 0x2c
 80048da:	fb01 f303 	mul.w	r3, r1, r3
 80048de:	4413      	add	r3, r2
 80048e0:	333d      	adds	r3, #61	; 0x3d
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	f040 83ac 	bne.w	8005042 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	212c      	movs	r1, #44	; 0x2c
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	4413      	add	r3, r2
 80048f6:	333d      	adds	r3, #61	; 0x3d
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	212c      	movs	r1, #44	; 0x2c
 8004902:	fb01 f303 	mul.w	r3, r1, r3
 8004906:	4413      	add	r3, r2
 8004908:	3360      	adds	r3, #96	; 0x60
 800490a:	2202      	movs	r2, #2
 800490c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4413      	add	r3, r2
 8004916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	0151      	lsls	r1, r2, #5
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	440a      	add	r2, r1
 8004924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004928:	f043 0302 	orr.w	r3, r3, #2
 800492c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f003 fa21 	bl	8007d80 <USB_HC_Halt>
}
 800493e:	e380      	b.n	8005042 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	4413      	add	r3, r2
 8004948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004956:	d122      	bne.n	800499e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	4413      	add	r3, r2
 8004960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	0151      	lsls	r1, r2, #5
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	440a      	add	r2, r1
 800496e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004972:	f043 0302 	orr.w	r3, r3, #2
 8004976:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	4611      	mov	r1, r2
 8004982:	4618      	mov	r0, r3
 8004984:	f003 f9fc 	bl	8007d80 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004994:	461a      	mov	r2, r3
 8004996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800499a:	6093      	str	r3, [r2, #8]
}
 800499c:	e351      	b.n	8005042 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d150      	bne.n	8004a56 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	212c      	movs	r1, #44	; 0x2c
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	4413      	add	r3, r2
 80049c0:	335c      	adds	r3, #92	; 0x5c
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d111      	bne.n	8004a00 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	212c      	movs	r1, #44	; 0x2c
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	4413      	add	r3, r2
 80049e8:	333d      	adds	r3, #61	; 0x3d
 80049ea:	2201      	movs	r2, #1
 80049ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fa:	461a      	mov	r2, r3
 80049fc:	2340      	movs	r3, #64	; 0x40
 80049fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a1a:	f043 0302 	orr.w	r3, r3, #2
 8004a1e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f003 f9a8 	bl	8007d80 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2301      	movs	r3, #1
 8004a40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	212c      	movs	r1, #44	; 0x2c
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3361      	adds	r3, #97	; 0x61
 8004a50:	2201      	movs	r2, #1
 8004a52:	701a      	strb	r2, [r3, #0]
}
 8004a54:	e2f5      	b.n	8005042 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d13c      	bne.n	8004ae6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	212c      	movs	r1, #44	; 0x2c
 8004a72:	fb01 f303 	mul.w	r3, r1, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	3361      	adds	r3, #97	; 0x61
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	212c      	movs	r1, #44	; 0x2c
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	4413      	add	r3, r2
 8004a8a:	333d      	adds	r3, #61	; 0x3d
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	212c      	movs	r1, #44	; 0x2c
 8004a96:	fb01 f303 	mul.w	r3, r1, r3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	335c      	adds	r3, #92	; 0x5c
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004abc:	f043 0302 	orr.w	r3, r3, #2
 8004ac0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	4611      	mov	r1, r2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f003 f957 	bl	8007d80 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ade:	461a      	mov	r2, r3
 8004ae0:	2340      	movs	r3, #64	; 0x40
 8004ae2:	6093      	str	r3, [r2, #8]
}
 8004ae4:	e2ad      	b.n	8005042 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d12a      	bne.n	8004b52 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b28:	f043 0302 	orr.w	r3, r3, #2
 8004b2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f003 f921 	bl	8007d80 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	212c      	movs	r1, #44	; 0x2c
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	3361      	adds	r3, #97	; 0x61
 8004b4c:	2205      	movs	r2, #5
 8004b4e:	701a      	strb	r2, [r3, #0]
}
 8004b50:	e277      	b.n	8005042 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d150      	bne.n	8004c0a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	212c      	movs	r1, #44	; 0x2c
 8004b6e:	fb01 f303 	mul.w	r3, r1, r3
 8004b72:	4413      	add	r3, r2
 8004b74:	335c      	adds	r3, #92	; 0x5c
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	212c      	movs	r1, #44	; 0x2c
 8004b80:	fb01 f303 	mul.w	r3, r1, r3
 8004b84:	4413      	add	r3, r2
 8004b86:	3361      	adds	r3, #97	; 0x61
 8004b88:	2203      	movs	r2, #3
 8004b8a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	212c      	movs	r1, #44	; 0x2c
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	4413      	add	r3, r2
 8004b98:	333d      	adds	r3, #61	; 0x3d
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d112      	bne.n	8004bc6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	212c      	movs	r1, #44	; 0x2c
 8004ba6:	fb01 f303 	mul.w	r3, r1, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	333c      	adds	r3, #60	; 0x3c
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d108      	bne.n	8004bc6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	212c      	movs	r1, #44	; 0x2c
 8004bba:	fb01 f303 	mul.w	r3, r1, r3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	333d      	adds	r3, #61	; 0x3d
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	4611      	mov	r1, r2
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f003 f8c5 	bl	8007d80 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c02:	461a      	mov	r2, r3
 8004c04:	2310      	movs	r3, #16
 8004c06:	6093      	str	r3, [r2, #8]
}
 8004c08:	e21b      	b.n	8005042 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1c:	2b80      	cmp	r3, #128	; 0x80
 8004c1e:	d174      	bne.n	8004d0a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d121      	bne.n	8004c6c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	212c      	movs	r1, #44	; 0x2c
 8004c2e:	fb01 f303 	mul.w	r3, r1, r3
 8004c32:	4413      	add	r3, r2
 8004c34:	3361      	adds	r3, #97	; 0x61
 8004c36:	2206      	movs	r2, #6
 8004c38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	0151      	lsls	r1, r2, #5
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	440a      	add	r2, r1
 8004c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c54:	f043 0302 	orr.w	r3, r3, #2
 8004c58:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	4611      	mov	r1, r2
 8004c64:	4618      	mov	r0, r3
 8004c66:	f003 f88b 	bl	8007d80 <USB_HC_Halt>
 8004c6a:	e044      	b.n	8004cf6 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	212c      	movs	r1, #44	; 0x2c
 8004c72:	fb01 f303 	mul.w	r3, r1, r3
 8004c76:	4413      	add	r3, r2
 8004c78:	335c      	adds	r3, #92	; 0x5c
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	202c      	movs	r0, #44	; 0x2c
 8004c84:	fb00 f303 	mul.w	r3, r0, r3
 8004c88:	440b      	add	r3, r1
 8004c8a:	335c      	adds	r3, #92	; 0x5c
 8004c8c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	212c      	movs	r1, #44	; 0x2c
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	4413      	add	r3, r2
 8004c9a:	335c      	adds	r3, #92	; 0x5c
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d920      	bls.n	8004ce4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	212c      	movs	r1, #44	; 0x2c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	335c      	adds	r3, #92	; 0x5c
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	212c      	movs	r1, #44	; 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3360      	adds	r3, #96	; 0x60
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	b2d9      	uxtb	r1, r3
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	202c      	movs	r0, #44	; 0x2c
 8004cd0:	fb00 f303 	mul.w	r3, r0, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3360      	adds	r3, #96	; 0x60
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f009 f8c9 	bl	800de74 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ce2:	e008      	b.n	8004cf6 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	212c      	movs	r1, #44	; 0x2c
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	3360      	adds	r3, #96	; 0x60
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d02:	461a      	mov	r2, r3
 8004d04:	2380      	movs	r3, #128	; 0x80
 8004d06:	6093      	str	r3, [r2, #8]
}
 8004d08:	e19b      	b.n	8005042 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d134      	bne.n	8004d8c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	0151      	lsls	r1, r2, #5
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	440a      	add	r2, r1
 8004d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d3c:	f043 0302 	orr.w	r3, r3, #2
 8004d40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f003 f817 	bl	8007d80 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5e:	461a      	mov	r2, r3
 8004d60:	2310      	movs	r3, #16
 8004d62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d70:	461a      	mov	r2, r3
 8004d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	212c      	movs	r1, #44	; 0x2c
 8004d7e:	fb01 f303 	mul.w	r3, r1, r3
 8004d82:	4413      	add	r3, r2
 8004d84:	3361      	adds	r3, #97	; 0x61
 8004d86:	2208      	movs	r2, #8
 8004d88:	701a      	strb	r2, [r3, #0]
}
 8004d8a:	e15a      	b.n	8005042 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	f040 814f 	bne.w	8005042 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dbe:	f023 0302 	bic.w	r3, r3, #2
 8004dc2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	212c      	movs	r1, #44	; 0x2c
 8004dca:	fb01 f303 	mul.w	r3, r1, r3
 8004dce:	4413      	add	r3, r2
 8004dd0:	3361      	adds	r3, #97	; 0x61
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d17d      	bne.n	8004ed4 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	212c      	movs	r1, #44	; 0x2c
 8004dde:	fb01 f303 	mul.w	r3, r1, r3
 8004de2:	4413      	add	r3, r2
 8004de4:	3360      	adds	r3, #96	; 0x60
 8004de6:	2201      	movs	r2, #1
 8004de8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	212c      	movs	r1, #44	; 0x2c
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	4413      	add	r3, r2
 8004df6:	333f      	adds	r3, #63	; 0x3f
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d00a      	beq.n	8004e14 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	212c      	movs	r1, #44	; 0x2c
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	4413      	add	r3, r2
 8004e0a:	333f      	adds	r3, #63	; 0x3f
 8004e0c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	f040 8100 	bne.w	8005014 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d113      	bne.n	8004e44 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	212c      	movs	r1, #44	; 0x2c
 8004e22:	fb01 f303 	mul.w	r3, r1, r3
 8004e26:	4413      	add	r3, r2
 8004e28:	3355      	adds	r3, #85	; 0x55
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f083 0301 	eor.w	r3, r3, #1
 8004e30:	b2d8      	uxtb	r0, r3
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	212c      	movs	r1, #44	; 0x2c
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	3355      	adds	r3, #85	; 0x55
 8004e40:	4602      	mov	r2, r0
 8004e42:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	f040 80e3 	bne.w	8005014 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	212c      	movs	r1, #44	; 0x2c
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	4413      	add	r3, r2
 8004e5a:	334c      	adds	r3, #76	; 0x4c
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 80d8 	beq.w	8005014 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	212c      	movs	r1, #44	; 0x2c
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	4413      	add	r3, r2
 8004e70:	334c      	adds	r3, #76	; 0x4c
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	202c      	movs	r0, #44	; 0x2c
 8004e7a:	fb00 f202 	mul.w	r2, r0, r2
 8004e7e:	440a      	add	r2, r1
 8004e80:	3240      	adds	r2, #64	; 0x40
 8004e82:	8812      	ldrh	r2, [r2, #0]
 8004e84:	4413      	add	r3, r2
 8004e86:	3b01      	subs	r3, #1
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	202c      	movs	r0, #44	; 0x2c
 8004e8e:	fb00 f202 	mul.w	r2, r0, r2
 8004e92:	440a      	add	r2, r1
 8004e94:	3240      	adds	r2, #64	; 0x40
 8004e96:	8812      	ldrh	r2, [r2, #0]
 8004e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80b5 	beq.w	8005014 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	212c      	movs	r1, #44	; 0x2c
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3355      	adds	r3, #85	; 0x55
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	f083 0301 	eor.w	r3, r3, #1
 8004ebe:	b2d8      	uxtb	r0, r3
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	212c      	movs	r1, #44	; 0x2c
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	3355      	adds	r3, #85	; 0x55
 8004ece:	4602      	mov	r2, r0
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	e09f      	b.n	8005014 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	212c      	movs	r1, #44	; 0x2c
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	4413      	add	r3, r2
 8004ee0:	3361      	adds	r3, #97	; 0x61
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d109      	bne.n	8004efc <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	212c      	movs	r1, #44	; 0x2c
 8004eee:	fb01 f303 	mul.w	r3, r1, r3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	3360      	adds	r3, #96	; 0x60
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	e08b      	b.n	8005014 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	3361      	adds	r3, #97	; 0x61
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d109      	bne.n	8004f24 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	212c      	movs	r1, #44	; 0x2c
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3360      	adds	r3, #96	; 0x60
 8004f1e:	2202      	movs	r2, #2
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	e077      	b.n	8005014 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	212c      	movs	r1, #44	; 0x2c
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	4413      	add	r3, r2
 8004f30:	3361      	adds	r3, #97	; 0x61
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	d109      	bne.n	8004f4c <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	212c      	movs	r1, #44	; 0x2c
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	3360      	adds	r3, #96	; 0x60
 8004f46:	2205      	movs	r2, #5
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e063      	b.n	8005014 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	212c      	movs	r1, #44	; 0x2c
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	3361      	adds	r3, #97	; 0x61
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b06      	cmp	r3, #6
 8004f5e:	d009      	beq.n	8004f74 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	212c      	movs	r1, #44	; 0x2c
 8004f66:	fb01 f303 	mul.w	r3, r1, r3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3361      	adds	r3, #97	; 0x61
 8004f6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d14f      	bne.n	8005014 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	212c      	movs	r1, #44	; 0x2c
 8004f7a:	fb01 f303 	mul.w	r3, r1, r3
 8004f7e:	4413      	add	r3, r2
 8004f80:	335c      	adds	r3, #92	; 0x5c
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	202c      	movs	r0, #44	; 0x2c
 8004f8c:	fb00 f303 	mul.w	r3, r0, r3
 8004f90:	440b      	add	r3, r1
 8004f92:	335c      	adds	r3, #92	; 0x5c
 8004f94:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	212c      	movs	r1, #44	; 0x2c
 8004f9c:	fb01 f303 	mul.w	r3, r1, r3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	335c      	adds	r3, #92	; 0x5c
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d912      	bls.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	212c      	movs	r1, #44	; 0x2c
 8004fb0:	fb01 f303 	mul.w	r3, r1, r3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	335c      	adds	r3, #92	; 0x5c
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	212c      	movs	r1, #44	; 0x2c
 8004fc2:	fb01 f303 	mul.w	r3, r1, r3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3360      	adds	r3, #96	; 0x60
 8004fca:	2204      	movs	r2, #4
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	e021      	b.n	8005014 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	212c      	movs	r1, #44	; 0x2c
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	4413      	add	r3, r2
 8004fdc:	3360      	adds	r3, #96	; 0x60
 8004fde:	2202      	movs	r2, #2
 8004fe0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ff8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005000:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	4413      	add	r3, r2
 800500a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500e:	461a      	mov	r2, r3
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	4413      	add	r3, r2
 800501c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005020:	461a      	mov	r2, r3
 8005022:	2302      	movs	r3, #2
 8005024:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	b2d9      	uxtb	r1, r3
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	202c      	movs	r0, #44	; 0x2c
 8005030:	fb00 f303 	mul.w	r3, r0, r3
 8005034:	4413      	add	r3, r2
 8005036:	3360      	adds	r3, #96	; 0x60
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f008 ff19 	bl	800de74 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005042:	bf00      	nop
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b08a      	sub	sp, #40	; 0x28
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	0c5b      	lsrs	r3, r3, #17
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	091b      	lsrs	r3, r3, #4
 800507a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800507e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d004      	beq.n	8005090 <HCD_RXQLVL_IRQHandler+0x46>
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b05      	cmp	r3, #5
 800508a:	f000 80a9 	beq.w	80051e0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800508e:	e0aa      	b.n	80051e6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 80a6 	beq.w	80051e4 <HCD_RXQLVL_IRQHandler+0x19a>
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	212c      	movs	r1, #44	; 0x2c
 800509e:	fb01 f303 	mul.w	r3, r1, r3
 80050a2:	4413      	add	r3, r2
 80050a4:	3344      	adds	r3, #68	; 0x44
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 809b 	beq.w	80051e4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	212c      	movs	r1, #44	; 0x2c
 80050b4:	fb01 f303 	mul.w	r3, r1, r3
 80050b8:	4413      	add	r3, r2
 80050ba:	3350      	adds	r3, #80	; 0x50
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	441a      	add	r2, r3
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	202c      	movs	r0, #44	; 0x2c
 80050c8:	fb00 f303 	mul.w	r3, r0, r3
 80050cc:	440b      	add	r3, r1
 80050ce:	334c      	adds	r3, #76	; 0x4c
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d87a      	bhi.n	80051cc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	212c      	movs	r1, #44	; 0x2c
 80050e0:	fb01 f303 	mul.w	r3, r1, r3
 80050e4:	4413      	add	r3, r2
 80050e6:	3344      	adds	r3, #68	; 0x44
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	b292      	uxth	r2, r2
 80050ee:	4619      	mov	r1, r3
 80050f0:	f002 f9c7 	bl	8007482 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	212c      	movs	r1, #44	; 0x2c
 80050fa:	fb01 f303 	mul.w	r3, r1, r3
 80050fe:	4413      	add	r3, r2
 8005100:	3344      	adds	r3, #68	; 0x44
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	441a      	add	r2, r3
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	202c      	movs	r0, #44	; 0x2c
 800510e:	fb00 f303 	mul.w	r3, r0, r3
 8005112:	440b      	add	r3, r1
 8005114:	3344      	adds	r3, #68	; 0x44
 8005116:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	212c      	movs	r1, #44	; 0x2c
 800511e:	fb01 f303 	mul.w	r3, r1, r3
 8005122:	4413      	add	r3, r2
 8005124:	3350      	adds	r3, #80	; 0x50
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	441a      	add	r2, r3
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	202c      	movs	r0, #44	; 0x2c
 8005132:	fb00 f303 	mul.w	r3, r0, r3
 8005136:	440b      	add	r3, r1
 8005138:	3350      	adds	r3, #80	; 0x50
 800513a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	4413      	add	r3, r2
 8005144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	0cdb      	lsrs	r3, r3, #19
 800514c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005150:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	212c      	movs	r1, #44	; 0x2c
 8005158:	fb01 f303 	mul.w	r3, r1, r3
 800515c:	4413      	add	r3, r2
 800515e:	3340      	adds	r3, #64	; 0x40
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4293      	cmp	r3, r2
 8005168:	d13c      	bne.n	80051e4 <HCD_RXQLVL_IRQHandler+0x19a>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d039      	beq.n	80051e4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005186:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800518e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	4413      	add	r3, r2
 8005198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519c:	461a      	mov	r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	212c      	movs	r1, #44	; 0x2c
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	4413      	add	r3, r2
 80051ae:	3354      	adds	r3, #84	; 0x54
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	f083 0301 	eor.w	r3, r3, #1
 80051b6:	b2d8      	uxtb	r0, r3
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	212c      	movs	r1, #44	; 0x2c
 80051be:	fb01 f303 	mul.w	r3, r1, r3
 80051c2:	4413      	add	r3, r2
 80051c4:	3354      	adds	r3, #84	; 0x54
 80051c6:	4602      	mov	r2, r0
 80051c8:	701a      	strb	r2, [r3, #0]
      break;
 80051ca:	e00b      	b.n	80051e4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	212c      	movs	r1, #44	; 0x2c
 80051d2:	fb01 f303 	mul.w	r3, r1, r3
 80051d6:	4413      	add	r3, r2
 80051d8:	3360      	adds	r3, #96	; 0x60
 80051da:	2204      	movs	r2, #4
 80051dc:	701a      	strb	r2, [r3, #0]
      break;
 80051de:	e001      	b.n	80051e4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80051e0:	bf00      	nop
 80051e2:	e000      	b.n	80051e6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80051e4:	bf00      	nop
  }
}
 80051e6:	bf00      	nop
 80051e8:	3728      	adds	r7, #40	; 0x28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b086      	sub	sp, #24
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800521a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b02      	cmp	r3, #2
 8005224:	d10b      	bne.n	800523e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b01      	cmp	r3, #1
 800522e:	d102      	bne.n	8005236 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f008 fe03 	bl	800de3c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f043 0302 	orr.w	r3, r3, #2
 800523c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b08      	cmp	r3, #8
 8005246:	d132      	bne.n	80052ae <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f043 0308 	orr.w	r3, r3, #8
 800524e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b04      	cmp	r3, #4
 8005258:	d126      	bne.n	80052a8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d113      	bne.n	800528a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005268:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800526c:	d106      	bne.n	800527c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2102      	movs	r1, #2
 8005274:	4618      	mov	r0, r3
 8005276:	f002 fa61 	bl	800773c <USB_InitFSLSPClkSel>
 800527a:	e011      	b.n	80052a0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2101      	movs	r1, #1
 8005282:	4618      	mov	r0, r3
 8005284:	f002 fa5a 	bl	800773c <USB_InitFSLSPClkSel>
 8005288:	e00a      	b.n	80052a0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d106      	bne.n	80052a0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005298:	461a      	mov	r2, r3
 800529a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800529e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f008 fdf4 	bl	800de8e <HAL_HCD_PortEnabled_Callback>
 80052a6:	e002      	b.n	80052ae <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f008 fdfe 	bl	800deaa <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d103      	bne.n	80052c0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f043 0320 	orr.w	r3, r3, #32
 80052be:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052c6:	461a      	mov	r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	6013      	str	r3, [r2, #0]
}
 80052cc:	bf00      	nop
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	; 0x28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e237      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d050      	beq.n	8005394 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052f2:	4ba3      	ldr	r3, [pc, #652]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d00c      	beq.n	8005318 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052fe:	4ba0      	ldr	r3, [pc, #640]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005306:	2b08      	cmp	r3, #8
 8005308:	d112      	bne.n	8005330 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800530a:	4b9d      	ldr	r3, [pc, #628]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005316:	d10b      	bne.n	8005330 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005318:	4b99      	ldr	r3, [pc, #612]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d036      	beq.n	8005392 <HAL_RCC_OscConfig+0xbe>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d132      	bne.n	8005392 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e212      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	4b93      	ldr	r3, [pc, #588]	; (8005584 <HAL_RCC_OscConfig+0x2b0>)
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d013      	beq.n	800536a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005342:	f7fd fd05 	bl	8002d50 <HAL_GetTick>
 8005346:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800534a:	f7fd fd01 	bl	8002d50 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b64      	cmp	r3, #100	; 0x64
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e1fc      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800535c:	4b88      	ldr	r3, [pc, #544]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <HAL_RCC_OscConfig+0x76>
 8005368:	e014      	b.n	8005394 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536a:	f7fd fcf1 	bl	8002d50 <HAL_GetTick>
 800536e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005372:	f7fd fced 	bl	8002d50 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b64      	cmp	r3, #100	; 0x64
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e1e8      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005384:	4b7e      	ldr	r3, [pc, #504]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f0      	bne.n	8005372 <HAL_RCC_OscConfig+0x9e>
 8005390:	e000      	b.n	8005394 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005392:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d077      	beq.n	8005490 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053a0:	4b77      	ldr	r3, [pc, #476]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 030c 	and.w	r3, r3, #12
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ac:	4b74      	ldr	r3, [pc, #464]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d126      	bne.n	8005406 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053b8:	4b71      	ldr	r3, [pc, #452]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d120      	bne.n	8005406 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c4:	4b6e      	ldr	r3, [pc, #440]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_OscConfig+0x108>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d001      	beq.n	80053dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e1bc      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053dc:	4b68      	ldr	r3, [pc, #416]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	21f8      	movs	r1, #248	; 0xf8
 80053ea:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ec:	69b9      	ldr	r1, [r7, #24]
 80053ee:	fa91 f1a1 	rbit	r1, r1
 80053f2:	6179      	str	r1, [r7, #20]
  return result;
 80053f4:	6979      	ldr	r1, [r7, #20]
 80053f6:	fab1 f181 	clz	r1, r1
 80053fa:	b2c9      	uxtb	r1, r1
 80053fc:	408b      	lsls	r3, r1
 80053fe:	4960      	ldr	r1, [pc, #384]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 8005400:	4313      	orrs	r3, r2
 8005402:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005404:	e044      	b.n	8005490 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d02a      	beq.n	8005464 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800540e:	4b5e      	ldr	r3, [pc, #376]	; (8005588 <HAL_RCC_OscConfig+0x2b4>)
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005414:	f7fd fc9c 	bl	8002d50 <HAL_GetTick>
 8005418:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800541c:	f7fd fc98 	bl	8002d50 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e193      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542e:	4b54      	ldr	r3, [pc, #336]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800543a:	4b51      	ldr	r3, [pc, #324]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	21f8      	movs	r1, #248	; 0xf8
 8005448:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544a:	6939      	ldr	r1, [r7, #16]
 800544c:	fa91 f1a1 	rbit	r1, r1
 8005450:	60f9      	str	r1, [r7, #12]
  return result;
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	fab1 f181 	clz	r1, r1
 8005458:	b2c9      	uxtb	r1, r1
 800545a:	408b      	lsls	r3, r1
 800545c:	4948      	ldr	r1, [pc, #288]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 800545e:	4313      	orrs	r3, r2
 8005460:	600b      	str	r3, [r1, #0]
 8005462:	e015      	b.n	8005490 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005464:	4b48      	ldr	r3, [pc, #288]	; (8005588 <HAL_RCC_OscConfig+0x2b4>)
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546a:	f7fd fc71 	bl	8002d50 <HAL_GetTick>
 800546e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005470:	e008      	b.n	8005484 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005472:	f7fd fc6d 	bl	8002d50 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e168      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005484:	4b3e      	ldr	r3, [pc, #248]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f0      	bne.n	8005472 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	d030      	beq.n	80054fe <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d016      	beq.n	80054d2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054a4:	4b39      	ldr	r3, [pc, #228]	; (800558c <HAL_RCC_OscConfig+0x2b8>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054aa:	f7fd fc51 	bl	8002d50 <HAL_GetTick>
 80054ae:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054b2:	f7fd fc4d 	bl	8002d50 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e148      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c4:	4b2e      	ldr	r3, [pc, #184]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 80054c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0f0      	beq.n	80054b2 <HAL_RCC_OscConfig+0x1de>
 80054d0:	e015      	b.n	80054fe <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054d2:	4b2e      	ldr	r3, [pc, #184]	; (800558c <HAL_RCC_OscConfig+0x2b8>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d8:	f7fd fc3a 	bl	8002d50 <HAL_GetTick>
 80054dc:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054e0:	f7fd fc36 	bl	8002d50 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e131      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f2:	4b23      	ldr	r3, [pc, #140]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 8088 	beq.w	800561c <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 800550c:	2300      	movs	r3, #0
 800550e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005512:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d110      	bne.n	8005540 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800551e:	2300      	movs	r3, #0
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	4b17      	ldr	r3, [pc, #92]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	4a16      	ldr	r2, [pc, #88]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 8005528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552c:	6413      	str	r3, [r2, #64]	; 0x40
 800552e:	4b14      	ldr	r3, [pc, #80]	; (8005580 <HAL_RCC_OscConfig+0x2ac>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005536:	60bb      	str	r3, [r7, #8]
 8005538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005540:	4b13      	ldr	r3, [pc, #76]	; (8005590 <HAL_RCC_OscConfig+0x2bc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a12      	ldr	r2, [pc, #72]	; (8005590 <HAL_RCC_OscConfig+0x2bc>)
 8005546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800554a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554c:	4b10      	ldr	r3, [pc, #64]	; (8005590 <HAL_RCC_OscConfig+0x2bc>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	2b00      	cmp	r3, #0
 8005556:	d123      	bne.n	80055a0 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005558:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <HAL_RCC_OscConfig+0x2bc>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a0c      	ldr	r2, [pc, #48]	; (8005590 <HAL_RCC_OscConfig+0x2bc>)
 800555e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005562:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005564:	f7fd fbf4 	bl	8002d50 <HAL_GetTick>
 8005568:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800556a:	e013      	b.n	8005594 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800556c:	f7fd fbf0 	bl	8002d50 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d90c      	bls.n	8005594 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e0eb      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
 800557e:	bf00      	nop
 8005580:	40023800 	.word	0x40023800
 8005584:	40023802 	.word	0x40023802
 8005588:	42470000 	.word	0x42470000
 800558c:	42470e80 	.word	0x42470e80
 8005590:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005594:	4b72      	ldr	r3, [pc, #456]	; (8005760 <HAL_RCC_OscConfig+0x48c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0e5      	beq.n	800556c <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	4b6f      	ldr	r3, [pc, #444]	; (8005764 <HAL_RCC_OscConfig+0x490>)
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d015      	beq.n	80055de <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b2:	f7fd fbcd 	bl	8002d50 <HAL_GetTick>
 80055b6:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b8:	e00a      	b.n	80055d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ba:	f7fd fbc9 	bl	8002d50 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e0c2      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d0:	4b65      	ldr	r3, [pc, #404]	; (8005768 <HAL_RCC_OscConfig+0x494>)
 80055d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0ee      	beq.n	80055ba <HAL_RCC_OscConfig+0x2e6>
 80055dc:	e014      	b.n	8005608 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055de:	f7fd fbb7 	bl	8002d50 <HAL_GetTick>
 80055e2:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e4:	e00a      	b.n	80055fc <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e6:	f7fd fbb3 	bl	8002d50 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e0ac      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055fc:	4b5a      	ldr	r3, [pc, #360]	; (8005768 <HAL_RCC_OscConfig+0x494>)
 80055fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1ee      	bne.n	80055e6 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800560c:	2b01      	cmp	r3, #1
 800560e:	d105      	bne.n	800561c <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005610:	4b55      	ldr	r3, [pc, #340]	; (8005768 <HAL_RCC_OscConfig+0x494>)
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	4a54      	ldr	r2, [pc, #336]	; (8005768 <HAL_RCC_OscConfig+0x494>)
 8005616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800561a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 8097 	beq.w	8005754 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005626:	4b50      	ldr	r3, [pc, #320]	; (8005768 <HAL_RCC_OscConfig+0x494>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b08      	cmp	r3, #8
 8005630:	d061      	beq.n	80056f6 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d146      	bne.n	80056c8 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563a:	4b4c      	ldr	r3, [pc, #304]	; (800576c <HAL_RCC_OscConfig+0x498>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005640:	f7fd fb86 	bl	8002d50 <HAL_GetTick>
 8005644:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005648:	f7fd fb82 	bl	8002d50 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b64      	cmp	r3, #100	; 0x64
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e07d      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	4b43      	ldr	r3, [pc, #268]	; (8005768 <HAL_RCC_OscConfig+0x494>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005666:	4b40      	ldr	r3, [pc, #256]	; (8005768 <HAL_RCC_OscConfig+0x494>)
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	4b41      	ldr	r3, [pc, #260]	; (8005770 <HAL_RCC_OscConfig+0x49c>)
 800566c:	4013      	ands	r3, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	69d1      	ldr	r1, [r2, #28]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6a12      	ldr	r2, [r2, #32]
 8005676:	4311      	orrs	r1, r2
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800567c:	0192      	lsls	r2, r2, #6
 800567e:	4311      	orrs	r1, r2
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005684:	0612      	lsls	r2, r2, #24
 8005686:	4311      	orrs	r1, r2
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800568c:	0852      	lsrs	r2, r2, #1
 800568e:	3a01      	subs	r2, #1
 8005690:	0412      	lsls	r2, r2, #16
 8005692:	430a      	orrs	r2, r1
 8005694:	4934      	ldr	r1, [pc, #208]	; (8005768 <HAL_RCC_OscConfig+0x494>)
 8005696:	4313      	orrs	r3, r2
 8005698:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800569a:	4b34      	ldr	r3, [pc, #208]	; (800576c <HAL_RCC_OscConfig+0x498>)
 800569c:	2201      	movs	r2, #1
 800569e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a0:	f7fd fb56 	bl	8002d50 <HAL_GetTick>
 80056a4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a8:	f7fd fb52 	bl	8002d50 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b64      	cmp	r3, #100	; 0x64
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e04d      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ba:	4b2b      	ldr	r3, [pc, #172]	; (8005768 <HAL_RCC_OscConfig+0x494>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0x3d4>
 80056c6:	e045      	b.n	8005754 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c8:	4b28      	ldr	r3, [pc, #160]	; (800576c <HAL_RCC_OscConfig+0x498>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ce:	f7fd fb3f 	bl	8002d50 <HAL_GetTick>
 80056d2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d6:	f7fd fb3b 	bl	8002d50 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b64      	cmp	r3, #100	; 0x64
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e036      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e8:	4b1f      	ldr	r3, [pc, #124]	; (8005768 <HAL_RCC_OscConfig+0x494>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f0      	bne.n	80056d6 <HAL_RCC_OscConfig+0x402>
 80056f4:	e02e      	b.n	8005754 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e029      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005702:	4b19      	ldr	r3, [pc, #100]	; (8005768 <HAL_RCC_OscConfig+0x494>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	429a      	cmp	r2, r3
 8005714:	d11c      	bne.n	8005750 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005720:	429a      	cmp	r2, r3
 8005722:	d115      	bne.n	8005750 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	099b      	lsrs	r3, r3, #6
 8005728:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005730:	429a      	cmp	r2, r3
 8005732:	d10d      	bne.n	8005750 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800573e:	429a      	cmp	r2, r3
 8005740:	d106      	bne.n	8005750 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800574c:	429a      	cmp	r2, r3
 800574e:	d001      	beq.n	8005754 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e000      	b.n	8005756 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3728      	adds	r7, #40	; 0x28
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40007000 	.word	0x40007000
 8005764:	40023870 	.word	0x40023870
 8005768:	40023800 	.word	0x40023800
 800576c:	42470060 	.word	0x42470060
 8005770:	f0bc8000 	.word	0xf0bc8000

08005774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0d2      	b.n	800592e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005788:	4b6b      	ldr	r3, [pc, #428]	; (8005938 <HAL_RCC_ClockConfig+0x1c4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d90c      	bls.n	80057b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005796:	4b68      	ldr	r3, [pc, #416]	; (8005938 <HAL_RCC_ClockConfig+0x1c4>)
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800579e:	4b66      	ldr	r3, [pc, #408]	; (8005938 <HAL_RCC_ClockConfig+0x1c4>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d001      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0be      	b.n	800592e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d020      	beq.n	80057fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057c8:	4b5c      	ldr	r3, [pc, #368]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	4a5b      	ldr	r2, [pc, #364]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 80057ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80057e0:	4b56      	ldr	r3, [pc, #344]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	4a55      	ldr	r2, [pc, #340]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 80057e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ec:	4b53      	ldr	r3, [pc, #332]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	4950      	ldr	r1, [pc, #320]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d040      	beq.n	800588c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d107      	bne.n	8005822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005812:	4b4a      	ldr	r3, [pc, #296]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d115      	bne.n	800584a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e085      	b.n	800592e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d107      	bne.n	800583a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800582a:	4b44      	ldr	r3, [pc, #272]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e079      	b.n	800592e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800583a:	4b40      	ldr	r3, [pc, #256]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e071      	b.n	800592e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800584a:	4b3c      	ldr	r3, [pc, #240]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f023 0203 	bic.w	r2, r3, #3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	4939      	ldr	r1, [pc, #228]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 8005858:	4313      	orrs	r3, r2
 800585a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800585c:	f7fd fa78 	bl	8002d50 <HAL_GetTick>
 8005860:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005862:	e00a      	b.n	800587a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005864:	f7fd fa74 	bl	8002d50 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005872:	4293      	cmp	r3, r2
 8005874:	d901      	bls.n	800587a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e059      	b.n	800592e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587a:	4b30      	ldr	r3, [pc, #192]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 020c 	and.w	r2, r3, #12
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	429a      	cmp	r2, r3
 800588a:	d1eb      	bne.n	8005864 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800588c:	4b2a      	ldr	r3, [pc, #168]	; (8005938 <HAL_RCC_ClockConfig+0x1c4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d20c      	bcs.n	80058b4 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589a:	4b27      	ldr	r3, [pc, #156]	; (8005938 <HAL_RCC_ClockConfig+0x1c4>)
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a2:	4b25      	ldr	r3, [pc, #148]	; (8005938 <HAL_RCC_ClockConfig+0x1c4>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d001      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e03c      	b.n	800592e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d008      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058c0:	4b1e      	ldr	r3, [pc, #120]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	491b      	ldr	r1, [pc, #108]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d009      	beq.n	80058f2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058de:	4b17      	ldr	r3, [pc, #92]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	4913      	ldr	r1, [pc, #76]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80058f2:	f000 f82b 	bl	800594c <HAL_RCC_GetSysClockFreq>
 80058f6:	4601      	mov	r1, r0
 80058f8:	4b10      	ldr	r3, [pc, #64]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005900:	22f0      	movs	r2, #240	; 0xf0
 8005902:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	fa92 f2a2 	rbit	r2, r2
 800590a:	60fa      	str	r2, [r7, #12]
  return result;
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	fab2 f282 	clz	r2, r2
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	40d3      	lsrs	r3, r2
 8005916:	4a0a      	ldr	r2, [pc, #40]	; (8005940 <HAL_RCC_ClockConfig+0x1cc>)
 8005918:	5cd3      	ldrb	r3, [r2, r3]
 800591a:	fa21 f303 	lsr.w	r3, r1, r3
 800591e:	4a09      	ldr	r2, [pc, #36]	; (8005944 <HAL_RCC_ClockConfig+0x1d0>)
 8005920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005922:	4b09      	ldr	r3, [pc, #36]	; (8005948 <HAL_RCC_ClockConfig+0x1d4>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f7fd f9d0 	bl	8002ccc <HAL_InitTick>

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40023c00 	.word	0x40023c00
 800593c:	40023800 	.word	0x40023800
 8005940:	08012c20 	.word	0x08012c20
 8005944:	20000034 	.word	0x20000034
 8005948:	20000038 	.word	0x20000038

0800594c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800594c:	b5b0      	push	{r4, r5, r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005952:	2100      	movs	r1, #0
 8005954:	6079      	str	r1, [r7, #4]
 8005956:	2100      	movs	r1, #0
 8005958:	60f9      	str	r1, [r7, #12]
 800595a:	2100      	movs	r1, #0
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800595e:	2100      	movs	r1, #0
 8005960:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005962:	4952      	ldr	r1, [pc, #328]	; (8005aac <HAL_RCC_GetSysClockFreq+0x160>)
 8005964:	6889      	ldr	r1, [r1, #8]
 8005966:	f001 010c 	and.w	r1, r1, #12
 800596a:	2908      	cmp	r1, #8
 800596c:	d00d      	beq.n	800598a <HAL_RCC_GetSysClockFreq+0x3e>
 800596e:	2908      	cmp	r1, #8
 8005970:	f200 8094 	bhi.w	8005a9c <HAL_RCC_GetSysClockFreq+0x150>
 8005974:	2900      	cmp	r1, #0
 8005976:	d002      	beq.n	800597e <HAL_RCC_GetSysClockFreq+0x32>
 8005978:	2904      	cmp	r1, #4
 800597a:	d003      	beq.n	8005984 <HAL_RCC_GetSysClockFreq+0x38>
 800597c:	e08e      	b.n	8005a9c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800597e:	4b4c      	ldr	r3, [pc, #304]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005980:	60bb      	str	r3, [r7, #8]
       break;
 8005982:	e08e      	b.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005984:	4b4b      	ldr	r3, [pc, #300]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005986:	60bb      	str	r3, [r7, #8]
      break;
 8005988:	e08b      	b.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800598a:	4948      	ldr	r1, [pc, #288]	; (8005aac <HAL_RCC_GetSysClockFreq+0x160>)
 800598c:	6849      	ldr	r1, [r1, #4]
 800598e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005992:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005994:	4945      	ldr	r1, [pc, #276]	; (8005aac <HAL_RCC_GetSysClockFreq+0x160>)
 8005996:	6849      	ldr	r1, [r1, #4]
 8005998:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800599c:	2900      	cmp	r1, #0
 800599e:	d024      	beq.n	80059ea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059a0:	4942      	ldr	r1, [pc, #264]	; (8005aac <HAL_RCC_GetSysClockFreq+0x160>)
 80059a2:	6849      	ldr	r1, [r1, #4]
 80059a4:	0989      	lsrs	r1, r1, #6
 80059a6:	4608      	mov	r0, r1
 80059a8:	f04f 0100 	mov.w	r1, #0
 80059ac:	f240 14ff 	movw	r4, #511	; 0x1ff
 80059b0:	f04f 0500 	mov.w	r5, #0
 80059b4:	ea00 0204 	and.w	r2, r0, r4
 80059b8:	ea01 0305 	and.w	r3, r1, r5
 80059bc:	493d      	ldr	r1, [pc, #244]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x168>)
 80059be:	fb01 f003 	mul.w	r0, r1, r3
 80059c2:	2100      	movs	r1, #0
 80059c4:	fb01 f102 	mul.w	r1, r1, r2
 80059c8:	1844      	adds	r4, r0, r1
 80059ca:	493a      	ldr	r1, [pc, #232]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x168>)
 80059cc:	fba2 0101 	umull	r0, r1, r2, r1
 80059d0:	1863      	adds	r3, r4, r1
 80059d2:	4619      	mov	r1, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	f7fb fb88 	bl	80010f0 <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4613      	mov	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	e04a      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ea:	4b30      	ldr	r3, [pc, #192]	; (8005aac <HAL_RCC_GetSysClockFreq+0x160>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	099b      	lsrs	r3, r3, #6
 80059f0:	461a      	mov	r2, r3
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80059fa:	f04f 0100 	mov.w	r1, #0
 80059fe:	ea02 0400 	and.w	r4, r2, r0
 8005a02:	ea03 0501 	and.w	r5, r3, r1
 8005a06:	4620      	mov	r0, r4
 8005a08:	4629      	mov	r1, r5
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	014b      	lsls	r3, r1, #5
 8005a14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a18:	0142      	lsls	r2, r0, #5
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	1b00      	subs	r0, r0, r4
 8005a20:	eb61 0105 	sbc.w	r1, r1, r5
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	018b      	lsls	r3, r1, #6
 8005a2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a32:	0182      	lsls	r2, r0, #6
 8005a34:	1a12      	subs	r2, r2, r0
 8005a36:	eb63 0301 	sbc.w	r3, r3, r1
 8005a3a:	f04f 0000 	mov.w	r0, #0
 8005a3e:	f04f 0100 	mov.w	r1, #0
 8005a42:	00d9      	lsls	r1, r3, #3
 8005a44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a48:	00d0      	lsls	r0, r2, #3
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	1912      	adds	r2, r2, r4
 8005a50:	eb45 0303 	adc.w	r3, r5, r3
 8005a54:	f04f 0000 	mov.w	r0, #0
 8005a58:	f04f 0100 	mov.w	r1, #0
 8005a5c:	0299      	lsls	r1, r3, #10
 8005a5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a62:	0290      	lsls	r0, r2, #10
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	f7fb fb3c 	bl	80010f0 <__aeabi_uldivmod>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a80:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <HAL_RCC_GetSysClockFreq+0x160>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	0c1b      	lsrs	r3, r3, #16
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	60bb      	str	r3, [r7, #8]
      break;
 8005a9a:	e002      	b.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a9c:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005a9e:	60bb      	str	r3, [r7, #8]
      break;
 8005aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	00f42400 	.word	0x00f42400
 8005ab4:	017d7840 	.word	0x017d7840

08005ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	; 0x28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d103      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d14c      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005adc:	4b6d      	ldr	r3, [pc, #436]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae2:	f7fd f935 	bl	8002d50 <HAL_GetTick>
 8005ae6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ae8:	e008      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005aea:	f7fd f931 	bl	8002d50 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e0c7      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005afc:	4b66      	ldr	r3, [pc, #408]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1f0      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005b10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	fa92 f2a2 	rbit	r2, r2
 8005b18:	613a      	str	r2, [r7, #16]
  return result;
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	fab2 f282 	clz	r2, r2
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	fa03 f202 	lsl.w	r2, r3, r2
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8005b2e:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b30:	69f9      	ldr	r1, [r7, #28]
 8005b32:	fa91 f1a1 	rbit	r1, r1
 8005b36:	61b9      	str	r1, [r7, #24]
  return result;
 8005b38:	69b9      	ldr	r1, [r7, #24]
 8005b3a:	fab1 f181 	clz	r1, r1
 8005b3e:	b2c9      	uxtb	r1, r1
 8005b40:	408b      	lsls	r3, r1
 8005b42:	4955      	ldr	r1, [pc, #340]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b4a:	4b52      	ldr	r3, [pc, #328]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b50:	f7fd f8fe 	bl	8002d50 <HAL_GetTick>
 8005b54:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b58:	f7fd f8fa 	bl	8002d50 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e090      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b6a:	4b4b      	ldr	r3, [pc, #300]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f0      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8083 	beq.w	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	4b43      	ldr	r3, [pc, #268]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	4a42      	ldr	r2, [pc, #264]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b92:	6413      	str	r3, [r2, #64]	; 0x40
 8005b94:	4b40      	ldr	r3, [pc, #256]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ba0:	4b3e      	ldr	r3, [pc, #248]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a3d      	ldr	r2, [pc, #244]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005baa:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bac:	f7fd f8d0 	bl	8002d50 <HAL_GetTick>
 8005bb0:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005bb4:	f7fd f8cc 	bl	8002d50 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e062      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bc6:	4b35      	ldr	r3, [pc, #212]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bd2:	4b31      	ldr	r3, [pc, #196]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bda:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d02f      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bea:	6a3a      	ldr	r2, [r7, #32]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d028      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bf0:	4b29      	ldr	r3, [pc, #164]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf8:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bfa:	4b29      	ldr	r3, [pc, #164]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c00:	4b27      	ldr	r3, [pc, #156]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c06:	4a24      	ldr	r2, [pc, #144]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c0c:	4b22      	ldr	r3, [pc, #136]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d114      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c18:	f7fd f89a 	bl	8002d50 <HAL_GetTick>
 8005c1c:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c1e:	e00a      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c20:	f7fd f896 	bl	8002d50 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e02a      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c36:	4b18      	ldr	r3, [pc, #96]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0ee      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c4e:	d10d      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005c50:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c64:	490c      	ldr	r1, [pc, #48]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	608b      	str	r3, [r1, #8]
 8005c6a:	e005      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c76:	6093      	str	r3, [r2, #8]
 8005c78:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c84:	4904      	ldr	r1, [pc, #16]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3728      	adds	r7, #40	; 0x28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	42470068 	.word	0x42470068
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	40007000 	.word	0x40007000
 8005ca0:	42470e40 	.word	0x42470e40

08005ca4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e07c      	b.n	8005db0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	7f5b      	ldrb	r3, [r3, #29]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fc fdce 	bl	8002868 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	22ca      	movs	r2, #202	; 0xca
 8005cd8:	625a      	str	r2, [r3, #36]	; 0x24
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2253      	movs	r2, #83	; 0x53
 8005ce0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 faec 	bl	80062c0 <RTC_EnterInitMode>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	22ff      	movs	r2, #255	; 0xff
 8005cf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2204      	movs	r2, #4
 8005cfa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e057      	b.n	8005db0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6812      	ldr	r2, [r2, #0]
 8005d0a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d12:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6899      	ldr	r1, [r3, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	68d2      	ldr	r2, [r2, #12]
 8005d3a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6919      	ldr	r1, [r3, #16]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	041a      	lsls	r2, r3, #16
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d5e:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fa85 	bl	8006270 <HAL_RTC_WaitForSynchro>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	22ff      	movs	r2, #255	; 0xff
 8005d72:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2204      	movs	r2, #4
 8005d78:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e018      	b.n	8005db0 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699a      	ldr	r2, [r3, #24]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	22ff      	movs	r2, #255	; 0xff
 8005da6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005dae:	2300      	movs	r3, #0
  }
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005db8:	b590      	push	{r4, r7, lr}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	7f1b      	ldrb	r3, [r3, #28]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_RTC_SetTime+0x1c>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e0a3      	b.n	8005f1c <HAL_RTC_SetTime+0x164>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d126      	bne.n	8005e34 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2200      	movs	r2, #0
 8005df8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fa8a 	bl	8006318 <RTC_ByteToBcd2>
 8005e04:	4603      	mov	r3, r0
 8005e06:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	785b      	ldrb	r3, [r3, #1]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fa83 	bl	8006318 <RTC_ByteToBcd2>
 8005e12:	4603      	mov	r3, r0
 8005e14:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005e16:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	789b      	ldrb	r3, [r3, #2]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fa7b 	bl	8006318 <RTC_ByteToBcd2>
 8005e22:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005e24:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	78db      	ldrb	r3, [r3, #3]
 8005e2c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	e018      	b.n	8005e66 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d102      	bne.n	8005e48 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2200      	movs	r2, #0
 8005e46:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005e54:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005e5a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	78db      	ldrb	r3, [r3, #3]
 8005e60:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	22ca      	movs	r2, #202	; 0xca
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2253      	movs	r2, #83	; 0x53
 8005e74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 fa22 	bl	80062c0 <RTC_EnterInitMode>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	22ff      	movs	r2, #255	; 0xff
 8005e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e040      	b.n	8005f1c <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ea4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ea8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005eb8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6899      	ldr	r1, [r3, #8]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ee0:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f9c4 	bl	8006270 <HAL_RTC_WaitForSynchro>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	22ff      	movs	r2, #255	; 0xff
 8005ef4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2204      	movs	r2, #4
 8005efa:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e00a      	b.n	8005f1c <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	22ff      	movs	r2, #255	; 0xff
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
  }
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd90      	pop	{r4, r7, pc}

08005f24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f24:	b590      	push	{r4, r7, lr}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	7f1b      	ldrb	r3, [r3, #28]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_RTC_SetDate+0x1c>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e08d      	b.n	800605c <HAL_RTC_SetDate+0x138>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2201      	movs	r2, #1
 8005f44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10e      	bne.n	8005f70 <HAL_RTC_SetDate+0x4c>
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	f003 0310 	and.w	r3, r3, #16
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	f023 0310 	bic.w	r3, r3, #16
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	330a      	adds	r3, #10
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d11c      	bne.n	8005fb0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	78db      	ldrb	r3, [r3, #3]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f9cc 	bl	8006318 <RTC_ByteToBcd2>
 8005f80:	4603      	mov	r3, r0
 8005f82:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 f9c5 	bl	8006318 <RTC_ByteToBcd2>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005f92:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	789b      	ldrb	r3, [r3, #2]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 f9bd 	bl	8006318 <RTC_ByteToBcd2>
 8005f9e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005fa0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	e00e      	b.n	8005fce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	78db      	ldrb	r3, [r3, #3]
 8005fb4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005fbc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005fc2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	22ca      	movs	r2, #202	; 0xca
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2253      	movs	r2, #83	; 0x53
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 f96e 	bl	80062c0 <RTC_EnterInitMode>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00b      	beq.n	8006002 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	22ff      	movs	r2, #255	; 0xff
 8005ff0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e02c      	b.n	800605c <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800600c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006010:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006020:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 f924 	bl	8006270 <HAL_RTC_WaitForSynchro>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	22ff      	movs	r2, #255	; 0xff
 8006034:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2204      	movs	r2, #4
 800603a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e00a      	b.n	800605c <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	22ff      	movs	r2, #255	; 0xff
 800604c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800605a:	2300      	movs	r3, #0
  }
}
 800605c:	4618      	mov	r0, r3
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	bd90      	pop	{r4, r7, pc}

08006064 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	7f1b      	ldrb	r3, [r3, #28]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_RTC_SetAlarm+0x20>
 8006080:	2302      	movs	r3, #2
 8006082:	e0f1      	b.n	8006268 <HAL_RTC_SetAlarm+0x204>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2202      	movs	r2, #2
 800608e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d136      	bne.n	8006104 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d102      	bne.n	80060aa <HAL_RTC_SetAlarm+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2200      	movs	r2, #0
 80060a8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 f932 	bl	8006318 <RTC_ByteToBcd2>
 80060b4:	4603      	mov	r3, r0
 80060b6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	785b      	ldrb	r3, [r3, #1]
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 f92b 	bl	8006318 <RTC_ByteToBcd2>
 80060c2:	4603      	mov	r3, r0
 80060c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80060c6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	789b      	ldrb	r3, [r3, #2]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 f923 	bl	8006318 <RTC_ByteToBcd2>
 80060d2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80060d4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	78db      	ldrb	r3, [r3, #3]
 80060dc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80060de:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	7d1b      	ldrb	r3, [r3, #20]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 f916 	bl	8006318 <RTC_ByteToBcd2>
 80060ec:	4603      	mov	r3, r0
 80060ee:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80060f0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80060f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	e022      	b.n	800614a <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	d102      	bne.n	8006118 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2200      	movs	r2, #0
 8006116:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006124:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800612a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	78db      	ldrb	r3, [r3, #3]
 8006130:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006132:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	7d1b      	ldrb	r3, [r3, #20]
 8006138:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800613a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006140:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	22ca      	movs	r2, #202	; 0xca
 8006150:	625a      	str	r2, [r3, #36]	; 0x24
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2253      	movs	r2, #83	; 0x53
 8006158:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006162:	d13b      	bne.n	80061dc <HAL_RTC_SetAlarm+0x178>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006172:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006182:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006184:	f7fc fde4 	bl	8002d50 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800618a:	e013      	b.n	80061b4 <HAL_RTC_SetAlarm+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800618c:	f7fc fde0 	bl	8002d50 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800619a:	d90b      	bls.n	80061b4 <HAL_RTC_SetAlarm+0x150>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	22ff      	movs	r2, #255	; 0xff
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2203      	movs	r2, #3
 80061a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e059      	b.n	8006268 <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0e4      	beq.n	800618c <HAL_RTC_SetAlarm+0x128>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061d8:	609a      	str	r2, [r3, #8]
 80061da:	e03a      	b.n	8006252 <HAL_RTC_SetAlarm+0x1ee>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80061ea:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061fa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061fc:	f7fc fda8 	bl	8002d50 <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006202:	e013      	b.n	800622c <HAL_RTC_SetAlarm+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006204:	f7fc fda4 	bl	8002d50 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006212:	d90b      	bls.n	800622c <HAL_RTC_SetAlarm+0x1c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	22ff      	movs	r2, #255	; 0xff
 800621a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2203      	movs	r2, #3
 8006220:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e01d      	b.n	8006268 <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0e4      	beq.n	8006204 <HAL_RTC_SetAlarm+0x1a0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006250:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	22ff      	movs	r2, #255	; 0xff
 8006258:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	bd90      	pop	{r4, r7, pc}

08006270 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800628a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800628c:	f7fc fd60 	bl	8002d50 <HAL_GetTick>
 8006290:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006292:	e009      	b.n	80062a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006294:	f7fc fd5c 	bl	8002d50 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062a2:	d901      	bls.n	80062a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e007      	b.n	80062b8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0ee      	beq.n	8006294 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d119      	bne.n	800630e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f04f 32ff 	mov.w	r2, #4294967295
 80062e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062e4:	f7fc fd34 	bl	8002d50 <HAL_GetTick>
 80062e8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062ea:	e009      	b.n	8006300 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062ec:	f7fc fd30 	bl	8002d50 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062fa:	d901      	bls.n	8006300 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e007      	b.n	8006310 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0ee      	beq.n	80062ec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 8006326:	e005      	b.n	8006334 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3301      	adds	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800632e:	79fb      	ldrb	r3, [r7, #7]
 8006330:	3b0a      	subs	r3, #10
 8006332:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 8006334:	79fb      	ldrb	r3, [r7, #7]
 8006336:	2b09      	cmp	r3, #9
 8006338:	d8f6      	bhi.n	8006328 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	b2da      	uxtb	r2, r3
 8006342:	79fb      	ldrb	r3, [r7, #7]
 8006344:	4313      	orrs	r3, r2
 8006346:	b2db      	uxtb	r3, r3
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr

08006352 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b086      	sub	sp, #24
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	7f1b      	ldrb	r3, [r3, #28]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_RTCEx_SetWakeUpTimer+0x1c>
 800636a:	2302      	movs	r3, #2
 800636c:	e081      	b.n	8006472 <HAL_RTCEx_SetWakeUpTimer+0x120>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2202      	movs	r2, #2
 8006378:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	22ca      	movs	r2, #202	; 0xca
 8006380:	625a      	str	r2, [r3, #36]	; 0x24
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2253      	movs	r2, #83	; 0x53
 8006388:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01e      	beq.n	80063d6 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8006398:	f7fc fcda 	bl	8002d50 <HAL_GetTick>
 800639c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 800639e:	e013      	b.n	80063c8 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063a0:	f7fc fcd6 	bl	8002d50 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ae:	d90b      	bls.n	80063c8 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	22ff      	movs	r2, #255	; 0xff
 80063b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2203      	movs	r2, #3
 80063bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e054      	b.n	8006472 <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e4      	bne.n	80063a0 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e4:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063e6:	f7fc fcb3 	bl	8002d50 <HAL_GetTick>
 80063ea:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80063ec:	e013      	b.n	8006416 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063ee:	f7fc fcaf 	bl	8002d50 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063fc:	d90b      	bls.n	8006416 <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	22ff      	movs	r2, #255	; 0xff
 8006404:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2203      	movs	r2, #3
 800640a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e02d      	b.n	8006472 <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0e4      	beq.n	80063ee <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0207 	bic.w	r2, r2, #7
 8006432:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6899      	ldr	r1, [r3, #8]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	430a      	orrs	r2, r1
 8006442:	609a      	str	r2, [r3, #8]

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	615a      	str	r2, [r3, #20]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800645a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	22ff      	movs	r2, #255	; 0xff
 8006462:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e041      	b.n	8006510 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7fc f9f7 	bl	8002894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	3304      	adds	r3, #4
 80064b6:	4619      	mov	r1, r3
 80064b8:	4610      	mov	r0, r2
 80064ba:	f000 facf 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e041      	b.n	80065ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f839 	bl	80065b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3304      	adds	r3, #4
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f000 fa80 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr

080065c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d109      	bne.n	80065ec <HAL_TIM_PWM_Start+0x24>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	bf14      	ite	ne
 80065e4:	2301      	movne	r3, #1
 80065e6:	2300      	moveq	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	e022      	b.n	8006632 <HAL_TIM_PWM_Start+0x6a>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d109      	bne.n	8006606 <HAL_TIM_PWM_Start+0x3e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	bf14      	ite	ne
 80065fe:	2301      	movne	r3, #1
 8006600:	2300      	moveq	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	e015      	b.n	8006632 <HAL_TIM_PWM_Start+0x6a>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b08      	cmp	r3, #8
 800660a:	d109      	bne.n	8006620 <HAL_TIM_PWM_Start+0x58>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b01      	cmp	r3, #1
 8006616:	bf14      	ite	ne
 8006618:	2301      	movne	r3, #1
 800661a:	2300      	moveq	r3, #0
 800661c:	b2db      	uxtb	r3, r3
 800661e:	e008      	b.n	8006632 <HAL_TIM_PWM_Start+0x6a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b01      	cmp	r3, #1
 800662a:	bf14      	ite	ne
 800662c:	2301      	movne	r3, #1
 800662e:	2300      	moveq	r3, #0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e07c      	b.n	8006734 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <HAL_TIM_PWM_Start+0x82>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006648:	e013      	b.n	8006672 <HAL_TIM_PWM_Start+0xaa>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b04      	cmp	r3, #4
 800664e:	d104      	bne.n	800665a <HAL_TIM_PWM_Start+0x92>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006658:	e00b      	b.n	8006672 <HAL_TIM_PWM_Start+0xaa>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d104      	bne.n	800666a <HAL_TIM_PWM_Start+0xa2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006668:	e003      	b.n	8006672 <HAL_TIM_PWM_Start+0xaa>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2202      	movs	r2, #2
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2201      	movs	r2, #1
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fcce 	bl	800701c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a2d      	ldr	r2, [pc, #180]	; (800673c <HAL_TIM_PWM_Start+0x174>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <HAL_TIM_PWM_Start+0xcc>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a2c      	ldr	r2, [pc, #176]	; (8006740 <HAL_TIM_PWM_Start+0x178>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d101      	bne.n	8006698 <HAL_TIM_PWM_Start+0xd0>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <HAL_TIM_PWM_Start+0xd2>
 8006698:	2300      	movs	r3, #0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a22      	ldr	r2, [pc, #136]	; (800673c <HAL_TIM_PWM_Start+0x174>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d022      	beq.n	80066fe <HAL_TIM_PWM_Start+0x136>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c0:	d01d      	beq.n	80066fe <HAL_TIM_PWM_Start+0x136>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a1f      	ldr	r2, [pc, #124]	; (8006744 <HAL_TIM_PWM_Start+0x17c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d018      	beq.n	80066fe <HAL_TIM_PWM_Start+0x136>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a1d      	ldr	r2, [pc, #116]	; (8006748 <HAL_TIM_PWM_Start+0x180>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d013      	beq.n	80066fe <HAL_TIM_PWM_Start+0x136>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1c      	ldr	r2, [pc, #112]	; (800674c <HAL_TIM_PWM_Start+0x184>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00e      	beq.n	80066fe <HAL_TIM_PWM_Start+0x136>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a16      	ldr	r2, [pc, #88]	; (8006740 <HAL_TIM_PWM_Start+0x178>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d009      	beq.n	80066fe <HAL_TIM_PWM_Start+0x136>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a18      	ldr	r2, [pc, #96]	; (8006750 <HAL_TIM_PWM_Start+0x188>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d004      	beq.n	80066fe <HAL_TIM_PWM_Start+0x136>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a16      	ldr	r2, [pc, #88]	; (8006754 <HAL_TIM_PWM_Start+0x18c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d111      	bne.n	8006722 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 0307 	and.w	r3, r3, #7
 8006708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b06      	cmp	r3, #6
 800670e:	d010      	beq.n	8006732 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006720:	e007      	b.n	8006732 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 0201 	orr.w	r2, r2, #1
 8006730:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	40010000 	.word	0x40010000
 8006740:	40010400 	.word	0x40010400
 8006744:	40000400 	.word	0x40000400
 8006748:	40000800 	.word	0x40000800
 800674c:	40000c00 	.word	0x40000c00
 8006750:	40014000 	.word	0x40014000
 8006754:	40001800 	.word	0x40001800

08006758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800676e:	2302      	movs	r3, #2
 8006770:	e0ac      	b.n	80068cc <HAL_TIM_PWM_ConfigChannel+0x174>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b0c      	cmp	r3, #12
 800677e:	f200 809f 	bhi.w	80068c0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006782:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	080067bd 	.word	0x080067bd
 800678c:	080068c1 	.word	0x080068c1
 8006790:	080068c1 	.word	0x080068c1
 8006794:	080068c1 	.word	0x080068c1
 8006798:	080067fd 	.word	0x080067fd
 800679c:	080068c1 	.word	0x080068c1
 80067a0:	080068c1 	.word	0x080068c1
 80067a4:	080068c1 	.word	0x080068c1
 80067a8:	0800683f 	.word	0x0800683f
 80067ac:	080068c1 	.word	0x080068c1
 80067b0:	080068c1 	.word	0x080068c1
 80067b4:	080068c1 	.word	0x080068c1
 80067b8:	0800687f 	.word	0x0800687f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 f9e8 	bl	8006b98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0208 	orr.w	r2, r2, #8
 80067d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699a      	ldr	r2, [r3, #24]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0204 	bic.w	r2, r2, #4
 80067e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6999      	ldr	r1, [r3, #24]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	691a      	ldr	r2, [r3, #16]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	619a      	str	r2, [r3, #24]
      break;
 80067fa:	e062      	b.n	80068c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fa38 	bl	8006c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6999      	ldr	r1, [r3, #24]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	021a      	lsls	r2, r3, #8
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	619a      	str	r2, [r3, #24]
      break;
 800683c:	e041      	b.n	80068c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fa8b 	bl	8006d60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f042 0208 	orr.w	r2, r2, #8
 8006858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0204 	bic.w	r2, r2, #4
 8006868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69d9      	ldr	r1, [r3, #28]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	61da      	str	r2, [r3, #28]
      break;
 800687c:	e021      	b.n	80068c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fadf 	bl	8006e48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69da      	ldr	r2, [r3, #28]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69da      	ldr	r2, [r3, #28]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69d9      	ldr	r1, [r3, #28]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	021a      	lsls	r2, r3, #8
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	61da      	str	r2, [r3, #28]
      break;
 80068be:	e000      	b.n	80068c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80068c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d101      	bne.n	80068ec <HAL_TIM_ConfigClockSource+0x18>
 80068e8:	2302      	movs	r3, #2
 80068ea:	e0b3      	b.n	8006a54 <HAL_TIM_ConfigClockSource+0x180>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800690a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006912:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006924:	d03e      	beq.n	80069a4 <HAL_TIM_ConfigClockSource+0xd0>
 8006926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692a:	f200 8087 	bhi.w	8006a3c <HAL_TIM_ConfigClockSource+0x168>
 800692e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006932:	f000 8085 	beq.w	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693a:	d87f      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x168>
 800693c:	2b70      	cmp	r3, #112	; 0x70
 800693e:	d01a      	beq.n	8006976 <HAL_TIM_ConfigClockSource+0xa2>
 8006940:	2b70      	cmp	r3, #112	; 0x70
 8006942:	d87b      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x168>
 8006944:	2b60      	cmp	r3, #96	; 0x60
 8006946:	d050      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0x116>
 8006948:	2b60      	cmp	r3, #96	; 0x60
 800694a:	d877      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x168>
 800694c:	2b50      	cmp	r3, #80	; 0x50
 800694e:	d03c      	beq.n	80069ca <HAL_TIM_ConfigClockSource+0xf6>
 8006950:	2b50      	cmp	r3, #80	; 0x50
 8006952:	d873      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x168>
 8006954:	2b40      	cmp	r3, #64	; 0x40
 8006956:	d058      	beq.n	8006a0a <HAL_TIM_ConfigClockSource+0x136>
 8006958:	2b40      	cmp	r3, #64	; 0x40
 800695a:	d86f      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x168>
 800695c:	2b30      	cmp	r3, #48	; 0x30
 800695e:	d064      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x156>
 8006960:	2b30      	cmp	r3, #48	; 0x30
 8006962:	d86b      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x168>
 8006964:	2b20      	cmp	r3, #32
 8006966:	d060      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x156>
 8006968:	2b20      	cmp	r3, #32
 800696a:	d867      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x168>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d05c      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x156>
 8006970:	2b10      	cmp	r3, #16
 8006972:	d05a      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006974:	e062      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	6899      	ldr	r1, [r3, #8]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f000 fb2a 	bl	8006fde <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006998:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	609a      	str	r2, [r3, #8]
      break;
 80069a2:	e04e      	b.n	8006a42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	6899      	ldr	r1, [r3, #8]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f000 fb13 	bl	8006fde <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069c6:	609a      	str	r2, [r3, #8]
      break;
 80069c8:	e03b      	b.n	8006a42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	6859      	ldr	r1, [r3, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f000 fa8a 	bl	8006ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2150      	movs	r1, #80	; 0x50
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fae1 	bl	8006faa <TIM_ITRx_SetConfig>
      break;
 80069e8:	e02b      	b.n	8006a42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	6859      	ldr	r1, [r3, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f000 faa8 	bl	8006f4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2160      	movs	r1, #96	; 0x60
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fad1 	bl	8006faa <TIM_ITRx_SetConfig>
      break;
 8006a08:	e01b      	b.n	8006a42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	6859      	ldr	r1, [r3, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	461a      	mov	r2, r3
 8006a18:	f000 fa6a 	bl	8006ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2140      	movs	r1, #64	; 0x40
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fac1 	bl	8006faa <TIM_ITRx_SetConfig>
      break;
 8006a28:	e00b      	b.n	8006a42 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4619      	mov	r1, r3
 8006a34:	4610      	mov	r0, r2
 8006a36:	f000 fab8 	bl	8006faa <TIM_ITRx_SetConfig>
        break;
 8006a3a:	e002      	b.n	8006a42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a3c:	bf00      	nop
 8006a3e:	e000      	b.n	8006a42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a3f      	ldr	r2, [pc, #252]	; (8006b6c <TIM_Base_SetConfig+0x110>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d013      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7a:	d00f      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a3c      	ldr	r2, [pc, #240]	; (8006b70 <TIM_Base_SetConfig+0x114>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00b      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a3b      	ldr	r2, [pc, #236]	; (8006b74 <TIM_Base_SetConfig+0x118>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d007      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a3a      	ldr	r2, [pc, #232]	; (8006b78 <TIM_Base_SetConfig+0x11c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a39      	ldr	r2, [pc, #228]	; (8006b7c <TIM_Base_SetConfig+0x120>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d108      	bne.n	8006aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a2e      	ldr	r2, [pc, #184]	; (8006b6c <TIM_Base_SetConfig+0x110>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d02b      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006abc:	d027      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a2b      	ldr	r2, [pc, #172]	; (8006b70 <TIM_Base_SetConfig+0x114>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d023      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a2a      	ldr	r2, [pc, #168]	; (8006b74 <TIM_Base_SetConfig+0x118>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01f      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a29      	ldr	r2, [pc, #164]	; (8006b78 <TIM_Base_SetConfig+0x11c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d01b      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a28      	ldr	r2, [pc, #160]	; (8006b7c <TIM_Base_SetConfig+0x120>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d017      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a27      	ldr	r2, [pc, #156]	; (8006b80 <TIM_Base_SetConfig+0x124>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d013      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a26      	ldr	r2, [pc, #152]	; (8006b84 <TIM_Base_SetConfig+0x128>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00f      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a25      	ldr	r2, [pc, #148]	; (8006b88 <TIM_Base_SetConfig+0x12c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00b      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a24      	ldr	r2, [pc, #144]	; (8006b8c <TIM_Base_SetConfig+0x130>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d007      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a23      	ldr	r2, [pc, #140]	; (8006b90 <TIM_Base_SetConfig+0x134>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d003      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a22      	ldr	r2, [pc, #136]	; (8006b94 <TIM_Base_SetConfig+0x138>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d108      	bne.n	8006b20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a09      	ldr	r2, [pc, #36]	; (8006b6c <TIM_Base_SetConfig+0x110>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_Base_SetConfig+0xf8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a0b      	ldr	r2, [pc, #44]	; (8006b7c <TIM_Base_SetConfig+0x120>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d103      	bne.n	8006b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	615a      	str	r2, [r3, #20]
}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr
 8006b6c:	40010000 	.word	0x40010000
 8006b70:	40000400 	.word	0x40000400
 8006b74:	40000800 	.word	0x40000800
 8006b78:	40000c00 	.word	0x40000c00
 8006b7c:	40010400 	.word	0x40010400
 8006b80:	40014000 	.word	0x40014000
 8006b84:	40014400 	.word	0x40014400
 8006b88:	40014800 	.word	0x40014800
 8006b8c:	40001800 	.word	0x40001800
 8006b90:	40001c00 	.word	0x40001c00
 8006b94:	40002000 	.word	0x40002000

08006b98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	f023 0201 	bic.w	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0303 	bic.w	r3, r3, #3
 8006bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f023 0302 	bic.w	r3, r3, #2
 8006be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a20      	ldr	r2, [pc, #128]	; (8006c70 <TIM_OC1_SetConfig+0xd8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <TIM_OC1_SetConfig+0x64>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a1f      	ldr	r2, [pc, #124]	; (8006c74 <TIM_OC1_SetConfig+0xdc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d10c      	bne.n	8006c16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f023 0308 	bic.w	r3, r3, #8
 8006c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f023 0304 	bic.w	r3, r3, #4
 8006c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a15      	ldr	r2, [pc, #84]	; (8006c70 <TIM_OC1_SetConfig+0xd8>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d003      	beq.n	8006c26 <TIM_OC1_SetConfig+0x8e>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a14      	ldr	r2, [pc, #80]	; (8006c74 <TIM_OC1_SetConfig+0xdc>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d111      	bne.n	8006c4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	621a      	str	r2, [r3, #32]
}
 8006c64:	bf00      	nop
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40010400 	.word	0x40010400

08006c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f023 0210 	bic.w	r2, r3, #16
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	021b      	lsls	r3, r3, #8
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f023 0320 	bic.w	r3, r3, #32
 8006cc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a21      	ldr	r2, [pc, #132]	; (8006d58 <TIM_OC2_SetConfig+0xe0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d003      	beq.n	8006ce0 <TIM_OC2_SetConfig+0x68>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a20      	ldr	r2, [pc, #128]	; (8006d5c <TIM_OC2_SetConfig+0xe4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d10d      	bne.n	8006cfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	011b      	lsls	r3, r3, #4
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a16      	ldr	r2, [pc, #88]	; (8006d58 <TIM_OC2_SetConfig+0xe0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <TIM_OC2_SetConfig+0x94>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a15      	ldr	r2, [pc, #84]	; (8006d5c <TIM_OC2_SetConfig+0xe4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d113      	bne.n	8006d34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40010400 	.word	0x40010400

08006d60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0303 	bic.w	r3, r3, #3
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a21      	ldr	r2, [pc, #132]	; (8006e40 <TIM_OC3_SetConfig+0xe0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d003      	beq.n	8006dc6 <TIM_OC3_SetConfig+0x66>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a20      	ldr	r2, [pc, #128]	; (8006e44 <TIM_OC3_SetConfig+0xe4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d10d      	bne.n	8006de2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	021b      	lsls	r3, r3, #8
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <TIM_OC3_SetConfig+0xe0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d003      	beq.n	8006df2 <TIM_OC3_SetConfig+0x92>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a15      	ldr	r2, [pc, #84]	; (8006e44 <TIM_OC3_SetConfig+0xe4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d113      	bne.n	8006e1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	011b      	lsls	r3, r3, #4
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	621a      	str	r2, [r3, #32]
}
 8006e34:	bf00      	nop
 8006e36:	371c      	adds	r7, #28
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40010000 	.word	0x40010000
 8006e44:	40010400 	.word	0x40010400

08006e48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	031b      	lsls	r3, r3, #12
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a11      	ldr	r2, [pc, #68]	; (8006ee8 <TIM_OC4_SetConfig+0xa0>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <TIM_OC4_SetConfig+0x68>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a10      	ldr	r2, [pc, #64]	; (8006eec <TIM_OC4_SetConfig+0xa4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d109      	bne.n	8006ec4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	019b      	lsls	r3, r3, #6
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	621a      	str	r2, [r3, #32]
}
 8006ede:	bf00      	nop
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bc80      	pop	{r7}
 8006ee6:	4770      	bx	lr
 8006ee8:	40010000 	.word	0x40010000
 8006eec:	40010400 	.word	0x40010400

08006ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f023 0201 	bic.w	r2, r3, #1
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f023 030a 	bic.w	r3, r3, #10
 8006f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	621a      	str	r2, [r3, #32]
}
 8006f42:	bf00      	nop
 8006f44:	371c      	adds	r7, #28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bc80      	pop	{r7}
 8006f4a:	4770      	bx	lr

08006f4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	f023 0210 	bic.w	r2, r3, #16
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	031b      	lsls	r3, r3, #12
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	621a      	str	r2, [r3, #32]
}
 8006fa0:	bf00      	nop
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr

08006faa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	f043 0307 	orr.w	r3, r3, #7
 8006fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	609a      	str	r2, [r3, #8]
}
 8006fd4:	bf00      	nop
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr

08006fde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b087      	sub	sp, #28
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	607a      	str	r2, [r7, #4]
 8006fea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ff8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	021a      	lsls	r2, r3, #8
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	431a      	orrs	r2, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	4313      	orrs	r3, r2
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	609a      	str	r2, [r3, #8]
}
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	bc80      	pop	{r7}
 800701a:	4770      	bx	lr

0800701c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	2201      	movs	r2, #1
 8007030:	fa02 f303 	lsl.w	r3, r2, r3
 8007034:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a1a      	ldr	r2, [r3, #32]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	43db      	mvns	r3, r3
 800703e:	401a      	ands	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a1a      	ldr	r2, [r3, #32]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f003 031f 	and.w	r3, r3, #31
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	fa01 f303 	lsl.w	r3, r1, r3
 8007054:	431a      	orrs	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	bc80      	pop	{r7}
 8007062:	4770      	bx	lr

08007064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007078:	2302      	movs	r3, #2
 800707a:	e05a      	b.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a20      	ldr	r2, [pc, #128]	; (800713c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d022      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c8:	d01d      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a1c      	ldr	r2, [pc, #112]	; (8007140 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d018      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1a      	ldr	r2, [pc, #104]	; (8007144 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a19      	ldr	r2, [pc, #100]	; (8007148 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00e      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a17      	ldr	r2, [pc, #92]	; (800714c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d009      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a16      	ldr	r2, [pc, #88]	; (8007150 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a14      	ldr	r2, [pc, #80]	; (8007154 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d10c      	bne.n	8007120 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800710c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	4313      	orrs	r3, r2
 8007116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	bc80      	pop	{r7}
 800713a:	4770      	bx	lr
 800713c:	40010000 	.word	0x40010000
 8007140:	40000400 	.word	0x40000400
 8007144:	40000800 	.word	0x40000800
 8007148:	40000c00 	.word	0x40000c00
 800714c:	40010400 	.word	0x40010400
 8007150:	40014000 	.word	0x40014000
 8007154:	40001800 	.word	0x40001800

08007158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007170:	2302      	movs	r3, #2
 8007172:	e03d      	b.n	80071f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bc80      	pop	{r7}
 80071f8:	4770      	bx	lr

080071fa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071fa:	b084      	sub	sp, #16
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	f107 001c 	add.w	r0, r7, #28
 8007208:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	2b01      	cmp	r3, #1
 8007210:	d122      	bne.n	8007258 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800723a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800723c:	2b01      	cmp	r3, #1
 800723e:	d105      	bne.n	800724c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f98f 	bl	8007570 <USB_CoreReset>
 8007252:	4603      	mov	r3, r0
 8007254:	73fb      	strb	r3, [r7, #15]
 8007256:	e010      	b.n	800727a <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f983 	bl	8007570 <USB_CoreReset>
 800726a:	4603      	mov	r3, r0
 800726c:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007272:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	2b01      	cmp	r3, #1
 800727e:	d10b      	bne.n	8007298 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f043 0206 	orr.w	r2, r3, #6
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f043 0220 	orr.w	r2, r3, #32
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072a4:	b004      	add	sp, #16
 80072a6:	4770      	bx	lr

080072a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f043 0201 	orr.w	r2, r3, #1
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bc80      	pop	{r7}
 80072c6:	4770      	bx	lr

080072c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f023 0201 	bic.w	r2, r3, #1
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bc80      	pop	{r7}
 80072e6:	4770      	bx	lr

080072e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d115      	bne.n	8007336 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007316:	2001      	movs	r0, #1
 8007318:	f7fb fd24 	bl	8002d64 <HAL_Delay>
      ms++;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3301      	adds	r3, #1
 8007320:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f916 	bl	8007554 <USB_GetMode>
 8007328:	4603      	mov	r3, r0
 800732a:	2b01      	cmp	r3, #1
 800732c:	d01e      	beq.n	800736c <USB_SetCurrentMode+0x84>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b31      	cmp	r3, #49	; 0x31
 8007332:	d9f0      	bls.n	8007316 <USB_SetCurrentMode+0x2e>
 8007334:	e01a      	b.n	800736c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007336:	78fb      	ldrb	r3, [r7, #3]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d115      	bne.n	8007368 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007348:	2001      	movs	r0, #1
 800734a:	f7fb fd0b 	bl	8002d64 <HAL_Delay>
      ms++;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3301      	adds	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f8fd 	bl	8007554 <USB_GetMode>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <USB_SetCurrentMode+0x84>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b31      	cmp	r3, #49	; 0x31
 8007364:	d9f0      	bls.n	8007348 <USB_SetCurrentMode+0x60>
 8007366:	e001      	b.n	800736c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e005      	b.n	8007378 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b32      	cmp	r3, #50	; 0x32
 8007370:	d101      	bne.n	8007376 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	019b      	lsls	r3, r3, #6
 8007392:	f043 0220 	orr.w	r2, r3, #32
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a08      	ldr	r2, [pc, #32]	; (80073c4 <USB_FlushTxFifo+0x44>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d901      	bls.n	80073ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e006      	b.n	80073ba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	f003 0320 	and.w	r3, r3, #32
 80073b4:	2b20      	cmp	r3, #32
 80073b6:	d0f0      	beq.n	800739a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	bc80      	pop	{r7}
 80073c2:	4770      	bx	lr
 80073c4:	00030d40 	.word	0x00030d40

080073c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2210      	movs	r2, #16
 80073d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3301      	adds	r3, #1
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4a08      	ldr	r2, [pc, #32]	; (8007404 <USB_FlushRxFifo+0x3c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d901      	bls.n	80073ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e006      	b.n	80073fa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f003 0310 	and.w	r3, r3, #16
 80073f4:	2b10      	cmp	r3, #16
 80073f6:	d0f0      	beq.n	80073da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	bc80      	pop	{r7}
 8007402:	4770      	bx	lr
 8007404:	00030d40 	.word	0x00030d40

08007408 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007408:	b480      	push	{r7}
 800740a:	b089      	sub	sp, #36	; 0x24
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	4611      	mov	r1, r2
 8007414:	461a      	mov	r2, r3
 8007416:	460b      	mov	r3, r1
 8007418:	71fb      	strb	r3, [r7, #7]
 800741a:	4613      	mov	r3, r2
 800741c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007426:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800742a:	2b00      	cmp	r3, #0
 800742c:	d123      	bne.n	8007476 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800742e:	88bb      	ldrh	r3, [r7, #4]
 8007430:	3303      	adds	r3, #3
 8007432:	089b      	lsrs	r3, r3, #2
 8007434:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007436:	2300      	movs	r3, #0
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e018      	b.n	800746e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	031a      	lsls	r2, r3, #12
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	4413      	add	r3, r2
 8007444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007448:	461a      	mov	r2, r3
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	3301      	adds	r3, #1
 8007454:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	3301      	adds	r3, #1
 800745a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	3301      	adds	r3, #1
 8007460:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	3301      	adds	r3, #1
 8007466:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	3301      	adds	r3, #1
 800746c:	61bb      	str	r3, [r7, #24]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	429a      	cmp	r2, r3
 8007474:	d3e2      	bcc.n	800743c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3724      	adds	r7, #36	; 0x24
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr

08007482 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007482:	b480      	push	{r7}
 8007484:	b08b      	sub	sp, #44	; 0x2c
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	4613      	mov	r3, r2
 800748e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007498:	88fb      	ldrh	r3, [r7, #6]
 800749a:	089b      	lsrs	r3, r3, #2
 800749c:	b29b      	uxth	r3, r3
 800749e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80074a0:	88fb      	ldrh	r3, [r7, #6]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80074a8:	2300      	movs	r3, #0
 80074aa:	623b      	str	r3, [r7, #32]
 80074ac:	e014      	b.n	80074d8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	601a      	str	r2, [r3, #0]
    pDest++;
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	3301      	adds	r3, #1
 80074be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	3301      	adds	r3, #1
 80074c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	3301      	adds	r3, #1
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	3301      	adds	r3, #1
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	3301      	adds	r3, #1
 80074d6:	623b      	str	r3, [r7, #32]
 80074d8:	6a3a      	ldr	r2, [r7, #32]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d3e6      	bcc.n	80074ae <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80074e0:	8bfb      	ldrh	r3, [r7, #30]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d01e      	beq.n	8007524 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f0:	461a      	mov	r2, r3
 80074f2:	f107 0310 	add.w	r3, r7, #16
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	fa22 f303 	lsr.w	r3, r2, r3
 8007506:	b2da      	uxtb	r2, r3
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	701a      	strb	r2, [r3, #0]
      i++;
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	3301      	adds	r3, #1
 8007510:	623b      	str	r3, [r7, #32]
      pDest++;
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	3301      	adds	r3, #1
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007518:	8bfb      	ldrh	r3, [r7, #30]
 800751a:	3b01      	subs	r3, #1
 800751c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800751e:	8bfb      	ldrh	r3, [r7, #30]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1ea      	bne.n	80074fa <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007526:	4618      	mov	r0, r3
 8007528:	372c      	adds	r7, #44	; 0x2c
 800752a:	46bd      	mov	sp, r7
 800752c:	bc80      	pop	{r7}
 800752e:	4770      	bx	lr

08007530 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4013      	ands	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007548:	68fb      	ldr	r3, [r7, #12]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	bc80      	pop	{r7}
 8007552:	4770      	bx	lr

08007554 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	f003 0301 	and.w	r3, r3, #1
}
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	bc80      	pop	{r7}
 800756c:	4770      	bx	lr
	...

08007570 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3301      	adds	r3, #1
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	4a12      	ldr	r2, [pc, #72]	; (80075d0 <USB_CoreReset+0x60>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d901      	bls.n	800758e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e01b      	b.n	80075c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	daf2      	bge.n	800757c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f043 0201 	orr.w	r2, r3, #1
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3301      	adds	r3, #1
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4a08      	ldr	r2, [pc, #32]	; (80075d0 <USB_CoreReset+0x60>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d901      	bls.n	80075b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e006      	b.n	80075c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d0f0      	beq.n	80075a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bc80      	pop	{r7}
 80075ce:	4770      	bx	lr
 80075d0:	00030d40 	.word	0x00030d40

080075d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075d4:	b084      	sub	sp, #16
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	f107 001c 	add.w	r0, r7, #28
 80075e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075f0:	461a      	mov	r2, r3
 80075f2:	2300      	movs	r3, #0
 80075f4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007606:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007622:	2b00      	cmp	r3, #0
 8007624:	d018      	beq.n	8007658 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	2b01      	cmp	r3, #1
 800762a:	d10a      	bne.n	8007642 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800763a:	f043 0304 	orr.w	r3, r3, #4
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	e014      	b.n	800766c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007650:	f023 0304 	bic.w	r3, r3, #4
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	e009      	b.n	800766c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007666:	f023 0304 	bic.w	r3, r3, #4
 800766a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800766c:	2110      	movs	r1, #16
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff fe86 	bl	8007380 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff fea7 	bl	80073c8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
 800767e:	e015      	b.n	80076ac <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	4413      	add	r3, r2
 8007688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800768c:	461a      	mov	r2, r3
 800768e:	f04f 33ff 	mov.w	r3, #4294967295
 8007692:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4413      	add	r3, r2
 800769c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a0:	461a      	mov	r2, r3
 80076a2:	2300      	movs	r3, #0
 80076a4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3301      	adds	r3, #1
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d3e5      	bcc.n	8007680 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f04f 32ff 	mov.w	r2, #4294967295
 80076c0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076d4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a13      	ldr	r2, [pc, #76]	; (8007728 <USB_HostInit+0x154>)
 80076da:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a13      	ldr	r2, [pc, #76]	; (800772c <USB_HostInit+0x158>)
 80076e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80076e4:	e009      	b.n	80076fa <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2280      	movs	r2, #128	; 0x80
 80076ea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a10      	ldr	r2, [pc, #64]	; (8007730 <USB_HostInit+0x15c>)
 80076f0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a0f      	ldr	r2, [pc, #60]	; (8007734 <USB_HostInit+0x160>)
 80076f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d105      	bne.n	800770c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	f043 0210 	orr.w	r2, r3, #16
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	699a      	ldr	r2, [r3, #24]
 8007710:	4b09      	ldr	r3, [pc, #36]	; (8007738 <USB_HostInit+0x164>)
 8007712:	4313      	orrs	r3, r2
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007724:	b004      	add	sp, #16
 8007726:	4770      	bx	lr
 8007728:	01000200 	.word	0x01000200
 800772c:	00e00300 	.word	0x00e00300
 8007730:	00600080 	.word	0x00600080
 8007734:	004000e0 	.word	0x004000e0
 8007738:	a3200008 	.word	0xa3200008

0800773c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	f003 0303 	and.w	r3, r3, #3
 800776e:	68f9      	ldr	r1, [r7, #12]
 8007770:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007774:	4313      	orrs	r3, r2
 8007776:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007778:	78fb      	ldrb	r3, [r7, #3]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d107      	bne.n	800778e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007784:	461a      	mov	r2, r3
 8007786:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800778a:	6053      	str	r3, [r2, #4]
 800778c:	e009      	b.n	80077a2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800778e:	78fb      	ldrb	r3, [r7, #3]
 8007790:	2b02      	cmp	r3, #2
 8007792:	d106      	bne.n	80077a2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800779a:	461a      	mov	r2, r3
 800779c:	f241 7370 	movw	r3, #6000	; 0x1770
 80077a0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr

080077ae <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80077ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077dc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80077de:	2064      	movs	r0, #100	; 0x64
 80077e0:	f7fb fac0 	bl	8002d64 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077f0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80077f2:	200a      	movs	r0, #10
 80077f4:	f7fb fab6 	bl	8002d64 <HAL_Delay>

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007802:	b480      	push	{r7}
 8007804:	b085      	sub	sp, #20
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	460b      	mov	r3, r1
 800780c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007826:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d109      	bne.n	8007846 <USB_DriveVbus+0x44>
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d106      	bne.n	8007846 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007840:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007844:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800784c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007850:	d109      	bne.n	8007866 <USB_DriveVbus+0x64>
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d106      	bne.n	8007866 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007864:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	bc80      	pop	{r7}
 8007870:	4770      	bx	lr

08007872 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007872:	b480      	push	{r7}
 8007874:	b085      	sub	sp, #20
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	0c5b      	lsrs	r3, r3, #17
 8007890:	f003 0303 	and.w	r3, r3, #3
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	bc80      	pop	{r7}
 800789c:	4770      	bx	lr

0800789e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	b29b      	uxth	r3, r3
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr
	...

080078c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	4608      	mov	r0, r1
 80078ca:	4611      	mov	r1, r2
 80078cc:	461a      	mov	r2, r3
 80078ce:	4603      	mov	r3, r0
 80078d0:	70fb      	strb	r3, [r7, #3]
 80078d2:	460b      	mov	r3, r1
 80078d4:	70bb      	strb	r3, [r7, #2]
 80078d6:	4613      	mov	r3, r2
 80078d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80078e2:	78fb      	ldrb	r3, [r7, #3]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ee:	461a      	mov	r2, r3
 80078f0:	f04f 33ff 	mov.w	r3, #4294967295
 80078f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80078f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d87e      	bhi.n	80079fc <USB_HC_Init+0x13c>
 80078fe:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <USB_HC_Init+0x44>)
 8007900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007904:	08007915 	.word	0x08007915
 8007908:	080079bf 	.word	0x080079bf
 800790c:	08007915 	.word	0x08007915
 8007910:	08007981 	.word	0x08007981
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	4413      	add	r3, r2
 800791c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007920:	461a      	mov	r2, r3
 8007922:	f240 439d 	movw	r3, #1181	; 0x49d
 8007926:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007928:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800792c:	2b00      	cmp	r3, #0
 800792e:	da10      	bge.n	8007952 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	4413      	add	r3, r2
 8007938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	0151      	lsls	r1, r2, #5
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	440a      	add	r2, r1
 8007946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800794a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007950:	e057      	b.n	8007a02 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795a:	2b00      	cmp	r3, #0
 800795c:	d051      	beq.n	8007a02 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	4413      	add	r3, r2
 8007966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	78fa      	ldrb	r2, [r7, #3]
 800796e:	0151      	lsls	r1, r2, #5
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	440a      	add	r2, r1
 8007974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007978:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800797c:	60d3      	str	r3, [r2, #12]
      break;
 800797e:	e040      	b.n	8007a02 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	4413      	add	r3, r2
 8007988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800798c:	461a      	mov	r2, r3
 800798e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007992:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007994:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007998:	2b00      	cmp	r3, #0
 800799a:	da34      	bge.n	8007a06 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800799c:	78fb      	ldrb	r3, [r7, #3]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	78fa      	ldrb	r2, [r7, #3]
 80079ac:	0151      	lsls	r1, r2, #5
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	440a      	add	r2, r1
 80079b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80079bc:	e023      	b.n	8007a06 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ca:	461a      	mov	r2, r3
 80079cc:	f240 2325 	movw	r3, #549	; 0x225
 80079d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80079d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	da17      	bge.n	8007a0a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	78fa      	ldrb	r2, [r7, #3]
 80079ea:	0151      	lsls	r1, r2, #5
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	440a      	add	r2, r1
 80079f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079f4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80079f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80079fa:	e006      	b.n	8007a0a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	77fb      	strb	r3, [r7, #31]
      break;
 8007a00:	e004      	b.n	8007a0c <USB_HC_Init+0x14c>
      break;
 8007a02:	bf00      	nop
 8007a04:	e002      	b.n	8007a0c <USB_HC_Init+0x14c>
      break;
 8007a06:	bf00      	nop
 8007a08:	e000      	b.n	8007a0c <USB_HC_Init+0x14c>
      break;
 8007a0a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a12:	699a      	ldr	r2, [r3, #24]
 8007a14:	78fb      	ldrb	r3, [r7, #3]
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a20:	6939      	ldr	r1, [r7, #16]
 8007a22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a26:	4313      	orrs	r3, r2
 8007a28:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007a36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	da03      	bge.n	8007a46 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a42:	61bb      	str	r3, [r7, #24]
 8007a44:	e001      	b.n	8007a4a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff ff11 	bl	8007872 <USB_GetHostSpeed>
 8007a50:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007a52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d106      	bne.n	8007a68 <USB_HC_Init+0x1a8>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d003      	beq.n	8007a68 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a64:	617b      	str	r3, [r7, #20]
 8007a66:	e001      	b.n	8007a6c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a6c:	787b      	ldrb	r3, [r7, #1]
 8007a6e:	059b      	lsls	r3, r3, #22
 8007a70:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a74:	78bb      	ldrb	r3, [r7, #2]
 8007a76:	02db      	lsls	r3, r3, #11
 8007a78:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a7c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a82:	049b      	lsls	r3, r3, #18
 8007a84:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a88:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a8a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a90:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a96:	78fb      	ldrb	r3, [r7, #3]
 8007a98:	0159      	lsls	r1, r3, #5
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	440b      	add	r3, r1
 8007a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007aa8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007aaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d10f      	bne.n	8007ad2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	78fa      	ldrb	r2, [r7, #3]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007acc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ad0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3720      	adds	r7, #32
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08c      	sub	sp, #48	; 0x30
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007af8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d02d      	beq.n	8007b62 <USB_HC_StartXfer+0x86>
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	791b      	ldrb	r3, [r3, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d129      	bne.n	8007b62 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d117      	bne.n	8007b44 <USB_HC_StartXfer+0x68>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	79db      	ldrb	r3, [r3, #7]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <USB_HC_StartXfer+0x48>
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	79db      	ldrb	r3, [r3, #7]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d10f      	bne.n	8007b44 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	0151      	lsls	r1, r2, #5
 8007b36:	6a3a      	ldr	r2, [r7, #32]
 8007b38:	440a      	add	r2, r1
 8007b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b42:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10b      	bne.n	8007b62 <USB_HC_StartXfer+0x86>
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	795b      	ldrb	r3, [r3, #5]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d107      	bne.n	8007b62 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	785b      	ldrb	r3, [r3, #1]
 8007b56:	4619      	mov	r1, r3
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fa2d 	bl	8007fb8 <USB_DoPing>
      return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e0f8      	b.n	8007d54 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d018      	beq.n	8007b9c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	8912      	ldrh	r2, [r2, #8]
 8007b72:	4413      	add	r3, r2
 8007b74:	3b01      	subs	r3, #1
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	8912      	ldrh	r2, [r2, #8]
 8007b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b7e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007b80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b82:	8b7b      	ldrh	r3, [r7, #26]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d90b      	bls.n	8007ba0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007b88:	8b7b      	ldrh	r3, [r7, #26]
 8007b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	8912      	ldrh	r2, [r2, #8]
 8007b92:	fb02 f203 	mul.w	r2, r2, r3
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	611a      	str	r2, [r3, #16]
 8007b9a:	e001      	b.n	8007ba0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	78db      	ldrb	r3, [r3, #3]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d007      	beq.n	8007bb8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	8912      	ldrh	r2, [r2, #8]
 8007bae:	fb02 f203 	mul.w	r2, r2, r3
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	611a      	str	r2, [r3, #16]
 8007bb6:	e003      	b.n	8007bc0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	695a      	ldr	r2, [r3, #20]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007bca:	04d9      	lsls	r1, r3, #19
 8007bcc:	4b63      	ldr	r3, [pc, #396]	; (8007d5c <USB_HC_StartXfer+0x280>)
 8007bce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bd0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	7a9b      	ldrb	r3, [r3, #10]
 8007bd6:	075b      	lsls	r3, r3, #29
 8007bd8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bdc:	69f9      	ldr	r1, [r7, #28]
 8007bde:	0148      	lsls	r0, r1, #5
 8007be0:	6a39      	ldr	r1, [r7, #32]
 8007be2:	4401      	add	r1, r0
 8007be4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007be8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	68d9      	ldr	r1, [r3, #12]
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c02:	460a      	mov	r2, r1
 8007c04:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bf0c      	ite	eq
 8007c16:	2301      	moveq	r3, #1
 8007c18:	2300      	movne	r3, #0
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	6a3a      	ldr	r2, [r7, #32]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c3c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	7e7b      	ldrb	r3, [r7, #25]
 8007c4e:	075b      	lsls	r3, r3, #29
 8007c50:	69f9      	ldr	r1, [r7, #28]
 8007c52:	0148      	lsls	r0, r1, #5
 8007c54:	6a39      	ldr	r1, [r7, #32]
 8007c56:	4401      	add	r1, r0
 8007c58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c76:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	78db      	ldrb	r3, [r3, #3]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d004      	beq.n	8007c8a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c86:	613b      	str	r3, [r7, #16]
 8007c88:	e003      	b.n	8007c92 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c90:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c98:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e04e      	b.n	8007d54 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	78db      	ldrb	r3, [r3, #3]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d149      	bne.n	8007d52 <USB_HC_StartXfer+0x276>
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d045      	beq.n	8007d52 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	79db      	ldrb	r3, [r3, #7]
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d830      	bhi.n	8007d30 <USB_HC_StartXfer+0x254>
 8007cce:	a201      	add	r2, pc, #4	; (adr r2, 8007cd4 <USB_HC_StartXfer+0x1f8>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007ce5 	.word	0x08007ce5
 8007cd8:	08007d09 	.word	0x08007d09
 8007cdc:	08007ce5 	.word	0x08007ce5
 8007ce0:	08007d09 	.word	0x08007d09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	3303      	adds	r3, #3
 8007cea:	089b      	lsrs	r3, r3, #2
 8007cec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007cee:	8afa      	ldrh	r2, [r7, #22]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d91c      	bls.n	8007d34 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	f043 0220 	orr.w	r2, r3, #32
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d06:	e015      	b.n	8007d34 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	3303      	adds	r3, #3
 8007d0e:	089b      	lsrs	r3, r3, #2
 8007d10:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007d12:	8afa      	ldrh	r2, [r7, #22]
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d90a      	bls.n	8007d38 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d2e:	e003      	b.n	8007d38 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007d30:	bf00      	nop
 8007d32:	e002      	b.n	8007d3a <USB_HC_StartXfer+0x25e>
        break;
 8007d34:	bf00      	nop
 8007d36:	e000      	b.n	8007d3a <USB_HC_StartXfer+0x25e>
        break;
 8007d38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	68d9      	ldr	r1, [r3, #12]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	785a      	ldrb	r2, [r3, #1]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2000      	movs	r0, #0
 8007d4a:	9000      	str	r0, [sp, #0]
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff fb5b 	bl	8007408 <USB_WritePacket>
  }

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3728      	adds	r7, #40	; 0x28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	1ff80000 	.word	0x1ff80000

08007d60 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	b29b      	uxth	r3, r3
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bc80      	pop	{r7}
 8007d7e:	4770      	bx	lr

08007d80 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b089      	sub	sp, #36	; 0x24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	0c9b      	lsrs	r3, r3, #18
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	0fdb      	lsrs	r3, r3, #31
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 0320 	and.w	r3, r3, #32
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	d104      	bne.n	8007dda <USB_HC_Halt+0x5a>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e0e8      	b.n	8007fac <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <USB_HC_Halt+0x66>
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d173      	bne.n	8007ece <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	0151      	lsls	r1, r2, #5
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	440a      	add	r2, r1
 8007dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e04:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f040 80cb 	bne.w	8007faa <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d143      	bne.n	8007ea8 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e3e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e5e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	0151      	lsls	r1, r2, #5
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	440a      	add	r2, r1
 8007e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e7e:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	3301      	adds	r3, #1
 8007e84:	61fb      	str	r3, [r7, #28]
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e8c:	d81d      	bhi.n	8007eca <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ea4:	d0ec      	beq.n	8007e80 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ea6:	e080      	b.n	8007faa <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	0151      	lsls	r1, r2, #5
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	440a      	add	r2, r1
 8007ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ec2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ec6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ec8:	e06f      	b.n	8007faa <USB_HC_Halt+0x22a>
            break;
 8007eca:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ecc:	e06d      	b.n	8007faa <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	0151      	lsls	r1, r2, #5
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	440a      	add	r2, r1
 8007ee4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007eec:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d143      	bne.n	8007f86 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	0151      	lsls	r1, r2, #5
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	440a      	add	r2, r1
 8007f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f1c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	0151      	lsls	r1, r2, #5
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	440a      	add	r2, r1
 8007f34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f3c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	0151      	lsls	r1, r2, #5
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	440a      	add	r2, r1
 8007f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f5c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	3301      	adds	r3, #1
 8007f62:	61fb      	str	r3, [r7, #28]
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f6a:	d81d      	bhi.n	8007fa8 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f82:	d0ec      	beq.n	8007f5e <USB_HC_Halt+0x1de>
 8007f84:	e011      	b.n	8007faa <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	0151      	lsls	r1, r2, #5
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	440a      	add	r2, r1
 8007f9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	e000      	b.n	8007faa <USB_HC_Halt+0x22a>
          break;
 8007fa8:	bf00      	nop
    }
  }

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3724      	adds	r7, #36	; 0x24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr
	...

08007fb8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	04da      	lsls	r2, r3, #19
 8007fd4:	4b14      	ldr	r3, [pc, #80]	; (8008028 <USB_DoPing+0x70>)
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	0151      	lsls	r1, r2, #5
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	440a      	add	r2, r1
 8007fe0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fe4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fe8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008000:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008008:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	4413      	add	r3, r2
 8008012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008016:	461a      	mov	r2, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr
 8008028:	1ff80000 	.word	0x1ff80000

0800802c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff f943 	bl	80072c8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008042:	2110      	movs	r1, #16
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff f99b 	bl	8007380 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7ff f9bc 	bl	80073c8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008050:	2300      	movs	r3, #0
 8008052:	613b      	str	r3, [r7, #16]
 8008054:	e01f      	b.n	8008096 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	4413      	add	r3, r2
 800805e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800806c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008074:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800807c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4413      	add	r3, r2
 8008086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808a:	461a      	mov	r2, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	3301      	adds	r3, #1
 8008094:	613b      	str	r3, [r7, #16]
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2b0f      	cmp	r3, #15
 800809a:	d9dc      	bls.n	8008056 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800809c:	2300      	movs	r3, #0
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	e034      	b.n	800810c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080c8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d6:	461a      	mov	r2, r3
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	3301      	adds	r3, #1
 80080e0:	617b      	str	r3, [r7, #20]
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080e8:	d80c      	bhi.n	8008104 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008100:	d0ec      	beq.n	80080dc <USB_StopHost+0xb0>
 8008102:	e000      	b.n	8008106 <USB_StopHost+0xda>
        break;
 8008104:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	3301      	adds	r3, #1
 800810a:	613b      	str	r3, [r7, #16]
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	2b0f      	cmp	r3, #15
 8008110:	d9c7      	bls.n	80080a2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008118:	461a      	mov	r2, r3
 800811a:	f04f 33ff 	mov.w	r3, #4294967295
 800811e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f04f 32ff 	mov.w	r2, #4294967295
 8008126:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3718      	adds	r7, #24
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008138:	4904      	ldr	r1, [pc, #16]	; (800814c <MX_FATFS_Init+0x18>)
 800813a:	4805      	ldr	r0, [pc, #20]	; (8008150 <MX_FATFS_Init+0x1c>)
 800813c:	f005 fc64 	bl	800da08 <FATFS_LinkDriver>
 8008140:	4603      	mov	r3, r0
 8008142:	461a      	mov	r2, r3
 8008144:	4b03      	ldr	r3, [pc, #12]	; (8008154 <MX_FATFS_Init+0x20>)
 8008146:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008148:	bf00      	nop
 800814a:	bd80      	pop	{r7, pc}
 800814c:	2000cad8 	.word	0x2000cad8
 8008150:	08012cb0 	.word	0x08012cb0
 8008154:	2000cf38 	.word	0x2000cf38

08008158 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008158:	b480      	push	{r7}
 800815a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800815c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800815e:	4618      	mov	r0, r3
 8008160:	46bd      	mov	sp, r7
 8008162:	bc80      	pop	{r7}
 8008164:	4770      	bx	lr

08008166 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008166:	b590      	push	{r4, r7, lr}
 8008168:	b089      	sub	sp, #36	; 0x24
 800816a:	af04      	add	r7, sp, #16
 800816c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008174:	7919      	ldrb	r1, [r3, #4]
 8008176:	2350      	movs	r3, #80	; 0x50
 8008178:	2206      	movs	r2, #6
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f001 fc47 	bl	8009a0e <USBH_FindInterface>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	2bff      	cmp	r3, #255	; 0xff
 8008188:	d002      	beq.n	8008190 <USBH_MSC_InterfaceInit+0x2a>
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d901      	bls.n	8008194 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008190:	2302      	movs	r3, #2
 8008192:	e0ef      	b.n	8008374 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 fc1d 	bl	80099d8 <USBH_SelectInterface>
 800819e:	4603      	mov	r3, r0
 80081a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80081a8:	2302      	movs	r3, #2
 80081aa:	e0e3      	b.n	8008374 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80081b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80081b6:	f006 f8d3 	bl	800e360 <malloc>
 80081ba:	4603      	mov	r3, r0
 80081bc:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80081ce:	2302      	movs	r3, #2
 80081d0:	e0d0      	b.n	8008374 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80081d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081d6:	2100      	movs	r1, #0
 80081d8:	68b8      	ldr	r0, [r7, #8]
 80081da:	f006 f8df 	bl	800e39c <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	211a      	movs	r1, #26
 80081e4:	fb01 f303 	mul.w	r3, r1, r3
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	b25b      	sxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	da16      	bge.n	8008224 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	211a      	movs	r1, #26
 80081fc:	fb01 f303 	mul.w	r3, r1, r3
 8008200:	4413      	add	r3, r2
 8008202:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008206:	781a      	ldrb	r2, [r3, #0]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	211a      	movs	r1, #26
 8008212:	fb01 f303 	mul.w	r3, r1, r3
 8008216:	4413      	add	r3, r2
 8008218:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800821c:	881a      	ldrh	r2, [r3, #0]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	815a      	strh	r2, [r3, #10]
 8008222:	e015      	b.n	8008250 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	211a      	movs	r1, #26
 800822a:	fb01 f303 	mul.w	r3, r1, r3
 800822e:	4413      	add	r3, r2
 8008230:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008234:	781a      	ldrb	r2, [r3, #0]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	211a      	movs	r1, #26
 8008240:	fb01 f303 	mul.w	r3, r1, r3
 8008244:	4413      	add	r3, r2
 8008246:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800824a:	881a      	ldrh	r2, [r3, #0]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	211a      	movs	r1, #26
 8008256:	fb01 f303 	mul.w	r3, r1, r3
 800825a:	4413      	add	r3, r2
 800825c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	b25b      	sxtb	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	da16      	bge.n	8008296 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	211a      	movs	r1, #26
 800826e:	fb01 f303 	mul.w	r3, r1, r3
 8008272:	4413      	add	r3, r2
 8008274:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008278:	781a      	ldrb	r2, [r3, #0]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	211a      	movs	r1, #26
 8008284:	fb01 f303 	mul.w	r3, r1, r3
 8008288:	4413      	add	r3, r2
 800828a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800828e:	881a      	ldrh	r2, [r3, #0]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	815a      	strh	r2, [r3, #10]
 8008294:	e015      	b.n	80082c2 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	211a      	movs	r1, #26
 800829c:	fb01 f303 	mul.w	r3, r1, r3
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80082a6:	781a      	ldrb	r2, [r3, #0]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	211a      	movs	r1, #26
 80082b2:	fb01 f303 	mul.w	r3, r1, r3
 80082b6:	4413      	add	r3, r2
 80082b8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80082bc:	881a      	ldrh	r2, [r3, #0]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2200      	movs	r2, #0
 80082cc:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	799b      	ldrb	r3, [r3, #6]
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f002 fcab 	bl	800ac36 <USBH_AllocPipe>
 80082e0:	4603      	mov	r3, r0
 80082e2:	461a      	mov	r2, r3
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	79db      	ldrb	r3, [r3, #7]
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f002 fca1 	bl	800ac36 <USBH_AllocPipe>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fdab 	bl	8008e58 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	7959      	ldrb	r1, [r3, #5]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	7998      	ldrb	r0, [r3, #6]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	8912      	ldrh	r2, [r2, #8]
 800831a:	9202      	str	r2, [sp, #8]
 800831c:	2202      	movs	r2, #2
 800831e:	9201      	str	r2, [sp, #4]
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	4623      	mov	r3, r4
 8008324:	4602      	mov	r2, r0
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f002 fc56 	bl	800abd8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	7919      	ldrb	r1, [r3, #4]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	79d8      	ldrb	r0, [r3, #7]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	8952      	ldrh	r2, [r2, #10]
 8008344:	9202      	str	r2, [sp, #8]
 8008346:	2202      	movs	r2, #2
 8008348:	9201      	str	r2, [sp, #4]
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	4623      	mov	r3, r4
 800834e:	4602      	mov	r2, r0
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f002 fc41 	bl	800abd8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	791b      	ldrb	r3, [r3, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f005 ff22 	bl	800e1a8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	795b      	ldrb	r3, [r3, #5]
 8008368:	2200      	movs	r2, #0
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f005 ff1b 	bl	800e1a8 <USBH_LL_SetToggle>

  return USBH_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	bd90      	pop	{r4, r7, pc}

0800837c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	795b      	ldrb	r3, [r3, #5]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00e      	beq.n	80083b4 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	795b      	ldrb	r3, [r3, #5]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f002 fc3a 	bl	800ac16 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	795b      	ldrb	r3, [r3, #5]
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f002 fc64 	bl	800ac76 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	791b      	ldrb	r3, [r3, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00e      	beq.n	80083da <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	791b      	ldrb	r3, [r3, #4]
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f002 fc27 	bl	800ac16 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	791b      	ldrb	r3, [r3, #4]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f002 fc51 	bl	800ac76 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00b      	beq.n	80083fe <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f005 ffbe 	bl	800e370 <free>
    phost->pActiveClass->pData = 0U;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083fa:	2200      	movs	r2, #0
 80083fc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800841a:	2301      	movs	r3, #1
 800841c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	7b9b      	ldrb	r3, [r3, #14]
 8008422:	2b03      	cmp	r3, #3
 8008424:	d042      	beq.n	80084ac <USBH_MSC_ClassRequest+0xa4>
 8008426:	2b03      	cmp	r3, #3
 8008428:	dc4c      	bgt.n	80084c4 <USBH_MSC_ClassRequest+0xbc>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <USBH_MSC_ClassRequest+0x2a>
 800842e:	2b02      	cmp	r3, #2
 8008430:	d148      	bne.n	80084c4 <USBH_MSC_ClassRequest+0xbc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fcef 	bl	8008e1a <USBH_MSC_BOT_REQ_GetMaxLUN>
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	2b03      	cmp	r3, #3
 8008444:	d104      	bne.n	8008450 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	2200      	movs	r2, #0
 800844a:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d138      	bne.n	80084c8 <USBH_MSC_ClassRequest+0xc0>
      {
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b02      	cmp	r3, #2
 800845e:	d804      	bhi.n	800846a <USBH_MSC_ClassRequest+0x62>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	3301      	adds	r3, #1
 8008468:	e000      	b.n	800846c <USBH_MSC_ClassRequest+0x64>
 800846a:	2302      	movs	r3, #2
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	6013      	str	r3, [r2, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008470:	2300      	movs	r3, #0
 8008472:	73bb      	strb	r3, [r7, #14]
 8008474:	e014      	b.n	80084a0 <USBH_MSC_ClassRequest+0x98>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	2134      	movs	r1, #52	; 0x34
 800847c:	fb01 f303 	mul.w	r3, r1, r3
 8008480:	4413      	add	r3, r2
 8008482:	3392      	adds	r3, #146	; 0x92
 8008484:	2202      	movs	r2, #2
 8008486:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	2134      	movs	r1, #52	; 0x34
 800848e:	fb01 f303 	mul.w	r3, r1, r3
 8008492:	4413      	add	r3, r2
 8008494:	33c1      	adds	r3, #193	; 0xc1
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	3301      	adds	r3, #1
 800849e:	73bb      	strb	r3, [r7, #14]
 80084a0:	7bba      	ldrb	r2, [r7, #14]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d3e5      	bcc.n	8008476 <USBH_MSC_ClassRequest+0x6e>
        }
      }
      break;
 80084aa:	e00d      	b.n	80084c8 <USBH_MSC_ClassRequest+0xc0>

    case MSC_REQ_ERROR :
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80084ac:	2100      	movs	r1, #0
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 ff65 	bl	800a37e <USBH_ClrFeature>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d108      	bne.n	80084cc <USBH_MSC_ClassRequest+0xc4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	7bda      	ldrb	r2, [r3, #15]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	739a      	strb	r2, [r3, #14]
      }
      break;
 80084c2:	e003      	b.n	80084cc <USBH_MSC_ClassRequest+0xc4>

    default:
      break;
 80084c4:	bf00      	nop
 80084c6:	e002      	b.n	80084ce <USBH_MSC_ClassRequest+0xc6>
      break;
 80084c8:	bf00      	nop
 80084ca:	e000      	b.n	80084ce <USBH_MSC_ClassRequest+0xc6>
      break;
 80084cc:	bf00      	nop
  }

  return status;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80084ea:	2301      	movs	r3, #1
 80084ec:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80084ee:	2301      	movs	r3, #1
 80084f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80084f2:	2301      	movs	r3, #1
 80084f4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	7b1b      	ldrb	r3, [r3, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <USBH_MSC_Process+0x2e>
 80084fe:	2b01      	cmp	r3, #1
 8008500:	f000 8271 	beq.w	80089e6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008504:	e272      	b.n	80089ec <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800850c:	461a      	mov	r2, r3
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	429a      	cmp	r2, r3
 8008514:	f080 824f 	bcs.w	80089b6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800851e:	4619      	mov	r1, r3
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	2334      	movs	r3, #52	; 0x34
 8008524:	fb03 f301 	mul.w	r3, r3, r1
 8008528:	4413      	add	r3, r2
 800852a:	3391      	adds	r3, #145	; 0x91
 800852c:	2201      	movs	r2, #1
 800852e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008536:	4619      	mov	r1, r3
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	2334      	movs	r3, #52	; 0x34
 800853c:	fb03 f301 	mul.w	r3, r3, r1
 8008540:	4413      	add	r3, r2
 8008542:	3390      	adds	r3, #144	; 0x90
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	2b08      	cmp	r3, #8
 8008548:	f200 8243 	bhi.w	80089d2 <USBH_MSC_Process+0x4fa>
 800854c:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <USBH_MSC_Process+0x7c>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	08008579 	.word	0x08008579
 8008558:	080089d3 	.word	0x080089d3
 800855c:	08008641 	.word	0x08008641
 8008560:	080087c5 	.word	0x080087c5
 8008564:	0800859f 	.word	0x0800859f
 8008568:	08008891 	.word	0x08008891
 800856c:	080089d3 	.word	0x080089d3
 8008570:	080089d3 	.word	0x080089d3
 8008574:	080089a5 	.word	0x080089a5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800857e:	4619      	mov	r1, r3
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	2334      	movs	r3, #52	; 0x34
 8008584:	fb03 f301 	mul.w	r3, r3, r1
 8008588:	4413      	add	r3, r2
 800858a:	3390      	adds	r3, #144	; 0x90
 800858c:	2204      	movs	r2, #4
 800858e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800859c:	e222      	b.n	80089e4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085a4:	b2d9      	uxtb	r1, r3
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085ac:	461a      	mov	r2, r3
 80085ae:	2334      	movs	r3, #52	; 0x34
 80085b0:	fb03 f302 	mul.w	r3, r3, r2
 80085b4:	3398      	adds	r3, #152	; 0x98
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	4413      	add	r3, r2
 80085ba:	3307      	adds	r3, #7
 80085bc:	461a      	mov	r2, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 ff68 	bl	8009494 <USBH_MSC_SCSI_Inquiry>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10b      	bne.n	80085e6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085d4:	4619      	mov	r1, r3
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	2334      	movs	r3, #52	; 0x34
 80085da:	fb03 f301 	mul.w	r3, r3, r1
 80085de:	4413      	add	r3, r2
 80085e0:	3390      	adds	r3, #144	; 0x90
 80085e2:	2202      	movs	r2, #2
 80085e4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d10c      	bne.n	8008606 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085f2:	4619      	mov	r1, r3
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	2334      	movs	r3, #52	; 0x34
 80085f8:	fb03 f301 	mul.w	r3, r3, r1
 80085fc:	4413      	add	r3, r2
 80085fe:	3390      	adds	r3, #144	; 0x90
 8008600:	2205      	movs	r2, #5
 8008602:	701a      	strb	r2, [r3, #0]
            break;
 8008604:	e1e7      	b.n	80089d6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	2b04      	cmp	r3, #4
 800860a:	f040 81e4 	bne.w	80089d6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008614:	4619      	mov	r1, r3
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	2334      	movs	r3, #52	; 0x34
 800861a:	fb03 f301 	mul.w	r3, r3, r1
 800861e:	4413      	add	r3, r2
 8008620:	3390      	adds	r3, #144	; 0x90
 8008622:	2201      	movs	r2, #1
 8008624:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800862c:	4619      	mov	r1, r3
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	2334      	movs	r3, #52	; 0x34
 8008632:	fb03 f301 	mul.w	r3, r3, r1
 8008636:	4413      	add	r3, r2
 8008638:	3391      	adds	r3, #145	; 0x91
 800863a:	2202      	movs	r2, #2
 800863c:	701a      	strb	r2, [r3, #0]
            break;
 800863e:	e1ca      	b.n	80089d6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008646:	b2db      	uxtb	r3, r3
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fe64 	bl	8009318 <USBH_MSC_SCSI_TestUnitReady>
 8008650:	4603      	mov	r3, r0
 8008652:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d149      	bne.n	80086ee <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008660:	4619      	mov	r1, r3
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	2334      	movs	r3, #52	; 0x34
 8008666:	fb03 f301 	mul.w	r3, r3, r1
 800866a:	4413      	add	r3, r2
 800866c:	3392      	adds	r3, #146	; 0x92
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00c      	beq.n	800868e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800867a:	4619      	mov	r1, r3
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	2334      	movs	r3, #52	; 0x34
 8008680:	fb03 f301 	mul.w	r3, r3, r1
 8008684:	4413      	add	r3, r2
 8008686:	33c1      	adds	r3, #193	; 0xc1
 8008688:	2201      	movs	r2, #1
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	e00b      	b.n	80086a6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008694:	4619      	mov	r1, r3
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	2334      	movs	r3, #52	; 0x34
 800869a:	fb03 f301 	mul.w	r3, r3, r1
 800869e:	4413      	add	r3, r2
 80086a0:	33c1      	adds	r3, #193	; 0xc1
 80086a2:	2200      	movs	r2, #0
 80086a4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086ac:	4619      	mov	r1, r3
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	2334      	movs	r3, #52	; 0x34
 80086b2:	fb03 f301 	mul.w	r3, r3, r1
 80086b6:	4413      	add	r3, r2
 80086b8:	3390      	adds	r3, #144	; 0x90
 80086ba:	2203      	movs	r2, #3
 80086bc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086c4:	4619      	mov	r1, r3
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	2334      	movs	r3, #52	; 0x34
 80086ca:	fb03 f301 	mul.w	r3, r3, r1
 80086ce:	4413      	add	r3, r2
 80086d0:	3391      	adds	r3, #145	; 0x91
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086dc:	4619      	mov	r1, r3
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	2334      	movs	r3, #52	; 0x34
 80086e2:	fb03 f301 	mul.w	r3, r3, r1
 80086e6:	4413      	add	r3, r2
 80086e8:	3392      	adds	r3, #146	; 0x92
 80086ea:	2200      	movs	r2, #0
 80086ec:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d14a      	bne.n	800878a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086fa:	4619      	mov	r1, r3
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	2334      	movs	r3, #52	; 0x34
 8008700:	fb03 f301 	mul.w	r3, r3, r1
 8008704:	4413      	add	r3, r2
 8008706:	3392      	adds	r3, #146	; 0x92
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b02      	cmp	r3, #2
 800870c:	d00c      	beq.n	8008728 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008714:	4619      	mov	r1, r3
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	2334      	movs	r3, #52	; 0x34
 800871a:	fb03 f301 	mul.w	r3, r3, r1
 800871e:	4413      	add	r3, r2
 8008720:	33c1      	adds	r3, #193	; 0xc1
 8008722:	2201      	movs	r2, #1
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	e00b      	b.n	8008740 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800872e:	4619      	mov	r1, r3
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	2334      	movs	r3, #52	; 0x34
 8008734:	fb03 f301 	mul.w	r3, r3, r1
 8008738:	4413      	add	r3, r2
 800873a:	33c1      	adds	r3, #193	; 0xc1
 800873c:	2200      	movs	r2, #0
 800873e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008746:	4619      	mov	r1, r3
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	2334      	movs	r3, #52	; 0x34
 800874c:	fb03 f301 	mul.w	r3, r3, r1
 8008750:	4413      	add	r3, r2
 8008752:	3390      	adds	r3, #144	; 0x90
 8008754:	2205      	movs	r2, #5
 8008756:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800875e:	4619      	mov	r1, r3
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	2334      	movs	r3, #52	; 0x34
 8008764:	fb03 f301 	mul.w	r3, r3, r1
 8008768:	4413      	add	r3, r2
 800876a:	3391      	adds	r3, #145	; 0x91
 800876c:	2201      	movs	r2, #1
 800876e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008776:	4619      	mov	r1, r3
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	2334      	movs	r3, #52	; 0x34
 800877c:	fb03 f301 	mul.w	r3, r3, r1
 8008780:	4413      	add	r3, r2
 8008782:	3392      	adds	r3, #146	; 0x92
 8008784:	2202      	movs	r2, #2
 8008786:	701a      	strb	r2, [r3, #0]
            break;
 8008788:	e127      	b.n	80089da <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800878a:	7bbb      	ldrb	r3, [r7, #14]
 800878c:	2b04      	cmp	r3, #4
 800878e:	f040 8124 	bne.w	80089da <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008798:	4619      	mov	r1, r3
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	2334      	movs	r3, #52	; 0x34
 800879e:	fb03 f301 	mul.w	r3, r3, r1
 80087a2:	4413      	add	r3, r2
 80087a4:	3390      	adds	r3, #144	; 0x90
 80087a6:	2201      	movs	r2, #1
 80087a8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087b0:	4619      	mov	r1, r3
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	2334      	movs	r3, #52	; 0x34
 80087b6:	fb03 f301 	mul.w	r3, r3, r1
 80087ba:	4413      	add	r3, r2
 80087bc:	3391      	adds	r3, #145	; 0x91
 80087be:	2202      	movs	r2, #2
 80087c0:	701a      	strb	r2, [r3, #0]
            break;
 80087c2:	e10a      	b.n	80089da <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087ca:	b2d9      	uxtb	r1, r3
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087d2:	461a      	mov	r2, r3
 80087d4:	2334      	movs	r3, #52	; 0x34
 80087d6:	fb03 f302 	mul.w	r3, r3, r2
 80087da:	3390      	adds	r3, #144	; 0x90
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	4413      	add	r3, r2
 80087e0:	3304      	adds	r3, #4
 80087e2:	461a      	mov	r2, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fdda 	bl	800939e <USBH_MSC_SCSI_ReadCapacity>
 80087ea:	4603      	mov	r3, r0
 80087ec:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d120      	bne.n	8008836 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087fa:	4619      	mov	r1, r3
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	2334      	movs	r3, #52	; 0x34
 8008800:	fb03 f301 	mul.w	r3, r3, r1
 8008804:	4413      	add	r3, r2
 8008806:	3390      	adds	r3, #144	; 0x90
 8008808:	2201      	movs	r2, #1
 800880a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008812:	4619      	mov	r1, r3
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	2334      	movs	r3, #52	; 0x34
 8008818:	fb03 f301 	mul.w	r3, r3, r1
 800881c:	4413      	add	r3, r2
 800881e:	3391      	adds	r3, #145	; 0x91
 8008820:	2200      	movs	r2, #0
 8008822:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800882a:	3301      	adds	r3, #1
 800882c:	b29a      	uxth	r2, r3
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008834:	e0d3      	b.n	80089de <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008836:	7bfb      	ldrb	r3, [r7, #15]
 8008838:	2b02      	cmp	r3, #2
 800883a:	d10c      	bne.n	8008856 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008842:	4619      	mov	r1, r3
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	2334      	movs	r3, #52	; 0x34
 8008848:	fb03 f301 	mul.w	r3, r3, r1
 800884c:	4413      	add	r3, r2
 800884e:	3390      	adds	r3, #144	; 0x90
 8008850:	2205      	movs	r2, #5
 8008852:	701a      	strb	r2, [r3, #0]
            break;
 8008854:	e0c3      	b.n	80089de <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	2b04      	cmp	r3, #4
 800885a:	f040 80c0 	bne.w	80089de <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008864:	4619      	mov	r1, r3
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	2334      	movs	r3, #52	; 0x34
 800886a:	fb03 f301 	mul.w	r3, r3, r1
 800886e:	4413      	add	r3, r2
 8008870:	3390      	adds	r3, #144	; 0x90
 8008872:	2201      	movs	r2, #1
 8008874:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800887c:	4619      	mov	r1, r3
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	2334      	movs	r3, #52	; 0x34
 8008882:	fb03 f301 	mul.w	r3, r3, r1
 8008886:	4413      	add	r3, r2
 8008888:	3391      	adds	r3, #145	; 0x91
 800888a:	2202      	movs	r2, #2
 800888c:	701a      	strb	r2, [r3, #0]
            break;
 800888e:	e0a6      	b.n	80089de <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008896:	b2d9      	uxtb	r1, r3
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800889e:	461a      	mov	r2, r3
 80088a0:	2334      	movs	r3, #52	; 0x34
 80088a2:	fb03 f302 	mul.w	r3, r3, r2
 80088a6:	3398      	adds	r3, #152	; 0x98
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	4413      	add	r3, r2
 80088ac:	3304      	adds	r3, #4
 80088ae:	461a      	mov	r2, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fe94 	bl	80095de <USBH_MSC_SCSI_RequestSense>
 80088b6:	4603      	mov	r3, r0
 80088b8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d145      	bne.n	800894c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088c6:	4619      	mov	r1, r3
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	2334      	movs	r3, #52	; 0x34
 80088cc:	fb03 f301 	mul.w	r3, r3, r1
 80088d0:	4413      	add	r3, r2
 80088d2:	339c      	adds	r3, #156	; 0x9c
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	2b06      	cmp	r3, #6
 80088d8:	d00c      	beq.n	80088f4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088e0:	4619      	mov	r1, r3
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	2334      	movs	r3, #52	; 0x34
 80088e6:	fb03 f301 	mul.w	r3, r3, r1
 80088ea:	4413      	add	r3, r2
 80088ec:	339c      	adds	r3, #156	; 0x9c
 80088ee:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d117      	bne.n	8008924 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	f242 720f 	movw	r2, #9999	; 0x270f
 8008906:	4293      	cmp	r3, r2
 8008908:	d80c      	bhi.n	8008924 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008910:	4619      	mov	r1, r3
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	2334      	movs	r3, #52	; 0x34
 8008916:	fb03 f301 	mul.w	r3, r3, r1
 800891a:	4413      	add	r3, r2
 800891c:	3390      	adds	r3, #144	; 0x90
 800891e:	2202      	movs	r2, #2
 8008920:	701a      	strb	r2, [r3, #0]
                  break;
 8008922:	e05f      	b.n	80089e4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800892a:	4619      	mov	r1, r3
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	2334      	movs	r3, #52	; 0x34
 8008930:	fb03 f301 	mul.w	r3, r3, r1
 8008934:	4413      	add	r3, r2
 8008936:	3390      	adds	r3, #144	; 0x90
 8008938:	2201      	movs	r2, #1
 800893a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008942:	3301      	adds	r3, #1
 8008944:	b29a      	uxth	r2, r3
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	2b02      	cmp	r3, #2
 8008950:	d10c      	bne.n	800896c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008958:	4619      	mov	r1, r3
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	2334      	movs	r3, #52	; 0x34
 800895e:	fb03 f301 	mul.w	r3, r3, r1
 8008962:	4413      	add	r3, r2
 8008964:	3390      	adds	r3, #144	; 0x90
 8008966:	2208      	movs	r2, #8
 8008968:	701a      	strb	r2, [r3, #0]
            break;
 800896a:	e03a      	b.n	80089e2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	2b04      	cmp	r3, #4
 8008970:	d137      	bne.n	80089e2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008978:	4619      	mov	r1, r3
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	2334      	movs	r3, #52	; 0x34
 800897e:	fb03 f301 	mul.w	r3, r3, r1
 8008982:	4413      	add	r3, r2
 8008984:	3390      	adds	r3, #144	; 0x90
 8008986:	2201      	movs	r2, #1
 8008988:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008990:	4619      	mov	r1, r3
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	2334      	movs	r3, #52	; 0x34
 8008996:	fb03 f301 	mul.w	r3, r3, r1
 800899a:	4413      	add	r3, r2
 800899c:	3391      	adds	r3, #145	; 0x91
 800899e:	2202      	movs	r2, #2
 80089a0:	701a      	strb	r2, [r3, #0]
            break;
 80089a2:	e01e      	b.n	80089e2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089aa:	3301      	adds	r3, #1
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80089b4:	e016      	b.n	80089e4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	2201      	movs	r2, #1
 80089c2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80089ca:	2102      	movs	r1, #2
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	4798      	blx	r3
      break;
 80089d0:	e00c      	b.n	80089ec <USBH_MSC_Process+0x514>
            break;
 80089d2:	bf00      	nop
 80089d4:	e00a      	b.n	80089ec <USBH_MSC_Process+0x514>
            break;
 80089d6:	bf00      	nop
 80089d8:	e008      	b.n	80089ec <USBH_MSC_Process+0x514>
            break;
 80089da:	bf00      	nop
 80089dc:	e006      	b.n	80089ec <USBH_MSC_Process+0x514>
            break;
 80089de:	bf00      	nop
 80089e0:	e004      	b.n	80089ec <USBH_MSC_Process+0x514>
            break;
 80089e2:	bf00      	nop
      break;
 80089e4:	e002      	b.n	80089ec <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	75fb      	strb	r3, [r7, #23]
      break;
 80089ea:	bf00      	nop
  }
  return error;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop

080089f8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bc80      	pop	{r7}
 8008a0a:	4770      	bx	lr

08008a0c <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af02      	add	r7, sp, #8
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008a22:	2301      	movs	r3, #1
 8008a24:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008a26:	2301      	movs	r3, #1
 8008a28:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	2134      	movs	r1, #52	; 0x34
 8008a30:	fb01 f303 	mul.w	r3, r1, r3
 8008a34:	4413      	add	r3, r2
 8008a36:	3390      	adds	r3, #144	; 0x90
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b07      	cmp	r3, #7
 8008a3c:	d03c      	beq.n	8008ab8 <USBH_MSC_RdWrProcess+0xac>
 8008a3e:	2b07      	cmp	r3, #7
 8008a40:	f300 80a7 	bgt.w	8008b92 <USBH_MSC_RdWrProcess+0x186>
 8008a44:	2b05      	cmp	r3, #5
 8008a46:	d06c      	beq.n	8008b22 <USBH_MSC_RdWrProcess+0x116>
 8008a48:	2b06      	cmp	r3, #6
 8008a4a:	f040 80a2 	bne.w	8008b92 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008a4e:	78f9      	ldrb	r1, [r7, #3]
 8008a50:	2300      	movs	r3, #0
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	2300      	movs	r3, #0
 8008a56:	2200      	movs	r2, #0
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fea4 	bl	80097a6 <USBH_MSC_SCSI_Read>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10b      	bne.n	8008a80 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	2134      	movs	r1, #52	; 0x34
 8008a6e:	fb01 f303 	mul.w	r3, r1, r3
 8008a72:	4413      	add	r3, r2
 8008a74:	3390      	adds	r3, #144	; 0x90
 8008a76:	2201      	movs	r2, #1
 8008a78:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008a7e:	e08a      	b.n	8008b96 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d109      	bne.n	8008a9a <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008a86:	78fb      	ldrb	r3, [r7, #3]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	2134      	movs	r1, #52	; 0x34
 8008a8c:	fb01 f303 	mul.w	r3, r1, r3
 8008a90:	4413      	add	r3, r2
 8008a92:	3390      	adds	r3, #144	; 0x90
 8008a94:	2205      	movs	r2, #5
 8008a96:	701a      	strb	r2, [r3, #0]
      break;
 8008a98:	e07d      	b.n	8008b96 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	2b04      	cmp	r3, #4
 8008a9e:	d17a      	bne.n	8008b96 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	2134      	movs	r1, #52	; 0x34
 8008aa6:	fb01 f303 	mul.w	r3, r1, r3
 8008aaa:	4413      	add	r3, r2
 8008aac:	3390      	adds	r3, #144	; 0x90
 8008aae:	2208      	movs	r2, #8
 8008ab0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ab6:	e06e      	b.n	8008b96 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008ab8:	78f9      	ldrb	r1, [r7, #3]
 8008aba:	2300      	movs	r3, #0
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fe04 	bl	80096d0 <USBH_MSC_SCSI_Write>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10b      	bne.n	8008aea <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008ad2:	78fb      	ldrb	r3, [r7, #3]
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	2134      	movs	r1, #52	; 0x34
 8008ad8:	fb01 f303 	mul.w	r3, r1, r3
 8008adc:	4413      	add	r3, r2
 8008ade:	3390      	adds	r3, #144	; 0x90
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ae8:	e057      	b.n	8008b9a <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d109      	bne.n	8008b04 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	2134      	movs	r1, #52	; 0x34
 8008af6:	fb01 f303 	mul.w	r3, r1, r3
 8008afa:	4413      	add	r3, r2
 8008afc:	3390      	adds	r3, #144	; 0x90
 8008afe:	2205      	movs	r2, #5
 8008b00:	701a      	strb	r2, [r3, #0]
      break;
 8008b02:	e04a      	b.n	8008b9a <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d147      	bne.n	8008b9a <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	2134      	movs	r1, #52	; 0x34
 8008b10:	fb01 f303 	mul.w	r3, r1, r3
 8008b14:	4413      	add	r3, r2
 8008b16:	3390      	adds	r3, #144	; 0x90
 8008b18:	2208      	movs	r2, #8
 8008b1a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b20:	e03b      	b.n	8008b9a <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008b22:	78fb      	ldrb	r3, [r7, #3]
 8008b24:	2234      	movs	r2, #52	; 0x34
 8008b26:	fb02 f303 	mul.w	r3, r2, r3
 8008b2a:	3398      	adds	r3, #152	; 0x98
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4413      	add	r3, r2
 8008b30:	1d1a      	adds	r2, r3, #4
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	4619      	mov	r1, r3
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fd51 	bl	80095de <USBH_MSC_SCSI_RequestSense>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d113      	bne.n	8008b6e <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008b46:	78fb      	ldrb	r3, [r7, #3]
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	2134      	movs	r1, #52	; 0x34
 8008b4c:	fb01 f303 	mul.w	r3, r1, r3
 8008b50:	4413      	add	r3, r2
 8008b52:	3390      	adds	r3, #144	; 0x90
 8008b54:	2201      	movs	r2, #1
 8008b56:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008b58:	78fb      	ldrb	r3, [r7, #3]
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	2134      	movs	r1, #52	; 0x34
 8008b5e:	fb01 f303 	mul.w	r3, r1, r3
 8008b62:	4413      	add	r3, r2
 8008b64:	3391      	adds	r3, #145	; 0x91
 8008b66:	2202      	movs	r2, #2
 8008b68:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d014      	beq.n	8008b9e <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d111      	bne.n	8008b9e <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008b7a:	78fb      	ldrb	r3, [r7, #3]
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	2134      	movs	r1, #52	; 0x34
 8008b80:	fb01 f303 	mul.w	r3, r1, r3
 8008b84:	4413      	add	r3, r2
 8008b86:	3390      	adds	r3, #144	; 0x90
 8008b88:	2208      	movs	r2, #8
 8008b8a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008b90:	e005      	b.n	8008b9e <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8008b92:	bf00      	nop
 8008b94:	e004      	b.n	8008ba0 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008b96:	bf00      	nop
 8008b98:	e002      	b.n	8008ba0 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008b9a:	bf00      	nop
 8008b9c:	e000      	b.n	8008ba0 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008b9e:	bf00      	nop

  }
  return error;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b085      	sub	sp, #20
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b0b      	cmp	r3, #11
 8008bc8:	d10c      	bne.n	8008be4 <USBH_MSC_UnitIsReady+0x3a>
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	2134      	movs	r1, #52	; 0x34
 8008bd0:	fb01 f303 	mul.w	r3, r1, r3
 8008bd4:	4413      	add	r3, r2
 8008bd6:	3391      	adds	r3, #145	; 0x91
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d102      	bne.n	8008be4 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008bde:	2301      	movs	r3, #1
 8008be0:	73fb      	strb	r3, [r7, #15]
 8008be2:	e001      	b.n	8008be8 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr

08008bf4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b0b      	cmp	r3, #11
 8008c14:	d10d      	bne.n	8008c32 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008c16:	7afb      	ldrb	r3, [r7, #11]
 8008c18:	2234      	movs	r2, #52	; 0x34
 8008c1a:	fb02 f303 	mul.w	r3, r2, r3
 8008c1e:	3390      	adds	r3, #144	; 0x90
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	4413      	add	r3, r2
 8008c24:	2234      	movs	r2, #52	; 0x34
 8008c26:	4619      	mov	r1, r3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f005 fba9 	bl	800e380 <memcpy>
    return USBH_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e000      	b.n	8008c34 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008c32:	2302      	movs	r3, #2
  }
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af02      	add	r7, sp, #8
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	607a      	str	r2, [r7, #4]
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00e      	beq.n	8008c80 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008c68:	2b0b      	cmp	r3, #11
 8008c6a:	d109      	bne.n	8008c80 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008c6c:	7afb      	ldrb	r3, [r7, #11]
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	2134      	movs	r1, #52	; 0x34
 8008c72:	fb01 f303 	mul.w	r3, r1, r3
 8008c76:	4413      	add	r3, r2
 8008c78:	3390      	adds	r3, #144	; 0x90
 8008c7a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d001      	beq.n	8008c84 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008c80:	2302      	movs	r3, #2
 8008c82:	e040      	b.n	8008d06 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2206      	movs	r2, #6
 8008c88:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008c8a:	7afb      	ldrb	r3, [r7, #11]
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	2134      	movs	r1, #52	; 0x34
 8008c90:	fb01 f303 	mul.w	r3, r1, r3
 8008c94:	4413      	add	r3, r2
 8008c96:	3390      	adds	r3, #144	; 0x90
 8008c98:	2206      	movs	r2, #6
 8008c9a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008c9c:	7afb      	ldrb	r3, [r7, #11]
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008ca6:	7af9      	ldrb	r1, [r7, #11]
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 fd78 	bl	80097a6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8008cbc:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008cbe:	e016      	b.n	8008cee <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	1ad2      	subs	r2, r2, r3
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	f242 7110 	movw	r1, #10000	; 0x2710
 8008cd0:	fb01 f303 	mul.w	r3, r1, r3
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d805      	bhi.n	8008ce4 <USBH_MSC_Read+0xa8>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d104      	bne.n	8008cee <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008cea:	2302      	movs	r3, #2
 8008cec:	e00b      	b.n	8008d06 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008cee:	7afb      	ldrb	r3, [r7, #11]
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f7ff fe8a 	bl	8008a0c <USBH_MSC_RdWrProcess>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d0e0      	beq.n	8008cc0 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2201      	movs	r2, #1
 8008d02:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b088      	sub	sp, #32
 8008d12:	af02      	add	r7, sp, #8
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	607a      	str	r2, [r7, #4]
 8008d18:	603b      	str	r3, [r7, #0]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00e      	beq.n	8008d52 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008d3a:	2b0b      	cmp	r3, #11
 8008d3c:	d109      	bne.n	8008d52 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008d3e:	7afb      	ldrb	r3, [r7, #11]
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	2134      	movs	r1, #52	; 0x34
 8008d44:	fb01 f303 	mul.w	r3, r1, r3
 8008d48:	4413      	add	r3, r2
 8008d4a:	3390      	adds	r3, #144	; 0x90
 8008d4c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d001      	beq.n	8008d56 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008d52:	2302      	movs	r3, #2
 8008d54:	e040      	b.n	8008dd8 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2207      	movs	r2, #7
 8008d5a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008d5c:	7afb      	ldrb	r3, [r7, #11]
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	2134      	movs	r1, #52	; 0x34
 8008d62:	fb01 f303 	mul.w	r3, r1, r3
 8008d66:	4413      	add	r3, r2
 8008d68:	3390      	adds	r3, #144	; 0x90
 8008d6a:	2207      	movs	r2, #7
 8008d6c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008d6e:	7afb      	ldrb	r3, [r7, #11]
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008d78:	7af9      	ldrb	r1, [r7, #11]
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 fca4 	bl	80096d0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8008d8e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008d90:	e016      	b.n	8008dc0 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	1ad2      	subs	r2, r2, r3
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	f242 7110 	movw	r1, #10000	; 0x2710
 8008da2:	fb01 f303 	mul.w	r3, r1, r3
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d805      	bhi.n	8008db6 <USBH_MSC_Write+0xa8>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d104      	bne.n	8008dc0 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2201      	movs	r2, #1
 8008dba:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e00b      	b.n	8008dd8 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008dc0:	7afb      	ldrb	r3, [r7, #11]
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f7ff fe21 	bl	8008a0c <USBH_MSC_RdWrProcess>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d0e0      	beq.n	8008d92 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2221      	movs	r2, #33	; 0x21
 8008dec:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	22ff      	movs	r2, #255	; 0xff
 8008df2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8008e06:	2200      	movs	r2, #0
 8008e08:	2100      	movs	r1, #0
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f001 fc92 	bl	800a734 <USBH_CtlReq>
 8008e10:	4603      	mov	r3, r0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b082      	sub	sp, #8
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	22a1      	movs	r2, #161	; 0xa1
 8008e28:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	22fe      	movs	r2, #254	; 0xfe
 8008e2e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008e42:	2201      	movs	r2, #1
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 fc74 	bl	800a734 <USBH_CtlReq>
 8008e4c:	4603      	mov	r3, r0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4a09      	ldr	r2, [pc, #36]	; (8008e94 <USBH_MSC_BOT_Init+0x3c>)
 8008e6e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4a09      	ldr	r2, [pc, #36]	; (8008e98 <USBH_MSC_BOT_Init+0x40>)
 8008e74:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bc80      	pop	{r7}
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	43425355 	.word	0x43425355
 8008e98:	20304050 	.word	0x20304050

08008e9c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af02      	add	r7, sp, #8
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008eac:	2301      	movs	r3, #1
 8008eae:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	2b0a      	cmp	r3, #10
 8008ed0:	f200 819e 	bhi.w	8009210 <USBH_MSC_BOT_Process+0x374>
 8008ed4:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <USBH_MSC_BOT_Process+0x40>)
 8008ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eda:	bf00      	nop
 8008edc:	08008f09 	.word	0x08008f09
 8008ee0:	08008f31 	.word	0x08008f31
 8008ee4:	08008f9b 	.word	0x08008f9b
 8008ee8:	08008fb9 	.word	0x08008fb9
 8008eec:	0800903d 	.word	0x0800903d
 8008ef0:	0800905f 	.word	0x0800905f
 8008ef4:	080090f7 	.word	0x080090f7
 8008ef8:	08009113 	.word	0x08009113
 8008efc:	08009165 	.word	0x08009165
 8008f00:	08009195 	.word	0x08009195
 8008f04:	080091f7 	.word	0x080091f7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	78fa      	ldrb	r2, [r7, #3]
 8008f0c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	2202      	movs	r2, #2
 8008f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	795b      	ldrb	r3, [r3, #5]
 8008f22:	2201      	movs	r2, #1
 8008f24:	9200      	str	r2, [sp, #0]
 8008f26:	221f      	movs	r2, #31
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f001 fe12 	bl	800ab52 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008f2e:	e17e      	b.n	800922e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	795b      	ldrb	r3, [r3, #5]
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f005 f90c 	bl	800e154 <USBH_LL_GetURBState>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008f40:	7d3b      	ldrb	r3, [r7, #20]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d118      	bne.n	8008f78 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00f      	beq.n	8008f6e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008f54:	b25b      	sxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	da04      	bge.n	8008f64 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	2203      	movs	r2, #3
 8008f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f62:	e157      	b.n	8009214 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	2205      	movs	r2, #5
 8008f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008f6c:	e152      	b.n	8009214 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2207      	movs	r2, #7
 8008f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008f76:	e14d      	b.n	8009214 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f78:	7d3b      	ldrb	r3, [r7, #20]
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d104      	bne.n	8008f88 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008f86:	e145      	b.n	8009214 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8008f88:	7d3b      	ldrb	r3, [r7, #20]
 8008f8a:	2b05      	cmp	r3, #5
 8008f8c:	f040 8142 	bne.w	8009214 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	220a      	movs	r2, #10
 8008f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008f98:	e13c      	b.n	8009214 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	895a      	ldrh	r2, [r3, #10]
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	791b      	ldrb	r3, [r3, #4]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 fdf7 	bl	800ab9c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8008fb6:	e13a      	b.n	800922e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	791b      	ldrb	r3, [r3, #4]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f005 f8c8 	bl	800e154 <USBH_LL_GetURBState>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008fc8:	7d3b      	ldrb	r3, [r7, #20]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d12d      	bne.n	800902a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	8952      	ldrh	r2, [r2, #10]
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d910      	bls.n	8008ffc <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	8952      	ldrh	r2, [r2, #10]
 8008fe4:	441a      	add	r2, r3
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	8952      	ldrh	r2, [r2, #10]
 8008ff4:	1a9a      	subs	r2, r3, r2
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ffa:	e002      	b.n	8009002 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2200      	movs	r2, #0
 8009000:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	895a      	ldrh	r2, [r3, #10]
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	791b      	ldrb	r3, [r3, #4]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 fdbf 	bl	800ab9c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800901e:	e0fb      	b.n	8009218 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2207      	movs	r2, #7
 8009024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009028:	e0f6      	b.n	8009218 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800902a:	7d3b      	ldrb	r3, [r7, #20]
 800902c:	2b05      	cmp	r3, #5
 800902e:	f040 80f3 	bne.w	8009218 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	2209      	movs	r2, #9
 8009036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800903a:	e0ed      	b.n	8009218 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	891a      	ldrh	r2, [r3, #8]
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	795b      	ldrb	r3, [r3, #5]
 800904a:	2001      	movs	r0, #1
 800904c:	9000      	str	r0, [sp, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f001 fd7f 	bl	800ab52 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	2206      	movs	r2, #6
 8009058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800905c:	e0e7      	b.n	800922e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	795b      	ldrb	r3, [r3, #5]
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f005 f875 	bl	800e154 <USBH_LL_GetURBState>
 800906a:	4603      	mov	r3, r0
 800906c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800906e:	7d3b      	ldrb	r3, [r7, #20]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d12f      	bne.n	80090d4 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	8912      	ldrh	r2, [r2, #8]
 800907c:	4293      	cmp	r3, r2
 800907e:	d910      	bls.n	80090a2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	8912      	ldrh	r2, [r2, #8]
 800908a:	441a      	add	r2, r3
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	8912      	ldrh	r2, [r2, #8]
 800909a:	1a9a      	subs	r2, r3, r2
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	65da      	str	r2, [r3, #92]	; 0x5c
 80090a0:	e002      	b.n	80090a8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	2200      	movs	r2, #0
 80090a6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00c      	beq.n	80090ca <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	891a      	ldrh	r2, [r3, #8]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	795b      	ldrb	r3, [r3, #5]
 80090be:	2001      	movs	r0, #1
 80090c0:	9000      	str	r0, [sp, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f001 fd45 	bl	800ab52 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80090c8:	e0a8      	b.n	800921c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2207      	movs	r2, #7
 80090ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80090d2:	e0a3      	b.n	800921c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80090d4:	7d3b      	ldrb	r3, [r7, #20]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d104      	bne.n	80090e4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	2205      	movs	r2, #5
 80090de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80090e2:	e09b      	b.n	800921c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80090e4:	7d3b      	ldrb	r3, [r7, #20]
 80090e6:	2b05      	cmp	r3, #5
 80090e8:	f040 8098 	bne.w	800921c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	220a      	movs	r2, #10
 80090f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80090f4:	e092      	b.n	800921c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	791b      	ldrb	r3, [r3, #4]
 8009100:	220d      	movs	r2, #13
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f001 fd4a 	bl	800ab9c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	2208      	movs	r2, #8
 800910c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009110:	e08d      	b.n	800922e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	791b      	ldrb	r3, [r3, #4]
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f005 f81b 	bl	800e154 <USBH_LL_GetURBState>
 800911e:	4603      	mov	r3, r0
 8009120:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009122:	7d3b      	ldrb	r3, [r7, #20]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d115      	bne.n	8009154 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f8a9 	bl	8009290 <USBH_MSC_DecodeCSW>
 800913e:	4603      	mov	r3, r0
 8009140:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009142:	7d7b      	ldrb	r3, [r7, #21]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d102      	bne.n	800914e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800914c:	e068      	b.n	8009220 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800914e:	2302      	movs	r3, #2
 8009150:	75fb      	strb	r3, [r7, #23]
      break;
 8009152:	e065      	b.n	8009220 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009154:	7d3b      	ldrb	r3, [r7, #20]
 8009156:	2b05      	cmp	r3, #5
 8009158:	d162      	bne.n	8009220 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	2209      	movs	r2, #9
 800915e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009162:	e05d      	b.n	8009220 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	2200      	movs	r2, #0
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f864 	bl	8009238 <USBH_MSC_BOT_Abort>
 8009170:	4603      	mov	r3, r0
 8009172:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009174:	7dbb      	ldrb	r3, [r7, #22]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d104      	bne.n	8009184 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	2207      	movs	r2, #7
 800917e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009182:	e04f      	b.n	8009224 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009184:	7dbb      	ldrb	r3, [r7, #22]
 8009186:	2b04      	cmp	r3, #4
 8009188:	d14c      	bne.n	8009224 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	220b      	movs	r2, #11
 800918e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009192:	e047      	b.n	8009224 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	2201      	movs	r2, #1
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f84c 	bl	8009238 <USBH_MSC_BOT_Abort>
 80091a0:	4603      	mov	r3, r0
 80091a2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80091a4:	7dbb      	ldrb	r3, [r7, #22]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d11d      	bne.n	80091e6 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	795b      	ldrb	r3, [r3, #5]
 80091ae:	4619      	mov	r1, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f005 f828 	bl	800e206 <USBH_LL_GetToggle>
 80091b6:	4603      	mov	r3, r0
 80091b8:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	7959      	ldrb	r1, [r3, #5]
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	f1c3 0301 	rsb	r3, r3, #1
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	461a      	mov	r2, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f004 ffed 	bl	800e1a8 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	791b      	ldrb	r3, [r3, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f004 ffe6 	bl	800e1a8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	2209      	movs	r2, #9
 80091e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80091e4:	e020      	b.n	8009228 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80091e6:	7dbb      	ldrb	r3, [r7, #22]
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	d11d      	bne.n	8009228 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	220b      	movs	r2, #11
 80091f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80091f4:	e018      	b.n	8009228 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7ff fdf2 	bl	8008de0 <USBH_MSC_BOT_REQ_Reset>
 80091fc:	4603      	mov	r3, r0
 80091fe:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009200:	7dfb      	ldrb	r3, [r7, #23]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d112      	bne.n	800922c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800920e:	e00d      	b.n	800922c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009210:	bf00      	nop
 8009212:	e00c      	b.n	800922e <USBH_MSC_BOT_Process+0x392>
      break;
 8009214:	bf00      	nop
 8009216:	e00a      	b.n	800922e <USBH_MSC_BOT_Process+0x392>
      break;
 8009218:	bf00      	nop
 800921a:	e008      	b.n	800922e <USBH_MSC_BOT_Process+0x392>
      break;
 800921c:	bf00      	nop
 800921e:	e006      	b.n	800922e <USBH_MSC_BOT_Process+0x392>
      break;
 8009220:	bf00      	nop
 8009222:	e004      	b.n	800922e <USBH_MSC_BOT_Process+0x392>
      break;
 8009224:	bf00      	nop
 8009226:	e002      	b.n	800922e <USBH_MSC_BOT_Process+0x392>
      break;
 8009228:	bf00      	nop
 800922a:	e000      	b.n	800922e <USBH_MSC_BOT_Process+0x392>
      break;
 800922c:	bf00      	nop
  }
  return status;
 800922e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3718      	adds	r7, #24
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	70fb      	strb	r3, [r7, #3]
 8009244:	4613      	mov	r3, r2
 8009246:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009248:	2302      	movs	r3, #2
 800924a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009252:	69db      	ldr	r3, [r3, #28]
 8009254:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009256:	78bb      	ldrb	r3, [r7, #2]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <USBH_MSC_BOT_Abort+0x2a>
 800925c:	2b01      	cmp	r3, #1
 800925e:	d009      	beq.n	8009274 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009260:	e011      	b.n	8009286 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	79db      	ldrb	r3, [r3, #7]
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f001 f888 	bl	800a37e <USBH_ClrFeature>
 800926e:	4603      	mov	r3, r0
 8009270:	73fb      	strb	r3, [r7, #15]
      break;
 8009272:	e008      	b.n	8009286 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	799b      	ldrb	r3, [r3, #6]
 8009278:	4619      	mov	r1, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f001 f87f 	bl	800a37e <USBH_ClrFeature>
 8009280:	4603      	mov	r3, r0
 8009282:	73fb      	strb	r3, [r7, #15]
      break;
 8009284:	bf00      	nop
  }
  return status;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80092a2:	2301      	movs	r3, #1
 80092a4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	791b      	ldrb	r3, [r3, #4]
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f004 febf 	bl	800e030 <USBH_LL_GetLastXferSize>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b0d      	cmp	r3, #13
 80092b6:	d002      	beq.n	80092be <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80092b8:	2302      	movs	r3, #2
 80092ba:	73fb      	strb	r3, [r7, #15]
 80092bc:	e024      	b.n	8009308 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092c2:	4a14      	ldr	r2, [pc, #80]	; (8009314 <USBH_MSC_DecodeCSW+0x84>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d11d      	bne.n	8009304 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d119      	bne.n	8009308 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d102      	bne.n	80092e4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]
 80092e2:	e011      	b.n	8009308 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d102      	bne.n	80092f4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80092ee:	2301      	movs	r3, #1
 80092f0:	73fb      	strb	r3, [r7, #15]
 80092f2:	e009      	b.n	8009308 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d104      	bne.n	8009308 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80092fe:	2302      	movs	r3, #2
 8009300:	73fb      	strb	r3, [r7, #15]
 8009302:	e001      	b.n	8009308 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009304:	2302      	movs	r3, #2
 8009306:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009308:	7bfb      	ldrb	r3, [r7, #15]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	53425355 	.word	0x53425355

08009318 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009324:	2302      	movs	r3, #2
 8009326:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009338:	2b01      	cmp	r3, #1
 800933a:	d002      	beq.n	8009342 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800933c:	2b02      	cmp	r3, #2
 800933e:	d021      	beq.n	8009384 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009340:	e028      	b.n	8009394 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	2200      	movs	r2, #0
 8009346:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	220a      	movs	r2, #10
 8009354:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	3363      	adds	r3, #99	; 0x63
 800935c:	2210      	movs	r2, #16
 800935e:	2100      	movs	r1, #0
 8009360:	4618      	mov	r0, r3
 8009362:	f005 f81b 	bl	800e39c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2202      	movs	r2, #2
 800937a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800937e:	2301      	movs	r3, #1
 8009380:	73fb      	strb	r3, [r7, #15]
      break;
 8009382:	e007      	b.n	8009394 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff fd87 	bl	8008e9c <USBH_MSC_BOT_Process>
 800938e:	4603      	mov	r3, r0
 8009390:	73fb      	strb	r3, [r7, #15]
      break;
 8009392:	bf00      	nop
  }

  return error;
 8009394:	7bfb      	ldrb	r3, [r7, #15]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b086      	sub	sp, #24
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	60f8      	str	r0, [r7, #12]
 80093a6:	460b      	mov	r3, r1
 80093a8:	607a      	str	r2, [r7, #4]
 80093aa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80093ac:	2301      	movs	r3, #1
 80093ae:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80093b6:	69db      	ldr	r3, [r3, #28]
 80093b8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d002      	beq.n	80093ca <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d027      	beq.n	8009418 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80093c8:	e05f      	b.n	800948a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	2208      	movs	r2, #8
 80093ce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	2280      	movs	r2, #128	; 0x80
 80093d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	220a      	movs	r2, #10
 80093dc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	3363      	adds	r3, #99	; 0x63
 80093e4:	2210      	movs	r2, #16
 80093e6:	2100      	movs	r1, #0
 80093e8:	4618      	mov	r0, r3
 80093ea:	f004 ffd7 	bl	800e39c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	2225      	movs	r2, #37	; 0x25
 80093f2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	2202      	movs	r2, #2
 8009402:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	f103 0210 	add.w	r2, r3, #16
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009412:	2301      	movs	r3, #1
 8009414:	75fb      	strb	r3, [r7, #23]
      break;
 8009416:	e038      	b.n	800948a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009418:	7afb      	ldrb	r3, [r7, #11]
 800941a:	4619      	mov	r1, r3
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7ff fd3d 	bl	8008e9c <USBH_MSC_BOT_Process>
 8009422:	4603      	mov	r3, r0
 8009424:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009426:	7dfb      	ldrb	r3, [r7, #23]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d12d      	bne.n	8009488 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009432:	3303      	adds	r3, #3
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800943e:	3302      	adds	r3, #2
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	021b      	lsls	r3, r3, #8
 8009444:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800944c:	3301      	adds	r3, #1
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009452:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	061b      	lsls	r3, r3, #24
 800945e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800946a:	3307      	adds	r3, #7
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	b29a      	uxth	r2, r3
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009476:	3306      	adds	r3, #6
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	b29b      	uxth	r3, r3
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	b29b      	uxth	r3, r3
 8009480:	4313      	orrs	r3, r2
 8009482:	b29a      	uxth	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	809a      	strh	r2, [r3, #4]
      break;
 8009488:	bf00      	nop
  }

  return error;
 800948a:	7dfb      	ldrb	r3, [r7, #23]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	460b      	mov	r3, r1
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80094a2:	2302      	movs	r3, #2
 80094a4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d002      	beq.n	80094c0 <USBH_MSC_SCSI_Inquiry+0x2c>
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d03d      	beq.n	800953a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80094be:	e089      	b.n	80095d4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	2224      	movs	r2, #36	; 0x24
 80094c4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	2280      	movs	r2, #128	; 0x80
 80094ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	220a      	movs	r2, #10
 80094d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	3363      	adds	r3, #99	; 0x63
 80094da:	220a      	movs	r2, #10
 80094dc:	2100      	movs	r1, #0
 80094de:	4618      	mov	r0, r3
 80094e0:	f004 ff5c 	bl	800e39c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	2212      	movs	r2, #18
 80094e8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80094ec:	7afb      	ldrb	r3, [r7, #11]
 80094ee:	015b      	lsls	r3, r3, #5
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	2224      	movs	r2, #36	; 0x24
 800950c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	2202      	movs	r2, #2
 8009524:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	f103 0210 	add.w	r2, r3, #16
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009534:	2301      	movs	r3, #1
 8009536:	75fb      	strb	r3, [r7, #23]
      break;
 8009538:	e04c      	b.n	80095d4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800953a:	7afb      	ldrb	r3, [r7, #11]
 800953c:	4619      	mov	r1, r3
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f7ff fcac 	bl	8008e9c <USBH_MSC_BOT_Process>
 8009544:	4603      	mov	r3, r0
 8009546:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d141      	bne.n	80095d2 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800954e:	2222      	movs	r2, #34	; 0x22
 8009550:	2100      	movs	r1, #0
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f004 ff22 	bl	800e39c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	f003 031f 	and.w	r3, r3, #31
 8009564:	b2da      	uxtb	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	095b      	lsrs	r3, r3, #5
 8009574:	b2da      	uxtb	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009580:	3301      	adds	r3, #1
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	b25b      	sxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	da03      	bge.n	8009592 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	709a      	strb	r2, [r3, #2]
 8009590:	e002      	b.n	8009598 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	1cd8      	adds	r0, r3, #3
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095a2:	3308      	adds	r3, #8
 80095a4:	2208      	movs	r2, #8
 80095a6:	4619      	mov	r1, r3
 80095a8:	f004 feea 	bl	800e380 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f103 000c 	add.w	r0, r3, #12
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095b8:	3310      	adds	r3, #16
 80095ba:	2210      	movs	r2, #16
 80095bc:	4619      	mov	r1, r3
 80095be:	f004 fedf 	bl	800e380 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	331d      	adds	r3, #29
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80095cc:	3220      	adds	r2, #32
 80095ce:	6812      	ldr	r2, [r2, #0]
 80095d0:	601a      	str	r2, [r3, #0]
      break;
 80095d2:	bf00      	nop
  }

  return error;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b086      	sub	sp, #24
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	460b      	mov	r3, r1
 80095e8:	607a      	str	r2, [r7, #4]
 80095ea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80095ec:	2302      	movs	r3, #2
 80095ee:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80095f6:	69db      	ldr	r3, [r3, #28]
 80095f8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009600:	2b01      	cmp	r3, #1
 8009602:	d002      	beq.n	800960a <USBH_MSC_SCSI_RequestSense+0x2c>
 8009604:	2b02      	cmp	r3, #2
 8009606:	d03d      	beq.n	8009684 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009608:	e05d      	b.n	80096c6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	220e      	movs	r2, #14
 800960e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	2280      	movs	r2, #128	; 0x80
 8009614:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	220a      	movs	r2, #10
 800961c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	3363      	adds	r3, #99	; 0x63
 8009624:	2210      	movs	r2, #16
 8009626:	2100      	movs	r1, #0
 8009628:	4618      	mov	r0, r3
 800962a:	f004 feb7 	bl	800e39c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	2203      	movs	r2, #3
 8009632:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009636:	7afb      	ldrb	r3, [r7, #11]
 8009638:	015b      	lsls	r3, r3, #5
 800963a:	b2da      	uxtb	r2, r3
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	220e      	movs	r2, #14
 8009656:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	2202      	movs	r2, #2
 800966e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f103 0210 	add.w	r2, r3, #16
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800967e:	2301      	movs	r3, #1
 8009680:	75fb      	strb	r3, [r7, #23]
      break;
 8009682:	e020      	b.n	80096c6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009684:	7afb      	ldrb	r3, [r7, #11]
 8009686:	4619      	mov	r1, r3
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f7ff fc07 	bl	8008e9c <USBH_MSC_BOT_Process>
 800968e:	4603      	mov	r3, r0
 8009690:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009692:	7dfb      	ldrb	r3, [r7, #23]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d115      	bne.n	80096c4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800969e:	3302      	adds	r3, #2
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	f003 030f 	and.w	r3, r3, #15
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096b2:	7b1a      	ldrb	r2, [r3, #12]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096be:	7b5a      	ldrb	r2, [r3, #13]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	709a      	strb	r2, [r3, #2]
      break;
 80096c4:	bf00      	nop
  }

  return error;
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	607a      	str	r2, [r7, #4]
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	460b      	mov	r3, r1
 80096de:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80096e0:	2302      	movs	r3, #2
 80096e2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d002      	beq.n	80096fe <USBH_MSC_SCSI_Write+0x2e>
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d047      	beq.n	800978c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80096fc:	e04e      	b.n	800979c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009704:	461a      	mov	r2, r3
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	fb03 f202 	mul.w	r2, r3, r2
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	220a      	movs	r2, #10
 800971c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	3363      	adds	r3, #99	; 0x63
 8009724:	2210      	movs	r2, #16
 8009726:	2100      	movs	r1, #0
 8009728:	4618      	mov	r0, r3
 800972a:	f004 fe37 	bl	800e39c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	222a      	movs	r2, #42	; 0x2a
 8009732:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009736:	79fa      	ldrb	r2, [r7, #7]
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800973e:	79ba      	ldrb	r2, [r7, #6]
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009746:	797a      	ldrb	r2, [r7, #5]
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800974e:	1d3b      	adds	r3, r7, #4
 8009750:	781a      	ldrb	r2, [r3, #0]
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009758:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009762:	f107 0320 	add.w	r3, r7, #32
 8009766:	781a      	ldrb	r2, [r3, #0]
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2202      	movs	r2, #2
 800977a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009786:	2301      	movs	r3, #1
 8009788:	75fb      	strb	r3, [r7, #23]
      break;
 800978a:	e007      	b.n	800979c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800978c:	7afb      	ldrb	r3, [r7, #11]
 800978e:	4619      	mov	r1, r3
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7ff fb83 	bl	8008e9c <USBH_MSC_BOT_Process>
 8009796:	4603      	mov	r3, r0
 8009798:	75fb      	strb	r3, [r7, #23]
      break;
 800979a:	bf00      	nop
  }

  return error;
 800979c:	7dfb      	ldrb	r3, [r7, #23]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3718      	adds	r7, #24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b086      	sub	sp, #24
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	603b      	str	r3, [r7, #0]
 80097b2:	460b      	mov	r3, r1
 80097b4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80097b6:	2302      	movs	r3, #2
 80097b8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d002      	beq.n	80097d4 <USBH_MSC_SCSI_Read+0x2e>
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d047      	beq.n	8009862 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80097d2:	e04e      	b.n	8009872 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80097da:	461a      	mov	r2, r3
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	fb03 f202 	mul.w	r2, r3, r2
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	2280      	movs	r2, #128	; 0x80
 80097ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	220a      	movs	r2, #10
 80097f2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	3363      	adds	r3, #99	; 0x63
 80097fa:	2210      	movs	r2, #16
 80097fc:	2100      	movs	r1, #0
 80097fe:	4618      	mov	r0, r3
 8009800:	f004 fdcc 	bl	800e39c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	2228      	movs	r2, #40	; 0x28
 8009808:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800980c:	79fa      	ldrb	r2, [r7, #7]
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009814:	79ba      	ldrb	r2, [r7, #6]
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800981c:	797a      	ldrb	r2, [r7, #5]
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009824:	1d3b      	adds	r3, r7, #4
 8009826:	781a      	ldrb	r2, [r3, #0]
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800982e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009838:	f107 0320 	add.w	r3, r7, #32
 800983c:	781a      	ldrb	r2, [r3, #0]
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800985c:	2301      	movs	r3, #1
 800985e:	75fb      	strb	r3, [r7, #23]
      break;
 8009860:	e007      	b.n	8009872 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009862:	7afb      	ldrb	r3, [r7, #11]
 8009864:	4619      	mov	r1, r3
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f7ff fb18 	bl	8008e9c <USBH_MSC_BOT_Process>
 800986c:	4603      	mov	r3, r0
 800986e:	75fb      	strb	r3, [r7, #23]
      break;
 8009870:	bf00      	nop
  }

  return error;
 8009872:	7dfb      	ldrb	r3, [r7, #23]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	4613      	mov	r3, r2
 8009888:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009890:	2302      	movs	r3, #2
 8009892:	e029      	b.n	80098e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	79fa      	ldrb	r2, [r7, #7]
 8009898:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 f81f 	bl	80098f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d003      	beq.n	80098e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f004 faf1 	bl	800dec8 <USBH_LL_Init>

  return USBH_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80098fc:	2300      	movs	r3, #0
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	e008      	b.n	8009914 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	32e0      	adds	r2, #224	; 0xe0
 8009908:	2100      	movs	r1, #0
 800990a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3301      	adds	r3, #1
 8009912:	60fb      	str	r3, [r7, #12]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2b0e      	cmp	r3, #14
 8009918:	d9f3      	bls.n	8009902 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800991a:	2300      	movs	r3, #0
 800991c:	60fb      	str	r3, [r7, #12]
 800991e:	e009      	b.n	8009934 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4413      	add	r3, r2
 8009926:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800992a:	2200      	movs	r2, #0
 800992c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3301      	adds	r3, #1
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800993a:	d3f1      	bcc.n	8009920 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2240      	movs	r2, #64	; 0x40
 8009960:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	bc80      	pop	{r7}
 8009982:	4770      	bx	lr

08009984 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d017      	beq.n	80099c8 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10f      	bne.n	80099c2 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099a8:	1c59      	adds	r1, r3, #1
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	33dc      	adds	r3, #220	; 0xdc
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	73fb      	strb	r3, [r7, #15]
 80099c0:	e004      	b.n	80099cc <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80099c2:	2302      	movs	r3, #2
 80099c4:	73fb      	strb	r3, [r7, #15]
 80099c6:	e001      	b.n	80099cc <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80099c8:	2302      	movs	r3, #2
 80099ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bc80      	pop	{r7}
 80099d6:	4770      	bx	lr

080099d8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 80099ee:	78fa      	ldrb	r2, [r7, #3]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d204      	bcs.n	80099fe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	78fa      	ldrb	r2, [r7, #3]
 80099f8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 80099fc:	e001      	b.n	8009a02 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80099fe:	2302      	movs	r3, #2
 8009a00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bc80      	pop	{r7}
 8009a0c:	4770      	bx	lr

08009a0e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b087      	sub	sp, #28
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	4608      	mov	r0, r1
 8009a18:	4611      	mov	r1, r2
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	70fb      	strb	r3, [r7, #3]
 8009a20:	460b      	mov	r3, r1
 8009a22:	70bb      	strb	r3, [r7, #2]
 8009a24:	4613      	mov	r3, r2
 8009a26:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f203 3336 	addw	r3, r3, #822	; 0x336
 8009a36:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a38:	e025      	b.n	8009a86 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
 8009a3c:	221a      	movs	r2, #26
 8009a3e:	fb02 f303 	mul.w	r3, r2, r3
 8009a42:	3308      	adds	r3, #8
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	3302      	adds	r3, #2
 8009a4a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	795b      	ldrb	r3, [r3, #5]
 8009a50:	78fa      	ldrb	r2, [r7, #3]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d002      	beq.n	8009a5c <USBH_FindInterface+0x4e>
 8009a56:	78fb      	ldrb	r3, [r7, #3]
 8009a58:	2bff      	cmp	r3, #255	; 0xff
 8009a5a:	d111      	bne.n	8009a80 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009a60:	78ba      	ldrb	r2, [r7, #2]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d002      	beq.n	8009a6c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a66:	78bb      	ldrb	r3, [r7, #2]
 8009a68:	2bff      	cmp	r3, #255	; 0xff
 8009a6a:	d109      	bne.n	8009a80 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a70:	787a      	ldrb	r2, [r7, #1]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d002      	beq.n	8009a7c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a76:	787b      	ldrb	r3, [r7, #1]
 8009a78:	2bff      	cmp	r3, #255	; 0xff
 8009a7a:	d101      	bne.n	8009a80 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009a7c:	7dfb      	ldrb	r3, [r7, #23]
 8009a7e:	e006      	b.n	8009a8e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
 8009a82:	3301      	adds	r3, #1
 8009a84:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d9d6      	bls.n	8009a3a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009a8c:	23ff      	movs	r3, #255	; 0xff
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	371c      	adds	r7, #28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bc80      	pop	{r7}
 8009a96:	4770      	bx	lr

08009a98 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f004 fa4d 	bl	800df40 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009aa6:	2101      	movs	r1, #1
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f004 fb66 	bl	800e17a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af04      	add	r7, sp, #16
 8009abe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d102      	bne.n	8009ada <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2203      	movs	r2, #3
 8009ad8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b0b      	cmp	r3, #11
 8009ae2:	f200 8177 	bhi.w	8009dd4 <USBH_Process+0x31c>
 8009ae6:	a201      	add	r2, pc, #4	; (adr r2, 8009aec <USBH_Process+0x34>)
 8009ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aec:	08009b1d 	.word	0x08009b1d
 8009af0:	08009b3f 	.word	0x08009b3f
 8009af4:	08009b53 	.word	0x08009b53
 8009af8:	08009d6f 	.word	0x08009d6f
 8009afc:	08009dd5 	.word	0x08009dd5
 8009b00:	08009bf7 	.word	0x08009bf7
 8009b04:	08009d25 	.word	0x08009d25
 8009b08:	08009c27 	.word	0x08009c27
 8009b0c:	08009c47 	.word	0x08009c47
 8009b10:	08009c67 	.word	0x08009c67
 8009b14:	08009c95 	.word	0x08009c95
 8009b18:	08009d57 	.word	0x08009d57
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 8157 	beq.w	8009dd8 <USBH_Process+0x320>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009b30:	20c8      	movs	r0, #200	; 0xc8
 8009b32:	f004 fb97 	bl	800e264 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f004 fa5f 	bl	800dffa <USBH_LL_ResetPort>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009b3c:	e14c      	b.n	8009dd8 <USBH_Process+0x320>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	f040 8149 	bne.w	8009ddc <USBH_Process+0x324>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009b50:	e144      	b.n	8009ddc <USBH_Process+0x324>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <USBH_Process+0xb0>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009b62:	2104      	movs	r1, #4
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009b68:	2064      	movs	r0, #100	; 0x64
 8009b6a:	f004 fb7b 	bl	800e264 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f004 fa1c 	bl	800dfac <USBH_LL_GetSpeed>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2205      	movs	r2, #5
 8009b82:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009b84:	2100      	movs	r1, #0
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f001 f855 	bl	800ac36 <USBH_AllocPipe>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	461a      	mov	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009b94:	2180      	movs	r1, #128	; 0x80
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f001 f84d 	bl	800ac36 <USBH_AllocPipe>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	7919      	ldrb	r1, [r3, #4]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8009bb8:	b292      	uxth	r2, r2
 8009bba:	9202      	str	r2, [sp, #8]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	9201      	str	r2, [sp, #4]
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2280      	movs	r2, #128	; 0x80
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f001 f806 	bl	800abd8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	7959      	ldrb	r1, [r3, #5]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8009be0:	b292      	uxth	r2, r2
 8009be2:	9202      	str	r2, [sp, #8]
 8009be4:	2200      	movs	r2, #0
 8009be6:	9201      	str	r2, [sp, #4]
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	4603      	mov	r3, r0
 8009bec:	2200      	movs	r2, #0
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fff2 	bl	800abd8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009bf4:	e101      	b.n	8009dfa <USBH_Process+0x342>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f904 	bl	8009e04 <USBH_HandleEnum>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f040 80ee 	bne.w	8009de0 <USBH_Process+0x328>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d103      	bne.n	8009c1e <USBH_Process+0x166>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2208      	movs	r2, #8
 8009c1a:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 8009c1c:	e0e0      	b.n	8009de0 <USBH_Process+0x328>
          phost->gState = HOST_INPUT;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2207      	movs	r2, #7
 8009c22:	701a      	strb	r2, [r3, #0]
      break;
 8009c24:	e0dc      	b.n	8009de0 <USBH_Process+0x328>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 80d9 	beq.w	8009de4 <USBH_Process+0x32c>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009c38:	2101      	movs	r1, #1
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2208      	movs	r2, #8
 8009c42:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009c44:	e0ce      	b.n	8009de4 <USBH_Process+0x32c>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fb4d 	bl	800a2f0 <USBH_SetCfg>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f040 80c5 	bne.w	8009de8 <USBH_Process+0x330>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2209      	movs	r2, #9
 8009c62:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c64:	e0c0      	b.n	8009de8 <USBH_Process+0x330>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009c6c:	f003 0320 	and.w	r3, r3, #32
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00b      	beq.n	8009c8c <USBH_Process+0x1d4>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009c74:	2101      	movs	r1, #1
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fb5d 	bl	800a336 <USBH_SetFeature>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f040 80b4 	bne.w	8009dec <USBH_Process+0x334>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	220a      	movs	r2, #10
 8009c88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c8a:	e0af      	b.n	8009dec <USBH_Process+0x334>
        phost->gState = HOST_CHECK_CLASS;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	220a      	movs	r2, #10
 8009c90:	701a      	strb	r2, [r3, #0]
      break;
 8009c92:	e0ab      	b.n	8009dec <USBH_Process+0x334>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f000 80a8 	beq.w	8009df0 <USBH_Process+0x338>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
 8009cac:	e017      	b.n	8009cde <USBH_Process+0x226>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	33dc      	adds	r3, #220	; 0xdc
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	791a      	ldrb	r2, [r3, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d108      	bne.n	8009cd8 <USBH_Process+0x220>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	33dc      	adds	r3, #220	; 0xdc
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	73fb      	strb	r3, [r7, #15]
 8009cde:	7bfb      	ldrb	r3, [r7, #15]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d0e4      	beq.n	8009cae <USBH_Process+0x1f6>
          }
        }

        if (phost->pActiveClass != NULL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d016      	beq.n	8009d1c <USBH_Process+0x264>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	4798      	blx	r3
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d109      	bne.n	8009d14 <USBH_Process+0x25c>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2206      	movs	r2, #6
 8009d04:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009d0c:	2103      	movs	r1, #3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009d12:	e06d      	b.n	8009df0 <USBH_Process+0x338>
            phost->gState = HOST_ABORT_STATE;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	220d      	movs	r2, #13
 8009d18:	701a      	strb	r2, [r3, #0]
      break;
 8009d1a:	e069      	b.n	8009df0 <USBH_Process+0x338>
          phost->gState = HOST_ABORT_STATE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	220d      	movs	r2, #13
 8009d20:	701a      	strb	r2, [r3, #0]
      break;
 8009d22:	e065      	b.n	8009df0 <USBH_Process+0x338>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00f      	beq.n	8009d4e <USBH_Process+0x296>
      {
        status = phost->pActiveClass->Requests(phost);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	4798      	blx	r3
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d156      	bne.n	8009df4 <USBH_Process+0x33c>
        {
          phost->gState = HOST_CLASS;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	220b      	movs	r2, #11
 8009d4a:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009d4c:	e052      	b.n	8009df4 <USBH_Process+0x33c>
        phost->gState = HOST_ABORT_STATE;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	220d      	movs	r2, #13
 8009d52:	701a      	strb	r2, [r3, #0]
      break;
 8009d54:	e04e      	b.n	8009df4 <USBH_Process+0x33c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d04b      	beq.n	8009df8 <USBH_Process+0x340>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	4798      	blx	r3
      }
      break;
 8009d6c:	e044      	b.n	8009df8 <USBH_Process+0x340>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff fdba 	bl	80098f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d009      	beq.n	8009d9a <USBH_Process+0x2e2>
      {
        phost->pActiveClass->DeInit(phost);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d005      	beq.n	8009db0 <USBH_Process+0x2f8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009daa:	2105      	movs	r1, #5
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d107      	bne.n	8009dcc <USBH_Process+0x314>
      {
        phost->device.is_ReEnumerated = 0U;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f7ff fe67 	bl	8009a98 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009dca:	e016      	b.n	8009dfa <USBH_Process+0x342>
        USBH_LL_Start(phost);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f004 f8b7 	bl	800df40 <USBH_LL_Start>
      break;
 8009dd2:	e012      	b.n	8009dfa <USBH_Process+0x342>

    case HOST_ABORT_STATE:
    default :
      break;
 8009dd4:	bf00      	nop
 8009dd6:	e010      	b.n	8009dfa <USBH_Process+0x342>
      break;
 8009dd8:	bf00      	nop
 8009dda:	e00e      	b.n	8009dfa <USBH_Process+0x342>
      break;
 8009ddc:	bf00      	nop
 8009dde:	e00c      	b.n	8009dfa <USBH_Process+0x342>
      break;
 8009de0:	bf00      	nop
 8009de2:	e00a      	b.n	8009dfa <USBH_Process+0x342>
    break;
 8009de4:	bf00      	nop
 8009de6:	e008      	b.n	8009dfa <USBH_Process+0x342>
      break;
 8009de8:	bf00      	nop
 8009dea:	e006      	b.n	8009dfa <USBH_Process+0x342>
      break;
 8009dec:	bf00      	nop
 8009dee:	e004      	b.n	8009dfa <USBH_Process+0x342>
      break;
 8009df0:	bf00      	nop
 8009df2:	e002      	b.n	8009dfa <USBH_Process+0x342>
      break;
 8009df4:	bf00      	nop
 8009df6:	e000      	b.n	8009dfa <USBH_Process+0x342>
      break;
 8009df8:	bf00      	nop
  }
  return USBH_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b088      	sub	sp, #32
 8009e08:	af04      	add	r7, sp, #16
 8009e0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	785b      	ldrb	r3, [r3, #1]
 8009e14:	2b07      	cmp	r3, #7
 8009e16:	f200 80f8 	bhi.w	800a00a <USBH_HandleEnum+0x206>
 8009e1a:	a201      	add	r2, pc, #4	; (adr r2, 8009e20 <USBH_HandleEnum+0x1c>)
 8009e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e20:	08009e41 	.word	0x08009e41
 8009e24:	08009eb3 	.word	0x08009eb3
 8009e28:	08009ecb 	.word	0x08009ecb
 8009e2c:	08009f41 	.word	0x08009f41
 8009e30:	08009f57 	.word	0x08009f57
 8009e34:	08009f73 	.word	0x08009f73
 8009e38:	08009fa7 	.word	0x08009fa7
 8009e3c:	08009fdb 	.word	0x08009fdb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8009e40:	2108      	movs	r1, #8
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f984 	bl	800a150 <USBH_Get_DevDesc>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f040 80df 	bne.w	800a00e <USBH_HandleEnum+0x20a>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	7919      	ldrb	r1, [r3, #4]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8009e74:	b292      	uxth	r2, r2
 8009e76:	9202      	str	r2, [sp, #8]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	9201      	str	r2, [sp, #4]
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2280      	movs	r2, #128	; 0x80
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fea8 	bl	800abd8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	7959      	ldrb	r1, [r3, #5]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8009e9c:	b292      	uxth	r2, r2
 8009e9e:	9202      	str	r2, [sp, #8]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	9201      	str	r2, [sp, #4]
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fe94 	bl	800abd8 <USBH_OpenPipe>
      }
      break;
 8009eb0:	e0ad      	b.n	800a00e <USBH_HandleEnum+0x20a>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 8009eb2:	2112      	movs	r1, #18
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f94b 	bl	800a150 <USBH_Get_DevDesc>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f040 80a8 	bne.w	800a012 <USBH_HandleEnum+0x20e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2202      	movs	r2, #2
 8009ec6:	705a      	strb	r2, [r3, #1]

      }
      break;
 8009ec8:	e0a3      	b.n	800a012 <USBH_HandleEnum+0x20e>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8009eca:	2101      	movs	r1, #1
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f9eb 	bl	800a2a8 <USBH_SetAddress>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f040 809e 	bne.w	800a016 <USBH_HandleEnum+0x212>
      {
        USBH_Delay(2U);
 8009eda:	2002      	movs	r0, #2
 8009edc:	f004 f9c2 	bl	800e264 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2203      	movs	r2, #3
 8009eec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	7919      	ldrb	r1, [r3, #4]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8009f02:	b292      	uxth	r2, r2
 8009f04:	9202      	str	r2, [sp, #8]
 8009f06:	2200      	movs	r2, #0
 8009f08:	9201      	str	r2, [sp, #4]
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2280      	movs	r2, #128	; 0x80
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fe61 	bl	800abd8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	7959      	ldrb	r1, [r3, #5]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8009f2a:	b292      	uxth	r2, r2
 8009f2c:	9202      	str	r2, [sp, #8]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	9201      	str	r2, [sp, #4]
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	4603      	mov	r3, r0
 8009f36:	2200      	movs	r2, #0
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fe4d 	bl	800abd8 <USBH_OpenPipe>
      }
      break;
 8009f3e:	e06a      	b.n	800a016 <USBH_HandleEnum+0x212>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 8009f40:	2109      	movs	r1, #9
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f92c 	bl	800a1a0 <USBH_Get_CfgDesc>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d165      	bne.n	800a01a <USBH_HandleEnum+0x216>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2204      	movs	r2, #4
 8009f52:	705a      	strb	r2, [r3, #1]
      }
      break;
 8009f54:	e061      	b.n	800a01a <USBH_HandleEnum+0x216>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f91e 	bl	800a1a0 <USBH_Get_CfgDesc>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d159      	bne.n	800a01e <USBH_HandleEnum+0x21a>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2205      	movs	r2, #5
 8009f6e:	705a      	strb	r2, [r3, #1]
      }
      break;
 8009f70:	e055      	b.n	800a01e <USBH_HandleEnum+0x21a>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d010      	beq.n	8009f9e <USBH_HandleEnum+0x19a>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8009f88:	23ff      	movs	r3, #255	; 0xff
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f92c 	bl	800a1e8 <USBH_Get_StringDesc>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d145      	bne.n	800a022 <USBH_HandleEnum+0x21e>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2206      	movs	r2, #6
 8009f9a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009f9c:	e041      	b.n	800a022 <USBH_HandleEnum+0x21e>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2206      	movs	r2, #6
 8009fa2:	705a      	strb	r2, [r3, #1]
      break;
 8009fa4:	e03d      	b.n	800a022 <USBH_HandleEnum+0x21e>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d010      	beq.n	8009fd2 <USBH_HandleEnum+0x1ce>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8009fbc:	23ff      	movs	r3, #255	; 0xff
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f912 	bl	800a1e8 <USBH_Get_StringDesc>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d12d      	bne.n	800a026 <USBH_HandleEnum+0x222>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2207      	movs	r2, #7
 8009fce:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009fd0:	e029      	b.n	800a026 <USBH_HandleEnum+0x222>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2207      	movs	r2, #7
 8009fd6:	705a      	strb	r2, [r3, #1]
      break;
 8009fd8:	e025      	b.n	800a026 <USBH_HandleEnum+0x222>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00f      	beq.n	800a004 <USBH_HandleEnum+0x200>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8009ff0:	23ff      	movs	r3, #255	; 0xff
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f8f8 	bl	800a1e8 <USBH_Get_StringDesc>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d115      	bne.n	800a02a <USBH_HandleEnum+0x226>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a002:	e012      	b.n	800a02a <USBH_HandleEnum+0x226>
        Status = USBH_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	73fb      	strb	r3, [r7, #15]
      break;
 800a008:	e00f      	b.n	800a02a <USBH_HandleEnum+0x226>

    default:
      break;
 800a00a:	bf00      	nop
 800a00c:	e00e      	b.n	800a02c <USBH_HandleEnum+0x228>
      break;
 800a00e:	bf00      	nop
 800a010:	e00c      	b.n	800a02c <USBH_HandleEnum+0x228>
      break;
 800a012:	bf00      	nop
 800a014:	e00a      	b.n	800a02c <USBH_HandleEnum+0x228>
      break;
 800a016:	bf00      	nop
 800a018:	e008      	b.n	800a02c <USBH_HandleEnum+0x228>
      break;
 800a01a:	bf00      	nop
 800a01c:	e006      	b.n	800a02c <USBH_HandleEnum+0x228>
      break;
 800a01e:	bf00      	nop
 800a020:	e004      	b.n	800a02c <USBH_HandleEnum+0x228>
      break;
 800a022:	bf00      	nop
 800a024:	e002      	b.n	800a02c <USBH_HandleEnum+0x228>
      break;
 800a026:	bf00      	nop
 800a028:	e000      	b.n	800a02c <USBH_HandleEnum+0x228>
      break;
 800a02a:	bf00      	nop
  }
  return Status;
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop

0800a038 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800a04a:	bf00      	nop
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	bc80      	pop	{r7}
 800a052:	4770      	bx	lr

0800a054 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f804 	bl	800a078 <USBH_HandleSof>
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b0b      	cmp	r3, #11
 800a088:	d10a      	bne.n	800a0a0 <USBH_HandleSof+0x28>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a090:	2b00      	cmp	r3, #0
 800a092:	d005      	beq.n	800a0a0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	4798      	blx	r3
  }
}
 800a0a0:	bf00      	nop
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a0b8:	bf00      	nop
}
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bc80      	pop	{r7}
 800a0c0:	4770      	bx	lr

0800a0c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b083      	sub	sp, #12
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800a0d2:	bf00      	nop
}
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bc80      	pop	{r7}
 800a0da:	4770      	bx	lr

0800a0dc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	bc80      	pop	{r7}
 800a106:	4770      	bx	lr

0800a108 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f003 ff24 	bl	800df76 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	791b      	ldrb	r3, [r3, #4]
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fd9e 	bl	800ac76 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	795b      	ldrb	r3, [r3, #5]
 800a13e:	4619      	mov	r1, r3
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fd98 	bl	800ac76 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af02      	add	r7, sp, #8
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a162:	78fb      	ldrb	r3, [r7, #3]
 800a164:	b29b      	uxth	r3, r3
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	4613      	mov	r3, r2
 800a16a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a16e:	2100      	movs	r1, #0
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f864 	bl	800a23e <USBH_GetDescriptor>
 800a176:	4603      	mov	r3, r0
 800a178:	73fb      	strb	r3, [r7, #15]
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10a      	bne.n	800a196 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f503 7049 	add.w	r0, r3, #804	; 0x324
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a18c:	78fa      	ldrb	r2, [r7, #3]
 800a18e:	b292      	uxth	r2, r2
 800a190:	4619      	mov	r1, r3
 800a192:	f000 f918 	bl	800a3c6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a196:	7bfb      	ldrb	r3, [r7, #15]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	331c      	adds	r3, #28
 800a1b0:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a1b2:	887b      	ldrh	r3, [r7, #2]
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1bc:	2100      	movs	r1, #0
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f83d 	bl	800a23e <USBH_GetDescriptor>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	72fb      	strb	r3, [r7, #11]
 800a1c8:	7afb      	ldrb	r3, [r7, #11]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d107      	bne.n	800a1de <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f203 3336 	addw	r3, r3, #822	; 0x336
 800a1d4:	887a      	ldrh	r2, [r7, #2]
 800a1d6:	68f9      	ldr	r1, [r7, #12]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 f963 	bl	800a4a4 <USBH_ParseCfgDesc>
  }

  return status;
 800a1de:	7afb      	ldrb	r3, [r7, #11]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b088      	sub	sp, #32
 800a1ec:	af02      	add	r7, sp, #8
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	607a      	str	r2, [r7, #4]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	72fb      	strb	r3, [r7, #11]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a1fc:	7afb      	ldrb	r3, [r7, #11]
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a204:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a20c:	893b      	ldrh	r3, [r7, #8]
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	460b      	mov	r3, r1
 800a212:	2100      	movs	r1, #0
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 f812 	bl	800a23e <USBH_GetDescriptor>
 800a21a:	4603      	mov	r3, r0
 800a21c:	75fb      	strb	r3, [r7, #23]
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d107      	bne.n	800a234 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a22a:	893a      	ldrh	r2, [r7, #8]
 800a22c:	6879      	ldr	r1, [r7, #4]
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 fa34 	bl	800a69c <USBH_ParseStringDesc>
  }

  return status;
 800a234:	7dfb      	ldrb	r3, [r7, #23]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b084      	sub	sp, #16
 800a242:	af00      	add	r7, sp, #0
 800a244:	60f8      	str	r0, [r7, #12]
 800a246:	607b      	str	r3, [r7, #4]
 800a248:	460b      	mov	r3, r1
 800a24a:	72fb      	strb	r3, [r7, #11]
 800a24c:	4613      	mov	r3, r2
 800a24e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	789b      	ldrb	r3, [r3, #2]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d11c      	bne.n	800a292 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a258:	7afb      	ldrb	r3, [r7, #11]
 800a25a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2206      	movs	r2, #6
 800a268:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	893a      	ldrh	r2, [r7, #8]
 800a26e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a270:	893b      	ldrh	r3, [r7, #8]
 800a272:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a27a:	d104      	bne.n	800a286 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f240 4209 	movw	r2, #1033	; 0x409
 800a282:	829a      	strh	r2, [r3, #20]
 800a284:	e002      	b.n	800a28c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	8b3a      	ldrh	r2, [r7, #24]
 800a290:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a292:	8b3b      	ldrh	r3, [r7, #24]
 800a294:	461a      	mov	r2, r3
 800a296:	6879      	ldr	r1, [r7, #4]
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f000 fa4b 	bl	800a734 <USBH_CtlReq>
 800a29e:	4603      	mov	r3, r0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	789b      	ldrb	r3, [r3, #2]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d10f      	bne.n	800a2dc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2205      	movs	r2, #5
 800a2c6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a2c8:	78fb      	ldrb	r3, [r7, #3]
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2100      	movs	r1, #0
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fa27 	bl	800a734 <USBH_CtlReq>
 800a2e6:	4603      	mov	r3, r0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	789b      	ldrb	r3, [r3, #2]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d10e      	bne.n	800a322 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2209      	movs	r2, #9
 800a30e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	887a      	ldrh	r2, [r7, #2]
 800a314:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a322:	2200      	movs	r2, #0
 800a324:	2100      	movs	r1, #0
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fa04 	bl	800a734 <USBH_CtlReq>
 800a32c:	4603      	mov	r3, r0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b082      	sub	sp, #8
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	460b      	mov	r3, r1
 800a340:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	789b      	ldrb	r3, [r3, #2]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d10f      	bne.n	800a36a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2203      	movs	r2, #3
 800a354:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a356:	78fb      	ldrb	r3, [r7, #3]
 800a358:	b29a      	uxth	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a36a:	2200      	movs	r2, #0
 800a36c:	2100      	movs	r1, #0
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f9e0 	bl	800a734 <USBH_CtlReq>
 800a374:	4603      	mov	r3, r0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	460b      	mov	r3, r1
 800a388:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	789b      	ldrb	r3, [r3, #2]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d10f      	bne.n	800a3b2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2202      	movs	r2, #2
 800a396:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a3a4:	78fb      	ldrb	r3, [r7, #3]
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f9bc 	bl	800a734 <USBH_CtlReq>
 800a3bc:	4603      	mov	r3, r0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b085      	sub	sp, #20
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	781a      	ldrb	r2, [r3, #0]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	785a      	ldrb	r2, [r3, #1]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	3302      	adds	r3, #2
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	3303      	adds	r3, #3
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	021b      	lsls	r3, r3, #8
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	791a      	ldrb	r2, [r3, #4]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	795a      	ldrb	r2, [r3, #5]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	799a      	ldrb	r2, [r3, #6]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	79da      	ldrb	r2, [r3, #7]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a420:	88fb      	ldrh	r3, [r7, #6]
 800a422:	2b08      	cmp	r3, #8
 800a424:	d939      	bls.n	800a49a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	3308      	adds	r3, #8
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	3309      	adds	r3, #9
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	b29b      	uxth	r3, r3
 800a436:	021b      	lsls	r3, r3, #8
 800a438:	b29b      	uxth	r3, r3
 800a43a:	4313      	orrs	r3, r2
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	330a      	adds	r3, #10
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	b29a      	uxth	r2, r3
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	330b      	adds	r3, #11
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	b29b      	uxth	r3, r3
 800a452:	021b      	lsls	r3, r3, #8
 800a454:	b29b      	uxth	r3, r3
 800a456:	4313      	orrs	r3, r2
 800a458:	b29a      	uxth	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	330c      	adds	r3, #12
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	b29a      	uxth	r2, r3
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	330d      	adds	r3, #13
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	021b      	lsls	r3, r3, #8
 800a470:	b29b      	uxth	r3, r3
 800a472:	4313      	orrs	r3, r2
 800a474:	b29a      	uxth	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	7b9a      	ldrb	r2, [r3, #14]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	7bda      	ldrb	r2, [r3, #15]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	7c1a      	ldrb	r2, [r3, #16]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	7c5a      	ldrb	r2, [r3, #17]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	745a      	strb	r2, [r3, #17]
  }
}
 800a49a:	bf00      	nop
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bc80      	pop	{r7}
 800a4a2:	4770      	bx	lr

0800a4a4 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b08a      	sub	sp, #40	; 0x28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	781a      	ldrb	r2, [r3, #0]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	785a      	ldrb	r2, [r3, #1]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	3302      	adds	r3, #2
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	3303      	adds	r3, #3
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	021b      	lsls	r3, r3, #8
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	791a      	ldrb	r2, [r3, #4]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	795a      	ldrb	r2, [r3, #5]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	799a      	ldrb	r2, [r3, #6]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	79da      	ldrb	r2, [r3, #7]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	7a1a      	ldrb	r2, [r3, #8]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a51a:	88fb      	ldrh	r3, [r7, #6]
 800a51c:	2b09      	cmp	r3, #9
 800a51e:	d95f      	bls.n	800a5e0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a520:	2309      	movs	r3, #9
 800a522:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a524:	2300      	movs	r3, #0
 800a526:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a528:	e051      	b.n	800a5ce <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a52a:	f107 0316 	add.w	r3, r7, #22
 800a52e:	4619      	mov	r1, r3
 800a530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a532:	f000 f8e5 	bl	800a700 <USBH_GetNextDesc>
 800a536:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	785b      	ldrb	r3, [r3, #1]
 800a53c:	2b04      	cmp	r3, #4
 800a53e:	d146      	bne.n	800a5ce <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a540:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a544:	221a      	movs	r2, #26
 800a546:	fb02 f303 	mul.w	r3, r2, r3
 800a54a:	3308      	adds	r3, #8
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4413      	add	r3, r2
 800a550:	3302      	adds	r3, #2
 800a552:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a556:	69f8      	ldr	r0, [r7, #28]
 800a558:	f000 f846 	bl	800a5e8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a55c:	2300      	movs	r3, #0
 800a55e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a562:	2300      	movs	r3, #0
 800a564:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a566:	e022      	b.n	800a5ae <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a568:	f107 0316 	add.w	r3, r7, #22
 800a56c:	4619      	mov	r1, r3
 800a56e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a570:	f000 f8c6 	bl	800a700 <USBH_GetNextDesc>
 800a574:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a578:	785b      	ldrb	r3, [r3, #1]
 800a57a:	2b05      	cmp	r3, #5
 800a57c:	d117      	bne.n	800a5ae <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a57e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a582:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a586:	3201      	adds	r2, #1
 800a588:	00d2      	lsls	r2, r2, #3
 800a58a:	211a      	movs	r1, #26
 800a58c:	fb01 f303 	mul.w	r3, r1, r3
 800a590:	4413      	add	r3, r2
 800a592:	3308      	adds	r3, #8
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	4413      	add	r3, r2
 800a598:	3304      	adds	r3, #4
 800a59a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a59c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a59e:	69b8      	ldr	r0, [r7, #24]
 800a5a0:	f000 f850 	bl	800a644 <USBH_ParseEPDesc>
            ep_ix++;
 800a5a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	791b      	ldrb	r3, [r3, #4]
 800a5b2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d204      	bcs.n	800a5c4 <USBH_ParseCfgDesc+0x120>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	885a      	ldrh	r2, [r3, #2]
 800a5be:	8afb      	ldrh	r3, [r7, #22]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d8d1      	bhi.n	800a568 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a5c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a5ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d804      	bhi.n	800a5e0 <USBH_ParseCfgDesc+0x13c>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	885a      	ldrh	r2, [r3, #2]
 800a5da:	8afb      	ldrh	r3, [r7, #22]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d8a4      	bhi.n	800a52a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a5e0:	bf00      	nop
 800a5e2:	3728      	adds	r7, #40	; 0x28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	781a      	ldrb	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	785a      	ldrb	r2, [r3, #1]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	789a      	ldrb	r2, [r3, #2]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	78da      	ldrb	r2, [r3, #3]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	791a      	ldrb	r2, [r3, #4]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	795a      	ldrb	r2, [r3, #5]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	799a      	ldrb	r2, [r3, #6]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	79da      	ldrb	r2, [r3, #7]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	7a1a      	ldrb	r2, [r3, #8]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	721a      	strb	r2, [r3, #8]
}
 800a63a:	bf00      	nop
 800a63c:	370c      	adds	r7, #12
 800a63e:	46bd      	mov	sp, r7
 800a640:	bc80      	pop	{r7}
 800a642:	4770      	bx	lr

0800a644 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	781a      	ldrb	r2, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	785a      	ldrb	r2, [r3, #1]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	789a      	ldrb	r2, [r3, #2]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	78da      	ldrb	r2, [r3, #3]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	3304      	adds	r3, #4
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	b29a      	uxth	r2, r3
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	3305      	adds	r3, #5
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	021b      	lsls	r3, r3, #8
 800a680:	b29b      	uxth	r3, r3
 800a682:	4313      	orrs	r3, r2
 800a684:	b29a      	uxth	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	799a      	ldrb	r2, [r3, #6]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	719a      	strb	r2, [r3, #6]
}
 800a692:	bf00      	nop
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	bc80      	pop	{r7}
 800a69a:	4770      	bx	lr

0800a69c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	2b03      	cmp	r3, #3
 800a6b2:	d120      	bne.n	800a6f6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	1e9a      	subs	r2, r3, #2
 800a6ba:	88fb      	ldrh	r3, [r7, #6]
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	bf28      	it	cs
 800a6c0:	4613      	movcs	r3, r2
 800a6c2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	3302      	adds	r3, #2
 800a6c8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	82fb      	strh	r3, [r7, #22]
 800a6ce:	e00b      	b.n	800a6e8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a6d0:	8afb      	ldrh	r3, [r7, #22]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	781a      	ldrb	r2, [r3, #0]
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a6e2:	8afb      	ldrh	r3, [r7, #22]
 800a6e4:	3302      	adds	r3, #2
 800a6e6:	82fb      	strh	r3, [r7, #22]
 800a6e8:	8afa      	ldrh	r2, [r7, #22]
 800a6ea:	8abb      	ldrh	r3, [r7, #20]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d3ef      	bcc.n	800a6d0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	701a      	strb	r2, [r3, #0]
  }
}
 800a6f6:	bf00      	nop
 800a6f8:	371c      	adds	r7, #28
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bc80      	pop	{r7}
 800a6fe:	4770      	bx	lr

0800a700 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	881a      	ldrh	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	b29b      	uxth	r3, r3
 800a714:	4413      	add	r3, r2
 800a716:	b29a      	uxth	r2, r3
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4413      	add	r3, r2
 800a726:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a728:	68fb      	ldr	r3, [r7, #12]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	bc80      	pop	{r7}
 800a732:	4770      	bx	lr

0800a734 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	4613      	mov	r3, r2
 800a740:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a742:	2301      	movs	r3, #1
 800a744:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	789b      	ldrb	r3, [r3, #2]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d002      	beq.n	800a754 <USBH_CtlReq+0x20>
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d00f      	beq.n	800a772 <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 800a752:	e034      	b.n	800a7be <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	88fa      	ldrh	r2, [r7, #6]
 800a75e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2201      	movs	r2, #1
 800a764:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2202      	movs	r2, #2
 800a76a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a76c:	2301      	movs	r3, #1
 800a76e:	75fb      	strb	r3, [r7, #23]
      break;
 800a770:	e025      	b.n	800a7be <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 f828 	bl	800a7c8 <USBH_HandleControl>
 800a778:	4603      	mov	r3, r0
 800a77a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a77c:	7dfb      	ldrb	r3, [r7, #23]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d108      	bne.n	800a794 <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2201      	movs	r2, #1
 800a786:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	75fb      	strb	r3, [r7, #23]
      break;
 800a792:	e013      	b.n	800a7bc <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 800a794:	7dfb      	ldrb	r3, [r7, #23]
 800a796:	2b03      	cmp	r3, #3
 800a798:	d108      	bne.n	800a7ac <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2201      	movs	r2, #1
 800a79e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a7aa:	e007      	b.n	800a7bc <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 800a7ac:	7dfb      	ldrb	r3, [r7, #23]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d104      	bne.n	800a7bc <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a7bc:	bf00      	nop
  }
  return status;
 800a7be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3718      	adds	r7, #24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af02      	add	r7, sp, #8
 800a7ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	7e1b      	ldrb	r3, [r3, #24]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	2b0a      	cmp	r3, #10
 800a7e0:	f200 814a 	bhi.w	800aa78 <USBH_HandleControl+0x2b0>
 800a7e4:	a201      	add	r2, pc, #4	; (adr r2, 800a7ec <USBH_HandleControl+0x24>)
 800a7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ea:	bf00      	nop
 800a7ec:	0800a819 	.word	0x0800a819
 800a7f0:	0800a833 	.word	0x0800a833
 800a7f4:	0800a89d 	.word	0x0800a89d
 800a7f8:	0800a8c3 	.word	0x0800a8c3
 800a7fc:	0800a8fb 	.word	0x0800a8fb
 800a800:	0800a925 	.word	0x0800a925
 800a804:	0800a977 	.word	0x0800a977
 800a808:	0800a999 	.word	0x0800a999
 800a80c:	0800a9d5 	.word	0x0800a9d5
 800a810:	0800a9fb 	.word	0x0800a9fb
 800a814:	0800aa39 	.word	0x0800aa39
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f103 0110 	add.w	r1, r3, #16
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	795b      	ldrb	r3, [r3, #5]
 800a822:	461a      	mov	r2, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f937 	bl	800aa98 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2202      	movs	r2, #2
 800a82e:	761a      	strb	r2, [r3, #24]
      break;
 800a830:	e12d      	b.n	800aa8e <USBH_HandleControl+0x2c6>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	795b      	ldrb	r3, [r3, #5]
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f003 fc8b 	bl	800e154 <USBH_LL_GetURBState>
 800a83e:	4603      	mov	r3, r0
 800a840:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a842:	7bbb      	ldrb	r3, [r7, #14]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d11e      	bne.n	800a886 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	7c1b      	ldrb	r3, [r3, #16]
 800a84c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a850:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	8adb      	ldrh	r3, [r3, #22]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00a      	beq.n	800a870 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a85a:	7b7b      	ldrb	r3, [r7, #13]
 800a85c:	2b80      	cmp	r3, #128	; 0x80
 800a85e:	d103      	bne.n	800a868 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2203      	movs	r2, #3
 800a864:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a866:	e109      	b.n	800aa7c <USBH_HandleControl+0x2b4>
            phost->Control.state = CTRL_DATA_OUT;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2205      	movs	r2, #5
 800a86c:	761a      	strb	r2, [r3, #24]
      break;
 800a86e:	e105      	b.n	800aa7c <USBH_HandleControl+0x2b4>
          if (direction == USB_D2H)
 800a870:	7b7b      	ldrb	r3, [r7, #13]
 800a872:	2b80      	cmp	r3, #128	; 0x80
 800a874:	d103      	bne.n	800a87e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2209      	movs	r2, #9
 800a87a:	761a      	strb	r2, [r3, #24]
      break;
 800a87c:	e0fe      	b.n	800aa7c <USBH_HandleControl+0x2b4>
            phost->Control.state = CTRL_STATUS_IN;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2207      	movs	r2, #7
 800a882:	761a      	strb	r2, [r3, #24]
      break;
 800a884:	e0fa      	b.n	800aa7c <USBH_HandleControl+0x2b4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d003      	beq.n	800a894 <USBH_HandleControl+0xcc>
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	2b02      	cmp	r3, #2
 800a890:	f040 80f4 	bne.w	800aa7c <USBH_HandleControl+0x2b4>
          phost->Control.state = CTRL_ERROR;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	220b      	movs	r2, #11
 800a898:	761a      	strb	r2, [r3, #24]
      break;
 800a89a:	e0ef      	b.n	800aa7c <USBH_HandleControl+0x2b4>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6899      	ldr	r1, [r3, #8]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	899a      	ldrh	r2, [r3, #12]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	791b      	ldrb	r3, [r3, #4]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f92e 	bl	800ab16 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2204      	movs	r2, #4
 800a8be:	761a      	strb	r2, [r3, #24]
      break;
 800a8c0:	e0e5      	b.n	800aa8e <USBH_HandleControl+0x2c6>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	791b      	ldrb	r3, [r3, #4]
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f003 fc43 	bl	800e154 <USBH_LL_GetURBState>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a8d2:	7bbb      	ldrb	r3, [r7, #14]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d102      	bne.n	800a8de <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2209      	movs	r2, #9
 800a8dc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a8de:	7bbb      	ldrb	r3, [r7, #14]
 800a8e0:	2b05      	cmp	r3, #5
 800a8e2:	d102      	bne.n	800a8ea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a8e8:	e0ca      	b.n	800aa80 <USBH_HandleControl+0x2b8>
        if (URB_Status == USBH_URB_ERROR)
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	f040 80c7 	bne.w	800aa80 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_ERROR;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	220b      	movs	r2, #11
 800a8f6:	761a      	strb	r2, [r3, #24]
      break;
 800a8f8:	e0c2      	b.n	800aa80 <USBH_HandleControl+0x2b8>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6899      	ldr	r1, [r3, #8]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	899a      	ldrh	r2, [r3, #12]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	795b      	ldrb	r3, [r3, #5]
 800a906:	2001      	movs	r0, #1
 800a908:	9000      	str	r0, [sp, #0]
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f8de 	bl	800aacc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a916:	b29a      	uxth	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2206      	movs	r2, #6
 800a920:	761a      	strb	r2, [r3, #24]
      break;
 800a922:	e0b4      	b.n	800aa8e <USBH_HandleControl+0x2c6>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	795b      	ldrb	r3, [r3, #5]
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f003 fc12 	bl	800e154 <USBH_LL_GetURBState>
 800a930:	4603      	mov	r3, r0
 800a932:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d103      	bne.n	800a942 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2207      	movs	r2, #7
 800a93e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a940:	e0a0      	b.n	800aa84 <USBH_HandleControl+0x2bc>
      else if (URB_Status == USBH_URB_STALL)
 800a942:	7bbb      	ldrb	r3, [r7, #14]
 800a944:	2b05      	cmp	r3, #5
 800a946:	d105      	bne.n	800a954 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	220c      	movs	r2, #12
 800a94c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a94e:	2303      	movs	r3, #3
 800a950:	73fb      	strb	r3, [r7, #15]
      break;
 800a952:	e097      	b.n	800aa84 <USBH_HandleControl+0x2bc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a954:	7bbb      	ldrb	r3, [r7, #14]
 800a956:	2b02      	cmp	r3, #2
 800a958:	d103      	bne.n	800a962 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2205      	movs	r2, #5
 800a95e:	761a      	strb	r2, [r3, #24]
      break;
 800a960:	e090      	b.n	800aa84 <USBH_HandleControl+0x2bc>
        if (URB_Status == USBH_URB_ERROR)
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	2b04      	cmp	r3, #4
 800a966:	f040 808d 	bne.w	800aa84 <USBH_HandleControl+0x2bc>
          phost->Control.state = CTRL_ERROR;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	220b      	movs	r2, #11
 800a96e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a970:	2302      	movs	r3, #2
 800a972:	73fb      	strb	r3, [r7, #15]
      break;
 800a974:	e086      	b.n	800aa84 <USBH_HandleControl+0x2bc>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	791b      	ldrb	r3, [r3, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	2100      	movs	r1, #0
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f8c9 	bl	800ab16 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2208      	movs	r2, #8
 800a994:	761a      	strb	r2, [r3, #24]

      break;
 800a996:	e07a      	b.n	800aa8e <USBH_HandleControl+0x2c6>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	791b      	ldrb	r3, [r3, #4]
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f003 fbd8 	bl	800e154 <USBH_LL_GetURBState>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d105      	bne.n	800a9ba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	220d      	movs	r2, #13
 800a9b2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a9b8:	e066      	b.n	800aa88 <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_ERROR)
 800a9ba:	7bbb      	ldrb	r3, [r7, #14]
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	d103      	bne.n	800a9c8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	220b      	movs	r2, #11
 800a9c4:	761a      	strb	r2, [r3, #24]
      break;
 800a9c6:	e05f      	b.n	800aa88 <USBH_HandleControl+0x2c0>
        if (URB_Status == USBH_URB_STALL)
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	2b05      	cmp	r3, #5
 800a9cc:	d15c      	bne.n	800aa88 <USBH_HandleControl+0x2c0>
          status = USBH_NOT_SUPPORTED;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a9d2:	e059      	b.n	800aa88 <USBH_HandleControl+0x2c0>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	795b      	ldrb	r3, [r3, #5]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	9200      	str	r2, [sp, #0]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	2100      	movs	r1, #0
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f873 	bl	800aacc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	220a      	movs	r2, #10
 800a9f6:	761a      	strb	r2, [r3, #24]
      break;
 800a9f8:	e049      	b.n	800aa8e <USBH_HandleControl+0x2c6>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	795b      	ldrb	r3, [r3, #5]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f003 fba7 	bl	800e154 <USBH_LL_GetURBState>
 800aa06:	4603      	mov	r3, r0
 800aa08:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aa0a:	7bbb      	ldrb	r3, [r7, #14]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d105      	bne.n	800aa1c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	220d      	movs	r2, #13
 800aa18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aa1a:	e037      	b.n	800aa8c <USBH_HandleControl+0x2c4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d103      	bne.n	800aa2a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2209      	movs	r2, #9
 800aa26:	761a      	strb	r2, [r3, #24]
      break;
 800aa28:	e030      	b.n	800aa8c <USBH_HandleControl+0x2c4>
        if (URB_Status == USBH_URB_ERROR)
 800aa2a:	7bbb      	ldrb	r3, [r7, #14]
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	d12d      	bne.n	800aa8c <USBH_HandleControl+0x2c4>
          phost->Control.state = CTRL_ERROR;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	220b      	movs	r2, #11
 800aa34:	761a      	strb	r2, [r3, #24]
      break;
 800aa36:	e029      	b.n	800aa8c <USBH_HandleControl+0x2c4>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	7e5b      	ldrb	r3, [r3, #25]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	b2da      	uxtb	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	765a      	strb	r2, [r3, #25]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	7e5b      	ldrb	r3, [r3, #25]
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d806      	bhi.n	800aa5a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2201      	movs	r2, #1
 800aa56:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800aa58:	e019      	b.n	800aa8e <USBH_HandleControl+0x2c6>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800aa60:	2106      	movs	r1, #6
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800aa72:	2302      	movs	r3, #2
 800aa74:	73fb      	strb	r3, [r7, #15]
      break;
 800aa76:	e00a      	b.n	800aa8e <USBH_HandleControl+0x2c6>

    default:
      break;
 800aa78:	bf00      	nop
 800aa7a:	e008      	b.n	800aa8e <USBH_HandleControl+0x2c6>
      break;
 800aa7c:	bf00      	nop
 800aa7e:	e006      	b.n	800aa8e <USBH_HandleControl+0x2c6>
      break;
 800aa80:	bf00      	nop
 800aa82:	e004      	b.n	800aa8e <USBH_HandleControl+0x2c6>
      break;
 800aa84:	bf00      	nop
 800aa86:	e002      	b.n	800aa8e <USBH_HandleControl+0x2c6>
      break;
 800aa88:	bf00      	nop
 800aa8a:	e000      	b.n	800aa8e <USBH_HandleControl+0x2c6>
      break;
 800aa8c:	bf00      	nop
  }

  return status;
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b088      	sub	sp, #32
 800aa9c:	af04      	add	r7, sp, #16
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aaa6:	79f9      	ldrb	r1, [r7, #7]
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	9303      	str	r3, [sp, #12]
 800aaac:	2308      	movs	r3, #8
 800aaae:	9302      	str	r3, [sp, #8]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	9301      	str	r3, [sp, #4]
 800aab4:	2300      	movs	r3, #0
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	2300      	movs	r3, #0
 800aaba:	2200      	movs	r2, #0
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f003 fb18 	bl	800e0f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b088      	sub	sp, #32
 800aad0:	af04      	add	r7, sp, #16
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	4611      	mov	r1, r2
 800aad8:	461a      	mov	r2, r3
 800aada:	460b      	mov	r3, r1
 800aadc:	80fb      	strh	r3, [r7, #6]
 800aade:	4613      	mov	r3, r2
 800aae0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aaec:	2300      	movs	r3, #0
 800aaee:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aaf0:	7979      	ldrb	r1, [r7, #5]
 800aaf2:	7e3b      	ldrb	r3, [r7, #24]
 800aaf4:	9303      	str	r3, [sp, #12]
 800aaf6:	88fb      	ldrh	r3, [r7, #6]
 800aaf8:	9302      	str	r3, [sp, #8]
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	9301      	str	r3, [sp, #4]
 800aafe:	2301      	movs	r3, #1
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	2300      	movs	r3, #0
 800ab04:	2200      	movs	r2, #0
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f003 faf3 	bl	800e0f2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b088      	sub	sp, #32
 800ab1a:	af04      	add	r7, sp, #16
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	4611      	mov	r1, r2
 800ab22:	461a      	mov	r2, r3
 800ab24:	460b      	mov	r3, r1
 800ab26:	80fb      	strh	r3, [r7, #6]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ab2c:	7979      	ldrb	r1, [r7, #5]
 800ab2e:	2300      	movs	r3, #0
 800ab30:	9303      	str	r3, [sp, #12]
 800ab32:	88fb      	ldrh	r3, [r7, #6]
 800ab34:	9302      	str	r3, [sp, #8]
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	9301      	str	r3, [sp, #4]
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	2300      	movs	r3, #0
 800ab40:	2201      	movs	r2, #1
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f003 fad5 	bl	800e0f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ab48:	2300      	movs	r3, #0

}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b088      	sub	sp, #32
 800ab56:	af04      	add	r7, sp, #16
 800ab58:	60f8      	str	r0, [r7, #12]
 800ab5a:	60b9      	str	r1, [r7, #8]
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	461a      	mov	r2, r3
 800ab60:	460b      	mov	r3, r1
 800ab62:	80fb      	strh	r3, [r7, #6]
 800ab64:	4613      	mov	r3, r2
 800ab66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ab72:	2300      	movs	r3, #0
 800ab74:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ab76:	7979      	ldrb	r1, [r7, #5]
 800ab78:	7e3b      	ldrb	r3, [r7, #24]
 800ab7a:	9303      	str	r3, [sp, #12]
 800ab7c:	88fb      	ldrh	r3, [r7, #6]
 800ab7e:	9302      	str	r3, [sp, #8]
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	9301      	str	r3, [sp, #4]
 800ab84:	2301      	movs	r3, #1
 800ab86:	9300      	str	r3, [sp, #0]
 800ab88:	2302      	movs	r3, #2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f003 fab0 	bl	800e0f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b088      	sub	sp, #32
 800aba0:	af04      	add	r7, sp, #16
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	4611      	mov	r1, r2
 800aba8:	461a      	mov	r2, r3
 800abaa:	460b      	mov	r3, r1
 800abac:	80fb      	strh	r3, [r7, #6]
 800abae:	4613      	mov	r3, r2
 800abb0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800abb2:	7979      	ldrb	r1, [r7, #5]
 800abb4:	2300      	movs	r3, #0
 800abb6:	9303      	str	r3, [sp, #12]
 800abb8:	88fb      	ldrh	r3, [r7, #6]
 800abba:	9302      	str	r3, [sp, #8]
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	9301      	str	r3, [sp, #4]
 800abc0:	2301      	movs	r3, #1
 800abc2:	9300      	str	r3, [sp, #0]
 800abc4:	2302      	movs	r3, #2
 800abc6:	2201      	movs	r2, #1
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f003 fa92 	bl	800e0f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af04      	add	r7, sp, #16
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	4608      	mov	r0, r1
 800abe2:	4611      	mov	r1, r2
 800abe4:	461a      	mov	r2, r3
 800abe6:	4603      	mov	r3, r0
 800abe8:	70fb      	strb	r3, [r7, #3]
 800abea:	460b      	mov	r3, r1
 800abec:	70bb      	strb	r3, [r7, #2]
 800abee:	4613      	mov	r3, r2
 800abf0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800abf2:	7878      	ldrb	r0, [r7, #1]
 800abf4:	78ba      	ldrb	r2, [r7, #2]
 800abf6:	78f9      	ldrb	r1, [r7, #3]
 800abf8:	8b3b      	ldrh	r3, [r7, #24]
 800abfa:	9302      	str	r3, [sp, #8]
 800abfc:	7d3b      	ldrb	r3, [r7, #20]
 800abfe:	9301      	str	r3, [sp, #4]
 800ac00:	7c3b      	ldrb	r3, [r7, #16]
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	4603      	mov	r3, r0
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f003 fa25 	bl	800e056 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b082      	sub	sp, #8
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ac22:	78fb      	ldrb	r3, [r7, #3]
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f003 fa44 	bl	800e0b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	460b      	mov	r3, r1
 800ac40:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f832 	bl	800acac <USBH_GetFreePipe>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ac4c:	89fb      	ldrh	r3, [r7, #14]
 800ac4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d009      	beq.n	800ac6a <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ac56:	78fb      	ldrb	r3, [r7, #3]
 800ac58:	89fa      	ldrh	r2, [r7, #14]
 800ac5a:	f002 020f 	and.w	r2, r2, #15
 800ac5e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	32e0      	adds	r2, #224	; 0xe0
 800ac66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800ac6a:	89fb      	ldrh	r3, [r7, #14]
 800ac6c:	b2db      	uxtb	r3, r3
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	460b      	mov	r3, r1
 800ac80:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ac82:	78fb      	ldrb	r3, [r7, #3]
 800ac84:	2b0a      	cmp	r3, #10
 800ac86:	d80b      	bhi.n	800aca0 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ac88:	78fa      	ldrb	r2, [r7, #3]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	32e0      	adds	r2, #224	; 0xe0
 800ac8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac92:	78fa      	ldrb	r2, [r7, #3]
 800ac94:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	32e0      	adds	r2, #224	; 0xe0
 800ac9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bc80      	pop	{r7}
 800acaa:	4770      	bx	lr

0800acac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800acb4:	2300      	movs	r3, #0
 800acb6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800acb8:	2300      	movs	r3, #0
 800acba:	73fb      	strb	r3, [r7, #15]
 800acbc:	e00e      	b.n	800acdc <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800acbe:	7bfa      	ldrb	r2, [r7, #15]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	32e0      	adds	r2, #224	; 0xe0
 800acc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d102      	bne.n	800acd6 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	e007      	b.n	800ace6 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
 800acd8:	3301      	adds	r3, #1
 800acda:	73fb      	strb	r3, [r7, #15]
 800acdc:	7bfb      	ldrb	r3, [r7, #15]
 800acde:	2b0a      	cmp	r3, #10
 800ace0:	d9ed      	bls.n	800acbe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ace2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	bc80      	pop	{r7}
 800acee:	4770      	bx	lr

0800acf0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	4603      	mov	r3, r0
 800acf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800acfa:	79fb      	ldrb	r3, [r7, #7]
 800acfc:	4a08      	ldr	r2, [pc, #32]	; (800ad20 <disk_status+0x30>)
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	4413      	add	r3, r2
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	79fa      	ldrb	r2, [r7, #7]
 800ad08:	4905      	ldr	r1, [pc, #20]	; (800ad20 <disk_status+0x30>)
 800ad0a:	440a      	add	r2, r1
 800ad0c:	7a12      	ldrb	r2, [r2, #8]
 800ad0e:	4610      	mov	r0, r2
 800ad10:	4798      	blx	r3
 800ad12:	4603      	mov	r3, r0
 800ad14:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ad16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	2000c8a0 	.word	0x2000c8a0

0800ad24 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800ad32:	79fb      	ldrb	r3, [r7, #7]
 800ad34:	4a0d      	ldr	r2, [pc, #52]	; (800ad6c <disk_initialize+0x48>)
 800ad36:	5cd3      	ldrb	r3, [r2, r3]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d111      	bne.n	800ad60 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800ad3c:	79fb      	ldrb	r3, [r7, #7]
 800ad3e:	4a0b      	ldr	r2, [pc, #44]	; (800ad6c <disk_initialize+0x48>)
 800ad40:	2101      	movs	r1, #1
 800ad42:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	4a09      	ldr	r2, [pc, #36]	; (800ad6c <disk_initialize+0x48>)
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	4413      	add	r3, r2
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	79fa      	ldrb	r2, [r7, #7]
 800ad52:	4906      	ldr	r1, [pc, #24]	; (800ad6c <disk_initialize+0x48>)
 800ad54:	440a      	add	r2, r1
 800ad56:	7a12      	ldrb	r2, [r2, #8]
 800ad58:	4610      	mov	r0, r2
 800ad5a:	4798      	blx	r3
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	2000c8a0 	.word	0x2000c8a0

0800ad70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ad70:	b590      	push	{r4, r7, lr}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	607a      	str	r2, [r7, #4]
 800ad7a:	603b      	str	r3, [r7, #0]
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
 800ad82:	4a0a      	ldr	r2, [pc, #40]	; (800adac <disk_read+0x3c>)
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	689c      	ldr	r4, [r3, #8]
 800ad8c:	7bfb      	ldrb	r3, [r7, #15]
 800ad8e:	4a07      	ldr	r2, [pc, #28]	; (800adac <disk_read+0x3c>)
 800ad90:	4413      	add	r3, r2
 800ad92:	7a18      	ldrb	r0, [r3, #8]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	68b9      	ldr	r1, [r7, #8]
 800ad9a:	47a0      	blx	r4
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ada0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	371c      	adds	r7, #28
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd90      	pop	{r4, r7, pc}
 800adaa:	bf00      	nop
 800adac:	2000c8a0 	.word	0x2000c8a0

0800adb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800adb0:	b590      	push	{r4, r7, lr}
 800adb2:	b087      	sub	sp, #28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	607a      	str	r2, [r7, #4]
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	4603      	mov	r3, r0
 800adbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
 800adc2:	4a0a      	ldr	r2, [pc, #40]	; (800adec <disk_write+0x3c>)
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	68dc      	ldr	r4, [r3, #12]
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
 800adce:	4a07      	ldr	r2, [pc, #28]	; (800adec <disk_write+0x3c>)
 800add0:	4413      	add	r3, r2
 800add2:	7a18      	ldrb	r0, [r3, #8]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	68b9      	ldr	r1, [r7, #8]
 800adda:	47a0      	blx	r4
 800addc:	4603      	mov	r3, r0
 800adde:	75fb      	strb	r3, [r7, #23]
  return res;
 800ade0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	371c      	adds	r7, #28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd90      	pop	{r4, r7, pc}
 800adea:	bf00      	nop
 800adec:	2000c8a0 	.word	0x2000c8a0

0800adf0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	4603      	mov	r3, r0
 800adf8:	603a      	str	r2, [r7, #0]
 800adfa:	71fb      	strb	r3, [r7, #7]
 800adfc:	460b      	mov	r3, r1
 800adfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ae00:	79fb      	ldrb	r3, [r7, #7]
 800ae02:	4a09      	ldr	r2, [pc, #36]	; (800ae28 <disk_ioctl+0x38>)
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	691b      	ldr	r3, [r3, #16]
 800ae0c:	79fa      	ldrb	r2, [r7, #7]
 800ae0e:	4906      	ldr	r1, [pc, #24]	; (800ae28 <disk_ioctl+0x38>)
 800ae10:	440a      	add	r2, r1
 800ae12:	7a10      	ldrb	r0, [r2, #8]
 800ae14:	79b9      	ldrb	r1, [r7, #6]
 800ae16:	683a      	ldr	r2, [r7, #0]
 800ae18:	4798      	blx	r3
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	73fb      	strb	r3, [r7, #15]
  return res;
 800ae1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	2000c8a0 	.word	0x2000c8a0

0800ae2c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800ae40:	e007      	b.n	800ae52 <mem_cpy+0x26>
		*d++ = *s++;
 800ae42:	693a      	ldr	r2, [r7, #16]
 800ae44:	1c53      	adds	r3, r2, #1
 800ae46:	613b      	str	r3, [r7, #16]
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	1c59      	adds	r1, r3, #1
 800ae4c:	6179      	str	r1, [r7, #20]
 800ae4e:	7812      	ldrb	r2, [r2, #0]
 800ae50:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	1e5a      	subs	r2, r3, #1
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1f2      	bne.n	800ae42 <mem_cpy+0x16>
}
 800ae5c:	bf00      	nop
 800ae5e:	bf00      	nop
 800ae60:	371c      	adds	r7, #28
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bc80      	pop	{r7}
 800ae66:	4770      	bx	lr

0800ae68 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ae68:	b480      	push	{r7}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800ae78:	e005      	b.n	800ae86 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	1c5a      	adds	r2, r3, #1
 800ae7e:	617a      	str	r2, [r7, #20]
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	b2d2      	uxtb	r2, r2
 800ae84:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	1e5a      	subs	r2, r3, #1
 800ae8a:	607a      	str	r2, [r7, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1f4      	bne.n	800ae7a <mem_set+0x12>
}
 800ae90:	bf00      	nop
 800ae92:	bf00      	nop
 800ae94:	371c      	adds	r7, #28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bc80      	pop	{r7}
 800ae9a:	4770      	bx	lr

0800ae9c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800ae9c:	b480      	push	{r7}
 800ae9e:	b089      	sub	sp, #36	; 0x24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	61fb      	str	r3, [r7, #28]
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800aeb4:	bf00      	nop
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	1e5a      	subs	r2, r3, #1
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00d      	beq.n	800aedc <mem_cmp+0x40>
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	1c5a      	adds	r2, r3, #1
 800aec4:	61fa      	str	r2, [r7, #28]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	4619      	mov	r1, r3
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	1c5a      	adds	r2, r3, #1
 800aece:	61ba      	str	r2, [r7, #24]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	1acb      	subs	r3, r1, r3
 800aed4:	617b      	str	r3, [r7, #20]
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d0ec      	beq.n	800aeb6 <mem_cmp+0x1a>
	return r;
 800aedc:	697b      	ldr	r3, [r7, #20]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3724      	adds	r7, #36	; 0x24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bc80      	pop	{r7}
 800aee6:	4770      	bx	lr

0800aee8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aef2:	e002      	b.n	800aefa <chk_chr+0x12>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3301      	adds	r3, #1
 800aef8:	607b      	str	r3, [r7, #4]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d005      	beq.n	800af0e <chk_chr+0x26>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d1f2      	bne.n	800aef4 <chk_chr+0xc>
	return *str;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	781b      	ldrb	r3, [r3, #0]
}
 800af12:	4618      	mov	r0, r3
 800af14:	370c      	adds	r7, #12
 800af16:	46bd      	mov	sp, r7
 800af18:	bc80      	pop	{r7}
 800af1a:	4770      	bx	lr

0800af1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af26:	2300      	movs	r3, #0
 800af28:	60bb      	str	r3, [r7, #8]
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	60fb      	str	r3, [r7, #12]
 800af2e:	e038      	b.n	800afa2 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800af30:	492f      	ldr	r1, [pc, #188]	; (800aff0 <chk_lock+0xd4>)
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	4613      	mov	r3, r2
 800af36:	005b      	lsls	r3, r3, #1
 800af38:	4413      	add	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	440b      	add	r3, r1
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d029      	beq.n	800af98 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800af44:	492a      	ldr	r1, [pc, #168]	; (800aff0 <chk_lock+0xd4>)
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	4613      	mov	r3, r2
 800af4a:	005b      	lsls	r3, r3, #1
 800af4c:	4413      	add	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	440b      	add	r3, r1
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d11e      	bne.n	800af9c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800af5e:	4924      	ldr	r1, [pc, #144]	; (800aff0 <chk_lock+0xd4>)
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	4613      	mov	r3, r2
 800af64:	005b      	lsls	r3, r3, #1
 800af66:	4413      	add	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	440b      	add	r3, r1
 800af6c:	3304      	adds	r3, #4
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800af76:	429a      	cmp	r2, r3
 800af78:	d110      	bne.n	800af9c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800af7a:	491d      	ldr	r1, [pc, #116]	; (800aff0 <chk_lock+0xd4>)
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	4613      	mov	r3, r2
 800af80:	005b      	lsls	r3, r3, #1
 800af82:	4413      	add	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	440b      	add	r3, r1
 800af88:	3308      	adds	r3, #8
 800af8a:	881a      	ldrh	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800af92:	429a      	cmp	r2, r3
 800af94:	d102      	bne.n	800af9c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800af96:	e007      	b.n	800afa8 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800af98:	2301      	movs	r3, #1
 800af9a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3301      	adds	r3, #1
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d9c3      	bls.n	800af30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d109      	bne.n	800afc2 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d102      	bne.n	800afba <chk_lock+0x9e>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d101      	bne.n	800afbe <chk_lock+0xa2>
 800afba:	2300      	movs	r3, #0
 800afbc:	e013      	b.n	800afe6 <chk_lock+0xca>
 800afbe:	2312      	movs	r3, #18
 800afc0:	e011      	b.n	800afe6 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10b      	bne.n	800afe0 <chk_lock+0xc4>
 800afc8:	4909      	ldr	r1, [pc, #36]	; (800aff0 <chk_lock+0xd4>)
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	4613      	mov	r3, r2
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	4413      	add	r3, r2
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	440b      	add	r3, r1
 800afd6:	330a      	adds	r3, #10
 800afd8:	881b      	ldrh	r3, [r3, #0]
 800afda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afde:	d101      	bne.n	800afe4 <chk_lock+0xc8>
 800afe0:	2310      	movs	r3, #16
 800afe2:	e000      	b.n	800afe6 <chk_lock+0xca>
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3714      	adds	r7, #20
 800afea:	46bd      	mov	sp, r7
 800afec:	bc80      	pop	{r7}
 800afee:	4770      	bx	lr
 800aff0:	2000c888 	.word	0x2000c888

0800aff4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800affa:	2300      	movs	r3, #0
 800affc:	607b      	str	r3, [r7, #4]
 800affe:	e002      	b.n	800b006 <enq_lock+0x12>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	3301      	adds	r3, #1
 800b004:	607b      	str	r3, [r7, #4]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d809      	bhi.n	800b020 <enq_lock+0x2c>
 800b00c:	490a      	ldr	r1, [pc, #40]	; (800b038 <enq_lock+0x44>)
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	4613      	mov	r3, r2
 800b012:	005b      	lsls	r3, r3, #1
 800b014:	4413      	add	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	440b      	add	r3, r1
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1ef      	bne.n	800b000 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b02      	cmp	r3, #2
 800b024:	bf14      	ite	ne
 800b026:	2301      	movne	r3, #1
 800b028:	2300      	moveq	r3, #0
 800b02a:	b2db      	uxtb	r3, r3
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	bc80      	pop	{r7}
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	2000c888 	.word	0x2000c888

0800b03c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b046:	2300      	movs	r3, #0
 800b048:	60fb      	str	r3, [r7, #12]
 800b04a:	e02b      	b.n	800b0a4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800b04c:	4955      	ldr	r1, [pc, #340]	; (800b1a4 <inc_lock+0x168>)
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	4613      	mov	r3, r2
 800b052:	005b      	lsls	r3, r3, #1
 800b054:	4413      	add	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	440b      	add	r3, r1
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b062:	429a      	cmp	r2, r3
 800b064:	d11b      	bne.n	800b09e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800b066:	494f      	ldr	r1, [pc, #316]	; (800b1a4 <inc_lock+0x168>)
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	4613      	mov	r3, r2
 800b06c:	005b      	lsls	r3, r3, #1
 800b06e:	4413      	add	r3, r2
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	440b      	add	r3, r1
 800b074:	3304      	adds	r3, #4
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800b07e:	429a      	cmp	r2, r3
 800b080:	d10d      	bne.n	800b09e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800b082:	4948      	ldr	r1, [pc, #288]	; (800b1a4 <inc_lock+0x168>)
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	4613      	mov	r3, r2
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	4413      	add	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	440b      	add	r3, r1
 800b090:	3308      	adds	r3, #8
 800b092:	881a      	ldrh	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d006      	beq.n	800b0ac <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	60fb      	str	r3, [r7, #12]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d9d0      	bls.n	800b04c <inc_lock+0x10>
 800b0aa:	e000      	b.n	800b0ae <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800b0ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d145      	bne.n	800b140 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	60fb      	str	r3, [r7, #12]
 800b0b8:	e002      	b.n	800b0c0 <inc_lock+0x84>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	60fb      	str	r3, [r7, #12]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d809      	bhi.n	800b0da <inc_lock+0x9e>
 800b0c6:	4937      	ldr	r1, [pc, #220]	; (800b1a4 <inc_lock+0x168>)
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	005b      	lsls	r3, r3, #1
 800b0ce:	4413      	add	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	440b      	add	r3, r1
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1ef      	bne.n	800b0ba <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d101      	bne.n	800b0e4 <inc_lock+0xa8>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	e05a      	b.n	800b19a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800b0ea:	482e      	ldr	r0, [pc, #184]	; (800b1a4 <inc_lock+0x168>)
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	005b      	lsls	r3, r3, #1
 800b0f2:	4413      	add	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4403      	add	r3, r0
 800b0f8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800b100:	4828      	ldr	r0, [pc, #160]	; (800b1a4 <inc_lock+0x168>)
 800b102:	68fa      	ldr	r2, [r7, #12]
 800b104:	4613      	mov	r3, r2
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	4413      	add	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	4403      	add	r3, r0
 800b10e:	3304      	adds	r3, #4
 800b110:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800b118:	4922      	ldr	r1, [pc, #136]	; (800b1a4 <inc_lock+0x168>)
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	4613      	mov	r3, r2
 800b11e:	005b      	lsls	r3, r3, #1
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	440b      	add	r3, r1
 800b126:	3308      	adds	r3, #8
 800b128:	4602      	mov	r2, r0
 800b12a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800b12c:	491d      	ldr	r1, [pc, #116]	; (800b1a4 <inc_lock+0x168>)
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	4613      	mov	r3, r2
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	4413      	add	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	440b      	add	r3, r1
 800b13a:	330a      	adds	r3, #10
 800b13c:	2200      	movs	r2, #0
 800b13e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00c      	beq.n	800b160 <inc_lock+0x124>
 800b146:	4917      	ldr	r1, [pc, #92]	; (800b1a4 <inc_lock+0x168>)
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	4613      	mov	r3, r2
 800b14c:	005b      	lsls	r3, r3, #1
 800b14e:	4413      	add	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	440b      	add	r3, r1
 800b154:	330a      	adds	r3, #10
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <inc_lock+0x124>
 800b15c:	2300      	movs	r3, #0
 800b15e:	e01c      	b.n	800b19a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10b      	bne.n	800b17e <inc_lock+0x142>
 800b166:	490f      	ldr	r1, [pc, #60]	; (800b1a4 <inc_lock+0x168>)
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	4613      	mov	r3, r2
 800b16c:	005b      	lsls	r3, r3, #1
 800b16e:	4413      	add	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	440b      	add	r3, r1
 800b174:	330a      	adds	r3, #10
 800b176:	881b      	ldrh	r3, [r3, #0]
 800b178:	3301      	adds	r3, #1
 800b17a:	b299      	uxth	r1, r3
 800b17c:	e001      	b.n	800b182 <inc_lock+0x146>
 800b17e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b182:	4808      	ldr	r0, [pc, #32]	; (800b1a4 <inc_lock+0x168>)
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	4613      	mov	r3, r2
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	4413      	add	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4403      	add	r3, r0
 800b190:	330a      	adds	r3, #10
 800b192:	460a      	mov	r2, r1
 800b194:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	3301      	adds	r3, #1
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bc80      	pop	{r7}
 800b1a2:	4770      	bx	lr
 800b1a4:	2000c888 	.word	0x2000c888

0800b1a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	607b      	str	r3, [r7, #4]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d82e      	bhi.n	800b21a <dec_lock+0x72>
		n = Files[i].ctr;
 800b1bc:	491b      	ldr	r1, [pc, #108]	; (800b22c <dec_lock+0x84>)
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	005b      	lsls	r3, r3, #1
 800b1c4:	4413      	add	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	440b      	add	r3, r1
 800b1ca:	330a      	adds	r3, #10
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b1d0:	89fb      	ldrh	r3, [r7, #14]
 800b1d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1d6:	d101      	bne.n	800b1dc <dec_lock+0x34>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800b1dc:	89fb      	ldrh	r3, [r7, #14]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d002      	beq.n	800b1e8 <dec_lock+0x40>
 800b1e2:	89fb      	ldrh	r3, [r7, #14]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b1e8:	4910      	ldr	r1, [pc, #64]	; (800b22c <dec_lock+0x84>)
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	005b      	lsls	r3, r3, #1
 800b1f0:	4413      	add	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	440b      	add	r3, r1
 800b1f6:	330a      	adds	r3, #10
 800b1f8:	89fa      	ldrh	r2, [r7, #14]
 800b1fa:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b1fc:	89fb      	ldrh	r3, [r7, #14]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d108      	bne.n	800b214 <dec_lock+0x6c>
 800b202:	490a      	ldr	r1, [pc, #40]	; (800b22c <dec_lock+0x84>)
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	4613      	mov	r3, r2
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	4413      	add	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	440b      	add	r3, r1
 800b210:	2200      	movs	r2, #0
 800b212:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b214:	2300      	movs	r3, #0
 800b216:	737b      	strb	r3, [r7, #13]
 800b218:	e001      	b.n	800b21e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b21a:	2302      	movs	r3, #2
 800b21c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b21e:	7b7b      	ldrb	r3, [r7, #13]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3714      	adds	r7, #20
 800b224:	46bd      	mov	sp, r7
 800b226:	bc80      	pop	{r7}
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	2000c888 	.word	0x2000c888

0800b230 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b238:	2300      	movs	r3, #0
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	e016      	b.n	800b26c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b23e:	4910      	ldr	r1, [pc, #64]	; (800b280 <clear_lock+0x50>)
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4613      	mov	r3, r2
 800b244:	005b      	lsls	r3, r3, #1
 800b246:	4413      	add	r3, r2
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	440b      	add	r3, r1
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	429a      	cmp	r2, r3
 800b252:	d108      	bne.n	800b266 <clear_lock+0x36>
 800b254:	490a      	ldr	r1, [pc, #40]	; (800b280 <clear_lock+0x50>)
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	4613      	mov	r3, r2
 800b25a:	005b      	lsls	r3, r3, #1
 800b25c:	4413      	add	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	440b      	add	r3, r1
 800b262:	2200      	movs	r2, #0
 800b264:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3301      	adds	r3, #1
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d9e5      	bls.n	800b23e <clear_lock+0xe>
	}
}
 800b272:	bf00      	nop
 800b274:	bf00      	nop
 800b276:	3714      	adds	r7, #20
 800b278:	46bd      	mov	sp, r7
 800b27a:	bc80      	pop	{r7}
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	2000c888 	.word	0x2000c888

0800b284 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b28c:	2300      	movs	r3, #0
 800b28e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800b296:	2b00      	cmp	r3, #0
 800b298:	d038      	beq.n	800b30c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800b2a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b2a8:	6879      	ldr	r1, [r7, #4]
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	697a      	ldr	r2, [r7, #20]
 800b2ae:	f7ff fd7f 	bl	800adb0 <disk_write>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <sync_window+0x3a>
			res = FR_DISK_ERR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	73fb      	strb	r3, [r7, #15]
 800b2bc:	e026      	b.n	800b30c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b2cc:	697a      	ldr	r2, [r7, #20]
 800b2ce:	1ad2      	subs	r2, r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d218      	bcs.n	800b30c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b2e0:	613b      	str	r3, [r7, #16]
 800b2e2:	e010      	b.n	800b306 <sync_window+0x82>
					wsect += fs->fsize;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b2f6:	6879      	ldr	r1, [r7, #4]
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	697a      	ldr	r2, [r7, #20]
 800b2fc:	f7ff fd58 	bl	800adb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	3b01      	subs	r3, #1
 800b304:	613b      	str	r3, [r7, #16]
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d8eb      	bhi.n	800b2e4 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3718      	adds	r7, #24
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b084      	sub	sp, #16
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d01b      	beq.n	800b368 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f7ff ffa7 	bl	800b284 <sync_window>
 800b336:	4603      	mov	r3, r0
 800b338:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b33a:	7bfb      	ldrb	r3, [r7, #15]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d113      	bne.n	800b368 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b346:	6879      	ldr	r1, [r7, #4]
 800b348:	2301      	movs	r3, #1
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	f7ff fd10 	bl	800ad70 <disk_read>
 800b350:	4603      	mov	r3, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	d004      	beq.n	800b360 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b356:	f04f 33ff 	mov.w	r3, #4294967295
 800b35a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 800b368:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff ff82 	bl	800b284 <sync_window>
 800b380:	4603      	mov	r3, r0
 800b382:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b384:	7bfb      	ldrb	r3, [r7, #15]
 800b386:	2b00      	cmp	r3, #0
 800b388:	f040 809b 	bne.w	800b4c2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b392:	2b03      	cmp	r3, #3
 800b394:	f040 8088 	bne.w	800b4a8 <sync_fs+0x136>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	f040 8082 	bne.w	800b4a8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7ff fd5b 	bl	800ae68 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2255      	movs	r2, #85	; 0x55
 800b3b6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	22aa      	movs	r2, #170	; 0xaa
 800b3be:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2252      	movs	r2, #82	; 0x52
 800b3c6:	701a      	strb	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2252      	movs	r2, #82	; 0x52
 800b3cc:	705a      	strb	r2, [r3, #1]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2261      	movs	r2, #97	; 0x61
 800b3d2:	709a      	strb	r2, [r3, #2]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2241      	movs	r2, #65	; 0x41
 800b3d8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2272      	movs	r2, #114	; 0x72
 800b3de:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2272      	movs	r2, #114	; 0x72
 800b3e6:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2241      	movs	r2, #65	; 0x41
 800b3ee:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2261      	movs	r2, #97	; 0x61
 800b3f6:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b400:	b2da      	uxtb	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b40e:	b29b      	uxth	r3, r3
 800b410:	0a1b      	lsrs	r3, r3, #8
 800b412:	b29b      	uxth	r3, r3
 800b414:	b2da      	uxtb	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b422:	0c1b      	lsrs	r3, r3, #16
 800b424:	b2da      	uxtb	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b432:	0e1b      	lsrs	r3, r3, #24
 800b434:	b2da      	uxtb	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b442:	b2da      	uxtb	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b450:	b29b      	uxth	r3, r3
 800b452:	0a1b      	lsrs	r3, r3, #8
 800b454:	b29b      	uxth	r3, r3
 800b456:	b2da      	uxtb	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b464:	0c1b      	lsrs	r3, r3, #16
 800b466:	b2da      	uxtb	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b474:	0e1b      	lsrs	r3, r3, #24
 800b476:	b2da      	uxtb	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b484:	1c5a      	adds	r2, r3, #1
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b492:	6879      	ldr	r1, [r7, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800b49a:	2301      	movs	r3, #1
 800b49c:	f7ff fc88 	bl	800adb0 <disk_write>
			fs->fsi_flag = 0;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7ff fc9c 	bl	800adf0 <disk_ioctl>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	3b02      	subs	r3, #2
 800b4da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b4e2:	3b02      	subs	r3, #2
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d301      	bcc.n	800b4ee <clust2sect+0x22>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e00a      	b.n	800b504 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	fb03 f202 	mul.w	r2, r3, r2
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800b502:	4413      	add	r3, r2
}
 800b504:	4618      	mov	r0, r3
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	bc80      	pop	{r7}
 800b50c:	4770      	bx	lr

0800b50e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b086      	sub	sp, #24
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d905      	bls.n	800b52a <get_fat+0x1c>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b524:	683a      	ldr	r2, [r7, #0]
 800b526:	429a      	cmp	r2, r3
 800b528:	d302      	bcc.n	800b530 <get_fat+0x22>
		val = 1;	/* Internal error */
 800b52a:	2301      	movs	r3, #1
 800b52c:	617b      	str	r3, [r7, #20]
 800b52e:	e0a3      	b.n	800b678 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b530:	f04f 33ff 	mov.w	r3, #4294967295
 800b534:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b53c:	2b03      	cmp	r3, #3
 800b53e:	d068      	beq.n	800b612 <get_fat+0x104>
 800b540:	2b03      	cmp	r3, #3
 800b542:	f300 808f 	bgt.w	800b664 <get_fat+0x156>
 800b546:	2b01      	cmp	r3, #1
 800b548:	d002      	beq.n	800b550 <get_fat+0x42>
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	d040      	beq.n	800b5d0 <get_fat+0xc2>
 800b54e:	e089      	b.n	800b664 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	60fb      	str	r3, [r7, #12]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	085b      	lsrs	r3, r3, #1
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	4413      	add	r3, r2
 800b55c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	0a5b      	lsrs	r3, r3, #9
 800b568:	4413      	add	r3, r2
 800b56a:	4619      	mov	r1, r3
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff fed2 	bl	800b316 <move_window>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d178      	bne.n	800b66a <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	1c5a      	adds	r2, r3, #1
 800b57c:	60fa      	str	r2, [r7, #12]
 800b57e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	5cd3      	ldrb	r3, [r2, r3]
 800b586:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	0a5b      	lsrs	r3, r3, #9
 800b592:	4413      	add	r3, r2
 800b594:	4619      	mov	r1, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7ff febd 	bl	800b316 <move_window>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d165      	bne.n	800b66e <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	5cd3      	ldrb	r3, [r2, r3]
 800b5ac:	021b      	lsls	r3, r3, #8
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d002      	beq.n	800b5c6 <get_fat+0xb8>
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	091b      	lsrs	r3, r3, #4
 800b5c4:	e002      	b.n	800b5cc <get_fat+0xbe>
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5cc:	617b      	str	r3, [r7, #20]
			break;
 800b5ce:	e053      	b.n	800b678 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	0a1b      	lsrs	r3, r3, #8
 800b5da:	4413      	add	r3, r2
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7ff fe99 	bl	800b316 <move_window>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d143      	bne.n	800b672 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	005b      	lsls	r3, r3, #1
 800b5ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	021b      	lsls	r3, r3, #8
 800b600:	b21a      	sxth	r2, r3
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	b21b      	sxth	r3, r3
 800b608:	4313      	orrs	r3, r2
 800b60a:	b21b      	sxth	r3, r3
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	617b      	str	r3, [r7, #20]
			break;
 800b610:	e032      	b.n	800b678 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	09db      	lsrs	r3, r3, #7
 800b61c:	4413      	add	r3, r2
 800b61e:	4619      	mov	r1, r3
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff fe78 	bl	800b316 <move_window>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d124      	bne.n	800b676 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	4413      	add	r3, r2
 800b638:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	3303      	adds	r3, #3
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	061a      	lsls	r2, r3, #24
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	3302      	adds	r3, #2
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	041b      	lsls	r3, r3, #16
 800b64a:	4313      	orrs	r3, r2
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	3201      	adds	r2, #1
 800b650:	7812      	ldrb	r2, [r2, #0]
 800b652:	0212      	lsls	r2, r2, #8
 800b654:	4313      	orrs	r3, r2
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	7812      	ldrb	r2, [r2, #0]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b660:	617b      	str	r3, [r7, #20]
			break;
 800b662:	e009      	b.n	800b678 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800b664:	2301      	movs	r3, #1
 800b666:	617b      	str	r3, [r7, #20]
 800b668:	e006      	b.n	800b678 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b66a:	bf00      	nop
 800b66c:	e004      	b.n	800b678 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b66e:	bf00      	nop
 800b670:	e002      	b.n	800b678 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b672:	bf00      	nop
 800b674:	e000      	b.n	800b678 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b676:	bf00      	nop
		}
	}

	return val;
 800b678:	697b      	ldr	r3, [r7, #20]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3718      	adds	r7, #24
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b088      	sub	sp, #32
 800b686:	af00      	add	r7, sp, #0
 800b688:	60f8      	str	r0, [r7, #12]
 800b68a:	60b9      	str	r1, [r7, #8]
 800b68c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	2b01      	cmp	r3, #1
 800b692:	d905      	bls.n	800b6a0 <put_fat+0x1e>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d302      	bcc.n	800b6a6 <put_fat+0x24>
		res = FR_INT_ERR;
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	77fb      	strb	r3, [r7, #31]
 800b6a4:	e0f6      	b.n	800b894 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b6ac:	2b03      	cmp	r3, #3
 800b6ae:	f000 809e 	beq.w	800b7ee <put_fat+0x16c>
 800b6b2:	2b03      	cmp	r3, #3
 800b6b4:	f300 80e4 	bgt.w	800b880 <put_fat+0x1fe>
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d002      	beq.n	800b6c2 <put_fat+0x40>
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d06f      	beq.n	800b7a0 <put_fat+0x11e>
 800b6c0:	e0de      	b.n	800b880 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	617b      	str	r3, [r7, #20]
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	085b      	lsrs	r3, r3, #1
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	0a5b      	lsrs	r3, r3, #9
 800b6da:	4413      	add	r3, r2
 800b6dc:	4619      	mov	r1, r3
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f7ff fe19 	bl	800b316 <move_window>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6e8:	7ffb      	ldrb	r3, [r7, #31]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f040 80cb 	bne.w	800b886 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	617a      	str	r2, [r7, #20]
 800b6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	f003 0301 	and.w	r3, r3, #1
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00d      	beq.n	800b726 <put_fat+0xa4>
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	b25b      	sxtb	r3, r3
 800b710:	f003 030f 	and.w	r3, r3, #15
 800b714:	b25a      	sxtb	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	011b      	lsls	r3, r3, #4
 800b71c:	b25b      	sxtb	r3, r3
 800b71e:	4313      	orrs	r3, r2
 800b720:	b25b      	sxtb	r3, r3
 800b722:	b2db      	uxtb	r3, r3
 800b724:	e001      	b.n	800b72a <put_fat+0xa8>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	69ba      	ldr	r2, [r7, #24]
 800b72c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	0a5b      	lsrs	r3, r3, #9
 800b740:	4413      	add	r3, r2
 800b742:	4619      	mov	r1, r3
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f7ff fde6 	bl	800b316 <move_window>
 800b74a:	4603      	mov	r3, r0
 800b74c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b74e:	7ffb      	ldrb	r3, [r7, #31]
 800b750:	2b00      	cmp	r3, #0
 800b752:	f040 809a 	bne.w	800b88a <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	4413      	add	r3, r2
 800b760:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	f003 0301 	and.w	r3, r3, #1
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d003      	beq.n	800b774 <put_fat+0xf2>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	091b      	lsrs	r3, r3, #4
 800b770:	b2db      	uxtb	r3, r3
 800b772:	e00e      	b.n	800b792 <put_fat+0x110>
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	b25b      	sxtb	r3, r3
 800b77a:	f023 030f 	bic.w	r3, r3, #15
 800b77e:	b25a      	sxtb	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	0a1b      	lsrs	r3, r3, #8
 800b784:	b25b      	sxtb	r3, r3
 800b786:	f003 030f 	and.w	r3, r3, #15
 800b78a:	b25b      	sxtb	r3, r3
 800b78c:	4313      	orrs	r3, r2
 800b78e:	b25b      	sxtb	r3, r3
 800b790:	b2db      	uxtb	r3, r3
 800b792:	69ba      	ldr	r2, [r7, #24]
 800b794:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800b79e:	e079      	b.n	800b894 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	0a1b      	lsrs	r3, r3, #8
 800b7aa:	4413      	add	r3, r2
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f7ff fdb1 	bl	800b316 <move_window>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b7b8:	7ffb      	ldrb	r3, [r7, #31]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d167      	bne.n	800b88e <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	005b      	lsls	r3, r3, #1
 800b7c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	701a      	strb	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	0a1b      	lsrs	r3, r3, #8
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	b2d2      	uxtb	r2, r2
 800b7e2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800b7ec:	e052      	b.n	800b894 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	09db      	lsrs	r3, r3, #7
 800b7f8:	4413      	add	r3, r2
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f7ff fd8a 	bl	800b316 <move_window>
 800b802:	4603      	mov	r3, r0
 800b804:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b806:	7ffb      	ldrb	r3, [r7, #31]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d142      	bne.n	800b892 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	4413      	add	r3, r2
 800b818:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	3303      	adds	r3, #3
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	061a      	lsls	r2, r3, #24
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	3302      	adds	r3, #2
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	041b      	lsls	r3, r3, #16
 800b82a:	4313      	orrs	r3, r2
 800b82c:	69ba      	ldr	r2, [r7, #24]
 800b82e:	3201      	adds	r2, #1
 800b830:	7812      	ldrb	r2, [r2, #0]
 800b832:	0212      	lsls	r2, r2, #8
 800b834:	4313      	orrs	r3, r2
 800b836:	69ba      	ldr	r2, [r7, #24]
 800b838:	7812      	ldrb	r2, [r2, #0]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	4313      	orrs	r3, r2
 800b844:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	701a      	strb	r2, [r3, #0]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	b29b      	uxth	r3, r3
 800b852:	0a1b      	lsrs	r3, r3, #8
 800b854:	b29a      	uxth	r2, r3
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	3301      	adds	r3, #1
 800b85a:	b2d2      	uxtb	r2, r2
 800b85c:	701a      	strb	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	0c1a      	lsrs	r2, r3, #16
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	3302      	adds	r3, #2
 800b866:	b2d2      	uxtb	r2, r2
 800b868:	701a      	strb	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	0e1a      	lsrs	r2, r3, #24
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	3303      	adds	r3, #3
 800b872:	b2d2      	uxtb	r2, r2
 800b874:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2201      	movs	r2, #1
 800b87a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800b87e:	e009      	b.n	800b894 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800b880:	2302      	movs	r3, #2
 800b882:	77fb      	strb	r3, [r7, #31]
 800b884:	e006      	b.n	800b894 <put_fat+0x212>
			if (res != FR_OK) break;
 800b886:	bf00      	nop
 800b888:	e004      	b.n	800b894 <put_fat+0x212>
			if (res != FR_OK) break;
 800b88a:	bf00      	nop
 800b88c:	e002      	b.n	800b894 <put_fat+0x212>
			if (res != FR_OK) break;
 800b88e:	bf00      	nop
 800b890:	e000      	b.n	800b894 <put_fat+0x212>
			if (res != FR_OK) break;
 800b892:	bf00      	nop
		}
	}

	return res;
 800b894:	7ffb      	ldrb	r3, [r7, #31]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3720      	adds	r7, #32
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b084      	sub	sp, #16
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d905      	bls.n	800b8ba <remove_chain+0x1c>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8b4:	683a      	ldr	r2, [r7, #0]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d302      	bcc.n	800b8c0 <remove_chain+0x22>
		res = FR_INT_ERR;
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	73fb      	strb	r3, [r7, #15]
 800b8be:	e043      	b.n	800b948 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800b8c4:	e036      	b.n	800b934 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f7ff fe20 	bl	800b50e <get_fat>
 800b8ce:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d035      	beq.n	800b942 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d102      	bne.n	800b8e2 <remove_chain+0x44>
 800b8dc:	2302      	movs	r3, #2
 800b8de:	73fb      	strb	r3, [r7, #15]
 800b8e0:	e032      	b.n	800b948 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e8:	d102      	bne.n	800b8f0 <remove_chain+0x52>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	73fb      	strb	r3, [r7, #15]
 800b8ee:	e02b      	b.n	800b948 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	6839      	ldr	r1, [r7, #0]
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff fec4 	bl	800b682 <put_fat>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b8fe:	7bfb      	ldrb	r3, [r7, #15]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d120      	bne.n	800b946 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b90e:	d00f      	beq.n	800b930 <remove_chain+0x92>
				fs->free_clust++;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b916:	1c5a      	adds	r2, r3, #1
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800b924:	f043 0301 	orr.w	r3, r3, #1
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b93a:	683a      	ldr	r2, [r7, #0]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d3c2      	bcc.n	800b8c6 <remove_chain+0x28>
 800b940:	e002      	b.n	800b948 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800b942:	bf00      	nop
 800b944:	e000      	b.n	800b948 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800b946:	bf00      	nop
		}
	}

	return res;
 800b948:	7bfb      	ldrb	r3, [r7, #15]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b086      	sub	sp, #24
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
 800b95a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10f      	bne.n	800b982 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b968:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d005      	beq.n	800b97c <create_chain+0x2a>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d31c      	bcc.n	800b9b6 <create_chain+0x64>
 800b97c:	2301      	movs	r3, #1
 800b97e:	613b      	str	r3, [r7, #16]
 800b980:	e019      	b.n	800b9b6 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800b982:	6839      	ldr	r1, [r7, #0]
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7ff fdc2 	bl	800b50e <get_fat>
 800b98a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d801      	bhi.n	800b996 <create_chain+0x44>
 800b992:	2301      	movs	r3, #1
 800b994:	e076      	b.n	800ba84 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b99c:	d101      	bne.n	800b9a2 <create_chain+0x50>
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	e070      	b.n	800ba84 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d201      	bcs.n	800b9b2 <create_chain+0x60>
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	e068      	b.n	800ba84 <create_chain+0x132>
		scl = clst;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d307      	bcc.n	800b9dc <create_chain+0x8a>
			ncl = 2;
 800b9cc:	2302      	movs	r3, #2
 800b9ce:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d901      	bls.n	800b9dc <create_chain+0x8a>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e053      	b.n	800ba84 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800b9dc:	6979      	ldr	r1, [r7, #20]
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f7ff fd95 	bl	800b50e <get_fat>
 800b9e4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00e      	beq.n	800ba0a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f2:	d002      	beq.n	800b9fa <create_chain+0xa8>
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d101      	bne.n	800b9fe <create_chain+0xac>
			return cs;
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	e042      	b.n	800ba84 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800b9fe:	697a      	ldr	r2, [r7, #20]
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d1d9      	bne.n	800b9ba <create_chain+0x68>
 800ba06:	2300      	movs	r3, #0
 800ba08:	e03c      	b.n	800ba84 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800ba0a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800ba0c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800ba10:	6979      	ldr	r1, [r7, #20]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff fe35 	bl	800b682 <put_fat>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800ba1c:	7bfb      	ldrb	r3, [r7, #15]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d109      	bne.n	800ba36 <create_chain+0xe4>
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d006      	beq.n	800ba36 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800ba28:	697a      	ldr	r2, [r7, #20]
 800ba2a:	6839      	ldr	r1, [r7, #0]
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7ff fe28 	bl	800b682 <put_fat>
 800ba32:	4603      	mov	r3, r0
 800ba34:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d11a      	bne.n	800ba72 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ba4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4e:	d018      	beq.n	800ba82 <create_chain+0x130>
			fs->free_clust--;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ba56:	1e5a      	subs	r2, r3, #1
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800ba64:	f043 0301 	orr.w	r3, r3, #1
 800ba68:	b2da      	uxtb	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800ba70:	e007      	b.n	800ba82 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d102      	bne.n	800ba7e <create_chain+0x12c>
 800ba78:	f04f 33ff 	mov.w	r3, #4294967295
 800ba7c:	e000      	b.n	800ba80 <create_chain+0x12e>
 800ba7e:	2301      	movs	r3, #1
 800ba80:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800ba82:	697b      	ldr	r3, [r7, #20]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b087      	sub	sp, #28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	0a5b      	lsrs	r3, r3, #9
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800baaa:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800baae:	fbb3 f3f2 	udiv	r3, r3, r2
 800bab2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	1d1a      	adds	r2, r3, #4
 800bab8:	613a      	str	r2, [r7, #16]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d101      	bne.n	800bac8 <clmt_clust+0x3c>
 800bac4:	2300      	movs	r3, #0
 800bac6:	e010      	b.n	800baea <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800bac8:	697a      	ldr	r2, [r7, #20]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d307      	bcc.n	800bae0 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800bad0:	697a      	ldr	r2, [r7, #20]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	617b      	str	r3, [r7, #20]
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	3304      	adds	r3, #4
 800badc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bade:	e7e9      	b.n	800bab4 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800bae0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	4413      	add	r3, r2
}
 800baea:	4618      	mov	r0, r3
 800baec:	371c      	adds	r7, #28
 800baee:	46bd      	mov	sp, r7
 800baf0:	bc80      	pop	{r7}
 800baf2:	4770      	bx	lr

0800baf4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bb0e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d007      	beq.n	800bb26 <dir_sdi+0x32>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d301      	bcc.n	800bb2a <dir_sdi+0x36>
		return FR_INT_ERR;
 800bb26:	2302      	movs	r3, #2
 800bb28:	e074      	b.n	800bc14 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10c      	bne.n	800bb4a <dir_sdi+0x56>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	d105      	bne.n	800bb4a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb44:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800bb48:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d111      	bne.n	800bb74 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb56:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d301      	bcc.n	800bb66 <dir_sdi+0x72>
			return FR_INT_ERR;
 800bb62:	2302      	movs	r3, #2
 800bb64:	e056      	b.n	800bc14 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb6c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800bb70:	613b      	str	r3, [r7, #16]
 800bb72:	e032      	b.n	800bbda <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb7a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bb7e:	011b      	lsls	r3, r3, #4
 800bb80:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800bb82:	e01e      	b.n	800bbc2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb8a:	6979      	ldr	r1, [r7, #20]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7ff fcbe 	bl	800b50e <get_fat>
 800bb92:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9a:	d101      	bne.n	800bba0 <dir_sdi+0xac>
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e039      	b.n	800bc14 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d907      	bls.n	800bbb6 <dir_sdi+0xc2>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bbac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d301      	bcc.n	800bbba <dir_sdi+0xc6>
				return FR_INT_ERR;
 800bbb6:	2302      	movs	r3, #2
 800bbb8:	e02c      	b.n	800bc14 <dir_sdi+0x120>
			idx -= ic;
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	1ad3      	subs	r3, r2, r3
 800bbc0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d2dc      	bcs.n	800bb84 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bbd0:	6979      	ldr	r1, [r7, #20]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7ff fc7a 	bl	800b4cc <clust2sect>
 800bbd8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d101      	bne.n	800bbec <dir_sdi+0xf8>
 800bbe8:	2302      	movs	r3, #2
 800bbea:	e013      	b.n	800bc14 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	091a      	lsrs	r2, r3, #4
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	441a      	add	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc00:	461a      	mov	r2, r3
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	f003 030f 	and.w	r3, r3, #15
 800bc08:	015b      	lsls	r3, r3, #5
 800bc0a:	441a      	add	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3718      	adds	r7, #24
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bc1c:	b590      	push	{r4, r7, lr}
 800bc1e:	b087      	sub	sp, #28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d004      	beq.n	800bc42 <dir_next+0x26>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d101      	bne.n	800bc46 <dir_next+0x2a>
		return FR_NO_FILE;
 800bc42:	2304      	movs	r3, #4
 800bc44:	e0dd      	b.n	800be02 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f003 030f 	and.w	r3, r3, #15
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f040 80c6 	bne.w	800bdde <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bc58:	1c5a      	adds	r2, r3, #1
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d10b      	bne.n	800bc82 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc70:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800bc74:	461a      	mov	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	f0c0 80b0 	bcc.w	800bdde <dir_next+0x1c2>
				return FR_NO_FILE;
 800bc7e:	2304      	movs	r3, #4
 800bc80:	e0bf      	b.n	800be02 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	091b      	lsrs	r3, r3, #4
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800bc8c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800bc90:	3a01      	subs	r2, #1
 800bc92:	4013      	ands	r3, r2
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f040 80a2 	bne.w	800bdde <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bca6:	4619      	mov	r1, r3
 800bca8:	4610      	mov	r0, r2
 800bcaa:	f7ff fc30 	bl	800b50e <get_fat>
 800bcae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d801      	bhi.n	800bcba <dir_next+0x9e>
 800bcb6:	2302      	movs	r3, #2
 800bcb8:	e0a3      	b.n	800be02 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc0:	d101      	bne.n	800bcc6 <dir_next+0xaa>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e09d      	b.n	800be02 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bccc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bcd0:	697a      	ldr	r2, [r7, #20]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d374      	bcc.n	800bdc0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d101      	bne.n	800bce0 <dir_next+0xc4>
 800bcdc:	2304      	movs	r3, #4
 800bcde:	e090      	b.n	800be02 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bcec:	4619      	mov	r1, r3
 800bcee:	4610      	mov	r0, r2
 800bcf0:	f7ff fe2f 	bl	800b952 <create_chain>
 800bcf4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d101      	bne.n	800bd00 <dir_next+0xe4>
 800bcfc:	2307      	movs	r3, #7
 800bcfe:	e080      	b.n	800be02 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d101      	bne.n	800bd0a <dir_next+0xee>
 800bd06:	2302      	movs	r3, #2
 800bd08:	e07b      	b.n	800be02 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd10:	d101      	bne.n	800bd16 <dir_next+0xfa>
 800bd12:	2301      	movs	r3, #1
 800bd14:	e075      	b.n	800be02 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7ff fab1 	bl	800b284 <sync_window>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d001      	beq.n	800bd2c <dir_next+0x110>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e06a      	b.n	800be02 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd36:	2100      	movs	r1, #0
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7ff f895 	bl	800ae68 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800bd4a:	6979      	ldr	r1, [r7, #20]
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	f7ff fbbd 	bl	800b4cc <clust2sect>
 800bd52:	4603      	mov	r3, r0
 800bd54:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800bd58:	2300      	movs	r3, #0
 800bd5a:	613b      	str	r3, [r7, #16]
 800bd5c:	e01b      	b.n	800bd96 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd64:	2201      	movs	r2, #1
 800bd66:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff fa87 	bl	800b284 <sync_window>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d001      	beq.n	800bd80 <dir_next+0x164>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e040      	b.n	800be02 <dir_next+0x1e6>
						dp->fs->winsect++;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd86:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800bd8a:	3201      	adds	r2, #1
 800bd8c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	3301      	adds	r3, #1
 800bd94:	613b      	str	r3, [r7, #16]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd9c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bda0:	461a      	mov	r2, r3
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d3da      	bcc.n	800bd5e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdae:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	1a8a      	subs	r2, r1, r2
 800bdbc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdce:	6979      	ldr	r1, [r7, #20]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff fb7b 	bl	800b4cc <clust2sect>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	b29a      	uxth	r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdee:	461a      	mov	r2, r3
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f003 030f 	and.w	r3, r3, #15
 800bdf6:	015b      	lsls	r3, r3, #5
 800bdf8:	441a      	add	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	371c      	adds	r7, #28
 800be06:	46bd      	mov	sp, r7
 800be08:	bd90      	pop	{r4, r7, pc}

0800be0a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b084      	sub	sp, #16
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800be14:	2100      	movs	r1, #0
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f7ff fe6c 	bl	800baf4 <dir_sdi>
 800be1c:	4603      	mov	r3, r0
 800be1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d131      	bne.n	800be8a <dir_alloc+0x80>
		n = 0;
 800be26:	2300      	movs	r3, #0
 800be28:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800be36:	4619      	mov	r1, r3
 800be38:	4610      	mov	r0, r2
 800be3a:	f7ff fa6c 	bl	800b316 <move_window>
 800be3e:	4603      	mov	r3, r0
 800be40:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d11f      	bne.n	800be88 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	2be5      	cmp	r3, #229	; 0xe5
 800be52:	d005      	beq.n	800be60 <dir_alloc+0x56>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d107      	bne.n	800be70 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	3301      	adds	r3, #1
 800be64:	60bb      	str	r3, [r7, #8]
 800be66:	68ba      	ldr	r2, [r7, #8]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d102      	bne.n	800be74 <dir_alloc+0x6a>
 800be6e:	e00c      	b.n	800be8a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800be70:	2300      	movs	r3, #0
 800be72:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800be74:	2101      	movs	r1, #1
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7ff fed0 	bl	800bc1c <dir_next>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800be80:	7bfb      	ldrb	r3, [r7, #15]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d0d1      	beq.n	800be2a <dir_alloc+0x20>
 800be86:	e000      	b.n	800be8a <dir_alloc+0x80>
			if (res != FR_OK) break;
 800be88:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
 800be8c:	2b04      	cmp	r3, #4
 800be8e:	d101      	bne.n	800be94 <dir_alloc+0x8a>
 800be90:	2307      	movs	r3, #7
 800be92:	73fb      	strb	r3, [r7, #15]
	return res;
 800be94:	7bfb      	ldrb	r3, [r7, #15]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b085      	sub	sp, #20
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	331b      	adds	r3, #27
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	021b      	lsls	r3, r3, #8
 800beb0:	b21a      	sxth	r2, r3
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	331a      	adds	r3, #26
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	b21b      	sxth	r3, r3
 800beba:	4313      	orrs	r3, r2
 800bebc:	b21b      	sxth	r3, r3
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bec8:	2b03      	cmp	r3, #3
 800beca:	d10f      	bne.n	800beec <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	3315      	adds	r3, #21
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	021b      	lsls	r3, r3, #8
 800bed4:	b21a      	sxth	r2, r3
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	3314      	adds	r3, #20
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	b21b      	sxth	r3, r3
 800bede:	4313      	orrs	r3, r2
 800bee0:	b21b      	sxth	r3, r3
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	041b      	lsls	r3, r3, #16
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	4313      	orrs	r3, r2
 800beea:	60fb      	str	r3, [r7, #12]

	return cl;
 800beec:	68fb      	ldr	r3, [r7, #12]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3714      	adds	r7, #20
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bc80      	pop	{r7}
 800bef6:	4770      	bx	lr

0800bef8 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	331a      	adds	r3, #26
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	b2d2      	uxtb	r2, r2
 800bf0a:	701a      	strb	r2, [r3, #0]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	0a1b      	lsrs	r3, r3, #8
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	331b      	adds	r3, #27
 800bf18:	b2d2      	uxtb	r2, r2
 800bf1a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	0c1a      	lsrs	r2, r3, #16
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	3314      	adds	r3, #20
 800bf24:	b2d2      	uxtb	r2, r2
 800bf26:	701a      	strb	r2, [r3, #0]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	0c1b      	lsrs	r3, r3, #16
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	0a1b      	lsrs	r3, r3, #8
 800bf30:	b29a      	uxth	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	3315      	adds	r3, #21
 800bf36:	b2d2      	uxtb	r2, r2
 800bf38:	701a      	strb	r2, [r3, #0]
}
 800bf3a:	bf00      	nop
 800bf3c:	370c      	adds	r7, #12
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bc80      	pop	{r7}
 800bf42:	4770      	bx	lr

0800bf44 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7ff fdd0 	bl	800baf4 <dir_sdi>
 800bf54:	4603      	mov	r3, r0
 800bf56:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bf58:	7dfb      	ldrb	r3, [r7, #23]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d001      	beq.n	800bf62 <dir_find+0x1e>
 800bf5e:	7dfb      	ldrb	r3, [r7, #23]
 800bf60:	e03b      	b.n	800bfda <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4610      	mov	r0, r2
 800bf72:	f7ff f9d0 	bl	800b316 <move_window>
 800bf76:	4603      	mov	r3, r0
 800bf78:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bf7a:	7dfb      	ldrb	r3, [r7, #23]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d128      	bne.n	800bfd2 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bf86:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bf8e:	7bfb      	ldrb	r3, [r7, #15]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d102      	bne.n	800bf9a <dir_find+0x56>
 800bf94:	2304      	movs	r3, #4
 800bf96:	75fb      	strb	r3, [r7, #23]
 800bf98:	e01e      	b.n	800bfd8 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	330b      	adds	r3, #11
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	f003 0308 	and.w	r3, r3, #8
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10a      	bne.n	800bfbe <dir_find+0x7a>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bfae:	220b      	movs	r2, #11
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	6938      	ldr	r0, [r7, #16]
 800bfb4:	f7fe ff72 	bl	800ae9c <mem_cmp>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00b      	beq.n	800bfd6 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff fe2b 	bl	800bc1c <dir_next>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bfca:	7dfb      	ldrb	r3, [r7, #23]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d0c8      	beq.n	800bf62 <dir_find+0x1e>
 800bfd0:	e002      	b.n	800bfd8 <dir_find+0x94>
		if (res != FR_OK) break;
 800bfd2:	bf00      	nop
 800bfd4:	e000      	b.n	800bfd8 <dir_find+0x94>
			break;
 800bfd6:	bf00      	nop

	return res;
 800bfd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3718      	adds	r7, #24
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b086      	sub	sp, #24
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 800bfec:	2304      	movs	r3, #4
 800bfee:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 800bff0:	e03f      	b.n	800c072 <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bffe:	4619      	mov	r1, r3
 800c000:	4610      	mov	r0, r2
 800c002:	f7ff f988 	bl	800b316 <move_window>
 800c006:	4603      	mov	r3, r0
 800c008:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d136      	bne.n	800c07e <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c016:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c01e:	7bfb      	ldrb	r3, [r7, #15]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d102      	bne.n	800c02a <dir_read+0x48>
 800c024:	2304      	movs	r3, #4
 800c026:	75fb      	strb	r3, [r7, #23]
 800c028:	e02e      	b.n	800c088 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	330b      	adds	r3, #11
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c034:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800c036:	7bfb      	ldrb	r3, [r7, #15]
 800c038:	2be5      	cmp	r3, #229	; 0xe5
 800c03a:	d011      	beq.n	800c060 <dir_read+0x7e>
 800c03c:	7bfb      	ldrb	r3, [r7, #15]
 800c03e:	2b2e      	cmp	r3, #46	; 0x2e
 800c040:	d00e      	beq.n	800c060 <dir_read+0x7e>
 800c042:	7bbb      	ldrb	r3, [r7, #14]
 800c044:	2b0f      	cmp	r3, #15
 800c046:	d00b      	beq.n	800c060 <dir_read+0x7e>
 800c048:	7bbb      	ldrb	r3, [r7, #14]
 800c04a:	f023 0320 	bic.w	r3, r3, #32
 800c04e:	2b08      	cmp	r3, #8
 800c050:	bf0c      	ite	eq
 800c052:	2301      	moveq	r3, #1
 800c054:	2300      	movne	r3, #0
 800c056:	b2db      	uxtb	r3, r3
 800c058:	461a      	mov	r2, r3
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d010      	beq.n	800c082 <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 800c060:	2100      	movs	r1, #0
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7ff fdda 	bl	800bc1c <dir_next>
 800c068:	4603      	mov	r3, r0
 800c06a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c06c:	7dfb      	ldrb	r3, [r7, #23]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d109      	bne.n	800c086 <dir_read+0xa4>
	while (dp->sect) {
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d1ba      	bne.n	800bff2 <dir_read+0x10>
 800c07c:	e004      	b.n	800c088 <dir_read+0xa6>
		if (res != FR_OK) break;
 800c07e:	bf00      	nop
 800c080:	e002      	b.n	800c088 <dir_read+0xa6>
			break;
 800c082:	bf00      	nop
 800c084:	e000      	b.n	800c088 <dir_read+0xa6>
		if (res != FR_OK) break;
 800c086:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800c088:	7dfb      	ldrb	r3, [r7, #23]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d003      	beq.n	800c096 <dir_read+0xb4>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 800c096:	7dfb      	ldrb	r3, [r7, #23]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3718      	adds	r7, #24
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7ff fead 	bl	800be0a <dir_alloc>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d126      	bne.n	800c108 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	4610      	mov	r0, r2
 800c0ca:	f7ff f924 	bl	800b316 <move_window>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c0d2:	7bfb      	ldrb	r3, [r7, #15]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d117      	bne.n	800c108 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0de:	2220      	movs	r2, #32
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fe fec0 	bl	800ae68 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c0f4:	220b      	movs	r2, #11
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	f7fe fe98 	bl	800ae2c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c102:	2201      	movs	r2, #1
 800c104:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800c108:	7bfb      	ldrb	r3, [r7, #15]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c112:	b480      	push	{r7}
 800c114:	b087      	sub	sp, #28
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
 800c11a:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	3309      	adds	r3, #9
 800c120:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d05a      	beq.n	800c1e2 <get_fileinfo+0xd0>
		dir = dp->dir;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c132:	60bb      	str	r3, [r7, #8]
		i = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 800c138:	e01c      	b.n	800c174 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	1c5a      	adds	r2, r3, #1
 800c13e:	617a      	str	r2, [r7, #20]
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	4413      	add	r3, r2
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	2b20      	cmp	r3, #32
 800c14c:	d100      	bne.n	800c150 <get_fileinfo+0x3e>
 800c14e:	e011      	b.n	800c174 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	2b05      	cmp	r3, #5
 800c154:	d101      	bne.n	800c15a <get_fileinfo+0x48>
 800c156:	23e5      	movs	r3, #229	; 0xe5
 800c158:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	2b09      	cmp	r3, #9
 800c15e:	d104      	bne.n	800c16a <get_fileinfo+0x58>
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	1c5a      	adds	r2, r3, #1
 800c164:	613a      	str	r2, [r7, #16]
 800c166:	222e      	movs	r2, #46	; 0x2e
 800c168:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	1c5a      	adds	r2, r3, #1
 800c16e:	613a      	str	r2, [r7, #16]
 800c170:	7bfa      	ldrb	r2, [r7, #15]
 800c172:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	2b0a      	cmp	r3, #10
 800c178:	d9df      	bls.n	800c13a <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	7ada      	ldrb	r2, [r3, #11]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	331f      	adds	r3, #31
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	061a      	lsls	r2, r3, #24
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	331e      	adds	r3, #30
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	041b      	lsls	r3, r3, #16
 800c192:	4313      	orrs	r3, r2
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	321d      	adds	r2, #29
 800c198:	7812      	ldrb	r2, [r2, #0]
 800c19a:	0212      	lsls	r2, r2, #8
 800c19c:	4313      	orrs	r3, r2
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	321c      	adds	r2, #28
 800c1a2:	7812      	ldrb	r2, [r2, #0]
 800c1a4:	431a      	orrs	r2, r3
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	3319      	adds	r3, #25
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	021b      	lsls	r3, r3, #8
 800c1b2:	b21a      	sxth	r2, r3
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	3318      	adds	r3, #24
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	b21b      	sxth	r3, r3
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	b21b      	sxth	r3, r3
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	3317      	adds	r3, #23
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	021b      	lsls	r3, r3, #8
 800c1ce:	b21a      	sxth	r2, r3
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	3316      	adds	r3, #22
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	b21b      	sxth	r3, r3
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	b21b      	sxth	r3, r3
 800c1dc:	b29a      	uxth	r2, r3
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 800c1e8:	bf00      	nop
 800c1ea:	371c      	adds	r7, #28
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bc80      	pop	{r7}
 800c1f0:	4770      	bx	lr
	...

0800c1f4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b088      	sub	sp, #32
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	60fb      	str	r3, [r7, #12]
 800c204:	e002      	b.n	800c20c <create_name+0x18>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	3301      	adds	r3, #1
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	2b2f      	cmp	r3, #47	; 0x2f
 800c212:	d0f8      	beq.n	800c206 <create_name+0x12>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	2b5c      	cmp	r3, #92	; 0x5c
 800c21a:	d0f4      	beq.n	800c206 <create_name+0x12>
	sfn = dp->fn;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c222:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c224:	220b      	movs	r2, #11
 800c226:	2120      	movs	r1, #32
 800c228:	68b8      	ldr	r0, [r7, #8]
 800c22a:	f7fe fe1d 	bl	800ae68 <mem_set>
	si = i = b = 0; ni = 8;
 800c22e:	2300      	movs	r3, #0
 800c230:	77fb      	strb	r3, [r7, #31]
 800c232:	2300      	movs	r3, #0
 800c234:	613b      	str	r3, [r7, #16]
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	617b      	str	r3, [r7, #20]
 800c23a:	2308      	movs	r3, #8
 800c23c:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	617a      	str	r2, [r7, #20]
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	4413      	add	r3, r2
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800c24c:	7fbb      	ldrb	r3, [r7, #30]
 800c24e:	2b20      	cmp	r3, #32
 800c250:	d953      	bls.n	800c2fa <create_name+0x106>
 800c252:	7fbb      	ldrb	r3, [r7, #30]
 800c254:	2b2f      	cmp	r3, #47	; 0x2f
 800c256:	d050      	beq.n	800c2fa <create_name+0x106>
 800c258:	7fbb      	ldrb	r3, [r7, #30]
 800c25a:	2b5c      	cmp	r3, #92	; 0x5c
 800c25c:	d04d      	beq.n	800c2fa <create_name+0x106>
		if (c == '.' || i >= ni) {
 800c25e:	7fbb      	ldrb	r3, [r7, #30]
 800c260:	2b2e      	cmp	r3, #46	; 0x2e
 800c262:	d003      	beq.n	800c26c <create_name+0x78>
 800c264:	693a      	ldr	r2, [r7, #16]
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d30f      	bcc.n	800c28c <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	2b08      	cmp	r3, #8
 800c270:	d102      	bne.n	800c278 <create_name+0x84>
 800c272:	7fbb      	ldrb	r3, [r7, #30]
 800c274:	2b2e      	cmp	r3, #46	; 0x2e
 800c276:	d001      	beq.n	800c27c <create_name+0x88>
 800c278:	2306      	movs	r3, #6
 800c27a:	e073      	b.n	800c364 <create_name+0x170>
			i = 8; ni = 11;
 800c27c:	2308      	movs	r3, #8
 800c27e:	613b      	str	r3, [r7, #16]
 800c280:	230b      	movs	r3, #11
 800c282:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800c284:	7ffb      	ldrb	r3, [r7, #31]
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	77fb      	strb	r3, [r7, #31]
 800c28a:	e035      	b.n	800c2f8 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c28c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c290:	2b00      	cmp	r3, #0
 800c292:	da08      	bge.n	800c2a6 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800c294:	7ffb      	ldrb	r3, [r7, #31]
 800c296:	f043 0303 	orr.w	r3, r3, #3
 800c29a:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c29c:	7fbb      	ldrb	r3, [r7, #30]
 800c29e:	3b80      	subs	r3, #128	; 0x80
 800c2a0:	4a32      	ldr	r2, [pc, #200]	; (800c36c <create_name+0x178>)
 800c2a2:	5cd3      	ldrb	r3, [r2, r3]
 800c2a4:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800c2a6:	7fbb      	ldrb	r3, [r7, #30]
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	4831      	ldr	r0, [pc, #196]	; (800c370 <create_name+0x17c>)
 800c2ac:	f7fe fe1c 	bl	800aee8 <chk_chr>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d001      	beq.n	800c2ba <create_name+0xc6>
				return FR_INVALID_NAME;
 800c2b6:	2306      	movs	r3, #6
 800c2b8:	e054      	b.n	800c364 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800c2ba:	7fbb      	ldrb	r3, [r7, #30]
 800c2bc:	2b40      	cmp	r3, #64	; 0x40
 800c2be:	d907      	bls.n	800c2d0 <create_name+0xdc>
 800c2c0:	7fbb      	ldrb	r3, [r7, #30]
 800c2c2:	2b5a      	cmp	r3, #90	; 0x5a
 800c2c4:	d804      	bhi.n	800c2d0 <create_name+0xdc>
				b |= 2;
 800c2c6:	7ffb      	ldrb	r3, [r7, #31]
 800c2c8:	f043 0302 	orr.w	r3, r3, #2
 800c2cc:	77fb      	strb	r3, [r7, #31]
 800c2ce:	e00c      	b.n	800c2ea <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800c2d0:	7fbb      	ldrb	r3, [r7, #30]
 800c2d2:	2b60      	cmp	r3, #96	; 0x60
 800c2d4:	d909      	bls.n	800c2ea <create_name+0xf6>
 800c2d6:	7fbb      	ldrb	r3, [r7, #30]
 800c2d8:	2b7a      	cmp	r3, #122	; 0x7a
 800c2da:	d806      	bhi.n	800c2ea <create_name+0xf6>
					b |= 1; c -= 0x20;
 800c2dc:	7ffb      	ldrb	r3, [r7, #31]
 800c2de:	f043 0301 	orr.w	r3, r3, #1
 800c2e2:	77fb      	strb	r3, [r7, #31]
 800c2e4:	7fbb      	ldrb	r3, [r7, #30]
 800c2e6:	3b20      	subs	r3, #32
 800c2e8:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	1c5a      	adds	r2, r3, #1
 800c2ee:	613a      	str	r2, [r7, #16]
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	7fba      	ldrb	r2, [r7, #30]
 800c2f6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c2f8:	e7a1      	b.n	800c23e <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	441a      	add	r2, r3
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800c304:	7fbb      	ldrb	r3, [r7, #30]
 800c306:	2b20      	cmp	r3, #32
 800c308:	d801      	bhi.n	800c30e <create_name+0x11a>
 800c30a:	2304      	movs	r3, #4
 800c30c:	e000      	b.n	800c310 <create_name+0x11c>
 800c30e:	2300      	movs	r3, #0
 800c310:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d101      	bne.n	800c31c <create_name+0x128>
 800c318:	2306      	movs	r3, #6
 800c31a:	e023      	b.n	800c364 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	2be5      	cmp	r3, #229	; 0xe5
 800c322:	d102      	bne.n	800c32a <create_name+0x136>
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	2205      	movs	r2, #5
 800c328:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	2b08      	cmp	r3, #8
 800c32e:	d102      	bne.n	800c336 <create_name+0x142>
 800c330:	7ffb      	ldrb	r3, [r7, #31]
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800c336:	7ffb      	ldrb	r3, [r7, #31]
 800c338:	f003 0303 	and.w	r3, r3, #3
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d103      	bne.n	800c348 <create_name+0x154>
 800c340:	7fbb      	ldrb	r3, [r7, #30]
 800c342:	f043 0310 	orr.w	r3, r3, #16
 800c346:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800c348:	7ffb      	ldrb	r3, [r7, #31]
 800c34a:	f003 030c 	and.w	r3, r3, #12
 800c34e:	2b04      	cmp	r3, #4
 800c350:	d103      	bne.n	800c35a <create_name+0x166>
 800c352:	7fbb      	ldrb	r3, [r7, #30]
 800c354:	f043 0308 	orr.w	r3, r3, #8
 800c358:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	330b      	adds	r3, #11
 800c35e:	7fba      	ldrb	r2, [r7, #30]
 800c360:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c362:	2300      	movs	r3, #0
#endif
}
 800c364:	4618      	mov	r0, r3
 800c366:	3720      	adds	r7, #32
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	08012c30 	.word	0x08012c30
 800c370:	08012bd8 	.word	0x08012bd8

0800c374 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	2b2f      	cmp	r3, #47	; 0x2f
 800c384:	d003      	beq.n	800c38e <follow_path+0x1a>
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	2b5c      	cmp	r3, #92	; 0x5c
 800c38c:	d102      	bne.n	800c394 <follow_path+0x20>
		path++;
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	3301      	adds	r3, #1
 800c392:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	2b1f      	cmp	r3, #31
 800c3a2:	d80a      	bhi.n	800c3ba <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f7ff fba4 	bl	800baf4 <dir_sdi>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800c3b8:	e045      	b.n	800c446 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c3ba:	463b      	mov	r3, r7
 800c3bc:	4619      	mov	r1, r3
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7ff ff18 	bl	800c1f4 <create_name>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d136      	bne.n	800c43c <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7ff fdb8 	bl	800bf44 <dir_find>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c3de:	7adb      	ldrb	r3, [r3, #11]
 800c3e0:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800c3e2:	7bfb      	ldrb	r3, [r7, #15]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00a      	beq.n	800c3fe <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ea:	2b04      	cmp	r3, #4
 800c3ec:	d128      	bne.n	800c440 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c3ee:	7bbb      	ldrb	r3, [r7, #14]
 800c3f0:	f003 0304 	and.w	r3, r3, #4
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d123      	bne.n	800c440 <follow_path+0xcc>
 800c3f8:	2305      	movs	r3, #5
 800c3fa:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800c3fc:	e020      	b.n	800c440 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c3fe:	7bbb      	ldrb	r3, [r7, #14]
 800c400:	f003 0304 	and.w	r3, r3, #4
 800c404:	2b00      	cmp	r3, #0
 800c406:	d11d      	bne.n	800c444 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c40e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	330b      	adds	r3, #11
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	f003 0310 	and.w	r3, r3, #16
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d102      	bne.n	800c424 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800c41e:	2305      	movs	r3, #5
 800c420:	73fb      	strb	r3, [r7, #15]
 800c422:	e010      	b.n	800c446 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c42a:	68b9      	ldr	r1, [r7, #8]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7ff fd36 	bl	800be9e <ld_clust>
 800c432:	4602      	mov	r2, r0
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c43a:	e7be      	b.n	800c3ba <follow_path+0x46>
			if (res != FR_OK) break;
 800c43c:	bf00      	nop
 800c43e:	e002      	b.n	800c446 <follow_path+0xd2>
				break;
 800c440:	bf00      	nop
 800c442:	e000      	b.n	800c446 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c444:	bf00      	nop
		}
	}

	return res;
 800c446:	7bfb      	ldrb	r3, [r7, #15]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3710      	adds	r7, #16
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c450:	b480      	push	{r7}
 800c452:	b087      	sub	sp, #28
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c458:	f04f 33ff 	mov.w	r3, #4294967295
 800c45c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d031      	beq.n	800c4ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	617b      	str	r3, [r7, #20]
 800c46c:	e002      	b.n	800c474 <get_ldnumber+0x24>
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	3301      	adds	r3, #1
 800c472:	617b      	str	r3, [r7, #20]
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	2b20      	cmp	r3, #32
 800c47a:	d903      	bls.n	800c484 <get_ldnumber+0x34>
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	2b3a      	cmp	r3, #58	; 0x3a
 800c482:	d1f4      	bne.n	800c46e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	2b3a      	cmp	r3, #58	; 0x3a
 800c48a:	d11c      	bne.n	800c4c6 <get_ldnumber+0x76>
			tp = *path;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	1c5a      	adds	r2, r3, #1
 800c496:	60fa      	str	r2, [r7, #12]
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	3b30      	subs	r3, #48	; 0x30
 800c49c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	2b09      	cmp	r3, #9
 800c4a2:	d80e      	bhi.n	800c4c2 <get_ldnumber+0x72>
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d10a      	bne.n	800c4c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d107      	bne.n	800c4c2 <get_ldnumber+0x72>
					vol = (int)i;
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	617b      	str	r3, [r7, #20]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	e002      	b.n	800c4cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c4ca:	693b      	ldr	r3, [r7, #16]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	371c      	adds	r7, #28
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bc80      	pop	{r7}
 800c4d4:	4770      	bx	lr
	...

0800c4d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7fe ff0d 	bl	800b316 <move_window>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d001      	beq.n	800c506 <check_fs+0x2e>
		return 3;
 800c502:	2303      	movs	r3, #3
 800c504:	e04a      	b.n	800c59c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c50c:	3301      	adds	r3, #1
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	021b      	lsls	r3, r3, #8
 800c512:	b21a      	sxth	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c51a:	b21b      	sxth	r3, r3
 800c51c:	4313      	orrs	r3, r2
 800c51e:	b21b      	sxth	r3, r3
 800c520:	4a20      	ldr	r2, [pc, #128]	; (800c5a4 <check_fs+0xcc>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d001      	beq.n	800c52a <check_fs+0x52>
		return 2;
 800c526:	2302      	movs	r3, #2
 800c528:	e038      	b.n	800c59c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	3336      	adds	r3, #54	; 0x36
 800c52e:	3303      	adds	r3, #3
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	061a      	lsls	r2, r3, #24
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	3336      	adds	r3, #54	; 0x36
 800c538:	3302      	adds	r3, #2
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	041b      	lsls	r3, r3, #16
 800c53e:	4313      	orrs	r3, r2
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	3236      	adds	r2, #54	; 0x36
 800c544:	3201      	adds	r2, #1
 800c546:	7812      	ldrb	r2, [r2, #0]
 800c548:	0212      	lsls	r2, r2, #8
 800c54a:	4313      	orrs	r3, r2
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800c552:	4313      	orrs	r3, r2
 800c554:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c558:	4a13      	ldr	r2, [pc, #76]	; (800c5a8 <check_fs+0xd0>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d101      	bne.n	800c562 <check_fs+0x8a>
		return 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	e01c      	b.n	800c59c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	3352      	adds	r3, #82	; 0x52
 800c566:	3303      	adds	r3, #3
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	061a      	lsls	r2, r3, #24
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3352      	adds	r3, #82	; 0x52
 800c570:	3302      	adds	r3, #2
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	041b      	lsls	r3, r3, #16
 800c576:	4313      	orrs	r3, r2
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	3252      	adds	r2, #82	; 0x52
 800c57c:	3201      	adds	r2, #1
 800c57e:	7812      	ldrb	r2, [r2, #0]
 800c580:	0212      	lsls	r2, r2, #8
 800c582:	4313      	orrs	r3, r2
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800c58a:	4313      	orrs	r3, r2
 800c58c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c590:	4a05      	ldr	r2, [pc, #20]	; (800c5a8 <check_fs+0xd0>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d101      	bne.n	800c59a <check_fs+0xc2>
		return 0;
 800c596:	2300      	movs	r3, #0
 800c598:	e000      	b.n	800c59c <check_fs+0xc4>

	return 1;
 800c59a:	2301      	movs	r3, #1
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	ffffaa55 	.word	0xffffaa55
 800c5a8:	00544146 	.word	0x00544146

0800c5ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b096      	sub	sp, #88	; 0x58
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c5c0:	68b8      	ldr	r0, [r7, #8]
 800c5c2:	f7ff ff45 	bl	800c450 <get_ldnumber>
 800c5c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	da01      	bge.n	800c5d2 <find_volume+0x26>
 800c5ce:	230b      	movs	r3, #11
 800c5d0:	e2aa      	b.n	800cb28 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c5d2:	4a9e      	ldr	r2, [pc, #632]	; (800c84c <find_volume+0x2a0>)
 800c5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5da:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d101      	bne.n	800c5e6 <find_volume+0x3a>
 800c5e2:	230c      	movs	r3, #12
 800c5e4:	e2a0      	b.n	800cb28 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5ea:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800c5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d01b      	beq.n	800c62e <find_volume+0x82>
		stat = disk_status(fs->drv);
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7fe fb77 	bl	800acf0 <disk_status>
 800c602:	4603      	mov	r3, r0
 800c604:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c60c:	f003 0301 	and.w	r3, r3, #1
 800c610:	2b00      	cmp	r3, #0
 800c612:	d10c      	bne.n	800c62e <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800c614:	79fb      	ldrb	r3, [r7, #7]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d007      	beq.n	800c62a <find_volume+0x7e>
 800c61a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c61e:	f003 0304 	and.w	r3, r3, #4
 800c622:	2b00      	cmp	r3, #0
 800c624:	d001      	beq.n	800c62a <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800c626:	230a      	movs	r3, #10
 800c628:	e27e      	b.n	800cb28 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 800c62a:	2300      	movs	r3, #0
 800c62c:	e27c      	b.n	800cb28 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c630:	2200      	movs	r2, #0
 800c632:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c638:	b2da      	uxtb	r2, r3
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c646:	4618      	mov	r0, r3
 800c648:	f7fe fb6c 	bl	800ad24 <disk_initialize>
 800c64c:	4603      	mov	r3, r0
 800c64e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800c652:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d001      	beq.n	800c662 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c65e:	2303      	movs	r3, #3
 800c660:	e262      	b.n	800cb28 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800c662:	79fb      	ldrb	r3, [r7, #7]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d007      	beq.n	800c678 <find_volume+0xcc>
 800c668:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c66c:	f003 0304 	and.w	r3, r3, #4
 800c670:	2b00      	cmp	r3, #0
 800c672:	d001      	beq.n	800c678 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800c674:	230a      	movs	r3, #10
 800c676:	e257      	b.n	800cb28 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800c678:	2300      	movs	r3, #0
 800c67a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800c67c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c67e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c680:	f7ff ff2a 	bl	800c4d8 <check_fs>
 800c684:	4603      	mov	r3, r0
 800c686:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800c68a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d155      	bne.n	800c73e <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c692:	2300      	movs	r3, #0
 800c694:	643b      	str	r3, [r7, #64]	; 0x40
 800c696:	e029      	b.n	800c6ec <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800c698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c69a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c69c:	011b      	lsls	r3, r3, #4
 800c69e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c6a2:	4413      	add	r3, r2
 800c6a4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a8:	3304      	adds	r3, #4
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d012      	beq.n	800c6d6 <find_volume+0x12a>
 800c6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b2:	330b      	adds	r3, #11
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	061a      	lsls	r2, r3, #24
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ba:	330a      	adds	r3, #10
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	041b      	lsls	r3, r3, #16
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6c4:	3209      	adds	r2, #9
 800c6c6:	7812      	ldrb	r2, [r2, #0]
 800c6c8:	0212      	lsls	r2, r2, #8
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ce:	3208      	adds	r2, #8
 800c6d0:	7812      	ldrb	r2, [r2, #0]
 800c6d2:	431a      	orrs	r2, r3
 800c6d4:	e000      	b.n	800c6d8 <find_volume+0x12c>
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c6e0:	440b      	add	r3, r1
 800c6e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	643b      	str	r3, [r7, #64]	; 0x40
 800c6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	d9d2      	bls.n	800c698 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <find_volume+0x156>
 800c6fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6fe:	3b01      	subs	r3, #1
 800c700:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800c702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c70a:	4413      	add	r3, r2
 800c70c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c710:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800c712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c714:	2b00      	cmp	r3, #0
 800c716:	d005      	beq.n	800c724 <find_volume+0x178>
 800c718:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c71a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c71c:	f7ff fedc 	bl	800c4d8 <check_fs>
 800c720:	4603      	mov	r3, r0
 800c722:	e000      	b.n	800c726 <find_volume+0x17a>
 800c724:	2302      	movs	r3, #2
 800c726:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800c72a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d005      	beq.n	800c73e <find_volume+0x192>
 800c732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c734:	3301      	adds	r3, #1
 800c736:	643b      	str	r3, [r7, #64]	; 0x40
 800c738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c73a:	2b03      	cmp	r3, #3
 800c73c:	d9e1      	bls.n	800c702 <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c73e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c742:	2b03      	cmp	r3, #3
 800c744:	d101      	bne.n	800c74a <find_volume+0x19e>
 800c746:	2301      	movs	r3, #1
 800c748:	e1ee      	b.n	800cb28 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800c74a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <find_volume+0x1aa>
 800c752:	230d      	movs	r3, #13
 800c754:	e1e8      	b.n	800cb28 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c758:	7b1b      	ldrb	r3, [r3, #12]
 800c75a:	021b      	lsls	r3, r3, #8
 800c75c:	b21a      	sxth	r2, r3
 800c75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c760:	7adb      	ldrb	r3, [r3, #11]
 800c762:	b21b      	sxth	r3, r3
 800c764:	4313      	orrs	r3, r2
 800c766:	b21b      	sxth	r3, r3
 800c768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c76c:	d001      	beq.n	800c772 <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 800c76e:	230d      	movs	r3, #13
 800c770:	e1da      	b.n	800cb28 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800c772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c774:	7ddb      	ldrb	r3, [r3, #23]
 800c776:	021b      	lsls	r3, r3, #8
 800c778:	b21a      	sxth	r2, r3
 800c77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77c:	7d9b      	ldrb	r3, [r3, #22]
 800c77e:	b21b      	sxth	r3, r3
 800c780:	4313      	orrs	r3, r2
 800c782:	b21b      	sxth	r3, r3
 800c784:	b29b      	uxth	r3, r3
 800c786:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800c788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d112      	bne.n	800c7b4 <find_volume+0x208>
 800c78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c790:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c794:	061a      	lsls	r2, r3, #24
 800c796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c798:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c79c:	041b      	lsls	r3, r3, #16
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7a2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c7a6:	0212      	lsls	r2, r2, #8
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7ac:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	7c1a      	ldrb	r2, [r3, #16]
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d006      	beq.n	800c7de <find_volume+0x232>
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	d001      	beq.n	800c7de <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 800c7da:	230d      	movs	r3, #13
 800c7dc:	e1a4      	b.n	800cb28 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800c7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7e8:	fb02 f303 	mul.w	r3, r2, r3
 800c7ec:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800c7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f0:	7b5a      	ldrb	r2, [r3, #13]
 800c7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f4:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d00a      	beq.n	800c818 <find_volume+0x26c>
 800c802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c804:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c808:	461a      	mov	r2, r3
 800c80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c810:	3b01      	subs	r3, #1
 800c812:	4013      	ands	r3, r2
 800c814:	2b00      	cmp	r3, #0
 800c816:	d001      	beq.n	800c81c <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 800c818:	230d      	movs	r3, #13
 800c81a:	e185      	b.n	800cb28 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800c81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81e:	7c9b      	ldrb	r3, [r3, #18]
 800c820:	021b      	lsls	r3, r3, #8
 800c822:	b21a      	sxth	r2, r3
 800c824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c826:	7c5b      	ldrb	r3, [r3, #17]
 800c828:	b21b      	sxth	r3, r3
 800c82a:	4313      	orrs	r3, r2
 800c82c:	b21b      	sxth	r3, r3
 800c82e:	b29a      	uxth	r2, r3
 800c830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c832:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800c836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c838:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800c83c:	f003 030f 	and.w	r3, r3, #15
 800c840:	b29b      	uxth	r3, r3
 800c842:	2b00      	cmp	r3, #0
 800c844:	d004      	beq.n	800c850 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 800c846:	230d      	movs	r3, #13
 800c848:	e16e      	b.n	800cb28 <find_volume+0x57c>
 800c84a:	bf00      	nop
 800c84c:	2000c880 	.word	0x2000c880

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800c850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c852:	7d1b      	ldrb	r3, [r3, #20]
 800c854:	021b      	lsls	r3, r3, #8
 800c856:	b21a      	sxth	r2, r3
 800c858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85a:	7cdb      	ldrb	r3, [r3, #19]
 800c85c:	b21b      	sxth	r3, r3
 800c85e:	4313      	orrs	r3, r2
 800c860:	b21b      	sxth	r3, r3
 800c862:	b29b      	uxth	r3, r3
 800c864:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800c866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d112      	bne.n	800c892 <find_volume+0x2e6>
 800c86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c872:	061a      	lsls	r2, r3, #24
 800c874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c876:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c87a:	041b      	lsls	r3, r3, #16
 800c87c:	4313      	orrs	r3, r2
 800c87e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c880:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800c884:	0212      	lsls	r2, r2, #8
 800c886:	4313      	orrs	r3, r2
 800c888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c88a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c88e:	4313      	orrs	r3, r2
 800c890:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800c892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c894:	7bdb      	ldrb	r3, [r3, #15]
 800c896:	021b      	lsls	r3, r3, #8
 800c898:	b21a      	sxth	r2, r3
 800c89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89c:	7b9b      	ldrb	r3, [r3, #14]
 800c89e:	b21b      	sxth	r3, r3
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	b21b      	sxth	r3, r3
 800c8a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800c8a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d101      	bne.n	800c8b0 <find_volume+0x304>
 800c8ac:	230d      	movs	r3, #13
 800c8ae:	e13b      	b.n	800cb28 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800c8b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c8b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8b4:	4413      	add	r3, r2
 800c8b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8b8:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800c8bc:	0912      	lsrs	r2, r2, #4
 800c8be:	b292      	uxth	r2, r2
 800c8c0:	4413      	add	r3, r2
 800c8c2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c8c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d201      	bcs.n	800c8d0 <find_volume+0x324>
 800c8cc:	230d      	movs	r3, #13
 800c8ce:	e12b      	b.n	800cb28 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800c8d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d4:	1ad3      	subs	r3, r2, r3
 800c8d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8d8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800c8dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8e0:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800c8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d101      	bne.n	800c8ec <find_volume+0x340>
 800c8e8:	230d      	movs	r3, #13
 800c8ea:	e11d      	b.n	800cb28 <find_volume+0x57c>
	fmt = FS_FAT12;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d902      	bls.n	800c902 <find_volume+0x356>
 800c8fc:	2302      	movs	r3, #2
 800c8fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800c902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c904:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c908:	4293      	cmp	r3, r2
 800c90a:	d902      	bls.n	800c912 <find_volume+0x366>
 800c90c:	2303      	movs	r3, #3
 800c90e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800c912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c914:	1c9a      	adds	r2, r3, #2
 800c916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c918:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800c91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c920:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800c924:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c928:	441a      	add	r2, r3
 800c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800c930:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c934:	441a      	add	r2, r3
 800c936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c938:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800c93c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c940:	2b03      	cmp	r3, #3
 800c942:	d121      	bne.n	800c988 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800c944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c946:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d001      	beq.n	800c952 <find_volume+0x3a6>
 800c94e:	230d      	movs	r3, #13
 800c950:	e0ea      	b.n	800cb28 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800c952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c954:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c958:	061a      	lsls	r2, r3, #24
 800c95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c960:	041b      	lsls	r3, r3, #16
 800c962:	4313      	orrs	r3, r2
 800c964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c966:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c96a:	0212      	lsls	r2, r2, #8
 800c96c:	4313      	orrs	r3, r2
 800c96e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c970:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c974:	431a      	orrs	r2, r3
 800c976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c978:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	647b      	str	r3, [r7, #68]	; 0x44
 800c986:	e025      	b.n	800c9d4 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800c988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d101      	bne.n	800c996 <find_volume+0x3ea>
 800c992:	230d      	movs	r3, #13
 800c994:	e0c8      	b.n	800cb28 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c998:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800c99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c99e:	441a      	add	r2, r3
 800c9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c9a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	d104      	bne.n	800c9b8 <find_volume+0x40c>
 800c9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	e00c      	b.n	800c9d2 <find_volume+0x426>
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800c9be:	4613      	mov	r3, r2
 800c9c0:	005b      	lsls	r3, r3, #1
 800c9c2:	4413      	add	r3, r2
 800c9c4:	085a      	lsrs	r2, r3, #1
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c9cc:	f003 0301 	and.w	r3, r3, #1
 800c9d0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800c9d2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800c9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c9da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c9e0:	0a5b      	lsrs	r3, r3, #9
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d201      	bcs.n	800c9ea <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800c9e6:	230d      	movs	r3, #13
 800c9e8:	e09e      	b.n	800cb28 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800c9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800ca00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca02:	2280      	movs	r2, #128	; 0x80
 800ca04:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800ca08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca0c:	2b03      	cmp	r3, #3
 800ca0e:	d177      	bne.n	800cb00 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800ca10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca16:	021b      	lsls	r3, r3, #8
 800ca18:	b21a      	sxth	r2, r3
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca20:	b21b      	sxth	r3, r3
 800ca22:	4313      	orrs	r3, r2
 800ca24:	b21b      	sxth	r3, r3
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d16a      	bne.n	800cb00 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800ca2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	4619      	mov	r1, r3
 800ca30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca32:	f7fe fc70 	bl	800b316 <move_window>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d161      	bne.n	800cb00 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca46:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800ca4a:	021b      	lsls	r3, r3, #8
 800ca4c:	b21a      	sxth	r2, r3
 800ca4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca50:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800ca54:	b21b      	sxth	r3, r3
 800ca56:	4313      	orrs	r3, r2
 800ca58:	b21b      	sxth	r3, r3
 800ca5a:	4a35      	ldr	r2, [pc, #212]	; (800cb30 <find_volume+0x584>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d14f      	bne.n	800cb00 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	78db      	ldrb	r3, [r3, #3]
 800ca64:	061a      	lsls	r2, r3, #24
 800ca66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca68:	789b      	ldrb	r3, [r3, #2]
 800ca6a:	041b      	lsls	r3, r3, #16
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca70:	7852      	ldrb	r2, [r2, #1]
 800ca72:	0212      	lsls	r2, r2, #8
 800ca74:	4313      	orrs	r3, r2
 800ca76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca78:	7812      	ldrb	r2, [r2, #0]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	4a2d      	ldr	r2, [pc, #180]	; (800cb34 <find_volume+0x588>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d13e      	bne.n	800cb00 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800ca82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca84:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800ca88:	061a      	lsls	r2, r3, #24
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800ca90:	041b      	lsls	r3, r3, #16
 800ca92:	4313      	orrs	r3, r2
 800ca94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca96:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800ca9a:	0212      	lsls	r2, r2, #8
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caa0:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800caa4:	4313      	orrs	r3, r2
 800caa6:	4a24      	ldr	r2, [pc, #144]	; (800cb38 <find_volume+0x58c>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d129      	bne.n	800cb00 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800caac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caae:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800cab2:	061a      	lsls	r2, r3, #24
 800cab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab6:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800caba:	041b      	lsls	r3, r3, #16
 800cabc:	4313      	orrs	r3, r2
 800cabe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cac0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800cac4:	0212      	lsls	r2, r2, #8
 800cac6:	4313      	orrs	r3, r2
 800cac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caca:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800cace:	431a      	orrs	r2, r3
 800cad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800cad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad8:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800cadc:	061a      	lsls	r2, r3, #24
 800cade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae0:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800cae4:	041b      	lsls	r3, r3, #16
 800cae6:	4313      	orrs	r3, r2
 800cae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caea:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800caee:	0212      	lsls	r2, r2, #8
 800caf0:	4313      	orrs	r3, r2
 800caf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caf4:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800caf8:	431a      	orrs	r2, r3
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800cb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb02:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cb06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800cb0a:	4b0c      	ldr	r3, [pc, #48]	; (800cb3c <find_volume+0x590>)
 800cb0c:	881b      	ldrh	r3, [r3, #0]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	4b0a      	ldr	r3, [pc, #40]	; (800cb3c <find_volume+0x590>)
 800cb14:	801a      	strh	r2, [r3, #0]
 800cb16:	4b09      	ldr	r3, [pc, #36]	; (800cb3c <find_volume+0x590>)
 800cb18:	881a      	ldrh	r2, [r3, #0]
 800cb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800cb20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb22:	f7fe fb85 	bl	800b230 <clear_lock>
#endif

	return FR_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3758      	adds	r7, #88	; 0x58
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	ffffaa55 	.word	0xffffaa55
 800cb34:	41615252 	.word	0x41615252
 800cb38:	61417272 	.word	0x61417272
 800cb3c:	2000c884 	.word	0x2000c884

0800cb40 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d022      	beq.n	800cb98 <validate+0x58>
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d01d      	beq.n	800cb98 <validate+0x58>
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d016      	beq.n	800cb98 <validate+0x58>
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb70:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d10c      	bne.n	800cb98 <validate+0x58>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb84:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7fe f8b1 	bl	800acf0 <disk_status>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	f003 0301 	and.w	r3, r3, #1
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <validate+0x5c>
		return FR_INVALID_OBJECT;
 800cb98:	2309      	movs	r3, #9
 800cb9a:	e000      	b.n	800cb9e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
	...

0800cba8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b088      	sub	sp, #32
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800cbba:	f107 0310 	add.w	r3, r7, #16
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7ff fc46 	bl	800c450 <get_ldnumber>
 800cbc4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	da01      	bge.n	800cbd0 <f_mount+0x28>
 800cbcc:	230b      	movs	r3, #11
 800cbce:	e02d      	b.n	800cc2c <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cbd0:	4a18      	ldr	r2, [pc, #96]	; (800cc34 <f_mount+0x8c>)
 800cbd2:	69fb      	ldr	r3, [r7, #28]
 800cbd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbd8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d006      	beq.n	800cbee <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800cbe0:	69b8      	ldr	r0, [r7, #24]
 800cbe2:	f7fe fb25 	bl	800b230 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d003      	beq.n	800cbfc <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cbfc:	68fa      	ldr	r2, [r7, #12]
 800cbfe:	490d      	ldr	r1, [pc, #52]	; (800cc34 <f_mount+0x8c>)
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <f_mount+0x6a>
 800cc0c:	79fb      	ldrb	r3, [r7, #7]
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d001      	beq.n	800cc16 <f_mount+0x6e>
 800cc12:	2300      	movs	r3, #0
 800cc14:	e00a      	b.n	800cc2c <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800cc16:	f107 0108 	add.w	r1, r7, #8
 800cc1a:	f107 030c 	add.w	r3, r7, #12
 800cc1e:	2200      	movs	r2, #0
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7ff fcc3 	bl	800c5ac <find_volume>
 800cc26:	4603      	mov	r3, r0
 800cc28:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cc2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3720      	adds	r7, #32
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	2000c880 	.word	0x2000c880

0800cc38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	f107 030c 	add.w	r3, r7, #12
 800cc44:	6018      	str	r0, [r3, #0]
 800cc46:	f107 0308 	add.w	r3, r7, #8
 800cc4a:	6019      	str	r1, [r3, #0]
 800cc4c:	1dfb      	adds	r3, r7, #7
 800cc4e:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800cc50:	f107 030c 	add.w	r3, r7, #12
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d101      	bne.n	800cc5e <f_open+0x26>
 800cc5a:	2309      	movs	r3, #9
 800cc5c:	e1f2      	b.n	800d044 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 800cc5e:	f107 030c 	add.w	r3, r7, #12
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800cc6a:	1dfb      	adds	r3, r7, #7
 800cc6c:	1dfa      	adds	r2, r7, #7
 800cc6e:	7812      	ldrb	r2, [r2, #0]
 800cc70:	f002 021f 	and.w	r2, r2, #31
 800cc74:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800cc76:	1dfb      	adds	r3, r7, #7
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	f023 0301 	bic.w	r3, r3, #1
 800cc7e:	b2da      	uxtb	r2, r3
 800cc80:	f107 0108 	add.w	r1, r7, #8
 800cc84:	f107 0320 	add.w	r3, r7, #32
 800cc88:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7ff fc8d 	bl	800c5ac <find_volume>
 800cc92:	4603      	mov	r3, r0
 800cc94:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800cc98:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f040 81cf 	bne.w	800d040 <f_open+0x408>
		INIT_BUF(dj);
 800cca2:	f107 0320 	add.w	r3, r7, #32
 800cca6:	f107 0214 	add.w	r2, r7, #20
 800ccaa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800ccae:	f107 0308 	add.w	r3, r7, #8
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	f107 0320 	add.w	r3, r7, #32
 800ccb8:	4611      	mov	r1, r2
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7ff fb5a 	bl	800c374 <follow_path>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800ccc6:	f107 0320 	add.w	r3, r7, #32
 800ccca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ccce:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ccd2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d11a      	bne.n	800cd10 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 800ccda:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d103      	bne.n	800ccea <f_open+0xb2>
				res = FR_INVALID_NAME;
 800cce2:	2306      	movs	r3, #6
 800cce4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800cce8:	e012      	b.n	800cd10 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ccea:	1dfb      	adds	r3, r7, #7
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	f023 0301 	bic.w	r3, r3, #1
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	bf14      	ite	ne
 800ccf6:	2301      	movne	r3, #1
 800ccf8:	2300      	moveq	r3, #0
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	f107 0320 	add.w	r3, r7, #32
 800cd02:	4611      	mov	r1, r2
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7fe f909 	bl	800af1c <chk_lock>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cd10:	1dfb      	adds	r3, r7, #7
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	f003 031c 	and.w	r3, r3, #28
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f000 80cc 	beq.w	800ceb6 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 800cd1e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d01f      	beq.n	800cd66 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800cd26:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cd2a:	2b04      	cmp	r3, #4
 800cd2c:	d10e      	bne.n	800cd4c <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cd2e:	f7fe f961 	bl	800aff4 <enq_lock>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d006      	beq.n	800cd46 <f_open+0x10e>
 800cd38:	f107 0320 	add.w	r3, r7, #32
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7ff f9af 	bl	800c0a0 <dir_register>
 800cd42:	4603      	mov	r3, r0
 800cd44:	e000      	b.n	800cd48 <f_open+0x110>
 800cd46:	2312      	movs	r3, #18
 800cd48:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cd4c:	1dfb      	adds	r3, r7, #7
 800cd4e:	1dfa      	adds	r2, r7, #7
 800cd50:	7812      	ldrb	r2, [r2, #0]
 800cd52:	f042 0208 	orr.w	r2, r2, #8
 800cd56:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800cd58:	f107 0320 	add.w	r3, r7, #32
 800cd5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd60:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800cd64:	e014      	b.n	800cd90 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cd66:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cd6a:	330b      	adds	r3, #11
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	f003 0311 	and.w	r3, r3, #17
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d003      	beq.n	800cd7e <f_open+0x146>
					res = FR_DENIED;
 800cd76:	2307      	movs	r3, #7
 800cd78:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800cd7c:	e008      	b.n	800cd90 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800cd7e:	1dfb      	adds	r3, r7, #7
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	f003 0304 	and.w	r3, r3, #4
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d002      	beq.n	800cd90 <f_open+0x158>
						res = FR_EXIST;
 800cd8a:	2308      	movs	r3, #8
 800cd8c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cd90:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	f040 80af 	bne.w	800cef8 <f_open+0x2c0>
 800cd9a:	1dfb      	adds	r3, r7, #7
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	f003 0308 	and.w	r3, r3, #8
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f000 80a8 	beq.w	800cef8 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 800cda8:	f7fb f9d6 	bl	8008158 <get_fattime>
 800cdac:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800cdb0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cdb4:	330e      	adds	r3, #14
 800cdb6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800cdba:	b2d2      	uxtb	r2, r2
 800cdbc:	701a      	strb	r2, [r3, #0]
 800cdbe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	0a1b      	lsrs	r3, r3, #8
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cdcc:	330f      	adds	r3, #15
 800cdce:	b2d2      	uxtb	r2, r2
 800cdd0:	701a      	strb	r2, [r3, #0]
 800cdd2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800cdd6:	0c1a      	lsrs	r2, r3, #16
 800cdd8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cddc:	3310      	adds	r3, #16
 800cdde:	b2d2      	uxtb	r2, r2
 800cde0:	701a      	strb	r2, [r3, #0]
 800cde2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800cde6:	0e1a      	lsrs	r2, r3, #24
 800cde8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cdec:	3311      	adds	r3, #17
 800cdee:	b2d2      	uxtb	r2, r2
 800cdf0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800cdf2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cdf6:	330b      	adds	r3, #11
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800cdfc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ce00:	331c      	adds	r3, #28
 800ce02:	2200      	movs	r2, #0
 800ce04:	701a      	strb	r2, [r3, #0]
 800ce06:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ce0a:	331d      	adds	r3, #29
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	701a      	strb	r2, [r3, #0]
 800ce10:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ce14:	331e      	adds	r3, #30
 800ce16:	2200      	movs	r2, #0
 800ce18:	701a      	strb	r2, [r3, #0]
 800ce1a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ce1e:	331f      	adds	r3, #31
 800ce20:	2200      	movs	r2, #0
 800ce22:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800ce24:	f107 0320 	add.w	r3, r7, #32
 800ce28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ce2c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7ff f834 	bl	800be9e <ld_clust>
 800ce36:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800ce40:	f7ff f85a 	bl	800bef8 <st_clust>
				dj.fs->wflag = 1;
 800ce44:	f107 0320 	add.w	r3, r7, #32
 800ce48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800ce52:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d04e      	beq.n	800cef8 <f_open+0x2c0>
					dw = dj.fs->winsect;
 800ce5a:	f107 0320 	add.w	r3, r7, #32
 800ce5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ce62:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800ce66:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800ce6a:	f107 0320 	add.w	r3, r7, #32
 800ce6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ce72:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fe fd11 	bl	800b89e <remove_chain>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800ce82:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d136      	bne.n	800cef8 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800ce8a:	f107 0320 	add.w	r3, r7, #32
 800ce8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ce92:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800ce96:	3a01      	subs	r2, #1
 800ce98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800ce9c:	f107 0320 	add.w	r3, r7, #32
 800cea0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cea4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7fe fa34 	bl	800b316 <move_window>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800ceb4:	e020      	b.n	800cef8 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800ceb6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d11c      	bne.n	800cef8 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800cebe:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cec2:	330b      	adds	r3, #11
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	f003 0310 	and.w	r3, r3, #16
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d003      	beq.n	800ced6 <f_open+0x29e>
					res = FR_NO_FILE;
 800cece:	2304      	movs	r3, #4
 800ced0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800ced4:	e010      	b.n	800cef8 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800ced6:	1dfb      	adds	r3, r7, #7
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	f003 0302 	and.w	r3, r3, #2
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00a      	beq.n	800cef8 <f_open+0x2c0>
 800cee2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cee6:	330b      	adds	r3, #11
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	f003 0301 	and.w	r3, r3, #1
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d002      	beq.n	800cef8 <f_open+0x2c0>
						res = FR_DENIED;
 800cef2:	2307      	movs	r3, #7
 800cef4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800cef8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d13d      	bne.n	800cf7c <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cf00:	1dfb      	adds	r3, r7, #7
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	f003 0308 	and.w	r3, r3, #8
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d005      	beq.n	800cf18 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 800cf0c:	1dfb      	adds	r3, r7, #7
 800cf0e:	1dfa      	adds	r2, r7, #7
 800cf10:	7812      	ldrb	r2, [r2, #0]
 800cf12:	f042 0220 	orr.w	r2, r2, #32
 800cf16:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800cf18:	f107 0320 	add.w	r3, r7, #32
 800cf1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cf20:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800cf24:	f107 030c 	add.w	r3, r7, #12
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800cf2e:	f107 030c 	add.w	r3, r7, #12
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800cf38:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf3c:	1dfb      	adds	r3, r7, #7
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	f023 0301 	bic.w	r3, r3, #1
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	bf14      	ite	ne
 800cf48:	2301      	movne	r3, #1
 800cf4a:	2300      	moveq	r3, #0
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	461a      	mov	r2, r3
 800cf50:	f107 0320 	add.w	r3, r7, #32
 800cf54:	4611      	mov	r1, r2
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fe f870 	bl	800b03c <inc_lock>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	f107 030c 	add.w	r3, r7, #12
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800cf68:	f107 030c 	add.w	r3, r7, #12
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d102      	bne.n	800cf7c <f_open+0x344>
 800cf76:	2302      	movs	r3, #2
 800cf78:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800cf7c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d15d      	bne.n	800d040 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 800cf84:	f107 030c 	add.w	r3, r7, #12
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	1dfa      	adds	r2, r7, #7
 800cf8c:	7812      	ldrb	r2, [r2, #0]
 800cf8e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800cf92:	f107 030c 	add.w	r3, r7, #12
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800cf9e:	f107 0320 	add.w	r3, r7, #32
 800cfa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cfa6:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fe ff77 	bl	800be9e <ld_clust>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	f107 030c 	add.w	r3, r7, #12
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800cfbc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cfc0:	331f      	adds	r3, #31
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	061a      	lsls	r2, r3, #24
 800cfc6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cfca:	331e      	adds	r3, #30
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	041b      	lsls	r3, r3, #16
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800cfd6:	321d      	adds	r2, #29
 800cfd8:	7812      	ldrb	r2, [r2, #0]
 800cfda:	0212      	lsls	r2, r2, #8
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800cfe2:	321c      	adds	r2, #28
 800cfe4:	7812      	ldrb	r2, [r2, #0]
 800cfe6:	431a      	orrs	r2, r3
 800cfe8:	f107 030c 	add.w	r3, r7, #12
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800cff2:	f107 030c 	add.w	r3, r7, #12
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2200      	movs	r2, #0
 800cffa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800cffe:	f107 030c 	add.w	r3, r7, #12
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2200      	movs	r2, #0
 800d006:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800d00a:	f107 030c 	add.w	r3, r7, #12
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2200      	movs	r2, #0
 800d012:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800d016:	f107 0320 	add.w	r3, r7, #32
 800d01a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d01e:	f107 030c 	add.w	r3, r7, #12
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800d028:	f107 030c 	add.w	r3, r7, #12
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d032:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800d036:	f107 030c 	add.w	r3, r7, #12
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800d040:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800d044:	4618      	mov	r0, r3
 800d046:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b08a      	sub	sp, #40	; 0x28
 800d052:	af00      	add	r7, sp, #0
 800d054:	60f8      	str	r0, [r7, #12]
 800d056:	60b9      	str	r1, [r7, #8]
 800d058:	607a      	str	r2, [r7, #4]
 800d05a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	2200      	movs	r2, #0
 800d064:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	f7ff fd6a 	bl	800cb40 <validate>
 800d06c:	4603      	mov	r3, r0
 800d06e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d070:	7dfb      	ldrb	r3, [r7, #23]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d001      	beq.n	800d07a <f_write+0x2c>
 800d076:	7dfb      	ldrb	r3, [r7, #23]
 800d078:	e192      	b.n	800d3a0 <f_write+0x352>
	if (fp->err)							/* Check error */
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d080:	2b00      	cmp	r3, #0
 800d082:	d003      	beq.n	800d08c <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d08a:	e189      	b.n	800d3a0 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d092:	f003 0302 	and.w	r3, r3, #2
 800d096:	2b00      	cmp	r3, #0
 800d098:	d101      	bne.n	800d09e <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800d09a:	2307      	movs	r3, #7
 800d09c:	e180      	b.n	800d3a0 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	441a      	add	r2, r3
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	f080 8158 	bcs.w	800d364 <f_write+0x316>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800d0b8:	e154      	b.n	800d364 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	f040 8114 	bne.w	800d2f2 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d0d0:	0a5b      	lsrs	r3, r3, #9
 800d0d2:	b2da      	uxtb	r2, r3
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d0da:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d0de:	3b01      	subs	r3, #1
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	4013      	ands	r3, r2
 800d0e4:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800d0e6:	7dbb      	ldrb	r3, [r7, #22]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d151      	bne.n	800d190 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d10f      	bne.n	800d116 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d0fc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d100:	2b00      	cmp	r3, #0
 800d102:	d121      	bne.n	800d148 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d10a:	2100      	movs	r1, #0
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fe fc20 	bl	800b952 <create_chain>
 800d112:	6278      	str	r0, [r7, #36]	; 0x24
 800d114:	e018      	b.n	800d148 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d008      	beq.n	800d132 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d126:	4619      	mov	r1, r3
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f7fe fcaf 	bl	800ba8c <clmt_clust>
 800d12e:	6278      	str	r0, [r7, #36]	; 0x24
 800d130:	e00a      	b.n	800d148 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d13e:	4619      	mov	r1, r3
 800d140:	4610      	mov	r0, r2
 800d142:	f7fe fc06 	bl	800b952 <create_chain>
 800d146:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f000 810f 	beq.w	800d36e <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d152:	2b01      	cmp	r3, #1
 800d154:	d105      	bne.n	800d162 <f_write+0x114>
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2202      	movs	r2, #2
 800d15a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d15e:	2302      	movs	r3, #2
 800d160:	e11e      	b.n	800d3a0 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d168:	d105      	bne.n	800d176 <f_write+0x128>
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2201      	movs	r2, #1
 800d16e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d172:	2301      	movs	r3, #1
 800d174:	e114      	b.n	800d3a0 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d17a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d184:	2b00      	cmp	r3, #0
 800d186:	d103      	bne.n	800d190 <f_write+0x142>
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d18c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d01d      	beq.n	800d1da <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d1a4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d1a8:	68f9      	ldr	r1, [r7, #12]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	f7fd fdfd 	bl	800adb0 <disk_write>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d005      	beq.n	800d1c8 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e0eb      	b.n	800d3a0 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d1ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1d2:	b2da      	uxtb	r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	4610      	mov	r0, r2
 800d1ea:	f7fe f96f 	bl	800b4cc <clust2sect>
 800d1ee:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d105      	bne.n	800d202 <f_write+0x1b4>
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2202      	movs	r2, #2
 800d1fa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d1fe:	2302      	movs	r3, #2
 800d200:	e0ce      	b.n	800d3a0 <f_write+0x352>
			sect += csect;
 800d202:	7dbb      	ldrb	r3, [r7, #22]
 800d204:	693a      	ldr	r2, [r7, #16]
 800d206:	4413      	add	r3, r2
 800d208:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	0a5b      	lsrs	r3, r3, #9
 800d20e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d048      	beq.n	800d2a8 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d216:	7dba      	ldrb	r2, [r7, #22]
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	4413      	add	r3, r2
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800d222:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800d226:	4293      	cmp	r3, r2
 800d228:	d908      	bls.n	800d23c <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d230:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d234:	461a      	mov	r2, r3
 800d236:	7dbb      	ldrb	r3, [r7, #22]
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d242:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d246:	69fb      	ldr	r3, [r7, #28]
 800d248:	693a      	ldr	r2, [r7, #16]
 800d24a:	69b9      	ldr	r1, [r7, #24]
 800d24c:	f7fd fdb0 	bl	800adb0 <disk_write>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d005      	beq.n	800d262 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2201      	movs	r2, #1
 800d25a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d25e:	2301      	movs	r3, #1
 800d260:	e09e      	b.n	800d3a0 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	1ad3      	subs	r3, r2, r3
 800d26c:	69fa      	ldr	r2, [r7, #28]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d916      	bls.n	800d2a0 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	025b      	lsls	r3, r3, #9
 800d280:	69ba      	ldr	r2, [r7, #24]
 800d282:	4413      	add	r3, r2
 800d284:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d288:	4619      	mov	r1, r3
 800d28a:	f7fd fdcf 	bl	800ae2c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d298:	b2da      	uxtb	r2, r3
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	025b      	lsls	r3, r3, #9
 800d2a4:	623b      	str	r3, [r7, #32]
				continue;
 800d2a6:	e047      	b.n	800d338 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d2ae:	693a      	ldr	r2, [r7, #16]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d01a      	beq.n	800d2ea <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d212      	bcs.n	800d2ea <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d2ca:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d2ce:	68f9      	ldr	r1, [r7, #12]
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	693a      	ldr	r2, [r7, #16]
 800d2d4:	f7fd fd4c 	bl	800ad70 <disk_read>
 800d2d8:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d005      	beq.n	800d2ea <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e05a      	b.n	800d3a0 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	693a      	ldr	r2, [r7, #16]
 800d2ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d300:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800d302:	6a3a      	ldr	r2, [r7, #32]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	429a      	cmp	r2, r3
 800d308:	d901      	bls.n	800d30e <f_write+0x2c0>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d318:	68fa      	ldr	r2, [r7, #12]
 800d31a:	4413      	add	r3, r2
 800d31c:	6a3a      	ldr	r2, [r7, #32]
 800d31e:	69b9      	ldr	r1, [r7, #24]
 800d320:	4618      	mov	r0, r3
 800d322:	f7fd fd83 	bl	800ae2c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d330:	b2da      	uxtb	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800d338:	69ba      	ldr	r2, [r7, #24]
 800d33a:	6a3b      	ldr	r3, [r7, #32]
 800d33c:	4413      	add	r3, r2
 800d33e:	61bb      	str	r3, [r7, #24]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d346:	6a3b      	ldr	r3, [r7, #32]
 800d348:	441a      	add	r2, r3
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	6a3b      	ldr	r3, [r7, #32]
 800d356:	441a      	add	r2, r3
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	601a      	str	r2, [r3, #0]
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	6a3b      	ldr	r3, [r7, #32]
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	f47f aea7 	bne.w	800d0ba <f_write+0x6c>
 800d36c:	e000      	b.n	800d370 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d36e:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d905      	bls.n	800d38c <f_write+0x33e>
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d392:	f043 0320 	orr.w	r3, r3, #32
 800d396:	b2da      	uxtb	r2, r3
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3728      	adds	r7, #40	; 0x28
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b086      	sub	sp, #24
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7ff fbc5 	bl	800cb40 <validate>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d3ba:	7dfb      	ldrb	r3, [r7, #23]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f040 80a8 	bne.w	800d512 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d3c8:	f003 0320 	and.w	r3, r3, #32
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	f000 80a0 	beq.w	800d512 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d019      	beq.n	800d414 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d3e6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d3ea:	6879      	ldr	r1, [r7, #4]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	f7fd fcdc 	bl	800adb0 <disk_write>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d001      	beq.n	800d402 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800d3fe:	2301      	movs	r3, #1
 800d400:	e088      	b.n	800d514 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d40c:	b2da      	uxtb	r2, r3
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d420:	4619      	mov	r1, r3
 800d422:	4610      	mov	r0, r2
 800d424:	f7fd ff77 	bl	800b316 <move_window>
 800d428:	4603      	mov	r3, r0
 800d42a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800d42c:	7dfb      	ldrb	r3, [r7, #23]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d16f      	bne.n	800d512 <f_sync+0x16a>
				dir = fp->dir_ptr;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800d438:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	330b      	adds	r3, #11
 800d43e:	781a      	ldrb	r2, [r3, #0]
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	330b      	adds	r3, #11
 800d444:	f042 0220 	orr.w	r2, r2, #32
 800d448:	b2d2      	uxtb	r2, r2
 800d44a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	331c      	adds	r3, #28
 800d456:	b2d2      	uxtb	r2, r2
 800d458:	701a      	strb	r2, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d460:	b29b      	uxth	r3, r3
 800d462:	0a1b      	lsrs	r3, r3, #8
 800d464:	b29a      	uxth	r2, r3
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	331d      	adds	r3, #29
 800d46a:	b2d2      	uxtb	r2, r2
 800d46c:	701a      	strb	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d474:	0c1a      	lsrs	r2, r3, #16
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	331e      	adds	r3, #30
 800d47a:	b2d2      	uxtb	r2, r2
 800d47c:	701a      	strb	r2, [r3, #0]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d484:	0e1a      	lsrs	r2, r3, #24
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	331f      	adds	r3, #31
 800d48a:	b2d2      	uxtb	r2, r2
 800d48c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d494:	4619      	mov	r1, r3
 800d496:	6938      	ldr	r0, [r7, #16]
 800d498:	f7fe fd2e 	bl	800bef8 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800d49c:	f7fa fe5c 	bl	8008158 <get_fattime>
 800d4a0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	3316      	adds	r3, #22
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	b2d2      	uxtb	r2, r2
 800d4aa:	701a      	strb	r2, [r3, #0]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	0a1b      	lsrs	r3, r3, #8
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	3317      	adds	r3, #23
 800d4b8:	b2d2      	uxtb	r2, r2
 800d4ba:	701a      	strb	r2, [r3, #0]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	0c1a      	lsrs	r2, r3, #16
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	3318      	adds	r3, #24
 800d4c4:	b2d2      	uxtb	r2, r2
 800d4c6:	701a      	strb	r2, [r3, #0]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	0e1a      	lsrs	r2, r3, #24
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	3319      	adds	r3, #25
 800d4d0:	b2d2      	uxtb	r2, r2
 800d4d2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	3312      	adds	r3, #18
 800d4d8:	2200      	movs	r2, #0
 800d4da:	701a      	strb	r2, [r3, #0]
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	3313      	adds	r3, #19
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d4ea:	f023 0320 	bic.w	r3, r3, #32
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d508:	4618      	mov	r0, r3
 800d50a:	f7fd ff32 	bl	800b372 <sync_fs>
 800d50e:	4603      	mov	r3, r0
 800d510:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800d512:	7dfb      	ldrb	r3, [r7, #23]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3718      	adds	r7, #24
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f7ff ff3f 	bl	800d3a8 <f_sync>
 800d52a:	4603      	mov	r3, r0
 800d52c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d52e:	7bfb      	ldrb	r3, [r7, #15]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d116      	bne.n	800d562 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f7ff fb03 	bl	800cb40 <validate>
 800d53a:	4603      	mov	r3, r0
 800d53c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d53e:	7bfb      	ldrb	r3, [r7, #15]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d10e      	bne.n	800d562 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7fd fe2c 	bl	800b1a8 <dec_lock>
 800d550:	4603      	mov	r3, r0
 800d552:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d554:	7bfb      	ldrb	r3, [r7, #15]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d103      	bne.n	800d562 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d562:	7bfb      	ldrb	r3, [r7, #15]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3710      	adds	r7, #16
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b088      	sub	sp, #32
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d101      	bne.n	800d580 <f_opendir+0x14>
 800d57c:	2309      	movs	r3, #9
 800d57e:	e073      	b.n	800d668 <f_opendir+0xfc>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800d580:	4639      	mov	r1, r7
 800d582:	f107 0318 	add.w	r3, r7, #24
 800d586:	2200      	movs	r2, #0
 800d588:	4618      	mov	r0, r3
 800d58a:	f7ff f80f 	bl	800c5ac <find_volume>
 800d58e:	4603      	mov	r3, r0
 800d590:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 800d592:	7ffb      	ldrb	r3, [r7, #31]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d15f      	bne.n	800d658 <f_opendir+0xec>
		dp->fs = fs;
 800d598:	69ba      	ldr	r2, [r7, #24]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f107 020c 	add.w	r2, r7, #12
 800d5a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7fe fee0 	bl	800c374 <follow_path>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800d5b8:	7ffb      	ldrb	r3, [r7, #31]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d147      	bne.n	800d64e <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d017      	beq.n	800d5f8 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d5ce:	330b      	adds	r3, #11
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	f003 0310 	and.w	r3, r3, #16
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00c      	beq.n	800d5f4 <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 800d5da:	69ba      	ldr	r2, [r7, #24]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	4610      	mov	r0, r2
 800d5e6:	f7fe fc5a 	bl	800be9e <ld_clust>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800d5f2:	e001      	b.n	800d5f8 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800d5f4:	2305      	movs	r3, #5
 800d5f6:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 800d5f8:	7ffb      	ldrb	r3, [r7, #31]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d127      	bne.n	800d64e <f_opendir+0xe2>
				dp->id = fs->id;
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d60a:	2100      	movs	r1, #0
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f7fe fa71 	bl	800baf4 <dir_sdi>
 800d612:	4603      	mov	r3, r0
 800d614:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 800d616:	7ffb      	ldrb	r3, [r7, #31]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d118      	bne.n	800d64e <f_opendir+0xe2>
					if (dp->sclust) {
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00f      	beq.n	800d646 <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d626:	2100      	movs	r1, #0
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f7fd fd07 	bl	800b03c <inc_lock>
 800d62e:	4602      	mov	r2, r0
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d106      	bne.n	800d64e <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 800d640:	2312      	movs	r3, #18
 800d642:	77fb      	strb	r3, [r7, #31]
 800d644:	e003      	b.n	800d64e <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2200      	movs	r2, #0
 800d64a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d64e:	7ffb      	ldrb	r3, [r7, #31]
 800d650:	2b04      	cmp	r3, #4
 800d652:	d101      	bne.n	800d658 <f_opendir+0xec>
 800d654:	2305      	movs	r3, #5
 800d656:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800d658:	7ffb      	ldrb	r3, [r7, #31]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d003      	beq.n	800d666 <f_opendir+0xfa>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2200      	movs	r2, #0
 800d662:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 800d666:	7ffb      	ldrb	r3, [r7, #31]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3720      	adds	r7, #32
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7ff fa61 	bl	800cb40 <validate>
 800d67e:	4603      	mov	r3, r0
 800d680:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d682:	7bfb      	ldrb	r3, [r7, #15]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d113      	bne.n	800d6b0 <f_closedir+0x40>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d007      	beq.n	800d6a2 <f_closedir+0x32>
			res = dec_lock(dp->lockid);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d698:	4618      	mov	r0, r3
 800d69a:	f7fd fd85 	bl	800b1a8 <dec_lock>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 800d6a2:	7bfb      	ldrb	r3, [r7, #15]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d103      	bne.n	800d6b0 <f_closedir+0x40>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b086      	sub	sp, #24
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
 800d6c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7ff fa3b 	bl	800cb40 <validate>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d6ce:	7dfb      	ldrb	r3, [r7, #23]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d133      	bne.n	800d73c <f_readdir+0x82>
		if (!fno) {
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d106      	bne.n	800d6e8 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d6da:	2100      	movs	r1, #0
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f7fe fa09 	bl	800baf4 <dir_sdi>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	75fb      	strb	r3, [r7, #23]
 800d6e6:	e029      	b.n	800d73c <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f107 0208 	add.w	r2, r7, #8
 800d6ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f7fe fc74 	bl	800bfe2 <dir_read>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800d6fe:	7dfb      	ldrb	r3, [r7, #23]
 800d700:	2b04      	cmp	r3, #4
 800d702:	d105      	bne.n	800d710 <f_readdir+0x56>
				dp->sect = 0;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 800d70c:	2300      	movs	r3, #0
 800d70e:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 800d710:	7dfb      	ldrb	r3, [r7, #23]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d112      	bne.n	800d73c <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d716:	6839      	ldr	r1, [r7, #0]
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f7fe fcfa 	bl	800c112 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d71e:	2100      	movs	r1, #0
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f7fe fa7b 	bl	800bc1c <dir_next>
 800d726:	4603      	mov	r3, r0
 800d728:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 800d72a:	7dfb      	ldrb	r3, [r7, #23]
 800d72c:	2b04      	cmp	r3, #4
 800d72e:	d105      	bne.n	800d73c <f_readdir+0x82>
					dp->sect = 0;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 800d738:	2300      	movs	r3, #0
 800d73a:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800d73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3718      	adds	r7, #24
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d746:	b580      	push	{r7, lr}
 800d748:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	1d3b      	adds	r3, r7, #4
 800d750:	6018      	str	r0, [r3, #0]
 800d752:	463b      	mov	r3, r7
 800d754:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 800d756:	1d39      	adds	r1, r7, #4
 800d758:	f107 0314 	add.w	r3, r7, #20
 800d75c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d760:	2200      	movs	r2, #0
 800d762:	4618      	mov	r0, r3
 800d764:	f7fe ff22 	bl	800c5ac <find_volume>
 800d768:	4603      	mov	r3, r0
 800d76a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (res == FR_OK) {
 800d76e:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800d772:	2b00      	cmp	r3, #0
 800d774:	d129      	bne.n	800d7ca <f_stat+0x84>
		INIT_BUF(dj);
 800d776:	f107 0314 	add.w	r3, r7, #20
 800d77a:	f107 0208 	add.w	r2, r7, #8
 800d77e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800d782:	1d3b      	adds	r3, r7, #4
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	f107 0314 	add.w	r3, r7, #20
 800d78a:	4611      	mov	r1, r2
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fe fdf1 	bl	800c374 <follow_path>
 800d792:	4603      	mov	r3, r0
 800d794:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res == FR_OK) {				/* Follow completed */
 800d798:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d114      	bne.n	800d7ca <f_stat+0x84>
			if (dj.dir) {		/* Found an object */
 800d7a0:	f107 0314 	add.w	r3, r7, #20
 800d7a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00b      	beq.n	800d7c4 <f_stat+0x7e>
				if (fno) get_fileinfo(&dj, fno);
 800d7ac:	463b      	mov	r3, r7
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d00a      	beq.n	800d7ca <f_stat+0x84>
 800d7b4:	463b      	mov	r3, r7
 800d7b6:	f107 0214 	add.w	r2, r7, #20
 800d7ba:	6819      	ldr	r1, [r3, #0]
 800d7bc:	4610      	mov	r0, r2
 800d7be:	f7fe fca8 	bl	800c112 <get_fileinfo>
 800d7c2:	e002      	b.n	800d7ca <f_stat+0x84>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 800d7c4:	2306      	movs	r3, #6
 800d7c6:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 800d7ca:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f507 770e 	add.w	r7, r7, #568	; 0x238
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b08e      	sub	sp, #56	; 0x38
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800d7e4:	f107 030c 	add.w	r3, r7, #12
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f7fe fedd 	bl	800c5ac <find_volume>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800d7fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d802:	2b00      	cmp	r3, #0
 800d804:	f040 80af 	bne.w	800d966 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d814:	3b02      	subs	r3, #2
 800d816:	429a      	cmp	r2, r3
 800d818:	d805      	bhi.n	800d826 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	601a      	str	r2, [r3, #0]
 800d824:	e09f      	b.n	800d966 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d82c:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800d82e:	2300      	movs	r3, #0
 800d830:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800d832:	7efb      	ldrb	r3, [r7, #27]
 800d834:	2b01      	cmp	r3, #1
 800d836:	d125      	bne.n	800d884 <f_getfree+0xac>
				clst = 2;
 800d838:	2302      	movs	r3, #2
 800d83a:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800d83c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d83e:	69f8      	ldr	r0, [r7, #28]
 800d840:	f7fd fe65 	bl	800b50e <get_fat>
 800d844:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84c:	d103      	bne.n	800d856 <f_getfree+0x7e>
 800d84e:	2301      	movs	r3, #1
 800d850:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d854:	e077      	b.n	800d946 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d103      	bne.n	800d864 <f_getfree+0x8c>
 800d85c:	2302      	movs	r3, #2
 800d85e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d862:	e070      	b.n	800d946 <f_getfree+0x16e>
					if (stat == 0) n++;
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d102      	bne.n	800d870 <f_getfree+0x98>
 800d86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86c:	3301      	adds	r3, #1
 800d86e:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800d870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d872:	3301      	adds	r3, #1
 800d874:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d87c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d87e:	429a      	cmp	r2, r3
 800d880:	d3dc      	bcc.n	800d83c <f_getfree+0x64>
 800d882:	e060      	b.n	800d946 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d88a:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800d892:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800d894:	2300      	movs	r3, #0
 800d896:	627b      	str	r3, [r7, #36]	; 0x24
 800d898:	2300      	movs	r3, #0
 800d89a:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d112      	bne.n	800d8c8 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 800d8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a4:	1c5a      	adds	r2, r3, #1
 800d8a6:	62ba      	str	r2, [r7, #40]	; 0x28
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	69f8      	ldr	r0, [r7, #28]
 800d8ac:	f7fd fd33 	bl	800b316 <move_window>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800d8b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d142      	bne.n	800d944 <f_getfree+0x16c>
						p = fs->win.d8;
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800d8c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8c6:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800d8c8:	7efb      	ldrb	r3, [r7, #27]
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d115      	bne.n	800d8fa <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 800d8ce:	6a3b      	ldr	r3, [r7, #32]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	021b      	lsls	r3, r3, #8
 800d8d6:	b21a      	sxth	r2, r3
 800d8d8:	6a3b      	ldr	r3, [r7, #32]
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	b21b      	sxth	r3, r3
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	b21b      	sxth	r3, r3
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d102      	bne.n	800d8ec <f_getfree+0x114>
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800d8ec:	6a3b      	ldr	r3, [r7, #32]
 800d8ee:	3302      	adds	r3, #2
 800d8f0:	623b      	str	r3, [r7, #32]
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f4:	3b02      	subs	r3, #2
 800d8f6:	627b      	str	r3, [r7, #36]	; 0x24
 800d8f8:	e01d      	b.n	800d936 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800d8fa:	6a3b      	ldr	r3, [r7, #32]
 800d8fc:	3303      	adds	r3, #3
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	061a      	lsls	r2, r3, #24
 800d902:	6a3b      	ldr	r3, [r7, #32]
 800d904:	3302      	adds	r3, #2
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	041b      	lsls	r3, r3, #16
 800d90a:	4313      	orrs	r3, r2
 800d90c:	6a3a      	ldr	r2, [r7, #32]
 800d90e:	3201      	adds	r2, #1
 800d910:	7812      	ldrb	r2, [r2, #0]
 800d912:	0212      	lsls	r2, r2, #8
 800d914:	4313      	orrs	r3, r2
 800d916:	6a3a      	ldr	r2, [r7, #32]
 800d918:	7812      	ldrb	r2, [r2, #0]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d920:	2b00      	cmp	r3, #0
 800d922:	d102      	bne.n	800d92a <f_getfree+0x152>
 800d924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d926:	3301      	adds	r3, #1
 800d928:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800d92a:	6a3b      	ldr	r3, [r7, #32]
 800d92c:	3304      	adds	r3, #4
 800d92e:	623b      	str	r3, [r7, #32]
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	3b04      	subs	r3, #4
 800d934:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800d936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d938:	3b01      	subs	r3, #1
 800d93a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d1ac      	bne.n	800d89c <f_getfree+0xc4>
 800d942:	e000      	b.n	800d946 <f_getfree+0x16e>
						if (res != FR_OK) break;
 800d944:	bf00      	nop
			}
			fs->free_clust = n;
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d94a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800d954:	f043 0301 	orr.w	r3, r3, #1
 800d958:	b2da      	uxtb	r2, r3
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d964:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800d966:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3738      	adds	r7, #56	; 0x38
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
	...

0800d974 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d974:	b480      	push	{r7}
 800d976:	b087      	sub	sp, #28
 800d978:	af00      	add	r7, sp, #0
 800d97a:	60f8      	str	r0, [r7, #12]
 800d97c:	60b9      	str	r1, [r7, #8]
 800d97e:	4613      	mov	r3, r2
 800d980:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d982:	2301      	movs	r3, #1
 800d984:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800d98a:	4b1e      	ldr	r3, [pc, #120]	; (800da04 <FATFS_LinkDriverEx+0x90>)
 800d98c:	7a5b      	ldrb	r3, [r3, #9]
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	2b01      	cmp	r3, #1
 800d992:	d831      	bhi.n	800d9f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d994:	4b1b      	ldr	r3, [pc, #108]	; (800da04 <FATFS_LinkDriverEx+0x90>)
 800d996:	7a5b      	ldrb	r3, [r3, #9]
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	461a      	mov	r2, r3
 800d99c:	4b19      	ldr	r3, [pc, #100]	; (800da04 <FATFS_LinkDriverEx+0x90>)
 800d99e:	2100      	movs	r1, #0
 800d9a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800d9a2:	4b18      	ldr	r3, [pc, #96]	; (800da04 <FATFS_LinkDriverEx+0x90>)
 800d9a4:	7a5b      	ldrb	r3, [r3, #9]
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	4a16      	ldr	r2, [pc, #88]	; (800da04 <FATFS_LinkDriverEx+0x90>)
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	68fa      	ldr	r2, [r7, #12]
 800d9b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800d9b2:	4b14      	ldr	r3, [pc, #80]	; (800da04 <FATFS_LinkDriverEx+0x90>)
 800d9b4:	7a5b      	ldrb	r3, [r3, #9]
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	4b12      	ldr	r3, [pc, #72]	; (800da04 <FATFS_LinkDriverEx+0x90>)
 800d9bc:	4413      	add	r3, r2
 800d9be:	79fa      	ldrb	r2, [r7, #7]
 800d9c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d9c2:	4b10      	ldr	r3, [pc, #64]	; (800da04 <FATFS_LinkDriverEx+0x90>)
 800d9c4:	7a5b      	ldrb	r3, [r3, #9]
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	1c5a      	adds	r2, r3, #1
 800d9ca:	b2d1      	uxtb	r1, r2
 800d9cc:	4a0d      	ldr	r2, [pc, #52]	; (800da04 <FATFS_LinkDriverEx+0x90>)
 800d9ce:	7251      	strb	r1, [r2, #9]
 800d9d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d9d2:	7dbb      	ldrb	r3, [r7, #22]
 800d9d4:	3330      	adds	r3, #48	; 0x30
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	223a      	movs	r2, #58	; 0x3a
 800d9e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	3302      	adds	r3, #2
 800d9e8:	222f      	movs	r2, #47	; 0x2f
 800d9ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	3303      	adds	r3, #3
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800d9f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	371c      	adds	r7, #28
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bc80      	pop	{r7}
 800da02:	4770      	bx	lr
 800da04:	2000c8a0 	.word	0x2000c8a0

0800da08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800da12:	2200      	movs	r2, #0
 800da14:	6839      	ldr	r1, [r7, #0]
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7ff ffac 	bl	800d974 <FATFS_LinkDriverEx>
 800da1c:	4603      	mov	r3, r0
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3708      	adds	r7, #8
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800da26:	b480      	push	{r7}
 800da28:	b083      	sub	sp, #12
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	4603      	mov	r3, r0
 800da2e:	71fb      	strb	r3, [r7, #7]
  return RES_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	370c      	adds	r7, #12
 800da36:	46bd      	mov	sp, r7
 800da38:	bc80      	pop	{r7}
 800da3a:	4770      	bx	lr

0800da3c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	4603      	mov	r3, r0
 800da44:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800da46:	2301      	movs	r3, #1
 800da48:	73fb      	strb	r3, [r7, #15]
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 800da4a:	79fb      	ldrb	r3, [r7, #7]
 800da4c:	4619      	mov	r1, r3
 800da4e:	4808      	ldr	r0, [pc, #32]	; (800da70 <USBH_status+0x34>)
 800da50:	f7fb f8ab 	bl	8008baa <USBH_MSC_UnitIsReady>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d002      	beq.n	800da60 <USBH_status+0x24>
  {
    res = RES_OK;
 800da5a:	2300      	movs	r3, #0
 800da5c:	73fb      	strb	r3, [r7, #15]
 800da5e:	e001      	b.n	800da64 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800da60:	2301      	movs	r3, #1
 800da62:	73fb      	strb	r3, [r7, #15]
  }
  
  return res;
 800da64:	7bfb      	ldrb	r3, [r7, #15]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	2000cf3c 	.word	0x2000cf3c

0800da74 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b094      	sub	sp, #80	; 0x50
 800da78:	af02      	add	r7, sp, #8
 800da7a:	60b9      	str	r1, [r7, #8]
 800da7c:	607a      	str	r2, [r7, #4]
 800da7e:	603b      	str	r3, [r7, #0]
 800da80:	4603      	mov	r3, r0
 800da82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800da84:	2301      	movs	r3, #1
 800da86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 800da8a:	2300      	movs	r3, #0
 800da8c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	f003 0303 	and.w	r3, r3, #3
 800da96:	2b00      	cmp	r3, #0
 800da98:	d002      	beq.n	800daa0 <USBH_read+0x2c>
      {
        break;
      }
    }
#else
    return res;
 800da9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800da9e:	e02c      	b.n	800dafa <USBH_read+0x86>
#endif
  }
  else
  {
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 800daa0:	7bf9      	ldrb	r1, [r7, #15]
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	4816      	ldr	r0, [pc, #88]	; (800db04 <USBH_read+0x90>)
 800daac:	f7fb f8c6 	bl	8008c3c <USBH_MSC_Read>
 800dab0:	4603      	mov	r3, r0
 800dab2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 800dab6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d103      	bne.n	800dac6 <USBH_read+0x52>
  {
    res = RES_OK;
 800dabe:	2300      	movs	r3, #0
 800dac0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dac4:	e017      	b.n	800daf6 <USBH_read+0x82>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 800dac6:	f107 0210 	add.w	r2, r7, #16
 800daca:	7bfb      	ldrb	r3, [r7, #15]
 800dacc:	4619      	mov	r1, r3
 800dace:	480d      	ldr	r0, [pc, #52]	; (800db04 <USBH_read+0x90>)
 800dad0:	f7fb f890 	bl	8008bf4 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 800dad4:	7f7b      	ldrb	r3, [r7, #29]
 800dad6:	2b3a      	cmp	r3, #58	; 0x3a
 800dad8:	d005      	beq.n	800dae6 <USBH_read+0x72>
 800dada:	2b3a      	cmp	r3, #58	; 0x3a
 800dadc:	dc07      	bgt.n	800daee <USBH_read+0x7a>
 800dade:	2b04      	cmp	r3, #4
 800dae0:	d001      	beq.n	800dae6 <USBH_read+0x72>
 800dae2:	2b28      	cmp	r3, #40	; 0x28
 800dae4:	d103      	bne.n	800daee <USBH_read+0x7a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE: 
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
 800dae6:	2303      	movs	r3, #3
 800dae8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 800daec:	e003      	b.n	800daf6 <USBH_read+0x82>
      
    default:
      res = RES_ERROR;
 800daee:	2301      	movs	r3, #1
 800daf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800daf4:	bf00      	nop
    }
  }
  
  return res;
 800daf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3748      	adds	r7, #72	; 0x48
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	2000cf3c 	.word	0x2000cf3c

0800db08 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b094      	sub	sp, #80	; 0x50
 800db0c:	af02      	add	r7, sp, #8
 800db0e:	60b9      	str	r1, [r7, #8]
 800db10:	607a      	str	r2, [r7, #4]
 800db12:	603b      	str	r3, [r7, #0]
 800db14:	4603      	mov	r3, r0
 800db16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR; 
 800db18:	2301      	movs	r3, #1
 800db1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;  
 800db1e:	2300      	movs	r3, #0
 800db20:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	f003 0303 	and.w	r3, r3, #3
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d002      	beq.n	800db34 <USBH_write+0x2c>
      {
        break;
      }
    }
#else
    return res;
 800db2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800db32:	e034      	b.n	800db9e <USBH_write+0x96>
#endif
  }
  else
  {
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 800db34:	7bf9      	ldrb	r1, [r7, #15]
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	9300      	str	r3, [sp, #0]
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	481a      	ldr	r0, [pc, #104]	; (800dba8 <USBH_write+0xa0>)
 800db40:	f7fb f8e5 	bl	8008d0e <USBH_MSC_Write>
 800db44:	4603      	mov	r3, r0
 800db46:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 800db4a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d103      	bne.n	800db5a <USBH_write+0x52>
  {
    res = RES_OK;
 800db52:	2300      	movs	r3, #0
 800db54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800db58:	e01f      	b.n	800db9a <USBH_write+0x92>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 800db5a:	f107 0210 	add.w	r2, r7, #16
 800db5e:	7bfb      	ldrb	r3, [r7, #15]
 800db60:	4619      	mov	r1, r3
 800db62:	4811      	ldr	r0, [pc, #68]	; (800dba8 <USBH_write+0xa0>)
 800db64:	f7fb f846 	bl	8008bf4 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 800db68:	7f7b      	ldrb	r3, [r7, #29]
 800db6a:	2b3a      	cmp	r3, #58	; 0x3a
 800db6c:	d00d      	beq.n	800db8a <USBH_write+0x82>
 800db6e:	2b3a      	cmp	r3, #58	; 0x3a
 800db70:	dc0f      	bgt.n	800db92 <USBH_write+0x8a>
 800db72:	2b28      	cmp	r3, #40	; 0x28
 800db74:	d009      	beq.n	800db8a <USBH_write+0x82>
 800db76:	2b28      	cmp	r3, #40	; 0x28
 800db78:	dc0b      	bgt.n	800db92 <USBH_write+0x8a>
 800db7a:	2b04      	cmp	r3, #4
 800db7c:	d005      	beq.n	800db8a <USBH_write+0x82>
 800db7e:	2b27      	cmp	r3, #39	; 0x27
 800db80:	d107      	bne.n	800db92 <USBH_write+0x8a>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800db82:	2302      	movs	r3, #2
 800db84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800db88:	e007      	b.n	800db9a <USBH_write+0x92>
      
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");      
      res = RES_NOTRDY;
 800db8a:	2303      	movs	r3, #3
 800db8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 800db90:	e003      	b.n	800db9a <USBH_write+0x92>
      
    default:
      res = RES_ERROR;
 800db92:	2301      	movs	r3, #1
 800db94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800db98:	bf00      	nop
    }
  }
  
  return res;   
 800db9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3748      	adds	r7, #72	; 0x48
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	2000cf3c 	.word	0x2000cf3c

0800dbac <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b090      	sub	sp, #64	; 0x40
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	603a      	str	r2, [r7, #0]
 800dbb6:	71fb      	strb	r3, [r7, #7]
 800dbb8:	460b      	mov	r3, r1
 800dbba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;
  
  switch (cmd)
 800dbc2:	79bb      	ldrb	r3, [r7, #6]
 800dbc4:	2b03      	cmp	r3, #3
 800dbc6:	d850      	bhi.n	800dc6a <USBH_ioctl+0xbe>
 800dbc8:	a201      	add	r2, pc, #4	; (adr r2, 800dbd0 <USBH_ioctl+0x24>)
 800dbca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbce:	bf00      	nop
 800dbd0:	0800dbe1 	.word	0x0800dbe1
 800dbd4:	0800dbe9 	.word	0x0800dbe9
 800dbd8:	0800dc13 	.word	0x0800dc13
 800dbdc:	0800dc3f 	.word	0x0800dc3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC: 
    res = RES_OK;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800dbe6:	e043      	b.n	800dc70 <USBH_ioctl+0xc4>
    
  /* Get number of sectors on the disk (DWORD) */  
  case GET_SECTOR_COUNT : 
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800dbe8:	f107 0208 	add.w	r2, r7, #8
 800dbec:	79fb      	ldrb	r3, [r7, #7]
 800dbee:	4619      	mov	r1, r3
 800dbf0:	4822      	ldr	r0, [pc, #136]	; (800dc7c <USBH_ioctl+0xd0>)
 800dbf2:	f7fa ffff 	bl	8008bf4 <USBH_MSC_GetLUNInfo>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d106      	bne.n	800dc0a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800dbfc:	68fa      	ldr	r2, [r7, #12]
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800dc02:	2300      	movs	r3, #0
 800dc04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800dc08:	e032      	b.n	800dc70 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800dc10:	e02e      	b.n	800dc70 <USBH_ioctl+0xc4>
    
  /* Get R/W sector size (WORD) */  
  case GET_SECTOR_SIZE :	
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800dc12:	f107 0208 	add.w	r2, r7, #8
 800dc16:	79fb      	ldrb	r3, [r7, #7]
 800dc18:	4619      	mov	r1, r3
 800dc1a:	4818      	ldr	r0, [pc, #96]	; (800dc7c <USBH_ioctl+0xd0>)
 800dc1c:	f7fa ffea 	bl	8008bf4 <USBH_MSC_GetLUNInfo>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d107      	bne.n	800dc36 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800dc26:	8a3b      	ldrh	r3, [r7, #16]
 800dc28:	461a      	mov	r2, r3
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800dc34:	e01c      	b.n	800dc70 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800dc3c:	e018      	b.n	800dc70 <USBH_ioctl+0xc4>
    
    /* Get erase block size in unit of sector (DWORD) */ 
  case GET_BLOCK_SIZE : 
    
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800dc3e:	f107 0208 	add.w	r2, r7, #8
 800dc42:	79fb      	ldrb	r3, [r7, #7]
 800dc44:	4619      	mov	r1, r3
 800dc46:	480d      	ldr	r0, [pc, #52]	; (800dc7c <USBH_ioctl+0xd0>)
 800dc48:	f7fa ffd4 	bl	8008bf4 <USBH_MSC_GetLUNInfo>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d107      	bne.n	800dc62 <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800dc52:	8a3b      	ldrh	r3, [r7, #16]
 800dc54:	461a      	mov	r2, r3
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800dc60:	e006      	b.n	800dc70 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800dc68:	e002      	b.n	800dc70 <USBH_ioctl+0xc4>
    
  default:
    res = RES_PARERR;
 800dc6a:	2304      	movs	r3, #4
 800dc6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  return res;
 800dc70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3740      	adds	r7, #64	; 0x40
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	2000cf3c 	.word	0x2000cf3c

0800dc80 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800dc84:	2201      	movs	r2, #1
 800dc86:	490e      	ldr	r1, [pc, #56]	; (800dcc0 <MX_USB_HOST_Init+0x40>)
 800dc88:	480e      	ldr	r0, [pc, #56]	; (800dcc4 <MX_USB_HOST_Init+0x44>)
 800dc8a:	f7fb fdf7 	bl	800987c <USBH_Init>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d001      	beq.n	800dc98 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dc94:	f7f4 fd78 	bl	8002788 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800dc98:	490b      	ldr	r1, [pc, #44]	; (800dcc8 <MX_USB_HOST_Init+0x48>)
 800dc9a:	480a      	ldr	r0, [pc, #40]	; (800dcc4 <MX_USB_HOST_Init+0x44>)
 800dc9c:	f7fb fe72 	bl	8009984 <USBH_RegisterClass>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d001      	beq.n	800dcaa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800dca6:	f7f4 fd6f 	bl	8002788 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800dcaa:	4806      	ldr	r0, [pc, #24]	; (800dcc4 <MX_USB_HOST_Init+0x44>)
 800dcac:	f7fb fef4 	bl	8009a98 <USBH_Start>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d001      	beq.n	800dcba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dcb6:	f7f4 fd67 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800dcba:	bf00      	nop
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	0800dce1 	.word	0x0800dce1
 800dcc4:	2000cf3c 	.word	0x2000cf3c
 800dcc8:	20000040 	.word	0x20000040

0800dccc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800dcd0:	4802      	ldr	r0, [pc, #8]	; (800dcdc <MX_USB_HOST_Process+0x10>)
 800dcd2:	f7fb fef1 	bl	8009ab8 <USBH_Process>
}
 800dcd6:	bf00      	nop
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	2000cf3c 	.word	0x2000cf3c

0800dce0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	460b      	mov	r3, r1
 800dcea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800dcec:	78fb      	ldrb	r3, [r7, #3]
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	2b04      	cmp	r3, #4
 800dcf2:	d828      	bhi.n	800dd46 <USBH_UserProcess+0x66>
 800dcf4:	a201      	add	r2, pc, #4	; (adr r2, 800dcfc <USBH_UserProcess+0x1c>)
 800dcf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfa:	bf00      	nop
 800dcfc:	0800dd47 	.word	0x0800dd47
 800dd00:	0800dd23 	.word	0x0800dd23
 800dd04:	0800dd47 	.word	0x0800dd47
 800dd08:	0800dd3f 	.word	0x0800dd3f
 800dd0c:	0800dd11 	.word	0x0800dd11
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dd10:	4b0f      	ldr	r3, [pc, #60]	; (800dd50 <USBH_UserProcess+0x70>)
 800dd12:	2203      	movs	r2, #3
 800dd14:	701a      	strb	r2, [r3, #0]
  usb_good = 0;
 800dd16:	4b0f      	ldr	r3, [pc, #60]	; (800dd54 <USBH_UserProcess+0x74>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	601a      	str	r2, [r3, #0]
  Unmount_USB();
 800dd1c:	f7f3 fbb0 	bl	8001480 <Unmount_USB>
  break;
 800dd20:	e012      	b.n	800dd48 <USBH_UserProcess+0x68>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dd22:	4b0b      	ldr	r3, [pc, #44]	; (800dd50 <USBH_UserProcess+0x70>)
 800dd24:	2202      	movs	r2, #2
 800dd26:	701a      	strb	r2, [r3, #0]
	Mount_USB();
 800dd28:	f7f3 fb96 	bl	8001458 <Mount_USB>
	Check_USB_Details();
 800dd2c:	f7f3 fcac 	bl	8001688 <Check_USB_Details>
	Scan_USB("/");
 800dd30:	4809      	ldr	r0, [pc, #36]	; (800dd58 <USBH_UserProcess+0x78>)
 800dd32:	f7f3 fbb7 	bl	80014a4 <Scan_USB>

  usb_good = 1;
 800dd36:	4b07      	ldr	r3, [pc, #28]	; (800dd54 <USBH_UserProcess+0x74>)
 800dd38:	2201      	movs	r2, #1
 800dd3a:	601a      	str	r2, [r3, #0]

  break;
 800dd3c:	e004      	b.n	800dd48 <USBH_UserProcess+0x68>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dd3e:	4b04      	ldr	r3, [pc, #16]	; (800dd50 <USBH_UserProcess+0x70>)
 800dd40:	2201      	movs	r2, #1
 800dd42:	701a      	strb	r2, [r3, #0]
  break;
 800dd44:	e000      	b.n	800dd48 <USBH_UserProcess+0x68>

  default:
  break;
 800dd46:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800dd48:	bf00      	nop
 800dd4a:	3708      	adds	r7, #8
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	2000c8ac 	.word	0x2000c8ac
 800dd54:	2000c8b0 	.word	0x2000c8b0
 800dd58:	08012c1c 	.word	0x08012c1c

0800dd5c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b08a      	sub	sp, #40	; 0x28
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd64:	f107 0314 	add.w	r3, r7, #20
 800dd68:	2200      	movs	r2, #0
 800dd6a:	601a      	str	r2, [r3, #0]
 800dd6c:	605a      	str	r2, [r3, #4]
 800dd6e:	609a      	str	r2, [r3, #8]
 800dd70:	60da      	str	r2, [r3, #12]
 800dd72:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dd7c:	d147      	bne.n	800de0e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd7e:	2300      	movs	r3, #0
 800dd80:	613b      	str	r3, [r7, #16]
 800dd82:	4b25      	ldr	r3, [pc, #148]	; (800de18 <HAL_HCD_MspInit+0xbc>)
 800dd84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd86:	4a24      	ldr	r2, [pc, #144]	; (800de18 <HAL_HCD_MspInit+0xbc>)
 800dd88:	f043 0301 	orr.w	r3, r3, #1
 800dd8c:	6313      	str	r3, [r2, #48]	; 0x30
 800dd8e:	4b22      	ldr	r3, [pc, #136]	; (800de18 <HAL_HCD_MspInit+0xbc>)
 800dd90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd92:	f003 0301 	and.w	r3, r3, #1
 800dd96:	613b      	str	r3, [r7, #16]
 800dd98:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dd9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dda0:	2300      	movs	r3, #0
 800dda2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dda4:	2300      	movs	r3, #0
 800dda6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dda8:	f107 0314 	add.w	r3, r7, #20
 800ddac:	4619      	mov	r1, r3
 800ddae:	481b      	ldr	r0, [pc, #108]	; (800de1c <HAL_HCD_MspInit+0xc0>)
 800ddb0:	f7f5 fb74 	bl	800349c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ddb4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ddb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddba:	2302      	movs	r3, #2
 800ddbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ddc2:	2303      	movs	r3, #3
 800ddc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ddc6:	230a      	movs	r3, #10
 800ddc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ddca:	f107 0314 	add.w	r3, r7, #20
 800ddce:	4619      	mov	r1, r3
 800ddd0:	4812      	ldr	r0, [pc, #72]	; (800de1c <HAL_HCD_MspInit+0xc0>)
 800ddd2:	f7f5 fb63 	bl	800349c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ddd6:	4b10      	ldr	r3, [pc, #64]	; (800de18 <HAL_HCD_MspInit+0xbc>)
 800ddd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddda:	4a0f      	ldr	r2, [pc, #60]	; (800de18 <HAL_HCD_MspInit+0xbc>)
 800dddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dde0:	6353      	str	r3, [r2, #52]	; 0x34
 800dde2:	2300      	movs	r3, #0
 800dde4:	60fb      	str	r3, [r7, #12]
 800dde6:	4b0c      	ldr	r3, [pc, #48]	; (800de18 <HAL_HCD_MspInit+0xbc>)
 800dde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddea:	4a0b      	ldr	r2, [pc, #44]	; (800de18 <HAL_HCD_MspInit+0xbc>)
 800ddec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ddf0:	6453      	str	r3, [r2, #68]	; 0x44
 800ddf2:	4b09      	ldr	r3, [pc, #36]	; (800de18 <HAL_HCD_MspInit+0xbc>)
 800ddf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddfa:	60fb      	str	r3, [r7, #12]
 800ddfc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ddfe:	2200      	movs	r2, #0
 800de00:	2100      	movs	r1, #0
 800de02:	2043      	movs	r0, #67	; 0x43
 800de04:	f7f5 fb13 	bl	800342e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800de08:	2043      	movs	r0, #67	; 0x43
 800de0a:	f7f5 fb2c 	bl	8003466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800de0e:	bf00      	nop
 800de10:	3728      	adds	r7, #40	; 0x28
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	40023800 	.word	0x40023800
 800de1c:	40020000 	.word	0x40020000

0800de20 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fc f910 	bl	800a054 <USBH_LL_IncTimer>
}
 800de34:	bf00      	nop
 800de36:	3708      	adds	r7, #8
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fc f946 	bl	800a0dc <USBH_LL_Connect>
}
 800de50:	bf00      	nop
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800de66:	4618      	mov	r0, r3
 800de68:	f7fc f94e 	bl	800a108 <USBH_LL_Disconnect>
}
 800de6c:	bf00      	nop
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	460b      	mov	r3, r1
 800de7e:	70fb      	strb	r3, [r7, #3]
 800de80:	4613      	mov	r3, r2
 800de82:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800de84:	bf00      	nop
 800de86:	370c      	adds	r7, #12
 800de88:	46bd      	mov	sp, r7
 800de8a:	bc80      	pop	{r7}
 800de8c:	4770      	bx	lr

0800de8e <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800de8e:	b580      	push	{r7, lr}
 800de90:	b082      	sub	sp, #8
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7fc f903 	bl	800a0a8 <USBH_LL_PortEnabled>
}
 800dea2:	bf00      	nop
 800dea4:	3708      	adds	r7, #8
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800deaa:	b580      	push	{r7, lr}
 800deac:	b082      	sub	sp, #8
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800deb8:	4618      	mov	r0, r3
 800deba:	f7fc f902 	bl	800a0c2 <USBH_LL_PortDisabled>
}
 800debe:	bf00      	nop
 800dec0:	3708      	adds	r7, #8
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
	...

0800dec8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d12a      	bne.n	800df30 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800deda:	4a18      	ldr	r2, [pc, #96]	; (800df3c <USBH_LL_Init+0x74>)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4a15      	ldr	r2, [pc, #84]	; (800df3c <USBH_LL_Init+0x74>)
 800dee6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800deea:	4b14      	ldr	r3, [pc, #80]	; (800df3c <USBH_LL_Init+0x74>)
 800deec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800def0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800def2:	4b12      	ldr	r3, [pc, #72]	; (800df3c <USBH_LL_Init+0x74>)
 800def4:	2208      	movs	r2, #8
 800def6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800def8:	4b10      	ldr	r3, [pc, #64]	; (800df3c <USBH_LL_Init+0x74>)
 800defa:	2201      	movs	r2, #1
 800defc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800defe:	4b0f      	ldr	r3, [pc, #60]	; (800df3c <USBH_LL_Init+0x74>)
 800df00:	2200      	movs	r2, #0
 800df02:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800df04:	4b0d      	ldr	r3, [pc, #52]	; (800df3c <USBH_LL_Init+0x74>)
 800df06:	2202      	movs	r2, #2
 800df08:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800df0a:	4b0c      	ldr	r3, [pc, #48]	; (800df3c <USBH_LL_Init+0x74>)
 800df0c:	2200      	movs	r2, #0
 800df0e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800df10:	480a      	ldr	r0, [pc, #40]	; (800df3c <USBH_LL_Init+0x74>)
 800df12:	f7f5 fc79 	bl	8003808 <HAL_HCD_Init>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d001      	beq.n	800df20 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800df1c:	f7f4 fc34 	bl	8002788 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800df20:	4806      	ldr	r0, [pc, #24]	; (800df3c <USBH_LL_Init+0x74>)
 800df22:	f7f6 f853 	bl	8003fcc <HAL_HCD_GetCurrentFrame>
 800df26:	4603      	mov	r3, r0
 800df28:	4619      	mov	r1, r3
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f7fc f884 	bl	800a038 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800df30:	2300      	movs	r3, #0
}
 800df32:	4618      	mov	r0, r3
 800df34:	3708      	adds	r7, #8
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	2000d30c 	.word	0x2000d30c

0800df40 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df48:	2300      	movs	r3, #0
 800df4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df4c:	2300      	movs	r3, #0
 800df4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800df56:	4618      	mov	r0, r3
 800df58:	f7f5 ffc4 	bl	8003ee4 <HAL_HCD_Start>
 800df5c:	4603      	mov	r3, r0
 800df5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800df60:	7bfb      	ldrb	r3, [r7, #15]
 800df62:	4618      	mov	r0, r3
 800df64:	f000 f98a 	bl	800e27c <USBH_Get_USB_Status>
 800df68:	4603      	mov	r3, r0
 800df6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b084      	sub	sp, #16
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df7e:	2300      	movs	r3, #0
 800df80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df82:	2300      	movs	r3, #0
 800df84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7f5 ffcc 	bl	8003f2a <HAL_HCD_Stop>
 800df92:	4603      	mov	r3, r0
 800df94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800df96:	7bfb      	ldrb	r3, [r7, #15]
 800df98:	4618      	mov	r0, r3
 800df9a:	f000 f96f 	bl	800e27c <USBH_Get_USB_Status>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfa2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3710      	adds	r7, #16
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7f6 f812 	bl	8003fe8 <HAL_HCD_GetCurrentSpeed>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b02      	cmp	r3, #2
 800dfc8:	d00c      	beq.n	800dfe4 <USBH_LL_GetSpeed+0x38>
 800dfca:	2b02      	cmp	r3, #2
 800dfcc:	d80d      	bhi.n	800dfea <USBH_LL_GetSpeed+0x3e>
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d002      	beq.n	800dfd8 <USBH_LL_GetSpeed+0x2c>
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d003      	beq.n	800dfde <USBH_LL_GetSpeed+0x32>
 800dfd6:	e008      	b.n	800dfea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	73fb      	strb	r3, [r7, #15]
    break;
 800dfdc:	e008      	b.n	800dff0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	73fb      	strb	r3, [r7, #15]
    break;
 800dfe2:	e005      	b.n	800dff0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dfe4:	2302      	movs	r3, #2
 800dfe6:	73fb      	strb	r3, [r7, #15]
    break;
 800dfe8:	e002      	b.n	800dff0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dfea:	2301      	movs	r3, #1
 800dfec:	73fb      	strb	r3, [r7, #15]
    break;
 800dfee:	bf00      	nop
  }
  return  speed;
 800dff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dffa:	b580      	push	{r7, lr}
 800dffc:	b084      	sub	sp, #16
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e002:	2300      	movs	r3, #0
 800e004:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e006:	2300      	movs	r3, #0
 800e008:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e010:	4618      	mov	r0, r3
 800e012:	f7f5 ffa7 	bl	8003f64 <HAL_HCD_ResetPort>
 800e016:	4603      	mov	r3, r0
 800e018:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e01a:	7bfb      	ldrb	r3, [r7, #15]
 800e01c:	4618      	mov	r0, r3
 800e01e:	f000 f92d 	bl	800e27c <USBH_Get_USB_Status>
 800e022:	4603      	mov	r3, r0
 800e024:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e026:	7bbb      	ldrb	r3, [r7, #14]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3710      	adds	r7, #16
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	460b      	mov	r3, r1
 800e03a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e042:	78fa      	ldrb	r2, [r7, #3]
 800e044:	4611      	mov	r1, r2
 800e046:	4618      	mov	r0, r3
 800e048:	f7f5 ffad 	bl	8003fa6 <HAL_HCD_HC_GetXferCount>
 800e04c:	4603      	mov	r3, r0
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3708      	adds	r7, #8
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e056:	b590      	push	{r4, r7, lr}
 800e058:	b089      	sub	sp, #36	; 0x24
 800e05a:	af04      	add	r7, sp, #16
 800e05c:	6078      	str	r0, [r7, #4]
 800e05e:	4608      	mov	r0, r1
 800e060:	4611      	mov	r1, r2
 800e062:	461a      	mov	r2, r3
 800e064:	4603      	mov	r3, r0
 800e066:	70fb      	strb	r3, [r7, #3]
 800e068:	460b      	mov	r3, r1
 800e06a:	70bb      	strb	r3, [r7, #2]
 800e06c:	4613      	mov	r3, r2
 800e06e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e070:	2300      	movs	r3, #0
 800e072:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e074:	2300      	movs	r3, #0
 800e076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800e07e:	787c      	ldrb	r4, [r7, #1]
 800e080:	78ba      	ldrb	r2, [r7, #2]
 800e082:	78f9      	ldrb	r1, [r7, #3]
 800e084:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e086:	9302      	str	r3, [sp, #8]
 800e088:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e08c:	9301      	str	r3, [sp, #4]
 800e08e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	4623      	mov	r3, r4
 800e096:	f7f5 fc19 	bl	80038cc <HAL_HCD_HC_Init>
 800e09a:	4603      	mov	r3, r0
 800e09c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e09e:	7bfb      	ldrb	r3, [r7, #15]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f000 f8eb 	bl	800e27c <USBH_Get_USB_Status>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3714      	adds	r7, #20
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd90      	pop	{r4, r7, pc}

0800e0b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e0ce:	78fa      	ldrb	r2, [r7, #3]
 800e0d0:	4611      	mov	r1, r2
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7f5 fc89 	bl	80039ea <HAL_HCD_HC_Halt>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0dc:	7bfb      	ldrb	r3, [r7, #15]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f000 f8cc 	bl	800e27c <USBH_Get_USB_Status>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e0f2:	b590      	push	{r4, r7, lr}
 800e0f4:	b089      	sub	sp, #36	; 0x24
 800e0f6:	af04      	add	r7, sp, #16
 800e0f8:	6078      	str	r0, [r7, #4]
 800e0fa:	4608      	mov	r0, r1
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	461a      	mov	r2, r3
 800e100:	4603      	mov	r3, r0
 800e102:	70fb      	strb	r3, [r7, #3]
 800e104:	460b      	mov	r3, r1
 800e106:	70bb      	strb	r3, [r7, #2]
 800e108:	4613      	mov	r3, r2
 800e10a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e10c:	2300      	movs	r3, #0
 800e10e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e110:	2300      	movs	r3, #0
 800e112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800e11a:	787c      	ldrb	r4, [r7, #1]
 800e11c:	78ba      	ldrb	r2, [r7, #2]
 800e11e:	78f9      	ldrb	r1, [r7, #3]
 800e120:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e124:	9303      	str	r3, [sp, #12]
 800e126:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e128:	9302      	str	r3, [sp, #8]
 800e12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12c:	9301      	str	r3, [sp, #4]
 800e12e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	4623      	mov	r3, r4
 800e136:	f7f5 fc7b 	bl	8003a30 <HAL_HCD_HC_SubmitRequest>
 800e13a:	4603      	mov	r3, r0
 800e13c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e13e:	7bfb      	ldrb	r3, [r7, #15]
 800e140:	4618      	mov	r0, r3
 800e142:	f000 f89b 	bl	800e27c <USBH_Get_USB_Status>
 800e146:	4603      	mov	r3, r0
 800e148:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e14a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3714      	adds	r7, #20
 800e150:	46bd      	mov	sp, r7
 800e152:	bd90      	pop	{r4, r7, pc}

0800e154 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	460b      	mov	r3, r1
 800e15e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e166:	78fa      	ldrb	r2, [r7, #3]
 800e168:	4611      	mov	r1, r2
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7f5 ff08 	bl	8003f80 <HAL_HCD_HC_GetURBState>
 800e170:	4603      	mov	r3, r0
}
 800e172:	4618      	mov	r0, r3
 800e174:	3708      	adds	r7, #8
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}

0800e17a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b082      	sub	sp, #8
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
 800e182:	460b      	mov	r3, r1
 800e184:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d103      	bne.n	800e198 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e190:	78fb      	ldrb	r3, [r7, #3]
 800e192:	4618      	mov	r0, r3
 800e194:	f000 f89e 	bl	800e2d4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e198:	20c8      	movs	r0, #200	; 0xc8
 800e19a:	f7f4 fde3 	bl	8002d64 <HAL_Delay>
  return USBH_OK;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	70fb      	strb	r3, [r7, #3]
 800e1b4:	4613      	mov	r3, r2
 800e1b6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e1be:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e1c0:	78fb      	ldrb	r3, [r7, #3]
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	212c      	movs	r1, #44	; 0x2c
 800e1c6:	fb01 f303 	mul.w	r3, r1, r3
 800e1ca:	4413      	add	r3, r2
 800e1cc:	333b      	adds	r3, #59	; 0x3b
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d009      	beq.n	800e1e8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e1d4:	78fb      	ldrb	r3, [r7, #3]
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	212c      	movs	r1, #44	; 0x2c
 800e1da:	fb01 f303 	mul.w	r3, r1, r3
 800e1de:	4413      	add	r3, r2
 800e1e0:	3354      	adds	r3, #84	; 0x54
 800e1e2:	78ba      	ldrb	r2, [r7, #2]
 800e1e4:	701a      	strb	r2, [r3, #0]
 800e1e6:	e008      	b.n	800e1fa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e1e8:	78fb      	ldrb	r3, [r7, #3]
 800e1ea:	68fa      	ldr	r2, [r7, #12]
 800e1ec:	212c      	movs	r1, #44	; 0x2c
 800e1ee:	fb01 f303 	mul.w	r3, r1, r3
 800e1f2:	4413      	add	r3, r2
 800e1f4:	3355      	adds	r3, #85	; 0x55
 800e1f6:	78ba      	ldrb	r2, [r7, #2]
 800e1f8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3714      	adds	r7, #20
 800e200:	46bd      	mov	sp, r7
 800e202:	bc80      	pop	{r7}
 800e204:	4770      	bx	lr

0800e206 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e206:	b480      	push	{r7}
 800e208:	b085      	sub	sp, #20
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
 800e20e:	460b      	mov	r3, r1
 800e210:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e212:	2300      	movs	r3, #0
 800e214:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e21c:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e21e:	78fb      	ldrb	r3, [r7, #3]
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	212c      	movs	r1, #44	; 0x2c
 800e224:	fb01 f303 	mul.w	r3, r1, r3
 800e228:	4413      	add	r3, r2
 800e22a:	333b      	adds	r3, #59	; 0x3b
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d009      	beq.n	800e246 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e232:	78fb      	ldrb	r3, [r7, #3]
 800e234:	68ba      	ldr	r2, [r7, #8]
 800e236:	212c      	movs	r1, #44	; 0x2c
 800e238:	fb01 f303 	mul.w	r3, r1, r3
 800e23c:	4413      	add	r3, r2
 800e23e:	3354      	adds	r3, #84	; 0x54
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	73fb      	strb	r3, [r7, #15]
 800e244:	e008      	b.n	800e258 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e246:	78fb      	ldrb	r3, [r7, #3]
 800e248:	68ba      	ldr	r2, [r7, #8]
 800e24a:	212c      	movs	r1, #44	; 0x2c
 800e24c:	fb01 f303 	mul.w	r3, r1, r3
 800e250:	4413      	add	r3, r2
 800e252:	3355      	adds	r3, #85	; 0x55
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e258:	7bfb      	ldrb	r3, [r7, #15]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3714      	adds	r7, #20
 800e25e:	46bd      	mov	sp, r7
 800e260:	bc80      	pop	{r7}
 800e262:	4770      	bx	lr

0800e264 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f7f4 fd79 	bl	8002d64 <HAL_Delay>
}
 800e272:	bf00      	nop
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
	...

0800e27c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b085      	sub	sp, #20
 800e280:	af00      	add	r7, sp, #0
 800e282:	4603      	mov	r3, r0
 800e284:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e286:	2300      	movs	r3, #0
 800e288:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e28a:	79fb      	ldrb	r3, [r7, #7]
 800e28c:	2b03      	cmp	r3, #3
 800e28e:	d817      	bhi.n	800e2c0 <USBH_Get_USB_Status+0x44>
 800e290:	a201      	add	r2, pc, #4	; (adr r2, 800e298 <USBH_Get_USB_Status+0x1c>)
 800e292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e296:	bf00      	nop
 800e298:	0800e2a9 	.word	0x0800e2a9
 800e29c:	0800e2af 	.word	0x0800e2af
 800e2a0:	0800e2b5 	.word	0x0800e2b5
 800e2a4:	0800e2bb 	.word	0x0800e2bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e2ac:	e00b      	b.n	800e2c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e2b2:	e008      	b.n	800e2c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e2b8:	e005      	b.n	800e2c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e2ba:	2302      	movs	r3, #2
 800e2bc:	73fb      	strb	r3, [r7, #15]
    break;
 800e2be:	e002      	b.n	800e2c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e2c0:	2302      	movs	r3, #2
 800e2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e2c4:	bf00      	nop
  }
  return usb_status;
 800e2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3714      	adds	r7, #20
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bc80      	pop	{r7}
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop

0800e2d4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	4603      	mov	r3, r0
 800e2dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e2e2:	79fb      	ldrb	r3, [r7, #7]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d102      	bne.n	800e2ee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	73fb      	strb	r3, [r7, #15]
 800e2ec:	e001      	b.n	800e2f2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,(GPIO_PinState)data);
 800e2f2:	7bfb      	ldrb	r3, [r7, #15]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	2104      	movs	r1, #4
 800e2f8:	4803      	ldr	r0, [pc, #12]	; (800e308 <MX_DriverVbusFS+0x34>)
 800e2fa:	f7f5 fa6d 	bl	80037d8 <HAL_GPIO_WritePin>
}
 800e2fe:	bf00      	nop
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	40020800 	.word	0x40020800

0800e30c <__errno>:
 800e30c:	4b01      	ldr	r3, [pc, #4]	; (800e314 <__errno+0x8>)
 800e30e:	6818      	ldr	r0, [r3, #0]
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	20000060 	.word	0x20000060

0800e318 <__libc_init_array>:
 800e318:	b570      	push	{r4, r5, r6, lr}
 800e31a:	2600      	movs	r6, #0
 800e31c:	4d0c      	ldr	r5, [pc, #48]	; (800e350 <__libc_init_array+0x38>)
 800e31e:	4c0d      	ldr	r4, [pc, #52]	; (800e354 <__libc_init_array+0x3c>)
 800e320:	1b64      	subs	r4, r4, r5
 800e322:	10a4      	asrs	r4, r4, #2
 800e324:	42a6      	cmp	r6, r4
 800e326:	d109      	bne.n	800e33c <__libc_init_array+0x24>
 800e328:	f004 fc30 	bl	8012b8c <_init>
 800e32c:	2600      	movs	r6, #0
 800e32e:	4d0a      	ldr	r5, [pc, #40]	; (800e358 <__libc_init_array+0x40>)
 800e330:	4c0a      	ldr	r4, [pc, #40]	; (800e35c <__libc_init_array+0x44>)
 800e332:	1b64      	subs	r4, r4, r5
 800e334:	10a4      	asrs	r4, r4, #2
 800e336:	42a6      	cmp	r6, r4
 800e338:	d105      	bne.n	800e346 <__libc_init_array+0x2e>
 800e33a:	bd70      	pop	{r4, r5, r6, pc}
 800e33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e340:	4798      	blx	r3
 800e342:	3601      	adds	r6, #1
 800e344:	e7ee      	b.n	800e324 <__libc_init_array+0xc>
 800e346:	f855 3b04 	ldr.w	r3, [r5], #4
 800e34a:	4798      	blx	r3
 800e34c:	3601      	adds	r6, #1
 800e34e:	e7f2      	b.n	800e336 <__libc_init_array+0x1e>
 800e350:	08013184 	.word	0x08013184
 800e354:	08013184 	.word	0x08013184
 800e358:	08013184 	.word	0x08013184
 800e35c:	08013188 	.word	0x08013188

0800e360 <malloc>:
 800e360:	4b02      	ldr	r3, [pc, #8]	; (800e36c <malloc+0xc>)
 800e362:	4601      	mov	r1, r0
 800e364:	6818      	ldr	r0, [r3, #0]
 800e366:	f000 b86d 	b.w	800e444 <_malloc_r>
 800e36a:	bf00      	nop
 800e36c:	20000060 	.word	0x20000060

0800e370 <free>:
 800e370:	4b02      	ldr	r3, [pc, #8]	; (800e37c <free+0xc>)
 800e372:	4601      	mov	r1, r0
 800e374:	6818      	ldr	r0, [r3, #0]
 800e376:	f000 b819 	b.w	800e3ac <_free_r>
 800e37a:	bf00      	nop
 800e37c:	20000060 	.word	0x20000060

0800e380 <memcpy>:
 800e380:	440a      	add	r2, r1
 800e382:	4291      	cmp	r1, r2
 800e384:	f100 33ff 	add.w	r3, r0, #4294967295
 800e388:	d100      	bne.n	800e38c <memcpy+0xc>
 800e38a:	4770      	bx	lr
 800e38c:	b510      	push	{r4, lr}
 800e38e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e392:	4291      	cmp	r1, r2
 800e394:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e398:	d1f9      	bne.n	800e38e <memcpy+0xe>
 800e39a:	bd10      	pop	{r4, pc}

0800e39c <memset>:
 800e39c:	4603      	mov	r3, r0
 800e39e:	4402      	add	r2, r0
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d100      	bne.n	800e3a6 <memset+0xa>
 800e3a4:	4770      	bx	lr
 800e3a6:	f803 1b01 	strb.w	r1, [r3], #1
 800e3aa:	e7f9      	b.n	800e3a0 <memset+0x4>

0800e3ac <_free_r>:
 800e3ac:	b538      	push	{r3, r4, r5, lr}
 800e3ae:	4605      	mov	r5, r0
 800e3b0:	2900      	cmp	r1, #0
 800e3b2:	d043      	beq.n	800e43c <_free_r+0x90>
 800e3b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3b8:	1f0c      	subs	r4, r1, #4
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	bfb8      	it	lt
 800e3be:	18e4      	addlt	r4, r4, r3
 800e3c0:	f002 ffea 	bl	8011398 <__malloc_lock>
 800e3c4:	4a1e      	ldr	r2, [pc, #120]	; (800e440 <_free_r+0x94>)
 800e3c6:	6813      	ldr	r3, [r2, #0]
 800e3c8:	4610      	mov	r0, r2
 800e3ca:	b933      	cbnz	r3, 800e3da <_free_r+0x2e>
 800e3cc:	6063      	str	r3, [r4, #4]
 800e3ce:	6014      	str	r4, [r2, #0]
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3d6:	f002 bfe5 	b.w	80113a4 <__malloc_unlock>
 800e3da:	42a3      	cmp	r3, r4
 800e3dc:	d90a      	bls.n	800e3f4 <_free_r+0x48>
 800e3de:	6821      	ldr	r1, [r4, #0]
 800e3e0:	1862      	adds	r2, r4, r1
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	bf01      	itttt	eq
 800e3e6:	681a      	ldreq	r2, [r3, #0]
 800e3e8:	685b      	ldreq	r3, [r3, #4]
 800e3ea:	1852      	addeq	r2, r2, r1
 800e3ec:	6022      	streq	r2, [r4, #0]
 800e3ee:	6063      	str	r3, [r4, #4]
 800e3f0:	6004      	str	r4, [r0, #0]
 800e3f2:	e7ed      	b.n	800e3d0 <_free_r+0x24>
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	b10b      	cbz	r3, 800e3fe <_free_r+0x52>
 800e3fa:	42a3      	cmp	r3, r4
 800e3fc:	d9fa      	bls.n	800e3f4 <_free_r+0x48>
 800e3fe:	6811      	ldr	r1, [r2, #0]
 800e400:	1850      	adds	r0, r2, r1
 800e402:	42a0      	cmp	r0, r4
 800e404:	d10b      	bne.n	800e41e <_free_r+0x72>
 800e406:	6820      	ldr	r0, [r4, #0]
 800e408:	4401      	add	r1, r0
 800e40a:	1850      	adds	r0, r2, r1
 800e40c:	4283      	cmp	r3, r0
 800e40e:	6011      	str	r1, [r2, #0]
 800e410:	d1de      	bne.n	800e3d0 <_free_r+0x24>
 800e412:	6818      	ldr	r0, [r3, #0]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	4401      	add	r1, r0
 800e418:	6011      	str	r1, [r2, #0]
 800e41a:	6053      	str	r3, [r2, #4]
 800e41c:	e7d8      	b.n	800e3d0 <_free_r+0x24>
 800e41e:	d902      	bls.n	800e426 <_free_r+0x7a>
 800e420:	230c      	movs	r3, #12
 800e422:	602b      	str	r3, [r5, #0]
 800e424:	e7d4      	b.n	800e3d0 <_free_r+0x24>
 800e426:	6820      	ldr	r0, [r4, #0]
 800e428:	1821      	adds	r1, r4, r0
 800e42a:	428b      	cmp	r3, r1
 800e42c:	bf01      	itttt	eq
 800e42e:	6819      	ldreq	r1, [r3, #0]
 800e430:	685b      	ldreq	r3, [r3, #4]
 800e432:	1809      	addeq	r1, r1, r0
 800e434:	6021      	streq	r1, [r4, #0]
 800e436:	6063      	str	r3, [r4, #4]
 800e438:	6054      	str	r4, [r2, #4]
 800e43a:	e7c9      	b.n	800e3d0 <_free_r+0x24>
 800e43c:	bd38      	pop	{r3, r4, r5, pc}
 800e43e:	bf00      	nop
 800e440:	2000c8b4 	.word	0x2000c8b4

0800e444 <_malloc_r>:
 800e444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e446:	1ccd      	adds	r5, r1, #3
 800e448:	f025 0503 	bic.w	r5, r5, #3
 800e44c:	3508      	adds	r5, #8
 800e44e:	2d0c      	cmp	r5, #12
 800e450:	bf38      	it	cc
 800e452:	250c      	movcc	r5, #12
 800e454:	2d00      	cmp	r5, #0
 800e456:	4606      	mov	r6, r0
 800e458:	db01      	blt.n	800e45e <_malloc_r+0x1a>
 800e45a:	42a9      	cmp	r1, r5
 800e45c:	d903      	bls.n	800e466 <_malloc_r+0x22>
 800e45e:	230c      	movs	r3, #12
 800e460:	6033      	str	r3, [r6, #0]
 800e462:	2000      	movs	r0, #0
 800e464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e466:	f002 ff97 	bl	8011398 <__malloc_lock>
 800e46a:	4921      	ldr	r1, [pc, #132]	; (800e4f0 <_malloc_r+0xac>)
 800e46c:	680a      	ldr	r2, [r1, #0]
 800e46e:	4614      	mov	r4, r2
 800e470:	b99c      	cbnz	r4, 800e49a <_malloc_r+0x56>
 800e472:	4f20      	ldr	r7, [pc, #128]	; (800e4f4 <_malloc_r+0xb0>)
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	b923      	cbnz	r3, 800e482 <_malloc_r+0x3e>
 800e478:	4621      	mov	r1, r4
 800e47a:	4630      	mov	r0, r6
 800e47c:	f000 feae 	bl	800f1dc <_sbrk_r>
 800e480:	6038      	str	r0, [r7, #0]
 800e482:	4629      	mov	r1, r5
 800e484:	4630      	mov	r0, r6
 800e486:	f000 fea9 	bl	800f1dc <_sbrk_r>
 800e48a:	1c43      	adds	r3, r0, #1
 800e48c:	d123      	bne.n	800e4d6 <_malloc_r+0x92>
 800e48e:	230c      	movs	r3, #12
 800e490:	4630      	mov	r0, r6
 800e492:	6033      	str	r3, [r6, #0]
 800e494:	f002 ff86 	bl	80113a4 <__malloc_unlock>
 800e498:	e7e3      	b.n	800e462 <_malloc_r+0x1e>
 800e49a:	6823      	ldr	r3, [r4, #0]
 800e49c:	1b5b      	subs	r3, r3, r5
 800e49e:	d417      	bmi.n	800e4d0 <_malloc_r+0x8c>
 800e4a0:	2b0b      	cmp	r3, #11
 800e4a2:	d903      	bls.n	800e4ac <_malloc_r+0x68>
 800e4a4:	6023      	str	r3, [r4, #0]
 800e4a6:	441c      	add	r4, r3
 800e4a8:	6025      	str	r5, [r4, #0]
 800e4aa:	e004      	b.n	800e4b6 <_malloc_r+0x72>
 800e4ac:	6863      	ldr	r3, [r4, #4]
 800e4ae:	42a2      	cmp	r2, r4
 800e4b0:	bf0c      	ite	eq
 800e4b2:	600b      	streq	r3, [r1, #0]
 800e4b4:	6053      	strne	r3, [r2, #4]
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f002 ff74 	bl	80113a4 <__malloc_unlock>
 800e4bc:	f104 000b 	add.w	r0, r4, #11
 800e4c0:	1d23      	adds	r3, r4, #4
 800e4c2:	f020 0007 	bic.w	r0, r0, #7
 800e4c6:	1ac2      	subs	r2, r0, r3
 800e4c8:	d0cc      	beq.n	800e464 <_malloc_r+0x20>
 800e4ca:	1a1b      	subs	r3, r3, r0
 800e4cc:	50a3      	str	r3, [r4, r2]
 800e4ce:	e7c9      	b.n	800e464 <_malloc_r+0x20>
 800e4d0:	4622      	mov	r2, r4
 800e4d2:	6864      	ldr	r4, [r4, #4]
 800e4d4:	e7cc      	b.n	800e470 <_malloc_r+0x2c>
 800e4d6:	1cc4      	adds	r4, r0, #3
 800e4d8:	f024 0403 	bic.w	r4, r4, #3
 800e4dc:	42a0      	cmp	r0, r4
 800e4de:	d0e3      	beq.n	800e4a8 <_malloc_r+0x64>
 800e4e0:	1a21      	subs	r1, r4, r0
 800e4e2:	4630      	mov	r0, r6
 800e4e4:	f000 fe7a 	bl	800f1dc <_sbrk_r>
 800e4e8:	3001      	adds	r0, #1
 800e4ea:	d1dd      	bne.n	800e4a8 <_malloc_r+0x64>
 800e4ec:	e7cf      	b.n	800e48e <_malloc_r+0x4a>
 800e4ee:	bf00      	nop
 800e4f0:	2000c8b4 	.word	0x2000c8b4
 800e4f4:	2000c8b8 	.word	0x2000c8b8

0800e4f8 <__cvt>:
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4fe:	461f      	mov	r7, r3
 800e500:	bfbb      	ittet	lt
 800e502:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800e506:	461f      	movlt	r7, r3
 800e508:	2300      	movge	r3, #0
 800e50a:	232d      	movlt	r3, #45	; 0x2d
 800e50c:	b088      	sub	sp, #32
 800e50e:	4614      	mov	r4, r2
 800e510:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e512:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e514:	7013      	strb	r3, [r2, #0]
 800e516:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e518:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800e51c:	f023 0820 	bic.w	r8, r3, #32
 800e520:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e524:	d005      	beq.n	800e532 <__cvt+0x3a>
 800e526:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e52a:	d100      	bne.n	800e52e <__cvt+0x36>
 800e52c:	3501      	adds	r5, #1
 800e52e:	2302      	movs	r3, #2
 800e530:	e000      	b.n	800e534 <__cvt+0x3c>
 800e532:	2303      	movs	r3, #3
 800e534:	aa07      	add	r2, sp, #28
 800e536:	9204      	str	r2, [sp, #16]
 800e538:	aa06      	add	r2, sp, #24
 800e53a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e53e:	e9cd 3500 	strd	r3, r5, [sp]
 800e542:	4622      	mov	r2, r4
 800e544:	463b      	mov	r3, r7
 800e546:	f001 fdaf 	bl	80100a8 <_dtoa_r>
 800e54a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e54e:	4606      	mov	r6, r0
 800e550:	d102      	bne.n	800e558 <__cvt+0x60>
 800e552:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e554:	07db      	lsls	r3, r3, #31
 800e556:	d522      	bpl.n	800e59e <__cvt+0xa6>
 800e558:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e55c:	eb06 0905 	add.w	r9, r6, r5
 800e560:	d110      	bne.n	800e584 <__cvt+0x8c>
 800e562:	7833      	ldrb	r3, [r6, #0]
 800e564:	2b30      	cmp	r3, #48	; 0x30
 800e566:	d10a      	bne.n	800e57e <__cvt+0x86>
 800e568:	2200      	movs	r2, #0
 800e56a:	2300      	movs	r3, #0
 800e56c:	4620      	mov	r0, r4
 800e56e:	4639      	mov	r1, r7
 800e570:	f7f2 fa60 	bl	8000a34 <__aeabi_dcmpeq>
 800e574:	b918      	cbnz	r0, 800e57e <__cvt+0x86>
 800e576:	f1c5 0501 	rsb	r5, r5, #1
 800e57a:	f8ca 5000 	str.w	r5, [sl]
 800e57e:	f8da 3000 	ldr.w	r3, [sl]
 800e582:	4499      	add	r9, r3
 800e584:	2200      	movs	r2, #0
 800e586:	2300      	movs	r3, #0
 800e588:	4620      	mov	r0, r4
 800e58a:	4639      	mov	r1, r7
 800e58c:	f7f2 fa52 	bl	8000a34 <__aeabi_dcmpeq>
 800e590:	b108      	cbz	r0, 800e596 <__cvt+0x9e>
 800e592:	f8cd 901c 	str.w	r9, [sp, #28]
 800e596:	2230      	movs	r2, #48	; 0x30
 800e598:	9b07      	ldr	r3, [sp, #28]
 800e59a:	454b      	cmp	r3, r9
 800e59c:	d307      	bcc.n	800e5ae <__cvt+0xb6>
 800e59e:	4630      	mov	r0, r6
 800e5a0:	9b07      	ldr	r3, [sp, #28]
 800e5a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e5a4:	1b9b      	subs	r3, r3, r6
 800e5a6:	6013      	str	r3, [r2, #0]
 800e5a8:	b008      	add	sp, #32
 800e5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ae:	1c59      	adds	r1, r3, #1
 800e5b0:	9107      	str	r1, [sp, #28]
 800e5b2:	701a      	strb	r2, [r3, #0]
 800e5b4:	e7f0      	b.n	800e598 <__cvt+0xa0>

0800e5b6 <__exponent>:
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5ba:	2900      	cmp	r1, #0
 800e5bc:	f803 2b02 	strb.w	r2, [r3], #2
 800e5c0:	bfb6      	itet	lt
 800e5c2:	222d      	movlt	r2, #45	; 0x2d
 800e5c4:	222b      	movge	r2, #43	; 0x2b
 800e5c6:	4249      	neglt	r1, r1
 800e5c8:	2909      	cmp	r1, #9
 800e5ca:	7042      	strb	r2, [r0, #1]
 800e5cc:	dd2b      	ble.n	800e626 <__exponent+0x70>
 800e5ce:	f10d 0407 	add.w	r4, sp, #7
 800e5d2:	46a4      	mov	ip, r4
 800e5d4:	270a      	movs	r7, #10
 800e5d6:	fb91 f6f7 	sdiv	r6, r1, r7
 800e5da:	460a      	mov	r2, r1
 800e5dc:	46a6      	mov	lr, r4
 800e5de:	fb07 1516 	mls	r5, r7, r6, r1
 800e5e2:	2a63      	cmp	r2, #99	; 0x63
 800e5e4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800e5e8:	4631      	mov	r1, r6
 800e5ea:	f104 34ff 	add.w	r4, r4, #4294967295
 800e5ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e5f2:	dcf0      	bgt.n	800e5d6 <__exponent+0x20>
 800e5f4:	3130      	adds	r1, #48	; 0x30
 800e5f6:	f1ae 0502 	sub.w	r5, lr, #2
 800e5fa:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e5fe:	4629      	mov	r1, r5
 800e600:	1c44      	adds	r4, r0, #1
 800e602:	4561      	cmp	r1, ip
 800e604:	d30a      	bcc.n	800e61c <__exponent+0x66>
 800e606:	f10d 0209 	add.w	r2, sp, #9
 800e60a:	eba2 020e 	sub.w	r2, r2, lr
 800e60e:	4565      	cmp	r5, ip
 800e610:	bf88      	it	hi
 800e612:	2200      	movhi	r2, #0
 800e614:	4413      	add	r3, r2
 800e616:	1a18      	subs	r0, r3, r0
 800e618:	b003      	add	sp, #12
 800e61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e61c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e620:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e624:	e7ed      	b.n	800e602 <__exponent+0x4c>
 800e626:	2330      	movs	r3, #48	; 0x30
 800e628:	3130      	adds	r1, #48	; 0x30
 800e62a:	7083      	strb	r3, [r0, #2]
 800e62c:	70c1      	strb	r1, [r0, #3]
 800e62e:	1d03      	adds	r3, r0, #4
 800e630:	e7f1      	b.n	800e616 <__exponent+0x60>
	...

0800e634 <_printf_float>:
 800e634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e638:	b091      	sub	sp, #68	; 0x44
 800e63a:	460c      	mov	r4, r1
 800e63c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e640:	4616      	mov	r6, r2
 800e642:	461f      	mov	r7, r3
 800e644:	4605      	mov	r5, r0
 800e646:	f002 fe83 	bl	8011350 <_localeconv_r>
 800e64a:	6803      	ldr	r3, [r0, #0]
 800e64c:	4618      	mov	r0, r3
 800e64e:	9309      	str	r3, [sp, #36]	; 0x24
 800e650:	f7f1 fdc4 	bl	80001dc <strlen>
 800e654:	2300      	movs	r3, #0
 800e656:	930e      	str	r3, [sp, #56]	; 0x38
 800e658:	f8d8 3000 	ldr.w	r3, [r8]
 800e65c:	900a      	str	r0, [sp, #40]	; 0x28
 800e65e:	3307      	adds	r3, #7
 800e660:	f023 0307 	bic.w	r3, r3, #7
 800e664:	f103 0208 	add.w	r2, r3, #8
 800e668:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e66c:	f8d4 b000 	ldr.w	fp, [r4]
 800e670:	f8c8 2000 	str.w	r2, [r8]
 800e674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e678:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e67c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800e680:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800e684:	930b      	str	r3, [sp, #44]	; 0x2c
 800e686:	f04f 32ff 	mov.w	r2, #4294967295
 800e68a:	4640      	mov	r0, r8
 800e68c:	4b9c      	ldr	r3, [pc, #624]	; (800e900 <_printf_float+0x2cc>)
 800e68e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e690:	f7f2 fa02 	bl	8000a98 <__aeabi_dcmpun>
 800e694:	bb70      	cbnz	r0, 800e6f4 <_printf_float+0xc0>
 800e696:	f04f 32ff 	mov.w	r2, #4294967295
 800e69a:	4640      	mov	r0, r8
 800e69c:	4b98      	ldr	r3, [pc, #608]	; (800e900 <_printf_float+0x2cc>)
 800e69e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6a0:	f7f2 f9dc 	bl	8000a5c <__aeabi_dcmple>
 800e6a4:	bb30      	cbnz	r0, 800e6f4 <_printf_float+0xc0>
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	4640      	mov	r0, r8
 800e6ac:	4651      	mov	r1, sl
 800e6ae:	f7f2 f9cb 	bl	8000a48 <__aeabi_dcmplt>
 800e6b2:	b110      	cbz	r0, 800e6ba <_printf_float+0x86>
 800e6b4:	232d      	movs	r3, #45	; 0x2d
 800e6b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6ba:	4b92      	ldr	r3, [pc, #584]	; (800e904 <_printf_float+0x2d0>)
 800e6bc:	4892      	ldr	r0, [pc, #584]	; (800e908 <_printf_float+0x2d4>)
 800e6be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e6c2:	bf94      	ite	ls
 800e6c4:	4698      	movls	r8, r3
 800e6c6:	4680      	movhi	r8, r0
 800e6c8:	2303      	movs	r3, #3
 800e6ca:	f04f 0a00 	mov.w	sl, #0
 800e6ce:	6123      	str	r3, [r4, #16]
 800e6d0:	f02b 0304 	bic.w	r3, fp, #4
 800e6d4:	6023      	str	r3, [r4, #0]
 800e6d6:	4633      	mov	r3, r6
 800e6d8:	4621      	mov	r1, r4
 800e6da:	4628      	mov	r0, r5
 800e6dc:	9700      	str	r7, [sp, #0]
 800e6de:	aa0f      	add	r2, sp, #60	; 0x3c
 800e6e0:	f000 f9d4 	bl	800ea8c <_printf_common>
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	f040 8090 	bne.w	800e80a <_printf_float+0x1d6>
 800e6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ee:	b011      	add	sp, #68	; 0x44
 800e6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f4:	4642      	mov	r2, r8
 800e6f6:	4653      	mov	r3, sl
 800e6f8:	4640      	mov	r0, r8
 800e6fa:	4651      	mov	r1, sl
 800e6fc:	f7f2 f9cc 	bl	8000a98 <__aeabi_dcmpun>
 800e700:	b148      	cbz	r0, 800e716 <_printf_float+0xe2>
 800e702:	f1ba 0f00 	cmp.w	sl, #0
 800e706:	bfb8      	it	lt
 800e708:	232d      	movlt	r3, #45	; 0x2d
 800e70a:	4880      	ldr	r0, [pc, #512]	; (800e90c <_printf_float+0x2d8>)
 800e70c:	bfb8      	it	lt
 800e70e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e712:	4b7f      	ldr	r3, [pc, #508]	; (800e910 <_printf_float+0x2dc>)
 800e714:	e7d3      	b.n	800e6be <_printf_float+0x8a>
 800e716:	6863      	ldr	r3, [r4, #4]
 800e718:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e71c:	1c5a      	adds	r2, r3, #1
 800e71e:	d142      	bne.n	800e7a6 <_printf_float+0x172>
 800e720:	2306      	movs	r3, #6
 800e722:	6063      	str	r3, [r4, #4]
 800e724:	2200      	movs	r2, #0
 800e726:	9206      	str	r2, [sp, #24]
 800e728:	aa0e      	add	r2, sp, #56	; 0x38
 800e72a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800e72e:	aa0d      	add	r2, sp, #52	; 0x34
 800e730:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800e734:	9203      	str	r2, [sp, #12]
 800e736:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800e73a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e73e:	6023      	str	r3, [r4, #0]
 800e740:	6863      	ldr	r3, [r4, #4]
 800e742:	4642      	mov	r2, r8
 800e744:	9300      	str	r3, [sp, #0]
 800e746:	4628      	mov	r0, r5
 800e748:	4653      	mov	r3, sl
 800e74a:	910b      	str	r1, [sp, #44]	; 0x2c
 800e74c:	f7ff fed4 	bl	800e4f8 <__cvt>
 800e750:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e752:	4680      	mov	r8, r0
 800e754:	2947      	cmp	r1, #71	; 0x47
 800e756:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e758:	d108      	bne.n	800e76c <_printf_float+0x138>
 800e75a:	1cc8      	adds	r0, r1, #3
 800e75c:	db02      	blt.n	800e764 <_printf_float+0x130>
 800e75e:	6863      	ldr	r3, [r4, #4]
 800e760:	4299      	cmp	r1, r3
 800e762:	dd40      	ble.n	800e7e6 <_printf_float+0x1b2>
 800e764:	f1a9 0902 	sub.w	r9, r9, #2
 800e768:	fa5f f989 	uxtb.w	r9, r9
 800e76c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e770:	d81f      	bhi.n	800e7b2 <_printf_float+0x17e>
 800e772:	464a      	mov	r2, r9
 800e774:	3901      	subs	r1, #1
 800e776:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e77a:	910d      	str	r1, [sp, #52]	; 0x34
 800e77c:	f7ff ff1b 	bl	800e5b6 <__exponent>
 800e780:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e782:	4682      	mov	sl, r0
 800e784:	1813      	adds	r3, r2, r0
 800e786:	2a01      	cmp	r2, #1
 800e788:	6123      	str	r3, [r4, #16]
 800e78a:	dc02      	bgt.n	800e792 <_printf_float+0x15e>
 800e78c:	6822      	ldr	r2, [r4, #0]
 800e78e:	07d2      	lsls	r2, r2, #31
 800e790:	d501      	bpl.n	800e796 <_printf_float+0x162>
 800e792:	3301      	adds	r3, #1
 800e794:	6123      	str	r3, [r4, #16]
 800e796:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d09b      	beq.n	800e6d6 <_printf_float+0xa2>
 800e79e:	232d      	movs	r3, #45	; 0x2d
 800e7a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7a4:	e797      	b.n	800e6d6 <_printf_float+0xa2>
 800e7a6:	2947      	cmp	r1, #71	; 0x47
 800e7a8:	d1bc      	bne.n	800e724 <_printf_float+0xf0>
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d1ba      	bne.n	800e724 <_printf_float+0xf0>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e7b7      	b.n	800e722 <_printf_float+0xee>
 800e7b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e7b6:	d118      	bne.n	800e7ea <_printf_float+0x1b6>
 800e7b8:	2900      	cmp	r1, #0
 800e7ba:	6863      	ldr	r3, [r4, #4]
 800e7bc:	dd0b      	ble.n	800e7d6 <_printf_float+0x1a2>
 800e7be:	6121      	str	r1, [r4, #16]
 800e7c0:	b913      	cbnz	r3, 800e7c8 <_printf_float+0x194>
 800e7c2:	6822      	ldr	r2, [r4, #0]
 800e7c4:	07d0      	lsls	r0, r2, #31
 800e7c6:	d502      	bpl.n	800e7ce <_printf_float+0x19a>
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	440b      	add	r3, r1
 800e7cc:	6123      	str	r3, [r4, #16]
 800e7ce:	f04f 0a00 	mov.w	sl, #0
 800e7d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800e7d4:	e7df      	b.n	800e796 <_printf_float+0x162>
 800e7d6:	b913      	cbnz	r3, 800e7de <_printf_float+0x1aa>
 800e7d8:	6822      	ldr	r2, [r4, #0]
 800e7da:	07d2      	lsls	r2, r2, #31
 800e7dc:	d501      	bpl.n	800e7e2 <_printf_float+0x1ae>
 800e7de:	3302      	adds	r3, #2
 800e7e0:	e7f4      	b.n	800e7cc <_printf_float+0x198>
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e7f2      	b.n	800e7cc <_printf_float+0x198>
 800e7e6:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e7ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7ec:	4299      	cmp	r1, r3
 800e7ee:	db05      	blt.n	800e7fc <_printf_float+0x1c8>
 800e7f0:	6823      	ldr	r3, [r4, #0]
 800e7f2:	6121      	str	r1, [r4, #16]
 800e7f4:	07d8      	lsls	r0, r3, #31
 800e7f6:	d5ea      	bpl.n	800e7ce <_printf_float+0x19a>
 800e7f8:	1c4b      	adds	r3, r1, #1
 800e7fa:	e7e7      	b.n	800e7cc <_printf_float+0x198>
 800e7fc:	2900      	cmp	r1, #0
 800e7fe:	bfcc      	ite	gt
 800e800:	2201      	movgt	r2, #1
 800e802:	f1c1 0202 	rsble	r2, r1, #2
 800e806:	4413      	add	r3, r2
 800e808:	e7e0      	b.n	800e7cc <_printf_float+0x198>
 800e80a:	6823      	ldr	r3, [r4, #0]
 800e80c:	055a      	lsls	r2, r3, #21
 800e80e:	d407      	bmi.n	800e820 <_printf_float+0x1ec>
 800e810:	6923      	ldr	r3, [r4, #16]
 800e812:	4642      	mov	r2, r8
 800e814:	4631      	mov	r1, r6
 800e816:	4628      	mov	r0, r5
 800e818:	47b8      	blx	r7
 800e81a:	3001      	adds	r0, #1
 800e81c:	d12b      	bne.n	800e876 <_printf_float+0x242>
 800e81e:	e764      	b.n	800e6ea <_printf_float+0xb6>
 800e820:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e824:	f240 80dd 	bls.w	800e9e2 <_printf_float+0x3ae>
 800e828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e82c:	2200      	movs	r2, #0
 800e82e:	2300      	movs	r3, #0
 800e830:	f7f2 f900 	bl	8000a34 <__aeabi_dcmpeq>
 800e834:	2800      	cmp	r0, #0
 800e836:	d033      	beq.n	800e8a0 <_printf_float+0x26c>
 800e838:	2301      	movs	r3, #1
 800e83a:	4631      	mov	r1, r6
 800e83c:	4628      	mov	r0, r5
 800e83e:	4a35      	ldr	r2, [pc, #212]	; (800e914 <_printf_float+0x2e0>)
 800e840:	47b8      	blx	r7
 800e842:	3001      	adds	r0, #1
 800e844:	f43f af51 	beq.w	800e6ea <_printf_float+0xb6>
 800e848:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e84c:	429a      	cmp	r2, r3
 800e84e:	db02      	blt.n	800e856 <_printf_float+0x222>
 800e850:	6823      	ldr	r3, [r4, #0]
 800e852:	07d8      	lsls	r0, r3, #31
 800e854:	d50f      	bpl.n	800e876 <_printf_float+0x242>
 800e856:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e85a:	4631      	mov	r1, r6
 800e85c:	4628      	mov	r0, r5
 800e85e:	47b8      	blx	r7
 800e860:	3001      	adds	r0, #1
 800e862:	f43f af42 	beq.w	800e6ea <_printf_float+0xb6>
 800e866:	f04f 0800 	mov.w	r8, #0
 800e86a:	f104 091a 	add.w	r9, r4, #26
 800e86e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e870:	3b01      	subs	r3, #1
 800e872:	4543      	cmp	r3, r8
 800e874:	dc09      	bgt.n	800e88a <_printf_float+0x256>
 800e876:	6823      	ldr	r3, [r4, #0]
 800e878:	079b      	lsls	r3, r3, #30
 800e87a:	f100 8102 	bmi.w	800ea82 <_printf_float+0x44e>
 800e87e:	68e0      	ldr	r0, [r4, #12]
 800e880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e882:	4298      	cmp	r0, r3
 800e884:	bfb8      	it	lt
 800e886:	4618      	movlt	r0, r3
 800e888:	e731      	b.n	800e6ee <_printf_float+0xba>
 800e88a:	2301      	movs	r3, #1
 800e88c:	464a      	mov	r2, r9
 800e88e:	4631      	mov	r1, r6
 800e890:	4628      	mov	r0, r5
 800e892:	47b8      	blx	r7
 800e894:	3001      	adds	r0, #1
 800e896:	f43f af28 	beq.w	800e6ea <_printf_float+0xb6>
 800e89a:	f108 0801 	add.w	r8, r8, #1
 800e89e:	e7e6      	b.n	800e86e <_printf_float+0x23a>
 800e8a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	dc38      	bgt.n	800e918 <_printf_float+0x2e4>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	4631      	mov	r1, r6
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	4a19      	ldr	r2, [pc, #100]	; (800e914 <_printf_float+0x2e0>)
 800e8ae:	47b8      	blx	r7
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	f43f af1a 	beq.w	800e6ea <_printf_float+0xb6>
 800e8b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	d102      	bne.n	800e8c4 <_printf_float+0x290>
 800e8be:	6823      	ldr	r3, [r4, #0]
 800e8c0:	07d9      	lsls	r1, r3, #31
 800e8c2:	d5d8      	bpl.n	800e876 <_printf_float+0x242>
 800e8c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8c8:	4631      	mov	r1, r6
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	47b8      	blx	r7
 800e8ce:	3001      	adds	r0, #1
 800e8d0:	f43f af0b 	beq.w	800e6ea <_printf_float+0xb6>
 800e8d4:	f04f 0900 	mov.w	r9, #0
 800e8d8:	f104 0a1a 	add.w	sl, r4, #26
 800e8dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8de:	425b      	negs	r3, r3
 800e8e0:	454b      	cmp	r3, r9
 800e8e2:	dc01      	bgt.n	800e8e8 <_printf_float+0x2b4>
 800e8e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8e6:	e794      	b.n	800e812 <_printf_float+0x1de>
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	4652      	mov	r2, sl
 800e8ec:	4631      	mov	r1, r6
 800e8ee:	4628      	mov	r0, r5
 800e8f0:	47b8      	blx	r7
 800e8f2:	3001      	adds	r0, #1
 800e8f4:	f43f aef9 	beq.w	800e6ea <_printf_float+0xb6>
 800e8f8:	f109 0901 	add.w	r9, r9, #1
 800e8fc:	e7ee      	b.n	800e8dc <_printf_float+0x2a8>
 800e8fe:	bf00      	nop
 800e900:	7fefffff 	.word	0x7fefffff
 800e904:	08012cc8 	.word	0x08012cc8
 800e908:	08012ccc 	.word	0x08012ccc
 800e90c:	08012cd4 	.word	0x08012cd4
 800e910:	08012cd0 	.word	0x08012cd0
 800e914:	08012cd8 	.word	0x08012cd8
 800e918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e91a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e91c:	429a      	cmp	r2, r3
 800e91e:	bfa8      	it	ge
 800e920:	461a      	movge	r2, r3
 800e922:	2a00      	cmp	r2, #0
 800e924:	4691      	mov	r9, r2
 800e926:	dc37      	bgt.n	800e998 <_printf_float+0x364>
 800e928:	f04f 0b00 	mov.w	fp, #0
 800e92c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e930:	f104 021a 	add.w	r2, r4, #26
 800e934:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e938:	ebaa 0309 	sub.w	r3, sl, r9
 800e93c:	455b      	cmp	r3, fp
 800e93e:	dc33      	bgt.n	800e9a8 <_printf_float+0x374>
 800e940:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e944:	429a      	cmp	r2, r3
 800e946:	db3b      	blt.n	800e9c0 <_printf_float+0x38c>
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	07da      	lsls	r2, r3, #31
 800e94c:	d438      	bmi.n	800e9c0 <_printf_float+0x38c>
 800e94e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e950:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e952:	eba2 030a 	sub.w	r3, r2, sl
 800e956:	eba2 0901 	sub.w	r9, r2, r1
 800e95a:	4599      	cmp	r9, r3
 800e95c:	bfa8      	it	ge
 800e95e:	4699      	movge	r9, r3
 800e960:	f1b9 0f00 	cmp.w	r9, #0
 800e964:	dc34      	bgt.n	800e9d0 <_printf_float+0x39c>
 800e966:	f04f 0800 	mov.w	r8, #0
 800e96a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e96e:	f104 0a1a 	add.w	sl, r4, #26
 800e972:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e976:	1a9b      	subs	r3, r3, r2
 800e978:	eba3 0309 	sub.w	r3, r3, r9
 800e97c:	4543      	cmp	r3, r8
 800e97e:	f77f af7a 	ble.w	800e876 <_printf_float+0x242>
 800e982:	2301      	movs	r3, #1
 800e984:	4652      	mov	r2, sl
 800e986:	4631      	mov	r1, r6
 800e988:	4628      	mov	r0, r5
 800e98a:	47b8      	blx	r7
 800e98c:	3001      	adds	r0, #1
 800e98e:	f43f aeac 	beq.w	800e6ea <_printf_float+0xb6>
 800e992:	f108 0801 	add.w	r8, r8, #1
 800e996:	e7ec      	b.n	800e972 <_printf_float+0x33e>
 800e998:	4613      	mov	r3, r2
 800e99a:	4631      	mov	r1, r6
 800e99c:	4642      	mov	r2, r8
 800e99e:	4628      	mov	r0, r5
 800e9a0:	47b8      	blx	r7
 800e9a2:	3001      	adds	r0, #1
 800e9a4:	d1c0      	bne.n	800e928 <_printf_float+0x2f4>
 800e9a6:	e6a0      	b.n	800e6ea <_printf_float+0xb6>
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	4631      	mov	r1, r6
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	920b      	str	r2, [sp, #44]	; 0x2c
 800e9b0:	47b8      	blx	r7
 800e9b2:	3001      	adds	r0, #1
 800e9b4:	f43f ae99 	beq.w	800e6ea <_printf_float+0xb6>
 800e9b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e9ba:	f10b 0b01 	add.w	fp, fp, #1
 800e9be:	e7b9      	b.n	800e934 <_printf_float+0x300>
 800e9c0:	4631      	mov	r1, r6
 800e9c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	47b8      	blx	r7
 800e9ca:	3001      	adds	r0, #1
 800e9cc:	d1bf      	bne.n	800e94e <_printf_float+0x31a>
 800e9ce:	e68c      	b.n	800e6ea <_printf_float+0xb6>
 800e9d0:	464b      	mov	r3, r9
 800e9d2:	4631      	mov	r1, r6
 800e9d4:	4628      	mov	r0, r5
 800e9d6:	eb08 020a 	add.w	r2, r8, sl
 800e9da:	47b8      	blx	r7
 800e9dc:	3001      	adds	r0, #1
 800e9de:	d1c2      	bne.n	800e966 <_printf_float+0x332>
 800e9e0:	e683      	b.n	800e6ea <_printf_float+0xb6>
 800e9e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9e4:	2a01      	cmp	r2, #1
 800e9e6:	dc01      	bgt.n	800e9ec <_printf_float+0x3b8>
 800e9e8:	07db      	lsls	r3, r3, #31
 800e9ea:	d537      	bpl.n	800ea5c <_printf_float+0x428>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	4642      	mov	r2, r8
 800e9f0:	4631      	mov	r1, r6
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	47b8      	blx	r7
 800e9f6:	3001      	adds	r0, #1
 800e9f8:	f43f ae77 	beq.w	800e6ea <_printf_float+0xb6>
 800e9fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea00:	4631      	mov	r1, r6
 800ea02:	4628      	mov	r0, r5
 800ea04:	47b8      	blx	r7
 800ea06:	3001      	adds	r0, #1
 800ea08:	f43f ae6f 	beq.w	800e6ea <_printf_float+0xb6>
 800ea0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea10:	2200      	movs	r2, #0
 800ea12:	2300      	movs	r3, #0
 800ea14:	f7f2 f80e 	bl	8000a34 <__aeabi_dcmpeq>
 800ea18:	b9d8      	cbnz	r0, 800ea52 <_printf_float+0x41e>
 800ea1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea1c:	f108 0201 	add.w	r2, r8, #1
 800ea20:	3b01      	subs	r3, #1
 800ea22:	4631      	mov	r1, r6
 800ea24:	4628      	mov	r0, r5
 800ea26:	47b8      	blx	r7
 800ea28:	3001      	adds	r0, #1
 800ea2a:	d10e      	bne.n	800ea4a <_printf_float+0x416>
 800ea2c:	e65d      	b.n	800e6ea <_printf_float+0xb6>
 800ea2e:	2301      	movs	r3, #1
 800ea30:	464a      	mov	r2, r9
 800ea32:	4631      	mov	r1, r6
 800ea34:	4628      	mov	r0, r5
 800ea36:	47b8      	blx	r7
 800ea38:	3001      	adds	r0, #1
 800ea3a:	f43f ae56 	beq.w	800e6ea <_printf_float+0xb6>
 800ea3e:	f108 0801 	add.w	r8, r8, #1
 800ea42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea44:	3b01      	subs	r3, #1
 800ea46:	4543      	cmp	r3, r8
 800ea48:	dcf1      	bgt.n	800ea2e <_printf_float+0x3fa>
 800ea4a:	4653      	mov	r3, sl
 800ea4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ea50:	e6e0      	b.n	800e814 <_printf_float+0x1e0>
 800ea52:	f04f 0800 	mov.w	r8, #0
 800ea56:	f104 091a 	add.w	r9, r4, #26
 800ea5a:	e7f2      	b.n	800ea42 <_printf_float+0x40e>
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	4642      	mov	r2, r8
 800ea60:	e7df      	b.n	800ea22 <_printf_float+0x3ee>
 800ea62:	2301      	movs	r3, #1
 800ea64:	464a      	mov	r2, r9
 800ea66:	4631      	mov	r1, r6
 800ea68:	4628      	mov	r0, r5
 800ea6a:	47b8      	blx	r7
 800ea6c:	3001      	adds	r0, #1
 800ea6e:	f43f ae3c 	beq.w	800e6ea <_printf_float+0xb6>
 800ea72:	f108 0801 	add.w	r8, r8, #1
 800ea76:	68e3      	ldr	r3, [r4, #12]
 800ea78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ea7a:	1a5b      	subs	r3, r3, r1
 800ea7c:	4543      	cmp	r3, r8
 800ea7e:	dcf0      	bgt.n	800ea62 <_printf_float+0x42e>
 800ea80:	e6fd      	b.n	800e87e <_printf_float+0x24a>
 800ea82:	f04f 0800 	mov.w	r8, #0
 800ea86:	f104 0919 	add.w	r9, r4, #25
 800ea8a:	e7f4      	b.n	800ea76 <_printf_float+0x442>

0800ea8c <_printf_common>:
 800ea8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea90:	4616      	mov	r6, r2
 800ea92:	4699      	mov	r9, r3
 800ea94:	688a      	ldr	r2, [r1, #8]
 800ea96:	690b      	ldr	r3, [r1, #16]
 800ea98:	4607      	mov	r7, r0
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	bfb8      	it	lt
 800ea9e:	4613      	movlt	r3, r2
 800eaa0:	6033      	str	r3, [r6, #0]
 800eaa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eaa6:	460c      	mov	r4, r1
 800eaa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eaac:	b10a      	cbz	r2, 800eab2 <_printf_common+0x26>
 800eaae:	3301      	adds	r3, #1
 800eab0:	6033      	str	r3, [r6, #0]
 800eab2:	6823      	ldr	r3, [r4, #0]
 800eab4:	0699      	lsls	r1, r3, #26
 800eab6:	bf42      	ittt	mi
 800eab8:	6833      	ldrmi	r3, [r6, #0]
 800eaba:	3302      	addmi	r3, #2
 800eabc:	6033      	strmi	r3, [r6, #0]
 800eabe:	6825      	ldr	r5, [r4, #0]
 800eac0:	f015 0506 	ands.w	r5, r5, #6
 800eac4:	d106      	bne.n	800ead4 <_printf_common+0x48>
 800eac6:	f104 0a19 	add.w	sl, r4, #25
 800eaca:	68e3      	ldr	r3, [r4, #12]
 800eacc:	6832      	ldr	r2, [r6, #0]
 800eace:	1a9b      	subs	r3, r3, r2
 800ead0:	42ab      	cmp	r3, r5
 800ead2:	dc28      	bgt.n	800eb26 <_printf_common+0x9a>
 800ead4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ead8:	1e13      	subs	r3, r2, #0
 800eada:	6822      	ldr	r2, [r4, #0]
 800eadc:	bf18      	it	ne
 800eade:	2301      	movne	r3, #1
 800eae0:	0692      	lsls	r2, r2, #26
 800eae2:	d42d      	bmi.n	800eb40 <_printf_common+0xb4>
 800eae4:	4649      	mov	r1, r9
 800eae6:	4638      	mov	r0, r7
 800eae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eaec:	47c0      	blx	r8
 800eaee:	3001      	adds	r0, #1
 800eaf0:	d020      	beq.n	800eb34 <_printf_common+0xa8>
 800eaf2:	6823      	ldr	r3, [r4, #0]
 800eaf4:	68e5      	ldr	r5, [r4, #12]
 800eaf6:	f003 0306 	and.w	r3, r3, #6
 800eafa:	2b04      	cmp	r3, #4
 800eafc:	bf18      	it	ne
 800eafe:	2500      	movne	r5, #0
 800eb00:	6832      	ldr	r2, [r6, #0]
 800eb02:	f04f 0600 	mov.w	r6, #0
 800eb06:	68a3      	ldr	r3, [r4, #8]
 800eb08:	bf08      	it	eq
 800eb0a:	1aad      	subeq	r5, r5, r2
 800eb0c:	6922      	ldr	r2, [r4, #16]
 800eb0e:	bf08      	it	eq
 800eb10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb14:	4293      	cmp	r3, r2
 800eb16:	bfc4      	itt	gt
 800eb18:	1a9b      	subgt	r3, r3, r2
 800eb1a:	18ed      	addgt	r5, r5, r3
 800eb1c:	341a      	adds	r4, #26
 800eb1e:	42b5      	cmp	r5, r6
 800eb20:	d11a      	bne.n	800eb58 <_printf_common+0xcc>
 800eb22:	2000      	movs	r0, #0
 800eb24:	e008      	b.n	800eb38 <_printf_common+0xac>
 800eb26:	2301      	movs	r3, #1
 800eb28:	4652      	mov	r2, sl
 800eb2a:	4649      	mov	r1, r9
 800eb2c:	4638      	mov	r0, r7
 800eb2e:	47c0      	blx	r8
 800eb30:	3001      	adds	r0, #1
 800eb32:	d103      	bne.n	800eb3c <_printf_common+0xb0>
 800eb34:	f04f 30ff 	mov.w	r0, #4294967295
 800eb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb3c:	3501      	adds	r5, #1
 800eb3e:	e7c4      	b.n	800eaca <_printf_common+0x3e>
 800eb40:	2030      	movs	r0, #48	; 0x30
 800eb42:	18e1      	adds	r1, r4, r3
 800eb44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb48:	1c5a      	adds	r2, r3, #1
 800eb4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb4e:	4422      	add	r2, r4
 800eb50:	3302      	adds	r3, #2
 800eb52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb56:	e7c5      	b.n	800eae4 <_printf_common+0x58>
 800eb58:	2301      	movs	r3, #1
 800eb5a:	4622      	mov	r2, r4
 800eb5c:	4649      	mov	r1, r9
 800eb5e:	4638      	mov	r0, r7
 800eb60:	47c0      	blx	r8
 800eb62:	3001      	adds	r0, #1
 800eb64:	d0e6      	beq.n	800eb34 <_printf_common+0xa8>
 800eb66:	3601      	adds	r6, #1
 800eb68:	e7d9      	b.n	800eb1e <_printf_common+0x92>
	...

0800eb6c <_printf_i>:
 800eb6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb70:	460c      	mov	r4, r1
 800eb72:	7e27      	ldrb	r7, [r4, #24]
 800eb74:	4691      	mov	r9, r2
 800eb76:	2f78      	cmp	r7, #120	; 0x78
 800eb78:	4680      	mov	r8, r0
 800eb7a:	469a      	mov	sl, r3
 800eb7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eb7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb82:	d807      	bhi.n	800eb94 <_printf_i+0x28>
 800eb84:	2f62      	cmp	r7, #98	; 0x62
 800eb86:	d80a      	bhi.n	800eb9e <_printf_i+0x32>
 800eb88:	2f00      	cmp	r7, #0
 800eb8a:	f000 80d9 	beq.w	800ed40 <_printf_i+0x1d4>
 800eb8e:	2f58      	cmp	r7, #88	; 0x58
 800eb90:	f000 80a4 	beq.w	800ecdc <_printf_i+0x170>
 800eb94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eb98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb9c:	e03a      	b.n	800ec14 <_printf_i+0xa8>
 800eb9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eba2:	2b15      	cmp	r3, #21
 800eba4:	d8f6      	bhi.n	800eb94 <_printf_i+0x28>
 800eba6:	a001      	add	r0, pc, #4	; (adr r0, 800ebac <_printf_i+0x40>)
 800eba8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ebac:	0800ec05 	.word	0x0800ec05
 800ebb0:	0800ec19 	.word	0x0800ec19
 800ebb4:	0800eb95 	.word	0x0800eb95
 800ebb8:	0800eb95 	.word	0x0800eb95
 800ebbc:	0800eb95 	.word	0x0800eb95
 800ebc0:	0800eb95 	.word	0x0800eb95
 800ebc4:	0800ec19 	.word	0x0800ec19
 800ebc8:	0800eb95 	.word	0x0800eb95
 800ebcc:	0800eb95 	.word	0x0800eb95
 800ebd0:	0800eb95 	.word	0x0800eb95
 800ebd4:	0800eb95 	.word	0x0800eb95
 800ebd8:	0800ed27 	.word	0x0800ed27
 800ebdc:	0800ec49 	.word	0x0800ec49
 800ebe0:	0800ed09 	.word	0x0800ed09
 800ebe4:	0800eb95 	.word	0x0800eb95
 800ebe8:	0800eb95 	.word	0x0800eb95
 800ebec:	0800ed49 	.word	0x0800ed49
 800ebf0:	0800eb95 	.word	0x0800eb95
 800ebf4:	0800ec49 	.word	0x0800ec49
 800ebf8:	0800eb95 	.word	0x0800eb95
 800ebfc:	0800eb95 	.word	0x0800eb95
 800ec00:	0800ed11 	.word	0x0800ed11
 800ec04:	680b      	ldr	r3, [r1, #0]
 800ec06:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ec0a:	1d1a      	adds	r2, r3, #4
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	600a      	str	r2, [r1, #0]
 800ec10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec14:	2301      	movs	r3, #1
 800ec16:	e0a4      	b.n	800ed62 <_printf_i+0x1f6>
 800ec18:	6825      	ldr	r5, [r4, #0]
 800ec1a:	6808      	ldr	r0, [r1, #0]
 800ec1c:	062e      	lsls	r6, r5, #24
 800ec1e:	f100 0304 	add.w	r3, r0, #4
 800ec22:	d50a      	bpl.n	800ec3a <_printf_i+0xce>
 800ec24:	6805      	ldr	r5, [r0, #0]
 800ec26:	600b      	str	r3, [r1, #0]
 800ec28:	2d00      	cmp	r5, #0
 800ec2a:	da03      	bge.n	800ec34 <_printf_i+0xc8>
 800ec2c:	232d      	movs	r3, #45	; 0x2d
 800ec2e:	426d      	negs	r5, r5
 800ec30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec34:	230a      	movs	r3, #10
 800ec36:	485e      	ldr	r0, [pc, #376]	; (800edb0 <_printf_i+0x244>)
 800ec38:	e019      	b.n	800ec6e <_printf_i+0x102>
 800ec3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ec3e:	6805      	ldr	r5, [r0, #0]
 800ec40:	600b      	str	r3, [r1, #0]
 800ec42:	bf18      	it	ne
 800ec44:	b22d      	sxthne	r5, r5
 800ec46:	e7ef      	b.n	800ec28 <_printf_i+0xbc>
 800ec48:	680b      	ldr	r3, [r1, #0]
 800ec4a:	6825      	ldr	r5, [r4, #0]
 800ec4c:	1d18      	adds	r0, r3, #4
 800ec4e:	6008      	str	r0, [r1, #0]
 800ec50:	0628      	lsls	r0, r5, #24
 800ec52:	d501      	bpl.n	800ec58 <_printf_i+0xec>
 800ec54:	681d      	ldr	r5, [r3, #0]
 800ec56:	e002      	b.n	800ec5e <_printf_i+0xf2>
 800ec58:	0669      	lsls	r1, r5, #25
 800ec5a:	d5fb      	bpl.n	800ec54 <_printf_i+0xe8>
 800ec5c:	881d      	ldrh	r5, [r3, #0]
 800ec5e:	2f6f      	cmp	r7, #111	; 0x6f
 800ec60:	bf0c      	ite	eq
 800ec62:	2308      	moveq	r3, #8
 800ec64:	230a      	movne	r3, #10
 800ec66:	4852      	ldr	r0, [pc, #328]	; (800edb0 <_printf_i+0x244>)
 800ec68:	2100      	movs	r1, #0
 800ec6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec6e:	6866      	ldr	r6, [r4, #4]
 800ec70:	2e00      	cmp	r6, #0
 800ec72:	bfa8      	it	ge
 800ec74:	6821      	ldrge	r1, [r4, #0]
 800ec76:	60a6      	str	r6, [r4, #8]
 800ec78:	bfa4      	itt	ge
 800ec7a:	f021 0104 	bicge.w	r1, r1, #4
 800ec7e:	6021      	strge	r1, [r4, #0]
 800ec80:	b90d      	cbnz	r5, 800ec86 <_printf_i+0x11a>
 800ec82:	2e00      	cmp	r6, #0
 800ec84:	d04d      	beq.n	800ed22 <_printf_i+0x1b6>
 800ec86:	4616      	mov	r6, r2
 800ec88:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec8c:	fb03 5711 	mls	r7, r3, r1, r5
 800ec90:	5dc7      	ldrb	r7, [r0, r7]
 800ec92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec96:	462f      	mov	r7, r5
 800ec98:	42bb      	cmp	r3, r7
 800ec9a:	460d      	mov	r5, r1
 800ec9c:	d9f4      	bls.n	800ec88 <_printf_i+0x11c>
 800ec9e:	2b08      	cmp	r3, #8
 800eca0:	d10b      	bne.n	800ecba <_printf_i+0x14e>
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	07df      	lsls	r7, r3, #31
 800eca6:	d508      	bpl.n	800ecba <_printf_i+0x14e>
 800eca8:	6923      	ldr	r3, [r4, #16]
 800ecaa:	6861      	ldr	r1, [r4, #4]
 800ecac:	4299      	cmp	r1, r3
 800ecae:	bfde      	ittt	le
 800ecb0:	2330      	movle	r3, #48	; 0x30
 800ecb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ecb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ecba:	1b92      	subs	r2, r2, r6
 800ecbc:	6122      	str	r2, [r4, #16]
 800ecbe:	464b      	mov	r3, r9
 800ecc0:	4621      	mov	r1, r4
 800ecc2:	4640      	mov	r0, r8
 800ecc4:	f8cd a000 	str.w	sl, [sp]
 800ecc8:	aa03      	add	r2, sp, #12
 800ecca:	f7ff fedf 	bl	800ea8c <_printf_common>
 800ecce:	3001      	adds	r0, #1
 800ecd0:	d14c      	bne.n	800ed6c <_printf_i+0x200>
 800ecd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ecd6:	b004      	add	sp, #16
 800ecd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecdc:	4834      	ldr	r0, [pc, #208]	; (800edb0 <_printf_i+0x244>)
 800ecde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ece2:	680e      	ldr	r6, [r1, #0]
 800ece4:	6823      	ldr	r3, [r4, #0]
 800ece6:	f856 5b04 	ldr.w	r5, [r6], #4
 800ecea:	061f      	lsls	r7, r3, #24
 800ecec:	600e      	str	r6, [r1, #0]
 800ecee:	d514      	bpl.n	800ed1a <_printf_i+0x1ae>
 800ecf0:	07d9      	lsls	r1, r3, #31
 800ecf2:	bf44      	itt	mi
 800ecf4:	f043 0320 	orrmi.w	r3, r3, #32
 800ecf8:	6023      	strmi	r3, [r4, #0]
 800ecfa:	b91d      	cbnz	r5, 800ed04 <_printf_i+0x198>
 800ecfc:	6823      	ldr	r3, [r4, #0]
 800ecfe:	f023 0320 	bic.w	r3, r3, #32
 800ed02:	6023      	str	r3, [r4, #0]
 800ed04:	2310      	movs	r3, #16
 800ed06:	e7af      	b.n	800ec68 <_printf_i+0xfc>
 800ed08:	6823      	ldr	r3, [r4, #0]
 800ed0a:	f043 0320 	orr.w	r3, r3, #32
 800ed0e:	6023      	str	r3, [r4, #0]
 800ed10:	2378      	movs	r3, #120	; 0x78
 800ed12:	4828      	ldr	r0, [pc, #160]	; (800edb4 <_printf_i+0x248>)
 800ed14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ed18:	e7e3      	b.n	800ece2 <_printf_i+0x176>
 800ed1a:	065e      	lsls	r6, r3, #25
 800ed1c:	bf48      	it	mi
 800ed1e:	b2ad      	uxthmi	r5, r5
 800ed20:	e7e6      	b.n	800ecf0 <_printf_i+0x184>
 800ed22:	4616      	mov	r6, r2
 800ed24:	e7bb      	b.n	800ec9e <_printf_i+0x132>
 800ed26:	680b      	ldr	r3, [r1, #0]
 800ed28:	6826      	ldr	r6, [r4, #0]
 800ed2a:	1d1d      	adds	r5, r3, #4
 800ed2c:	6960      	ldr	r0, [r4, #20]
 800ed2e:	600d      	str	r5, [r1, #0]
 800ed30:	0635      	lsls	r5, r6, #24
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	d501      	bpl.n	800ed3a <_printf_i+0x1ce>
 800ed36:	6018      	str	r0, [r3, #0]
 800ed38:	e002      	b.n	800ed40 <_printf_i+0x1d4>
 800ed3a:	0671      	lsls	r1, r6, #25
 800ed3c:	d5fb      	bpl.n	800ed36 <_printf_i+0x1ca>
 800ed3e:	8018      	strh	r0, [r3, #0]
 800ed40:	2300      	movs	r3, #0
 800ed42:	4616      	mov	r6, r2
 800ed44:	6123      	str	r3, [r4, #16]
 800ed46:	e7ba      	b.n	800ecbe <_printf_i+0x152>
 800ed48:	680b      	ldr	r3, [r1, #0]
 800ed4a:	1d1a      	adds	r2, r3, #4
 800ed4c:	600a      	str	r2, [r1, #0]
 800ed4e:	681e      	ldr	r6, [r3, #0]
 800ed50:	2100      	movs	r1, #0
 800ed52:	4630      	mov	r0, r6
 800ed54:	6862      	ldr	r2, [r4, #4]
 800ed56:	f002 fb11 	bl	801137c <memchr>
 800ed5a:	b108      	cbz	r0, 800ed60 <_printf_i+0x1f4>
 800ed5c:	1b80      	subs	r0, r0, r6
 800ed5e:	6060      	str	r0, [r4, #4]
 800ed60:	6863      	ldr	r3, [r4, #4]
 800ed62:	6123      	str	r3, [r4, #16]
 800ed64:	2300      	movs	r3, #0
 800ed66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed6a:	e7a8      	b.n	800ecbe <_printf_i+0x152>
 800ed6c:	4632      	mov	r2, r6
 800ed6e:	4649      	mov	r1, r9
 800ed70:	4640      	mov	r0, r8
 800ed72:	6923      	ldr	r3, [r4, #16]
 800ed74:	47d0      	blx	sl
 800ed76:	3001      	adds	r0, #1
 800ed78:	d0ab      	beq.n	800ecd2 <_printf_i+0x166>
 800ed7a:	6823      	ldr	r3, [r4, #0]
 800ed7c:	079b      	lsls	r3, r3, #30
 800ed7e:	d413      	bmi.n	800eda8 <_printf_i+0x23c>
 800ed80:	68e0      	ldr	r0, [r4, #12]
 800ed82:	9b03      	ldr	r3, [sp, #12]
 800ed84:	4298      	cmp	r0, r3
 800ed86:	bfb8      	it	lt
 800ed88:	4618      	movlt	r0, r3
 800ed8a:	e7a4      	b.n	800ecd6 <_printf_i+0x16a>
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	4632      	mov	r2, r6
 800ed90:	4649      	mov	r1, r9
 800ed92:	4640      	mov	r0, r8
 800ed94:	47d0      	blx	sl
 800ed96:	3001      	adds	r0, #1
 800ed98:	d09b      	beq.n	800ecd2 <_printf_i+0x166>
 800ed9a:	3501      	adds	r5, #1
 800ed9c:	68e3      	ldr	r3, [r4, #12]
 800ed9e:	9903      	ldr	r1, [sp, #12]
 800eda0:	1a5b      	subs	r3, r3, r1
 800eda2:	42ab      	cmp	r3, r5
 800eda4:	dcf2      	bgt.n	800ed8c <_printf_i+0x220>
 800eda6:	e7eb      	b.n	800ed80 <_printf_i+0x214>
 800eda8:	2500      	movs	r5, #0
 800edaa:	f104 0619 	add.w	r6, r4, #25
 800edae:	e7f5      	b.n	800ed9c <_printf_i+0x230>
 800edb0:	08012cda 	.word	0x08012cda
 800edb4:	08012ceb 	.word	0x08012ceb

0800edb8 <_scanf_float>:
 800edb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edbc:	b087      	sub	sp, #28
 800edbe:	9303      	str	r3, [sp, #12]
 800edc0:	688b      	ldr	r3, [r1, #8]
 800edc2:	4617      	mov	r7, r2
 800edc4:	1e5a      	subs	r2, r3, #1
 800edc6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800edca:	bf85      	ittet	hi
 800edcc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800edd0:	195b      	addhi	r3, r3, r5
 800edd2:	2300      	movls	r3, #0
 800edd4:	9302      	strhi	r3, [sp, #8]
 800edd6:	bf88      	it	hi
 800edd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800eddc:	468b      	mov	fp, r1
 800edde:	f04f 0500 	mov.w	r5, #0
 800ede2:	bf8c      	ite	hi
 800ede4:	608b      	strhi	r3, [r1, #8]
 800ede6:	9302      	strls	r3, [sp, #8]
 800ede8:	680b      	ldr	r3, [r1, #0]
 800edea:	4680      	mov	r8, r0
 800edec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800edf0:	f84b 3b1c 	str.w	r3, [fp], #28
 800edf4:	460c      	mov	r4, r1
 800edf6:	465e      	mov	r6, fp
 800edf8:	46aa      	mov	sl, r5
 800edfa:	46a9      	mov	r9, r5
 800edfc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ee00:	9501      	str	r5, [sp, #4]
 800ee02:	68a2      	ldr	r2, [r4, #8]
 800ee04:	b152      	cbz	r2, 800ee1c <_scanf_float+0x64>
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	2b4e      	cmp	r3, #78	; 0x4e
 800ee0c:	d864      	bhi.n	800eed8 <_scanf_float+0x120>
 800ee0e:	2b40      	cmp	r3, #64	; 0x40
 800ee10:	d83c      	bhi.n	800ee8c <_scanf_float+0xd4>
 800ee12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ee16:	b2c8      	uxtb	r0, r1
 800ee18:	280e      	cmp	r0, #14
 800ee1a:	d93a      	bls.n	800ee92 <_scanf_float+0xda>
 800ee1c:	f1b9 0f00 	cmp.w	r9, #0
 800ee20:	d003      	beq.n	800ee2a <_scanf_float+0x72>
 800ee22:	6823      	ldr	r3, [r4, #0]
 800ee24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee28:	6023      	str	r3, [r4, #0]
 800ee2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee2e:	f1ba 0f01 	cmp.w	sl, #1
 800ee32:	f200 8113 	bhi.w	800f05c <_scanf_float+0x2a4>
 800ee36:	455e      	cmp	r6, fp
 800ee38:	f200 8105 	bhi.w	800f046 <_scanf_float+0x28e>
 800ee3c:	2501      	movs	r5, #1
 800ee3e:	4628      	mov	r0, r5
 800ee40:	b007      	add	sp, #28
 800ee42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ee4a:	2a0d      	cmp	r2, #13
 800ee4c:	d8e6      	bhi.n	800ee1c <_scanf_float+0x64>
 800ee4e:	a101      	add	r1, pc, #4	; (adr r1, 800ee54 <_scanf_float+0x9c>)
 800ee50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ee54:	0800ef93 	.word	0x0800ef93
 800ee58:	0800ee1d 	.word	0x0800ee1d
 800ee5c:	0800ee1d 	.word	0x0800ee1d
 800ee60:	0800ee1d 	.word	0x0800ee1d
 800ee64:	0800eff3 	.word	0x0800eff3
 800ee68:	0800efcb 	.word	0x0800efcb
 800ee6c:	0800ee1d 	.word	0x0800ee1d
 800ee70:	0800ee1d 	.word	0x0800ee1d
 800ee74:	0800efa1 	.word	0x0800efa1
 800ee78:	0800ee1d 	.word	0x0800ee1d
 800ee7c:	0800ee1d 	.word	0x0800ee1d
 800ee80:	0800ee1d 	.word	0x0800ee1d
 800ee84:	0800ee1d 	.word	0x0800ee1d
 800ee88:	0800ef59 	.word	0x0800ef59
 800ee8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ee90:	e7db      	b.n	800ee4a <_scanf_float+0x92>
 800ee92:	290e      	cmp	r1, #14
 800ee94:	d8c2      	bhi.n	800ee1c <_scanf_float+0x64>
 800ee96:	a001      	add	r0, pc, #4	; (adr r0, 800ee9c <_scanf_float+0xe4>)
 800ee98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ee9c:	0800ef4b 	.word	0x0800ef4b
 800eea0:	0800ee1d 	.word	0x0800ee1d
 800eea4:	0800ef4b 	.word	0x0800ef4b
 800eea8:	0800efdf 	.word	0x0800efdf
 800eeac:	0800ee1d 	.word	0x0800ee1d
 800eeb0:	0800eef9 	.word	0x0800eef9
 800eeb4:	0800ef35 	.word	0x0800ef35
 800eeb8:	0800ef35 	.word	0x0800ef35
 800eebc:	0800ef35 	.word	0x0800ef35
 800eec0:	0800ef35 	.word	0x0800ef35
 800eec4:	0800ef35 	.word	0x0800ef35
 800eec8:	0800ef35 	.word	0x0800ef35
 800eecc:	0800ef35 	.word	0x0800ef35
 800eed0:	0800ef35 	.word	0x0800ef35
 800eed4:	0800ef35 	.word	0x0800ef35
 800eed8:	2b6e      	cmp	r3, #110	; 0x6e
 800eeda:	d809      	bhi.n	800eef0 <_scanf_float+0x138>
 800eedc:	2b60      	cmp	r3, #96	; 0x60
 800eede:	d8b2      	bhi.n	800ee46 <_scanf_float+0x8e>
 800eee0:	2b54      	cmp	r3, #84	; 0x54
 800eee2:	d077      	beq.n	800efd4 <_scanf_float+0x21c>
 800eee4:	2b59      	cmp	r3, #89	; 0x59
 800eee6:	d199      	bne.n	800ee1c <_scanf_float+0x64>
 800eee8:	2d07      	cmp	r5, #7
 800eeea:	d197      	bne.n	800ee1c <_scanf_float+0x64>
 800eeec:	2508      	movs	r5, #8
 800eeee:	e029      	b.n	800ef44 <_scanf_float+0x18c>
 800eef0:	2b74      	cmp	r3, #116	; 0x74
 800eef2:	d06f      	beq.n	800efd4 <_scanf_float+0x21c>
 800eef4:	2b79      	cmp	r3, #121	; 0x79
 800eef6:	e7f6      	b.n	800eee6 <_scanf_float+0x12e>
 800eef8:	6821      	ldr	r1, [r4, #0]
 800eefa:	05c8      	lsls	r0, r1, #23
 800eefc:	d51a      	bpl.n	800ef34 <_scanf_float+0x17c>
 800eefe:	9b02      	ldr	r3, [sp, #8]
 800ef00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ef04:	6021      	str	r1, [r4, #0]
 800ef06:	f109 0901 	add.w	r9, r9, #1
 800ef0a:	b11b      	cbz	r3, 800ef14 <_scanf_float+0x15c>
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	3201      	adds	r2, #1
 800ef10:	9302      	str	r3, [sp, #8]
 800ef12:	60a2      	str	r2, [r4, #8]
 800ef14:	68a3      	ldr	r3, [r4, #8]
 800ef16:	3b01      	subs	r3, #1
 800ef18:	60a3      	str	r3, [r4, #8]
 800ef1a:	6923      	ldr	r3, [r4, #16]
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	6123      	str	r3, [r4, #16]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	3b01      	subs	r3, #1
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	607b      	str	r3, [r7, #4]
 800ef28:	f340 8084 	ble.w	800f034 <_scanf_float+0x27c>
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	603b      	str	r3, [r7, #0]
 800ef32:	e766      	b.n	800ee02 <_scanf_float+0x4a>
 800ef34:	eb1a 0f05 	cmn.w	sl, r5
 800ef38:	f47f af70 	bne.w	800ee1c <_scanf_float+0x64>
 800ef3c:	6822      	ldr	r2, [r4, #0]
 800ef3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ef42:	6022      	str	r2, [r4, #0]
 800ef44:	f806 3b01 	strb.w	r3, [r6], #1
 800ef48:	e7e4      	b.n	800ef14 <_scanf_float+0x15c>
 800ef4a:	6822      	ldr	r2, [r4, #0]
 800ef4c:	0610      	lsls	r0, r2, #24
 800ef4e:	f57f af65 	bpl.w	800ee1c <_scanf_float+0x64>
 800ef52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef56:	e7f4      	b.n	800ef42 <_scanf_float+0x18a>
 800ef58:	f1ba 0f00 	cmp.w	sl, #0
 800ef5c:	d10e      	bne.n	800ef7c <_scanf_float+0x1c4>
 800ef5e:	f1b9 0f00 	cmp.w	r9, #0
 800ef62:	d10e      	bne.n	800ef82 <_scanf_float+0x1ca>
 800ef64:	6822      	ldr	r2, [r4, #0]
 800ef66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ef6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ef6e:	d108      	bne.n	800ef82 <_scanf_float+0x1ca>
 800ef70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ef74:	f04f 0a01 	mov.w	sl, #1
 800ef78:	6022      	str	r2, [r4, #0]
 800ef7a:	e7e3      	b.n	800ef44 <_scanf_float+0x18c>
 800ef7c:	f1ba 0f02 	cmp.w	sl, #2
 800ef80:	d055      	beq.n	800f02e <_scanf_float+0x276>
 800ef82:	2d01      	cmp	r5, #1
 800ef84:	d002      	beq.n	800ef8c <_scanf_float+0x1d4>
 800ef86:	2d04      	cmp	r5, #4
 800ef88:	f47f af48 	bne.w	800ee1c <_scanf_float+0x64>
 800ef8c:	3501      	adds	r5, #1
 800ef8e:	b2ed      	uxtb	r5, r5
 800ef90:	e7d8      	b.n	800ef44 <_scanf_float+0x18c>
 800ef92:	f1ba 0f01 	cmp.w	sl, #1
 800ef96:	f47f af41 	bne.w	800ee1c <_scanf_float+0x64>
 800ef9a:	f04f 0a02 	mov.w	sl, #2
 800ef9e:	e7d1      	b.n	800ef44 <_scanf_float+0x18c>
 800efa0:	b97d      	cbnz	r5, 800efc2 <_scanf_float+0x20a>
 800efa2:	f1b9 0f00 	cmp.w	r9, #0
 800efa6:	f47f af3c 	bne.w	800ee22 <_scanf_float+0x6a>
 800efaa:	6822      	ldr	r2, [r4, #0]
 800efac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800efb0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800efb4:	f47f af39 	bne.w	800ee2a <_scanf_float+0x72>
 800efb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800efbc:	2501      	movs	r5, #1
 800efbe:	6022      	str	r2, [r4, #0]
 800efc0:	e7c0      	b.n	800ef44 <_scanf_float+0x18c>
 800efc2:	2d03      	cmp	r5, #3
 800efc4:	d0e2      	beq.n	800ef8c <_scanf_float+0x1d4>
 800efc6:	2d05      	cmp	r5, #5
 800efc8:	e7de      	b.n	800ef88 <_scanf_float+0x1d0>
 800efca:	2d02      	cmp	r5, #2
 800efcc:	f47f af26 	bne.w	800ee1c <_scanf_float+0x64>
 800efd0:	2503      	movs	r5, #3
 800efd2:	e7b7      	b.n	800ef44 <_scanf_float+0x18c>
 800efd4:	2d06      	cmp	r5, #6
 800efd6:	f47f af21 	bne.w	800ee1c <_scanf_float+0x64>
 800efda:	2507      	movs	r5, #7
 800efdc:	e7b2      	b.n	800ef44 <_scanf_float+0x18c>
 800efde:	6822      	ldr	r2, [r4, #0]
 800efe0:	0591      	lsls	r1, r2, #22
 800efe2:	f57f af1b 	bpl.w	800ee1c <_scanf_float+0x64>
 800efe6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800efea:	6022      	str	r2, [r4, #0]
 800efec:	f8cd 9004 	str.w	r9, [sp, #4]
 800eff0:	e7a8      	b.n	800ef44 <_scanf_float+0x18c>
 800eff2:	6822      	ldr	r2, [r4, #0]
 800eff4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800eff8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800effc:	d006      	beq.n	800f00c <_scanf_float+0x254>
 800effe:	0550      	lsls	r0, r2, #21
 800f000:	f57f af0c 	bpl.w	800ee1c <_scanf_float+0x64>
 800f004:	f1b9 0f00 	cmp.w	r9, #0
 800f008:	f43f af0f 	beq.w	800ee2a <_scanf_float+0x72>
 800f00c:	0591      	lsls	r1, r2, #22
 800f00e:	bf58      	it	pl
 800f010:	9901      	ldrpl	r1, [sp, #4]
 800f012:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f016:	bf58      	it	pl
 800f018:	eba9 0101 	subpl.w	r1, r9, r1
 800f01c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f020:	f04f 0900 	mov.w	r9, #0
 800f024:	bf58      	it	pl
 800f026:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f02a:	6022      	str	r2, [r4, #0]
 800f02c:	e78a      	b.n	800ef44 <_scanf_float+0x18c>
 800f02e:	f04f 0a03 	mov.w	sl, #3
 800f032:	e787      	b.n	800ef44 <_scanf_float+0x18c>
 800f034:	4639      	mov	r1, r7
 800f036:	4640      	mov	r0, r8
 800f038:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f03c:	4798      	blx	r3
 800f03e:	2800      	cmp	r0, #0
 800f040:	f43f aedf 	beq.w	800ee02 <_scanf_float+0x4a>
 800f044:	e6ea      	b.n	800ee1c <_scanf_float+0x64>
 800f046:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f04a:	463a      	mov	r2, r7
 800f04c:	4640      	mov	r0, r8
 800f04e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f052:	4798      	blx	r3
 800f054:	6923      	ldr	r3, [r4, #16]
 800f056:	3b01      	subs	r3, #1
 800f058:	6123      	str	r3, [r4, #16]
 800f05a:	e6ec      	b.n	800ee36 <_scanf_float+0x7e>
 800f05c:	1e6b      	subs	r3, r5, #1
 800f05e:	2b06      	cmp	r3, #6
 800f060:	d825      	bhi.n	800f0ae <_scanf_float+0x2f6>
 800f062:	2d02      	cmp	r5, #2
 800f064:	d836      	bhi.n	800f0d4 <_scanf_float+0x31c>
 800f066:	455e      	cmp	r6, fp
 800f068:	f67f aee8 	bls.w	800ee3c <_scanf_float+0x84>
 800f06c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f070:	463a      	mov	r2, r7
 800f072:	4640      	mov	r0, r8
 800f074:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f078:	4798      	blx	r3
 800f07a:	6923      	ldr	r3, [r4, #16]
 800f07c:	3b01      	subs	r3, #1
 800f07e:	6123      	str	r3, [r4, #16]
 800f080:	e7f1      	b.n	800f066 <_scanf_float+0x2ae>
 800f082:	9802      	ldr	r0, [sp, #8]
 800f084:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f088:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f08c:	463a      	mov	r2, r7
 800f08e:	9002      	str	r0, [sp, #8]
 800f090:	4640      	mov	r0, r8
 800f092:	4798      	blx	r3
 800f094:	6923      	ldr	r3, [r4, #16]
 800f096:	3b01      	subs	r3, #1
 800f098:	6123      	str	r3, [r4, #16]
 800f09a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f09e:	fa5f fa8a 	uxtb.w	sl, sl
 800f0a2:	f1ba 0f02 	cmp.w	sl, #2
 800f0a6:	d1ec      	bne.n	800f082 <_scanf_float+0x2ca>
 800f0a8:	3d03      	subs	r5, #3
 800f0aa:	b2ed      	uxtb	r5, r5
 800f0ac:	1b76      	subs	r6, r6, r5
 800f0ae:	6823      	ldr	r3, [r4, #0]
 800f0b0:	05da      	lsls	r2, r3, #23
 800f0b2:	d52f      	bpl.n	800f114 <_scanf_float+0x35c>
 800f0b4:	055b      	lsls	r3, r3, #21
 800f0b6:	d510      	bpl.n	800f0da <_scanf_float+0x322>
 800f0b8:	455e      	cmp	r6, fp
 800f0ba:	f67f aebf 	bls.w	800ee3c <_scanf_float+0x84>
 800f0be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f0c2:	463a      	mov	r2, r7
 800f0c4:	4640      	mov	r0, r8
 800f0c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0ca:	4798      	blx	r3
 800f0cc:	6923      	ldr	r3, [r4, #16]
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	6123      	str	r3, [r4, #16]
 800f0d2:	e7f1      	b.n	800f0b8 <_scanf_float+0x300>
 800f0d4:	46aa      	mov	sl, r5
 800f0d6:	9602      	str	r6, [sp, #8]
 800f0d8:	e7df      	b.n	800f09a <_scanf_float+0x2e2>
 800f0da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f0de:	6923      	ldr	r3, [r4, #16]
 800f0e0:	2965      	cmp	r1, #101	; 0x65
 800f0e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f0e6:	f106 35ff 	add.w	r5, r6, #4294967295
 800f0ea:	6123      	str	r3, [r4, #16]
 800f0ec:	d00c      	beq.n	800f108 <_scanf_float+0x350>
 800f0ee:	2945      	cmp	r1, #69	; 0x45
 800f0f0:	d00a      	beq.n	800f108 <_scanf_float+0x350>
 800f0f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f0f6:	463a      	mov	r2, r7
 800f0f8:	4640      	mov	r0, r8
 800f0fa:	4798      	blx	r3
 800f0fc:	6923      	ldr	r3, [r4, #16]
 800f0fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f102:	3b01      	subs	r3, #1
 800f104:	1eb5      	subs	r5, r6, #2
 800f106:	6123      	str	r3, [r4, #16]
 800f108:	463a      	mov	r2, r7
 800f10a:	4640      	mov	r0, r8
 800f10c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f110:	4798      	blx	r3
 800f112:	462e      	mov	r6, r5
 800f114:	6825      	ldr	r5, [r4, #0]
 800f116:	f015 0510 	ands.w	r5, r5, #16
 800f11a:	d159      	bne.n	800f1d0 <_scanf_float+0x418>
 800f11c:	7035      	strb	r5, [r6, #0]
 800f11e:	6823      	ldr	r3, [r4, #0]
 800f120:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f128:	d11c      	bne.n	800f164 <_scanf_float+0x3ac>
 800f12a:	9b01      	ldr	r3, [sp, #4]
 800f12c:	454b      	cmp	r3, r9
 800f12e:	eba3 0209 	sub.w	r2, r3, r9
 800f132:	d124      	bne.n	800f17e <_scanf_float+0x3c6>
 800f134:	2200      	movs	r2, #0
 800f136:	4659      	mov	r1, fp
 800f138:	4640      	mov	r0, r8
 800f13a:	f000 fe99 	bl	800fe70 <_strtod_r>
 800f13e:	f8d4 c000 	ldr.w	ip, [r4]
 800f142:	9b03      	ldr	r3, [sp, #12]
 800f144:	f01c 0f02 	tst.w	ip, #2
 800f148:	4606      	mov	r6, r0
 800f14a:	460f      	mov	r7, r1
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	d021      	beq.n	800f194 <_scanf_float+0x3dc>
 800f150:	9903      	ldr	r1, [sp, #12]
 800f152:	1d1a      	adds	r2, r3, #4
 800f154:	600a      	str	r2, [r1, #0]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	e9c3 6700 	strd	r6, r7, [r3]
 800f15c:	68e3      	ldr	r3, [r4, #12]
 800f15e:	3301      	adds	r3, #1
 800f160:	60e3      	str	r3, [r4, #12]
 800f162:	e66c      	b.n	800ee3e <_scanf_float+0x86>
 800f164:	9b04      	ldr	r3, [sp, #16]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d0e4      	beq.n	800f134 <_scanf_float+0x37c>
 800f16a:	9905      	ldr	r1, [sp, #20]
 800f16c:	230a      	movs	r3, #10
 800f16e:	462a      	mov	r2, r5
 800f170:	4640      	mov	r0, r8
 800f172:	3101      	adds	r1, #1
 800f174:	f000 ff08 	bl	800ff88 <_strtol_r>
 800f178:	9b04      	ldr	r3, [sp, #16]
 800f17a:	9e05      	ldr	r6, [sp, #20]
 800f17c:	1ac2      	subs	r2, r0, r3
 800f17e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f182:	429e      	cmp	r6, r3
 800f184:	bf28      	it	cs
 800f186:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f18a:	4630      	mov	r0, r6
 800f18c:	4911      	ldr	r1, [pc, #68]	; (800f1d4 <_scanf_float+0x41c>)
 800f18e:	f000 f839 	bl	800f204 <siprintf>
 800f192:	e7cf      	b.n	800f134 <_scanf_float+0x37c>
 800f194:	f01c 0f04 	tst.w	ip, #4
 800f198:	f103 0e04 	add.w	lr, r3, #4
 800f19c:	d003      	beq.n	800f1a6 <_scanf_float+0x3ee>
 800f19e:	9903      	ldr	r1, [sp, #12]
 800f1a0:	f8c1 e000 	str.w	lr, [r1]
 800f1a4:	e7d7      	b.n	800f156 <_scanf_float+0x39e>
 800f1a6:	9a03      	ldr	r2, [sp, #12]
 800f1a8:	f8c2 e000 	str.w	lr, [r2]
 800f1ac:	f8d3 8000 	ldr.w	r8, [r3]
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	f7f1 fc70 	bl	8000a98 <__aeabi_dcmpun>
 800f1b8:	b128      	cbz	r0, 800f1c6 <_scanf_float+0x40e>
 800f1ba:	4807      	ldr	r0, [pc, #28]	; (800f1d8 <_scanf_float+0x420>)
 800f1bc:	f000 f81e 	bl	800f1fc <nanf>
 800f1c0:	f8c8 0000 	str.w	r0, [r8]
 800f1c4:	e7ca      	b.n	800f15c <_scanf_float+0x3a4>
 800f1c6:	4630      	mov	r0, r6
 800f1c8:	4639      	mov	r1, r7
 800f1ca:	f7f1 fcc3 	bl	8000b54 <__aeabi_d2f>
 800f1ce:	e7f7      	b.n	800f1c0 <_scanf_float+0x408>
 800f1d0:	2500      	movs	r5, #0
 800f1d2:	e634      	b.n	800ee3e <_scanf_float+0x86>
 800f1d4:	08012cfc 	.word	0x08012cfc
 800f1d8:	08013118 	.word	0x08013118

0800f1dc <_sbrk_r>:
 800f1dc:	b538      	push	{r3, r4, r5, lr}
 800f1de:	2300      	movs	r3, #0
 800f1e0:	4d05      	ldr	r5, [pc, #20]	; (800f1f8 <_sbrk_r+0x1c>)
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	4608      	mov	r0, r1
 800f1e6:	602b      	str	r3, [r5, #0]
 800f1e8:	f7f3 fce8 	bl	8002bbc <_sbrk>
 800f1ec:	1c43      	adds	r3, r0, #1
 800f1ee:	d102      	bne.n	800f1f6 <_sbrk_r+0x1a>
 800f1f0:	682b      	ldr	r3, [r5, #0]
 800f1f2:	b103      	cbz	r3, 800f1f6 <_sbrk_r+0x1a>
 800f1f4:	6023      	str	r3, [r4, #0]
 800f1f6:	bd38      	pop	{r3, r4, r5, pc}
 800f1f8:	2000d610 	.word	0x2000d610

0800f1fc <nanf>:
 800f1fc:	4800      	ldr	r0, [pc, #0]	; (800f200 <nanf+0x4>)
 800f1fe:	4770      	bx	lr
 800f200:	7fc00000 	.word	0x7fc00000

0800f204 <siprintf>:
 800f204:	b40e      	push	{r1, r2, r3}
 800f206:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f20a:	b500      	push	{lr}
 800f20c:	b09c      	sub	sp, #112	; 0x70
 800f20e:	ab1d      	add	r3, sp, #116	; 0x74
 800f210:	9002      	str	r0, [sp, #8]
 800f212:	9006      	str	r0, [sp, #24]
 800f214:	9107      	str	r1, [sp, #28]
 800f216:	9104      	str	r1, [sp, #16]
 800f218:	4808      	ldr	r0, [pc, #32]	; (800f23c <siprintf+0x38>)
 800f21a:	4909      	ldr	r1, [pc, #36]	; (800f240 <siprintf+0x3c>)
 800f21c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f220:	9105      	str	r1, [sp, #20]
 800f222:	6800      	ldr	r0, [r0, #0]
 800f224:	a902      	add	r1, sp, #8
 800f226:	9301      	str	r3, [sp, #4]
 800f228:	f002 fde4 	bl	8011df4 <_svfiprintf_r>
 800f22c:	2200      	movs	r2, #0
 800f22e:	9b02      	ldr	r3, [sp, #8]
 800f230:	701a      	strb	r2, [r3, #0]
 800f232:	b01c      	add	sp, #112	; 0x70
 800f234:	f85d eb04 	ldr.w	lr, [sp], #4
 800f238:	b003      	add	sp, #12
 800f23a:	4770      	bx	lr
 800f23c:	20000060 	.word	0x20000060
 800f240:	ffff0208 	.word	0xffff0208

0800f244 <sulp>:
 800f244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f248:	460f      	mov	r7, r1
 800f24a:	4690      	mov	r8, r2
 800f24c:	f002 fc20 	bl	8011a90 <__ulp>
 800f250:	4604      	mov	r4, r0
 800f252:	460d      	mov	r5, r1
 800f254:	f1b8 0f00 	cmp.w	r8, #0
 800f258:	d011      	beq.n	800f27e <sulp+0x3a>
 800f25a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800f25e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f262:	2b00      	cmp	r3, #0
 800f264:	dd0b      	ble.n	800f27e <sulp+0x3a>
 800f266:	2400      	movs	r4, #0
 800f268:	051b      	lsls	r3, r3, #20
 800f26a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f26e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f272:	4622      	mov	r2, r4
 800f274:	462b      	mov	r3, r5
 800f276:	f7f1 f975 	bl	8000564 <__aeabi_dmul>
 800f27a:	4604      	mov	r4, r0
 800f27c:	460d      	mov	r5, r1
 800f27e:	4620      	mov	r0, r4
 800f280:	4629      	mov	r1, r5
 800f282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800f288 <_strtod_l>:
 800f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28c:	469b      	mov	fp, r3
 800f28e:	2300      	movs	r3, #0
 800f290:	b0a1      	sub	sp, #132	; 0x84
 800f292:	931c      	str	r3, [sp, #112]	; 0x70
 800f294:	4ba1      	ldr	r3, [pc, #644]	; (800f51c <_strtod_l+0x294>)
 800f296:	4682      	mov	sl, r0
 800f298:	681f      	ldr	r7, [r3, #0]
 800f29a:	460e      	mov	r6, r1
 800f29c:	4638      	mov	r0, r7
 800f29e:	9217      	str	r2, [sp, #92]	; 0x5c
 800f2a0:	f7f0 ff9c 	bl	80001dc <strlen>
 800f2a4:	f04f 0800 	mov.w	r8, #0
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	f04f 0900 	mov.w	r9, #0
 800f2ae:	961b      	str	r6, [sp, #108]	; 0x6c
 800f2b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f2b2:	781a      	ldrb	r2, [r3, #0]
 800f2b4:	2a2b      	cmp	r2, #43	; 0x2b
 800f2b6:	d04c      	beq.n	800f352 <_strtod_l+0xca>
 800f2b8:	d83a      	bhi.n	800f330 <_strtod_l+0xa8>
 800f2ba:	2a0d      	cmp	r2, #13
 800f2bc:	d833      	bhi.n	800f326 <_strtod_l+0x9e>
 800f2be:	2a08      	cmp	r2, #8
 800f2c0:	d833      	bhi.n	800f32a <_strtod_l+0xa2>
 800f2c2:	2a00      	cmp	r2, #0
 800f2c4:	d03d      	beq.n	800f342 <_strtod_l+0xba>
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	930c      	str	r3, [sp, #48]	; 0x30
 800f2ca:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f2cc:	782b      	ldrb	r3, [r5, #0]
 800f2ce:	2b30      	cmp	r3, #48	; 0x30
 800f2d0:	f040 80af 	bne.w	800f432 <_strtod_l+0x1aa>
 800f2d4:	786b      	ldrb	r3, [r5, #1]
 800f2d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f2da:	2b58      	cmp	r3, #88	; 0x58
 800f2dc:	d16c      	bne.n	800f3b8 <_strtod_l+0x130>
 800f2de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2e0:	4650      	mov	r0, sl
 800f2e2:	9301      	str	r3, [sp, #4]
 800f2e4:	ab1c      	add	r3, sp, #112	; 0x70
 800f2e6:	9300      	str	r3, [sp, #0]
 800f2e8:	4a8d      	ldr	r2, [pc, #564]	; (800f520 <_strtod_l+0x298>)
 800f2ea:	f8cd b008 	str.w	fp, [sp, #8]
 800f2ee:	ab1d      	add	r3, sp, #116	; 0x74
 800f2f0:	a91b      	add	r1, sp, #108	; 0x6c
 800f2f2:	f001 fd2f 	bl	8010d54 <__gethex>
 800f2f6:	f010 0607 	ands.w	r6, r0, #7
 800f2fa:	4604      	mov	r4, r0
 800f2fc:	d005      	beq.n	800f30a <_strtod_l+0x82>
 800f2fe:	2e06      	cmp	r6, #6
 800f300:	d129      	bne.n	800f356 <_strtod_l+0xce>
 800f302:	2300      	movs	r3, #0
 800f304:	3501      	adds	r5, #1
 800f306:	951b      	str	r5, [sp, #108]	; 0x6c
 800f308:	930c      	str	r3, [sp, #48]	; 0x30
 800f30a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	f040 8596 	bne.w	800fe3e <_strtod_l+0xbb6>
 800f312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f314:	b1d3      	cbz	r3, 800f34c <_strtod_l+0xc4>
 800f316:	4642      	mov	r2, r8
 800f318:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f31c:	4610      	mov	r0, r2
 800f31e:	4619      	mov	r1, r3
 800f320:	b021      	add	sp, #132	; 0x84
 800f322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f326:	2a20      	cmp	r2, #32
 800f328:	d1cd      	bne.n	800f2c6 <_strtod_l+0x3e>
 800f32a:	3301      	adds	r3, #1
 800f32c:	931b      	str	r3, [sp, #108]	; 0x6c
 800f32e:	e7bf      	b.n	800f2b0 <_strtod_l+0x28>
 800f330:	2a2d      	cmp	r2, #45	; 0x2d
 800f332:	d1c8      	bne.n	800f2c6 <_strtod_l+0x3e>
 800f334:	2201      	movs	r2, #1
 800f336:	920c      	str	r2, [sp, #48]	; 0x30
 800f338:	1c5a      	adds	r2, r3, #1
 800f33a:	921b      	str	r2, [sp, #108]	; 0x6c
 800f33c:	785b      	ldrb	r3, [r3, #1]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d1c3      	bne.n	800f2ca <_strtod_l+0x42>
 800f342:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f344:	961b      	str	r6, [sp, #108]	; 0x6c
 800f346:	2b00      	cmp	r3, #0
 800f348:	f040 8577 	bne.w	800fe3a <_strtod_l+0xbb2>
 800f34c:	4642      	mov	r2, r8
 800f34e:	464b      	mov	r3, r9
 800f350:	e7e4      	b.n	800f31c <_strtod_l+0x94>
 800f352:	2200      	movs	r2, #0
 800f354:	e7ef      	b.n	800f336 <_strtod_l+0xae>
 800f356:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f358:	b13a      	cbz	r2, 800f36a <_strtod_l+0xe2>
 800f35a:	2135      	movs	r1, #53	; 0x35
 800f35c:	a81e      	add	r0, sp, #120	; 0x78
 800f35e:	f002 fc9b 	bl	8011c98 <__copybits>
 800f362:	4650      	mov	r0, sl
 800f364:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f366:	f002 f863 	bl	8011430 <_Bfree>
 800f36a:	3e01      	subs	r6, #1
 800f36c:	2e05      	cmp	r6, #5
 800f36e:	d807      	bhi.n	800f380 <_strtod_l+0xf8>
 800f370:	e8df f006 	tbb	[pc, r6]
 800f374:	1d180b0e 	.word	0x1d180b0e
 800f378:	030e      	.short	0x030e
 800f37a:	f04f 0900 	mov.w	r9, #0
 800f37e:	46c8      	mov	r8, r9
 800f380:	0721      	lsls	r1, r4, #28
 800f382:	d5c2      	bpl.n	800f30a <_strtod_l+0x82>
 800f384:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f388:	e7bf      	b.n	800f30a <_strtod_l+0x82>
 800f38a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800f38e:	e7f7      	b.n	800f380 <_strtod_l+0xf8>
 800f390:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f392:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800f396:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f39a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f39e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f3a2:	e7ed      	b.n	800f380 <_strtod_l+0xf8>
 800f3a4:	f04f 0800 	mov.w	r8, #0
 800f3a8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f524 <_strtod_l+0x29c>
 800f3ac:	e7e8      	b.n	800f380 <_strtod_l+0xf8>
 800f3ae:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f3b2:	f04f 38ff 	mov.w	r8, #4294967295
 800f3b6:	e7e3      	b.n	800f380 <_strtod_l+0xf8>
 800f3b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3ba:	1c5a      	adds	r2, r3, #1
 800f3bc:	921b      	str	r2, [sp, #108]	; 0x6c
 800f3be:	785b      	ldrb	r3, [r3, #1]
 800f3c0:	2b30      	cmp	r3, #48	; 0x30
 800f3c2:	d0f9      	beq.n	800f3b8 <_strtod_l+0x130>
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d0a0      	beq.n	800f30a <_strtod_l+0x82>
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	9307      	str	r3, [sp, #28]
 800f3cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3ce:	220a      	movs	r2, #10
 800f3d0:	9308      	str	r3, [sp, #32]
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	469b      	mov	fp, r3
 800f3d6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f3da:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800f3dc:	7805      	ldrb	r5, [r0, #0]
 800f3de:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800f3e2:	b2d9      	uxtb	r1, r3
 800f3e4:	2909      	cmp	r1, #9
 800f3e6:	d926      	bls.n	800f436 <_strtod_l+0x1ae>
 800f3e8:	4622      	mov	r2, r4
 800f3ea:	4639      	mov	r1, r7
 800f3ec:	f002 fe08 	bl	8012000 <strncmp>
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d032      	beq.n	800f45a <_strtod_l+0x1d2>
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	462b      	mov	r3, r5
 800f3f8:	465c      	mov	r4, fp
 800f3fa:	4602      	mov	r2, r0
 800f3fc:	9004      	str	r0, [sp, #16]
 800f3fe:	2b65      	cmp	r3, #101	; 0x65
 800f400:	d001      	beq.n	800f406 <_strtod_l+0x17e>
 800f402:	2b45      	cmp	r3, #69	; 0x45
 800f404:	d113      	bne.n	800f42e <_strtod_l+0x1a6>
 800f406:	b91c      	cbnz	r4, 800f410 <_strtod_l+0x188>
 800f408:	9b07      	ldr	r3, [sp, #28]
 800f40a:	4303      	orrs	r3, r0
 800f40c:	d099      	beq.n	800f342 <_strtod_l+0xba>
 800f40e:	2400      	movs	r4, #0
 800f410:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800f412:	1c73      	adds	r3, r6, #1
 800f414:	931b      	str	r3, [sp, #108]	; 0x6c
 800f416:	7873      	ldrb	r3, [r6, #1]
 800f418:	2b2b      	cmp	r3, #43	; 0x2b
 800f41a:	d078      	beq.n	800f50e <_strtod_l+0x286>
 800f41c:	2b2d      	cmp	r3, #45	; 0x2d
 800f41e:	d07b      	beq.n	800f518 <_strtod_l+0x290>
 800f420:	2700      	movs	r7, #0
 800f422:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f426:	2909      	cmp	r1, #9
 800f428:	f240 8082 	bls.w	800f530 <_strtod_l+0x2a8>
 800f42c:	961b      	str	r6, [sp, #108]	; 0x6c
 800f42e:	2500      	movs	r5, #0
 800f430:	e09e      	b.n	800f570 <_strtod_l+0x2e8>
 800f432:	2300      	movs	r3, #0
 800f434:	e7c9      	b.n	800f3ca <_strtod_l+0x142>
 800f436:	f1bb 0f08 	cmp.w	fp, #8
 800f43a:	bfd5      	itete	le
 800f43c:	9906      	ldrle	r1, [sp, #24]
 800f43e:	9905      	ldrgt	r1, [sp, #20]
 800f440:	fb02 3301 	mlale	r3, r2, r1, r3
 800f444:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f448:	f100 0001 	add.w	r0, r0, #1
 800f44c:	bfd4      	ite	le
 800f44e:	9306      	strle	r3, [sp, #24]
 800f450:	9305      	strgt	r3, [sp, #20]
 800f452:	f10b 0b01 	add.w	fp, fp, #1
 800f456:	901b      	str	r0, [sp, #108]	; 0x6c
 800f458:	e7bf      	b.n	800f3da <_strtod_l+0x152>
 800f45a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f45c:	191a      	adds	r2, r3, r4
 800f45e:	921b      	str	r2, [sp, #108]	; 0x6c
 800f460:	5d1b      	ldrb	r3, [r3, r4]
 800f462:	f1bb 0f00 	cmp.w	fp, #0
 800f466:	d036      	beq.n	800f4d6 <_strtod_l+0x24e>
 800f468:	465c      	mov	r4, fp
 800f46a:	9004      	str	r0, [sp, #16]
 800f46c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f470:	2a09      	cmp	r2, #9
 800f472:	d912      	bls.n	800f49a <_strtod_l+0x212>
 800f474:	2201      	movs	r2, #1
 800f476:	e7c2      	b.n	800f3fe <_strtod_l+0x176>
 800f478:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f47a:	3001      	adds	r0, #1
 800f47c:	1c5a      	adds	r2, r3, #1
 800f47e:	921b      	str	r2, [sp, #108]	; 0x6c
 800f480:	785b      	ldrb	r3, [r3, #1]
 800f482:	2b30      	cmp	r3, #48	; 0x30
 800f484:	d0f8      	beq.n	800f478 <_strtod_l+0x1f0>
 800f486:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f48a:	2a08      	cmp	r2, #8
 800f48c:	f200 84dc 	bhi.w	800fe48 <_strtod_l+0xbc0>
 800f490:	9004      	str	r0, [sp, #16]
 800f492:	2000      	movs	r0, #0
 800f494:	4604      	mov	r4, r0
 800f496:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f498:	9208      	str	r2, [sp, #32]
 800f49a:	3b30      	subs	r3, #48	; 0x30
 800f49c:	f100 0201 	add.w	r2, r0, #1
 800f4a0:	d013      	beq.n	800f4ca <_strtod_l+0x242>
 800f4a2:	9904      	ldr	r1, [sp, #16]
 800f4a4:	1905      	adds	r5, r0, r4
 800f4a6:	4411      	add	r1, r2
 800f4a8:	9104      	str	r1, [sp, #16]
 800f4aa:	4622      	mov	r2, r4
 800f4ac:	210a      	movs	r1, #10
 800f4ae:	42aa      	cmp	r2, r5
 800f4b0:	d113      	bne.n	800f4da <_strtod_l+0x252>
 800f4b2:	1822      	adds	r2, r4, r0
 800f4b4:	2a08      	cmp	r2, #8
 800f4b6:	f104 0401 	add.w	r4, r4, #1
 800f4ba:	4404      	add	r4, r0
 800f4bc:	dc1b      	bgt.n	800f4f6 <_strtod_l+0x26e>
 800f4be:	220a      	movs	r2, #10
 800f4c0:	9906      	ldr	r1, [sp, #24]
 800f4c2:	fb02 3301 	mla	r3, r2, r1, r3
 800f4c6:	9306      	str	r3, [sp, #24]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f4cc:	4610      	mov	r0, r2
 800f4ce:	1c59      	adds	r1, r3, #1
 800f4d0:	911b      	str	r1, [sp, #108]	; 0x6c
 800f4d2:	785b      	ldrb	r3, [r3, #1]
 800f4d4:	e7ca      	b.n	800f46c <_strtod_l+0x1e4>
 800f4d6:	4658      	mov	r0, fp
 800f4d8:	e7d3      	b.n	800f482 <_strtod_l+0x1fa>
 800f4da:	2a08      	cmp	r2, #8
 800f4dc:	dc04      	bgt.n	800f4e8 <_strtod_l+0x260>
 800f4de:	9f06      	ldr	r7, [sp, #24]
 800f4e0:	434f      	muls	r7, r1
 800f4e2:	9706      	str	r7, [sp, #24]
 800f4e4:	3201      	adds	r2, #1
 800f4e6:	e7e2      	b.n	800f4ae <_strtod_l+0x226>
 800f4e8:	1c57      	adds	r7, r2, #1
 800f4ea:	2f10      	cmp	r7, #16
 800f4ec:	bfde      	ittt	le
 800f4ee:	9f05      	ldrle	r7, [sp, #20]
 800f4f0:	434f      	mulle	r7, r1
 800f4f2:	9705      	strle	r7, [sp, #20]
 800f4f4:	e7f6      	b.n	800f4e4 <_strtod_l+0x25c>
 800f4f6:	2c10      	cmp	r4, #16
 800f4f8:	bfdf      	itttt	le
 800f4fa:	220a      	movle	r2, #10
 800f4fc:	9905      	ldrle	r1, [sp, #20]
 800f4fe:	fb02 3301 	mlale	r3, r2, r1, r3
 800f502:	9305      	strle	r3, [sp, #20]
 800f504:	e7e0      	b.n	800f4c8 <_strtod_l+0x240>
 800f506:	2300      	movs	r3, #0
 800f508:	2201      	movs	r2, #1
 800f50a:	9304      	str	r3, [sp, #16]
 800f50c:	e77c      	b.n	800f408 <_strtod_l+0x180>
 800f50e:	2700      	movs	r7, #0
 800f510:	1cb3      	adds	r3, r6, #2
 800f512:	931b      	str	r3, [sp, #108]	; 0x6c
 800f514:	78b3      	ldrb	r3, [r6, #2]
 800f516:	e784      	b.n	800f422 <_strtod_l+0x19a>
 800f518:	2701      	movs	r7, #1
 800f51a:	e7f9      	b.n	800f510 <_strtod_l+0x288>
 800f51c:	08012f58 	.word	0x08012f58
 800f520:	08012d04 	.word	0x08012d04
 800f524:	7ff00000 	.word	0x7ff00000
 800f528:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f52a:	1c59      	adds	r1, r3, #1
 800f52c:	911b      	str	r1, [sp, #108]	; 0x6c
 800f52e:	785b      	ldrb	r3, [r3, #1]
 800f530:	2b30      	cmp	r3, #48	; 0x30
 800f532:	d0f9      	beq.n	800f528 <_strtod_l+0x2a0>
 800f534:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800f538:	2908      	cmp	r1, #8
 800f53a:	f63f af78 	bhi.w	800f42e <_strtod_l+0x1a6>
 800f53e:	f04f 0e0a 	mov.w	lr, #10
 800f542:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800f546:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f548:	9309      	str	r3, [sp, #36]	; 0x24
 800f54a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f54c:	1c59      	adds	r1, r3, #1
 800f54e:	911b      	str	r1, [sp, #108]	; 0x6c
 800f550:	785b      	ldrb	r3, [r3, #1]
 800f552:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800f556:	2d09      	cmp	r5, #9
 800f558:	d935      	bls.n	800f5c6 <_strtod_l+0x33e>
 800f55a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f55c:	1b49      	subs	r1, r1, r5
 800f55e:	2908      	cmp	r1, #8
 800f560:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f564:	dc02      	bgt.n	800f56c <_strtod_l+0x2e4>
 800f566:	4565      	cmp	r5, ip
 800f568:	bfa8      	it	ge
 800f56a:	4665      	movge	r5, ip
 800f56c:	b107      	cbz	r7, 800f570 <_strtod_l+0x2e8>
 800f56e:	426d      	negs	r5, r5
 800f570:	2c00      	cmp	r4, #0
 800f572:	d14c      	bne.n	800f60e <_strtod_l+0x386>
 800f574:	9907      	ldr	r1, [sp, #28]
 800f576:	4301      	orrs	r1, r0
 800f578:	f47f aec7 	bne.w	800f30a <_strtod_l+0x82>
 800f57c:	2a00      	cmp	r2, #0
 800f57e:	f47f aee0 	bne.w	800f342 <_strtod_l+0xba>
 800f582:	2b69      	cmp	r3, #105	; 0x69
 800f584:	d026      	beq.n	800f5d4 <_strtod_l+0x34c>
 800f586:	dc23      	bgt.n	800f5d0 <_strtod_l+0x348>
 800f588:	2b49      	cmp	r3, #73	; 0x49
 800f58a:	d023      	beq.n	800f5d4 <_strtod_l+0x34c>
 800f58c:	2b4e      	cmp	r3, #78	; 0x4e
 800f58e:	f47f aed8 	bne.w	800f342 <_strtod_l+0xba>
 800f592:	499c      	ldr	r1, [pc, #624]	; (800f804 <_strtod_l+0x57c>)
 800f594:	a81b      	add	r0, sp, #108	; 0x6c
 800f596:	f001 fe2b 	bl	80111f0 <__match>
 800f59a:	2800      	cmp	r0, #0
 800f59c:	f43f aed1 	beq.w	800f342 <_strtod_l+0xba>
 800f5a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	2b28      	cmp	r3, #40	; 0x28
 800f5a6:	d12c      	bne.n	800f602 <_strtod_l+0x37a>
 800f5a8:	4997      	ldr	r1, [pc, #604]	; (800f808 <_strtod_l+0x580>)
 800f5aa:	aa1e      	add	r2, sp, #120	; 0x78
 800f5ac:	a81b      	add	r0, sp, #108	; 0x6c
 800f5ae:	f001 fe33 	bl	8011218 <__hexnan>
 800f5b2:	2805      	cmp	r0, #5
 800f5b4:	d125      	bne.n	800f602 <_strtod_l+0x37a>
 800f5b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f5b8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800f5bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f5c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f5c4:	e6a1      	b.n	800f30a <_strtod_l+0x82>
 800f5c6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800f5ca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800f5ce:	e7bc      	b.n	800f54a <_strtod_l+0x2c2>
 800f5d0:	2b6e      	cmp	r3, #110	; 0x6e
 800f5d2:	e7dc      	b.n	800f58e <_strtod_l+0x306>
 800f5d4:	498d      	ldr	r1, [pc, #564]	; (800f80c <_strtod_l+0x584>)
 800f5d6:	a81b      	add	r0, sp, #108	; 0x6c
 800f5d8:	f001 fe0a 	bl	80111f0 <__match>
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	f43f aeb0 	beq.w	800f342 <_strtod_l+0xba>
 800f5e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f5e4:	498a      	ldr	r1, [pc, #552]	; (800f810 <_strtod_l+0x588>)
 800f5e6:	3b01      	subs	r3, #1
 800f5e8:	a81b      	add	r0, sp, #108	; 0x6c
 800f5ea:	931b      	str	r3, [sp, #108]	; 0x6c
 800f5ec:	f001 fe00 	bl	80111f0 <__match>
 800f5f0:	b910      	cbnz	r0, 800f5f8 <_strtod_l+0x370>
 800f5f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	931b      	str	r3, [sp, #108]	; 0x6c
 800f5f8:	f04f 0800 	mov.w	r8, #0
 800f5fc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800f820 <_strtod_l+0x598>
 800f600:	e683      	b.n	800f30a <_strtod_l+0x82>
 800f602:	4884      	ldr	r0, [pc, #528]	; (800f814 <_strtod_l+0x58c>)
 800f604:	f002 fcf6 	bl	8011ff4 <nan>
 800f608:	4680      	mov	r8, r0
 800f60a:	4689      	mov	r9, r1
 800f60c:	e67d      	b.n	800f30a <_strtod_l+0x82>
 800f60e:	9b04      	ldr	r3, [sp, #16]
 800f610:	f1bb 0f00 	cmp.w	fp, #0
 800f614:	bf08      	it	eq
 800f616:	46a3      	moveq	fp, r4
 800f618:	1aeb      	subs	r3, r5, r3
 800f61a:	2c10      	cmp	r4, #16
 800f61c:	9806      	ldr	r0, [sp, #24]
 800f61e:	4626      	mov	r6, r4
 800f620:	9307      	str	r3, [sp, #28]
 800f622:	bfa8      	it	ge
 800f624:	2610      	movge	r6, #16
 800f626:	f7f0 ff23 	bl	8000470 <__aeabi_ui2d>
 800f62a:	2c09      	cmp	r4, #9
 800f62c:	4680      	mov	r8, r0
 800f62e:	4689      	mov	r9, r1
 800f630:	dd13      	ble.n	800f65a <_strtod_l+0x3d2>
 800f632:	4b79      	ldr	r3, [pc, #484]	; (800f818 <_strtod_l+0x590>)
 800f634:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f638:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f63c:	f7f0 ff92 	bl	8000564 <__aeabi_dmul>
 800f640:	4680      	mov	r8, r0
 800f642:	9805      	ldr	r0, [sp, #20]
 800f644:	4689      	mov	r9, r1
 800f646:	f7f0 ff13 	bl	8000470 <__aeabi_ui2d>
 800f64a:	4602      	mov	r2, r0
 800f64c:	460b      	mov	r3, r1
 800f64e:	4640      	mov	r0, r8
 800f650:	4649      	mov	r1, r9
 800f652:	f7f0 fdd1 	bl	80001f8 <__adddf3>
 800f656:	4680      	mov	r8, r0
 800f658:	4689      	mov	r9, r1
 800f65a:	2c0f      	cmp	r4, #15
 800f65c:	dc36      	bgt.n	800f6cc <_strtod_l+0x444>
 800f65e:	9b07      	ldr	r3, [sp, #28]
 800f660:	2b00      	cmp	r3, #0
 800f662:	f43f ae52 	beq.w	800f30a <_strtod_l+0x82>
 800f666:	dd22      	ble.n	800f6ae <_strtod_l+0x426>
 800f668:	2b16      	cmp	r3, #22
 800f66a:	dc09      	bgt.n	800f680 <_strtod_l+0x3f8>
 800f66c:	4c6a      	ldr	r4, [pc, #424]	; (800f818 <_strtod_l+0x590>)
 800f66e:	4642      	mov	r2, r8
 800f670:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800f674:	464b      	mov	r3, r9
 800f676:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f67a:	f7f0 ff73 	bl	8000564 <__aeabi_dmul>
 800f67e:	e7c3      	b.n	800f608 <_strtod_l+0x380>
 800f680:	9a07      	ldr	r2, [sp, #28]
 800f682:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f686:	4293      	cmp	r3, r2
 800f688:	db20      	blt.n	800f6cc <_strtod_l+0x444>
 800f68a:	4d63      	ldr	r5, [pc, #396]	; (800f818 <_strtod_l+0x590>)
 800f68c:	f1c4 040f 	rsb	r4, r4, #15
 800f690:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f694:	4642      	mov	r2, r8
 800f696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f69a:	464b      	mov	r3, r9
 800f69c:	f7f0 ff62 	bl	8000564 <__aeabi_dmul>
 800f6a0:	9b07      	ldr	r3, [sp, #28]
 800f6a2:	1b1c      	subs	r4, r3, r4
 800f6a4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f6a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f6ac:	e7e5      	b.n	800f67a <_strtod_l+0x3f2>
 800f6ae:	9b07      	ldr	r3, [sp, #28]
 800f6b0:	3316      	adds	r3, #22
 800f6b2:	db0b      	blt.n	800f6cc <_strtod_l+0x444>
 800f6b4:	9b04      	ldr	r3, [sp, #16]
 800f6b6:	4a58      	ldr	r2, [pc, #352]	; (800f818 <_strtod_l+0x590>)
 800f6b8:	1b5d      	subs	r5, r3, r5
 800f6ba:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f6be:	4640      	mov	r0, r8
 800f6c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f6c4:	4649      	mov	r1, r9
 800f6c6:	f7f1 f877 	bl	80007b8 <__aeabi_ddiv>
 800f6ca:	e79d      	b.n	800f608 <_strtod_l+0x380>
 800f6cc:	9b07      	ldr	r3, [sp, #28]
 800f6ce:	1ba6      	subs	r6, r4, r6
 800f6d0:	441e      	add	r6, r3
 800f6d2:	2e00      	cmp	r6, #0
 800f6d4:	dd71      	ble.n	800f7ba <_strtod_l+0x532>
 800f6d6:	f016 030f 	ands.w	r3, r6, #15
 800f6da:	d00a      	beq.n	800f6f2 <_strtod_l+0x46a>
 800f6dc:	494e      	ldr	r1, [pc, #312]	; (800f818 <_strtod_l+0x590>)
 800f6de:	4642      	mov	r2, r8
 800f6e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6e8:	464b      	mov	r3, r9
 800f6ea:	f7f0 ff3b 	bl	8000564 <__aeabi_dmul>
 800f6ee:	4680      	mov	r8, r0
 800f6f0:	4689      	mov	r9, r1
 800f6f2:	f036 060f 	bics.w	r6, r6, #15
 800f6f6:	d050      	beq.n	800f79a <_strtod_l+0x512>
 800f6f8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800f6fc:	dd27      	ble.n	800f74e <_strtod_l+0x4c6>
 800f6fe:	f04f 0b00 	mov.w	fp, #0
 800f702:	f8cd b010 	str.w	fp, [sp, #16]
 800f706:	f8cd b020 	str.w	fp, [sp, #32]
 800f70a:	f8cd b018 	str.w	fp, [sp, #24]
 800f70e:	2322      	movs	r3, #34	; 0x22
 800f710:	f04f 0800 	mov.w	r8, #0
 800f714:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800f820 <_strtod_l+0x598>
 800f718:	f8ca 3000 	str.w	r3, [sl]
 800f71c:	9b08      	ldr	r3, [sp, #32]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f43f adf3 	beq.w	800f30a <_strtod_l+0x82>
 800f724:	4650      	mov	r0, sl
 800f726:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f728:	f001 fe82 	bl	8011430 <_Bfree>
 800f72c:	4650      	mov	r0, sl
 800f72e:	9906      	ldr	r1, [sp, #24]
 800f730:	f001 fe7e 	bl	8011430 <_Bfree>
 800f734:	4650      	mov	r0, sl
 800f736:	9904      	ldr	r1, [sp, #16]
 800f738:	f001 fe7a 	bl	8011430 <_Bfree>
 800f73c:	4650      	mov	r0, sl
 800f73e:	9908      	ldr	r1, [sp, #32]
 800f740:	f001 fe76 	bl	8011430 <_Bfree>
 800f744:	4659      	mov	r1, fp
 800f746:	4650      	mov	r0, sl
 800f748:	f001 fe72 	bl	8011430 <_Bfree>
 800f74c:	e5dd      	b.n	800f30a <_strtod_l+0x82>
 800f74e:	2300      	movs	r3, #0
 800f750:	4640      	mov	r0, r8
 800f752:	4649      	mov	r1, r9
 800f754:	461f      	mov	r7, r3
 800f756:	1136      	asrs	r6, r6, #4
 800f758:	2e01      	cmp	r6, #1
 800f75a:	dc21      	bgt.n	800f7a0 <_strtod_l+0x518>
 800f75c:	b10b      	cbz	r3, 800f762 <_strtod_l+0x4da>
 800f75e:	4680      	mov	r8, r0
 800f760:	4689      	mov	r9, r1
 800f762:	4b2e      	ldr	r3, [pc, #184]	; (800f81c <_strtod_l+0x594>)
 800f764:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f768:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f76c:	4642      	mov	r2, r8
 800f76e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f772:	464b      	mov	r3, r9
 800f774:	f7f0 fef6 	bl	8000564 <__aeabi_dmul>
 800f778:	4b29      	ldr	r3, [pc, #164]	; (800f820 <_strtod_l+0x598>)
 800f77a:	460a      	mov	r2, r1
 800f77c:	400b      	ands	r3, r1
 800f77e:	4929      	ldr	r1, [pc, #164]	; (800f824 <_strtod_l+0x59c>)
 800f780:	4680      	mov	r8, r0
 800f782:	428b      	cmp	r3, r1
 800f784:	d8bb      	bhi.n	800f6fe <_strtod_l+0x476>
 800f786:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f78a:	428b      	cmp	r3, r1
 800f78c:	bf86      	itte	hi
 800f78e:	f04f 38ff 	movhi.w	r8, #4294967295
 800f792:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800f828 <_strtod_l+0x5a0>
 800f796:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800f79a:	2300      	movs	r3, #0
 800f79c:	9305      	str	r3, [sp, #20]
 800f79e:	e07e      	b.n	800f89e <_strtod_l+0x616>
 800f7a0:	07f2      	lsls	r2, r6, #31
 800f7a2:	d507      	bpl.n	800f7b4 <_strtod_l+0x52c>
 800f7a4:	4b1d      	ldr	r3, [pc, #116]	; (800f81c <_strtod_l+0x594>)
 800f7a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ae:	f7f0 fed9 	bl	8000564 <__aeabi_dmul>
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	3701      	adds	r7, #1
 800f7b6:	1076      	asrs	r6, r6, #1
 800f7b8:	e7ce      	b.n	800f758 <_strtod_l+0x4d0>
 800f7ba:	d0ee      	beq.n	800f79a <_strtod_l+0x512>
 800f7bc:	4276      	negs	r6, r6
 800f7be:	f016 020f 	ands.w	r2, r6, #15
 800f7c2:	d00a      	beq.n	800f7da <_strtod_l+0x552>
 800f7c4:	4b14      	ldr	r3, [pc, #80]	; (800f818 <_strtod_l+0x590>)
 800f7c6:	4640      	mov	r0, r8
 800f7c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7cc:	4649      	mov	r1, r9
 800f7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d2:	f7f0 fff1 	bl	80007b8 <__aeabi_ddiv>
 800f7d6:	4680      	mov	r8, r0
 800f7d8:	4689      	mov	r9, r1
 800f7da:	1136      	asrs	r6, r6, #4
 800f7dc:	d0dd      	beq.n	800f79a <_strtod_l+0x512>
 800f7de:	2e1f      	cmp	r6, #31
 800f7e0:	dd24      	ble.n	800f82c <_strtod_l+0x5a4>
 800f7e2:	f04f 0b00 	mov.w	fp, #0
 800f7e6:	f8cd b010 	str.w	fp, [sp, #16]
 800f7ea:	f8cd b020 	str.w	fp, [sp, #32]
 800f7ee:	f8cd b018 	str.w	fp, [sp, #24]
 800f7f2:	2322      	movs	r3, #34	; 0x22
 800f7f4:	f04f 0800 	mov.w	r8, #0
 800f7f8:	f04f 0900 	mov.w	r9, #0
 800f7fc:	f8ca 3000 	str.w	r3, [sl]
 800f800:	e78c      	b.n	800f71c <_strtod_l+0x494>
 800f802:	bf00      	nop
 800f804:	08012cd5 	.word	0x08012cd5
 800f808:	08012d18 	.word	0x08012d18
 800f80c:	08012ccd 	.word	0x08012ccd
 800f810:	08012e5c 	.word	0x08012e5c
 800f814:	08013118 	.word	0x08013118
 800f818:	08012ff8 	.word	0x08012ff8
 800f81c:	08012fd0 	.word	0x08012fd0
 800f820:	7ff00000 	.word	0x7ff00000
 800f824:	7ca00000 	.word	0x7ca00000
 800f828:	7fefffff 	.word	0x7fefffff
 800f82c:	f016 0310 	ands.w	r3, r6, #16
 800f830:	bf18      	it	ne
 800f832:	236a      	movne	r3, #106	; 0x6a
 800f834:	4640      	mov	r0, r8
 800f836:	9305      	str	r3, [sp, #20]
 800f838:	4649      	mov	r1, r9
 800f83a:	2300      	movs	r3, #0
 800f83c:	4fb2      	ldr	r7, [pc, #712]	; (800fb08 <_strtod_l+0x880>)
 800f83e:	07f2      	lsls	r2, r6, #31
 800f840:	d504      	bpl.n	800f84c <_strtod_l+0x5c4>
 800f842:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f846:	f7f0 fe8d 	bl	8000564 <__aeabi_dmul>
 800f84a:	2301      	movs	r3, #1
 800f84c:	1076      	asrs	r6, r6, #1
 800f84e:	f107 0708 	add.w	r7, r7, #8
 800f852:	d1f4      	bne.n	800f83e <_strtod_l+0x5b6>
 800f854:	b10b      	cbz	r3, 800f85a <_strtod_l+0x5d2>
 800f856:	4680      	mov	r8, r0
 800f858:	4689      	mov	r9, r1
 800f85a:	9b05      	ldr	r3, [sp, #20]
 800f85c:	b1bb      	cbz	r3, 800f88e <_strtod_l+0x606>
 800f85e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800f862:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f866:	2b00      	cmp	r3, #0
 800f868:	4649      	mov	r1, r9
 800f86a:	dd10      	ble.n	800f88e <_strtod_l+0x606>
 800f86c:	2b1f      	cmp	r3, #31
 800f86e:	f340 812b 	ble.w	800fac8 <_strtod_l+0x840>
 800f872:	2b34      	cmp	r3, #52	; 0x34
 800f874:	bfd8      	it	le
 800f876:	f04f 32ff 	movle.w	r2, #4294967295
 800f87a:	f04f 0800 	mov.w	r8, #0
 800f87e:	bfcf      	iteee	gt
 800f880:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f884:	3b20      	suble	r3, #32
 800f886:	fa02 f303 	lslle.w	r3, r2, r3
 800f88a:	ea03 0901 	andle.w	r9, r3, r1
 800f88e:	2200      	movs	r2, #0
 800f890:	2300      	movs	r3, #0
 800f892:	4640      	mov	r0, r8
 800f894:	4649      	mov	r1, r9
 800f896:	f7f1 f8cd 	bl	8000a34 <__aeabi_dcmpeq>
 800f89a:	2800      	cmp	r0, #0
 800f89c:	d1a1      	bne.n	800f7e2 <_strtod_l+0x55a>
 800f89e:	9b06      	ldr	r3, [sp, #24]
 800f8a0:	465a      	mov	r2, fp
 800f8a2:	9300      	str	r3, [sp, #0]
 800f8a4:	4650      	mov	r0, sl
 800f8a6:	4623      	mov	r3, r4
 800f8a8:	9908      	ldr	r1, [sp, #32]
 800f8aa:	f001 fe2d 	bl	8011508 <__s2b>
 800f8ae:	9008      	str	r0, [sp, #32]
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	f43f af24 	beq.w	800f6fe <_strtod_l+0x476>
 800f8b6:	9b04      	ldr	r3, [sp, #16]
 800f8b8:	f04f 0b00 	mov.w	fp, #0
 800f8bc:	1b5d      	subs	r5, r3, r5
 800f8be:	9b07      	ldr	r3, [sp, #28]
 800f8c0:	f8cd b010 	str.w	fp, [sp, #16]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	bfb4      	ite	lt
 800f8c8:	462b      	movlt	r3, r5
 800f8ca:	2300      	movge	r3, #0
 800f8cc:	930e      	str	r3, [sp, #56]	; 0x38
 800f8ce:	9b07      	ldr	r3, [sp, #28]
 800f8d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f8d4:	9316      	str	r3, [sp, #88]	; 0x58
 800f8d6:	9b08      	ldr	r3, [sp, #32]
 800f8d8:	4650      	mov	r0, sl
 800f8da:	6859      	ldr	r1, [r3, #4]
 800f8dc:	f001 fd68 	bl	80113b0 <_Balloc>
 800f8e0:	9006      	str	r0, [sp, #24]
 800f8e2:	2800      	cmp	r0, #0
 800f8e4:	f43f af13 	beq.w	800f70e <_strtod_l+0x486>
 800f8e8:	9b08      	ldr	r3, [sp, #32]
 800f8ea:	300c      	adds	r0, #12
 800f8ec:	691a      	ldr	r2, [r3, #16]
 800f8ee:	f103 010c 	add.w	r1, r3, #12
 800f8f2:	3202      	adds	r2, #2
 800f8f4:	0092      	lsls	r2, r2, #2
 800f8f6:	f7fe fd43 	bl	800e380 <memcpy>
 800f8fa:	ab1e      	add	r3, sp, #120	; 0x78
 800f8fc:	9301      	str	r3, [sp, #4]
 800f8fe:	ab1d      	add	r3, sp, #116	; 0x74
 800f900:	9300      	str	r3, [sp, #0]
 800f902:	4642      	mov	r2, r8
 800f904:	464b      	mov	r3, r9
 800f906:	4650      	mov	r0, sl
 800f908:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800f90c:	f002 f93a 	bl	8011b84 <__d2b>
 800f910:	901c      	str	r0, [sp, #112]	; 0x70
 800f912:	2800      	cmp	r0, #0
 800f914:	f43f aefb 	beq.w	800f70e <_strtod_l+0x486>
 800f918:	2101      	movs	r1, #1
 800f91a:	4650      	mov	r0, sl
 800f91c:	f001 fe8c 	bl	8011638 <__i2b>
 800f920:	4603      	mov	r3, r0
 800f922:	9004      	str	r0, [sp, #16]
 800f924:	2800      	cmp	r0, #0
 800f926:	f43f aef2 	beq.w	800f70e <_strtod_l+0x486>
 800f92a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800f92c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f92e:	2d00      	cmp	r5, #0
 800f930:	bfab      	itete	ge
 800f932:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f934:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800f936:	18ee      	addge	r6, r5, r3
 800f938:	1b5c      	sublt	r4, r3, r5
 800f93a:	9b05      	ldr	r3, [sp, #20]
 800f93c:	bfa8      	it	ge
 800f93e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800f940:	eba5 0503 	sub.w	r5, r5, r3
 800f944:	4415      	add	r5, r2
 800f946:	4b71      	ldr	r3, [pc, #452]	; (800fb0c <_strtod_l+0x884>)
 800f948:	f105 35ff 	add.w	r5, r5, #4294967295
 800f94c:	bfb8      	it	lt
 800f94e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800f950:	429d      	cmp	r5, r3
 800f952:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f956:	f280 80c9 	bge.w	800faec <_strtod_l+0x864>
 800f95a:	1b5b      	subs	r3, r3, r5
 800f95c:	2b1f      	cmp	r3, #31
 800f95e:	f04f 0701 	mov.w	r7, #1
 800f962:	eba2 0203 	sub.w	r2, r2, r3
 800f966:	f300 80b6 	bgt.w	800fad6 <_strtod_l+0x84e>
 800f96a:	2500      	movs	r5, #0
 800f96c:	fa07 f303 	lsl.w	r3, r7, r3
 800f970:	930f      	str	r3, [sp, #60]	; 0x3c
 800f972:	18b7      	adds	r7, r6, r2
 800f974:	9b05      	ldr	r3, [sp, #20]
 800f976:	42be      	cmp	r6, r7
 800f978:	4414      	add	r4, r2
 800f97a:	441c      	add	r4, r3
 800f97c:	4633      	mov	r3, r6
 800f97e:	bfa8      	it	ge
 800f980:	463b      	movge	r3, r7
 800f982:	42a3      	cmp	r3, r4
 800f984:	bfa8      	it	ge
 800f986:	4623      	movge	r3, r4
 800f988:	2b00      	cmp	r3, #0
 800f98a:	bfc2      	ittt	gt
 800f98c:	1aff      	subgt	r7, r7, r3
 800f98e:	1ae4      	subgt	r4, r4, r3
 800f990:	1af6      	subgt	r6, r6, r3
 800f992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f994:	2b00      	cmp	r3, #0
 800f996:	dd17      	ble.n	800f9c8 <_strtod_l+0x740>
 800f998:	461a      	mov	r2, r3
 800f99a:	4650      	mov	r0, sl
 800f99c:	9904      	ldr	r1, [sp, #16]
 800f99e:	f001 ff05 	bl	80117ac <__pow5mult>
 800f9a2:	9004      	str	r0, [sp, #16]
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	f43f aeb2 	beq.w	800f70e <_strtod_l+0x486>
 800f9aa:	4601      	mov	r1, r0
 800f9ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f9ae:	4650      	mov	r0, sl
 800f9b0:	f001 fe58 	bl	8011664 <__multiply>
 800f9b4:	9009      	str	r0, [sp, #36]	; 0x24
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	f43f aea9 	beq.w	800f70e <_strtod_l+0x486>
 800f9bc:	4650      	mov	r0, sl
 800f9be:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f9c0:	f001 fd36 	bl	8011430 <_Bfree>
 800f9c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9c6:	931c      	str	r3, [sp, #112]	; 0x70
 800f9c8:	2f00      	cmp	r7, #0
 800f9ca:	f300 8093 	bgt.w	800faf4 <_strtod_l+0x86c>
 800f9ce:	9b07      	ldr	r3, [sp, #28]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	dd08      	ble.n	800f9e6 <_strtod_l+0x75e>
 800f9d4:	4650      	mov	r0, sl
 800f9d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f9d8:	9906      	ldr	r1, [sp, #24]
 800f9da:	f001 fee7 	bl	80117ac <__pow5mult>
 800f9de:	9006      	str	r0, [sp, #24]
 800f9e0:	2800      	cmp	r0, #0
 800f9e2:	f43f ae94 	beq.w	800f70e <_strtod_l+0x486>
 800f9e6:	2c00      	cmp	r4, #0
 800f9e8:	dd08      	ble.n	800f9fc <_strtod_l+0x774>
 800f9ea:	4622      	mov	r2, r4
 800f9ec:	4650      	mov	r0, sl
 800f9ee:	9906      	ldr	r1, [sp, #24]
 800f9f0:	f001 ff36 	bl	8011860 <__lshift>
 800f9f4:	9006      	str	r0, [sp, #24]
 800f9f6:	2800      	cmp	r0, #0
 800f9f8:	f43f ae89 	beq.w	800f70e <_strtod_l+0x486>
 800f9fc:	2e00      	cmp	r6, #0
 800f9fe:	dd08      	ble.n	800fa12 <_strtod_l+0x78a>
 800fa00:	4632      	mov	r2, r6
 800fa02:	4650      	mov	r0, sl
 800fa04:	9904      	ldr	r1, [sp, #16]
 800fa06:	f001 ff2b 	bl	8011860 <__lshift>
 800fa0a:	9004      	str	r0, [sp, #16]
 800fa0c:	2800      	cmp	r0, #0
 800fa0e:	f43f ae7e 	beq.w	800f70e <_strtod_l+0x486>
 800fa12:	4650      	mov	r0, sl
 800fa14:	9a06      	ldr	r2, [sp, #24]
 800fa16:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fa18:	f001 ffaa 	bl	8011970 <__mdiff>
 800fa1c:	4683      	mov	fp, r0
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	f43f ae75 	beq.w	800f70e <_strtod_l+0x486>
 800fa24:	2400      	movs	r4, #0
 800fa26:	68c3      	ldr	r3, [r0, #12]
 800fa28:	9904      	ldr	r1, [sp, #16]
 800fa2a:	60c4      	str	r4, [r0, #12]
 800fa2c:	930d      	str	r3, [sp, #52]	; 0x34
 800fa2e:	f001 ff83 	bl	8011938 <__mcmp>
 800fa32:	42a0      	cmp	r0, r4
 800fa34:	da70      	bge.n	800fb18 <_strtod_l+0x890>
 800fa36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa38:	ea53 0308 	orrs.w	r3, r3, r8
 800fa3c:	f040 8096 	bne.w	800fb6c <_strtod_l+0x8e4>
 800fa40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f040 8091 	bne.w	800fb6c <_strtod_l+0x8e4>
 800fa4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fa4e:	0d1b      	lsrs	r3, r3, #20
 800fa50:	051b      	lsls	r3, r3, #20
 800fa52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fa56:	f240 8089 	bls.w	800fb6c <_strtod_l+0x8e4>
 800fa5a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800fa5e:	b923      	cbnz	r3, 800fa6a <_strtod_l+0x7e2>
 800fa60:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	f340 8081 	ble.w	800fb6c <_strtod_l+0x8e4>
 800fa6a:	4659      	mov	r1, fp
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	4650      	mov	r0, sl
 800fa70:	f001 fef6 	bl	8011860 <__lshift>
 800fa74:	9904      	ldr	r1, [sp, #16]
 800fa76:	4683      	mov	fp, r0
 800fa78:	f001 ff5e 	bl	8011938 <__mcmp>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	dd75      	ble.n	800fb6c <_strtod_l+0x8e4>
 800fa80:	9905      	ldr	r1, [sp, #20]
 800fa82:	464b      	mov	r3, r9
 800fa84:	4a22      	ldr	r2, [pc, #136]	; (800fb10 <_strtod_l+0x888>)
 800fa86:	2900      	cmp	r1, #0
 800fa88:	f000 8091 	beq.w	800fbae <_strtod_l+0x926>
 800fa8c:	ea02 0109 	and.w	r1, r2, r9
 800fa90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fa94:	f300 808b 	bgt.w	800fbae <_strtod_l+0x926>
 800fa98:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fa9c:	f77f aea9 	ble.w	800f7f2 <_strtod_l+0x56a>
 800faa0:	2300      	movs	r3, #0
 800faa2:	4a1c      	ldr	r2, [pc, #112]	; (800fb14 <_strtod_l+0x88c>)
 800faa4:	4640      	mov	r0, r8
 800faa6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800faaa:	4649      	mov	r1, r9
 800faac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fab0:	f7f0 fd58 	bl	8000564 <__aeabi_dmul>
 800fab4:	460b      	mov	r3, r1
 800fab6:	4303      	orrs	r3, r0
 800fab8:	bf08      	it	eq
 800faba:	2322      	moveq	r3, #34	; 0x22
 800fabc:	4680      	mov	r8, r0
 800fabe:	4689      	mov	r9, r1
 800fac0:	bf08      	it	eq
 800fac2:	f8ca 3000 	streq.w	r3, [sl]
 800fac6:	e62d      	b.n	800f724 <_strtod_l+0x49c>
 800fac8:	f04f 32ff 	mov.w	r2, #4294967295
 800facc:	fa02 f303 	lsl.w	r3, r2, r3
 800fad0:	ea03 0808 	and.w	r8, r3, r8
 800fad4:	e6db      	b.n	800f88e <_strtod_l+0x606>
 800fad6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800fada:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800fade:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800fae2:	35e2      	adds	r5, #226	; 0xe2
 800fae4:	fa07 f505 	lsl.w	r5, r7, r5
 800fae8:	970f      	str	r7, [sp, #60]	; 0x3c
 800faea:	e742      	b.n	800f972 <_strtod_l+0x6ea>
 800faec:	2301      	movs	r3, #1
 800faee:	2500      	movs	r5, #0
 800faf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800faf2:	e73e      	b.n	800f972 <_strtod_l+0x6ea>
 800faf4:	463a      	mov	r2, r7
 800faf6:	4650      	mov	r0, sl
 800faf8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fafa:	f001 feb1 	bl	8011860 <__lshift>
 800fafe:	901c      	str	r0, [sp, #112]	; 0x70
 800fb00:	2800      	cmp	r0, #0
 800fb02:	f47f af64 	bne.w	800f9ce <_strtod_l+0x746>
 800fb06:	e602      	b.n	800f70e <_strtod_l+0x486>
 800fb08:	08012d30 	.word	0x08012d30
 800fb0c:	fffffc02 	.word	0xfffffc02
 800fb10:	7ff00000 	.word	0x7ff00000
 800fb14:	39500000 	.word	0x39500000
 800fb18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fb1c:	d166      	bne.n	800fbec <_strtod_l+0x964>
 800fb1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb24:	b35a      	cbz	r2, 800fb7e <_strtod_l+0x8f6>
 800fb26:	4a9c      	ldr	r2, [pc, #624]	; (800fd98 <_strtod_l+0xb10>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d12c      	bne.n	800fb86 <_strtod_l+0x8fe>
 800fb2c:	9b05      	ldr	r3, [sp, #20]
 800fb2e:	4640      	mov	r0, r8
 800fb30:	b303      	cbz	r3, 800fb74 <_strtod_l+0x8ec>
 800fb32:	464b      	mov	r3, r9
 800fb34:	4a99      	ldr	r2, [pc, #612]	; (800fd9c <_strtod_l+0xb14>)
 800fb36:	f04f 31ff 	mov.w	r1, #4294967295
 800fb3a:	401a      	ands	r2, r3
 800fb3c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800fb40:	d81b      	bhi.n	800fb7a <_strtod_l+0x8f2>
 800fb42:	0d12      	lsrs	r2, r2, #20
 800fb44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fb48:	fa01 f303 	lsl.w	r3, r1, r3
 800fb4c:	4298      	cmp	r0, r3
 800fb4e:	d11a      	bne.n	800fb86 <_strtod_l+0x8fe>
 800fb50:	4b93      	ldr	r3, [pc, #588]	; (800fda0 <_strtod_l+0xb18>)
 800fb52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d102      	bne.n	800fb5e <_strtod_l+0x8d6>
 800fb58:	3001      	adds	r0, #1
 800fb5a:	f43f add8 	beq.w	800f70e <_strtod_l+0x486>
 800fb5e:	f04f 0800 	mov.w	r8, #0
 800fb62:	4b8e      	ldr	r3, [pc, #568]	; (800fd9c <_strtod_l+0xb14>)
 800fb64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb66:	401a      	ands	r2, r3
 800fb68:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800fb6c:	9b05      	ldr	r3, [sp, #20]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d196      	bne.n	800faa0 <_strtod_l+0x818>
 800fb72:	e5d7      	b.n	800f724 <_strtod_l+0x49c>
 800fb74:	f04f 33ff 	mov.w	r3, #4294967295
 800fb78:	e7e8      	b.n	800fb4c <_strtod_l+0x8c4>
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	e7e6      	b.n	800fb4c <_strtod_l+0x8c4>
 800fb7e:	ea53 0308 	orrs.w	r3, r3, r8
 800fb82:	f43f af7d 	beq.w	800fa80 <_strtod_l+0x7f8>
 800fb86:	b1e5      	cbz	r5, 800fbc2 <_strtod_l+0x93a>
 800fb88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb8a:	421d      	tst	r5, r3
 800fb8c:	d0ee      	beq.n	800fb6c <_strtod_l+0x8e4>
 800fb8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb90:	4640      	mov	r0, r8
 800fb92:	4649      	mov	r1, r9
 800fb94:	9a05      	ldr	r2, [sp, #20]
 800fb96:	b1c3      	cbz	r3, 800fbca <_strtod_l+0x942>
 800fb98:	f7ff fb54 	bl	800f244 <sulp>
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	460b      	mov	r3, r1
 800fba0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fba4:	f7f0 fb28 	bl	80001f8 <__adddf3>
 800fba8:	4680      	mov	r8, r0
 800fbaa:	4689      	mov	r9, r1
 800fbac:	e7de      	b.n	800fb6c <_strtod_l+0x8e4>
 800fbae:	4013      	ands	r3, r2
 800fbb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fbb4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800fbb8:	f04f 38ff 	mov.w	r8, #4294967295
 800fbbc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800fbc0:	e7d4      	b.n	800fb6c <_strtod_l+0x8e4>
 800fbc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbc4:	ea13 0f08 	tst.w	r3, r8
 800fbc8:	e7e0      	b.n	800fb8c <_strtod_l+0x904>
 800fbca:	f7ff fb3b 	bl	800f244 <sulp>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fbd6:	f7f0 fb0d 	bl	80001f4 <__aeabi_dsub>
 800fbda:	2200      	movs	r2, #0
 800fbdc:	2300      	movs	r3, #0
 800fbde:	4680      	mov	r8, r0
 800fbe0:	4689      	mov	r9, r1
 800fbe2:	f7f0 ff27 	bl	8000a34 <__aeabi_dcmpeq>
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	d0c0      	beq.n	800fb6c <_strtod_l+0x8e4>
 800fbea:	e602      	b.n	800f7f2 <_strtod_l+0x56a>
 800fbec:	4658      	mov	r0, fp
 800fbee:	9904      	ldr	r1, [sp, #16]
 800fbf0:	f002 f824 	bl	8011c3c <__ratio>
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fbfa:	4606      	mov	r6, r0
 800fbfc:	460f      	mov	r7, r1
 800fbfe:	f7f0 ff2d 	bl	8000a5c <__aeabi_dcmple>
 800fc02:	2800      	cmp	r0, #0
 800fc04:	d075      	beq.n	800fcf2 <_strtod_l+0xa6a>
 800fc06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d047      	beq.n	800fc9c <_strtod_l+0xa14>
 800fc0c:	2600      	movs	r6, #0
 800fc0e:	4f65      	ldr	r7, [pc, #404]	; (800fda4 <_strtod_l+0xb1c>)
 800fc10:	4d64      	ldr	r5, [pc, #400]	; (800fda4 <_strtod_l+0xb1c>)
 800fc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fc18:	0d1b      	lsrs	r3, r3, #20
 800fc1a:	051b      	lsls	r3, r3, #20
 800fc1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fc20:	4b61      	ldr	r3, [pc, #388]	; (800fda8 <_strtod_l+0xb20>)
 800fc22:	429a      	cmp	r2, r3
 800fc24:	f040 80c8 	bne.w	800fdb8 <_strtod_l+0xb30>
 800fc28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fc2c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800fc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc32:	4640      	mov	r0, r8
 800fc34:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800fc38:	4649      	mov	r1, r9
 800fc3a:	f001 ff29 	bl	8011a90 <__ulp>
 800fc3e:	4602      	mov	r2, r0
 800fc40:	460b      	mov	r3, r1
 800fc42:	4630      	mov	r0, r6
 800fc44:	4639      	mov	r1, r7
 800fc46:	f7f0 fc8d 	bl	8000564 <__aeabi_dmul>
 800fc4a:	4642      	mov	r2, r8
 800fc4c:	464b      	mov	r3, r9
 800fc4e:	f7f0 fad3 	bl	80001f8 <__adddf3>
 800fc52:	460b      	mov	r3, r1
 800fc54:	4951      	ldr	r1, [pc, #324]	; (800fd9c <_strtod_l+0xb14>)
 800fc56:	4a55      	ldr	r2, [pc, #340]	; (800fdac <_strtod_l+0xb24>)
 800fc58:	4019      	ands	r1, r3
 800fc5a:	4291      	cmp	r1, r2
 800fc5c:	4680      	mov	r8, r0
 800fc5e:	d95e      	bls.n	800fd1e <_strtod_l+0xa96>
 800fc60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc62:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d103      	bne.n	800fc72 <_strtod_l+0x9ea>
 800fc6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	f43f ad4e 	beq.w	800f70e <_strtod_l+0x486>
 800fc72:	f04f 38ff 	mov.w	r8, #4294967295
 800fc76:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800fda0 <_strtod_l+0xb18>
 800fc7a:	4650      	mov	r0, sl
 800fc7c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fc7e:	f001 fbd7 	bl	8011430 <_Bfree>
 800fc82:	4650      	mov	r0, sl
 800fc84:	9906      	ldr	r1, [sp, #24]
 800fc86:	f001 fbd3 	bl	8011430 <_Bfree>
 800fc8a:	4650      	mov	r0, sl
 800fc8c:	9904      	ldr	r1, [sp, #16]
 800fc8e:	f001 fbcf 	bl	8011430 <_Bfree>
 800fc92:	4659      	mov	r1, fp
 800fc94:	4650      	mov	r0, sl
 800fc96:	f001 fbcb 	bl	8011430 <_Bfree>
 800fc9a:	e61c      	b.n	800f8d6 <_strtod_l+0x64e>
 800fc9c:	f1b8 0f00 	cmp.w	r8, #0
 800fca0:	d119      	bne.n	800fcd6 <_strtod_l+0xa4e>
 800fca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fca8:	b9e3      	cbnz	r3, 800fce4 <_strtod_l+0xa5c>
 800fcaa:	2200      	movs	r2, #0
 800fcac:	4630      	mov	r0, r6
 800fcae:	4639      	mov	r1, r7
 800fcb0:	4b3c      	ldr	r3, [pc, #240]	; (800fda4 <_strtod_l+0xb1c>)
 800fcb2:	f7f0 fec9 	bl	8000a48 <__aeabi_dcmplt>
 800fcb6:	b9c8      	cbnz	r0, 800fcec <_strtod_l+0xa64>
 800fcb8:	2200      	movs	r2, #0
 800fcba:	4630      	mov	r0, r6
 800fcbc:	4639      	mov	r1, r7
 800fcbe:	4b3c      	ldr	r3, [pc, #240]	; (800fdb0 <_strtod_l+0xb28>)
 800fcc0:	f7f0 fc50 	bl	8000564 <__aeabi_dmul>
 800fcc4:	4604      	mov	r4, r0
 800fcc6:	460d      	mov	r5, r1
 800fcc8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800fccc:	9418      	str	r4, [sp, #96]	; 0x60
 800fcce:	9319      	str	r3, [sp, #100]	; 0x64
 800fcd0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800fcd4:	e79d      	b.n	800fc12 <_strtod_l+0x98a>
 800fcd6:	f1b8 0f01 	cmp.w	r8, #1
 800fcda:	d103      	bne.n	800fce4 <_strtod_l+0xa5c>
 800fcdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	f43f ad87 	beq.w	800f7f2 <_strtod_l+0x56a>
 800fce4:	2600      	movs	r6, #0
 800fce6:	2400      	movs	r4, #0
 800fce8:	4f32      	ldr	r7, [pc, #200]	; (800fdb4 <_strtod_l+0xb2c>)
 800fcea:	e791      	b.n	800fc10 <_strtod_l+0x988>
 800fcec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800fcee:	4d30      	ldr	r5, [pc, #192]	; (800fdb0 <_strtod_l+0xb28>)
 800fcf0:	e7ea      	b.n	800fcc8 <_strtod_l+0xa40>
 800fcf2:	4b2f      	ldr	r3, [pc, #188]	; (800fdb0 <_strtod_l+0xb28>)
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	f7f0 fc33 	bl	8000564 <__aeabi_dmul>
 800fcfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd00:	4604      	mov	r4, r0
 800fd02:	460d      	mov	r5, r1
 800fd04:	b933      	cbnz	r3, 800fd14 <_strtod_l+0xa8c>
 800fd06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd0a:	9010      	str	r0, [sp, #64]	; 0x40
 800fd0c:	9311      	str	r3, [sp, #68]	; 0x44
 800fd0e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800fd12:	e77e      	b.n	800fc12 <_strtod_l+0x98a>
 800fd14:	4602      	mov	r2, r0
 800fd16:	460b      	mov	r3, r1
 800fd18:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800fd1c:	e7f7      	b.n	800fd0e <_strtod_l+0xa86>
 800fd1e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800fd22:	9b05      	ldr	r3, [sp, #20]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d1a8      	bne.n	800fc7a <_strtod_l+0x9f2>
 800fd28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fd2e:	0d1b      	lsrs	r3, r3, #20
 800fd30:	051b      	lsls	r3, r3, #20
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d1a1      	bne.n	800fc7a <_strtod_l+0x9f2>
 800fd36:	4620      	mov	r0, r4
 800fd38:	4629      	mov	r1, r5
 800fd3a:	f7f1 f9f1 	bl	8001120 <__aeabi_d2lz>
 800fd3e:	f7f0 fbe3 	bl	8000508 <__aeabi_l2d>
 800fd42:	4602      	mov	r2, r0
 800fd44:	460b      	mov	r3, r1
 800fd46:	4620      	mov	r0, r4
 800fd48:	4629      	mov	r1, r5
 800fd4a:	f7f0 fa53 	bl	80001f4 <__aeabi_dsub>
 800fd4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd54:	ea43 0308 	orr.w	r3, r3, r8
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	4604      	mov	r4, r0
 800fd5c:	460d      	mov	r5, r1
 800fd5e:	d066      	beq.n	800fe2e <_strtod_l+0xba6>
 800fd60:	a309      	add	r3, pc, #36	; (adr r3, 800fd88 <_strtod_l+0xb00>)
 800fd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd66:	f7f0 fe6f 	bl	8000a48 <__aeabi_dcmplt>
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	f47f acda 	bne.w	800f724 <_strtod_l+0x49c>
 800fd70:	a307      	add	r3, pc, #28	; (adr r3, 800fd90 <_strtod_l+0xb08>)
 800fd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd76:	4620      	mov	r0, r4
 800fd78:	4629      	mov	r1, r5
 800fd7a:	f7f0 fe83 	bl	8000a84 <__aeabi_dcmpgt>
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	f43f af7b 	beq.w	800fc7a <_strtod_l+0x9f2>
 800fd84:	e4ce      	b.n	800f724 <_strtod_l+0x49c>
 800fd86:	bf00      	nop
 800fd88:	94a03595 	.word	0x94a03595
 800fd8c:	3fdfffff 	.word	0x3fdfffff
 800fd90:	35afe535 	.word	0x35afe535
 800fd94:	3fe00000 	.word	0x3fe00000
 800fd98:	000fffff 	.word	0x000fffff
 800fd9c:	7ff00000 	.word	0x7ff00000
 800fda0:	7fefffff 	.word	0x7fefffff
 800fda4:	3ff00000 	.word	0x3ff00000
 800fda8:	7fe00000 	.word	0x7fe00000
 800fdac:	7c9fffff 	.word	0x7c9fffff
 800fdb0:	3fe00000 	.word	0x3fe00000
 800fdb4:	bff00000 	.word	0xbff00000
 800fdb8:	9b05      	ldr	r3, [sp, #20]
 800fdba:	b313      	cbz	r3, 800fe02 <_strtod_l+0xb7a>
 800fdbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fdbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fdc2:	d81e      	bhi.n	800fe02 <_strtod_l+0xb7a>
 800fdc4:	a326      	add	r3, pc, #152	; (adr r3, 800fe60 <_strtod_l+0xbd8>)
 800fdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdca:	4620      	mov	r0, r4
 800fdcc:	4629      	mov	r1, r5
 800fdce:	f7f0 fe45 	bl	8000a5c <__aeabi_dcmple>
 800fdd2:	b190      	cbz	r0, 800fdfa <_strtod_l+0xb72>
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	f7f0 fe9c 	bl	8000b14 <__aeabi_d2uiz>
 800fddc:	2801      	cmp	r0, #1
 800fdde:	bf38      	it	cc
 800fde0:	2001      	movcc	r0, #1
 800fde2:	f7f0 fb45 	bl	8000470 <__aeabi_ui2d>
 800fde6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fde8:	4604      	mov	r4, r0
 800fdea:	460d      	mov	r5, r1
 800fdec:	b9d3      	cbnz	r3, 800fe24 <_strtod_l+0xb9c>
 800fdee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fdf2:	9012      	str	r0, [sp, #72]	; 0x48
 800fdf4:	9313      	str	r3, [sp, #76]	; 0x4c
 800fdf6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800fdfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fdfc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800fe00:	1a9f      	subs	r7, r3, r2
 800fe02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fe06:	f001 fe43 	bl	8011a90 <__ulp>
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	4630      	mov	r0, r6
 800fe10:	4639      	mov	r1, r7
 800fe12:	f7f0 fba7 	bl	8000564 <__aeabi_dmul>
 800fe16:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fe1a:	f7f0 f9ed 	bl	80001f8 <__adddf3>
 800fe1e:	4680      	mov	r8, r0
 800fe20:	4689      	mov	r9, r1
 800fe22:	e77e      	b.n	800fd22 <_strtod_l+0xa9a>
 800fe24:	4602      	mov	r2, r0
 800fe26:	460b      	mov	r3, r1
 800fe28:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800fe2c:	e7e3      	b.n	800fdf6 <_strtod_l+0xb6e>
 800fe2e:	a30e      	add	r3, pc, #56	; (adr r3, 800fe68 <_strtod_l+0xbe0>)
 800fe30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe34:	f7f0 fe08 	bl	8000a48 <__aeabi_dcmplt>
 800fe38:	e7a1      	b.n	800fd7e <_strtod_l+0xaf6>
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	930c      	str	r3, [sp, #48]	; 0x30
 800fe3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fe40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fe42:	6013      	str	r3, [r2, #0]
 800fe44:	f7ff ba65 	b.w	800f312 <_strtod_l+0x8a>
 800fe48:	2b65      	cmp	r3, #101	; 0x65
 800fe4a:	f43f ab5c 	beq.w	800f506 <_strtod_l+0x27e>
 800fe4e:	2b45      	cmp	r3, #69	; 0x45
 800fe50:	f43f ab59 	beq.w	800f506 <_strtod_l+0x27e>
 800fe54:	2201      	movs	r2, #1
 800fe56:	f7ff bb8d 	b.w	800f574 <_strtod_l+0x2ec>
 800fe5a:	bf00      	nop
 800fe5c:	f3af 8000 	nop.w
 800fe60:	ffc00000 	.word	0xffc00000
 800fe64:	41dfffff 	.word	0x41dfffff
 800fe68:	94a03595 	.word	0x94a03595
 800fe6c:	3fcfffff 	.word	0x3fcfffff

0800fe70 <_strtod_r>:
 800fe70:	4b01      	ldr	r3, [pc, #4]	; (800fe78 <_strtod_r+0x8>)
 800fe72:	f7ff ba09 	b.w	800f288 <_strtod_l>
 800fe76:	bf00      	nop
 800fe78:	200000c8 	.word	0x200000c8

0800fe7c <_strtol_l.isra.0>:
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe82:	4686      	mov	lr, r0
 800fe84:	d001      	beq.n	800fe8a <_strtol_l.isra.0+0xe>
 800fe86:	2b24      	cmp	r3, #36	; 0x24
 800fe88:	d906      	bls.n	800fe98 <_strtol_l.isra.0+0x1c>
 800fe8a:	f7fe fa3f 	bl	800e30c <__errno>
 800fe8e:	2316      	movs	r3, #22
 800fe90:	6003      	str	r3, [r0, #0]
 800fe92:	2000      	movs	r0, #0
 800fe94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe98:	468c      	mov	ip, r1
 800fe9a:	4e3a      	ldr	r6, [pc, #232]	; (800ff84 <_strtol_l.isra.0+0x108>)
 800fe9c:	4660      	mov	r0, ip
 800fe9e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800fea2:	5da5      	ldrb	r5, [r4, r6]
 800fea4:	f015 0508 	ands.w	r5, r5, #8
 800fea8:	d1f8      	bne.n	800fe9c <_strtol_l.isra.0+0x20>
 800feaa:	2c2d      	cmp	r4, #45	; 0x2d
 800feac:	d133      	bne.n	800ff16 <_strtol_l.isra.0+0x9a>
 800feae:	f04f 0801 	mov.w	r8, #1
 800feb2:	f89c 4000 	ldrb.w	r4, [ip]
 800feb6:	f100 0c02 	add.w	ip, r0, #2
 800feba:	2b00      	cmp	r3, #0
 800febc:	d05d      	beq.n	800ff7a <_strtol_l.isra.0+0xfe>
 800febe:	2b10      	cmp	r3, #16
 800fec0:	d10c      	bne.n	800fedc <_strtol_l.isra.0+0x60>
 800fec2:	2c30      	cmp	r4, #48	; 0x30
 800fec4:	d10a      	bne.n	800fedc <_strtol_l.isra.0+0x60>
 800fec6:	f89c 0000 	ldrb.w	r0, [ip]
 800feca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fece:	2858      	cmp	r0, #88	; 0x58
 800fed0:	d14e      	bne.n	800ff70 <_strtol_l.isra.0+0xf4>
 800fed2:	2310      	movs	r3, #16
 800fed4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800fed8:	f10c 0c02 	add.w	ip, ip, #2
 800fedc:	2500      	movs	r5, #0
 800fede:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800fee2:	3f01      	subs	r7, #1
 800fee4:	fbb7 f9f3 	udiv	r9, r7, r3
 800fee8:	4628      	mov	r0, r5
 800feea:	fb03 7a19 	mls	sl, r3, r9, r7
 800feee:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800fef2:	2e09      	cmp	r6, #9
 800fef4:	d818      	bhi.n	800ff28 <_strtol_l.isra.0+0xac>
 800fef6:	4634      	mov	r4, r6
 800fef8:	42a3      	cmp	r3, r4
 800fefa:	dd24      	ble.n	800ff46 <_strtol_l.isra.0+0xca>
 800fefc:	2d00      	cmp	r5, #0
 800fefe:	db1f      	blt.n	800ff40 <_strtol_l.isra.0+0xc4>
 800ff00:	4581      	cmp	r9, r0
 800ff02:	d31d      	bcc.n	800ff40 <_strtol_l.isra.0+0xc4>
 800ff04:	d101      	bne.n	800ff0a <_strtol_l.isra.0+0x8e>
 800ff06:	45a2      	cmp	sl, r4
 800ff08:	db1a      	blt.n	800ff40 <_strtol_l.isra.0+0xc4>
 800ff0a:	2501      	movs	r5, #1
 800ff0c:	fb00 4003 	mla	r0, r0, r3, r4
 800ff10:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ff14:	e7eb      	b.n	800feee <_strtol_l.isra.0+0x72>
 800ff16:	2c2b      	cmp	r4, #43	; 0x2b
 800ff18:	bf08      	it	eq
 800ff1a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ff1e:	46a8      	mov	r8, r5
 800ff20:	bf08      	it	eq
 800ff22:	f100 0c02 	addeq.w	ip, r0, #2
 800ff26:	e7c8      	b.n	800feba <_strtol_l.isra.0+0x3e>
 800ff28:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ff2c:	2e19      	cmp	r6, #25
 800ff2e:	d801      	bhi.n	800ff34 <_strtol_l.isra.0+0xb8>
 800ff30:	3c37      	subs	r4, #55	; 0x37
 800ff32:	e7e1      	b.n	800fef8 <_strtol_l.isra.0+0x7c>
 800ff34:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ff38:	2e19      	cmp	r6, #25
 800ff3a:	d804      	bhi.n	800ff46 <_strtol_l.isra.0+0xca>
 800ff3c:	3c57      	subs	r4, #87	; 0x57
 800ff3e:	e7db      	b.n	800fef8 <_strtol_l.isra.0+0x7c>
 800ff40:	f04f 35ff 	mov.w	r5, #4294967295
 800ff44:	e7e4      	b.n	800ff10 <_strtol_l.isra.0+0x94>
 800ff46:	2d00      	cmp	r5, #0
 800ff48:	da08      	bge.n	800ff5c <_strtol_l.isra.0+0xe0>
 800ff4a:	2322      	movs	r3, #34	; 0x22
 800ff4c:	4638      	mov	r0, r7
 800ff4e:	f8ce 3000 	str.w	r3, [lr]
 800ff52:	2a00      	cmp	r2, #0
 800ff54:	d09e      	beq.n	800fe94 <_strtol_l.isra.0+0x18>
 800ff56:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ff5a:	e007      	b.n	800ff6c <_strtol_l.isra.0+0xf0>
 800ff5c:	f1b8 0f00 	cmp.w	r8, #0
 800ff60:	d000      	beq.n	800ff64 <_strtol_l.isra.0+0xe8>
 800ff62:	4240      	negs	r0, r0
 800ff64:	2a00      	cmp	r2, #0
 800ff66:	d095      	beq.n	800fe94 <_strtol_l.isra.0+0x18>
 800ff68:	2d00      	cmp	r5, #0
 800ff6a:	d1f4      	bne.n	800ff56 <_strtol_l.isra.0+0xda>
 800ff6c:	6011      	str	r1, [r2, #0]
 800ff6e:	e791      	b.n	800fe94 <_strtol_l.isra.0+0x18>
 800ff70:	2430      	movs	r4, #48	; 0x30
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d1b2      	bne.n	800fedc <_strtol_l.isra.0+0x60>
 800ff76:	2308      	movs	r3, #8
 800ff78:	e7b0      	b.n	800fedc <_strtol_l.isra.0+0x60>
 800ff7a:	2c30      	cmp	r4, #48	; 0x30
 800ff7c:	d0a3      	beq.n	800fec6 <_strtol_l.isra.0+0x4a>
 800ff7e:	230a      	movs	r3, #10
 800ff80:	e7ac      	b.n	800fedc <_strtol_l.isra.0+0x60>
 800ff82:	bf00      	nop
 800ff84:	08012d59 	.word	0x08012d59

0800ff88 <_strtol_r>:
 800ff88:	f7ff bf78 	b.w	800fe7c <_strtol_l.isra.0>

0800ff8c <quorem>:
 800ff8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff90:	6903      	ldr	r3, [r0, #16]
 800ff92:	690c      	ldr	r4, [r1, #16]
 800ff94:	4607      	mov	r7, r0
 800ff96:	42a3      	cmp	r3, r4
 800ff98:	f2c0 8083 	blt.w	80100a2 <quorem+0x116>
 800ff9c:	3c01      	subs	r4, #1
 800ff9e:	f100 0514 	add.w	r5, r0, #20
 800ffa2:	f101 0814 	add.w	r8, r1, #20
 800ffa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ffaa:	9301      	str	r3, [sp, #4]
 800ffac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ffb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800ffbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ffc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ffc4:	d332      	bcc.n	801002c <quorem+0xa0>
 800ffc6:	f04f 0e00 	mov.w	lr, #0
 800ffca:	4640      	mov	r0, r8
 800ffcc:	46ac      	mov	ip, r5
 800ffce:	46f2      	mov	sl, lr
 800ffd0:	f850 2b04 	ldr.w	r2, [r0], #4
 800ffd4:	b293      	uxth	r3, r2
 800ffd6:	fb06 e303 	mla	r3, r6, r3, lr
 800ffda:	0c12      	lsrs	r2, r2, #16
 800ffdc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ffe0:	fb06 e202 	mla	r2, r6, r2, lr
 800ffe4:	b29b      	uxth	r3, r3
 800ffe6:	ebaa 0303 	sub.w	r3, sl, r3
 800ffea:	f8dc a000 	ldr.w	sl, [ip]
 800ffee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fff2:	fa1f fa8a 	uxth.w	sl, sl
 800fff6:	4453      	add	r3, sl
 800fff8:	fa1f fa82 	uxth.w	sl, r2
 800fffc:	f8dc 2000 	ldr.w	r2, [ip]
 8010000:	4581      	cmp	r9, r0
 8010002:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010006:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801000a:	b29b      	uxth	r3, r3
 801000c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010010:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010014:	f84c 3b04 	str.w	r3, [ip], #4
 8010018:	d2da      	bcs.n	800ffd0 <quorem+0x44>
 801001a:	f855 300b 	ldr.w	r3, [r5, fp]
 801001e:	b92b      	cbnz	r3, 801002c <quorem+0xa0>
 8010020:	9b01      	ldr	r3, [sp, #4]
 8010022:	3b04      	subs	r3, #4
 8010024:	429d      	cmp	r5, r3
 8010026:	461a      	mov	r2, r3
 8010028:	d32f      	bcc.n	801008a <quorem+0xfe>
 801002a:	613c      	str	r4, [r7, #16]
 801002c:	4638      	mov	r0, r7
 801002e:	f001 fc83 	bl	8011938 <__mcmp>
 8010032:	2800      	cmp	r0, #0
 8010034:	db25      	blt.n	8010082 <quorem+0xf6>
 8010036:	4628      	mov	r0, r5
 8010038:	f04f 0c00 	mov.w	ip, #0
 801003c:	3601      	adds	r6, #1
 801003e:	f858 1b04 	ldr.w	r1, [r8], #4
 8010042:	f8d0 e000 	ldr.w	lr, [r0]
 8010046:	b28b      	uxth	r3, r1
 8010048:	ebac 0303 	sub.w	r3, ip, r3
 801004c:	fa1f f28e 	uxth.w	r2, lr
 8010050:	4413      	add	r3, r2
 8010052:	0c0a      	lsrs	r2, r1, #16
 8010054:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010058:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801005c:	b29b      	uxth	r3, r3
 801005e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010062:	45c1      	cmp	r9, r8
 8010064:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010068:	f840 3b04 	str.w	r3, [r0], #4
 801006c:	d2e7      	bcs.n	801003e <quorem+0xb2>
 801006e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010076:	b922      	cbnz	r2, 8010082 <quorem+0xf6>
 8010078:	3b04      	subs	r3, #4
 801007a:	429d      	cmp	r5, r3
 801007c:	461a      	mov	r2, r3
 801007e:	d30a      	bcc.n	8010096 <quorem+0x10a>
 8010080:	613c      	str	r4, [r7, #16]
 8010082:	4630      	mov	r0, r6
 8010084:	b003      	add	sp, #12
 8010086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801008a:	6812      	ldr	r2, [r2, #0]
 801008c:	3b04      	subs	r3, #4
 801008e:	2a00      	cmp	r2, #0
 8010090:	d1cb      	bne.n	801002a <quorem+0x9e>
 8010092:	3c01      	subs	r4, #1
 8010094:	e7c6      	b.n	8010024 <quorem+0x98>
 8010096:	6812      	ldr	r2, [r2, #0]
 8010098:	3b04      	subs	r3, #4
 801009a:	2a00      	cmp	r2, #0
 801009c:	d1f0      	bne.n	8010080 <quorem+0xf4>
 801009e:	3c01      	subs	r4, #1
 80100a0:	e7eb      	b.n	801007a <quorem+0xee>
 80100a2:	2000      	movs	r0, #0
 80100a4:	e7ee      	b.n	8010084 <quorem+0xf8>
	...

080100a8 <_dtoa_r>:
 80100a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ac:	4616      	mov	r6, r2
 80100ae:	461f      	mov	r7, r3
 80100b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80100b2:	b099      	sub	sp, #100	; 0x64
 80100b4:	4605      	mov	r5, r0
 80100b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80100ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80100be:	b974      	cbnz	r4, 80100de <_dtoa_r+0x36>
 80100c0:	2010      	movs	r0, #16
 80100c2:	f7fe f94d 	bl	800e360 <malloc>
 80100c6:	4602      	mov	r2, r0
 80100c8:	6268      	str	r0, [r5, #36]	; 0x24
 80100ca:	b920      	cbnz	r0, 80100d6 <_dtoa_r+0x2e>
 80100cc:	21ea      	movs	r1, #234	; 0xea
 80100ce:	4bae      	ldr	r3, [pc, #696]	; (8010388 <_dtoa_r+0x2e0>)
 80100d0:	48ae      	ldr	r0, [pc, #696]	; (801038c <_dtoa_r+0x2e4>)
 80100d2:	f001 ffb5 	bl	8012040 <__assert_func>
 80100d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100da:	6004      	str	r4, [r0, #0]
 80100dc:	60c4      	str	r4, [r0, #12]
 80100de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80100e0:	6819      	ldr	r1, [r3, #0]
 80100e2:	b151      	cbz	r1, 80100fa <_dtoa_r+0x52>
 80100e4:	685a      	ldr	r2, [r3, #4]
 80100e6:	2301      	movs	r3, #1
 80100e8:	4093      	lsls	r3, r2
 80100ea:	604a      	str	r2, [r1, #4]
 80100ec:	608b      	str	r3, [r1, #8]
 80100ee:	4628      	mov	r0, r5
 80100f0:	f001 f99e 	bl	8011430 <_Bfree>
 80100f4:	2200      	movs	r2, #0
 80100f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80100f8:	601a      	str	r2, [r3, #0]
 80100fa:	1e3b      	subs	r3, r7, #0
 80100fc:	bfaf      	iteee	ge
 80100fe:	2300      	movge	r3, #0
 8010100:	2201      	movlt	r2, #1
 8010102:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010106:	9305      	strlt	r3, [sp, #20]
 8010108:	bfa8      	it	ge
 801010a:	f8c8 3000 	strge.w	r3, [r8]
 801010e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010112:	4b9f      	ldr	r3, [pc, #636]	; (8010390 <_dtoa_r+0x2e8>)
 8010114:	bfb8      	it	lt
 8010116:	f8c8 2000 	strlt.w	r2, [r8]
 801011a:	ea33 0309 	bics.w	r3, r3, r9
 801011e:	d119      	bne.n	8010154 <_dtoa_r+0xac>
 8010120:	f242 730f 	movw	r3, #9999	; 0x270f
 8010124:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010126:	6013      	str	r3, [r2, #0]
 8010128:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801012c:	4333      	orrs	r3, r6
 801012e:	f000 8580 	beq.w	8010c32 <_dtoa_r+0xb8a>
 8010132:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010134:	b953      	cbnz	r3, 801014c <_dtoa_r+0xa4>
 8010136:	4b97      	ldr	r3, [pc, #604]	; (8010394 <_dtoa_r+0x2ec>)
 8010138:	e022      	b.n	8010180 <_dtoa_r+0xd8>
 801013a:	4b97      	ldr	r3, [pc, #604]	; (8010398 <_dtoa_r+0x2f0>)
 801013c:	9308      	str	r3, [sp, #32]
 801013e:	3308      	adds	r3, #8
 8010140:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010142:	6013      	str	r3, [r2, #0]
 8010144:	9808      	ldr	r0, [sp, #32]
 8010146:	b019      	add	sp, #100	; 0x64
 8010148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801014c:	4b91      	ldr	r3, [pc, #580]	; (8010394 <_dtoa_r+0x2ec>)
 801014e:	9308      	str	r3, [sp, #32]
 8010150:	3303      	adds	r3, #3
 8010152:	e7f5      	b.n	8010140 <_dtoa_r+0x98>
 8010154:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010158:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801015c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010160:	2200      	movs	r2, #0
 8010162:	2300      	movs	r3, #0
 8010164:	f7f0 fc66 	bl	8000a34 <__aeabi_dcmpeq>
 8010168:	4680      	mov	r8, r0
 801016a:	b158      	cbz	r0, 8010184 <_dtoa_r+0xdc>
 801016c:	2301      	movs	r3, #1
 801016e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010170:	6013      	str	r3, [r2, #0]
 8010172:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010174:	2b00      	cmp	r3, #0
 8010176:	f000 8559 	beq.w	8010c2c <_dtoa_r+0xb84>
 801017a:	4888      	ldr	r0, [pc, #544]	; (801039c <_dtoa_r+0x2f4>)
 801017c:	6018      	str	r0, [r3, #0]
 801017e:	1e43      	subs	r3, r0, #1
 8010180:	9308      	str	r3, [sp, #32]
 8010182:	e7df      	b.n	8010144 <_dtoa_r+0x9c>
 8010184:	ab16      	add	r3, sp, #88	; 0x58
 8010186:	9301      	str	r3, [sp, #4]
 8010188:	ab17      	add	r3, sp, #92	; 0x5c
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	4628      	mov	r0, r5
 801018e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010192:	f001 fcf7 	bl	8011b84 <__d2b>
 8010196:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801019a:	4682      	mov	sl, r0
 801019c:	2c00      	cmp	r4, #0
 801019e:	d07e      	beq.n	801029e <_dtoa_r+0x1f6>
 80101a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80101a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80101aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80101b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80101b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80101ba:	2200      	movs	r2, #0
 80101bc:	4b78      	ldr	r3, [pc, #480]	; (80103a0 <_dtoa_r+0x2f8>)
 80101be:	f7f0 f819 	bl	80001f4 <__aeabi_dsub>
 80101c2:	a36b      	add	r3, pc, #428	; (adr r3, 8010370 <_dtoa_r+0x2c8>)
 80101c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c8:	f7f0 f9cc 	bl	8000564 <__aeabi_dmul>
 80101cc:	a36a      	add	r3, pc, #424	; (adr r3, 8010378 <_dtoa_r+0x2d0>)
 80101ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d2:	f7f0 f811 	bl	80001f8 <__adddf3>
 80101d6:	4606      	mov	r6, r0
 80101d8:	4620      	mov	r0, r4
 80101da:	460f      	mov	r7, r1
 80101dc:	f7f0 f958 	bl	8000490 <__aeabi_i2d>
 80101e0:	a367      	add	r3, pc, #412	; (adr r3, 8010380 <_dtoa_r+0x2d8>)
 80101e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e6:	f7f0 f9bd 	bl	8000564 <__aeabi_dmul>
 80101ea:	4602      	mov	r2, r0
 80101ec:	460b      	mov	r3, r1
 80101ee:	4630      	mov	r0, r6
 80101f0:	4639      	mov	r1, r7
 80101f2:	f7f0 f801 	bl	80001f8 <__adddf3>
 80101f6:	4606      	mov	r6, r0
 80101f8:	460f      	mov	r7, r1
 80101fa:	f7f0 fc63 	bl	8000ac4 <__aeabi_d2iz>
 80101fe:	2200      	movs	r2, #0
 8010200:	4681      	mov	r9, r0
 8010202:	2300      	movs	r3, #0
 8010204:	4630      	mov	r0, r6
 8010206:	4639      	mov	r1, r7
 8010208:	f7f0 fc1e 	bl	8000a48 <__aeabi_dcmplt>
 801020c:	b148      	cbz	r0, 8010222 <_dtoa_r+0x17a>
 801020e:	4648      	mov	r0, r9
 8010210:	f7f0 f93e 	bl	8000490 <__aeabi_i2d>
 8010214:	4632      	mov	r2, r6
 8010216:	463b      	mov	r3, r7
 8010218:	f7f0 fc0c 	bl	8000a34 <__aeabi_dcmpeq>
 801021c:	b908      	cbnz	r0, 8010222 <_dtoa_r+0x17a>
 801021e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010222:	f1b9 0f16 	cmp.w	r9, #22
 8010226:	d857      	bhi.n	80102d8 <_dtoa_r+0x230>
 8010228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801022c:	4b5d      	ldr	r3, [pc, #372]	; (80103a4 <_dtoa_r+0x2fc>)
 801022e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010236:	f7f0 fc07 	bl	8000a48 <__aeabi_dcmplt>
 801023a:	2800      	cmp	r0, #0
 801023c:	d04e      	beq.n	80102dc <_dtoa_r+0x234>
 801023e:	2300      	movs	r3, #0
 8010240:	f109 39ff 	add.w	r9, r9, #4294967295
 8010244:	930f      	str	r3, [sp, #60]	; 0x3c
 8010246:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010248:	1b1c      	subs	r4, r3, r4
 801024a:	1e63      	subs	r3, r4, #1
 801024c:	9309      	str	r3, [sp, #36]	; 0x24
 801024e:	bf49      	itett	mi
 8010250:	f1c4 0301 	rsbmi	r3, r4, #1
 8010254:	2300      	movpl	r3, #0
 8010256:	9306      	strmi	r3, [sp, #24]
 8010258:	2300      	movmi	r3, #0
 801025a:	bf54      	ite	pl
 801025c:	9306      	strpl	r3, [sp, #24]
 801025e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8010260:	f1b9 0f00 	cmp.w	r9, #0
 8010264:	db3c      	blt.n	80102e0 <_dtoa_r+0x238>
 8010266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010268:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801026c:	444b      	add	r3, r9
 801026e:	9309      	str	r3, [sp, #36]	; 0x24
 8010270:	2300      	movs	r3, #0
 8010272:	930a      	str	r3, [sp, #40]	; 0x28
 8010274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010276:	2b09      	cmp	r3, #9
 8010278:	d86c      	bhi.n	8010354 <_dtoa_r+0x2ac>
 801027a:	2b05      	cmp	r3, #5
 801027c:	bfc4      	itt	gt
 801027e:	3b04      	subgt	r3, #4
 8010280:	9322      	strgt	r3, [sp, #136]	; 0x88
 8010282:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010284:	bfc8      	it	gt
 8010286:	2400      	movgt	r4, #0
 8010288:	f1a3 0302 	sub.w	r3, r3, #2
 801028c:	bfd8      	it	le
 801028e:	2401      	movle	r4, #1
 8010290:	2b03      	cmp	r3, #3
 8010292:	f200 808b 	bhi.w	80103ac <_dtoa_r+0x304>
 8010296:	e8df f003 	tbb	[pc, r3]
 801029a:	4f2d      	.short	0x4f2d
 801029c:	5b4d      	.short	0x5b4d
 801029e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80102a2:	441c      	add	r4, r3
 80102a4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80102a8:	2b20      	cmp	r3, #32
 80102aa:	bfc3      	ittte	gt
 80102ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80102b0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80102b4:	fa09 f303 	lslgt.w	r3, r9, r3
 80102b8:	f1c3 0320 	rsble	r3, r3, #32
 80102bc:	bfc6      	itte	gt
 80102be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80102c2:	4318      	orrgt	r0, r3
 80102c4:	fa06 f003 	lslle.w	r0, r6, r3
 80102c8:	f7f0 f8d2 	bl	8000470 <__aeabi_ui2d>
 80102cc:	2301      	movs	r3, #1
 80102ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80102d2:	3c01      	subs	r4, #1
 80102d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80102d6:	e770      	b.n	80101ba <_dtoa_r+0x112>
 80102d8:	2301      	movs	r3, #1
 80102da:	e7b3      	b.n	8010244 <_dtoa_r+0x19c>
 80102dc:	900f      	str	r0, [sp, #60]	; 0x3c
 80102de:	e7b2      	b.n	8010246 <_dtoa_r+0x19e>
 80102e0:	9b06      	ldr	r3, [sp, #24]
 80102e2:	eba3 0309 	sub.w	r3, r3, r9
 80102e6:	9306      	str	r3, [sp, #24]
 80102e8:	f1c9 0300 	rsb	r3, r9, #0
 80102ec:	930a      	str	r3, [sp, #40]	; 0x28
 80102ee:	2300      	movs	r3, #0
 80102f0:	930e      	str	r3, [sp, #56]	; 0x38
 80102f2:	e7bf      	b.n	8010274 <_dtoa_r+0x1cc>
 80102f4:	2300      	movs	r3, #0
 80102f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80102f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	dc59      	bgt.n	80103b2 <_dtoa_r+0x30a>
 80102fe:	f04f 0b01 	mov.w	fp, #1
 8010302:	465b      	mov	r3, fp
 8010304:	f8cd b008 	str.w	fp, [sp, #8]
 8010308:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801030c:	2200      	movs	r2, #0
 801030e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8010310:	6042      	str	r2, [r0, #4]
 8010312:	2204      	movs	r2, #4
 8010314:	f102 0614 	add.w	r6, r2, #20
 8010318:	429e      	cmp	r6, r3
 801031a:	6841      	ldr	r1, [r0, #4]
 801031c:	d94f      	bls.n	80103be <_dtoa_r+0x316>
 801031e:	4628      	mov	r0, r5
 8010320:	f001 f846 	bl	80113b0 <_Balloc>
 8010324:	9008      	str	r0, [sp, #32]
 8010326:	2800      	cmp	r0, #0
 8010328:	d14d      	bne.n	80103c6 <_dtoa_r+0x31e>
 801032a:	4602      	mov	r2, r0
 801032c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010330:	4b1d      	ldr	r3, [pc, #116]	; (80103a8 <_dtoa_r+0x300>)
 8010332:	e6cd      	b.n	80100d0 <_dtoa_r+0x28>
 8010334:	2301      	movs	r3, #1
 8010336:	e7de      	b.n	80102f6 <_dtoa_r+0x24e>
 8010338:	2300      	movs	r3, #0
 801033a:	930b      	str	r3, [sp, #44]	; 0x2c
 801033c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801033e:	eb09 0b03 	add.w	fp, r9, r3
 8010342:	f10b 0301 	add.w	r3, fp, #1
 8010346:	2b01      	cmp	r3, #1
 8010348:	9302      	str	r3, [sp, #8]
 801034a:	bfb8      	it	lt
 801034c:	2301      	movlt	r3, #1
 801034e:	e7dd      	b.n	801030c <_dtoa_r+0x264>
 8010350:	2301      	movs	r3, #1
 8010352:	e7f2      	b.n	801033a <_dtoa_r+0x292>
 8010354:	2401      	movs	r4, #1
 8010356:	2300      	movs	r3, #0
 8010358:	940b      	str	r4, [sp, #44]	; 0x2c
 801035a:	9322      	str	r3, [sp, #136]	; 0x88
 801035c:	f04f 3bff 	mov.w	fp, #4294967295
 8010360:	2200      	movs	r2, #0
 8010362:	2312      	movs	r3, #18
 8010364:	f8cd b008 	str.w	fp, [sp, #8]
 8010368:	9223      	str	r2, [sp, #140]	; 0x8c
 801036a:	e7cf      	b.n	801030c <_dtoa_r+0x264>
 801036c:	f3af 8000 	nop.w
 8010370:	636f4361 	.word	0x636f4361
 8010374:	3fd287a7 	.word	0x3fd287a7
 8010378:	8b60c8b3 	.word	0x8b60c8b3
 801037c:	3fc68a28 	.word	0x3fc68a28
 8010380:	509f79fb 	.word	0x509f79fb
 8010384:	3fd34413 	.word	0x3fd34413
 8010388:	08012e66 	.word	0x08012e66
 801038c:	08012e7d 	.word	0x08012e7d
 8010390:	7ff00000 	.word	0x7ff00000
 8010394:	08012e62 	.word	0x08012e62
 8010398:	08012e59 	.word	0x08012e59
 801039c:	08012cd9 	.word	0x08012cd9
 80103a0:	3ff80000 	.word	0x3ff80000
 80103a4:	08012ff8 	.word	0x08012ff8
 80103a8:	08012edc 	.word	0x08012edc
 80103ac:	2301      	movs	r3, #1
 80103ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80103b0:	e7d4      	b.n	801035c <_dtoa_r+0x2b4>
 80103b2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80103b6:	465b      	mov	r3, fp
 80103b8:	f8cd b008 	str.w	fp, [sp, #8]
 80103bc:	e7a6      	b.n	801030c <_dtoa_r+0x264>
 80103be:	3101      	adds	r1, #1
 80103c0:	6041      	str	r1, [r0, #4]
 80103c2:	0052      	lsls	r2, r2, #1
 80103c4:	e7a6      	b.n	8010314 <_dtoa_r+0x26c>
 80103c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80103c8:	9a08      	ldr	r2, [sp, #32]
 80103ca:	601a      	str	r2, [r3, #0]
 80103cc:	9b02      	ldr	r3, [sp, #8]
 80103ce:	2b0e      	cmp	r3, #14
 80103d0:	f200 80a8 	bhi.w	8010524 <_dtoa_r+0x47c>
 80103d4:	2c00      	cmp	r4, #0
 80103d6:	f000 80a5 	beq.w	8010524 <_dtoa_r+0x47c>
 80103da:	f1b9 0f00 	cmp.w	r9, #0
 80103de:	dd34      	ble.n	801044a <_dtoa_r+0x3a2>
 80103e0:	4a9a      	ldr	r2, [pc, #616]	; (801064c <_dtoa_r+0x5a4>)
 80103e2:	f009 030f 	and.w	r3, r9, #15
 80103e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80103ea:	f419 7f80 	tst.w	r9, #256	; 0x100
 80103ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80103f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80103f6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80103fa:	d016      	beq.n	801042a <_dtoa_r+0x382>
 80103fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010400:	4b93      	ldr	r3, [pc, #588]	; (8010650 <_dtoa_r+0x5a8>)
 8010402:	2703      	movs	r7, #3
 8010404:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010408:	f7f0 f9d6 	bl	80007b8 <__aeabi_ddiv>
 801040c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010410:	f004 040f 	and.w	r4, r4, #15
 8010414:	4e8e      	ldr	r6, [pc, #568]	; (8010650 <_dtoa_r+0x5a8>)
 8010416:	b954      	cbnz	r4, 801042e <_dtoa_r+0x386>
 8010418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801041c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010420:	f7f0 f9ca 	bl	80007b8 <__aeabi_ddiv>
 8010424:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010428:	e029      	b.n	801047e <_dtoa_r+0x3d6>
 801042a:	2702      	movs	r7, #2
 801042c:	e7f2      	b.n	8010414 <_dtoa_r+0x36c>
 801042e:	07e1      	lsls	r1, r4, #31
 8010430:	d508      	bpl.n	8010444 <_dtoa_r+0x39c>
 8010432:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010436:	e9d6 2300 	ldrd	r2, r3, [r6]
 801043a:	f7f0 f893 	bl	8000564 <__aeabi_dmul>
 801043e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010442:	3701      	adds	r7, #1
 8010444:	1064      	asrs	r4, r4, #1
 8010446:	3608      	adds	r6, #8
 8010448:	e7e5      	b.n	8010416 <_dtoa_r+0x36e>
 801044a:	f000 80a5 	beq.w	8010598 <_dtoa_r+0x4f0>
 801044e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010452:	f1c9 0400 	rsb	r4, r9, #0
 8010456:	4b7d      	ldr	r3, [pc, #500]	; (801064c <_dtoa_r+0x5a4>)
 8010458:	f004 020f 	and.w	r2, r4, #15
 801045c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010464:	f7f0 f87e 	bl	8000564 <__aeabi_dmul>
 8010468:	2702      	movs	r7, #2
 801046a:	2300      	movs	r3, #0
 801046c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010470:	4e77      	ldr	r6, [pc, #476]	; (8010650 <_dtoa_r+0x5a8>)
 8010472:	1124      	asrs	r4, r4, #4
 8010474:	2c00      	cmp	r4, #0
 8010476:	f040 8084 	bne.w	8010582 <_dtoa_r+0x4da>
 801047a:	2b00      	cmp	r3, #0
 801047c:	d1d2      	bne.n	8010424 <_dtoa_r+0x37c>
 801047e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010480:	2b00      	cmp	r3, #0
 8010482:	f000 808b 	beq.w	801059c <_dtoa_r+0x4f4>
 8010486:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801048a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801048e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010492:	2200      	movs	r2, #0
 8010494:	4b6f      	ldr	r3, [pc, #444]	; (8010654 <_dtoa_r+0x5ac>)
 8010496:	f7f0 fad7 	bl	8000a48 <__aeabi_dcmplt>
 801049a:	2800      	cmp	r0, #0
 801049c:	d07e      	beq.n	801059c <_dtoa_r+0x4f4>
 801049e:	9b02      	ldr	r3, [sp, #8]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d07b      	beq.n	801059c <_dtoa_r+0x4f4>
 80104a4:	f1bb 0f00 	cmp.w	fp, #0
 80104a8:	dd38      	ble.n	801051c <_dtoa_r+0x474>
 80104aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80104ae:	2200      	movs	r2, #0
 80104b0:	4b69      	ldr	r3, [pc, #420]	; (8010658 <_dtoa_r+0x5b0>)
 80104b2:	f7f0 f857 	bl	8000564 <__aeabi_dmul>
 80104b6:	465c      	mov	r4, fp
 80104b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104bc:	f109 38ff 	add.w	r8, r9, #4294967295
 80104c0:	3701      	adds	r7, #1
 80104c2:	4638      	mov	r0, r7
 80104c4:	f7ef ffe4 	bl	8000490 <__aeabi_i2d>
 80104c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104cc:	f7f0 f84a 	bl	8000564 <__aeabi_dmul>
 80104d0:	2200      	movs	r2, #0
 80104d2:	4b62      	ldr	r3, [pc, #392]	; (801065c <_dtoa_r+0x5b4>)
 80104d4:	f7ef fe90 	bl	80001f8 <__adddf3>
 80104d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80104dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80104e0:	9611      	str	r6, [sp, #68]	; 0x44
 80104e2:	2c00      	cmp	r4, #0
 80104e4:	d15d      	bne.n	80105a2 <_dtoa_r+0x4fa>
 80104e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104ea:	2200      	movs	r2, #0
 80104ec:	4b5c      	ldr	r3, [pc, #368]	; (8010660 <_dtoa_r+0x5b8>)
 80104ee:	f7ef fe81 	bl	80001f4 <__aeabi_dsub>
 80104f2:	4602      	mov	r2, r0
 80104f4:	460b      	mov	r3, r1
 80104f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80104fa:	4633      	mov	r3, r6
 80104fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80104fe:	f7f0 fac1 	bl	8000a84 <__aeabi_dcmpgt>
 8010502:	2800      	cmp	r0, #0
 8010504:	f040 829e 	bne.w	8010a44 <_dtoa_r+0x99c>
 8010508:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801050c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801050e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010512:	f7f0 fa99 	bl	8000a48 <__aeabi_dcmplt>
 8010516:	2800      	cmp	r0, #0
 8010518:	f040 8292 	bne.w	8010a40 <_dtoa_r+0x998>
 801051c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8010520:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010524:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010526:	2b00      	cmp	r3, #0
 8010528:	f2c0 8153 	blt.w	80107d2 <_dtoa_r+0x72a>
 801052c:	f1b9 0f0e 	cmp.w	r9, #14
 8010530:	f300 814f 	bgt.w	80107d2 <_dtoa_r+0x72a>
 8010534:	4b45      	ldr	r3, [pc, #276]	; (801064c <_dtoa_r+0x5a4>)
 8010536:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801053a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801053e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8010542:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010544:	2b00      	cmp	r3, #0
 8010546:	f280 80db 	bge.w	8010700 <_dtoa_r+0x658>
 801054a:	9b02      	ldr	r3, [sp, #8]
 801054c:	2b00      	cmp	r3, #0
 801054e:	f300 80d7 	bgt.w	8010700 <_dtoa_r+0x658>
 8010552:	f040 8274 	bne.w	8010a3e <_dtoa_r+0x996>
 8010556:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801055a:	2200      	movs	r2, #0
 801055c:	4b40      	ldr	r3, [pc, #256]	; (8010660 <_dtoa_r+0x5b8>)
 801055e:	f7f0 f801 	bl	8000564 <__aeabi_dmul>
 8010562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010566:	f7f0 fa83 	bl	8000a70 <__aeabi_dcmpge>
 801056a:	9c02      	ldr	r4, [sp, #8]
 801056c:	4626      	mov	r6, r4
 801056e:	2800      	cmp	r0, #0
 8010570:	f040 824a 	bne.w	8010a08 <_dtoa_r+0x960>
 8010574:	2331      	movs	r3, #49	; 0x31
 8010576:	9f08      	ldr	r7, [sp, #32]
 8010578:	f109 0901 	add.w	r9, r9, #1
 801057c:	f807 3b01 	strb.w	r3, [r7], #1
 8010580:	e246      	b.n	8010a10 <_dtoa_r+0x968>
 8010582:	07e2      	lsls	r2, r4, #31
 8010584:	d505      	bpl.n	8010592 <_dtoa_r+0x4ea>
 8010586:	e9d6 2300 	ldrd	r2, r3, [r6]
 801058a:	f7ef ffeb 	bl	8000564 <__aeabi_dmul>
 801058e:	2301      	movs	r3, #1
 8010590:	3701      	adds	r7, #1
 8010592:	1064      	asrs	r4, r4, #1
 8010594:	3608      	adds	r6, #8
 8010596:	e76d      	b.n	8010474 <_dtoa_r+0x3cc>
 8010598:	2702      	movs	r7, #2
 801059a:	e770      	b.n	801047e <_dtoa_r+0x3d6>
 801059c:	46c8      	mov	r8, r9
 801059e:	9c02      	ldr	r4, [sp, #8]
 80105a0:	e78f      	b.n	80104c2 <_dtoa_r+0x41a>
 80105a2:	9908      	ldr	r1, [sp, #32]
 80105a4:	4b29      	ldr	r3, [pc, #164]	; (801064c <_dtoa_r+0x5a4>)
 80105a6:	4421      	add	r1, r4
 80105a8:	9112      	str	r1, [sp, #72]	; 0x48
 80105aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80105ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80105b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80105b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80105b8:	2900      	cmp	r1, #0
 80105ba:	d055      	beq.n	8010668 <_dtoa_r+0x5c0>
 80105bc:	2000      	movs	r0, #0
 80105be:	4929      	ldr	r1, [pc, #164]	; (8010664 <_dtoa_r+0x5bc>)
 80105c0:	f7f0 f8fa 	bl	80007b8 <__aeabi_ddiv>
 80105c4:	463b      	mov	r3, r7
 80105c6:	4632      	mov	r2, r6
 80105c8:	f7ef fe14 	bl	80001f4 <__aeabi_dsub>
 80105cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80105d0:	9f08      	ldr	r7, [sp, #32]
 80105d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105d6:	f7f0 fa75 	bl	8000ac4 <__aeabi_d2iz>
 80105da:	4604      	mov	r4, r0
 80105dc:	f7ef ff58 	bl	8000490 <__aeabi_i2d>
 80105e0:	4602      	mov	r2, r0
 80105e2:	460b      	mov	r3, r1
 80105e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105e8:	f7ef fe04 	bl	80001f4 <__aeabi_dsub>
 80105ec:	4602      	mov	r2, r0
 80105ee:	460b      	mov	r3, r1
 80105f0:	3430      	adds	r4, #48	; 0x30
 80105f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80105f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80105fa:	f807 4b01 	strb.w	r4, [r7], #1
 80105fe:	f7f0 fa23 	bl	8000a48 <__aeabi_dcmplt>
 8010602:	2800      	cmp	r0, #0
 8010604:	d174      	bne.n	80106f0 <_dtoa_r+0x648>
 8010606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801060a:	2000      	movs	r0, #0
 801060c:	4911      	ldr	r1, [pc, #68]	; (8010654 <_dtoa_r+0x5ac>)
 801060e:	f7ef fdf1 	bl	80001f4 <__aeabi_dsub>
 8010612:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010616:	f7f0 fa17 	bl	8000a48 <__aeabi_dcmplt>
 801061a:	2800      	cmp	r0, #0
 801061c:	f040 80b6 	bne.w	801078c <_dtoa_r+0x6e4>
 8010620:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010622:	429f      	cmp	r7, r3
 8010624:	f43f af7a 	beq.w	801051c <_dtoa_r+0x474>
 8010628:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801062c:	2200      	movs	r2, #0
 801062e:	4b0a      	ldr	r3, [pc, #40]	; (8010658 <_dtoa_r+0x5b0>)
 8010630:	f7ef ff98 	bl	8000564 <__aeabi_dmul>
 8010634:	2200      	movs	r2, #0
 8010636:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801063a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801063e:	4b06      	ldr	r3, [pc, #24]	; (8010658 <_dtoa_r+0x5b0>)
 8010640:	f7ef ff90 	bl	8000564 <__aeabi_dmul>
 8010644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010648:	e7c3      	b.n	80105d2 <_dtoa_r+0x52a>
 801064a:	bf00      	nop
 801064c:	08012ff8 	.word	0x08012ff8
 8010650:	08012fd0 	.word	0x08012fd0
 8010654:	3ff00000 	.word	0x3ff00000
 8010658:	40240000 	.word	0x40240000
 801065c:	401c0000 	.word	0x401c0000
 8010660:	40140000 	.word	0x40140000
 8010664:	3fe00000 	.word	0x3fe00000
 8010668:	4630      	mov	r0, r6
 801066a:	4639      	mov	r1, r7
 801066c:	f7ef ff7a 	bl	8000564 <__aeabi_dmul>
 8010670:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010672:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010676:	9c08      	ldr	r4, [sp, #32]
 8010678:	9314      	str	r3, [sp, #80]	; 0x50
 801067a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801067e:	f7f0 fa21 	bl	8000ac4 <__aeabi_d2iz>
 8010682:	9015      	str	r0, [sp, #84]	; 0x54
 8010684:	f7ef ff04 	bl	8000490 <__aeabi_i2d>
 8010688:	4602      	mov	r2, r0
 801068a:	460b      	mov	r3, r1
 801068c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010690:	f7ef fdb0 	bl	80001f4 <__aeabi_dsub>
 8010694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010696:	4606      	mov	r6, r0
 8010698:	3330      	adds	r3, #48	; 0x30
 801069a:	f804 3b01 	strb.w	r3, [r4], #1
 801069e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80106a0:	460f      	mov	r7, r1
 80106a2:	429c      	cmp	r4, r3
 80106a4:	f04f 0200 	mov.w	r2, #0
 80106a8:	d124      	bne.n	80106f4 <_dtoa_r+0x64c>
 80106aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80106ae:	4bb3      	ldr	r3, [pc, #716]	; (801097c <_dtoa_r+0x8d4>)
 80106b0:	f7ef fda2 	bl	80001f8 <__adddf3>
 80106b4:	4602      	mov	r2, r0
 80106b6:	460b      	mov	r3, r1
 80106b8:	4630      	mov	r0, r6
 80106ba:	4639      	mov	r1, r7
 80106bc:	f7f0 f9e2 	bl	8000a84 <__aeabi_dcmpgt>
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d162      	bne.n	801078a <_dtoa_r+0x6e2>
 80106c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80106c8:	2000      	movs	r0, #0
 80106ca:	49ac      	ldr	r1, [pc, #688]	; (801097c <_dtoa_r+0x8d4>)
 80106cc:	f7ef fd92 	bl	80001f4 <__aeabi_dsub>
 80106d0:	4602      	mov	r2, r0
 80106d2:	460b      	mov	r3, r1
 80106d4:	4630      	mov	r0, r6
 80106d6:	4639      	mov	r1, r7
 80106d8:	f7f0 f9b6 	bl	8000a48 <__aeabi_dcmplt>
 80106dc:	2800      	cmp	r0, #0
 80106de:	f43f af1d 	beq.w	801051c <_dtoa_r+0x474>
 80106e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80106e4:	1e7b      	subs	r3, r7, #1
 80106e6:	9314      	str	r3, [sp, #80]	; 0x50
 80106e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80106ec:	2b30      	cmp	r3, #48	; 0x30
 80106ee:	d0f8      	beq.n	80106e2 <_dtoa_r+0x63a>
 80106f0:	46c1      	mov	r9, r8
 80106f2:	e03a      	b.n	801076a <_dtoa_r+0x6c2>
 80106f4:	4ba2      	ldr	r3, [pc, #648]	; (8010980 <_dtoa_r+0x8d8>)
 80106f6:	f7ef ff35 	bl	8000564 <__aeabi_dmul>
 80106fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80106fe:	e7bc      	b.n	801067a <_dtoa_r+0x5d2>
 8010700:	9f08      	ldr	r7, [sp, #32]
 8010702:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801070a:	f7f0 f855 	bl	80007b8 <__aeabi_ddiv>
 801070e:	f7f0 f9d9 	bl	8000ac4 <__aeabi_d2iz>
 8010712:	4604      	mov	r4, r0
 8010714:	f7ef febc 	bl	8000490 <__aeabi_i2d>
 8010718:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801071c:	f7ef ff22 	bl	8000564 <__aeabi_dmul>
 8010720:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8010724:	460b      	mov	r3, r1
 8010726:	4602      	mov	r2, r0
 8010728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801072c:	f7ef fd62 	bl	80001f4 <__aeabi_dsub>
 8010730:	f807 6b01 	strb.w	r6, [r7], #1
 8010734:	9e08      	ldr	r6, [sp, #32]
 8010736:	9b02      	ldr	r3, [sp, #8]
 8010738:	1bbe      	subs	r6, r7, r6
 801073a:	42b3      	cmp	r3, r6
 801073c:	d13a      	bne.n	80107b4 <_dtoa_r+0x70c>
 801073e:	4602      	mov	r2, r0
 8010740:	460b      	mov	r3, r1
 8010742:	f7ef fd59 	bl	80001f8 <__adddf3>
 8010746:	4602      	mov	r2, r0
 8010748:	460b      	mov	r3, r1
 801074a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801074e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010752:	f7f0 f997 	bl	8000a84 <__aeabi_dcmpgt>
 8010756:	bb58      	cbnz	r0, 80107b0 <_dtoa_r+0x708>
 8010758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801075c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010760:	f7f0 f968 	bl	8000a34 <__aeabi_dcmpeq>
 8010764:	b108      	cbz	r0, 801076a <_dtoa_r+0x6c2>
 8010766:	07e1      	lsls	r1, r4, #31
 8010768:	d422      	bmi.n	80107b0 <_dtoa_r+0x708>
 801076a:	4628      	mov	r0, r5
 801076c:	4651      	mov	r1, sl
 801076e:	f000 fe5f 	bl	8011430 <_Bfree>
 8010772:	2300      	movs	r3, #0
 8010774:	703b      	strb	r3, [r7, #0]
 8010776:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010778:	f109 0001 	add.w	r0, r9, #1
 801077c:	6018      	str	r0, [r3, #0]
 801077e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010780:	2b00      	cmp	r3, #0
 8010782:	f43f acdf 	beq.w	8010144 <_dtoa_r+0x9c>
 8010786:	601f      	str	r7, [r3, #0]
 8010788:	e4dc      	b.n	8010144 <_dtoa_r+0x9c>
 801078a:	4627      	mov	r7, r4
 801078c:	463b      	mov	r3, r7
 801078e:	461f      	mov	r7, r3
 8010790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010794:	2a39      	cmp	r2, #57	; 0x39
 8010796:	d107      	bne.n	80107a8 <_dtoa_r+0x700>
 8010798:	9a08      	ldr	r2, [sp, #32]
 801079a:	429a      	cmp	r2, r3
 801079c:	d1f7      	bne.n	801078e <_dtoa_r+0x6e6>
 801079e:	2230      	movs	r2, #48	; 0x30
 80107a0:	9908      	ldr	r1, [sp, #32]
 80107a2:	f108 0801 	add.w	r8, r8, #1
 80107a6:	700a      	strb	r2, [r1, #0]
 80107a8:	781a      	ldrb	r2, [r3, #0]
 80107aa:	3201      	adds	r2, #1
 80107ac:	701a      	strb	r2, [r3, #0]
 80107ae:	e79f      	b.n	80106f0 <_dtoa_r+0x648>
 80107b0:	46c8      	mov	r8, r9
 80107b2:	e7eb      	b.n	801078c <_dtoa_r+0x6e4>
 80107b4:	2200      	movs	r2, #0
 80107b6:	4b72      	ldr	r3, [pc, #456]	; (8010980 <_dtoa_r+0x8d8>)
 80107b8:	f7ef fed4 	bl	8000564 <__aeabi_dmul>
 80107bc:	4602      	mov	r2, r0
 80107be:	460b      	mov	r3, r1
 80107c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80107c4:	2200      	movs	r2, #0
 80107c6:	2300      	movs	r3, #0
 80107c8:	f7f0 f934 	bl	8000a34 <__aeabi_dcmpeq>
 80107cc:	2800      	cmp	r0, #0
 80107ce:	d098      	beq.n	8010702 <_dtoa_r+0x65a>
 80107d0:	e7cb      	b.n	801076a <_dtoa_r+0x6c2>
 80107d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80107d4:	2a00      	cmp	r2, #0
 80107d6:	f000 80cd 	beq.w	8010974 <_dtoa_r+0x8cc>
 80107da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80107dc:	2a01      	cmp	r2, #1
 80107de:	f300 80af 	bgt.w	8010940 <_dtoa_r+0x898>
 80107e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80107e4:	2a00      	cmp	r2, #0
 80107e6:	f000 80a7 	beq.w	8010938 <_dtoa_r+0x890>
 80107ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80107ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80107f0:	9f06      	ldr	r7, [sp, #24]
 80107f2:	9a06      	ldr	r2, [sp, #24]
 80107f4:	2101      	movs	r1, #1
 80107f6:	441a      	add	r2, r3
 80107f8:	9206      	str	r2, [sp, #24]
 80107fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107fc:	4628      	mov	r0, r5
 80107fe:	441a      	add	r2, r3
 8010800:	9209      	str	r2, [sp, #36]	; 0x24
 8010802:	f000 ff19 	bl	8011638 <__i2b>
 8010806:	4606      	mov	r6, r0
 8010808:	2f00      	cmp	r7, #0
 801080a:	dd0c      	ble.n	8010826 <_dtoa_r+0x77e>
 801080c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801080e:	2b00      	cmp	r3, #0
 8010810:	dd09      	ble.n	8010826 <_dtoa_r+0x77e>
 8010812:	42bb      	cmp	r3, r7
 8010814:	bfa8      	it	ge
 8010816:	463b      	movge	r3, r7
 8010818:	9a06      	ldr	r2, [sp, #24]
 801081a:	1aff      	subs	r7, r7, r3
 801081c:	1ad2      	subs	r2, r2, r3
 801081e:	9206      	str	r2, [sp, #24]
 8010820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010822:	1ad3      	subs	r3, r2, r3
 8010824:	9309      	str	r3, [sp, #36]	; 0x24
 8010826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010828:	b1f3      	cbz	r3, 8010868 <_dtoa_r+0x7c0>
 801082a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801082c:	2b00      	cmp	r3, #0
 801082e:	f000 80a9 	beq.w	8010984 <_dtoa_r+0x8dc>
 8010832:	2c00      	cmp	r4, #0
 8010834:	dd10      	ble.n	8010858 <_dtoa_r+0x7b0>
 8010836:	4631      	mov	r1, r6
 8010838:	4622      	mov	r2, r4
 801083a:	4628      	mov	r0, r5
 801083c:	f000 ffb6 	bl	80117ac <__pow5mult>
 8010840:	4652      	mov	r2, sl
 8010842:	4601      	mov	r1, r0
 8010844:	4606      	mov	r6, r0
 8010846:	4628      	mov	r0, r5
 8010848:	f000 ff0c 	bl	8011664 <__multiply>
 801084c:	4680      	mov	r8, r0
 801084e:	4651      	mov	r1, sl
 8010850:	4628      	mov	r0, r5
 8010852:	f000 fded 	bl	8011430 <_Bfree>
 8010856:	46c2      	mov	sl, r8
 8010858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801085a:	1b1a      	subs	r2, r3, r4
 801085c:	d004      	beq.n	8010868 <_dtoa_r+0x7c0>
 801085e:	4651      	mov	r1, sl
 8010860:	4628      	mov	r0, r5
 8010862:	f000 ffa3 	bl	80117ac <__pow5mult>
 8010866:	4682      	mov	sl, r0
 8010868:	2101      	movs	r1, #1
 801086a:	4628      	mov	r0, r5
 801086c:	f000 fee4 	bl	8011638 <__i2b>
 8010870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010872:	4604      	mov	r4, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	f340 8087 	ble.w	8010988 <_dtoa_r+0x8e0>
 801087a:	461a      	mov	r2, r3
 801087c:	4601      	mov	r1, r0
 801087e:	4628      	mov	r0, r5
 8010880:	f000 ff94 	bl	80117ac <__pow5mult>
 8010884:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010886:	4604      	mov	r4, r0
 8010888:	2b01      	cmp	r3, #1
 801088a:	f340 8080 	ble.w	801098e <_dtoa_r+0x8e6>
 801088e:	f04f 0800 	mov.w	r8, #0
 8010892:	6923      	ldr	r3, [r4, #16]
 8010894:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010898:	6918      	ldr	r0, [r3, #16]
 801089a:	f000 fe7f 	bl	801159c <__hi0bits>
 801089e:	f1c0 0020 	rsb	r0, r0, #32
 80108a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108a4:	4418      	add	r0, r3
 80108a6:	f010 001f 	ands.w	r0, r0, #31
 80108aa:	f000 8092 	beq.w	80109d2 <_dtoa_r+0x92a>
 80108ae:	f1c0 0320 	rsb	r3, r0, #32
 80108b2:	2b04      	cmp	r3, #4
 80108b4:	f340 808a 	ble.w	80109cc <_dtoa_r+0x924>
 80108b8:	f1c0 001c 	rsb	r0, r0, #28
 80108bc:	9b06      	ldr	r3, [sp, #24]
 80108be:	4407      	add	r7, r0
 80108c0:	4403      	add	r3, r0
 80108c2:	9306      	str	r3, [sp, #24]
 80108c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108c6:	4403      	add	r3, r0
 80108c8:	9309      	str	r3, [sp, #36]	; 0x24
 80108ca:	9b06      	ldr	r3, [sp, #24]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	dd05      	ble.n	80108dc <_dtoa_r+0x834>
 80108d0:	4651      	mov	r1, sl
 80108d2:	461a      	mov	r2, r3
 80108d4:	4628      	mov	r0, r5
 80108d6:	f000 ffc3 	bl	8011860 <__lshift>
 80108da:	4682      	mov	sl, r0
 80108dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108de:	2b00      	cmp	r3, #0
 80108e0:	dd05      	ble.n	80108ee <_dtoa_r+0x846>
 80108e2:	4621      	mov	r1, r4
 80108e4:	461a      	mov	r2, r3
 80108e6:	4628      	mov	r0, r5
 80108e8:	f000 ffba 	bl	8011860 <__lshift>
 80108ec:	4604      	mov	r4, r0
 80108ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d070      	beq.n	80109d6 <_dtoa_r+0x92e>
 80108f4:	4621      	mov	r1, r4
 80108f6:	4650      	mov	r0, sl
 80108f8:	f001 f81e 	bl	8011938 <__mcmp>
 80108fc:	2800      	cmp	r0, #0
 80108fe:	da6a      	bge.n	80109d6 <_dtoa_r+0x92e>
 8010900:	2300      	movs	r3, #0
 8010902:	4651      	mov	r1, sl
 8010904:	220a      	movs	r2, #10
 8010906:	4628      	mov	r0, r5
 8010908:	f000 fdb4 	bl	8011474 <__multadd>
 801090c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801090e:	4682      	mov	sl, r0
 8010910:	f109 39ff 	add.w	r9, r9, #4294967295
 8010914:	2b00      	cmp	r3, #0
 8010916:	f000 8193 	beq.w	8010c40 <_dtoa_r+0xb98>
 801091a:	4631      	mov	r1, r6
 801091c:	2300      	movs	r3, #0
 801091e:	220a      	movs	r2, #10
 8010920:	4628      	mov	r0, r5
 8010922:	f000 fda7 	bl	8011474 <__multadd>
 8010926:	f1bb 0f00 	cmp.w	fp, #0
 801092a:	4606      	mov	r6, r0
 801092c:	f300 8093 	bgt.w	8010a56 <_dtoa_r+0x9ae>
 8010930:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010932:	2b02      	cmp	r3, #2
 8010934:	dc57      	bgt.n	80109e6 <_dtoa_r+0x93e>
 8010936:	e08e      	b.n	8010a56 <_dtoa_r+0x9ae>
 8010938:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801093a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801093e:	e756      	b.n	80107ee <_dtoa_r+0x746>
 8010940:	9b02      	ldr	r3, [sp, #8]
 8010942:	1e5c      	subs	r4, r3, #1
 8010944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010946:	42a3      	cmp	r3, r4
 8010948:	bfb7      	itett	lt
 801094a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801094c:	1b1c      	subge	r4, r3, r4
 801094e:	1ae2      	sublt	r2, r4, r3
 8010950:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010952:	bfbe      	ittt	lt
 8010954:	940a      	strlt	r4, [sp, #40]	; 0x28
 8010956:	189b      	addlt	r3, r3, r2
 8010958:	930e      	strlt	r3, [sp, #56]	; 0x38
 801095a:	9b02      	ldr	r3, [sp, #8]
 801095c:	bfb8      	it	lt
 801095e:	2400      	movlt	r4, #0
 8010960:	2b00      	cmp	r3, #0
 8010962:	bfbb      	ittet	lt
 8010964:	9b06      	ldrlt	r3, [sp, #24]
 8010966:	9a02      	ldrlt	r2, [sp, #8]
 8010968:	9f06      	ldrge	r7, [sp, #24]
 801096a:	1a9f      	sublt	r7, r3, r2
 801096c:	bfac      	ite	ge
 801096e:	9b02      	ldrge	r3, [sp, #8]
 8010970:	2300      	movlt	r3, #0
 8010972:	e73e      	b.n	80107f2 <_dtoa_r+0x74a>
 8010974:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010976:	9f06      	ldr	r7, [sp, #24]
 8010978:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801097a:	e745      	b.n	8010808 <_dtoa_r+0x760>
 801097c:	3fe00000 	.word	0x3fe00000
 8010980:	40240000 	.word	0x40240000
 8010984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010986:	e76a      	b.n	801085e <_dtoa_r+0x7b6>
 8010988:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801098a:	2b01      	cmp	r3, #1
 801098c:	dc19      	bgt.n	80109c2 <_dtoa_r+0x91a>
 801098e:	9b04      	ldr	r3, [sp, #16]
 8010990:	b9bb      	cbnz	r3, 80109c2 <_dtoa_r+0x91a>
 8010992:	9b05      	ldr	r3, [sp, #20]
 8010994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010998:	b99b      	cbnz	r3, 80109c2 <_dtoa_r+0x91a>
 801099a:	9b05      	ldr	r3, [sp, #20]
 801099c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80109a0:	0d1b      	lsrs	r3, r3, #20
 80109a2:	051b      	lsls	r3, r3, #20
 80109a4:	b183      	cbz	r3, 80109c8 <_dtoa_r+0x920>
 80109a6:	f04f 0801 	mov.w	r8, #1
 80109aa:	9b06      	ldr	r3, [sp, #24]
 80109ac:	3301      	adds	r3, #1
 80109ae:	9306      	str	r3, [sp, #24]
 80109b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109b2:	3301      	adds	r3, #1
 80109b4:	9309      	str	r3, [sp, #36]	; 0x24
 80109b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	f47f af6a 	bne.w	8010892 <_dtoa_r+0x7ea>
 80109be:	2001      	movs	r0, #1
 80109c0:	e76f      	b.n	80108a2 <_dtoa_r+0x7fa>
 80109c2:	f04f 0800 	mov.w	r8, #0
 80109c6:	e7f6      	b.n	80109b6 <_dtoa_r+0x90e>
 80109c8:	4698      	mov	r8, r3
 80109ca:	e7f4      	b.n	80109b6 <_dtoa_r+0x90e>
 80109cc:	f43f af7d 	beq.w	80108ca <_dtoa_r+0x822>
 80109d0:	4618      	mov	r0, r3
 80109d2:	301c      	adds	r0, #28
 80109d4:	e772      	b.n	80108bc <_dtoa_r+0x814>
 80109d6:	9b02      	ldr	r3, [sp, #8]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	dc36      	bgt.n	8010a4a <_dtoa_r+0x9a2>
 80109dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80109de:	2b02      	cmp	r3, #2
 80109e0:	dd33      	ble.n	8010a4a <_dtoa_r+0x9a2>
 80109e2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80109e6:	f1bb 0f00 	cmp.w	fp, #0
 80109ea:	d10d      	bne.n	8010a08 <_dtoa_r+0x960>
 80109ec:	4621      	mov	r1, r4
 80109ee:	465b      	mov	r3, fp
 80109f0:	2205      	movs	r2, #5
 80109f2:	4628      	mov	r0, r5
 80109f4:	f000 fd3e 	bl	8011474 <__multadd>
 80109f8:	4601      	mov	r1, r0
 80109fa:	4604      	mov	r4, r0
 80109fc:	4650      	mov	r0, sl
 80109fe:	f000 ff9b 	bl	8011938 <__mcmp>
 8010a02:	2800      	cmp	r0, #0
 8010a04:	f73f adb6 	bgt.w	8010574 <_dtoa_r+0x4cc>
 8010a08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010a0a:	9f08      	ldr	r7, [sp, #32]
 8010a0c:	ea6f 0903 	mvn.w	r9, r3
 8010a10:	f04f 0800 	mov.w	r8, #0
 8010a14:	4621      	mov	r1, r4
 8010a16:	4628      	mov	r0, r5
 8010a18:	f000 fd0a 	bl	8011430 <_Bfree>
 8010a1c:	2e00      	cmp	r6, #0
 8010a1e:	f43f aea4 	beq.w	801076a <_dtoa_r+0x6c2>
 8010a22:	f1b8 0f00 	cmp.w	r8, #0
 8010a26:	d005      	beq.n	8010a34 <_dtoa_r+0x98c>
 8010a28:	45b0      	cmp	r8, r6
 8010a2a:	d003      	beq.n	8010a34 <_dtoa_r+0x98c>
 8010a2c:	4641      	mov	r1, r8
 8010a2e:	4628      	mov	r0, r5
 8010a30:	f000 fcfe 	bl	8011430 <_Bfree>
 8010a34:	4631      	mov	r1, r6
 8010a36:	4628      	mov	r0, r5
 8010a38:	f000 fcfa 	bl	8011430 <_Bfree>
 8010a3c:	e695      	b.n	801076a <_dtoa_r+0x6c2>
 8010a3e:	2400      	movs	r4, #0
 8010a40:	4626      	mov	r6, r4
 8010a42:	e7e1      	b.n	8010a08 <_dtoa_r+0x960>
 8010a44:	46c1      	mov	r9, r8
 8010a46:	4626      	mov	r6, r4
 8010a48:	e594      	b.n	8010574 <_dtoa_r+0x4cc>
 8010a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a4c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	f000 80fc 	beq.w	8010c4e <_dtoa_r+0xba6>
 8010a56:	2f00      	cmp	r7, #0
 8010a58:	dd05      	ble.n	8010a66 <_dtoa_r+0x9be>
 8010a5a:	4631      	mov	r1, r6
 8010a5c:	463a      	mov	r2, r7
 8010a5e:	4628      	mov	r0, r5
 8010a60:	f000 fefe 	bl	8011860 <__lshift>
 8010a64:	4606      	mov	r6, r0
 8010a66:	f1b8 0f00 	cmp.w	r8, #0
 8010a6a:	d05c      	beq.n	8010b26 <_dtoa_r+0xa7e>
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	6871      	ldr	r1, [r6, #4]
 8010a70:	f000 fc9e 	bl	80113b0 <_Balloc>
 8010a74:	4607      	mov	r7, r0
 8010a76:	b928      	cbnz	r0, 8010a84 <_dtoa_r+0x9dc>
 8010a78:	4602      	mov	r2, r0
 8010a7a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010a7e:	4b7e      	ldr	r3, [pc, #504]	; (8010c78 <_dtoa_r+0xbd0>)
 8010a80:	f7ff bb26 	b.w	80100d0 <_dtoa_r+0x28>
 8010a84:	6932      	ldr	r2, [r6, #16]
 8010a86:	f106 010c 	add.w	r1, r6, #12
 8010a8a:	3202      	adds	r2, #2
 8010a8c:	0092      	lsls	r2, r2, #2
 8010a8e:	300c      	adds	r0, #12
 8010a90:	f7fd fc76 	bl	800e380 <memcpy>
 8010a94:	2201      	movs	r2, #1
 8010a96:	4639      	mov	r1, r7
 8010a98:	4628      	mov	r0, r5
 8010a9a:	f000 fee1 	bl	8011860 <__lshift>
 8010a9e:	46b0      	mov	r8, r6
 8010aa0:	4606      	mov	r6, r0
 8010aa2:	9b08      	ldr	r3, [sp, #32]
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	9302      	str	r3, [sp, #8]
 8010aa8:	9b08      	ldr	r3, [sp, #32]
 8010aaa:	445b      	add	r3, fp
 8010aac:	930a      	str	r3, [sp, #40]	; 0x28
 8010aae:	9b04      	ldr	r3, [sp, #16]
 8010ab0:	f003 0301 	and.w	r3, r3, #1
 8010ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8010ab6:	9b02      	ldr	r3, [sp, #8]
 8010ab8:	4621      	mov	r1, r4
 8010aba:	4650      	mov	r0, sl
 8010abc:	f103 3bff 	add.w	fp, r3, #4294967295
 8010ac0:	f7ff fa64 	bl	800ff8c <quorem>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	4641      	mov	r1, r8
 8010ac8:	3330      	adds	r3, #48	; 0x30
 8010aca:	9004      	str	r0, [sp, #16]
 8010acc:	4650      	mov	r0, sl
 8010ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ad0:	f000 ff32 	bl	8011938 <__mcmp>
 8010ad4:	4632      	mov	r2, r6
 8010ad6:	9006      	str	r0, [sp, #24]
 8010ad8:	4621      	mov	r1, r4
 8010ada:	4628      	mov	r0, r5
 8010adc:	f000 ff48 	bl	8011970 <__mdiff>
 8010ae0:	68c2      	ldr	r2, [r0, #12]
 8010ae2:	4607      	mov	r7, r0
 8010ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ae6:	bb02      	cbnz	r2, 8010b2a <_dtoa_r+0xa82>
 8010ae8:	4601      	mov	r1, r0
 8010aea:	4650      	mov	r0, sl
 8010aec:	f000 ff24 	bl	8011938 <__mcmp>
 8010af0:	4602      	mov	r2, r0
 8010af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010af4:	4639      	mov	r1, r7
 8010af6:	4628      	mov	r0, r5
 8010af8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8010afc:	f000 fc98 	bl	8011430 <_Bfree>
 8010b00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010b02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b04:	9f02      	ldr	r7, [sp, #8]
 8010b06:	ea43 0102 	orr.w	r1, r3, r2
 8010b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b0c:	430b      	orrs	r3, r1
 8010b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b10:	d10d      	bne.n	8010b2e <_dtoa_r+0xa86>
 8010b12:	2b39      	cmp	r3, #57	; 0x39
 8010b14:	d027      	beq.n	8010b66 <_dtoa_r+0xabe>
 8010b16:	9a06      	ldr	r2, [sp, #24]
 8010b18:	2a00      	cmp	r2, #0
 8010b1a:	dd01      	ble.n	8010b20 <_dtoa_r+0xa78>
 8010b1c:	9b04      	ldr	r3, [sp, #16]
 8010b1e:	3331      	adds	r3, #49	; 0x31
 8010b20:	f88b 3000 	strb.w	r3, [fp]
 8010b24:	e776      	b.n	8010a14 <_dtoa_r+0x96c>
 8010b26:	4630      	mov	r0, r6
 8010b28:	e7b9      	b.n	8010a9e <_dtoa_r+0x9f6>
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	e7e2      	b.n	8010af4 <_dtoa_r+0xa4c>
 8010b2e:	9906      	ldr	r1, [sp, #24]
 8010b30:	2900      	cmp	r1, #0
 8010b32:	db04      	blt.n	8010b3e <_dtoa_r+0xa96>
 8010b34:	9822      	ldr	r0, [sp, #136]	; 0x88
 8010b36:	4301      	orrs	r1, r0
 8010b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b3a:	4301      	orrs	r1, r0
 8010b3c:	d120      	bne.n	8010b80 <_dtoa_r+0xad8>
 8010b3e:	2a00      	cmp	r2, #0
 8010b40:	ddee      	ble.n	8010b20 <_dtoa_r+0xa78>
 8010b42:	4651      	mov	r1, sl
 8010b44:	2201      	movs	r2, #1
 8010b46:	4628      	mov	r0, r5
 8010b48:	9302      	str	r3, [sp, #8]
 8010b4a:	f000 fe89 	bl	8011860 <__lshift>
 8010b4e:	4621      	mov	r1, r4
 8010b50:	4682      	mov	sl, r0
 8010b52:	f000 fef1 	bl	8011938 <__mcmp>
 8010b56:	2800      	cmp	r0, #0
 8010b58:	9b02      	ldr	r3, [sp, #8]
 8010b5a:	dc02      	bgt.n	8010b62 <_dtoa_r+0xaba>
 8010b5c:	d1e0      	bne.n	8010b20 <_dtoa_r+0xa78>
 8010b5e:	07da      	lsls	r2, r3, #31
 8010b60:	d5de      	bpl.n	8010b20 <_dtoa_r+0xa78>
 8010b62:	2b39      	cmp	r3, #57	; 0x39
 8010b64:	d1da      	bne.n	8010b1c <_dtoa_r+0xa74>
 8010b66:	2339      	movs	r3, #57	; 0x39
 8010b68:	f88b 3000 	strb.w	r3, [fp]
 8010b6c:	463b      	mov	r3, r7
 8010b6e:	461f      	mov	r7, r3
 8010b70:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8010b74:	3b01      	subs	r3, #1
 8010b76:	2a39      	cmp	r2, #57	; 0x39
 8010b78:	d050      	beq.n	8010c1c <_dtoa_r+0xb74>
 8010b7a:	3201      	adds	r2, #1
 8010b7c:	701a      	strb	r2, [r3, #0]
 8010b7e:	e749      	b.n	8010a14 <_dtoa_r+0x96c>
 8010b80:	2a00      	cmp	r2, #0
 8010b82:	dd03      	ble.n	8010b8c <_dtoa_r+0xae4>
 8010b84:	2b39      	cmp	r3, #57	; 0x39
 8010b86:	d0ee      	beq.n	8010b66 <_dtoa_r+0xabe>
 8010b88:	3301      	adds	r3, #1
 8010b8a:	e7c9      	b.n	8010b20 <_dtoa_r+0xa78>
 8010b8c:	9a02      	ldr	r2, [sp, #8]
 8010b8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010b90:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010b94:	428a      	cmp	r2, r1
 8010b96:	d02a      	beq.n	8010bee <_dtoa_r+0xb46>
 8010b98:	4651      	mov	r1, sl
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	220a      	movs	r2, #10
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	f000 fc68 	bl	8011474 <__multadd>
 8010ba4:	45b0      	cmp	r8, r6
 8010ba6:	4682      	mov	sl, r0
 8010ba8:	f04f 0300 	mov.w	r3, #0
 8010bac:	f04f 020a 	mov.w	r2, #10
 8010bb0:	4641      	mov	r1, r8
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	d107      	bne.n	8010bc6 <_dtoa_r+0xb1e>
 8010bb6:	f000 fc5d 	bl	8011474 <__multadd>
 8010bba:	4680      	mov	r8, r0
 8010bbc:	4606      	mov	r6, r0
 8010bbe:	9b02      	ldr	r3, [sp, #8]
 8010bc0:	3301      	adds	r3, #1
 8010bc2:	9302      	str	r3, [sp, #8]
 8010bc4:	e777      	b.n	8010ab6 <_dtoa_r+0xa0e>
 8010bc6:	f000 fc55 	bl	8011474 <__multadd>
 8010bca:	4631      	mov	r1, r6
 8010bcc:	4680      	mov	r8, r0
 8010bce:	2300      	movs	r3, #0
 8010bd0:	220a      	movs	r2, #10
 8010bd2:	4628      	mov	r0, r5
 8010bd4:	f000 fc4e 	bl	8011474 <__multadd>
 8010bd8:	4606      	mov	r6, r0
 8010bda:	e7f0      	b.n	8010bbe <_dtoa_r+0xb16>
 8010bdc:	f1bb 0f00 	cmp.w	fp, #0
 8010be0:	bfcc      	ite	gt
 8010be2:	465f      	movgt	r7, fp
 8010be4:	2701      	movle	r7, #1
 8010be6:	f04f 0800 	mov.w	r8, #0
 8010bea:	9a08      	ldr	r2, [sp, #32]
 8010bec:	4417      	add	r7, r2
 8010bee:	4651      	mov	r1, sl
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	9302      	str	r3, [sp, #8]
 8010bf6:	f000 fe33 	bl	8011860 <__lshift>
 8010bfa:	4621      	mov	r1, r4
 8010bfc:	4682      	mov	sl, r0
 8010bfe:	f000 fe9b 	bl	8011938 <__mcmp>
 8010c02:	2800      	cmp	r0, #0
 8010c04:	dcb2      	bgt.n	8010b6c <_dtoa_r+0xac4>
 8010c06:	d102      	bne.n	8010c0e <_dtoa_r+0xb66>
 8010c08:	9b02      	ldr	r3, [sp, #8]
 8010c0a:	07db      	lsls	r3, r3, #31
 8010c0c:	d4ae      	bmi.n	8010b6c <_dtoa_r+0xac4>
 8010c0e:	463b      	mov	r3, r7
 8010c10:	461f      	mov	r7, r3
 8010c12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c16:	2a30      	cmp	r2, #48	; 0x30
 8010c18:	d0fa      	beq.n	8010c10 <_dtoa_r+0xb68>
 8010c1a:	e6fb      	b.n	8010a14 <_dtoa_r+0x96c>
 8010c1c:	9a08      	ldr	r2, [sp, #32]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d1a5      	bne.n	8010b6e <_dtoa_r+0xac6>
 8010c22:	2331      	movs	r3, #49	; 0x31
 8010c24:	f109 0901 	add.w	r9, r9, #1
 8010c28:	7013      	strb	r3, [r2, #0]
 8010c2a:	e6f3      	b.n	8010a14 <_dtoa_r+0x96c>
 8010c2c:	4b13      	ldr	r3, [pc, #76]	; (8010c7c <_dtoa_r+0xbd4>)
 8010c2e:	f7ff baa7 	b.w	8010180 <_dtoa_r+0xd8>
 8010c32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	f47f aa80 	bne.w	801013a <_dtoa_r+0x92>
 8010c3a:	4b11      	ldr	r3, [pc, #68]	; (8010c80 <_dtoa_r+0xbd8>)
 8010c3c:	f7ff baa0 	b.w	8010180 <_dtoa_r+0xd8>
 8010c40:	f1bb 0f00 	cmp.w	fp, #0
 8010c44:	dc03      	bgt.n	8010c4e <_dtoa_r+0xba6>
 8010c46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c48:	2b02      	cmp	r3, #2
 8010c4a:	f73f aecc 	bgt.w	80109e6 <_dtoa_r+0x93e>
 8010c4e:	9f08      	ldr	r7, [sp, #32]
 8010c50:	4621      	mov	r1, r4
 8010c52:	4650      	mov	r0, sl
 8010c54:	f7ff f99a 	bl	800ff8c <quorem>
 8010c58:	9a08      	ldr	r2, [sp, #32]
 8010c5a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010c5e:	f807 3b01 	strb.w	r3, [r7], #1
 8010c62:	1aba      	subs	r2, r7, r2
 8010c64:	4593      	cmp	fp, r2
 8010c66:	ddb9      	ble.n	8010bdc <_dtoa_r+0xb34>
 8010c68:	4651      	mov	r1, sl
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	220a      	movs	r2, #10
 8010c6e:	4628      	mov	r0, r5
 8010c70:	f000 fc00 	bl	8011474 <__multadd>
 8010c74:	4682      	mov	sl, r0
 8010c76:	e7eb      	b.n	8010c50 <_dtoa_r+0xba8>
 8010c78:	08012edc 	.word	0x08012edc
 8010c7c:	08012cd8 	.word	0x08012cd8
 8010c80:	08012e59 	.word	0x08012e59

08010c84 <rshift>:
 8010c84:	6903      	ldr	r3, [r0, #16]
 8010c86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010c8e:	f100 0414 	add.w	r4, r0, #20
 8010c92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010c96:	dd46      	ble.n	8010d26 <rshift+0xa2>
 8010c98:	f011 011f 	ands.w	r1, r1, #31
 8010c9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010ca0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010ca4:	d10c      	bne.n	8010cc0 <rshift+0x3c>
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	f100 0710 	add.w	r7, r0, #16
 8010cac:	42b1      	cmp	r1, r6
 8010cae:	d335      	bcc.n	8010d1c <rshift+0x98>
 8010cb0:	1a9b      	subs	r3, r3, r2
 8010cb2:	009b      	lsls	r3, r3, #2
 8010cb4:	1eea      	subs	r2, r5, #3
 8010cb6:	4296      	cmp	r6, r2
 8010cb8:	bf38      	it	cc
 8010cba:	2300      	movcc	r3, #0
 8010cbc:	4423      	add	r3, r4
 8010cbe:	e015      	b.n	8010cec <rshift+0x68>
 8010cc0:	46a1      	mov	r9, r4
 8010cc2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010cc6:	f1c1 0820 	rsb	r8, r1, #32
 8010cca:	40cf      	lsrs	r7, r1
 8010ccc:	f105 0e04 	add.w	lr, r5, #4
 8010cd0:	4576      	cmp	r6, lr
 8010cd2:	46f4      	mov	ip, lr
 8010cd4:	d816      	bhi.n	8010d04 <rshift+0x80>
 8010cd6:	1a9b      	subs	r3, r3, r2
 8010cd8:	009a      	lsls	r2, r3, #2
 8010cda:	3a04      	subs	r2, #4
 8010cdc:	3501      	adds	r5, #1
 8010cde:	42ae      	cmp	r6, r5
 8010ce0:	bf38      	it	cc
 8010ce2:	2200      	movcc	r2, #0
 8010ce4:	18a3      	adds	r3, r4, r2
 8010ce6:	50a7      	str	r7, [r4, r2]
 8010ce8:	b107      	cbz	r7, 8010cec <rshift+0x68>
 8010cea:	3304      	adds	r3, #4
 8010cec:	42a3      	cmp	r3, r4
 8010cee:	eba3 0204 	sub.w	r2, r3, r4
 8010cf2:	bf08      	it	eq
 8010cf4:	2300      	moveq	r3, #0
 8010cf6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010cfa:	6102      	str	r2, [r0, #16]
 8010cfc:	bf08      	it	eq
 8010cfe:	6143      	streq	r3, [r0, #20]
 8010d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d04:	f8dc c000 	ldr.w	ip, [ip]
 8010d08:	fa0c fc08 	lsl.w	ip, ip, r8
 8010d0c:	ea4c 0707 	orr.w	r7, ip, r7
 8010d10:	f849 7b04 	str.w	r7, [r9], #4
 8010d14:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010d18:	40cf      	lsrs	r7, r1
 8010d1a:	e7d9      	b.n	8010cd0 <rshift+0x4c>
 8010d1c:	f851 cb04 	ldr.w	ip, [r1], #4
 8010d20:	f847 cf04 	str.w	ip, [r7, #4]!
 8010d24:	e7c2      	b.n	8010cac <rshift+0x28>
 8010d26:	4623      	mov	r3, r4
 8010d28:	e7e0      	b.n	8010cec <rshift+0x68>

08010d2a <__hexdig_fun>:
 8010d2a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010d2e:	2b09      	cmp	r3, #9
 8010d30:	d802      	bhi.n	8010d38 <__hexdig_fun+0xe>
 8010d32:	3820      	subs	r0, #32
 8010d34:	b2c0      	uxtb	r0, r0
 8010d36:	4770      	bx	lr
 8010d38:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010d3c:	2b05      	cmp	r3, #5
 8010d3e:	d801      	bhi.n	8010d44 <__hexdig_fun+0x1a>
 8010d40:	3847      	subs	r0, #71	; 0x47
 8010d42:	e7f7      	b.n	8010d34 <__hexdig_fun+0xa>
 8010d44:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010d48:	2b05      	cmp	r3, #5
 8010d4a:	d801      	bhi.n	8010d50 <__hexdig_fun+0x26>
 8010d4c:	3827      	subs	r0, #39	; 0x27
 8010d4e:	e7f1      	b.n	8010d34 <__hexdig_fun+0xa>
 8010d50:	2000      	movs	r0, #0
 8010d52:	4770      	bx	lr

08010d54 <__gethex>:
 8010d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d58:	b08b      	sub	sp, #44	; 0x2c
 8010d5a:	9306      	str	r3, [sp, #24]
 8010d5c:	4bb9      	ldr	r3, [pc, #740]	; (8011044 <__gethex+0x2f0>)
 8010d5e:	9002      	str	r0, [sp, #8]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	468b      	mov	fp, r1
 8010d64:	4618      	mov	r0, r3
 8010d66:	4690      	mov	r8, r2
 8010d68:	9303      	str	r3, [sp, #12]
 8010d6a:	f7ef fa37 	bl	80001dc <strlen>
 8010d6e:	4682      	mov	sl, r0
 8010d70:	9b03      	ldr	r3, [sp, #12]
 8010d72:	f8db 2000 	ldr.w	r2, [fp]
 8010d76:	4403      	add	r3, r0
 8010d78:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010d7c:	9307      	str	r3, [sp, #28]
 8010d7e:	1c93      	adds	r3, r2, #2
 8010d80:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010d84:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010d88:	32fe      	adds	r2, #254	; 0xfe
 8010d8a:	18d1      	adds	r1, r2, r3
 8010d8c:	461f      	mov	r7, r3
 8010d8e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010d92:	9101      	str	r1, [sp, #4]
 8010d94:	2830      	cmp	r0, #48	; 0x30
 8010d96:	d0f8      	beq.n	8010d8a <__gethex+0x36>
 8010d98:	f7ff ffc7 	bl	8010d2a <__hexdig_fun>
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	2800      	cmp	r0, #0
 8010da0:	d13a      	bne.n	8010e18 <__gethex+0xc4>
 8010da2:	4652      	mov	r2, sl
 8010da4:	4638      	mov	r0, r7
 8010da6:	9903      	ldr	r1, [sp, #12]
 8010da8:	f001 f92a 	bl	8012000 <strncmp>
 8010dac:	4605      	mov	r5, r0
 8010dae:	2800      	cmp	r0, #0
 8010db0:	d166      	bne.n	8010e80 <__gethex+0x12c>
 8010db2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010db6:	eb07 060a 	add.w	r6, r7, sl
 8010dba:	f7ff ffb6 	bl	8010d2a <__hexdig_fun>
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	d060      	beq.n	8010e84 <__gethex+0x130>
 8010dc2:	4633      	mov	r3, r6
 8010dc4:	7818      	ldrb	r0, [r3, #0]
 8010dc6:	461f      	mov	r7, r3
 8010dc8:	2830      	cmp	r0, #48	; 0x30
 8010dca:	f103 0301 	add.w	r3, r3, #1
 8010dce:	d0f9      	beq.n	8010dc4 <__gethex+0x70>
 8010dd0:	f7ff ffab 	bl	8010d2a <__hexdig_fun>
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	fab0 f480 	clz	r4, r0
 8010dda:	4635      	mov	r5, r6
 8010ddc:	0964      	lsrs	r4, r4, #5
 8010dde:	9301      	str	r3, [sp, #4]
 8010de0:	463a      	mov	r2, r7
 8010de2:	4616      	mov	r6, r2
 8010de4:	7830      	ldrb	r0, [r6, #0]
 8010de6:	3201      	adds	r2, #1
 8010de8:	f7ff ff9f 	bl	8010d2a <__hexdig_fun>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	d1f8      	bne.n	8010de2 <__gethex+0x8e>
 8010df0:	4652      	mov	r2, sl
 8010df2:	4630      	mov	r0, r6
 8010df4:	9903      	ldr	r1, [sp, #12]
 8010df6:	f001 f903 	bl	8012000 <strncmp>
 8010dfa:	b980      	cbnz	r0, 8010e1e <__gethex+0xca>
 8010dfc:	b94d      	cbnz	r5, 8010e12 <__gethex+0xbe>
 8010dfe:	eb06 050a 	add.w	r5, r6, sl
 8010e02:	462a      	mov	r2, r5
 8010e04:	4616      	mov	r6, r2
 8010e06:	7830      	ldrb	r0, [r6, #0]
 8010e08:	3201      	adds	r2, #1
 8010e0a:	f7ff ff8e 	bl	8010d2a <__hexdig_fun>
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	d1f8      	bne.n	8010e04 <__gethex+0xb0>
 8010e12:	1bad      	subs	r5, r5, r6
 8010e14:	00ad      	lsls	r5, r5, #2
 8010e16:	e004      	b.n	8010e22 <__gethex+0xce>
 8010e18:	2400      	movs	r4, #0
 8010e1a:	4625      	mov	r5, r4
 8010e1c:	e7e0      	b.n	8010de0 <__gethex+0x8c>
 8010e1e:	2d00      	cmp	r5, #0
 8010e20:	d1f7      	bne.n	8010e12 <__gethex+0xbe>
 8010e22:	7833      	ldrb	r3, [r6, #0]
 8010e24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010e28:	2b50      	cmp	r3, #80	; 0x50
 8010e2a:	d139      	bne.n	8010ea0 <__gethex+0x14c>
 8010e2c:	7873      	ldrb	r3, [r6, #1]
 8010e2e:	2b2b      	cmp	r3, #43	; 0x2b
 8010e30:	d02a      	beq.n	8010e88 <__gethex+0x134>
 8010e32:	2b2d      	cmp	r3, #45	; 0x2d
 8010e34:	d02c      	beq.n	8010e90 <__gethex+0x13c>
 8010e36:	f04f 0900 	mov.w	r9, #0
 8010e3a:	1c71      	adds	r1, r6, #1
 8010e3c:	7808      	ldrb	r0, [r1, #0]
 8010e3e:	f7ff ff74 	bl	8010d2a <__hexdig_fun>
 8010e42:	1e43      	subs	r3, r0, #1
 8010e44:	b2db      	uxtb	r3, r3
 8010e46:	2b18      	cmp	r3, #24
 8010e48:	d82a      	bhi.n	8010ea0 <__gethex+0x14c>
 8010e4a:	f1a0 0210 	sub.w	r2, r0, #16
 8010e4e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010e52:	f7ff ff6a 	bl	8010d2a <__hexdig_fun>
 8010e56:	1e43      	subs	r3, r0, #1
 8010e58:	b2db      	uxtb	r3, r3
 8010e5a:	2b18      	cmp	r3, #24
 8010e5c:	d91b      	bls.n	8010e96 <__gethex+0x142>
 8010e5e:	f1b9 0f00 	cmp.w	r9, #0
 8010e62:	d000      	beq.n	8010e66 <__gethex+0x112>
 8010e64:	4252      	negs	r2, r2
 8010e66:	4415      	add	r5, r2
 8010e68:	f8cb 1000 	str.w	r1, [fp]
 8010e6c:	b1d4      	cbz	r4, 8010ea4 <__gethex+0x150>
 8010e6e:	9b01      	ldr	r3, [sp, #4]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	bf14      	ite	ne
 8010e74:	2700      	movne	r7, #0
 8010e76:	2706      	moveq	r7, #6
 8010e78:	4638      	mov	r0, r7
 8010e7a:	b00b      	add	sp, #44	; 0x2c
 8010e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e80:	463e      	mov	r6, r7
 8010e82:	4625      	mov	r5, r4
 8010e84:	2401      	movs	r4, #1
 8010e86:	e7cc      	b.n	8010e22 <__gethex+0xce>
 8010e88:	f04f 0900 	mov.w	r9, #0
 8010e8c:	1cb1      	adds	r1, r6, #2
 8010e8e:	e7d5      	b.n	8010e3c <__gethex+0xe8>
 8010e90:	f04f 0901 	mov.w	r9, #1
 8010e94:	e7fa      	b.n	8010e8c <__gethex+0x138>
 8010e96:	230a      	movs	r3, #10
 8010e98:	fb03 0202 	mla	r2, r3, r2, r0
 8010e9c:	3a10      	subs	r2, #16
 8010e9e:	e7d6      	b.n	8010e4e <__gethex+0xfa>
 8010ea0:	4631      	mov	r1, r6
 8010ea2:	e7e1      	b.n	8010e68 <__gethex+0x114>
 8010ea4:	4621      	mov	r1, r4
 8010ea6:	1bf3      	subs	r3, r6, r7
 8010ea8:	3b01      	subs	r3, #1
 8010eaa:	2b07      	cmp	r3, #7
 8010eac:	dc0a      	bgt.n	8010ec4 <__gethex+0x170>
 8010eae:	9802      	ldr	r0, [sp, #8]
 8010eb0:	f000 fa7e 	bl	80113b0 <_Balloc>
 8010eb4:	4604      	mov	r4, r0
 8010eb6:	b940      	cbnz	r0, 8010eca <__gethex+0x176>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	21de      	movs	r1, #222	; 0xde
 8010ebc:	4b62      	ldr	r3, [pc, #392]	; (8011048 <__gethex+0x2f4>)
 8010ebe:	4863      	ldr	r0, [pc, #396]	; (801104c <__gethex+0x2f8>)
 8010ec0:	f001 f8be 	bl	8012040 <__assert_func>
 8010ec4:	3101      	adds	r1, #1
 8010ec6:	105b      	asrs	r3, r3, #1
 8010ec8:	e7ef      	b.n	8010eaa <__gethex+0x156>
 8010eca:	f04f 0b00 	mov.w	fp, #0
 8010ece:	f100 0914 	add.w	r9, r0, #20
 8010ed2:	f1ca 0301 	rsb	r3, sl, #1
 8010ed6:	f8cd 9010 	str.w	r9, [sp, #16]
 8010eda:	f8cd b004 	str.w	fp, [sp, #4]
 8010ede:	9308      	str	r3, [sp, #32]
 8010ee0:	42b7      	cmp	r7, r6
 8010ee2:	d33f      	bcc.n	8010f64 <__gethex+0x210>
 8010ee4:	9f04      	ldr	r7, [sp, #16]
 8010ee6:	9b01      	ldr	r3, [sp, #4]
 8010ee8:	f847 3b04 	str.w	r3, [r7], #4
 8010eec:	eba7 0709 	sub.w	r7, r7, r9
 8010ef0:	10bf      	asrs	r7, r7, #2
 8010ef2:	6127      	str	r7, [r4, #16]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f000 fb51 	bl	801159c <__hi0bits>
 8010efa:	017f      	lsls	r7, r7, #5
 8010efc:	f8d8 6000 	ldr.w	r6, [r8]
 8010f00:	1a3f      	subs	r7, r7, r0
 8010f02:	42b7      	cmp	r7, r6
 8010f04:	dd62      	ble.n	8010fcc <__gethex+0x278>
 8010f06:	1bbf      	subs	r7, r7, r6
 8010f08:	4639      	mov	r1, r7
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	f000 fee7 	bl	8011cde <__any_on>
 8010f10:	4682      	mov	sl, r0
 8010f12:	b1a8      	cbz	r0, 8010f40 <__gethex+0x1ec>
 8010f14:	f04f 0a01 	mov.w	sl, #1
 8010f18:	1e7b      	subs	r3, r7, #1
 8010f1a:	1159      	asrs	r1, r3, #5
 8010f1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010f20:	f003 021f 	and.w	r2, r3, #31
 8010f24:	fa0a f202 	lsl.w	r2, sl, r2
 8010f28:	420a      	tst	r2, r1
 8010f2a:	d009      	beq.n	8010f40 <__gethex+0x1ec>
 8010f2c:	4553      	cmp	r3, sl
 8010f2e:	dd05      	ble.n	8010f3c <__gethex+0x1e8>
 8010f30:	4620      	mov	r0, r4
 8010f32:	1eb9      	subs	r1, r7, #2
 8010f34:	f000 fed3 	bl	8011cde <__any_on>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d144      	bne.n	8010fc6 <__gethex+0x272>
 8010f3c:	f04f 0a02 	mov.w	sl, #2
 8010f40:	4639      	mov	r1, r7
 8010f42:	4620      	mov	r0, r4
 8010f44:	f7ff fe9e 	bl	8010c84 <rshift>
 8010f48:	443d      	add	r5, r7
 8010f4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f4e:	42ab      	cmp	r3, r5
 8010f50:	da4a      	bge.n	8010fe8 <__gethex+0x294>
 8010f52:	4621      	mov	r1, r4
 8010f54:	9802      	ldr	r0, [sp, #8]
 8010f56:	f000 fa6b 	bl	8011430 <_Bfree>
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010f5e:	27a3      	movs	r7, #163	; 0xa3
 8010f60:	6013      	str	r3, [r2, #0]
 8010f62:	e789      	b.n	8010e78 <__gethex+0x124>
 8010f64:	1e73      	subs	r3, r6, #1
 8010f66:	9a07      	ldr	r2, [sp, #28]
 8010f68:	9305      	str	r3, [sp, #20]
 8010f6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d019      	beq.n	8010fa6 <__gethex+0x252>
 8010f72:	f1bb 0f20 	cmp.w	fp, #32
 8010f76:	d107      	bne.n	8010f88 <__gethex+0x234>
 8010f78:	9b04      	ldr	r3, [sp, #16]
 8010f7a:	9a01      	ldr	r2, [sp, #4]
 8010f7c:	f843 2b04 	str.w	r2, [r3], #4
 8010f80:	9304      	str	r3, [sp, #16]
 8010f82:	2300      	movs	r3, #0
 8010f84:	469b      	mov	fp, r3
 8010f86:	9301      	str	r3, [sp, #4]
 8010f88:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010f8c:	f7ff fecd 	bl	8010d2a <__hexdig_fun>
 8010f90:	9b01      	ldr	r3, [sp, #4]
 8010f92:	f000 000f 	and.w	r0, r0, #15
 8010f96:	fa00 f00b 	lsl.w	r0, r0, fp
 8010f9a:	4303      	orrs	r3, r0
 8010f9c:	9301      	str	r3, [sp, #4]
 8010f9e:	f10b 0b04 	add.w	fp, fp, #4
 8010fa2:	9b05      	ldr	r3, [sp, #20]
 8010fa4:	e00d      	b.n	8010fc2 <__gethex+0x26e>
 8010fa6:	9b05      	ldr	r3, [sp, #20]
 8010fa8:	9a08      	ldr	r2, [sp, #32]
 8010faa:	4413      	add	r3, r2
 8010fac:	42bb      	cmp	r3, r7
 8010fae:	d3e0      	bcc.n	8010f72 <__gethex+0x21e>
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	4652      	mov	r2, sl
 8010fb4:	9903      	ldr	r1, [sp, #12]
 8010fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8010fb8:	f001 f822 	bl	8012000 <strncmp>
 8010fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fbe:	2800      	cmp	r0, #0
 8010fc0:	d1d7      	bne.n	8010f72 <__gethex+0x21e>
 8010fc2:	461e      	mov	r6, r3
 8010fc4:	e78c      	b.n	8010ee0 <__gethex+0x18c>
 8010fc6:	f04f 0a03 	mov.w	sl, #3
 8010fca:	e7b9      	b.n	8010f40 <__gethex+0x1ec>
 8010fcc:	da09      	bge.n	8010fe2 <__gethex+0x28e>
 8010fce:	1bf7      	subs	r7, r6, r7
 8010fd0:	4621      	mov	r1, r4
 8010fd2:	463a      	mov	r2, r7
 8010fd4:	9802      	ldr	r0, [sp, #8]
 8010fd6:	f000 fc43 	bl	8011860 <__lshift>
 8010fda:	4604      	mov	r4, r0
 8010fdc:	1bed      	subs	r5, r5, r7
 8010fde:	f100 0914 	add.w	r9, r0, #20
 8010fe2:	f04f 0a00 	mov.w	sl, #0
 8010fe6:	e7b0      	b.n	8010f4a <__gethex+0x1f6>
 8010fe8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010fec:	42a8      	cmp	r0, r5
 8010fee:	dd71      	ble.n	80110d4 <__gethex+0x380>
 8010ff0:	1b45      	subs	r5, r0, r5
 8010ff2:	42ae      	cmp	r6, r5
 8010ff4:	dc34      	bgt.n	8011060 <__gethex+0x30c>
 8010ff6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ffa:	2b02      	cmp	r3, #2
 8010ffc:	d028      	beq.n	8011050 <__gethex+0x2fc>
 8010ffe:	2b03      	cmp	r3, #3
 8011000:	d02a      	beq.n	8011058 <__gethex+0x304>
 8011002:	2b01      	cmp	r3, #1
 8011004:	d115      	bne.n	8011032 <__gethex+0x2de>
 8011006:	42ae      	cmp	r6, r5
 8011008:	d113      	bne.n	8011032 <__gethex+0x2de>
 801100a:	2e01      	cmp	r6, #1
 801100c:	d10b      	bne.n	8011026 <__gethex+0x2d2>
 801100e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011012:	9a06      	ldr	r2, [sp, #24]
 8011014:	2762      	movs	r7, #98	; 0x62
 8011016:	6013      	str	r3, [r2, #0]
 8011018:	2301      	movs	r3, #1
 801101a:	6123      	str	r3, [r4, #16]
 801101c:	f8c9 3000 	str.w	r3, [r9]
 8011020:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011022:	601c      	str	r4, [r3, #0]
 8011024:	e728      	b.n	8010e78 <__gethex+0x124>
 8011026:	4620      	mov	r0, r4
 8011028:	1e71      	subs	r1, r6, #1
 801102a:	f000 fe58 	bl	8011cde <__any_on>
 801102e:	2800      	cmp	r0, #0
 8011030:	d1ed      	bne.n	801100e <__gethex+0x2ba>
 8011032:	4621      	mov	r1, r4
 8011034:	9802      	ldr	r0, [sp, #8]
 8011036:	f000 f9fb 	bl	8011430 <_Bfree>
 801103a:	2300      	movs	r3, #0
 801103c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801103e:	2750      	movs	r7, #80	; 0x50
 8011040:	6013      	str	r3, [r2, #0]
 8011042:	e719      	b.n	8010e78 <__gethex+0x124>
 8011044:	08012f58 	.word	0x08012f58
 8011048:	08012edc 	.word	0x08012edc
 801104c:	08012eed 	.word	0x08012eed
 8011050:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011052:	2b00      	cmp	r3, #0
 8011054:	d1ed      	bne.n	8011032 <__gethex+0x2de>
 8011056:	e7da      	b.n	801100e <__gethex+0x2ba>
 8011058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801105a:	2b00      	cmp	r3, #0
 801105c:	d1d7      	bne.n	801100e <__gethex+0x2ba>
 801105e:	e7e8      	b.n	8011032 <__gethex+0x2de>
 8011060:	1e6f      	subs	r7, r5, #1
 8011062:	f1ba 0f00 	cmp.w	sl, #0
 8011066:	d132      	bne.n	80110ce <__gethex+0x37a>
 8011068:	b127      	cbz	r7, 8011074 <__gethex+0x320>
 801106a:	4639      	mov	r1, r7
 801106c:	4620      	mov	r0, r4
 801106e:	f000 fe36 	bl	8011cde <__any_on>
 8011072:	4682      	mov	sl, r0
 8011074:	2101      	movs	r1, #1
 8011076:	117b      	asrs	r3, r7, #5
 8011078:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801107c:	f007 071f 	and.w	r7, r7, #31
 8011080:	fa01 f707 	lsl.w	r7, r1, r7
 8011084:	421f      	tst	r7, r3
 8011086:	f04f 0702 	mov.w	r7, #2
 801108a:	4629      	mov	r1, r5
 801108c:	4620      	mov	r0, r4
 801108e:	bf18      	it	ne
 8011090:	f04a 0a02 	orrne.w	sl, sl, #2
 8011094:	1b76      	subs	r6, r6, r5
 8011096:	f7ff fdf5 	bl	8010c84 <rshift>
 801109a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801109e:	f1ba 0f00 	cmp.w	sl, #0
 80110a2:	d048      	beq.n	8011136 <__gethex+0x3e2>
 80110a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80110a8:	2b02      	cmp	r3, #2
 80110aa:	d015      	beq.n	80110d8 <__gethex+0x384>
 80110ac:	2b03      	cmp	r3, #3
 80110ae:	d017      	beq.n	80110e0 <__gethex+0x38c>
 80110b0:	2b01      	cmp	r3, #1
 80110b2:	d109      	bne.n	80110c8 <__gethex+0x374>
 80110b4:	f01a 0f02 	tst.w	sl, #2
 80110b8:	d006      	beq.n	80110c8 <__gethex+0x374>
 80110ba:	f8d9 0000 	ldr.w	r0, [r9]
 80110be:	ea4a 0a00 	orr.w	sl, sl, r0
 80110c2:	f01a 0f01 	tst.w	sl, #1
 80110c6:	d10e      	bne.n	80110e6 <__gethex+0x392>
 80110c8:	f047 0710 	orr.w	r7, r7, #16
 80110cc:	e033      	b.n	8011136 <__gethex+0x3e2>
 80110ce:	f04f 0a01 	mov.w	sl, #1
 80110d2:	e7cf      	b.n	8011074 <__gethex+0x320>
 80110d4:	2701      	movs	r7, #1
 80110d6:	e7e2      	b.n	801109e <__gethex+0x34a>
 80110d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110da:	f1c3 0301 	rsb	r3, r3, #1
 80110de:	9315      	str	r3, [sp, #84]	; 0x54
 80110e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d0f0      	beq.n	80110c8 <__gethex+0x374>
 80110e6:	f04f 0c00 	mov.w	ip, #0
 80110ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80110ee:	f104 0314 	add.w	r3, r4, #20
 80110f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80110f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80110fa:	4618      	mov	r0, r3
 80110fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011100:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011104:	d01c      	beq.n	8011140 <__gethex+0x3ec>
 8011106:	3201      	adds	r2, #1
 8011108:	6002      	str	r2, [r0, #0]
 801110a:	2f02      	cmp	r7, #2
 801110c:	f104 0314 	add.w	r3, r4, #20
 8011110:	d13d      	bne.n	801118e <__gethex+0x43a>
 8011112:	f8d8 2000 	ldr.w	r2, [r8]
 8011116:	3a01      	subs	r2, #1
 8011118:	42b2      	cmp	r2, r6
 801111a:	d10a      	bne.n	8011132 <__gethex+0x3de>
 801111c:	2201      	movs	r2, #1
 801111e:	1171      	asrs	r1, r6, #5
 8011120:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011124:	f006 061f 	and.w	r6, r6, #31
 8011128:	fa02 f606 	lsl.w	r6, r2, r6
 801112c:	421e      	tst	r6, r3
 801112e:	bf18      	it	ne
 8011130:	4617      	movne	r7, r2
 8011132:	f047 0720 	orr.w	r7, r7, #32
 8011136:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011138:	601c      	str	r4, [r3, #0]
 801113a:	9b06      	ldr	r3, [sp, #24]
 801113c:	601d      	str	r5, [r3, #0]
 801113e:	e69b      	b.n	8010e78 <__gethex+0x124>
 8011140:	4299      	cmp	r1, r3
 8011142:	f843 cc04 	str.w	ip, [r3, #-4]
 8011146:	d8d8      	bhi.n	80110fa <__gethex+0x3a6>
 8011148:	68a3      	ldr	r3, [r4, #8]
 801114a:	459b      	cmp	fp, r3
 801114c:	db17      	blt.n	801117e <__gethex+0x42a>
 801114e:	6861      	ldr	r1, [r4, #4]
 8011150:	9802      	ldr	r0, [sp, #8]
 8011152:	3101      	adds	r1, #1
 8011154:	f000 f92c 	bl	80113b0 <_Balloc>
 8011158:	4681      	mov	r9, r0
 801115a:	b918      	cbnz	r0, 8011164 <__gethex+0x410>
 801115c:	4602      	mov	r2, r0
 801115e:	2184      	movs	r1, #132	; 0x84
 8011160:	4b19      	ldr	r3, [pc, #100]	; (80111c8 <__gethex+0x474>)
 8011162:	e6ac      	b.n	8010ebe <__gethex+0x16a>
 8011164:	6922      	ldr	r2, [r4, #16]
 8011166:	f104 010c 	add.w	r1, r4, #12
 801116a:	3202      	adds	r2, #2
 801116c:	0092      	lsls	r2, r2, #2
 801116e:	300c      	adds	r0, #12
 8011170:	f7fd f906 	bl	800e380 <memcpy>
 8011174:	4621      	mov	r1, r4
 8011176:	9802      	ldr	r0, [sp, #8]
 8011178:	f000 f95a 	bl	8011430 <_Bfree>
 801117c:	464c      	mov	r4, r9
 801117e:	6923      	ldr	r3, [r4, #16]
 8011180:	1c5a      	adds	r2, r3, #1
 8011182:	6122      	str	r2, [r4, #16]
 8011184:	2201      	movs	r2, #1
 8011186:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801118a:	615a      	str	r2, [r3, #20]
 801118c:	e7bd      	b.n	801110a <__gethex+0x3b6>
 801118e:	6922      	ldr	r2, [r4, #16]
 8011190:	455a      	cmp	r2, fp
 8011192:	dd0b      	ble.n	80111ac <__gethex+0x458>
 8011194:	2101      	movs	r1, #1
 8011196:	4620      	mov	r0, r4
 8011198:	f7ff fd74 	bl	8010c84 <rshift>
 801119c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80111a0:	3501      	adds	r5, #1
 80111a2:	42ab      	cmp	r3, r5
 80111a4:	f6ff aed5 	blt.w	8010f52 <__gethex+0x1fe>
 80111a8:	2701      	movs	r7, #1
 80111aa:	e7c2      	b.n	8011132 <__gethex+0x3de>
 80111ac:	f016 061f 	ands.w	r6, r6, #31
 80111b0:	d0fa      	beq.n	80111a8 <__gethex+0x454>
 80111b2:	449a      	add	sl, r3
 80111b4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80111b8:	f000 f9f0 	bl	801159c <__hi0bits>
 80111bc:	f1c6 0620 	rsb	r6, r6, #32
 80111c0:	42b0      	cmp	r0, r6
 80111c2:	dbe7      	blt.n	8011194 <__gethex+0x440>
 80111c4:	e7f0      	b.n	80111a8 <__gethex+0x454>
 80111c6:	bf00      	nop
 80111c8:	08012edc 	.word	0x08012edc

080111cc <L_shift>:
 80111cc:	f1c2 0208 	rsb	r2, r2, #8
 80111d0:	0092      	lsls	r2, r2, #2
 80111d2:	b570      	push	{r4, r5, r6, lr}
 80111d4:	f1c2 0620 	rsb	r6, r2, #32
 80111d8:	6843      	ldr	r3, [r0, #4]
 80111da:	6804      	ldr	r4, [r0, #0]
 80111dc:	fa03 f506 	lsl.w	r5, r3, r6
 80111e0:	432c      	orrs	r4, r5
 80111e2:	40d3      	lsrs	r3, r2
 80111e4:	6004      	str	r4, [r0, #0]
 80111e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80111ea:	4288      	cmp	r0, r1
 80111ec:	d3f4      	bcc.n	80111d8 <L_shift+0xc>
 80111ee:	bd70      	pop	{r4, r5, r6, pc}

080111f0 <__match>:
 80111f0:	b530      	push	{r4, r5, lr}
 80111f2:	6803      	ldr	r3, [r0, #0]
 80111f4:	3301      	adds	r3, #1
 80111f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111fa:	b914      	cbnz	r4, 8011202 <__match+0x12>
 80111fc:	6003      	str	r3, [r0, #0]
 80111fe:	2001      	movs	r0, #1
 8011200:	bd30      	pop	{r4, r5, pc}
 8011202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011206:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801120a:	2d19      	cmp	r5, #25
 801120c:	bf98      	it	ls
 801120e:	3220      	addls	r2, #32
 8011210:	42a2      	cmp	r2, r4
 8011212:	d0f0      	beq.n	80111f6 <__match+0x6>
 8011214:	2000      	movs	r0, #0
 8011216:	e7f3      	b.n	8011200 <__match+0x10>

08011218 <__hexnan>:
 8011218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801121c:	2500      	movs	r5, #0
 801121e:	680b      	ldr	r3, [r1, #0]
 8011220:	4682      	mov	sl, r0
 8011222:	115e      	asrs	r6, r3, #5
 8011224:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011228:	f013 031f 	ands.w	r3, r3, #31
 801122c:	bf18      	it	ne
 801122e:	3604      	addne	r6, #4
 8011230:	1f37      	subs	r7, r6, #4
 8011232:	4690      	mov	r8, r2
 8011234:	46b9      	mov	r9, r7
 8011236:	463c      	mov	r4, r7
 8011238:	46ab      	mov	fp, r5
 801123a:	b087      	sub	sp, #28
 801123c:	6801      	ldr	r1, [r0, #0]
 801123e:	9301      	str	r3, [sp, #4]
 8011240:	f846 5c04 	str.w	r5, [r6, #-4]
 8011244:	9502      	str	r5, [sp, #8]
 8011246:	784a      	ldrb	r2, [r1, #1]
 8011248:	1c4b      	adds	r3, r1, #1
 801124a:	9303      	str	r3, [sp, #12]
 801124c:	b342      	cbz	r2, 80112a0 <__hexnan+0x88>
 801124e:	4610      	mov	r0, r2
 8011250:	9105      	str	r1, [sp, #20]
 8011252:	9204      	str	r2, [sp, #16]
 8011254:	f7ff fd69 	bl	8010d2a <__hexdig_fun>
 8011258:	2800      	cmp	r0, #0
 801125a:	d14f      	bne.n	80112fc <__hexnan+0xe4>
 801125c:	9a04      	ldr	r2, [sp, #16]
 801125e:	9905      	ldr	r1, [sp, #20]
 8011260:	2a20      	cmp	r2, #32
 8011262:	d818      	bhi.n	8011296 <__hexnan+0x7e>
 8011264:	9b02      	ldr	r3, [sp, #8]
 8011266:	459b      	cmp	fp, r3
 8011268:	dd13      	ble.n	8011292 <__hexnan+0x7a>
 801126a:	454c      	cmp	r4, r9
 801126c:	d206      	bcs.n	801127c <__hexnan+0x64>
 801126e:	2d07      	cmp	r5, #7
 8011270:	dc04      	bgt.n	801127c <__hexnan+0x64>
 8011272:	462a      	mov	r2, r5
 8011274:	4649      	mov	r1, r9
 8011276:	4620      	mov	r0, r4
 8011278:	f7ff ffa8 	bl	80111cc <L_shift>
 801127c:	4544      	cmp	r4, r8
 801127e:	d950      	bls.n	8011322 <__hexnan+0x10a>
 8011280:	2300      	movs	r3, #0
 8011282:	f1a4 0904 	sub.w	r9, r4, #4
 8011286:	f844 3c04 	str.w	r3, [r4, #-4]
 801128a:	461d      	mov	r5, r3
 801128c:	464c      	mov	r4, r9
 801128e:	f8cd b008 	str.w	fp, [sp, #8]
 8011292:	9903      	ldr	r1, [sp, #12]
 8011294:	e7d7      	b.n	8011246 <__hexnan+0x2e>
 8011296:	2a29      	cmp	r2, #41	; 0x29
 8011298:	d156      	bne.n	8011348 <__hexnan+0x130>
 801129a:	3102      	adds	r1, #2
 801129c:	f8ca 1000 	str.w	r1, [sl]
 80112a0:	f1bb 0f00 	cmp.w	fp, #0
 80112a4:	d050      	beq.n	8011348 <__hexnan+0x130>
 80112a6:	454c      	cmp	r4, r9
 80112a8:	d206      	bcs.n	80112b8 <__hexnan+0xa0>
 80112aa:	2d07      	cmp	r5, #7
 80112ac:	dc04      	bgt.n	80112b8 <__hexnan+0xa0>
 80112ae:	462a      	mov	r2, r5
 80112b0:	4649      	mov	r1, r9
 80112b2:	4620      	mov	r0, r4
 80112b4:	f7ff ff8a 	bl	80111cc <L_shift>
 80112b8:	4544      	cmp	r4, r8
 80112ba:	d934      	bls.n	8011326 <__hexnan+0x10e>
 80112bc:	4623      	mov	r3, r4
 80112be:	f1a8 0204 	sub.w	r2, r8, #4
 80112c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80112c6:	429f      	cmp	r7, r3
 80112c8:	f842 1f04 	str.w	r1, [r2, #4]!
 80112cc:	d2f9      	bcs.n	80112c2 <__hexnan+0xaa>
 80112ce:	1b3b      	subs	r3, r7, r4
 80112d0:	f023 0303 	bic.w	r3, r3, #3
 80112d4:	3304      	adds	r3, #4
 80112d6:	3401      	adds	r4, #1
 80112d8:	3e03      	subs	r6, #3
 80112da:	42b4      	cmp	r4, r6
 80112dc:	bf88      	it	hi
 80112de:	2304      	movhi	r3, #4
 80112e0:	2200      	movs	r2, #0
 80112e2:	4443      	add	r3, r8
 80112e4:	f843 2b04 	str.w	r2, [r3], #4
 80112e8:	429f      	cmp	r7, r3
 80112ea:	d2fb      	bcs.n	80112e4 <__hexnan+0xcc>
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	b91b      	cbnz	r3, 80112f8 <__hexnan+0xe0>
 80112f0:	4547      	cmp	r7, r8
 80112f2:	d127      	bne.n	8011344 <__hexnan+0x12c>
 80112f4:	2301      	movs	r3, #1
 80112f6:	603b      	str	r3, [r7, #0]
 80112f8:	2005      	movs	r0, #5
 80112fa:	e026      	b.n	801134a <__hexnan+0x132>
 80112fc:	3501      	adds	r5, #1
 80112fe:	2d08      	cmp	r5, #8
 8011300:	f10b 0b01 	add.w	fp, fp, #1
 8011304:	dd06      	ble.n	8011314 <__hexnan+0xfc>
 8011306:	4544      	cmp	r4, r8
 8011308:	d9c3      	bls.n	8011292 <__hexnan+0x7a>
 801130a:	2300      	movs	r3, #0
 801130c:	2501      	movs	r5, #1
 801130e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011312:	3c04      	subs	r4, #4
 8011314:	6822      	ldr	r2, [r4, #0]
 8011316:	f000 000f 	and.w	r0, r0, #15
 801131a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801131e:	6022      	str	r2, [r4, #0]
 8011320:	e7b7      	b.n	8011292 <__hexnan+0x7a>
 8011322:	2508      	movs	r5, #8
 8011324:	e7b5      	b.n	8011292 <__hexnan+0x7a>
 8011326:	9b01      	ldr	r3, [sp, #4]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d0df      	beq.n	80112ec <__hexnan+0xd4>
 801132c:	f04f 32ff 	mov.w	r2, #4294967295
 8011330:	f1c3 0320 	rsb	r3, r3, #32
 8011334:	fa22 f303 	lsr.w	r3, r2, r3
 8011338:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801133c:	401a      	ands	r2, r3
 801133e:	f846 2c04 	str.w	r2, [r6, #-4]
 8011342:	e7d3      	b.n	80112ec <__hexnan+0xd4>
 8011344:	3f04      	subs	r7, #4
 8011346:	e7d1      	b.n	80112ec <__hexnan+0xd4>
 8011348:	2004      	movs	r0, #4
 801134a:	b007      	add	sp, #28
 801134c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011350 <_localeconv_r>:
 8011350:	4800      	ldr	r0, [pc, #0]	; (8011354 <_localeconv_r+0x4>)
 8011352:	4770      	bx	lr
 8011354:	200001b8 	.word	0x200001b8

08011358 <__ascii_mbtowc>:
 8011358:	b082      	sub	sp, #8
 801135a:	b901      	cbnz	r1, 801135e <__ascii_mbtowc+0x6>
 801135c:	a901      	add	r1, sp, #4
 801135e:	b142      	cbz	r2, 8011372 <__ascii_mbtowc+0x1a>
 8011360:	b14b      	cbz	r3, 8011376 <__ascii_mbtowc+0x1e>
 8011362:	7813      	ldrb	r3, [r2, #0]
 8011364:	600b      	str	r3, [r1, #0]
 8011366:	7812      	ldrb	r2, [r2, #0]
 8011368:	1e10      	subs	r0, r2, #0
 801136a:	bf18      	it	ne
 801136c:	2001      	movne	r0, #1
 801136e:	b002      	add	sp, #8
 8011370:	4770      	bx	lr
 8011372:	4610      	mov	r0, r2
 8011374:	e7fb      	b.n	801136e <__ascii_mbtowc+0x16>
 8011376:	f06f 0001 	mvn.w	r0, #1
 801137a:	e7f8      	b.n	801136e <__ascii_mbtowc+0x16>

0801137c <memchr>:
 801137c:	4603      	mov	r3, r0
 801137e:	b510      	push	{r4, lr}
 8011380:	b2c9      	uxtb	r1, r1
 8011382:	4402      	add	r2, r0
 8011384:	4293      	cmp	r3, r2
 8011386:	4618      	mov	r0, r3
 8011388:	d101      	bne.n	801138e <memchr+0x12>
 801138a:	2000      	movs	r0, #0
 801138c:	e003      	b.n	8011396 <memchr+0x1a>
 801138e:	7804      	ldrb	r4, [r0, #0]
 8011390:	3301      	adds	r3, #1
 8011392:	428c      	cmp	r4, r1
 8011394:	d1f6      	bne.n	8011384 <memchr+0x8>
 8011396:	bd10      	pop	{r4, pc}

08011398 <__malloc_lock>:
 8011398:	4801      	ldr	r0, [pc, #4]	; (80113a0 <__malloc_lock+0x8>)
 801139a:	f000 be82 	b.w	80120a2 <__retarget_lock_acquire_recursive>
 801139e:	bf00      	nop
 80113a0:	2000d618 	.word	0x2000d618

080113a4 <__malloc_unlock>:
 80113a4:	4801      	ldr	r0, [pc, #4]	; (80113ac <__malloc_unlock+0x8>)
 80113a6:	f000 be7d 	b.w	80120a4 <__retarget_lock_release_recursive>
 80113aa:	bf00      	nop
 80113ac:	2000d618 	.word	0x2000d618

080113b0 <_Balloc>:
 80113b0:	b570      	push	{r4, r5, r6, lr}
 80113b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80113b4:	4604      	mov	r4, r0
 80113b6:	460d      	mov	r5, r1
 80113b8:	b976      	cbnz	r6, 80113d8 <_Balloc+0x28>
 80113ba:	2010      	movs	r0, #16
 80113bc:	f7fc ffd0 	bl	800e360 <malloc>
 80113c0:	4602      	mov	r2, r0
 80113c2:	6260      	str	r0, [r4, #36]	; 0x24
 80113c4:	b920      	cbnz	r0, 80113d0 <_Balloc+0x20>
 80113c6:	2166      	movs	r1, #102	; 0x66
 80113c8:	4b17      	ldr	r3, [pc, #92]	; (8011428 <_Balloc+0x78>)
 80113ca:	4818      	ldr	r0, [pc, #96]	; (801142c <_Balloc+0x7c>)
 80113cc:	f000 fe38 	bl	8012040 <__assert_func>
 80113d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113d4:	6006      	str	r6, [r0, #0]
 80113d6:	60c6      	str	r6, [r0, #12]
 80113d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80113da:	68f3      	ldr	r3, [r6, #12]
 80113dc:	b183      	cbz	r3, 8011400 <_Balloc+0x50>
 80113de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113e0:	68db      	ldr	r3, [r3, #12]
 80113e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80113e6:	b9b8      	cbnz	r0, 8011418 <_Balloc+0x68>
 80113e8:	2101      	movs	r1, #1
 80113ea:	fa01 f605 	lsl.w	r6, r1, r5
 80113ee:	1d72      	adds	r2, r6, #5
 80113f0:	4620      	mov	r0, r4
 80113f2:	0092      	lsls	r2, r2, #2
 80113f4:	f000 fc94 	bl	8011d20 <_calloc_r>
 80113f8:	b160      	cbz	r0, 8011414 <_Balloc+0x64>
 80113fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80113fe:	e00e      	b.n	801141e <_Balloc+0x6e>
 8011400:	2221      	movs	r2, #33	; 0x21
 8011402:	2104      	movs	r1, #4
 8011404:	4620      	mov	r0, r4
 8011406:	f000 fc8b 	bl	8011d20 <_calloc_r>
 801140a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801140c:	60f0      	str	r0, [r6, #12]
 801140e:	68db      	ldr	r3, [r3, #12]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d1e4      	bne.n	80113de <_Balloc+0x2e>
 8011414:	2000      	movs	r0, #0
 8011416:	bd70      	pop	{r4, r5, r6, pc}
 8011418:	6802      	ldr	r2, [r0, #0]
 801141a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801141e:	2300      	movs	r3, #0
 8011420:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011424:	e7f7      	b.n	8011416 <_Balloc+0x66>
 8011426:	bf00      	nop
 8011428:	08012e66 	.word	0x08012e66
 801142c:	08012f6c 	.word	0x08012f6c

08011430 <_Bfree>:
 8011430:	b570      	push	{r4, r5, r6, lr}
 8011432:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011434:	4605      	mov	r5, r0
 8011436:	460c      	mov	r4, r1
 8011438:	b976      	cbnz	r6, 8011458 <_Bfree+0x28>
 801143a:	2010      	movs	r0, #16
 801143c:	f7fc ff90 	bl	800e360 <malloc>
 8011440:	4602      	mov	r2, r0
 8011442:	6268      	str	r0, [r5, #36]	; 0x24
 8011444:	b920      	cbnz	r0, 8011450 <_Bfree+0x20>
 8011446:	218a      	movs	r1, #138	; 0x8a
 8011448:	4b08      	ldr	r3, [pc, #32]	; (801146c <_Bfree+0x3c>)
 801144a:	4809      	ldr	r0, [pc, #36]	; (8011470 <_Bfree+0x40>)
 801144c:	f000 fdf8 	bl	8012040 <__assert_func>
 8011450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011454:	6006      	str	r6, [r0, #0]
 8011456:	60c6      	str	r6, [r0, #12]
 8011458:	b13c      	cbz	r4, 801146a <_Bfree+0x3a>
 801145a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801145c:	6862      	ldr	r2, [r4, #4]
 801145e:	68db      	ldr	r3, [r3, #12]
 8011460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011464:	6021      	str	r1, [r4, #0]
 8011466:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801146a:	bd70      	pop	{r4, r5, r6, pc}
 801146c:	08012e66 	.word	0x08012e66
 8011470:	08012f6c 	.word	0x08012f6c

08011474 <__multadd>:
 8011474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011478:	4698      	mov	r8, r3
 801147a:	460c      	mov	r4, r1
 801147c:	2300      	movs	r3, #0
 801147e:	690e      	ldr	r6, [r1, #16]
 8011480:	4607      	mov	r7, r0
 8011482:	f101 0014 	add.w	r0, r1, #20
 8011486:	6805      	ldr	r5, [r0, #0]
 8011488:	3301      	adds	r3, #1
 801148a:	b2a9      	uxth	r1, r5
 801148c:	fb02 8101 	mla	r1, r2, r1, r8
 8011490:	0c2d      	lsrs	r5, r5, #16
 8011492:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011496:	fb02 c505 	mla	r5, r2, r5, ip
 801149a:	b289      	uxth	r1, r1
 801149c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80114a0:	429e      	cmp	r6, r3
 80114a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80114a6:	f840 1b04 	str.w	r1, [r0], #4
 80114aa:	dcec      	bgt.n	8011486 <__multadd+0x12>
 80114ac:	f1b8 0f00 	cmp.w	r8, #0
 80114b0:	d022      	beq.n	80114f8 <__multadd+0x84>
 80114b2:	68a3      	ldr	r3, [r4, #8]
 80114b4:	42b3      	cmp	r3, r6
 80114b6:	dc19      	bgt.n	80114ec <__multadd+0x78>
 80114b8:	6861      	ldr	r1, [r4, #4]
 80114ba:	4638      	mov	r0, r7
 80114bc:	3101      	adds	r1, #1
 80114be:	f7ff ff77 	bl	80113b0 <_Balloc>
 80114c2:	4605      	mov	r5, r0
 80114c4:	b928      	cbnz	r0, 80114d2 <__multadd+0x5e>
 80114c6:	4602      	mov	r2, r0
 80114c8:	21b5      	movs	r1, #181	; 0xb5
 80114ca:	4b0d      	ldr	r3, [pc, #52]	; (8011500 <__multadd+0x8c>)
 80114cc:	480d      	ldr	r0, [pc, #52]	; (8011504 <__multadd+0x90>)
 80114ce:	f000 fdb7 	bl	8012040 <__assert_func>
 80114d2:	6922      	ldr	r2, [r4, #16]
 80114d4:	f104 010c 	add.w	r1, r4, #12
 80114d8:	3202      	adds	r2, #2
 80114da:	0092      	lsls	r2, r2, #2
 80114dc:	300c      	adds	r0, #12
 80114de:	f7fc ff4f 	bl	800e380 <memcpy>
 80114e2:	4621      	mov	r1, r4
 80114e4:	4638      	mov	r0, r7
 80114e6:	f7ff ffa3 	bl	8011430 <_Bfree>
 80114ea:	462c      	mov	r4, r5
 80114ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80114f0:	3601      	adds	r6, #1
 80114f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80114f6:	6126      	str	r6, [r4, #16]
 80114f8:	4620      	mov	r0, r4
 80114fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114fe:	bf00      	nop
 8011500:	08012edc 	.word	0x08012edc
 8011504:	08012f6c 	.word	0x08012f6c

08011508 <__s2b>:
 8011508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801150c:	4615      	mov	r5, r2
 801150e:	2209      	movs	r2, #9
 8011510:	461f      	mov	r7, r3
 8011512:	3308      	adds	r3, #8
 8011514:	460c      	mov	r4, r1
 8011516:	fb93 f3f2 	sdiv	r3, r3, r2
 801151a:	4606      	mov	r6, r0
 801151c:	2201      	movs	r2, #1
 801151e:	2100      	movs	r1, #0
 8011520:	429a      	cmp	r2, r3
 8011522:	db09      	blt.n	8011538 <__s2b+0x30>
 8011524:	4630      	mov	r0, r6
 8011526:	f7ff ff43 	bl	80113b0 <_Balloc>
 801152a:	b940      	cbnz	r0, 801153e <__s2b+0x36>
 801152c:	4602      	mov	r2, r0
 801152e:	21ce      	movs	r1, #206	; 0xce
 8011530:	4b18      	ldr	r3, [pc, #96]	; (8011594 <__s2b+0x8c>)
 8011532:	4819      	ldr	r0, [pc, #100]	; (8011598 <__s2b+0x90>)
 8011534:	f000 fd84 	bl	8012040 <__assert_func>
 8011538:	0052      	lsls	r2, r2, #1
 801153a:	3101      	adds	r1, #1
 801153c:	e7f0      	b.n	8011520 <__s2b+0x18>
 801153e:	9b08      	ldr	r3, [sp, #32]
 8011540:	2d09      	cmp	r5, #9
 8011542:	6143      	str	r3, [r0, #20]
 8011544:	f04f 0301 	mov.w	r3, #1
 8011548:	6103      	str	r3, [r0, #16]
 801154a:	dd16      	ble.n	801157a <__s2b+0x72>
 801154c:	f104 0909 	add.w	r9, r4, #9
 8011550:	46c8      	mov	r8, r9
 8011552:	442c      	add	r4, r5
 8011554:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011558:	4601      	mov	r1, r0
 801155a:	220a      	movs	r2, #10
 801155c:	4630      	mov	r0, r6
 801155e:	3b30      	subs	r3, #48	; 0x30
 8011560:	f7ff ff88 	bl	8011474 <__multadd>
 8011564:	45a0      	cmp	r8, r4
 8011566:	d1f5      	bne.n	8011554 <__s2b+0x4c>
 8011568:	f1a5 0408 	sub.w	r4, r5, #8
 801156c:	444c      	add	r4, r9
 801156e:	1b2d      	subs	r5, r5, r4
 8011570:	1963      	adds	r3, r4, r5
 8011572:	42bb      	cmp	r3, r7
 8011574:	db04      	blt.n	8011580 <__s2b+0x78>
 8011576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801157a:	2509      	movs	r5, #9
 801157c:	340a      	adds	r4, #10
 801157e:	e7f6      	b.n	801156e <__s2b+0x66>
 8011580:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011584:	4601      	mov	r1, r0
 8011586:	220a      	movs	r2, #10
 8011588:	4630      	mov	r0, r6
 801158a:	3b30      	subs	r3, #48	; 0x30
 801158c:	f7ff ff72 	bl	8011474 <__multadd>
 8011590:	e7ee      	b.n	8011570 <__s2b+0x68>
 8011592:	bf00      	nop
 8011594:	08012edc 	.word	0x08012edc
 8011598:	08012f6c 	.word	0x08012f6c

0801159c <__hi0bits>:
 801159c:	0c02      	lsrs	r2, r0, #16
 801159e:	0412      	lsls	r2, r2, #16
 80115a0:	4603      	mov	r3, r0
 80115a2:	b9ca      	cbnz	r2, 80115d8 <__hi0bits+0x3c>
 80115a4:	0403      	lsls	r3, r0, #16
 80115a6:	2010      	movs	r0, #16
 80115a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80115ac:	bf04      	itt	eq
 80115ae:	021b      	lsleq	r3, r3, #8
 80115b0:	3008      	addeq	r0, #8
 80115b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80115b6:	bf04      	itt	eq
 80115b8:	011b      	lsleq	r3, r3, #4
 80115ba:	3004      	addeq	r0, #4
 80115bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80115c0:	bf04      	itt	eq
 80115c2:	009b      	lsleq	r3, r3, #2
 80115c4:	3002      	addeq	r0, #2
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	db05      	blt.n	80115d6 <__hi0bits+0x3a>
 80115ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80115ce:	f100 0001 	add.w	r0, r0, #1
 80115d2:	bf08      	it	eq
 80115d4:	2020      	moveq	r0, #32
 80115d6:	4770      	bx	lr
 80115d8:	2000      	movs	r0, #0
 80115da:	e7e5      	b.n	80115a8 <__hi0bits+0xc>

080115dc <__lo0bits>:
 80115dc:	6803      	ldr	r3, [r0, #0]
 80115de:	4602      	mov	r2, r0
 80115e0:	f013 0007 	ands.w	r0, r3, #7
 80115e4:	d00b      	beq.n	80115fe <__lo0bits+0x22>
 80115e6:	07d9      	lsls	r1, r3, #31
 80115e8:	d422      	bmi.n	8011630 <__lo0bits+0x54>
 80115ea:	0798      	lsls	r0, r3, #30
 80115ec:	bf49      	itett	mi
 80115ee:	085b      	lsrmi	r3, r3, #1
 80115f0:	089b      	lsrpl	r3, r3, #2
 80115f2:	2001      	movmi	r0, #1
 80115f4:	6013      	strmi	r3, [r2, #0]
 80115f6:	bf5c      	itt	pl
 80115f8:	2002      	movpl	r0, #2
 80115fa:	6013      	strpl	r3, [r2, #0]
 80115fc:	4770      	bx	lr
 80115fe:	b299      	uxth	r1, r3
 8011600:	b909      	cbnz	r1, 8011606 <__lo0bits+0x2a>
 8011602:	2010      	movs	r0, #16
 8011604:	0c1b      	lsrs	r3, r3, #16
 8011606:	f013 0fff 	tst.w	r3, #255	; 0xff
 801160a:	bf04      	itt	eq
 801160c:	0a1b      	lsreq	r3, r3, #8
 801160e:	3008      	addeq	r0, #8
 8011610:	0719      	lsls	r1, r3, #28
 8011612:	bf04      	itt	eq
 8011614:	091b      	lsreq	r3, r3, #4
 8011616:	3004      	addeq	r0, #4
 8011618:	0799      	lsls	r1, r3, #30
 801161a:	bf04      	itt	eq
 801161c:	089b      	lsreq	r3, r3, #2
 801161e:	3002      	addeq	r0, #2
 8011620:	07d9      	lsls	r1, r3, #31
 8011622:	d403      	bmi.n	801162c <__lo0bits+0x50>
 8011624:	085b      	lsrs	r3, r3, #1
 8011626:	f100 0001 	add.w	r0, r0, #1
 801162a:	d003      	beq.n	8011634 <__lo0bits+0x58>
 801162c:	6013      	str	r3, [r2, #0]
 801162e:	4770      	bx	lr
 8011630:	2000      	movs	r0, #0
 8011632:	4770      	bx	lr
 8011634:	2020      	movs	r0, #32
 8011636:	4770      	bx	lr

08011638 <__i2b>:
 8011638:	b510      	push	{r4, lr}
 801163a:	460c      	mov	r4, r1
 801163c:	2101      	movs	r1, #1
 801163e:	f7ff feb7 	bl	80113b0 <_Balloc>
 8011642:	4602      	mov	r2, r0
 8011644:	b928      	cbnz	r0, 8011652 <__i2b+0x1a>
 8011646:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801164a:	4b04      	ldr	r3, [pc, #16]	; (801165c <__i2b+0x24>)
 801164c:	4804      	ldr	r0, [pc, #16]	; (8011660 <__i2b+0x28>)
 801164e:	f000 fcf7 	bl	8012040 <__assert_func>
 8011652:	2301      	movs	r3, #1
 8011654:	6144      	str	r4, [r0, #20]
 8011656:	6103      	str	r3, [r0, #16]
 8011658:	bd10      	pop	{r4, pc}
 801165a:	bf00      	nop
 801165c:	08012edc 	.word	0x08012edc
 8011660:	08012f6c 	.word	0x08012f6c

08011664 <__multiply>:
 8011664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011668:	4614      	mov	r4, r2
 801166a:	690a      	ldr	r2, [r1, #16]
 801166c:	6923      	ldr	r3, [r4, #16]
 801166e:	460d      	mov	r5, r1
 8011670:	429a      	cmp	r2, r3
 8011672:	bfbe      	ittt	lt
 8011674:	460b      	movlt	r3, r1
 8011676:	4625      	movlt	r5, r4
 8011678:	461c      	movlt	r4, r3
 801167a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801167e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011682:	68ab      	ldr	r3, [r5, #8]
 8011684:	6869      	ldr	r1, [r5, #4]
 8011686:	eb0a 0709 	add.w	r7, sl, r9
 801168a:	42bb      	cmp	r3, r7
 801168c:	b085      	sub	sp, #20
 801168e:	bfb8      	it	lt
 8011690:	3101      	addlt	r1, #1
 8011692:	f7ff fe8d 	bl	80113b0 <_Balloc>
 8011696:	b930      	cbnz	r0, 80116a6 <__multiply+0x42>
 8011698:	4602      	mov	r2, r0
 801169a:	f240 115d 	movw	r1, #349	; 0x15d
 801169e:	4b41      	ldr	r3, [pc, #260]	; (80117a4 <__multiply+0x140>)
 80116a0:	4841      	ldr	r0, [pc, #260]	; (80117a8 <__multiply+0x144>)
 80116a2:	f000 fccd 	bl	8012040 <__assert_func>
 80116a6:	f100 0614 	add.w	r6, r0, #20
 80116aa:	4633      	mov	r3, r6
 80116ac:	2200      	movs	r2, #0
 80116ae:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80116b2:	4543      	cmp	r3, r8
 80116b4:	d31e      	bcc.n	80116f4 <__multiply+0x90>
 80116b6:	f105 0c14 	add.w	ip, r5, #20
 80116ba:	f104 0314 	add.w	r3, r4, #20
 80116be:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80116c2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80116c6:	9202      	str	r2, [sp, #8]
 80116c8:	ebac 0205 	sub.w	r2, ip, r5
 80116cc:	3a15      	subs	r2, #21
 80116ce:	f022 0203 	bic.w	r2, r2, #3
 80116d2:	3204      	adds	r2, #4
 80116d4:	f105 0115 	add.w	r1, r5, #21
 80116d8:	458c      	cmp	ip, r1
 80116da:	bf38      	it	cc
 80116dc:	2204      	movcc	r2, #4
 80116de:	9201      	str	r2, [sp, #4]
 80116e0:	9a02      	ldr	r2, [sp, #8]
 80116e2:	9303      	str	r3, [sp, #12]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d808      	bhi.n	80116fa <__multiply+0x96>
 80116e8:	2f00      	cmp	r7, #0
 80116ea:	dc55      	bgt.n	8011798 <__multiply+0x134>
 80116ec:	6107      	str	r7, [r0, #16]
 80116ee:	b005      	add	sp, #20
 80116f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f4:	f843 2b04 	str.w	r2, [r3], #4
 80116f8:	e7db      	b.n	80116b2 <__multiply+0x4e>
 80116fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80116fe:	f1ba 0f00 	cmp.w	sl, #0
 8011702:	d020      	beq.n	8011746 <__multiply+0xe2>
 8011704:	46b1      	mov	r9, r6
 8011706:	2200      	movs	r2, #0
 8011708:	f105 0e14 	add.w	lr, r5, #20
 801170c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011710:	f8d9 b000 	ldr.w	fp, [r9]
 8011714:	b2a1      	uxth	r1, r4
 8011716:	fa1f fb8b 	uxth.w	fp, fp
 801171a:	fb0a b101 	mla	r1, sl, r1, fp
 801171e:	4411      	add	r1, r2
 8011720:	f8d9 2000 	ldr.w	r2, [r9]
 8011724:	0c24      	lsrs	r4, r4, #16
 8011726:	0c12      	lsrs	r2, r2, #16
 8011728:	fb0a 2404 	mla	r4, sl, r4, r2
 801172c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011730:	b289      	uxth	r1, r1
 8011732:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011736:	45f4      	cmp	ip, lr
 8011738:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801173c:	f849 1b04 	str.w	r1, [r9], #4
 8011740:	d8e4      	bhi.n	801170c <__multiply+0xa8>
 8011742:	9901      	ldr	r1, [sp, #4]
 8011744:	5072      	str	r2, [r6, r1]
 8011746:	9a03      	ldr	r2, [sp, #12]
 8011748:	3304      	adds	r3, #4
 801174a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801174e:	f1b9 0f00 	cmp.w	r9, #0
 8011752:	d01f      	beq.n	8011794 <__multiply+0x130>
 8011754:	46b6      	mov	lr, r6
 8011756:	f04f 0a00 	mov.w	sl, #0
 801175a:	6834      	ldr	r4, [r6, #0]
 801175c:	f105 0114 	add.w	r1, r5, #20
 8011760:	880a      	ldrh	r2, [r1, #0]
 8011762:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011766:	b2a4      	uxth	r4, r4
 8011768:	fb09 b202 	mla	r2, r9, r2, fp
 801176c:	4492      	add	sl, r2
 801176e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011772:	f84e 4b04 	str.w	r4, [lr], #4
 8011776:	f851 4b04 	ldr.w	r4, [r1], #4
 801177a:	f8be 2000 	ldrh.w	r2, [lr]
 801177e:	0c24      	lsrs	r4, r4, #16
 8011780:	fb09 2404 	mla	r4, r9, r4, r2
 8011784:	458c      	cmp	ip, r1
 8011786:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801178a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801178e:	d8e7      	bhi.n	8011760 <__multiply+0xfc>
 8011790:	9a01      	ldr	r2, [sp, #4]
 8011792:	50b4      	str	r4, [r6, r2]
 8011794:	3604      	adds	r6, #4
 8011796:	e7a3      	b.n	80116e0 <__multiply+0x7c>
 8011798:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801179c:	2b00      	cmp	r3, #0
 801179e:	d1a5      	bne.n	80116ec <__multiply+0x88>
 80117a0:	3f01      	subs	r7, #1
 80117a2:	e7a1      	b.n	80116e8 <__multiply+0x84>
 80117a4:	08012edc 	.word	0x08012edc
 80117a8:	08012f6c 	.word	0x08012f6c

080117ac <__pow5mult>:
 80117ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117b0:	4615      	mov	r5, r2
 80117b2:	f012 0203 	ands.w	r2, r2, #3
 80117b6:	4606      	mov	r6, r0
 80117b8:	460f      	mov	r7, r1
 80117ba:	d007      	beq.n	80117cc <__pow5mult+0x20>
 80117bc:	4c25      	ldr	r4, [pc, #148]	; (8011854 <__pow5mult+0xa8>)
 80117be:	3a01      	subs	r2, #1
 80117c0:	2300      	movs	r3, #0
 80117c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80117c6:	f7ff fe55 	bl	8011474 <__multadd>
 80117ca:	4607      	mov	r7, r0
 80117cc:	10ad      	asrs	r5, r5, #2
 80117ce:	d03d      	beq.n	801184c <__pow5mult+0xa0>
 80117d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80117d2:	b97c      	cbnz	r4, 80117f4 <__pow5mult+0x48>
 80117d4:	2010      	movs	r0, #16
 80117d6:	f7fc fdc3 	bl	800e360 <malloc>
 80117da:	4602      	mov	r2, r0
 80117dc:	6270      	str	r0, [r6, #36]	; 0x24
 80117de:	b928      	cbnz	r0, 80117ec <__pow5mult+0x40>
 80117e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80117e4:	4b1c      	ldr	r3, [pc, #112]	; (8011858 <__pow5mult+0xac>)
 80117e6:	481d      	ldr	r0, [pc, #116]	; (801185c <__pow5mult+0xb0>)
 80117e8:	f000 fc2a 	bl	8012040 <__assert_func>
 80117ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80117f0:	6004      	str	r4, [r0, #0]
 80117f2:	60c4      	str	r4, [r0, #12]
 80117f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80117f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80117fc:	b94c      	cbnz	r4, 8011812 <__pow5mult+0x66>
 80117fe:	f240 2171 	movw	r1, #625	; 0x271
 8011802:	4630      	mov	r0, r6
 8011804:	f7ff ff18 	bl	8011638 <__i2b>
 8011808:	2300      	movs	r3, #0
 801180a:	4604      	mov	r4, r0
 801180c:	f8c8 0008 	str.w	r0, [r8, #8]
 8011810:	6003      	str	r3, [r0, #0]
 8011812:	f04f 0900 	mov.w	r9, #0
 8011816:	07eb      	lsls	r3, r5, #31
 8011818:	d50a      	bpl.n	8011830 <__pow5mult+0x84>
 801181a:	4639      	mov	r1, r7
 801181c:	4622      	mov	r2, r4
 801181e:	4630      	mov	r0, r6
 8011820:	f7ff ff20 	bl	8011664 <__multiply>
 8011824:	4680      	mov	r8, r0
 8011826:	4639      	mov	r1, r7
 8011828:	4630      	mov	r0, r6
 801182a:	f7ff fe01 	bl	8011430 <_Bfree>
 801182e:	4647      	mov	r7, r8
 8011830:	106d      	asrs	r5, r5, #1
 8011832:	d00b      	beq.n	801184c <__pow5mult+0xa0>
 8011834:	6820      	ldr	r0, [r4, #0]
 8011836:	b938      	cbnz	r0, 8011848 <__pow5mult+0x9c>
 8011838:	4622      	mov	r2, r4
 801183a:	4621      	mov	r1, r4
 801183c:	4630      	mov	r0, r6
 801183e:	f7ff ff11 	bl	8011664 <__multiply>
 8011842:	6020      	str	r0, [r4, #0]
 8011844:	f8c0 9000 	str.w	r9, [r0]
 8011848:	4604      	mov	r4, r0
 801184a:	e7e4      	b.n	8011816 <__pow5mult+0x6a>
 801184c:	4638      	mov	r0, r7
 801184e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011852:	bf00      	nop
 8011854:	080130c0 	.word	0x080130c0
 8011858:	08012e66 	.word	0x08012e66
 801185c:	08012f6c 	.word	0x08012f6c

08011860 <__lshift>:
 8011860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011864:	460c      	mov	r4, r1
 8011866:	4607      	mov	r7, r0
 8011868:	4691      	mov	r9, r2
 801186a:	6923      	ldr	r3, [r4, #16]
 801186c:	6849      	ldr	r1, [r1, #4]
 801186e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011872:	68a3      	ldr	r3, [r4, #8]
 8011874:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011878:	f108 0601 	add.w	r6, r8, #1
 801187c:	42b3      	cmp	r3, r6
 801187e:	db0b      	blt.n	8011898 <__lshift+0x38>
 8011880:	4638      	mov	r0, r7
 8011882:	f7ff fd95 	bl	80113b0 <_Balloc>
 8011886:	4605      	mov	r5, r0
 8011888:	b948      	cbnz	r0, 801189e <__lshift+0x3e>
 801188a:	4602      	mov	r2, r0
 801188c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011890:	4b27      	ldr	r3, [pc, #156]	; (8011930 <__lshift+0xd0>)
 8011892:	4828      	ldr	r0, [pc, #160]	; (8011934 <__lshift+0xd4>)
 8011894:	f000 fbd4 	bl	8012040 <__assert_func>
 8011898:	3101      	adds	r1, #1
 801189a:	005b      	lsls	r3, r3, #1
 801189c:	e7ee      	b.n	801187c <__lshift+0x1c>
 801189e:	2300      	movs	r3, #0
 80118a0:	f100 0114 	add.w	r1, r0, #20
 80118a4:	f100 0210 	add.w	r2, r0, #16
 80118a8:	4618      	mov	r0, r3
 80118aa:	4553      	cmp	r3, sl
 80118ac:	db33      	blt.n	8011916 <__lshift+0xb6>
 80118ae:	6920      	ldr	r0, [r4, #16]
 80118b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80118b4:	f104 0314 	add.w	r3, r4, #20
 80118b8:	f019 091f 	ands.w	r9, r9, #31
 80118bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80118c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80118c4:	d02b      	beq.n	801191e <__lshift+0xbe>
 80118c6:	468a      	mov	sl, r1
 80118c8:	2200      	movs	r2, #0
 80118ca:	f1c9 0e20 	rsb	lr, r9, #32
 80118ce:	6818      	ldr	r0, [r3, #0]
 80118d0:	fa00 f009 	lsl.w	r0, r0, r9
 80118d4:	4302      	orrs	r2, r0
 80118d6:	f84a 2b04 	str.w	r2, [sl], #4
 80118da:	f853 2b04 	ldr.w	r2, [r3], #4
 80118de:	459c      	cmp	ip, r3
 80118e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80118e4:	d8f3      	bhi.n	80118ce <__lshift+0x6e>
 80118e6:	ebac 0304 	sub.w	r3, ip, r4
 80118ea:	3b15      	subs	r3, #21
 80118ec:	f023 0303 	bic.w	r3, r3, #3
 80118f0:	3304      	adds	r3, #4
 80118f2:	f104 0015 	add.w	r0, r4, #21
 80118f6:	4584      	cmp	ip, r0
 80118f8:	bf38      	it	cc
 80118fa:	2304      	movcc	r3, #4
 80118fc:	50ca      	str	r2, [r1, r3]
 80118fe:	b10a      	cbz	r2, 8011904 <__lshift+0xa4>
 8011900:	f108 0602 	add.w	r6, r8, #2
 8011904:	3e01      	subs	r6, #1
 8011906:	4638      	mov	r0, r7
 8011908:	4621      	mov	r1, r4
 801190a:	612e      	str	r6, [r5, #16]
 801190c:	f7ff fd90 	bl	8011430 <_Bfree>
 8011910:	4628      	mov	r0, r5
 8011912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011916:	f842 0f04 	str.w	r0, [r2, #4]!
 801191a:	3301      	adds	r3, #1
 801191c:	e7c5      	b.n	80118aa <__lshift+0x4a>
 801191e:	3904      	subs	r1, #4
 8011920:	f853 2b04 	ldr.w	r2, [r3], #4
 8011924:	459c      	cmp	ip, r3
 8011926:	f841 2f04 	str.w	r2, [r1, #4]!
 801192a:	d8f9      	bhi.n	8011920 <__lshift+0xc0>
 801192c:	e7ea      	b.n	8011904 <__lshift+0xa4>
 801192e:	bf00      	nop
 8011930:	08012edc 	.word	0x08012edc
 8011934:	08012f6c 	.word	0x08012f6c

08011938 <__mcmp>:
 8011938:	4603      	mov	r3, r0
 801193a:	690a      	ldr	r2, [r1, #16]
 801193c:	6900      	ldr	r0, [r0, #16]
 801193e:	b530      	push	{r4, r5, lr}
 8011940:	1a80      	subs	r0, r0, r2
 8011942:	d10d      	bne.n	8011960 <__mcmp+0x28>
 8011944:	3314      	adds	r3, #20
 8011946:	3114      	adds	r1, #20
 8011948:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801194c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011950:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011954:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011958:	4295      	cmp	r5, r2
 801195a:	d002      	beq.n	8011962 <__mcmp+0x2a>
 801195c:	d304      	bcc.n	8011968 <__mcmp+0x30>
 801195e:	2001      	movs	r0, #1
 8011960:	bd30      	pop	{r4, r5, pc}
 8011962:	42a3      	cmp	r3, r4
 8011964:	d3f4      	bcc.n	8011950 <__mcmp+0x18>
 8011966:	e7fb      	b.n	8011960 <__mcmp+0x28>
 8011968:	f04f 30ff 	mov.w	r0, #4294967295
 801196c:	e7f8      	b.n	8011960 <__mcmp+0x28>
	...

08011970 <__mdiff>:
 8011970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011974:	460c      	mov	r4, r1
 8011976:	4606      	mov	r6, r0
 8011978:	4611      	mov	r1, r2
 801197a:	4620      	mov	r0, r4
 801197c:	4692      	mov	sl, r2
 801197e:	f7ff ffdb 	bl	8011938 <__mcmp>
 8011982:	1e05      	subs	r5, r0, #0
 8011984:	d111      	bne.n	80119aa <__mdiff+0x3a>
 8011986:	4629      	mov	r1, r5
 8011988:	4630      	mov	r0, r6
 801198a:	f7ff fd11 	bl	80113b0 <_Balloc>
 801198e:	4602      	mov	r2, r0
 8011990:	b928      	cbnz	r0, 801199e <__mdiff+0x2e>
 8011992:	f240 2132 	movw	r1, #562	; 0x232
 8011996:	4b3c      	ldr	r3, [pc, #240]	; (8011a88 <__mdiff+0x118>)
 8011998:	483c      	ldr	r0, [pc, #240]	; (8011a8c <__mdiff+0x11c>)
 801199a:	f000 fb51 	bl	8012040 <__assert_func>
 801199e:	2301      	movs	r3, #1
 80119a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80119a4:	4610      	mov	r0, r2
 80119a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119aa:	bfa4      	itt	ge
 80119ac:	4653      	movge	r3, sl
 80119ae:	46a2      	movge	sl, r4
 80119b0:	4630      	mov	r0, r6
 80119b2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80119b6:	bfa6      	itte	ge
 80119b8:	461c      	movge	r4, r3
 80119ba:	2500      	movge	r5, #0
 80119bc:	2501      	movlt	r5, #1
 80119be:	f7ff fcf7 	bl	80113b0 <_Balloc>
 80119c2:	4602      	mov	r2, r0
 80119c4:	b918      	cbnz	r0, 80119ce <__mdiff+0x5e>
 80119c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80119ca:	4b2f      	ldr	r3, [pc, #188]	; (8011a88 <__mdiff+0x118>)
 80119cc:	e7e4      	b.n	8011998 <__mdiff+0x28>
 80119ce:	f100 0814 	add.w	r8, r0, #20
 80119d2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80119d6:	60c5      	str	r5, [r0, #12]
 80119d8:	f04f 0c00 	mov.w	ip, #0
 80119dc:	f10a 0514 	add.w	r5, sl, #20
 80119e0:	f10a 0010 	add.w	r0, sl, #16
 80119e4:	46c2      	mov	sl, r8
 80119e6:	6926      	ldr	r6, [r4, #16]
 80119e8:	f104 0914 	add.w	r9, r4, #20
 80119ec:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80119f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80119f4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80119f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80119fc:	fa1f f18b 	uxth.w	r1, fp
 8011a00:	4461      	add	r1, ip
 8011a02:	fa1f fc83 	uxth.w	ip, r3
 8011a06:	0c1b      	lsrs	r3, r3, #16
 8011a08:	eba1 010c 	sub.w	r1, r1, ip
 8011a0c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011a10:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011a14:	b289      	uxth	r1, r1
 8011a16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8011a1a:	454e      	cmp	r6, r9
 8011a1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011a20:	f84a 3b04 	str.w	r3, [sl], #4
 8011a24:	d8e6      	bhi.n	80119f4 <__mdiff+0x84>
 8011a26:	1b33      	subs	r3, r6, r4
 8011a28:	3b15      	subs	r3, #21
 8011a2a:	f023 0303 	bic.w	r3, r3, #3
 8011a2e:	3415      	adds	r4, #21
 8011a30:	3304      	adds	r3, #4
 8011a32:	42a6      	cmp	r6, r4
 8011a34:	bf38      	it	cc
 8011a36:	2304      	movcc	r3, #4
 8011a38:	441d      	add	r5, r3
 8011a3a:	4443      	add	r3, r8
 8011a3c:	461e      	mov	r6, r3
 8011a3e:	462c      	mov	r4, r5
 8011a40:	4574      	cmp	r4, lr
 8011a42:	d30e      	bcc.n	8011a62 <__mdiff+0xf2>
 8011a44:	f10e 0103 	add.w	r1, lr, #3
 8011a48:	1b49      	subs	r1, r1, r5
 8011a4a:	f021 0103 	bic.w	r1, r1, #3
 8011a4e:	3d03      	subs	r5, #3
 8011a50:	45ae      	cmp	lr, r5
 8011a52:	bf38      	it	cc
 8011a54:	2100      	movcc	r1, #0
 8011a56:	4419      	add	r1, r3
 8011a58:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8011a5c:	b18b      	cbz	r3, 8011a82 <__mdiff+0x112>
 8011a5e:	6117      	str	r7, [r2, #16]
 8011a60:	e7a0      	b.n	80119a4 <__mdiff+0x34>
 8011a62:	f854 8b04 	ldr.w	r8, [r4], #4
 8011a66:	fa1f f188 	uxth.w	r1, r8
 8011a6a:	4461      	add	r1, ip
 8011a6c:	1408      	asrs	r0, r1, #16
 8011a6e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8011a72:	b289      	uxth	r1, r1
 8011a74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011a78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011a7c:	f846 1b04 	str.w	r1, [r6], #4
 8011a80:	e7de      	b.n	8011a40 <__mdiff+0xd0>
 8011a82:	3f01      	subs	r7, #1
 8011a84:	e7e8      	b.n	8011a58 <__mdiff+0xe8>
 8011a86:	bf00      	nop
 8011a88:	08012edc 	.word	0x08012edc
 8011a8c:	08012f6c 	.word	0x08012f6c

08011a90 <__ulp>:
 8011a90:	4b11      	ldr	r3, [pc, #68]	; (8011ad8 <__ulp+0x48>)
 8011a92:	400b      	ands	r3, r1
 8011a94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	dd02      	ble.n	8011aa2 <__ulp+0x12>
 8011a9c:	2000      	movs	r0, #0
 8011a9e:	4619      	mov	r1, r3
 8011aa0:	4770      	bx	lr
 8011aa2:	425b      	negs	r3, r3
 8011aa4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011aa8:	f04f 0000 	mov.w	r0, #0
 8011aac:	f04f 0100 	mov.w	r1, #0
 8011ab0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011ab4:	da04      	bge.n	8011ac0 <__ulp+0x30>
 8011ab6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011aba:	fa43 f102 	asr.w	r1, r3, r2
 8011abe:	4770      	bx	lr
 8011ac0:	f1a2 0314 	sub.w	r3, r2, #20
 8011ac4:	2b1e      	cmp	r3, #30
 8011ac6:	bfd6      	itet	le
 8011ac8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011acc:	2301      	movgt	r3, #1
 8011ace:	fa22 f303 	lsrle.w	r3, r2, r3
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	4770      	bx	lr
 8011ad6:	bf00      	nop
 8011ad8:	7ff00000 	.word	0x7ff00000

08011adc <__b2d>:
 8011adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ae0:	6907      	ldr	r7, [r0, #16]
 8011ae2:	f100 0914 	add.w	r9, r0, #20
 8011ae6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8011aea:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8011aee:	f1a7 0804 	sub.w	r8, r7, #4
 8011af2:	4630      	mov	r0, r6
 8011af4:	f7ff fd52 	bl	801159c <__hi0bits>
 8011af8:	f1c0 0320 	rsb	r3, r0, #32
 8011afc:	280a      	cmp	r0, #10
 8011afe:	600b      	str	r3, [r1, #0]
 8011b00:	491f      	ldr	r1, [pc, #124]	; (8011b80 <__b2d+0xa4>)
 8011b02:	dc17      	bgt.n	8011b34 <__b2d+0x58>
 8011b04:	45c1      	cmp	r9, r8
 8011b06:	bf28      	it	cs
 8011b08:	2200      	movcs	r2, #0
 8011b0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8011b0e:	fa26 f30c 	lsr.w	r3, r6, ip
 8011b12:	bf38      	it	cc
 8011b14:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8011b18:	ea43 0501 	orr.w	r5, r3, r1
 8011b1c:	f100 0315 	add.w	r3, r0, #21
 8011b20:	fa06 f303 	lsl.w	r3, r6, r3
 8011b24:	fa22 f20c 	lsr.w	r2, r2, ip
 8011b28:	ea43 0402 	orr.w	r4, r3, r2
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	4629      	mov	r1, r5
 8011b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b34:	45c1      	cmp	r9, r8
 8011b36:	bf2e      	itee	cs
 8011b38:	2200      	movcs	r2, #0
 8011b3a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8011b3e:	f1a7 0808 	subcc.w	r8, r7, #8
 8011b42:	f1b0 030b 	subs.w	r3, r0, #11
 8011b46:	d016      	beq.n	8011b76 <__b2d+0x9a>
 8011b48:	f1c3 0720 	rsb	r7, r3, #32
 8011b4c:	fa22 f107 	lsr.w	r1, r2, r7
 8011b50:	45c8      	cmp	r8, r9
 8011b52:	fa06 f603 	lsl.w	r6, r6, r3
 8011b56:	ea46 0601 	orr.w	r6, r6, r1
 8011b5a:	bf94      	ite	ls
 8011b5c:	2100      	movls	r1, #0
 8011b5e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8011b62:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8011b66:	fa02 f003 	lsl.w	r0, r2, r3
 8011b6a:	40f9      	lsrs	r1, r7
 8011b6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011b70:	ea40 0401 	orr.w	r4, r0, r1
 8011b74:	e7da      	b.n	8011b2c <__b2d+0x50>
 8011b76:	4614      	mov	r4, r2
 8011b78:	ea46 0501 	orr.w	r5, r6, r1
 8011b7c:	e7d6      	b.n	8011b2c <__b2d+0x50>
 8011b7e:	bf00      	nop
 8011b80:	3ff00000 	.word	0x3ff00000

08011b84 <__d2b>:
 8011b84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011b88:	2101      	movs	r1, #1
 8011b8a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8011b8e:	4690      	mov	r8, r2
 8011b90:	461d      	mov	r5, r3
 8011b92:	f7ff fc0d 	bl	80113b0 <_Balloc>
 8011b96:	4604      	mov	r4, r0
 8011b98:	b930      	cbnz	r0, 8011ba8 <__d2b+0x24>
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	f240 310a 	movw	r1, #778	; 0x30a
 8011ba0:	4b24      	ldr	r3, [pc, #144]	; (8011c34 <__d2b+0xb0>)
 8011ba2:	4825      	ldr	r0, [pc, #148]	; (8011c38 <__d2b+0xb4>)
 8011ba4:	f000 fa4c 	bl	8012040 <__assert_func>
 8011ba8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8011bac:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8011bb0:	bb2d      	cbnz	r5, 8011bfe <__d2b+0x7a>
 8011bb2:	9301      	str	r3, [sp, #4]
 8011bb4:	f1b8 0300 	subs.w	r3, r8, #0
 8011bb8:	d026      	beq.n	8011c08 <__d2b+0x84>
 8011bba:	4668      	mov	r0, sp
 8011bbc:	9300      	str	r3, [sp, #0]
 8011bbe:	f7ff fd0d 	bl	80115dc <__lo0bits>
 8011bc2:	9900      	ldr	r1, [sp, #0]
 8011bc4:	b1f0      	cbz	r0, 8011c04 <__d2b+0x80>
 8011bc6:	9a01      	ldr	r2, [sp, #4]
 8011bc8:	f1c0 0320 	rsb	r3, r0, #32
 8011bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8011bd0:	430b      	orrs	r3, r1
 8011bd2:	40c2      	lsrs	r2, r0
 8011bd4:	6163      	str	r3, [r4, #20]
 8011bd6:	9201      	str	r2, [sp, #4]
 8011bd8:	9b01      	ldr	r3, [sp, #4]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	bf14      	ite	ne
 8011bde:	2102      	movne	r1, #2
 8011be0:	2101      	moveq	r1, #1
 8011be2:	61a3      	str	r3, [r4, #24]
 8011be4:	6121      	str	r1, [r4, #16]
 8011be6:	b1c5      	cbz	r5, 8011c1a <__d2b+0x96>
 8011be8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011bec:	4405      	add	r5, r0
 8011bee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011bf2:	603d      	str	r5, [r7, #0]
 8011bf4:	6030      	str	r0, [r6, #0]
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	b002      	add	sp, #8
 8011bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c02:	e7d6      	b.n	8011bb2 <__d2b+0x2e>
 8011c04:	6161      	str	r1, [r4, #20]
 8011c06:	e7e7      	b.n	8011bd8 <__d2b+0x54>
 8011c08:	a801      	add	r0, sp, #4
 8011c0a:	f7ff fce7 	bl	80115dc <__lo0bits>
 8011c0e:	2101      	movs	r1, #1
 8011c10:	9b01      	ldr	r3, [sp, #4]
 8011c12:	6121      	str	r1, [r4, #16]
 8011c14:	6163      	str	r3, [r4, #20]
 8011c16:	3020      	adds	r0, #32
 8011c18:	e7e5      	b.n	8011be6 <__d2b+0x62>
 8011c1a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8011c1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011c22:	6038      	str	r0, [r7, #0]
 8011c24:	6918      	ldr	r0, [r3, #16]
 8011c26:	f7ff fcb9 	bl	801159c <__hi0bits>
 8011c2a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8011c2e:	6031      	str	r1, [r6, #0]
 8011c30:	e7e1      	b.n	8011bf6 <__d2b+0x72>
 8011c32:	bf00      	nop
 8011c34:	08012edc 	.word	0x08012edc
 8011c38:	08012f6c 	.word	0x08012f6c

08011c3c <__ratio>:
 8011c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c40:	4688      	mov	r8, r1
 8011c42:	4669      	mov	r1, sp
 8011c44:	4681      	mov	r9, r0
 8011c46:	f7ff ff49 	bl	8011adc <__b2d>
 8011c4a:	460f      	mov	r7, r1
 8011c4c:	4604      	mov	r4, r0
 8011c4e:	460d      	mov	r5, r1
 8011c50:	4640      	mov	r0, r8
 8011c52:	a901      	add	r1, sp, #4
 8011c54:	f7ff ff42 	bl	8011adc <__b2d>
 8011c58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c5c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011c60:	468b      	mov	fp, r1
 8011c62:	eba3 0c02 	sub.w	ip, r3, r2
 8011c66:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011c6a:	1a9b      	subs	r3, r3, r2
 8011c6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	bfd5      	itete	le
 8011c74:	460a      	movle	r2, r1
 8011c76:	462a      	movgt	r2, r5
 8011c78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011c7c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011c80:	bfd8      	it	le
 8011c82:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011c86:	465b      	mov	r3, fp
 8011c88:	4602      	mov	r2, r0
 8011c8a:	4639      	mov	r1, r7
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	f7ee fd93 	bl	80007b8 <__aeabi_ddiv>
 8011c92:	b003      	add	sp, #12
 8011c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c98 <__copybits>:
 8011c98:	3901      	subs	r1, #1
 8011c9a:	b570      	push	{r4, r5, r6, lr}
 8011c9c:	1149      	asrs	r1, r1, #5
 8011c9e:	6914      	ldr	r4, [r2, #16]
 8011ca0:	3101      	adds	r1, #1
 8011ca2:	f102 0314 	add.w	r3, r2, #20
 8011ca6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011caa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011cae:	1f05      	subs	r5, r0, #4
 8011cb0:	42a3      	cmp	r3, r4
 8011cb2:	d30c      	bcc.n	8011cce <__copybits+0x36>
 8011cb4:	1aa3      	subs	r3, r4, r2
 8011cb6:	3b11      	subs	r3, #17
 8011cb8:	f023 0303 	bic.w	r3, r3, #3
 8011cbc:	3211      	adds	r2, #17
 8011cbe:	42a2      	cmp	r2, r4
 8011cc0:	bf88      	it	hi
 8011cc2:	2300      	movhi	r3, #0
 8011cc4:	4418      	add	r0, r3
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	4288      	cmp	r0, r1
 8011cca:	d305      	bcc.n	8011cd8 <__copybits+0x40>
 8011ccc:	bd70      	pop	{r4, r5, r6, pc}
 8011cce:	f853 6b04 	ldr.w	r6, [r3], #4
 8011cd2:	f845 6f04 	str.w	r6, [r5, #4]!
 8011cd6:	e7eb      	b.n	8011cb0 <__copybits+0x18>
 8011cd8:	f840 3b04 	str.w	r3, [r0], #4
 8011cdc:	e7f4      	b.n	8011cc8 <__copybits+0x30>

08011cde <__any_on>:
 8011cde:	f100 0214 	add.w	r2, r0, #20
 8011ce2:	6900      	ldr	r0, [r0, #16]
 8011ce4:	114b      	asrs	r3, r1, #5
 8011ce6:	4298      	cmp	r0, r3
 8011ce8:	b510      	push	{r4, lr}
 8011cea:	db11      	blt.n	8011d10 <__any_on+0x32>
 8011cec:	dd0a      	ble.n	8011d04 <__any_on+0x26>
 8011cee:	f011 011f 	ands.w	r1, r1, #31
 8011cf2:	d007      	beq.n	8011d04 <__any_on+0x26>
 8011cf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011cf8:	fa24 f001 	lsr.w	r0, r4, r1
 8011cfc:	fa00 f101 	lsl.w	r1, r0, r1
 8011d00:	428c      	cmp	r4, r1
 8011d02:	d10b      	bne.n	8011d1c <__any_on+0x3e>
 8011d04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011d08:	4293      	cmp	r3, r2
 8011d0a:	d803      	bhi.n	8011d14 <__any_on+0x36>
 8011d0c:	2000      	movs	r0, #0
 8011d0e:	bd10      	pop	{r4, pc}
 8011d10:	4603      	mov	r3, r0
 8011d12:	e7f7      	b.n	8011d04 <__any_on+0x26>
 8011d14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011d18:	2900      	cmp	r1, #0
 8011d1a:	d0f5      	beq.n	8011d08 <__any_on+0x2a>
 8011d1c:	2001      	movs	r0, #1
 8011d1e:	e7f6      	b.n	8011d0e <__any_on+0x30>

08011d20 <_calloc_r>:
 8011d20:	b538      	push	{r3, r4, r5, lr}
 8011d22:	fb02 f501 	mul.w	r5, r2, r1
 8011d26:	4629      	mov	r1, r5
 8011d28:	f7fc fb8c 	bl	800e444 <_malloc_r>
 8011d2c:	4604      	mov	r4, r0
 8011d2e:	b118      	cbz	r0, 8011d38 <_calloc_r+0x18>
 8011d30:	462a      	mov	r2, r5
 8011d32:	2100      	movs	r1, #0
 8011d34:	f7fc fb32 	bl	800e39c <memset>
 8011d38:	4620      	mov	r0, r4
 8011d3a:	bd38      	pop	{r3, r4, r5, pc}

08011d3c <__ssputs_r>:
 8011d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d40:	688e      	ldr	r6, [r1, #8]
 8011d42:	4682      	mov	sl, r0
 8011d44:	429e      	cmp	r6, r3
 8011d46:	460c      	mov	r4, r1
 8011d48:	4690      	mov	r8, r2
 8011d4a:	461f      	mov	r7, r3
 8011d4c:	d838      	bhi.n	8011dc0 <__ssputs_r+0x84>
 8011d4e:	898a      	ldrh	r2, [r1, #12]
 8011d50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d54:	d032      	beq.n	8011dbc <__ssputs_r+0x80>
 8011d56:	6825      	ldr	r5, [r4, #0]
 8011d58:	6909      	ldr	r1, [r1, #16]
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	eba5 0901 	sub.w	r9, r5, r1
 8011d60:	6965      	ldr	r5, [r4, #20]
 8011d62:	444b      	add	r3, r9
 8011d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d6c:	106d      	asrs	r5, r5, #1
 8011d6e:	429d      	cmp	r5, r3
 8011d70:	bf38      	it	cc
 8011d72:	461d      	movcc	r5, r3
 8011d74:	0553      	lsls	r3, r2, #21
 8011d76:	d531      	bpl.n	8011ddc <__ssputs_r+0xa0>
 8011d78:	4629      	mov	r1, r5
 8011d7a:	f7fc fb63 	bl	800e444 <_malloc_r>
 8011d7e:	4606      	mov	r6, r0
 8011d80:	b950      	cbnz	r0, 8011d98 <__ssputs_r+0x5c>
 8011d82:	230c      	movs	r3, #12
 8011d84:	f04f 30ff 	mov.w	r0, #4294967295
 8011d88:	f8ca 3000 	str.w	r3, [sl]
 8011d8c:	89a3      	ldrh	r3, [r4, #12]
 8011d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d92:	81a3      	strh	r3, [r4, #12]
 8011d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d98:	464a      	mov	r2, r9
 8011d9a:	6921      	ldr	r1, [r4, #16]
 8011d9c:	f7fc faf0 	bl	800e380 <memcpy>
 8011da0:	89a3      	ldrh	r3, [r4, #12]
 8011da2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011daa:	81a3      	strh	r3, [r4, #12]
 8011dac:	6126      	str	r6, [r4, #16]
 8011dae:	444e      	add	r6, r9
 8011db0:	6026      	str	r6, [r4, #0]
 8011db2:	463e      	mov	r6, r7
 8011db4:	6165      	str	r5, [r4, #20]
 8011db6:	eba5 0509 	sub.w	r5, r5, r9
 8011dba:	60a5      	str	r5, [r4, #8]
 8011dbc:	42be      	cmp	r6, r7
 8011dbe:	d900      	bls.n	8011dc2 <__ssputs_r+0x86>
 8011dc0:	463e      	mov	r6, r7
 8011dc2:	4632      	mov	r2, r6
 8011dc4:	4641      	mov	r1, r8
 8011dc6:	6820      	ldr	r0, [r4, #0]
 8011dc8:	f000 f96d 	bl	80120a6 <memmove>
 8011dcc:	68a3      	ldr	r3, [r4, #8]
 8011dce:	6822      	ldr	r2, [r4, #0]
 8011dd0:	1b9b      	subs	r3, r3, r6
 8011dd2:	4432      	add	r2, r6
 8011dd4:	2000      	movs	r0, #0
 8011dd6:	60a3      	str	r3, [r4, #8]
 8011dd8:	6022      	str	r2, [r4, #0]
 8011dda:	e7db      	b.n	8011d94 <__ssputs_r+0x58>
 8011ddc:	462a      	mov	r2, r5
 8011dde:	f000 f97c 	bl	80120da <_realloc_r>
 8011de2:	4606      	mov	r6, r0
 8011de4:	2800      	cmp	r0, #0
 8011de6:	d1e1      	bne.n	8011dac <__ssputs_r+0x70>
 8011de8:	4650      	mov	r0, sl
 8011dea:	6921      	ldr	r1, [r4, #16]
 8011dec:	f7fc fade 	bl	800e3ac <_free_r>
 8011df0:	e7c7      	b.n	8011d82 <__ssputs_r+0x46>
	...

08011df4 <_svfiprintf_r>:
 8011df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df8:	4698      	mov	r8, r3
 8011dfa:	898b      	ldrh	r3, [r1, #12]
 8011dfc:	4607      	mov	r7, r0
 8011dfe:	061b      	lsls	r3, r3, #24
 8011e00:	460d      	mov	r5, r1
 8011e02:	4614      	mov	r4, r2
 8011e04:	b09d      	sub	sp, #116	; 0x74
 8011e06:	d50e      	bpl.n	8011e26 <_svfiprintf_r+0x32>
 8011e08:	690b      	ldr	r3, [r1, #16]
 8011e0a:	b963      	cbnz	r3, 8011e26 <_svfiprintf_r+0x32>
 8011e0c:	2140      	movs	r1, #64	; 0x40
 8011e0e:	f7fc fb19 	bl	800e444 <_malloc_r>
 8011e12:	6028      	str	r0, [r5, #0]
 8011e14:	6128      	str	r0, [r5, #16]
 8011e16:	b920      	cbnz	r0, 8011e22 <_svfiprintf_r+0x2e>
 8011e18:	230c      	movs	r3, #12
 8011e1a:	603b      	str	r3, [r7, #0]
 8011e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e20:	e0d1      	b.n	8011fc6 <_svfiprintf_r+0x1d2>
 8011e22:	2340      	movs	r3, #64	; 0x40
 8011e24:	616b      	str	r3, [r5, #20]
 8011e26:	2300      	movs	r3, #0
 8011e28:	9309      	str	r3, [sp, #36]	; 0x24
 8011e2a:	2320      	movs	r3, #32
 8011e2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e30:	2330      	movs	r3, #48	; 0x30
 8011e32:	f04f 0901 	mov.w	r9, #1
 8011e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011fe0 <_svfiprintf_r+0x1ec>
 8011e3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e42:	4623      	mov	r3, r4
 8011e44:	469a      	mov	sl, r3
 8011e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e4a:	b10a      	cbz	r2, 8011e50 <_svfiprintf_r+0x5c>
 8011e4c:	2a25      	cmp	r2, #37	; 0x25
 8011e4e:	d1f9      	bne.n	8011e44 <_svfiprintf_r+0x50>
 8011e50:	ebba 0b04 	subs.w	fp, sl, r4
 8011e54:	d00b      	beq.n	8011e6e <_svfiprintf_r+0x7a>
 8011e56:	465b      	mov	r3, fp
 8011e58:	4622      	mov	r2, r4
 8011e5a:	4629      	mov	r1, r5
 8011e5c:	4638      	mov	r0, r7
 8011e5e:	f7ff ff6d 	bl	8011d3c <__ssputs_r>
 8011e62:	3001      	adds	r0, #1
 8011e64:	f000 80aa 	beq.w	8011fbc <_svfiprintf_r+0x1c8>
 8011e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e6a:	445a      	add	r2, fp
 8011e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8011e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	f000 80a2 	beq.w	8011fbc <_svfiprintf_r+0x1c8>
 8011e78:	2300      	movs	r3, #0
 8011e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8011e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e82:	f10a 0a01 	add.w	sl, sl, #1
 8011e86:	9304      	str	r3, [sp, #16]
 8011e88:	9307      	str	r3, [sp, #28]
 8011e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e8e:	931a      	str	r3, [sp, #104]	; 0x68
 8011e90:	4654      	mov	r4, sl
 8011e92:	2205      	movs	r2, #5
 8011e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e98:	4851      	ldr	r0, [pc, #324]	; (8011fe0 <_svfiprintf_r+0x1ec>)
 8011e9a:	f7ff fa6f 	bl	801137c <memchr>
 8011e9e:	9a04      	ldr	r2, [sp, #16]
 8011ea0:	b9d8      	cbnz	r0, 8011eda <_svfiprintf_r+0xe6>
 8011ea2:	06d0      	lsls	r0, r2, #27
 8011ea4:	bf44      	itt	mi
 8011ea6:	2320      	movmi	r3, #32
 8011ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011eac:	0711      	lsls	r1, r2, #28
 8011eae:	bf44      	itt	mi
 8011eb0:	232b      	movmi	r3, #43	; 0x2b
 8011eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8011eba:	2b2a      	cmp	r3, #42	; 0x2a
 8011ebc:	d015      	beq.n	8011eea <_svfiprintf_r+0xf6>
 8011ebe:	4654      	mov	r4, sl
 8011ec0:	2000      	movs	r0, #0
 8011ec2:	f04f 0c0a 	mov.w	ip, #10
 8011ec6:	9a07      	ldr	r2, [sp, #28]
 8011ec8:	4621      	mov	r1, r4
 8011eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ece:	3b30      	subs	r3, #48	; 0x30
 8011ed0:	2b09      	cmp	r3, #9
 8011ed2:	d94e      	bls.n	8011f72 <_svfiprintf_r+0x17e>
 8011ed4:	b1b0      	cbz	r0, 8011f04 <_svfiprintf_r+0x110>
 8011ed6:	9207      	str	r2, [sp, #28]
 8011ed8:	e014      	b.n	8011f04 <_svfiprintf_r+0x110>
 8011eda:	eba0 0308 	sub.w	r3, r0, r8
 8011ede:	fa09 f303 	lsl.w	r3, r9, r3
 8011ee2:	4313      	orrs	r3, r2
 8011ee4:	46a2      	mov	sl, r4
 8011ee6:	9304      	str	r3, [sp, #16]
 8011ee8:	e7d2      	b.n	8011e90 <_svfiprintf_r+0x9c>
 8011eea:	9b03      	ldr	r3, [sp, #12]
 8011eec:	1d19      	adds	r1, r3, #4
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	9103      	str	r1, [sp, #12]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	bfbb      	ittet	lt
 8011ef6:	425b      	neglt	r3, r3
 8011ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8011efc:	9307      	strge	r3, [sp, #28]
 8011efe:	9307      	strlt	r3, [sp, #28]
 8011f00:	bfb8      	it	lt
 8011f02:	9204      	strlt	r2, [sp, #16]
 8011f04:	7823      	ldrb	r3, [r4, #0]
 8011f06:	2b2e      	cmp	r3, #46	; 0x2e
 8011f08:	d10c      	bne.n	8011f24 <_svfiprintf_r+0x130>
 8011f0a:	7863      	ldrb	r3, [r4, #1]
 8011f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8011f0e:	d135      	bne.n	8011f7c <_svfiprintf_r+0x188>
 8011f10:	9b03      	ldr	r3, [sp, #12]
 8011f12:	3402      	adds	r4, #2
 8011f14:	1d1a      	adds	r2, r3, #4
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	9203      	str	r2, [sp, #12]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	bfb8      	it	lt
 8011f1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f22:	9305      	str	r3, [sp, #20]
 8011f24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011ff0 <_svfiprintf_r+0x1fc>
 8011f28:	2203      	movs	r2, #3
 8011f2a:	4650      	mov	r0, sl
 8011f2c:	7821      	ldrb	r1, [r4, #0]
 8011f2e:	f7ff fa25 	bl	801137c <memchr>
 8011f32:	b140      	cbz	r0, 8011f46 <_svfiprintf_r+0x152>
 8011f34:	2340      	movs	r3, #64	; 0x40
 8011f36:	eba0 000a 	sub.w	r0, r0, sl
 8011f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8011f3e:	9b04      	ldr	r3, [sp, #16]
 8011f40:	3401      	adds	r4, #1
 8011f42:	4303      	orrs	r3, r0
 8011f44:	9304      	str	r3, [sp, #16]
 8011f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f4a:	2206      	movs	r2, #6
 8011f4c:	4825      	ldr	r0, [pc, #148]	; (8011fe4 <_svfiprintf_r+0x1f0>)
 8011f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f52:	f7ff fa13 	bl	801137c <memchr>
 8011f56:	2800      	cmp	r0, #0
 8011f58:	d038      	beq.n	8011fcc <_svfiprintf_r+0x1d8>
 8011f5a:	4b23      	ldr	r3, [pc, #140]	; (8011fe8 <_svfiprintf_r+0x1f4>)
 8011f5c:	bb1b      	cbnz	r3, 8011fa6 <_svfiprintf_r+0x1b2>
 8011f5e:	9b03      	ldr	r3, [sp, #12]
 8011f60:	3307      	adds	r3, #7
 8011f62:	f023 0307 	bic.w	r3, r3, #7
 8011f66:	3308      	adds	r3, #8
 8011f68:	9303      	str	r3, [sp, #12]
 8011f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f6c:	4433      	add	r3, r6
 8011f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8011f70:	e767      	b.n	8011e42 <_svfiprintf_r+0x4e>
 8011f72:	460c      	mov	r4, r1
 8011f74:	2001      	movs	r0, #1
 8011f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f7a:	e7a5      	b.n	8011ec8 <_svfiprintf_r+0xd4>
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	f04f 0c0a 	mov.w	ip, #10
 8011f82:	4619      	mov	r1, r3
 8011f84:	3401      	adds	r4, #1
 8011f86:	9305      	str	r3, [sp, #20]
 8011f88:	4620      	mov	r0, r4
 8011f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f8e:	3a30      	subs	r2, #48	; 0x30
 8011f90:	2a09      	cmp	r2, #9
 8011f92:	d903      	bls.n	8011f9c <_svfiprintf_r+0x1a8>
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d0c5      	beq.n	8011f24 <_svfiprintf_r+0x130>
 8011f98:	9105      	str	r1, [sp, #20]
 8011f9a:	e7c3      	b.n	8011f24 <_svfiprintf_r+0x130>
 8011f9c:	4604      	mov	r4, r0
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fa4:	e7f0      	b.n	8011f88 <_svfiprintf_r+0x194>
 8011fa6:	ab03      	add	r3, sp, #12
 8011fa8:	9300      	str	r3, [sp, #0]
 8011faa:	462a      	mov	r2, r5
 8011fac:	4638      	mov	r0, r7
 8011fae:	4b0f      	ldr	r3, [pc, #60]	; (8011fec <_svfiprintf_r+0x1f8>)
 8011fb0:	a904      	add	r1, sp, #16
 8011fb2:	f7fc fb3f 	bl	800e634 <_printf_float>
 8011fb6:	1c42      	adds	r2, r0, #1
 8011fb8:	4606      	mov	r6, r0
 8011fba:	d1d6      	bne.n	8011f6a <_svfiprintf_r+0x176>
 8011fbc:	89ab      	ldrh	r3, [r5, #12]
 8011fbe:	065b      	lsls	r3, r3, #25
 8011fc0:	f53f af2c 	bmi.w	8011e1c <_svfiprintf_r+0x28>
 8011fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011fc6:	b01d      	add	sp, #116	; 0x74
 8011fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fcc:	ab03      	add	r3, sp, #12
 8011fce:	9300      	str	r3, [sp, #0]
 8011fd0:	462a      	mov	r2, r5
 8011fd2:	4638      	mov	r0, r7
 8011fd4:	4b05      	ldr	r3, [pc, #20]	; (8011fec <_svfiprintf_r+0x1f8>)
 8011fd6:	a904      	add	r1, sp, #16
 8011fd8:	f7fc fdc8 	bl	800eb6c <_printf_i>
 8011fdc:	e7eb      	b.n	8011fb6 <_svfiprintf_r+0x1c2>
 8011fde:	bf00      	nop
 8011fe0:	080130cc 	.word	0x080130cc
 8011fe4:	080130d6 	.word	0x080130d6
 8011fe8:	0800e635 	.word	0x0800e635
 8011fec:	08011d3d 	.word	0x08011d3d
 8011ff0:	080130d2 	.word	0x080130d2

08011ff4 <nan>:
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	4901      	ldr	r1, [pc, #4]	; (8011ffc <nan+0x8>)
 8011ff8:	4770      	bx	lr
 8011ffa:	bf00      	nop
 8011ffc:	7ff80000 	.word	0x7ff80000

08012000 <strncmp>:
 8012000:	b510      	push	{r4, lr}
 8012002:	b16a      	cbz	r2, 8012020 <strncmp+0x20>
 8012004:	3901      	subs	r1, #1
 8012006:	1884      	adds	r4, r0, r2
 8012008:	f810 3b01 	ldrb.w	r3, [r0], #1
 801200c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012010:	4293      	cmp	r3, r2
 8012012:	d103      	bne.n	801201c <strncmp+0x1c>
 8012014:	42a0      	cmp	r0, r4
 8012016:	d001      	beq.n	801201c <strncmp+0x1c>
 8012018:	2b00      	cmp	r3, #0
 801201a:	d1f5      	bne.n	8012008 <strncmp+0x8>
 801201c:	1a98      	subs	r0, r3, r2
 801201e:	bd10      	pop	{r4, pc}
 8012020:	4610      	mov	r0, r2
 8012022:	e7fc      	b.n	801201e <strncmp+0x1e>

08012024 <__ascii_wctomb>:
 8012024:	4603      	mov	r3, r0
 8012026:	4608      	mov	r0, r1
 8012028:	b141      	cbz	r1, 801203c <__ascii_wctomb+0x18>
 801202a:	2aff      	cmp	r2, #255	; 0xff
 801202c:	d904      	bls.n	8012038 <__ascii_wctomb+0x14>
 801202e:	228a      	movs	r2, #138	; 0x8a
 8012030:	f04f 30ff 	mov.w	r0, #4294967295
 8012034:	601a      	str	r2, [r3, #0]
 8012036:	4770      	bx	lr
 8012038:	2001      	movs	r0, #1
 801203a:	700a      	strb	r2, [r1, #0]
 801203c:	4770      	bx	lr
	...

08012040 <__assert_func>:
 8012040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012042:	4614      	mov	r4, r2
 8012044:	461a      	mov	r2, r3
 8012046:	4b09      	ldr	r3, [pc, #36]	; (801206c <__assert_func+0x2c>)
 8012048:	4605      	mov	r5, r0
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	68d8      	ldr	r0, [r3, #12]
 801204e:	b14c      	cbz	r4, 8012064 <__assert_func+0x24>
 8012050:	4b07      	ldr	r3, [pc, #28]	; (8012070 <__assert_func+0x30>)
 8012052:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012056:	9100      	str	r1, [sp, #0]
 8012058:	462b      	mov	r3, r5
 801205a:	4906      	ldr	r1, [pc, #24]	; (8012074 <__assert_func+0x34>)
 801205c:	f000 f80e 	bl	801207c <fiprintf>
 8012060:	f000 fa78 	bl	8012554 <abort>
 8012064:	4b04      	ldr	r3, [pc, #16]	; (8012078 <__assert_func+0x38>)
 8012066:	461c      	mov	r4, r3
 8012068:	e7f3      	b.n	8012052 <__assert_func+0x12>
 801206a:	bf00      	nop
 801206c:	20000060 	.word	0x20000060
 8012070:	080130dd 	.word	0x080130dd
 8012074:	080130ea 	.word	0x080130ea
 8012078:	08013118 	.word	0x08013118

0801207c <fiprintf>:
 801207c:	b40e      	push	{r1, r2, r3}
 801207e:	b503      	push	{r0, r1, lr}
 8012080:	4601      	mov	r1, r0
 8012082:	ab03      	add	r3, sp, #12
 8012084:	4805      	ldr	r0, [pc, #20]	; (801209c <fiprintf+0x20>)
 8012086:	f853 2b04 	ldr.w	r2, [r3], #4
 801208a:	6800      	ldr	r0, [r0, #0]
 801208c:	9301      	str	r3, [sp, #4]
 801208e:	f000 f871 	bl	8012174 <_vfiprintf_r>
 8012092:	b002      	add	sp, #8
 8012094:	f85d eb04 	ldr.w	lr, [sp], #4
 8012098:	b003      	add	sp, #12
 801209a:	4770      	bx	lr
 801209c:	20000060 	.word	0x20000060

080120a0 <__retarget_lock_init_recursive>:
 80120a0:	4770      	bx	lr

080120a2 <__retarget_lock_acquire_recursive>:
 80120a2:	4770      	bx	lr

080120a4 <__retarget_lock_release_recursive>:
 80120a4:	4770      	bx	lr

080120a6 <memmove>:
 80120a6:	4288      	cmp	r0, r1
 80120a8:	b510      	push	{r4, lr}
 80120aa:	eb01 0402 	add.w	r4, r1, r2
 80120ae:	d902      	bls.n	80120b6 <memmove+0x10>
 80120b0:	4284      	cmp	r4, r0
 80120b2:	4623      	mov	r3, r4
 80120b4:	d807      	bhi.n	80120c6 <memmove+0x20>
 80120b6:	1e43      	subs	r3, r0, #1
 80120b8:	42a1      	cmp	r1, r4
 80120ba:	d008      	beq.n	80120ce <memmove+0x28>
 80120bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80120c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80120c4:	e7f8      	b.n	80120b8 <memmove+0x12>
 80120c6:	4601      	mov	r1, r0
 80120c8:	4402      	add	r2, r0
 80120ca:	428a      	cmp	r2, r1
 80120cc:	d100      	bne.n	80120d0 <memmove+0x2a>
 80120ce:	bd10      	pop	{r4, pc}
 80120d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80120d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80120d8:	e7f7      	b.n	80120ca <memmove+0x24>

080120da <_realloc_r>:
 80120da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120dc:	4607      	mov	r7, r0
 80120de:	4614      	mov	r4, r2
 80120e0:	460e      	mov	r6, r1
 80120e2:	b921      	cbnz	r1, 80120ee <_realloc_r+0x14>
 80120e4:	4611      	mov	r1, r2
 80120e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80120ea:	f7fc b9ab 	b.w	800e444 <_malloc_r>
 80120ee:	b922      	cbnz	r2, 80120fa <_realloc_r+0x20>
 80120f0:	f7fc f95c 	bl	800e3ac <_free_r>
 80120f4:	4625      	mov	r5, r4
 80120f6:	4628      	mov	r0, r5
 80120f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120fa:	f000 fc4f 	bl	801299c <_malloc_usable_size_r>
 80120fe:	42a0      	cmp	r0, r4
 8012100:	d20f      	bcs.n	8012122 <_realloc_r+0x48>
 8012102:	4621      	mov	r1, r4
 8012104:	4638      	mov	r0, r7
 8012106:	f7fc f99d 	bl	800e444 <_malloc_r>
 801210a:	4605      	mov	r5, r0
 801210c:	2800      	cmp	r0, #0
 801210e:	d0f2      	beq.n	80120f6 <_realloc_r+0x1c>
 8012110:	4631      	mov	r1, r6
 8012112:	4622      	mov	r2, r4
 8012114:	f7fc f934 	bl	800e380 <memcpy>
 8012118:	4631      	mov	r1, r6
 801211a:	4638      	mov	r0, r7
 801211c:	f7fc f946 	bl	800e3ac <_free_r>
 8012120:	e7e9      	b.n	80120f6 <_realloc_r+0x1c>
 8012122:	4635      	mov	r5, r6
 8012124:	e7e7      	b.n	80120f6 <_realloc_r+0x1c>

08012126 <__sfputc_r>:
 8012126:	6893      	ldr	r3, [r2, #8]
 8012128:	b410      	push	{r4}
 801212a:	3b01      	subs	r3, #1
 801212c:	2b00      	cmp	r3, #0
 801212e:	6093      	str	r3, [r2, #8]
 8012130:	da07      	bge.n	8012142 <__sfputc_r+0x1c>
 8012132:	6994      	ldr	r4, [r2, #24]
 8012134:	42a3      	cmp	r3, r4
 8012136:	db01      	blt.n	801213c <__sfputc_r+0x16>
 8012138:	290a      	cmp	r1, #10
 801213a:	d102      	bne.n	8012142 <__sfputc_r+0x1c>
 801213c:	bc10      	pop	{r4}
 801213e:	f000 b949 	b.w	80123d4 <__swbuf_r>
 8012142:	6813      	ldr	r3, [r2, #0]
 8012144:	1c58      	adds	r0, r3, #1
 8012146:	6010      	str	r0, [r2, #0]
 8012148:	7019      	strb	r1, [r3, #0]
 801214a:	4608      	mov	r0, r1
 801214c:	bc10      	pop	{r4}
 801214e:	4770      	bx	lr

08012150 <__sfputs_r>:
 8012150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012152:	4606      	mov	r6, r0
 8012154:	460f      	mov	r7, r1
 8012156:	4614      	mov	r4, r2
 8012158:	18d5      	adds	r5, r2, r3
 801215a:	42ac      	cmp	r4, r5
 801215c:	d101      	bne.n	8012162 <__sfputs_r+0x12>
 801215e:	2000      	movs	r0, #0
 8012160:	e007      	b.n	8012172 <__sfputs_r+0x22>
 8012162:	463a      	mov	r2, r7
 8012164:	4630      	mov	r0, r6
 8012166:	f814 1b01 	ldrb.w	r1, [r4], #1
 801216a:	f7ff ffdc 	bl	8012126 <__sfputc_r>
 801216e:	1c43      	adds	r3, r0, #1
 8012170:	d1f3      	bne.n	801215a <__sfputs_r+0xa>
 8012172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012174 <_vfiprintf_r>:
 8012174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012178:	460d      	mov	r5, r1
 801217a:	4614      	mov	r4, r2
 801217c:	4698      	mov	r8, r3
 801217e:	4606      	mov	r6, r0
 8012180:	b09d      	sub	sp, #116	; 0x74
 8012182:	b118      	cbz	r0, 801218c <_vfiprintf_r+0x18>
 8012184:	6983      	ldr	r3, [r0, #24]
 8012186:	b90b      	cbnz	r3, 801218c <_vfiprintf_r+0x18>
 8012188:	f000 fb06 	bl	8012798 <__sinit>
 801218c:	4b89      	ldr	r3, [pc, #548]	; (80123b4 <_vfiprintf_r+0x240>)
 801218e:	429d      	cmp	r5, r3
 8012190:	d11b      	bne.n	80121ca <_vfiprintf_r+0x56>
 8012192:	6875      	ldr	r5, [r6, #4]
 8012194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012196:	07d9      	lsls	r1, r3, #31
 8012198:	d405      	bmi.n	80121a6 <_vfiprintf_r+0x32>
 801219a:	89ab      	ldrh	r3, [r5, #12]
 801219c:	059a      	lsls	r2, r3, #22
 801219e:	d402      	bmi.n	80121a6 <_vfiprintf_r+0x32>
 80121a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121a2:	f7ff ff7e 	bl	80120a2 <__retarget_lock_acquire_recursive>
 80121a6:	89ab      	ldrh	r3, [r5, #12]
 80121a8:	071b      	lsls	r3, r3, #28
 80121aa:	d501      	bpl.n	80121b0 <_vfiprintf_r+0x3c>
 80121ac:	692b      	ldr	r3, [r5, #16]
 80121ae:	b9eb      	cbnz	r3, 80121ec <_vfiprintf_r+0x78>
 80121b0:	4629      	mov	r1, r5
 80121b2:	4630      	mov	r0, r6
 80121b4:	f000 f960 	bl	8012478 <__swsetup_r>
 80121b8:	b1c0      	cbz	r0, 80121ec <_vfiprintf_r+0x78>
 80121ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121bc:	07dc      	lsls	r4, r3, #31
 80121be:	d50e      	bpl.n	80121de <_vfiprintf_r+0x6a>
 80121c0:	f04f 30ff 	mov.w	r0, #4294967295
 80121c4:	b01d      	add	sp, #116	; 0x74
 80121c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ca:	4b7b      	ldr	r3, [pc, #492]	; (80123b8 <_vfiprintf_r+0x244>)
 80121cc:	429d      	cmp	r5, r3
 80121ce:	d101      	bne.n	80121d4 <_vfiprintf_r+0x60>
 80121d0:	68b5      	ldr	r5, [r6, #8]
 80121d2:	e7df      	b.n	8012194 <_vfiprintf_r+0x20>
 80121d4:	4b79      	ldr	r3, [pc, #484]	; (80123bc <_vfiprintf_r+0x248>)
 80121d6:	429d      	cmp	r5, r3
 80121d8:	bf08      	it	eq
 80121da:	68f5      	ldreq	r5, [r6, #12]
 80121dc:	e7da      	b.n	8012194 <_vfiprintf_r+0x20>
 80121de:	89ab      	ldrh	r3, [r5, #12]
 80121e0:	0598      	lsls	r0, r3, #22
 80121e2:	d4ed      	bmi.n	80121c0 <_vfiprintf_r+0x4c>
 80121e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121e6:	f7ff ff5d 	bl	80120a4 <__retarget_lock_release_recursive>
 80121ea:	e7e9      	b.n	80121c0 <_vfiprintf_r+0x4c>
 80121ec:	2300      	movs	r3, #0
 80121ee:	9309      	str	r3, [sp, #36]	; 0x24
 80121f0:	2320      	movs	r3, #32
 80121f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80121f6:	2330      	movs	r3, #48	; 0x30
 80121f8:	f04f 0901 	mov.w	r9, #1
 80121fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8012200:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80123c0 <_vfiprintf_r+0x24c>
 8012204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012208:	4623      	mov	r3, r4
 801220a:	469a      	mov	sl, r3
 801220c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012210:	b10a      	cbz	r2, 8012216 <_vfiprintf_r+0xa2>
 8012212:	2a25      	cmp	r2, #37	; 0x25
 8012214:	d1f9      	bne.n	801220a <_vfiprintf_r+0x96>
 8012216:	ebba 0b04 	subs.w	fp, sl, r4
 801221a:	d00b      	beq.n	8012234 <_vfiprintf_r+0xc0>
 801221c:	465b      	mov	r3, fp
 801221e:	4622      	mov	r2, r4
 8012220:	4629      	mov	r1, r5
 8012222:	4630      	mov	r0, r6
 8012224:	f7ff ff94 	bl	8012150 <__sfputs_r>
 8012228:	3001      	adds	r0, #1
 801222a:	f000 80aa 	beq.w	8012382 <_vfiprintf_r+0x20e>
 801222e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012230:	445a      	add	r2, fp
 8012232:	9209      	str	r2, [sp, #36]	; 0x24
 8012234:	f89a 3000 	ldrb.w	r3, [sl]
 8012238:	2b00      	cmp	r3, #0
 801223a:	f000 80a2 	beq.w	8012382 <_vfiprintf_r+0x20e>
 801223e:	2300      	movs	r3, #0
 8012240:	f04f 32ff 	mov.w	r2, #4294967295
 8012244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012248:	f10a 0a01 	add.w	sl, sl, #1
 801224c:	9304      	str	r3, [sp, #16]
 801224e:	9307      	str	r3, [sp, #28]
 8012250:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012254:	931a      	str	r3, [sp, #104]	; 0x68
 8012256:	4654      	mov	r4, sl
 8012258:	2205      	movs	r2, #5
 801225a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801225e:	4858      	ldr	r0, [pc, #352]	; (80123c0 <_vfiprintf_r+0x24c>)
 8012260:	f7ff f88c 	bl	801137c <memchr>
 8012264:	9a04      	ldr	r2, [sp, #16]
 8012266:	b9d8      	cbnz	r0, 80122a0 <_vfiprintf_r+0x12c>
 8012268:	06d1      	lsls	r1, r2, #27
 801226a:	bf44      	itt	mi
 801226c:	2320      	movmi	r3, #32
 801226e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012272:	0713      	lsls	r3, r2, #28
 8012274:	bf44      	itt	mi
 8012276:	232b      	movmi	r3, #43	; 0x2b
 8012278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801227c:	f89a 3000 	ldrb.w	r3, [sl]
 8012280:	2b2a      	cmp	r3, #42	; 0x2a
 8012282:	d015      	beq.n	80122b0 <_vfiprintf_r+0x13c>
 8012284:	4654      	mov	r4, sl
 8012286:	2000      	movs	r0, #0
 8012288:	f04f 0c0a 	mov.w	ip, #10
 801228c:	9a07      	ldr	r2, [sp, #28]
 801228e:	4621      	mov	r1, r4
 8012290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012294:	3b30      	subs	r3, #48	; 0x30
 8012296:	2b09      	cmp	r3, #9
 8012298:	d94e      	bls.n	8012338 <_vfiprintf_r+0x1c4>
 801229a:	b1b0      	cbz	r0, 80122ca <_vfiprintf_r+0x156>
 801229c:	9207      	str	r2, [sp, #28]
 801229e:	e014      	b.n	80122ca <_vfiprintf_r+0x156>
 80122a0:	eba0 0308 	sub.w	r3, r0, r8
 80122a4:	fa09 f303 	lsl.w	r3, r9, r3
 80122a8:	4313      	orrs	r3, r2
 80122aa:	46a2      	mov	sl, r4
 80122ac:	9304      	str	r3, [sp, #16]
 80122ae:	e7d2      	b.n	8012256 <_vfiprintf_r+0xe2>
 80122b0:	9b03      	ldr	r3, [sp, #12]
 80122b2:	1d19      	adds	r1, r3, #4
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	9103      	str	r1, [sp, #12]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	bfbb      	ittet	lt
 80122bc:	425b      	neglt	r3, r3
 80122be:	f042 0202 	orrlt.w	r2, r2, #2
 80122c2:	9307      	strge	r3, [sp, #28]
 80122c4:	9307      	strlt	r3, [sp, #28]
 80122c6:	bfb8      	it	lt
 80122c8:	9204      	strlt	r2, [sp, #16]
 80122ca:	7823      	ldrb	r3, [r4, #0]
 80122cc:	2b2e      	cmp	r3, #46	; 0x2e
 80122ce:	d10c      	bne.n	80122ea <_vfiprintf_r+0x176>
 80122d0:	7863      	ldrb	r3, [r4, #1]
 80122d2:	2b2a      	cmp	r3, #42	; 0x2a
 80122d4:	d135      	bne.n	8012342 <_vfiprintf_r+0x1ce>
 80122d6:	9b03      	ldr	r3, [sp, #12]
 80122d8:	3402      	adds	r4, #2
 80122da:	1d1a      	adds	r2, r3, #4
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	9203      	str	r2, [sp, #12]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	bfb8      	it	lt
 80122e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80122e8:	9305      	str	r3, [sp, #20]
 80122ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80123d0 <_vfiprintf_r+0x25c>
 80122ee:	2203      	movs	r2, #3
 80122f0:	4650      	mov	r0, sl
 80122f2:	7821      	ldrb	r1, [r4, #0]
 80122f4:	f7ff f842 	bl	801137c <memchr>
 80122f8:	b140      	cbz	r0, 801230c <_vfiprintf_r+0x198>
 80122fa:	2340      	movs	r3, #64	; 0x40
 80122fc:	eba0 000a 	sub.w	r0, r0, sl
 8012300:	fa03 f000 	lsl.w	r0, r3, r0
 8012304:	9b04      	ldr	r3, [sp, #16]
 8012306:	3401      	adds	r4, #1
 8012308:	4303      	orrs	r3, r0
 801230a:	9304      	str	r3, [sp, #16]
 801230c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012310:	2206      	movs	r2, #6
 8012312:	482c      	ldr	r0, [pc, #176]	; (80123c4 <_vfiprintf_r+0x250>)
 8012314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012318:	f7ff f830 	bl	801137c <memchr>
 801231c:	2800      	cmp	r0, #0
 801231e:	d03f      	beq.n	80123a0 <_vfiprintf_r+0x22c>
 8012320:	4b29      	ldr	r3, [pc, #164]	; (80123c8 <_vfiprintf_r+0x254>)
 8012322:	bb1b      	cbnz	r3, 801236c <_vfiprintf_r+0x1f8>
 8012324:	9b03      	ldr	r3, [sp, #12]
 8012326:	3307      	adds	r3, #7
 8012328:	f023 0307 	bic.w	r3, r3, #7
 801232c:	3308      	adds	r3, #8
 801232e:	9303      	str	r3, [sp, #12]
 8012330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012332:	443b      	add	r3, r7
 8012334:	9309      	str	r3, [sp, #36]	; 0x24
 8012336:	e767      	b.n	8012208 <_vfiprintf_r+0x94>
 8012338:	460c      	mov	r4, r1
 801233a:	2001      	movs	r0, #1
 801233c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012340:	e7a5      	b.n	801228e <_vfiprintf_r+0x11a>
 8012342:	2300      	movs	r3, #0
 8012344:	f04f 0c0a 	mov.w	ip, #10
 8012348:	4619      	mov	r1, r3
 801234a:	3401      	adds	r4, #1
 801234c:	9305      	str	r3, [sp, #20]
 801234e:	4620      	mov	r0, r4
 8012350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012354:	3a30      	subs	r2, #48	; 0x30
 8012356:	2a09      	cmp	r2, #9
 8012358:	d903      	bls.n	8012362 <_vfiprintf_r+0x1ee>
 801235a:	2b00      	cmp	r3, #0
 801235c:	d0c5      	beq.n	80122ea <_vfiprintf_r+0x176>
 801235e:	9105      	str	r1, [sp, #20]
 8012360:	e7c3      	b.n	80122ea <_vfiprintf_r+0x176>
 8012362:	4604      	mov	r4, r0
 8012364:	2301      	movs	r3, #1
 8012366:	fb0c 2101 	mla	r1, ip, r1, r2
 801236a:	e7f0      	b.n	801234e <_vfiprintf_r+0x1da>
 801236c:	ab03      	add	r3, sp, #12
 801236e:	9300      	str	r3, [sp, #0]
 8012370:	462a      	mov	r2, r5
 8012372:	4630      	mov	r0, r6
 8012374:	4b15      	ldr	r3, [pc, #84]	; (80123cc <_vfiprintf_r+0x258>)
 8012376:	a904      	add	r1, sp, #16
 8012378:	f7fc f95c 	bl	800e634 <_printf_float>
 801237c:	4607      	mov	r7, r0
 801237e:	1c78      	adds	r0, r7, #1
 8012380:	d1d6      	bne.n	8012330 <_vfiprintf_r+0x1bc>
 8012382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012384:	07d9      	lsls	r1, r3, #31
 8012386:	d405      	bmi.n	8012394 <_vfiprintf_r+0x220>
 8012388:	89ab      	ldrh	r3, [r5, #12]
 801238a:	059a      	lsls	r2, r3, #22
 801238c:	d402      	bmi.n	8012394 <_vfiprintf_r+0x220>
 801238e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012390:	f7ff fe88 	bl	80120a4 <__retarget_lock_release_recursive>
 8012394:	89ab      	ldrh	r3, [r5, #12]
 8012396:	065b      	lsls	r3, r3, #25
 8012398:	f53f af12 	bmi.w	80121c0 <_vfiprintf_r+0x4c>
 801239c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801239e:	e711      	b.n	80121c4 <_vfiprintf_r+0x50>
 80123a0:	ab03      	add	r3, sp, #12
 80123a2:	9300      	str	r3, [sp, #0]
 80123a4:	462a      	mov	r2, r5
 80123a6:	4630      	mov	r0, r6
 80123a8:	4b08      	ldr	r3, [pc, #32]	; (80123cc <_vfiprintf_r+0x258>)
 80123aa:	a904      	add	r1, sp, #16
 80123ac:	f7fc fbde 	bl	800eb6c <_printf_i>
 80123b0:	e7e4      	b.n	801237c <_vfiprintf_r+0x208>
 80123b2:	bf00      	nop
 80123b4:	0801313c 	.word	0x0801313c
 80123b8:	0801315c 	.word	0x0801315c
 80123bc:	0801311c 	.word	0x0801311c
 80123c0:	080130cc 	.word	0x080130cc
 80123c4:	080130d6 	.word	0x080130d6
 80123c8:	0800e635 	.word	0x0800e635
 80123cc:	08012151 	.word	0x08012151
 80123d0:	080130d2 	.word	0x080130d2

080123d4 <__swbuf_r>:
 80123d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123d6:	460e      	mov	r6, r1
 80123d8:	4614      	mov	r4, r2
 80123da:	4605      	mov	r5, r0
 80123dc:	b118      	cbz	r0, 80123e6 <__swbuf_r+0x12>
 80123de:	6983      	ldr	r3, [r0, #24]
 80123e0:	b90b      	cbnz	r3, 80123e6 <__swbuf_r+0x12>
 80123e2:	f000 f9d9 	bl	8012798 <__sinit>
 80123e6:	4b21      	ldr	r3, [pc, #132]	; (801246c <__swbuf_r+0x98>)
 80123e8:	429c      	cmp	r4, r3
 80123ea:	d12b      	bne.n	8012444 <__swbuf_r+0x70>
 80123ec:	686c      	ldr	r4, [r5, #4]
 80123ee:	69a3      	ldr	r3, [r4, #24]
 80123f0:	60a3      	str	r3, [r4, #8]
 80123f2:	89a3      	ldrh	r3, [r4, #12]
 80123f4:	071a      	lsls	r2, r3, #28
 80123f6:	d52f      	bpl.n	8012458 <__swbuf_r+0x84>
 80123f8:	6923      	ldr	r3, [r4, #16]
 80123fa:	b36b      	cbz	r3, 8012458 <__swbuf_r+0x84>
 80123fc:	6923      	ldr	r3, [r4, #16]
 80123fe:	6820      	ldr	r0, [r4, #0]
 8012400:	b2f6      	uxtb	r6, r6
 8012402:	1ac0      	subs	r0, r0, r3
 8012404:	6963      	ldr	r3, [r4, #20]
 8012406:	4637      	mov	r7, r6
 8012408:	4283      	cmp	r3, r0
 801240a:	dc04      	bgt.n	8012416 <__swbuf_r+0x42>
 801240c:	4621      	mov	r1, r4
 801240e:	4628      	mov	r0, r5
 8012410:	f000 f92e 	bl	8012670 <_fflush_r>
 8012414:	bb30      	cbnz	r0, 8012464 <__swbuf_r+0x90>
 8012416:	68a3      	ldr	r3, [r4, #8]
 8012418:	3001      	adds	r0, #1
 801241a:	3b01      	subs	r3, #1
 801241c:	60a3      	str	r3, [r4, #8]
 801241e:	6823      	ldr	r3, [r4, #0]
 8012420:	1c5a      	adds	r2, r3, #1
 8012422:	6022      	str	r2, [r4, #0]
 8012424:	701e      	strb	r6, [r3, #0]
 8012426:	6963      	ldr	r3, [r4, #20]
 8012428:	4283      	cmp	r3, r0
 801242a:	d004      	beq.n	8012436 <__swbuf_r+0x62>
 801242c:	89a3      	ldrh	r3, [r4, #12]
 801242e:	07db      	lsls	r3, r3, #31
 8012430:	d506      	bpl.n	8012440 <__swbuf_r+0x6c>
 8012432:	2e0a      	cmp	r6, #10
 8012434:	d104      	bne.n	8012440 <__swbuf_r+0x6c>
 8012436:	4621      	mov	r1, r4
 8012438:	4628      	mov	r0, r5
 801243a:	f000 f919 	bl	8012670 <_fflush_r>
 801243e:	b988      	cbnz	r0, 8012464 <__swbuf_r+0x90>
 8012440:	4638      	mov	r0, r7
 8012442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012444:	4b0a      	ldr	r3, [pc, #40]	; (8012470 <__swbuf_r+0x9c>)
 8012446:	429c      	cmp	r4, r3
 8012448:	d101      	bne.n	801244e <__swbuf_r+0x7a>
 801244a:	68ac      	ldr	r4, [r5, #8]
 801244c:	e7cf      	b.n	80123ee <__swbuf_r+0x1a>
 801244e:	4b09      	ldr	r3, [pc, #36]	; (8012474 <__swbuf_r+0xa0>)
 8012450:	429c      	cmp	r4, r3
 8012452:	bf08      	it	eq
 8012454:	68ec      	ldreq	r4, [r5, #12]
 8012456:	e7ca      	b.n	80123ee <__swbuf_r+0x1a>
 8012458:	4621      	mov	r1, r4
 801245a:	4628      	mov	r0, r5
 801245c:	f000 f80c 	bl	8012478 <__swsetup_r>
 8012460:	2800      	cmp	r0, #0
 8012462:	d0cb      	beq.n	80123fc <__swbuf_r+0x28>
 8012464:	f04f 37ff 	mov.w	r7, #4294967295
 8012468:	e7ea      	b.n	8012440 <__swbuf_r+0x6c>
 801246a:	bf00      	nop
 801246c:	0801313c 	.word	0x0801313c
 8012470:	0801315c 	.word	0x0801315c
 8012474:	0801311c 	.word	0x0801311c

08012478 <__swsetup_r>:
 8012478:	4b32      	ldr	r3, [pc, #200]	; (8012544 <__swsetup_r+0xcc>)
 801247a:	b570      	push	{r4, r5, r6, lr}
 801247c:	681d      	ldr	r5, [r3, #0]
 801247e:	4606      	mov	r6, r0
 8012480:	460c      	mov	r4, r1
 8012482:	b125      	cbz	r5, 801248e <__swsetup_r+0x16>
 8012484:	69ab      	ldr	r3, [r5, #24]
 8012486:	b913      	cbnz	r3, 801248e <__swsetup_r+0x16>
 8012488:	4628      	mov	r0, r5
 801248a:	f000 f985 	bl	8012798 <__sinit>
 801248e:	4b2e      	ldr	r3, [pc, #184]	; (8012548 <__swsetup_r+0xd0>)
 8012490:	429c      	cmp	r4, r3
 8012492:	d10f      	bne.n	80124b4 <__swsetup_r+0x3c>
 8012494:	686c      	ldr	r4, [r5, #4]
 8012496:	89a3      	ldrh	r3, [r4, #12]
 8012498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801249c:	0719      	lsls	r1, r3, #28
 801249e:	d42c      	bmi.n	80124fa <__swsetup_r+0x82>
 80124a0:	06dd      	lsls	r5, r3, #27
 80124a2:	d411      	bmi.n	80124c8 <__swsetup_r+0x50>
 80124a4:	2309      	movs	r3, #9
 80124a6:	6033      	str	r3, [r6, #0]
 80124a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80124ac:	f04f 30ff 	mov.w	r0, #4294967295
 80124b0:	81a3      	strh	r3, [r4, #12]
 80124b2:	e03e      	b.n	8012532 <__swsetup_r+0xba>
 80124b4:	4b25      	ldr	r3, [pc, #148]	; (801254c <__swsetup_r+0xd4>)
 80124b6:	429c      	cmp	r4, r3
 80124b8:	d101      	bne.n	80124be <__swsetup_r+0x46>
 80124ba:	68ac      	ldr	r4, [r5, #8]
 80124bc:	e7eb      	b.n	8012496 <__swsetup_r+0x1e>
 80124be:	4b24      	ldr	r3, [pc, #144]	; (8012550 <__swsetup_r+0xd8>)
 80124c0:	429c      	cmp	r4, r3
 80124c2:	bf08      	it	eq
 80124c4:	68ec      	ldreq	r4, [r5, #12]
 80124c6:	e7e6      	b.n	8012496 <__swsetup_r+0x1e>
 80124c8:	0758      	lsls	r0, r3, #29
 80124ca:	d512      	bpl.n	80124f2 <__swsetup_r+0x7a>
 80124cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80124ce:	b141      	cbz	r1, 80124e2 <__swsetup_r+0x6a>
 80124d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124d4:	4299      	cmp	r1, r3
 80124d6:	d002      	beq.n	80124de <__swsetup_r+0x66>
 80124d8:	4630      	mov	r0, r6
 80124da:	f7fb ff67 	bl	800e3ac <_free_r>
 80124de:	2300      	movs	r3, #0
 80124e0:	6363      	str	r3, [r4, #52]	; 0x34
 80124e2:	89a3      	ldrh	r3, [r4, #12]
 80124e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80124e8:	81a3      	strh	r3, [r4, #12]
 80124ea:	2300      	movs	r3, #0
 80124ec:	6063      	str	r3, [r4, #4]
 80124ee:	6923      	ldr	r3, [r4, #16]
 80124f0:	6023      	str	r3, [r4, #0]
 80124f2:	89a3      	ldrh	r3, [r4, #12]
 80124f4:	f043 0308 	orr.w	r3, r3, #8
 80124f8:	81a3      	strh	r3, [r4, #12]
 80124fa:	6923      	ldr	r3, [r4, #16]
 80124fc:	b94b      	cbnz	r3, 8012512 <__swsetup_r+0x9a>
 80124fe:	89a3      	ldrh	r3, [r4, #12]
 8012500:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012508:	d003      	beq.n	8012512 <__swsetup_r+0x9a>
 801250a:	4621      	mov	r1, r4
 801250c:	4630      	mov	r0, r6
 801250e:	f000 fa05 	bl	801291c <__smakebuf_r>
 8012512:	89a0      	ldrh	r0, [r4, #12]
 8012514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012518:	f010 0301 	ands.w	r3, r0, #1
 801251c:	d00a      	beq.n	8012534 <__swsetup_r+0xbc>
 801251e:	2300      	movs	r3, #0
 8012520:	60a3      	str	r3, [r4, #8]
 8012522:	6963      	ldr	r3, [r4, #20]
 8012524:	425b      	negs	r3, r3
 8012526:	61a3      	str	r3, [r4, #24]
 8012528:	6923      	ldr	r3, [r4, #16]
 801252a:	b943      	cbnz	r3, 801253e <__swsetup_r+0xc6>
 801252c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012530:	d1ba      	bne.n	80124a8 <__swsetup_r+0x30>
 8012532:	bd70      	pop	{r4, r5, r6, pc}
 8012534:	0781      	lsls	r1, r0, #30
 8012536:	bf58      	it	pl
 8012538:	6963      	ldrpl	r3, [r4, #20]
 801253a:	60a3      	str	r3, [r4, #8]
 801253c:	e7f4      	b.n	8012528 <__swsetup_r+0xb0>
 801253e:	2000      	movs	r0, #0
 8012540:	e7f7      	b.n	8012532 <__swsetup_r+0xba>
 8012542:	bf00      	nop
 8012544:	20000060 	.word	0x20000060
 8012548:	0801313c 	.word	0x0801313c
 801254c:	0801315c 	.word	0x0801315c
 8012550:	0801311c 	.word	0x0801311c

08012554 <abort>:
 8012554:	2006      	movs	r0, #6
 8012556:	b508      	push	{r3, lr}
 8012558:	f000 fa50 	bl	80129fc <raise>
 801255c:	2001      	movs	r0, #1
 801255e:	f7f0 faba 	bl	8002ad6 <_exit>
	...

08012564 <__sflush_r>:
 8012564:	898a      	ldrh	r2, [r1, #12]
 8012566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801256a:	4605      	mov	r5, r0
 801256c:	0710      	lsls	r0, r2, #28
 801256e:	460c      	mov	r4, r1
 8012570:	d458      	bmi.n	8012624 <__sflush_r+0xc0>
 8012572:	684b      	ldr	r3, [r1, #4]
 8012574:	2b00      	cmp	r3, #0
 8012576:	dc05      	bgt.n	8012584 <__sflush_r+0x20>
 8012578:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801257a:	2b00      	cmp	r3, #0
 801257c:	dc02      	bgt.n	8012584 <__sflush_r+0x20>
 801257e:	2000      	movs	r0, #0
 8012580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012586:	2e00      	cmp	r6, #0
 8012588:	d0f9      	beq.n	801257e <__sflush_r+0x1a>
 801258a:	2300      	movs	r3, #0
 801258c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012590:	682f      	ldr	r7, [r5, #0]
 8012592:	602b      	str	r3, [r5, #0]
 8012594:	d032      	beq.n	80125fc <__sflush_r+0x98>
 8012596:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012598:	89a3      	ldrh	r3, [r4, #12]
 801259a:	075a      	lsls	r2, r3, #29
 801259c:	d505      	bpl.n	80125aa <__sflush_r+0x46>
 801259e:	6863      	ldr	r3, [r4, #4]
 80125a0:	1ac0      	subs	r0, r0, r3
 80125a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80125a4:	b10b      	cbz	r3, 80125aa <__sflush_r+0x46>
 80125a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80125a8:	1ac0      	subs	r0, r0, r3
 80125aa:	2300      	movs	r3, #0
 80125ac:	4602      	mov	r2, r0
 80125ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125b0:	4628      	mov	r0, r5
 80125b2:	6a21      	ldr	r1, [r4, #32]
 80125b4:	47b0      	blx	r6
 80125b6:	1c43      	adds	r3, r0, #1
 80125b8:	89a3      	ldrh	r3, [r4, #12]
 80125ba:	d106      	bne.n	80125ca <__sflush_r+0x66>
 80125bc:	6829      	ldr	r1, [r5, #0]
 80125be:	291d      	cmp	r1, #29
 80125c0:	d82c      	bhi.n	801261c <__sflush_r+0xb8>
 80125c2:	4a2a      	ldr	r2, [pc, #168]	; (801266c <__sflush_r+0x108>)
 80125c4:	40ca      	lsrs	r2, r1
 80125c6:	07d6      	lsls	r6, r2, #31
 80125c8:	d528      	bpl.n	801261c <__sflush_r+0xb8>
 80125ca:	2200      	movs	r2, #0
 80125cc:	6062      	str	r2, [r4, #4]
 80125ce:	6922      	ldr	r2, [r4, #16]
 80125d0:	04d9      	lsls	r1, r3, #19
 80125d2:	6022      	str	r2, [r4, #0]
 80125d4:	d504      	bpl.n	80125e0 <__sflush_r+0x7c>
 80125d6:	1c42      	adds	r2, r0, #1
 80125d8:	d101      	bne.n	80125de <__sflush_r+0x7a>
 80125da:	682b      	ldr	r3, [r5, #0]
 80125dc:	b903      	cbnz	r3, 80125e0 <__sflush_r+0x7c>
 80125de:	6560      	str	r0, [r4, #84]	; 0x54
 80125e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80125e2:	602f      	str	r7, [r5, #0]
 80125e4:	2900      	cmp	r1, #0
 80125e6:	d0ca      	beq.n	801257e <__sflush_r+0x1a>
 80125e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80125ec:	4299      	cmp	r1, r3
 80125ee:	d002      	beq.n	80125f6 <__sflush_r+0x92>
 80125f0:	4628      	mov	r0, r5
 80125f2:	f7fb fedb 	bl	800e3ac <_free_r>
 80125f6:	2000      	movs	r0, #0
 80125f8:	6360      	str	r0, [r4, #52]	; 0x34
 80125fa:	e7c1      	b.n	8012580 <__sflush_r+0x1c>
 80125fc:	6a21      	ldr	r1, [r4, #32]
 80125fe:	2301      	movs	r3, #1
 8012600:	4628      	mov	r0, r5
 8012602:	47b0      	blx	r6
 8012604:	1c41      	adds	r1, r0, #1
 8012606:	d1c7      	bne.n	8012598 <__sflush_r+0x34>
 8012608:	682b      	ldr	r3, [r5, #0]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d0c4      	beq.n	8012598 <__sflush_r+0x34>
 801260e:	2b1d      	cmp	r3, #29
 8012610:	d001      	beq.n	8012616 <__sflush_r+0xb2>
 8012612:	2b16      	cmp	r3, #22
 8012614:	d101      	bne.n	801261a <__sflush_r+0xb6>
 8012616:	602f      	str	r7, [r5, #0]
 8012618:	e7b1      	b.n	801257e <__sflush_r+0x1a>
 801261a:	89a3      	ldrh	r3, [r4, #12]
 801261c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012620:	81a3      	strh	r3, [r4, #12]
 8012622:	e7ad      	b.n	8012580 <__sflush_r+0x1c>
 8012624:	690f      	ldr	r7, [r1, #16]
 8012626:	2f00      	cmp	r7, #0
 8012628:	d0a9      	beq.n	801257e <__sflush_r+0x1a>
 801262a:	0793      	lsls	r3, r2, #30
 801262c:	bf18      	it	ne
 801262e:	2300      	movne	r3, #0
 8012630:	680e      	ldr	r6, [r1, #0]
 8012632:	bf08      	it	eq
 8012634:	694b      	ldreq	r3, [r1, #20]
 8012636:	eba6 0807 	sub.w	r8, r6, r7
 801263a:	600f      	str	r7, [r1, #0]
 801263c:	608b      	str	r3, [r1, #8]
 801263e:	f1b8 0f00 	cmp.w	r8, #0
 8012642:	dd9c      	ble.n	801257e <__sflush_r+0x1a>
 8012644:	4643      	mov	r3, r8
 8012646:	463a      	mov	r2, r7
 8012648:	4628      	mov	r0, r5
 801264a:	6a21      	ldr	r1, [r4, #32]
 801264c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801264e:	47b0      	blx	r6
 8012650:	2800      	cmp	r0, #0
 8012652:	dc06      	bgt.n	8012662 <__sflush_r+0xfe>
 8012654:	89a3      	ldrh	r3, [r4, #12]
 8012656:	f04f 30ff 	mov.w	r0, #4294967295
 801265a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801265e:	81a3      	strh	r3, [r4, #12]
 8012660:	e78e      	b.n	8012580 <__sflush_r+0x1c>
 8012662:	4407      	add	r7, r0
 8012664:	eba8 0800 	sub.w	r8, r8, r0
 8012668:	e7e9      	b.n	801263e <__sflush_r+0xda>
 801266a:	bf00      	nop
 801266c:	20400001 	.word	0x20400001

08012670 <_fflush_r>:
 8012670:	b538      	push	{r3, r4, r5, lr}
 8012672:	690b      	ldr	r3, [r1, #16]
 8012674:	4605      	mov	r5, r0
 8012676:	460c      	mov	r4, r1
 8012678:	b913      	cbnz	r3, 8012680 <_fflush_r+0x10>
 801267a:	2500      	movs	r5, #0
 801267c:	4628      	mov	r0, r5
 801267e:	bd38      	pop	{r3, r4, r5, pc}
 8012680:	b118      	cbz	r0, 801268a <_fflush_r+0x1a>
 8012682:	6983      	ldr	r3, [r0, #24]
 8012684:	b90b      	cbnz	r3, 801268a <_fflush_r+0x1a>
 8012686:	f000 f887 	bl	8012798 <__sinit>
 801268a:	4b14      	ldr	r3, [pc, #80]	; (80126dc <_fflush_r+0x6c>)
 801268c:	429c      	cmp	r4, r3
 801268e:	d11b      	bne.n	80126c8 <_fflush_r+0x58>
 8012690:	686c      	ldr	r4, [r5, #4]
 8012692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d0ef      	beq.n	801267a <_fflush_r+0xa>
 801269a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801269c:	07d0      	lsls	r0, r2, #31
 801269e:	d404      	bmi.n	80126aa <_fflush_r+0x3a>
 80126a0:	0599      	lsls	r1, r3, #22
 80126a2:	d402      	bmi.n	80126aa <_fflush_r+0x3a>
 80126a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126a6:	f7ff fcfc 	bl	80120a2 <__retarget_lock_acquire_recursive>
 80126aa:	4628      	mov	r0, r5
 80126ac:	4621      	mov	r1, r4
 80126ae:	f7ff ff59 	bl	8012564 <__sflush_r>
 80126b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126b4:	4605      	mov	r5, r0
 80126b6:	07da      	lsls	r2, r3, #31
 80126b8:	d4e0      	bmi.n	801267c <_fflush_r+0xc>
 80126ba:	89a3      	ldrh	r3, [r4, #12]
 80126bc:	059b      	lsls	r3, r3, #22
 80126be:	d4dd      	bmi.n	801267c <_fflush_r+0xc>
 80126c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126c2:	f7ff fcef 	bl	80120a4 <__retarget_lock_release_recursive>
 80126c6:	e7d9      	b.n	801267c <_fflush_r+0xc>
 80126c8:	4b05      	ldr	r3, [pc, #20]	; (80126e0 <_fflush_r+0x70>)
 80126ca:	429c      	cmp	r4, r3
 80126cc:	d101      	bne.n	80126d2 <_fflush_r+0x62>
 80126ce:	68ac      	ldr	r4, [r5, #8]
 80126d0:	e7df      	b.n	8012692 <_fflush_r+0x22>
 80126d2:	4b04      	ldr	r3, [pc, #16]	; (80126e4 <_fflush_r+0x74>)
 80126d4:	429c      	cmp	r4, r3
 80126d6:	bf08      	it	eq
 80126d8:	68ec      	ldreq	r4, [r5, #12]
 80126da:	e7da      	b.n	8012692 <_fflush_r+0x22>
 80126dc:	0801313c 	.word	0x0801313c
 80126e0:	0801315c 	.word	0x0801315c
 80126e4:	0801311c 	.word	0x0801311c

080126e8 <std>:
 80126e8:	2300      	movs	r3, #0
 80126ea:	b510      	push	{r4, lr}
 80126ec:	4604      	mov	r4, r0
 80126ee:	e9c0 3300 	strd	r3, r3, [r0]
 80126f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80126f6:	6083      	str	r3, [r0, #8]
 80126f8:	8181      	strh	r1, [r0, #12]
 80126fa:	6643      	str	r3, [r0, #100]	; 0x64
 80126fc:	81c2      	strh	r2, [r0, #14]
 80126fe:	6183      	str	r3, [r0, #24]
 8012700:	4619      	mov	r1, r3
 8012702:	2208      	movs	r2, #8
 8012704:	305c      	adds	r0, #92	; 0x5c
 8012706:	f7fb fe49 	bl	800e39c <memset>
 801270a:	4b05      	ldr	r3, [pc, #20]	; (8012720 <std+0x38>)
 801270c:	6224      	str	r4, [r4, #32]
 801270e:	6263      	str	r3, [r4, #36]	; 0x24
 8012710:	4b04      	ldr	r3, [pc, #16]	; (8012724 <std+0x3c>)
 8012712:	62a3      	str	r3, [r4, #40]	; 0x28
 8012714:	4b04      	ldr	r3, [pc, #16]	; (8012728 <std+0x40>)
 8012716:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012718:	4b04      	ldr	r3, [pc, #16]	; (801272c <std+0x44>)
 801271a:	6323      	str	r3, [r4, #48]	; 0x30
 801271c:	bd10      	pop	{r4, pc}
 801271e:	bf00      	nop
 8012720:	08012a35 	.word	0x08012a35
 8012724:	08012a57 	.word	0x08012a57
 8012728:	08012a8f 	.word	0x08012a8f
 801272c:	08012ab3 	.word	0x08012ab3

08012730 <_cleanup_r>:
 8012730:	4901      	ldr	r1, [pc, #4]	; (8012738 <_cleanup_r+0x8>)
 8012732:	f000 b8af 	b.w	8012894 <_fwalk_reent>
 8012736:	bf00      	nop
 8012738:	08012671 	.word	0x08012671

0801273c <__sfmoreglue>:
 801273c:	b570      	push	{r4, r5, r6, lr}
 801273e:	2568      	movs	r5, #104	; 0x68
 8012740:	1e4a      	subs	r2, r1, #1
 8012742:	4355      	muls	r5, r2
 8012744:	460e      	mov	r6, r1
 8012746:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801274a:	f7fb fe7b 	bl	800e444 <_malloc_r>
 801274e:	4604      	mov	r4, r0
 8012750:	b140      	cbz	r0, 8012764 <__sfmoreglue+0x28>
 8012752:	2100      	movs	r1, #0
 8012754:	e9c0 1600 	strd	r1, r6, [r0]
 8012758:	300c      	adds	r0, #12
 801275a:	60a0      	str	r0, [r4, #8]
 801275c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012760:	f7fb fe1c 	bl	800e39c <memset>
 8012764:	4620      	mov	r0, r4
 8012766:	bd70      	pop	{r4, r5, r6, pc}

08012768 <__sfp_lock_acquire>:
 8012768:	4801      	ldr	r0, [pc, #4]	; (8012770 <__sfp_lock_acquire+0x8>)
 801276a:	f7ff bc9a 	b.w	80120a2 <__retarget_lock_acquire_recursive>
 801276e:	bf00      	nop
 8012770:	2000d61c 	.word	0x2000d61c

08012774 <__sfp_lock_release>:
 8012774:	4801      	ldr	r0, [pc, #4]	; (801277c <__sfp_lock_release+0x8>)
 8012776:	f7ff bc95 	b.w	80120a4 <__retarget_lock_release_recursive>
 801277a:	bf00      	nop
 801277c:	2000d61c 	.word	0x2000d61c

08012780 <__sinit_lock_acquire>:
 8012780:	4801      	ldr	r0, [pc, #4]	; (8012788 <__sinit_lock_acquire+0x8>)
 8012782:	f7ff bc8e 	b.w	80120a2 <__retarget_lock_acquire_recursive>
 8012786:	bf00      	nop
 8012788:	2000d617 	.word	0x2000d617

0801278c <__sinit_lock_release>:
 801278c:	4801      	ldr	r0, [pc, #4]	; (8012794 <__sinit_lock_release+0x8>)
 801278e:	f7ff bc89 	b.w	80120a4 <__retarget_lock_release_recursive>
 8012792:	bf00      	nop
 8012794:	2000d617 	.word	0x2000d617

08012798 <__sinit>:
 8012798:	b510      	push	{r4, lr}
 801279a:	4604      	mov	r4, r0
 801279c:	f7ff fff0 	bl	8012780 <__sinit_lock_acquire>
 80127a0:	69a3      	ldr	r3, [r4, #24]
 80127a2:	b11b      	cbz	r3, 80127ac <__sinit+0x14>
 80127a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127a8:	f7ff bff0 	b.w	801278c <__sinit_lock_release>
 80127ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80127b0:	6523      	str	r3, [r4, #80]	; 0x50
 80127b2:	4b13      	ldr	r3, [pc, #76]	; (8012800 <__sinit+0x68>)
 80127b4:	4a13      	ldr	r2, [pc, #76]	; (8012804 <__sinit+0x6c>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80127ba:	42a3      	cmp	r3, r4
 80127bc:	bf08      	it	eq
 80127be:	2301      	moveq	r3, #1
 80127c0:	4620      	mov	r0, r4
 80127c2:	bf08      	it	eq
 80127c4:	61a3      	streq	r3, [r4, #24]
 80127c6:	f000 f81f 	bl	8012808 <__sfp>
 80127ca:	6060      	str	r0, [r4, #4]
 80127cc:	4620      	mov	r0, r4
 80127ce:	f000 f81b 	bl	8012808 <__sfp>
 80127d2:	60a0      	str	r0, [r4, #8]
 80127d4:	4620      	mov	r0, r4
 80127d6:	f000 f817 	bl	8012808 <__sfp>
 80127da:	2200      	movs	r2, #0
 80127dc:	2104      	movs	r1, #4
 80127de:	60e0      	str	r0, [r4, #12]
 80127e0:	6860      	ldr	r0, [r4, #4]
 80127e2:	f7ff ff81 	bl	80126e8 <std>
 80127e6:	2201      	movs	r2, #1
 80127e8:	2109      	movs	r1, #9
 80127ea:	68a0      	ldr	r0, [r4, #8]
 80127ec:	f7ff ff7c 	bl	80126e8 <std>
 80127f0:	2202      	movs	r2, #2
 80127f2:	2112      	movs	r1, #18
 80127f4:	68e0      	ldr	r0, [r4, #12]
 80127f6:	f7ff ff77 	bl	80126e8 <std>
 80127fa:	2301      	movs	r3, #1
 80127fc:	61a3      	str	r3, [r4, #24]
 80127fe:	e7d1      	b.n	80127a4 <__sinit+0xc>
 8012800:	08012cc4 	.word	0x08012cc4
 8012804:	08012731 	.word	0x08012731

08012808 <__sfp>:
 8012808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801280a:	4607      	mov	r7, r0
 801280c:	f7ff ffac 	bl	8012768 <__sfp_lock_acquire>
 8012810:	4b1e      	ldr	r3, [pc, #120]	; (801288c <__sfp+0x84>)
 8012812:	681e      	ldr	r6, [r3, #0]
 8012814:	69b3      	ldr	r3, [r6, #24]
 8012816:	b913      	cbnz	r3, 801281e <__sfp+0x16>
 8012818:	4630      	mov	r0, r6
 801281a:	f7ff ffbd 	bl	8012798 <__sinit>
 801281e:	3648      	adds	r6, #72	; 0x48
 8012820:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012824:	3b01      	subs	r3, #1
 8012826:	d503      	bpl.n	8012830 <__sfp+0x28>
 8012828:	6833      	ldr	r3, [r6, #0]
 801282a:	b30b      	cbz	r3, 8012870 <__sfp+0x68>
 801282c:	6836      	ldr	r6, [r6, #0]
 801282e:	e7f7      	b.n	8012820 <__sfp+0x18>
 8012830:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012834:	b9d5      	cbnz	r5, 801286c <__sfp+0x64>
 8012836:	4b16      	ldr	r3, [pc, #88]	; (8012890 <__sfp+0x88>)
 8012838:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801283c:	60e3      	str	r3, [r4, #12]
 801283e:	6665      	str	r5, [r4, #100]	; 0x64
 8012840:	f7ff fc2e 	bl	80120a0 <__retarget_lock_init_recursive>
 8012844:	f7ff ff96 	bl	8012774 <__sfp_lock_release>
 8012848:	2208      	movs	r2, #8
 801284a:	4629      	mov	r1, r5
 801284c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012850:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012854:	6025      	str	r5, [r4, #0]
 8012856:	61a5      	str	r5, [r4, #24]
 8012858:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801285c:	f7fb fd9e 	bl	800e39c <memset>
 8012860:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012864:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012868:	4620      	mov	r0, r4
 801286a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801286c:	3468      	adds	r4, #104	; 0x68
 801286e:	e7d9      	b.n	8012824 <__sfp+0x1c>
 8012870:	2104      	movs	r1, #4
 8012872:	4638      	mov	r0, r7
 8012874:	f7ff ff62 	bl	801273c <__sfmoreglue>
 8012878:	4604      	mov	r4, r0
 801287a:	6030      	str	r0, [r6, #0]
 801287c:	2800      	cmp	r0, #0
 801287e:	d1d5      	bne.n	801282c <__sfp+0x24>
 8012880:	f7ff ff78 	bl	8012774 <__sfp_lock_release>
 8012884:	230c      	movs	r3, #12
 8012886:	603b      	str	r3, [r7, #0]
 8012888:	e7ee      	b.n	8012868 <__sfp+0x60>
 801288a:	bf00      	nop
 801288c:	08012cc4 	.word	0x08012cc4
 8012890:	ffff0001 	.word	0xffff0001

08012894 <_fwalk_reent>:
 8012894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012898:	4606      	mov	r6, r0
 801289a:	4688      	mov	r8, r1
 801289c:	2700      	movs	r7, #0
 801289e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80128a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80128a6:	f1b9 0901 	subs.w	r9, r9, #1
 80128aa:	d505      	bpl.n	80128b8 <_fwalk_reent+0x24>
 80128ac:	6824      	ldr	r4, [r4, #0]
 80128ae:	2c00      	cmp	r4, #0
 80128b0:	d1f7      	bne.n	80128a2 <_fwalk_reent+0xe>
 80128b2:	4638      	mov	r0, r7
 80128b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128b8:	89ab      	ldrh	r3, [r5, #12]
 80128ba:	2b01      	cmp	r3, #1
 80128bc:	d907      	bls.n	80128ce <_fwalk_reent+0x3a>
 80128be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80128c2:	3301      	adds	r3, #1
 80128c4:	d003      	beq.n	80128ce <_fwalk_reent+0x3a>
 80128c6:	4629      	mov	r1, r5
 80128c8:	4630      	mov	r0, r6
 80128ca:	47c0      	blx	r8
 80128cc:	4307      	orrs	r7, r0
 80128ce:	3568      	adds	r5, #104	; 0x68
 80128d0:	e7e9      	b.n	80128a6 <_fwalk_reent+0x12>

080128d2 <__swhatbuf_r>:
 80128d2:	b570      	push	{r4, r5, r6, lr}
 80128d4:	460e      	mov	r6, r1
 80128d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128da:	4614      	mov	r4, r2
 80128dc:	2900      	cmp	r1, #0
 80128de:	461d      	mov	r5, r3
 80128e0:	b096      	sub	sp, #88	; 0x58
 80128e2:	da07      	bge.n	80128f4 <__swhatbuf_r+0x22>
 80128e4:	2300      	movs	r3, #0
 80128e6:	602b      	str	r3, [r5, #0]
 80128e8:	89b3      	ldrh	r3, [r6, #12]
 80128ea:	061a      	lsls	r2, r3, #24
 80128ec:	d410      	bmi.n	8012910 <__swhatbuf_r+0x3e>
 80128ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80128f2:	e00e      	b.n	8012912 <__swhatbuf_r+0x40>
 80128f4:	466a      	mov	r2, sp
 80128f6:	f000 f903 	bl	8012b00 <_fstat_r>
 80128fa:	2800      	cmp	r0, #0
 80128fc:	dbf2      	blt.n	80128e4 <__swhatbuf_r+0x12>
 80128fe:	9a01      	ldr	r2, [sp, #4]
 8012900:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012904:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012908:	425a      	negs	r2, r3
 801290a:	415a      	adcs	r2, r3
 801290c:	602a      	str	r2, [r5, #0]
 801290e:	e7ee      	b.n	80128ee <__swhatbuf_r+0x1c>
 8012910:	2340      	movs	r3, #64	; 0x40
 8012912:	2000      	movs	r0, #0
 8012914:	6023      	str	r3, [r4, #0]
 8012916:	b016      	add	sp, #88	; 0x58
 8012918:	bd70      	pop	{r4, r5, r6, pc}
	...

0801291c <__smakebuf_r>:
 801291c:	898b      	ldrh	r3, [r1, #12]
 801291e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012920:	079d      	lsls	r5, r3, #30
 8012922:	4606      	mov	r6, r0
 8012924:	460c      	mov	r4, r1
 8012926:	d507      	bpl.n	8012938 <__smakebuf_r+0x1c>
 8012928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801292c:	6023      	str	r3, [r4, #0]
 801292e:	6123      	str	r3, [r4, #16]
 8012930:	2301      	movs	r3, #1
 8012932:	6163      	str	r3, [r4, #20]
 8012934:	b002      	add	sp, #8
 8012936:	bd70      	pop	{r4, r5, r6, pc}
 8012938:	466a      	mov	r2, sp
 801293a:	ab01      	add	r3, sp, #4
 801293c:	f7ff ffc9 	bl	80128d2 <__swhatbuf_r>
 8012940:	9900      	ldr	r1, [sp, #0]
 8012942:	4605      	mov	r5, r0
 8012944:	4630      	mov	r0, r6
 8012946:	f7fb fd7d 	bl	800e444 <_malloc_r>
 801294a:	b948      	cbnz	r0, 8012960 <__smakebuf_r+0x44>
 801294c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012950:	059a      	lsls	r2, r3, #22
 8012952:	d4ef      	bmi.n	8012934 <__smakebuf_r+0x18>
 8012954:	f023 0303 	bic.w	r3, r3, #3
 8012958:	f043 0302 	orr.w	r3, r3, #2
 801295c:	81a3      	strh	r3, [r4, #12]
 801295e:	e7e3      	b.n	8012928 <__smakebuf_r+0xc>
 8012960:	4b0d      	ldr	r3, [pc, #52]	; (8012998 <__smakebuf_r+0x7c>)
 8012962:	62b3      	str	r3, [r6, #40]	; 0x28
 8012964:	89a3      	ldrh	r3, [r4, #12]
 8012966:	6020      	str	r0, [r4, #0]
 8012968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801296c:	81a3      	strh	r3, [r4, #12]
 801296e:	9b00      	ldr	r3, [sp, #0]
 8012970:	6120      	str	r0, [r4, #16]
 8012972:	6163      	str	r3, [r4, #20]
 8012974:	9b01      	ldr	r3, [sp, #4]
 8012976:	b15b      	cbz	r3, 8012990 <__smakebuf_r+0x74>
 8012978:	4630      	mov	r0, r6
 801297a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801297e:	f000 f8d1 	bl	8012b24 <_isatty_r>
 8012982:	b128      	cbz	r0, 8012990 <__smakebuf_r+0x74>
 8012984:	89a3      	ldrh	r3, [r4, #12]
 8012986:	f023 0303 	bic.w	r3, r3, #3
 801298a:	f043 0301 	orr.w	r3, r3, #1
 801298e:	81a3      	strh	r3, [r4, #12]
 8012990:	89a0      	ldrh	r0, [r4, #12]
 8012992:	4305      	orrs	r5, r0
 8012994:	81a5      	strh	r5, [r4, #12]
 8012996:	e7cd      	b.n	8012934 <__smakebuf_r+0x18>
 8012998:	08012731 	.word	0x08012731

0801299c <_malloc_usable_size_r>:
 801299c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129a0:	1f18      	subs	r0, r3, #4
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	bfbc      	itt	lt
 80129a6:	580b      	ldrlt	r3, [r1, r0]
 80129a8:	18c0      	addlt	r0, r0, r3
 80129aa:	4770      	bx	lr

080129ac <_raise_r>:
 80129ac:	291f      	cmp	r1, #31
 80129ae:	b538      	push	{r3, r4, r5, lr}
 80129b0:	4604      	mov	r4, r0
 80129b2:	460d      	mov	r5, r1
 80129b4:	d904      	bls.n	80129c0 <_raise_r+0x14>
 80129b6:	2316      	movs	r3, #22
 80129b8:	6003      	str	r3, [r0, #0]
 80129ba:	f04f 30ff 	mov.w	r0, #4294967295
 80129be:	bd38      	pop	{r3, r4, r5, pc}
 80129c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80129c2:	b112      	cbz	r2, 80129ca <_raise_r+0x1e>
 80129c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129c8:	b94b      	cbnz	r3, 80129de <_raise_r+0x32>
 80129ca:	4620      	mov	r0, r4
 80129cc:	f000 f830 	bl	8012a30 <_getpid_r>
 80129d0:	462a      	mov	r2, r5
 80129d2:	4601      	mov	r1, r0
 80129d4:	4620      	mov	r0, r4
 80129d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129da:	f000 b817 	b.w	8012a0c <_kill_r>
 80129de:	2b01      	cmp	r3, #1
 80129e0:	d00a      	beq.n	80129f8 <_raise_r+0x4c>
 80129e2:	1c59      	adds	r1, r3, #1
 80129e4:	d103      	bne.n	80129ee <_raise_r+0x42>
 80129e6:	2316      	movs	r3, #22
 80129e8:	6003      	str	r3, [r0, #0]
 80129ea:	2001      	movs	r0, #1
 80129ec:	e7e7      	b.n	80129be <_raise_r+0x12>
 80129ee:	2400      	movs	r4, #0
 80129f0:	4628      	mov	r0, r5
 80129f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80129f6:	4798      	blx	r3
 80129f8:	2000      	movs	r0, #0
 80129fa:	e7e0      	b.n	80129be <_raise_r+0x12>

080129fc <raise>:
 80129fc:	4b02      	ldr	r3, [pc, #8]	; (8012a08 <raise+0xc>)
 80129fe:	4601      	mov	r1, r0
 8012a00:	6818      	ldr	r0, [r3, #0]
 8012a02:	f7ff bfd3 	b.w	80129ac <_raise_r>
 8012a06:	bf00      	nop
 8012a08:	20000060 	.word	0x20000060

08012a0c <_kill_r>:
 8012a0c:	b538      	push	{r3, r4, r5, lr}
 8012a0e:	2300      	movs	r3, #0
 8012a10:	4d06      	ldr	r5, [pc, #24]	; (8012a2c <_kill_r+0x20>)
 8012a12:	4604      	mov	r4, r0
 8012a14:	4608      	mov	r0, r1
 8012a16:	4611      	mov	r1, r2
 8012a18:	602b      	str	r3, [r5, #0]
 8012a1a:	f7f0 f84c 	bl	8002ab6 <_kill>
 8012a1e:	1c43      	adds	r3, r0, #1
 8012a20:	d102      	bne.n	8012a28 <_kill_r+0x1c>
 8012a22:	682b      	ldr	r3, [r5, #0]
 8012a24:	b103      	cbz	r3, 8012a28 <_kill_r+0x1c>
 8012a26:	6023      	str	r3, [r4, #0]
 8012a28:	bd38      	pop	{r3, r4, r5, pc}
 8012a2a:	bf00      	nop
 8012a2c:	2000d610 	.word	0x2000d610

08012a30 <_getpid_r>:
 8012a30:	f7f0 b83a 	b.w	8002aa8 <_getpid>

08012a34 <__sread>:
 8012a34:	b510      	push	{r4, lr}
 8012a36:	460c      	mov	r4, r1
 8012a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a3c:	f000 f894 	bl	8012b68 <_read_r>
 8012a40:	2800      	cmp	r0, #0
 8012a42:	bfab      	itete	ge
 8012a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a46:	89a3      	ldrhlt	r3, [r4, #12]
 8012a48:	181b      	addge	r3, r3, r0
 8012a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a4e:	bfac      	ite	ge
 8012a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a52:	81a3      	strhlt	r3, [r4, #12]
 8012a54:	bd10      	pop	{r4, pc}

08012a56 <__swrite>:
 8012a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a5a:	461f      	mov	r7, r3
 8012a5c:	898b      	ldrh	r3, [r1, #12]
 8012a5e:	4605      	mov	r5, r0
 8012a60:	05db      	lsls	r3, r3, #23
 8012a62:	460c      	mov	r4, r1
 8012a64:	4616      	mov	r6, r2
 8012a66:	d505      	bpl.n	8012a74 <__swrite+0x1e>
 8012a68:	2302      	movs	r3, #2
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a70:	f000 f868 	bl	8012b44 <_lseek_r>
 8012a74:	89a3      	ldrh	r3, [r4, #12]
 8012a76:	4632      	mov	r2, r6
 8012a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a7c:	81a3      	strh	r3, [r4, #12]
 8012a7e:	4628      	mov	r0, r5
 8012a80:	463b      	mov	r3, r7
 8012a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a8a:	f000 b817 	b.w	8012abc <_write_r>

08012a8e <__sseek>:
 8012a8e:	b510      	push	{r4, lr}
 8012a90:	460c      	mov	r4, r1
 8012a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a96:	f000 f855 	bl	8012b44 <_lseek_r>
 8012a9a:	1c43      	adds	r3, r0, #1
 8012a9c:	89a3      	ldrh	r3, [r4, #12]
 8012a9e:	bf15      	itete	ne
 8012aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8012aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012aaa:	81a3      	strheq	r3, [r4, #12]
 8012aac:	bf18      	it	ne
 8012aae:	81a3      	strhne	r3, [r4, #12]
 8012ab0:	bd10      	pop	{r4, pc}

08012ab2 <__sclose>:
 8012ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ab6:	f000 b813 	b.w	8012ae0 <_close_r>
	...

08012abc <_write_r>:
 8012abc:	b538      	push	{r3, r4, r5, lr}
 8012abe:	4604      	mov	r4, r0
 8012ac0:	4608      	mov	r0, r1
 8012ac2:	4611      	mov	r1, r2
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	4d05      	ldr	r5, [pc, #20]	; (8012adc <_write_r+0x20>)
 8012ac8:	602a      	str	r2, [r5, #0]
 8012aca:	461a      	mov	r2, r3
 8012acc:	f7f0 f82a 	bl	8002b24 <_write>
 8012ad0:	1c43      	adds	r3, r0, #1
 8012ad2:	d102      	bne.n	8012ada <_write_r+0x1e>
 8012ad4:	682b      	ldr	r3, [r5, #0]
 8012ad6:	b103      	cbz	r3, 8012ada <_write_r+0x1e>
 8012ad8:	6023      	str	r3, [r4, #0]
 8012ada:	bd38      	pop	{r3, r4, r5, pc}
 8012adc:	2000d610 	.word	0x2000d610

08012ae0 <_close_r>:
 8012ae0:	b538      	push	{r3, r4, r5, lr}
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	4d05      	ldr	r5, [pc, #20]	; (8012afc <_close_r+0x1c>)
 8012ae6:	4604      	mov	r4, r0
 8012ae8:	4608      	mov	r0, r1
 8012aea:	602b      	str	r3, [r5, #0]
 8012aec:	f7f0 f836 	bl	8002b5c <_close>
 8012af0:	1c43      	adds	r3, r0, #1
 8012af2:	d102      	bne.n	8012afa <_close_r+0x1a>
 8012af4:	682b      	ldr	r3, [r5, #0]
 8012af6:	b103      	cbz	r3, 8012afa <_close_r+0x1a>
 8012af8:	6023      	str	r3, [r4, #0]
 8012afa:	bd38      	pop	{r3, r4, r5, pc}
 8012afc:	2000d610 	.word	0x2000d610

08012b00 <_fstat_r>:
 8012b00:	b538      	push	{r3, r4, r5, lr}
 8012b02:	2300      	movs	r3, #0
 8012b04:	4d06      	ldr	r5, [pc, #24]	; (8012b20 <_fstat_r+0x20>)
 8012b06:	4604      	mov	r4, r0
 8012b08:	4608      	mov	r0, r1
 8012b0a:	4611      	mov	r1, r2
 8012b0c:	602b      	str	r3, [r5, #0]
 8012b0e:	f7f0 f830 	bl	8002b72 <_fstat>
 8012b12:	1c43      	adds	r3, r0, #1
 8012b14:	d102      	bne.n	8012b1c <_fstat_r+0x1c>
 8012b16:	682b      	ldr	r3, [r5, #0]
 8012b18:	b103      	cbz	r3, 8012b1c <_fstat_r+0x1c>
 8012b1a:	6023      	str	r3, [r4, #0]
 8012b1c:	bd38      	pop	{r3, r4, r5, pc}
 8012b1e:	bf00      	nop
 8012b20:	2000d610 	.word	0x2000d610

08012b24 <_isatty_r>:
 8012b24:	b538      	push	{r3, r4, r5, lr}
 8012b26:	2300      	movs	r3, #0
 8012b28:	4d05      	ldr	r5, [pc, #20]	; (8012b40 <_isatty_r+0x1c>)
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	4608      	mov	r0, r1
 8012b2e:	602b      	str	r3, [r5, #0]
 8012b30:	f7f0 f82e 	bl	8002b90 <_isatty>
 8012b34:	1c43      	adds	r3, r0, #1
 8012b36:	d102      	bne.n	8012b3e <_isatty_r+0x1a>
 8012b38:	682b      	ldr	r3, [r5, #0]
 8012b3a:	b103      	cbz	r3, 8012b3e <_isatty_r+0x1a>
 8012b3c:	6023      	str	r3, [r4, #0]
 8012b3e:	bd38      	pop	{r3, r4, r5, pc}
 8012b40:	2000d610 	.word	0x2000d610

08012b44 <_lseek_r>:
 8012b44:	b538      	push	{r3, r4, r5, lr}
 8012b46:	4604      	mov	r4, r0
 8012b48:	4608      	mov	r0, r1
 8012b4a:	4611      	mov	r1, r2
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	4d05      	ldr	r5, [pc, #20]	; (8012b64 <_lseek_r+0x20>)
 8012b50:	602a      	str	r2, [r5, #0]
 8012b52:	461a      	mov	r2, r3
 8012b54:	f7f0 f826 	bl	8002ba4 <_lseek>
 8012b58:	1c43      	adds	r3, r0, #1
 8012b5a:	d102      	bne.n	8012b62 <_lseek_r+0x1e>
 8012b5c:	682b      	ldr	r3, [r5, #0]
 8012b5e:	b103      	cbz	r3, 8012b62 <_lseek_r+0x1e>
 8012b60:	6023      	str	r3, [r4, #0]
 8012b62:	bd38      	pop	{r3, r4, r5, pc}
 8012b64:	2000d610 	.word	0x2000d610

08012b68 <_read_r>:
 8012b68:	b538      	push	{r3, r4, r5, lr}
 8012b6a:	4604      	mov	r4, r0
 8012b6c:	4608      	mov	r0, r1
 8012b6e:	4611      	mov	r1, r2
 8012b70:	2200      	movs	r2, #0
 8012b72:	4d05      	ldr	r5, [pc, #20]	; (8012b88 <_read_r+0x20>)
 8012b74:	602a      	str	r2, [r5, #0]
 8012b76:	461a      	mov	r2, r3
 8012b78:	f7ef ffb7 	bl	8002aea <_read>
 8012b7c:	1c43      	adds	r3, r0, #1
 8012b7e:	d102      	bne.n	8012b86 <_read_r+0x1e>
 8012b80:	682b      	ldr	r3, [r5, #0]
 8012b82:	b103      	cbz	r3, 8012b86 <_read_r+0x1e>
 8012b84:	6023      	str	r3, [r4, #0]
 8012b86:	bd38      	pop	{r3, r4, r5, pc}
 8012b88:	2000d610 	.word	0x2000d610

08012b8c <_init>:
 8012b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b8e:	bf00      	nop
 8012b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b92:	bc08      	pop	{r3}
 8012b94:	469e      	mov	lr, r3
 8012b96:	4770      	bx	lr

08012b98 <_fini>:
 8012b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b9a:	bf00      	nop
 8012b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b9e:	bc08      	pop	{r3}
 8012ba0:	469e      	mov	lr, r3
 8012ba2:	4770      	bx	lr
