
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015860  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  080159f0  080159f0  000259f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016064  08016064  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  08016064  08016064  00026064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801606c  0801606c  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801606c  0801606c  0002606c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016070  08016070  00026070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08016074  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b39c  20000228  0801629c  00030228  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  2000b5c4  0801629c  0003b5c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00054fe5  00000000  00000000  00030251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008634  00000000  00000000  00085236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fc0  00000000  00000000  0008d870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c98  00000000  00000000  0008f830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d205  00000000  00000000  000914c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030e05  00000000  00000000  0009e6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db0a3  00000000  00000000  000cf4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001aa575  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009694  00000000  00000000  001aa5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080159d8 	.word	0x080159d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	080159d8 	.word	0x080159d8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_drsub>:
 80001f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f8:	e002      	b.n	8000200 <__adddf3>
 80001fa:	bf00      	nop

080001fc <__aeabi_dsub>:
 80001fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000200 <__adddf3>:
 8000200:	b530      	push	{r4, r5, lr}
 8000202:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000206:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020a:	ea94 0f05 	teq	r4, r5
 800020e:	bf08      	it	eq
 8000210:	ea90 0f02 	teqeq	r0, r2
 8000214:	bf1f      	itttt	ne
 8000216:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000222:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000226:	f000 80e2 	beq.w	80003ee <__adddf3+0x1ee>
 800022a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000232:	bfb8      	it	lt
 8000234:	426d      	neglt	r5, r5
 8000236:	dd0c      	ble.n	8000252 <__adddf3+0x52>
 8000238:	442c      	add	r4, r5
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	ea82 0000 	eor.w	r0, r2, r0
 8000246:	ea83 0101 	eor.w	r1, r3, r1
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	2d36      	cmp	r5, #54	; 0x36
 8000254:	bf88      	it	hi
 8000256:	bd30      	pophi	{r4, r5, pc}
 8000258:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800025c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000260:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000264:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x70>
 800026a:	4240      	negs	r0, r0
 800026c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000270:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000274:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000278:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x84>
 800027e:	4252      	negs	r2, r2
 8000280:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000284:	ea94 0f05 	teq	r4, r5
 8000288:	f000 80a7 	beq.w	80003da <__adddf3+0x1da>
 800028c:	f1a4 0401 	sub.w	r4, r4, #1
 8000290:	f1d5 0e20 	rsbs	lr, r5, #32
 8000294:	db0d      	blt.n	80002b2 <__adddf3+0xb2>
 8000296:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029a:	fa22 f205 	lsr.w	r2, r2, r5
 800029e:	1880      	adds	r0, r0, r2
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a8:	1880      	adds	r0, r0, r2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	4159      	adcs	r1, r3
 80002b0:	e00e      	b.n	80002d0 <__adddf3+0xd0>
 80002b2:	f1a5 0520 	sub.w	r5, r5, #32
 80002b6:	f10e 0e20 	add.w	lr, lr, #32
 80002ba:	2a01      	cmp	r2, #1
 80002bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c0:	bf28      	it	cs
 80002c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	18c0      	adds	r0, r0, r3
 80002cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d4:	d507      	bpl.n	80002e6 <__adddf3+0xe6>
 80002d6:	f04f 0e00 	mov.w	lr, #0
 80002da:	f1dc 0c00 	rsbs	ip, ip, #0
 80002de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ea:	d31b      	bcc.n	8000324 <__adddf3+0x124>
 80002ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f0:	d30c      	bcc.n	800030c <__adddf3+0x10c>
 80002f2:	0849      	lsrs	r1, r1, #1
 80002f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002fc:	f104 0401 	add.w	r4, r4, #1
 8000300:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000304:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000308:	f080 809a 	bcs.w	8000440 <__adddf3+0x240>
 800030c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000310:	bf08      	it	eq
 8000312:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000316:	f150 0000 	adcs.w	r0, r0, #0
 800031a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031e:	ea41 0105 	orr.w	r1, r1, r5
 8000322:	bd30      	pop	{r4, r5, pc}
 8000324:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000328:	4140      	adcs	r0, r0
 800032a:	eb41 0101 	adc.w	r1, r1, r1
 800032e:	3c01      	subs	r4, #1
 8000330:	bf28      	it	cs
 8000332:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000336:	d2e9      	bcs.n	800030c <__adddf3+0x10c>
 8000338:	f091 0f00 	teq	r1, #0
 800033c:	bf04      	itt	eq
 800033e:	4601      	moveq	r1, r0
 8000340:	2000      	moveq	r0, #0
 8000342:	fab1 f381 	clz	r3, r1
 8000346:	bf08      	it	eq
 8000348:	3320      	addeq	r3, #32
 800034a:	f1a3 030b 	sub.w	r3, r3, #11
 800034e:	f1b3 0220 	subs.w	r2, r3, #32
 8000352:	da0c      	bge.n	800036e <__adddf3+0x16e>
 8000354:	320c      	adds	r2, #12
 8000356:	dd08      	ble.n	800036a <__adddf3+0x16a>
 8000358:	f102 0c14 	add.w	ip, r2, #20
 800035c:	f1c2 020c 	rsb	r2, r2, #12
 8000360:	fa01 f00c 	lsl.w	r0, r1, ip
 8000364:	fa21 f102 	lsr.w	r1, r1, r2
 8000368:	e00c      	b.n	8000384 <__adddf3+0x184>
 800036a:	f102 0214 	add.w	r2, r2, #20
 800036e:	bfd8      	it	le
 8000370:	f1c2 0c20 	rsble	ip, r2, #32
 8000374:	fa01 f102 	lsl.w	r1, r1, r2
 8000378:	fa20 fc0c 	lsr.w	ip, r0, ip
 800037c:	bfdc      	itt	le
 800037e:	ea41 010c 	orrle.w	r1, r1, ip
 8000382:	4090      	lslle	r0, r2
 8000384:	1ae4      	subs	r4, r4, r3
 8000386:	bfa2      	ittt	ge
 8000388:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800038c:	4329      	orrge	r1, r5
 800038e:	bd30      	popge	{r4, r5, pc}
 8000390:	ea6f 0404 	mvn.w	r4, r4
 8000394:	3c1f      	subs	r4, #31
 8000396:	da1c      	bge.n	80003d2 <__adddf3+0x1d2>
 8000398:	340c      	adds	r4, #12
 800039a:	dc0e      	bgt.n	80003ba <__adddf3+0x1ba>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0220 	rsb	r2, r4, #32
 80003a4:	fa20 f004 	lsr.w	r0, r0, r4
 80003a8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ac:	ea40 0003 	orr.w	r0, r0, r3
 80003b0:	fa21 f304 	lsr.w	r3, r1, r4
 80003b4:	ea45 0103 	orr.w	r1, r5, r3
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f1c4 040c 	rsb	r4, r4, #12
 80003be:	f1c4 0220 	rsb	r2, r4, #32
 80003c2:	fa20 f002 	lsr.w	r0, r0, r2
 80003c6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ca:	ea40 0003 	orr.w	r0, r0, r3
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	fa21 f004 	lsr.w	r0, r1, r4
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f094 0f00 	teq	r4, #0
 80003de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003e2:	bf06      	itte	eq
 80003e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e8:	3401      	addeq	r4, #1
 80003ea:	3d01      	subne	r5, #1
 80003ec:	e74e      	b.n	800028c <__adddf3+0x8c>
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf18      	it	ne
 80003f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f8:	d029      	beq.n	800044e <__adddf3+0x24e>
 80003fa:	ea94 0f05 	teq	r4, r5
 80003fe:	bf08      	it	eq
 8000400:	ea90 0f02 	teqeq	r0, r2
 8000404:	d005      	beq.n	8000412 <__adddf3+0x212>
 8000406:	ea54 0c00 	orrs.w	ip, r4, r0
 800040a:	bf04      	itt	eq
 800040c:	4619      	moveq	r1, r3
 800040e:	4610      	moveq	r0, r2
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	ea91 0f03 	teq	r1, r3
 8000416:	bf1e      	ittt	ne
 8000418:	2100      	movne	r1, #0
 800041a:	2000      	movne	r0, #0
 800041c:	bd30      	popne	{r4, r5, pc}
 800041e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000422:	d105      	bne.n	8000430 <__adddf3+0x230>
 8000424:	0040      	lsls	r0, r0, #1
 8000426:	4149      	adcs	r1, r1
 8000428:	bf28      	it	cs
 800042a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000434:	bf3c      	itt	cc
 8000436:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800043a:	bd30      	popcc	{r4, r5, pc}
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf1a      	itte	ne
 8000454:	4619      	movne	r1, r3
 8000456:	4610      	movne	r0, r2
 8000458:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800045c:	bf1c      	itt	ne
 800045e:	460b      	movne	r3, r1
 8000460:	4602      	movne	r2, r0
 8000462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000466:	bf06      	itte	eq
 8000468:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800046c:	ea91 0f03 	teqeq	r1, r3
 8000470:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	bf00      	nop

08000478 <__aeabi_ui2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f04f 0500 	mov.w	r5, #0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e750      	b.n	8000338 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_i2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b0:	bf48      	it	mi
 80004b2:	4240      	negmi	r0, r0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e73e      	b.n	8000338 <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_f2d>:
 80004bc:	0042      	lsls	r2, r0, #1
 80004be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ca:	bf1f      	itttt	ne
 80004cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d8:	4770      	bxne	lr
 80004da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004de:	bf08      	it	eq
 80004e0:	4770      	bxeq	lr
 80004e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e6:	bf04      	itt	eq
 80004e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	e71c      	b.n	8000338 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_ul2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	e00a      	b.n	8000526 <__aeabi_l2d+0x16>

08000510 <__aeabi_l2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051e:	d502      	bpl.n	8000526 <__aeabi_l2d+0x16>
 8000520:	4240      	negs	r0, r0
 8000522:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000526:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000532:	f43f aed8 	beq.w	80002e6 <__adddf3+0xe6>
 8000536:	f04f 0203 	mov.w	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054e:	f1c2 0320 	rsb	r3, r2, #32
 8000552:	fa00 fc03 	lsl.w	ip, r0, r3
 8000556:	fa20 f002 	lsr.w	r0, r0, r2
 800055a:	fa01 fe03 	lsl.w	lr, r1, r3
 800055e:	ea40 000e 	orr.w	r0, r0, lr
 8000562:	fa21 f102 	lsr.w	r1, r1, r2
 8000566:	4414      	add	r4, r2
 8000568:	e6bd      	b.n	80002e6 <__adddf3+0xe6>
 800056a:	bf00      	nop

0800056c <__aeabi_dmul>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000572:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000576:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057a:	bf1d      	ittte	ne
 800057c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000580:	ea94 0f0c 	teqne	r4, ip
 8000584:	ea95 0f0c 	teqne	r5, ip
 8000588:	f000 f8de 	bleq	8000748 <__aeabi_dmul+0x1dc>
 800058c:	442c      	add	r4, r5
 800058e:	ea81 0603 	eor.w	r6, r1, r3
 8000592:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000596:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059e:	bf18      	it	ne
 80005a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ac:	d038      	beq.n	8000620 <__aeabi_dmul+0xb4>
 80005ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c2:	f04f 0600 	mov.w	r6, #0
 80005c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ca:	f09c 0f00 	teq	ip, #0
 80005ce:	bf18      	it	ne
 80005d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e0:	d204      	bcs.n	80005ec <__aeabi_dmul+0x80>
 80005e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e6:	416d      	adcs	r5, r5
 80005e8:	eb46 0606 	adc.w	r6, r6, r6
 80005ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000600:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000604:	bf88      	it	hi
 8000606:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060a:	d81e      	bhi.n	800064a <__aeabi_dmul+0xde>
 800060c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000624:	ea46 0101 	orr.w	r1, r6, r1
 8000628:	ea40 0002 	orr.w	r0, r0, r2
 800062c:	ea81 0103 	eor.w	r1, r1, r3
 8000630:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000634:	bfc2      	ittt	gt
 8000636:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063e:	bd70      	popgt	{r4, r5, r6, pc}
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f04f 0e00 	mov.w	lr, #0
 8000648:	3c01      	subs	r4, #1
 800064a:	f300 80ab 	bgt.w	80007a4 <__aeabi_dmul+0x238>
 800064e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000652:	bfde      	ittt	le
 8000654:	2000      	movle	r0, #0
 8000656:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065a:	bd70      	pople	{r4, r5, r6, pc}
 800065c:	f1c4 0400 	rsb	r4, r4, #0
 8000660:	3c20      	subs	r4, #32
 8000662:	da35      	bge.n	80006d0 <__aeabi_dmul+0x164>
 8000664:	340c      	adds	r4, #12
 8000666:	dc1b      	bgt.n	80006a0 <__aeabi_dmul+0x134>
 8000668:	f104 0414 	add.w	r4, r4, #20
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f305 	lsl.w	r3, r0, r5
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f205 	lsl.w	r2, r1, r5
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	fa21 f604 	lsr.w	r6, r1, r4
 8000690:	eb42 0106 	adc.w	r1, r2, r6
 8000694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000698:	bf08      	it	eq
 800069a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f1c4 040c 	rsb	r4, r4, #12
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ac:	fa20 f005 	lsr.w	r0, r0, r5
 80006b0:	fa01 f204 	lsl.w	r2, r1, r4
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	f141 0100 	adc.w	r1, r1, #0
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f205 	lsl.w	r2, r0, r5
 80006d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006dc:	fa20 f304 	lsr.w	r3, r0, r4
 80006e0:	fa01 f205 	lsl.w	r2, r1, r5
 80006e4:	ea43 0302 	orr.w	r3, r3, r2
 80006e8:	fa21 f004 	lsr.w	r0, r1, r4
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	fa21 f204 	lsr.w	r2, r1, r4
 80006f4:	ea20 0002 	bic.w	r0, r0, r2
 80006f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f094 0f00 	teq	r4, #0
 800070c:	d10f      	bne.n	800072e <__aeabi_dmul+0x1c2>
 800070e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000712:	0040      	lsls	r0, r0, #1
 8000714:	eb41 0101 	adc.w	r1, r1, r1
 8000718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3c01      	subeq	r4, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1a6>
 8000722:	ea41 0106 	orr.w	r1, r1, r6
 8000726:	f095 0f00 	teq	r5, #0
 800072a:	bf18      	it	ne
 800072c:	4770      	bxne	lr
 800072e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	eb43 0303 	adc.w	r3, r3, r3
 8000738:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800073c:	bf08      	it	eq
 800073e:	3d01      	subeq	r5, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1c6>
 8000742:	ea43 0306 	orr.w	r3, r3, r6
 8000746:	4770      	bx	lr
 8000748:	ea94 0f0c 	teq	r4, ip
 800074c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000750:	bf18      	it	ne
 8000752:	ea95 0f0c 	teqne	r5, ip
 8000756:	d00c      	beq.n	8000772 <__aeabi_dmul+0x206>
 8000758:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075c:	bf18      	it	ne
 800075e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000762:	d1d1      	bne.n	8000708 <__aeabi_dmul+0x19c>
 8000764:	ea81 0103 	eor.w	r1, r1, r3
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000776:	bf06      	itte	eq
 8000778:	4610      	moveq	r0, r2
 800077a:	4619      	moveq	r1, r3
 800077c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000780:	d019      	beq.n	80007b6 <__aeabi_dmul+0x24a>
 8000782:	ea94 0f0c 	teq	r4, ip
 8000786:	d102      	bne.n	800078e <__aeabi_dmul+0x222>
 8000788:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800078c:	d113      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 800078e:	ea95 0f0c 	teq	r5, ip
 8000792:	d105      	bne.n	80007a0 <__aeabi_dmul+0x234>
 8000794:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000798:	bf1c      	itt	ne
 800079a:	4610      	movne	r0, r2
 800079c:	4619      	movne	r1, r3
 800079e:	d10a      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007be:	bd70      	pop	{r4, r5, r6, pc}

080007c0 <__aeabi_ddiv>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ce:	bf1d      	ittte	ne
 80007d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d4:	ea94 0f0c 	teqne	r4, ip
 80007d8:	ea95 0f0c 	teqne	r5, ip
 80007dc:	f000 f8a7 	bleq	800092e <__aeabi_ddiv+0x16e>
 80007e0:	eba4 0405 	sub.w	r4, r4, r5
 80007e4:	ea81 0e03 	eor.w	lr, r1, r3
 80007e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f0:	f000 8088 	beq.w	8000904 <__aeabi_ddiv+0x144>
 80007f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000800:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000804:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000808:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800080c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000810:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000814:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000818:	429d      	cmp	r5, r3
 800081a:	bf08      	it	eq
 800081c:	4296      	cmpeq	r6, r2
 800081e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000822:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000826:	d202      	bcs.n	800082e <__aeabi_ddiv+0x6e>
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	1ab6      	subs	r6, r6, r2
 8000830:	eb65 0503 	sbc.w	r5, r5, r3
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 000c 	orrcs.w	r0, r0, ip
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800089c:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a0:	d018      	beq.n	80008d4 <__aeabi_ddiv+0x114>
 80008a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008be:	d1c0      	bne.n	8000842 <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	d10b      	bne.n	80008de <__aeabi_ddiv+0x11e>
 80008c6:	ea41 0100 	orr.w	r1, r1, r0
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d2:	e7b6      	b.n	8000842 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	bf04      	itt	eq
 80008da:	4301      	orreq	r1, r0
 80008dc:	2000      	moveq	r0, #0
 80008de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e2:	bf88      	it	hi
 80008e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e8:	f63f aeaf 	bhi.w	800064a <__aeabi_dmul+0xde>
 80008ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f0:	bf04      	itt	eq
 80008f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fa:	f150 0000 	adcs.w	r0, r0, #0
 80008fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000908:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800090c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000910:	bfc2      	ittt	gt
 8000912:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091a:	bd70      	popgt	{r4, r5, r6, pc}
 800091c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000920:	f04f 0e00 	mov.w	lr, #0
 8000924:	3c01      	subs	r4, #1
 8000926:	e690      	b.n	800064a <__aeabi_dmul+0xde>
 8000928:	ea45 0e06 	orr.w	lr, r5, r6
 800092c:	e68d      	b.n	800064a <__aeabi_dmul+0xde>
 800092e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000932:	ea94 0f0c 	teq	r4, ip
 8000936:	bf08      	it	eq
 8000938:	ea95 0f0c 	teqeq	r5, ip
 800093c:	f43f af3b 	beq.w	80007b6 <__aeabi_dmul+0x24a>
 8000940:	ea94 0f0c 	teq	r4, ip
 8000944:	d10a      	bne.n	800095c <__aeabi_ddiv+0x19c>
 8000946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094a:	f47f af34 	bne.w	80007b6 <__aeabi_dmul+0x24a>
 800094e:	ea95 0f0c 	teq	r5, ip
 8000952:	f47f af25 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e72c      	b.n	80007b6 <__aeabi_dmul+0x24a>
 800095c:	ea95 0f0c 	teq	r5, ip
 8000960:	d106      	bne.n	8000970 <__aeabi_ddiv+0x1b0>
 8000962:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000966:	f43f aefd 	beq.w	8000764 <__aeabi_dmul+0x1f8>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e722      	b.n	80007b6 <__aeabi_dmul+0x24a>
 8000970:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000974:	bf18      	it	ne
 8000976:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097a:	f47f aec5 	bne.w	8000708 <__aeabi_dmul+0x19c>
 800097e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000982:	f47f af0d 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000986:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098a:	f47f aeeb 	bne.w	8000764 <__aeabi_dmul+0x1f8>
 800098e:	e712      	b.n	80007b6 <__aeabi_dmul+0x24a>

08000990 <__gedf2>:
 8000990:	f04f 3cff 	mov.w	ip, #4294967295
 8000994:	e006      	b.n	80009a4 <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__ledf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	e002      	b.n	80009a4 <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__cmpdf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ba:	d01b      	beq.n	80009f4 <__cmpdf2+0x54>
 80009bc:	b001      	add	sp, #4
 80009be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c2:	bf0c      	ite	eq
 80009c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c8:	ea91 0f03 	teqne	r1, r3
 80009cc:	bf02      	ittt	eq
 80009ce:	ea90 0f02 	teqeq	r0, r2
 80009d2:	2000      	moveq	r0, #0
 80009d4:	4770      	bxeq	lr
 80009d6:	f110 0f00 	cmn.w	r0, #0
 80009da:	ea91 0f03 	teq	r1, r3
 80009de:	bf58      	it	pl
 80009e0:	4299      	cmppl	r1, r3
 80009e2:	bf08      	it	eq
 80009e4:	4290      	cmpeq	r0, r2
 80009e6:	bf2c      	ite	cs
 80009e8:	17d8      	asrcs	r0, r3, #31
 80009ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ee:	f040 0001 	orr.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__cmpdf2+0x64>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d107      	bne.n	8000a14 <__cmpdf2+0x74>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d1d6      	bne.n	80009bc <__cmpdf2+0x1c>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d0d3      	beq.n	80009bc <__cmpdf2+0x1c>
 8000a14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdrcmple>:
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4662      	mov	r2, ip
 8000a22:	468c      	mov	ip, r1
 8000a24:	4619      	mov	r1, r3
 8000a26:	4663      	mov	r3, ip
 8000a28:	e000      	b.n	8000a2c <__aeabi_cdcmpeq>
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdcmpeq>:
 8000a2c:	b501      	push	{r0, lr}
 8000a2e:	f7ff ffb7 	bl	80009a0 <__cmpdf2>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	bf48      	it	mi
 8000a36:	f110 0f00 	cmnmi.w	r0, #0
 8000a3a:	bd01      	pop	{r0, pc}

08000a3c <__aeabi_dcmpeq>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff fff4 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a44:	bf0c      	ite	eq
 8000a46:	2001      	moveq	r0, #1
 8000a48:	2000      	movne	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmplt>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffea 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a58:	bf34      	ite	cc
 8000a5a:	2001      	movcc	r0, #1
 8000a5c:	2000      	movcs	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmple>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffe0 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpge>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffce 	bl	8000a1c <__aeabi_cdrcmple>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpgt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffc4 	bl	8000a1c <__aeabi_cdrcmple>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpun>:
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x10>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d10a      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__aeabi_dcmpun+0x20>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0001 	mov.w	r0, #1
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_frsub>:
 8000bfc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c00:	e002      	b.n	8000c08 <__addsf3>
 8000c02:	bf00      	nop

08000c04 <__aeabi_fsub>:
 8000c04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c08 <__addsf3>:
 8000c08:	0042      	lsls	r2, r0, #1
 8000c0a:	bf1f      	itttt	ne
 8000c0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c10:	ea92 0f03 	teqne	r2, r3
 8000c14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1c:	d06a      	beq.n	8000cf4 <__addsf3+0xec>
 8000c1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c26:	bfc1      	itttt	gt
 8000c28:	18d2      	addgt	r2, r2, r3
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	4048      	eorgt	r0, r1
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	bfb8      	it	lt
 8000c32:	425b      	neglt	r3, r3
 8000c34:	2b19      	cmp	r3, #25
 8000c36:	bf88      	it	hi
 8000c38:	4770      	bxhi	lr
 8000c3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c46:	bf18      	it	ne
 8000c48:	4240      	negne	r0, r0
 8000c4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c56:	bf18      	it	ne
 8000c58:	4249      	negne	r1, r1
 8000c5a:	ea92 0f03 	teq	r2, r3
 8000c5e:	d03f      	beq.n	8000ce0 <__addsf3+0xd8>
 8000c60:	f1a2 0201 	sub.w	r2, r2, #1
 8000c64:	fa41 fc03 	asr.w	ip, r1, r3
 8000c68:	eb10 000c 	adds.w	r0, r0, ip
 8000c6c:	f1c3 0320 	rsb	r3, r3, #32
 8000c70:	fa01 f103 	lsl.w	r1, r1, r3
 8000c74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c78:	d502      	bpl.n	8000c80 <__addsf3+0x78>
 8000c7a:	4249      	negs	r1, r1
 8000c7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c84:	d313      	bcc.n	8000cae <__addsf3+0xa6>
 8000c86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8a:	d306      	bcc.n	8000c9a <__addsf3+0x92>
 8000c8c:	0840      	lsrs	r0, r0, #1
 8000c8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c92:	f102 0201 	add.w	r2, r2, #1
 8000c96:	2afe      	cmp	r2, #254	; 0xfe
 8000c98:	d251      	bcs.n	8000d3e <__addsf3+0x136>
 8000c9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca2:	bf08      	it	eq
 8000ca4:	f020 0001 	biceq.w	r0, r0, #1
 8000ca8:	ea40 0003 	orr.w	r0, r0, r3
 8000cac:	4770      	bx	lr
 8000cae:	0049      	lsls	r1, r1, #1
 8000cb0:	eb40 0000 	adc.w	r0, r0, r0
 8000cb4:	3a01      	subs	r2, #1
 8000cb6:	bf28      	it	cs
 8000cb8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cbc:	d2ed      	bcs.n	8000c9a <__addsf3+0x92>
 8000cbe:	fab0 fc80 	clz	ip, r0
 8000cc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000cca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cce:	bfaa      	itet	ge
 8000cd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd4:	4252      	neglt	r2, r2
 8000cd6:	4318      	orrge	r0, r3
 8000cd8:	bfbc      	itt	lt
 8000cda:	40d0      	lsrlt	r0, r2
 8000cdc:	4318      	orrlt	r0, r3
 8000cde:	4770      	bx	lr
 8000ce0:	f092 0f00 	teq	r2, #0
 8000ce4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce8:	bf06      	itte	eq
 8000cea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cee:	3201      	addeq	r2, #1
 8000cf0:	3b01      	subne	r3, #1
 8000cf2:	e7b5      	b.n	8000c60 <__addsf3+0x58>
 8000cf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cfc:	bf18      	it	ne
 8000cfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d02:	d021      	beq.n	8000d48 <__addsf3+0x140>
 8000d04:	ea92 0f03 	teq	r2, r3
 8000d08:	d004      	beq.n	8000d14 <__addsf3+0x10c>
 8000d0a:	f092 0f00 	teq	r2, #0
 8000d0e:	bf08      	it	eq
 8000d10:	4608      	moveq	r0, r1
 8000d12:	4770      	bx	lr
 8000d14:	ea90 0f01 	teq	r0, r1
 8000d18:	bf1c      	itt	ne
 8000d1a:	2000      	movne	r0, #0
 8000d1c:	4770      	bxne	lr
 8000d1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d22:	d104      	bne.n	8000d2e <__addsf3+0x126>
 8000d24:	0040      	lsls	r0, r0, #1
 8000d26:	bf28      	it	cs
 8000d28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d2c:	4770      	bx	lr
 8000d2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d32:	bf3c      	itt	cc
 8000d34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d38:	4770      	bxcc	lr
 8000d3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d46:	4770      	bx	lr
 8000d48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d4c:	bf16      	itet	ne
 8000d4e:	4608      	movne	r0, r1
 8000d50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d54:	4601      	movne	r1, r0
 8000d56:	0242      	lsls	r2, r0, #9
 8000d58:	bf06      	itte	eq
 8000d5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5e:	ea90 0f01 	teqeq	r0, r1
 8000d62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_ui2f>:
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e004      	b.n	8000d78 <__aeabi_i2f+0x8>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_i2f>:
 8000d70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d74:	bf48      	it	mi
 8000d76:	4240      	negmi	r0, r0
 8000d78:	ea5f 0c00 	movs.w	ip, r0
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d84:	4601      	mov	r1, r0
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	e01c      	b.n	8000dc6 <__aeabi_l2f+0x2a>

08000d8c <__aeabi_ul2f>:
 8000d8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d90:	bf08      	it	eq
 8000d92:	4770      	bxeq	lr
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e00a      	b.n	8000db0 <__aeabi_l2f+0x14>
 8000d9a:	bf00      	nop

08000d9c <__aeabi_l2f>:
 8000d9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000da0:	bf08      	it	eq
 8000da2:	4770      	bxeq	lr
 8000da4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da8:	d502      	bpl.n	8000db0 <__aeabi_l2f+0x14>
 8000daa:	4240      	negs	r0, r0
 8000dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db0:	ea5f 0c01 	movs.w	ip, r1
 8000db4:	bf02      	ittt	eq
 8000db6:	4684      	moveq	ip, r0
 8000db8:	4601      	moveq	r1, r0
 8000dba:	2000      	moveq	r0, #0
 8000dbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc0:	bf08      	it	eq
 8000dc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dca:	fabc f28c 	clz	r2, ip
 8000dce:	3a08      	subs	r2, #8
 8000dd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd4:	db10      	blt.n	8000df8 <__aeabi_l2f+0x5c>
 8000dd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dda:	4463      	add	r3, ip
 8000ddc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de0:	f1c2 0220 	rsb	r2, r2, #32
 8000de4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dec:	eb43 0002 	adc.w	r0, r3, r2
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f102 0220 	add.w	r2, r2, #32
 8000dfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e00:	f1c2 0220 	rsb	r2, r2, #32
 8000e04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e08:	fa21 f202 	lsr.w	r2, r1, r2
 8000e0c:	eb43 0002 	adc.w	r0, r3, r2
 8000e10:	bf08      	it	eq
 8000e12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_fmul>:
 8000e18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e20:	bf1e      	ittt	ne
 8000e22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e26:	ea92 0f0c 	teqne	r2, ip
 8000e2a:	ea93 0f0c 	teqne	r3, ip
 8000e2e:	d06f      	beq.n	8000f10 <__aeabi_fmul+0xf8>
 8000e30:	441a      	add	r2, r3
 8000e32:	ea80 0c01 	eor.w	ip, r0, r1
 8000e36:	0240      	lsls	r0, r0, #9
 8000e38:	bf18      	it	ne
 8000e3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3e:	d01e      	beq.n	8000e7e <__aeabi_fmul+0x66>
 8000e40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000e50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e58:	bf3e      	ittt	cc
 8000e5a:	0049      	lslcc	r1, r1, #1
 8000e5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e60:	005b      	lslcc	r3, r3, #1
 8000e62:	ea40 0001 	orr.w	r0, r0, r1
 8000e66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6a:	2afd      	cmp	r2, #253	; 0xfd
 8000e6c:	d81d      	bhi.n	8000eaa <__aeabi_fmul+0x92>
 8000e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e76:	bf08      	it	eq
 8000e78:	f020 0001 	biceq.w	r0, r0, #1
 8000e7c:	4770      	bx	lr
 8000e7e:	f090 0f00 	teq	r0, #0
 8000e82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e86:	bf08      	it	eq
 8000e88:	0249      	lsleq	r1, r1, #9
 8000e8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e92:	3a7f      	subs	r2, #127	; 0x7f
 8000e94:	bfc2      	ittt	gt
 8000e96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9e:	4770      	bxgt	lr
 8000ea0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea4:	f04f 0300 	mov.w	r3, #0
 8000ea8:	3a01      	subs	r2, #1
 8000eaa:	dc5d      	bgt.n	8000f68 <__aeabi_fmul+0x150>
 8000eac:	f112 0f19 	cmn.w	r2, #25
 8000eb0:	bfdc      	itt	le
 8000eb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eb6:	4770      	bxle	lr
 8000eb8:	f1c2 0200 	rsb	r2, r2, #0
 8000ebc:	0041      	lsls	r1, r0, #1
 8000ebe:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec2:	f1c2 0220 	rsb	r2, r2, #32
 8000ec6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ece:	f140 0000 	adc.w	r0, r0, #0
 8000ed2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed6:	bf08      	it	eq
 8000ed8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000edc:	4770      	bx	lr
 8000ede:	f092 0f00 	teq	r2, #0
 8000ee2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0040      	lsleq	r0, r0, #1
 8000eea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eee:	3a01      	subeq	r2, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fmul+0xce>
 8000ef2:	ea40 000c 	orr.w	r0, r0, ip
 8000ef6:	f093 0f00 	teq	r3, #0
 8000efa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0049      	lsleq	r1, r1, #1
 8000f02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f06:	3b01      	subeq	r3, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fmul+0xe6>
 8000f0a:	ea41 010c 	orr.w	r1, r1, ip
 8000f0e:	e78f      	b.n	8000e30 <__aeabi_fmul+0x18>
 8000f10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	bf18      	it	ne
 8000f1a:	ea93 0f0c 	teqne	r3, ip
 8000f1e:	d00a      	beq.n	8000f36 <__aeabi_fmul+0x11e>
 8000f20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f24:	bf18      	it	ne
 8000f26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2a:	d1d8      	bne.n	8000ede <__aeabi_fmul+0xc6>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f34:	4770      	bx	lr
 8000f36:	f090 0f00 	teq	r0, #0
 8000f3a:	bf17      	itett	ne
 8000f3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f40:	4608      	moveq	r0, r1
 8000f42:	f091 0f00 	teqne	r1, #0
 8000f46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4a:	d014      	beq.n	8000f76 <__aeabi_fmul+0x15e>
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d101      	bne.n	8000f56 <__aeabi_fmul+0x13e>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	d10f      	bne.n	8000f76 <__aeabi_fmul+0x15e>
 8000f56:	ea93 0f0c 	teq	r3, ip
 8000f5a:	d103      	bne.n	8000f64 <__aeabi_fmul+0x14c>
 8000f5c:	024b      	lsls	r3, r1, #9
 8000f5e:	bf18      	it	ne
 8000f60:	4608      	movne	r0, r1
 8000f62:	d108      	bne.n	8000f76 <__aeabi_fmul+0x15e>
 8000f64:	ea80 0001 	eor.w	r0, r0, r1
 8000f68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f74:	4770      	bx	lr
 8000f76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f7e:	4770      	bx	lr

08000f80 <__aeabi_fdiv>:
 8000f80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f88:	bf1e      	ittt	ne
 8000f8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8e:	ea92 0f0c 	teqne	r2, ip
 8000f92:	ea93 0f0c 	teqne	r3, ip
 8000f96:	d069      	beq.n	800106c <__aeabi_fdiv+0xec>
 8000f98:	eba2 0203 	sub.w	r2, r2, r3
 8000f9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa0:	0249      	lsls	r1, r1, #9
 8000fa2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa6:	d037      	beq.n	8001018 <__aeabi_fdiv+0x98>
 8000fa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	bf38      	it	cc
 8000fbc:	005b      	lslcc	r3, r3, #1
 8000fbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	bf24      	itt	cs
 8000fca:	1a5b      	subcs	r3, r3, r1
 8000fcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd4:	bf24      	itt	cs
 8000fd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe2:	bf24      	itt	cs
 8000fe4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff0:	bf24      	itt	cs
 8000ff2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	bf18      	it	ne
 8000ffe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001002:	d1e0      	bne.n	8000fc6 <__aeabi_fdiv+0x46>
 8001004:	2afd      	cmp	r2, #253	; 0xfd
 8001006:	f63f af50 	bhi.w	8000eaa <__aeabi_fmul+0x92>
 800100a:	428b      	cmp	r3, r1
 800100c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001010:	bf08      	it	eq
 8001012:	f020 0001 	biceq.w	r0, r0, #1
 8001016:	4770      	bx	lr
 8001018:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800101c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001020:	327f      	adds	r2, #127	; 0x7f
 8001022:	bfc2      	ittt	gt
 8001024:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001028:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800102c:	4770      	bxgt	lr
 800102e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	3a01      	subs	r2, #1
 8001038:	e737      	b.n	8000eaa <__aeabi_fmul+0x92>
 800103a:	f092 0f00 	teq	r2, #0
 800103e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001042:	bf02      	ittt	eq
 8001044:	0040      	lsleq	r0, r0, #1
 8001046:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104a:	3a01      	subeq	r2, #1
 800104c:	d0f9      	beq.n	8001042 <__aeabi_fdiv+0xc2>
 800104e:	ea40 000c 	orr.w	r0, r0, ip
 8001052:	f093 0f00 	teq	r3, #0
 8001056:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105a:	bf02      	ittt	eq
 800105c:	0049      	lsleq	r1, r1, #1
 800105e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001062:	3b01      	subeq	r3, #1
 8001064:	d0f9      	beq.n	800105a <__aeabi_fdiv+0xda>
 8001066:	ea41 010c 	orr.w	r1, r1, ip
 800106a:	e795      	b.n	8000f98 <__aeabi_fdiv+0x18>
 800106c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001070:	ea92 0f0c 	teq	r2, ip
 8001074:	d108      	bne.n	8001088 <__aeabi_fdiv+0x108>
 8001076:	0242      	lsls	r2, r0, #9
 8001078:	f47f af7d 	bne.w	8000f76 <__aeabi_fmul+0x15e>
 800107c:	ea93 0f0c 	teq	r3, ip
 8001080:	f47f af70 	bne.w	8000f64 <__aeabi_fmul+0x14c>
 8001084:	4608      	mov	r0, r1
 8001086:	e776      	b.n	8000f76 <__aeabi_fmul+0x15e>
 8001088:	ea93 0f0c 	teq	r3, ip
 800108c:	d104      	bne.n	8001098 <__aeabi_fdiv+0x118>
 800108e:	024b      	lsls	r3, r1, #9
 8001090:	f43f af4c 	beq.w	8000f2c <__aeabi_fmul+0x114>
 8001094:	4608      	mov	r0, r1
 8001096:	e76e      	b.n	8000f76 <__aeabi_fmul+0x15e>
 8001098:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800109c:	bf18      	it	ne
 800109e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a2:	d1ca      	bne.n	800103a <__aeabi_fdiv+0xba>
 80010a4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010a8:	f47f af5c 	bne.w	8000f64 <__aeabi_fmul+0x14c>
 80010ac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b0:	f47f af3c 	bne.w	8000f2c <__aeabi_fmul+0x114>
 80010b4:	e75f      	b.n	8000f76 <__aeabi_fmul+0x15e>
 80010b6:	bf00      	nop

080010b8 <__aeabi_f2uiz>:
 80010b8:	0042      	lsls	r2, r0, #1
 80010ba:	d20e      	bcs.n	80010da <__aeabi_f2uiz+0x22>
 80010bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c0:	d30b      	bcc.n	80010da <__aeabi_f2uiz+0x22>
 80010c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ca:	d409      	bmi.n	80010e0 <__aeabi_f2uiz+0x28>
 80010cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d4:	fa23 f002 	lsr.w	r0, r3, r2
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr
 80010e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e4:	d101      	bne.n	80010ea <__aeabi_f2uiz+0x32>
 80010e6:	0242      	lsls	r2, r0, #9
 80010e8:	d102      	bne.n	80010f0 <__aeabi_f2uiz+0x38>
 80010ea:	f04f 30ff 	mov.w	r0, #4294967295
 80010ee:	4770      	bx	lr
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <__aeabi_uldivmod>:
 80010f8:	b953      	cbnz	r3, 8001110 <__aeabi_uldivmod+0x18>
 80010fa:	b94a      	cbnz	r2, 8001110 <__aeabi_uldivmod+0x18>
 80010fc:	2900      	cmp	r1, #0
 80010fe:	bf08      	it	eq
 8001100:	2800      	cmpeq	r0, #0
 8001102:	bf1c      	itt	ne
 8001104:	f04f 31ff 	movne.w	r1, #4294967295
 8001108:	f04f 30ff 	movne.w	r0, #4294967295
 800110c:	f000 b9a6 	b.w	800145c <__aeabi_idiv0>
 8001110:	f1ad 0c08 	sub.w	ip, sp, #8
 8001114:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001118:	f000 f83e 	bl	8001198 <__udivmoddi4>
 800111c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001120:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001124:	b004      	add	sp, #16
 8001126:	4770      	bx	lr

08001128 <__aeabi_d2lz>:
 8001128:	b538      	push	{r3, r4, r5, lr}
 800112a:	460c      	mov	r4, r1
 800112c:	4605      	mov	r5, r0
 800112e:	4621      	mov	r1, r4
 8001130:	4628      	mov	r0, r5
 8001132:	2200      	movs	r2, #0
 8001134:	2300      	movs	r3, #0
 8001136:	f7ff fc8b 	bl	8000a50 <__aeabi_dcmplt>
 800113a:	b928      	cbnz	r0, 8001148 <__aeabi_d2lz+0x20>
 800113c:	4628      	mov	r0, r5
 800113e:	4621      	mov	r1, r4
 8001140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001144:	f000 b80a 	b.w	800115c <__aeabi_d2ulz>
 8001148:	4628      	mov	r0, r5
 800114a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800114e:	f000 f805 	bl	800115c <__aeabi_d2ulz>
 8001152:	4240      	negs	r0, r0
 8001154:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001158:	bd38      	pop	{r3, r4, r5, pc}
 800115a:	bf00      	nop

0800115c <__aeabi_d2ulz>:
 800115c:	b5d0      	push	{r4, r6, r7, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <__aeabi_d2ulz+0x34>)
 8001162:	4606      	mov	r6, r0
 8001164:	460f      	mov	r7, r1
 8001166:	f7ff fa01 	bl	800056c <__aeabi_dmul>
 800116a:	f7ff fcd7 	bl	8000b1c <__aeabi_d2uiz>
 800116e:	4604      	mov	r4, r0
 8001170:	f7ff f982 	bl	8000478 <__aeabi_ui2d>
 8001174:	2200      	movs	r2, #0
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <__aeabi_d2ulz+0x38>)
 8001178:	f7ff f9f8 	bl	800056c <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4630      	mov	r0, r6
 8001182:	4639      	mov	r1, r7
 8001184:	f7ff f83a 	bl	80001fc <__aeabi_dsub>
 8001188:	f7ff fcc8 	bl	8000b1c <__aeabi_d2uiz>
 800118c:	4621      	mov	r1, r4
 800118e:	bdd0      	pop	{r4, r6, r7, pc}
 8001190:	3df00000 	.word	0x3df00000
 8001194:	41f00000 	.word	0x41f00000

08001198 <__udivmoddi4>:
 8001198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800119c:	9e08      	ldr	r6, [sp, #32]
 800119e:	460d      	mov	r5, r1
 80011a0:	4604      	mov	r4, r0
 80011a2:	468e      	mov	lr, r1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f040 8083 	bne.w	80012b0 <__udivmoddi4+0x118>
 80011aa:	428a      	cmp	r2, r1
 80011ac:	4617      	mov	r7, r2
 80011ae:	d947      	bls.n	8001240 <__udivmoddi4+0xa8>
 80011b0:	fab2 f382 	clz	r3, r2
 80011b4:	b14b      	cbz	r3, 80011ca <__udivmoddi4+0x32>
 80011b6:	f1c3 0120 	rsb	r1, r3, #32
 80011ba:	fa05 fe03 	lsl.w	lr, r5, r3
 80011be:	fa20 f101 	lsr.w	r1, r0, r1
 80011c2:	409f      	lsls	r7, r3
 80011c4:	ea41 0e0e 	orr.w	lr, r1, lr
 80011c8:	409c      	lsls	r4, r3
 80011ca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011ce:	fbbe fcf8 	udiv	ip, lr, r8
 80011d2:	fa1f f987 	uxth.w	r9, r7
 80011d6:	fb08 e21c 	mls	r2, r8, ip, lr
 80011da:	fb0c f009 	mul.w	r0, ip, r9
 80011de:	0c21      	lsrs	r1, r4, #16
 80011e0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80011e4:	4290      	cmp	r0, r2
 80011e6:	d90a      	bls.n	80011fe <__udivmoddi4+0x66>
 80011e8:	18ba      	adds	r2, r7, r2
 80011ea:	f10c 31ff 	add.w	r1, ip, #4294967295
 80011ee:	f080 8118 	bcs.w	8001422 <__udivmoddi4+0x28a>
 80011f2:	4290      	cmp	r0, r2
 80011f4:	f240 8115 	bls.w	8001422 <__udivmoddi4+0x28a>
 80011f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80011fc:	443a      	add	r2, r7
 80011fe:	1a12      	subs	r2, r2, r0
 8001200:	fbb2 f0f8 	udiv	r0, r2, r8
 8001204:	fb08 2210 	mls	r2, r8, r0, r2
 8001208:	fb00 f109 	mul.w	r1, r0, r9
 800120c:	b2a4      	uxth	r4, r4
 800120e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001212:	42a1      	cmp	r1, r4
 8001214:	d909      	bls.n	800122a <__udivmoddi4+0x92>
 8001216:	193c      	adds	r4, r7, r4
 8001218:	f100 32ff 	add.w	r2, r0, #4294967295
 800121c:	f080 8103 	bcs.w	8001426 <__udivmoddi4+0x28e>
 8001220:	42a1      	cmp	r1, r4
 8001222:	f240 8100 	bls.w	8001426 <__udivmoddi4+0x28e>
 8001226:	3802      	subs	r0, #2
 8001228:	443c      	add	r4, r7
 800122a:	1a64      	subs	r4, r4, r1
 800122c:	2100      	movs	r1, #0
 800122e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001232:	b11e      	cbz	r6, 800123c <__udivmoddi4+0xa4>
 8001234:	2200      	movs	r2, #0
 8001236:	40dc      	lsrs	r4, r3
 8001238:	e9c6 4200 	strd	r4, r2, [r6]
 800123c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001240:	b902      	cbnz	r2, 8001244 <__udivmoddi4+0xac>
 8001242:	deff      	udf	#255	; 0xff
 8001244:	fab2 f382 	clz	r3, r2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d14f      	bne.n	80012ec <__udivmoddi4+0x154>
 800124c:	1a8d      	subs	r5, r1, r2
 800124e:	2101      	movs	r1, #1
 8001250:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001254:	fa1f f882 	uxth.w	r8, r2
 8001258:	fbb5 fcfe 	udiv	ip, r5, lr
 800125c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001260:	fb08 f00c 	mul.w	r0, r8, ip
 8001264:	0c22      	lsrs	r2, r4, #16
 8001266:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800126a:	42a8      	cmp	r0, r5
 800126c:	d907      	bls.n	800127e <__udivmoddi4+0xe6>
 800126e:	197d      	adds	r5, r7, r5
 8001270:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001274:	d202      	bcs.n	800127c <__udivmoddi4+0xe4>
 8001276:	42a8      	cmp	r0, r5
 8001278:	f200 80e9 	bhi.w	800144e <__udivmoddi4+0x2b6>
 800127c:	4694      	mov	ip, r2
 800127e:	1a2d      	subs	r5, r5, r0
 8001280:	fbb5 f0fe 	udiv	r0, r5, lr
 8001284:	fb0e 5510 	mls	r5, lr, r0, r5
 8001288:	fb08 f800 	mul.w	r8, r8, r0
 800128c:	b2a4      	uxth	r4, r4
 800128e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001292:	45a0      	cmp	r8, r4
 8001294:	d907      	bls.n	80012a6 <__udivmoddi4+0x10e>
 8001296:	193c      	adds	r4, r7, r4
 8001298:	f100 32ff 	add.w	r2, r0, #4294967295
 800129c:	d202      	bcs.n	80012a4 <__udivmoddi4+0x10c>
 800129e:	45a0      	cmp	r8, r4
 80012a0:	f200 80d9 	bhi.w	8001456 <__udivmoddi4+0x2be>
 80012a4:	4610      	mov	r0, r2
 80012a6:	eba4 0408 	sub.w	r4, r4, r8
 80012aa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012ae:	e7c0      	b.n	8001232 <__udivmoddi4+0x9a>
 80012b0:	428b      	cmp	r3, r1
 80012b2:	d908      	bls.n	80012c6 <__udivmoddi4+0x12e>
 80012b4:	2e00      	cmp	r6, #0
 80012b6:	f000 80b1 	beq.w	800141c <__udivmoddi4+0x284>
 80012ba:	2100      	movs	r1, #0
 80012bc:	e9c6 0500 	strd	r0, r5, [r6]
 80012c0:	4608      	mov	r0, r1
 80012c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012c6:	fab3 f183 	clz	r1, r3
 80012ca:	2900      	cmp	r1, #0
 80012cc:	d14b      	bne.n	8001366 <__udivmoddi4+0x1ce>
 80012ce:	42ab      	cmp	r3, r5
 80012d0:	d302      	bcc.n	80012d8 <__udivmoddi4+0x140>
 80012d2:	4282      	cmp	r2, r0
 80012d4:	f200 80b9 	bhi.w	800144a <__udivmoddi4+0x2b2>
 80012d8:	1a84      	subs	r4, r0, r2
 80012da:	eb65 0303 	sbc.w	r3, r5, r3
 80012de:	2001      	movs	r0, #1
 80012e0:	469e      	mov	lr, r3
 80012e2:	2e00      	cmp	r6, #0
 80012e4:	d0aa      	beq.n	800123c <__udivmoddi4+0xa4>
 80012e6:	e9c6 4e00 	strd	r4, lr, [r6]
 80012ea:	e7a7      	b.n	800123c <__udivmoddi4+0xa4>
 80012ec:	409f      	lsls	r7, r3
 80012ee:	f1c3 0220 	rsb	r2, r3, #32
 80012f2:	40d1      	lsrs	r1, r2
 80012f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80012fc:	fa1f f887 	uxth.w	r8, r7
 8001300:	fb0e 1110 	mls	r1, lr, r0, r1
 8001304:	fa24 f202 	lsr.w	r2, r4, r2
 8001308:	409d      	lsls	r5, r3
 800130a:	fb00 fc08 	mul.w	ip, r0, r8
 800130e:	432a      	orrs	r2, r5
 8001310:	0c15      	lsrs	r5, r2, #16
 8001312:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001316:	45ac      	cmp	ip, r5
 8001318:	fa04 f403 	lsl.w	r4, r4, r3
 800131c:	d909      	bls.n	8001332 <__udivmoddi4+0x19a>
 800131e:	197d      	adds	r5, r7, r5
 8001320:	f100 31ff 	add.w	r1, r0, #4294967295
 8001324:	f080 808f 	bcs.w	8001446 <__udivmoddi4+0x2ae>
 8001328:	45ac      	cmp	ip, r5
 800132a:	f240 808c 	bls.w	8001446 <__udivmoddi4+0x2ae>
 800132e:	3802      	subs	r0, #2
 8001330:	443d      	add	r5, r7
 8001332:	eba5 050c 	sub.w	r5, r5, ip
 8001336:	fbb5 f1fe 	udiv	r1, r5, lr
 800133a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800133e:	fb01 f908 	mul.w	r9, r1, r8
 8001342:	b295      	uxth	r5, r2
 8001344:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001348:	45a9      	cmp	r9, r5
 800134a:	d907      	bls.n	800135c <__udivmoddi4+0x1c4>
 800134c:	197d      	adds	r5, r7, r5
 800134e:	f101 32ff 	add.w	r2, r1, #4294967295
 8001352:	d274      	bcs.n	800143e <__udivmoddi4+0x2a6>
 8001354:	45a9      	cmp	r9, r5
 8001356:	d972      	bls.n	800143e <__udivmoddi4+0x2a6>
 8001358:	3902      	subs	r1, #2
 800135a:	443d      	add	r5, r7
 800135c:	eba5 0509 	sub.w	r5, r5, r9
 8001360:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001364:	e778      	b.n	8001258 <__udivmoddi4+0xc0>
 8001366:	f1c1 0720 	rsb	r7, r1, #32
 800136a:	408b      	lsls	r3, r1
 800136c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001370:	ea4c 0c03 	orr.w	ip, ip, r3
 8001374:	fa25 f407 	lsr.w	r4, r5, r7
 8001378:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800137c:	fbb4 f9fe 	udiv	r9, r4, lr
 8001380:	fa1f f88c 	uxth.w	r8, ip
 8001384:	fb0e 4419 	mls	r4, lr, r9, r4
 8001388:	fa20 f307 	lsr.w	r3, r0, r7
 800138c:	fb09 fa08 	mul.w	sl, r9, r8
 8001390:	408d      	lsls	r5, r1
 8001392:	431d      	orrs	r5, r3
 8001394:	0c2b      	lsrs	r3, r5, #16
 8001396:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800139a:	45a2      	cmp	sl, r4
 800139c:	fa02 f201 	lsl.w	r2, r2, r1
 80013a0:	fa00 f301 	lsl.w	r3, r0, r1
 80013a4:	d909      	bls.n	80013ba <__udivmoddi4+0x222>
 80013a6:	eb1c 0404 	adds.w	r4, ip, r4
 80013aa:	f109 30ff 	add.w	r0, r9, #4294967295
 80013ae:	d248      	bcs.n	8001442 <__udivmoddi4+0x2aa>
 80013b0:	45a2      	cmp	sl, r4
 80013b2:	d946      	bls.n	8001442 <__udivmoddi4+0x2aa>
 80013b4:	f1a9 0902 	sub.w	r9, r9, #2
 80013b8:	4464      	add	r4, ip
 80013ba:	eba4 040a 	sub.w	r4, r4, sl
 80013be:	fbb4 f0fe 	udiv	r0, r4, lr
 80013c2:	fb0e 4410 	mls	r4, lr, r0, r4
 80013c6:	fb00 fa08 	mul.w	sl, r0, r8
 80013ca:	b2ad      	uxth	r5, r5
 80013cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013d0:	45a2      	cmp	sl, r4
 80013d2:	d908      	bls.n	80013e6 <__udivmoddi4+0x24e>
 80013d4:	eb1c 0404 	adds.w	r4, ip, r4
 80013d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80013dc:	d22d      	bcs.n	800143a <__udivmoddi4+0x2a2>
 80013de:	45a2      	cmp	sl, r4
 80013e0:	d92b      	bls.n	800143a <__udivmoddi4+0x2a2>
 80013e2:	3802      	subs	r0, #2
 80013e4:	4464      	add	r4, ip
 80013e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013ea:	fba0 8902 	umull	r8, r9, r0, r2
 80013ee:	eba4 040a 	sub.w	r4, r4, sl
 80013f2:	454c      	cmp	r4, r9
 80013f4:	46c6      	mov	lr, r8
 80013f6:	464d      	mov	r5, r9
 80013f8:	d319      	bcc.n	800142e <__udivmoddi4+0x296>
 80013fa:	d016      	beq.n	800142a <__udivmoddi4+0x292>
 80013fc:	b15e      	cbz	r6, 8001416 <__udivmoddi4+0x27e>
 80013fe:	ebb3 020e 	subs.w	r2, r3, lr
 8001402:	eb64 0405 	sbc.w	r4, r4, r5
 8001406:	fa04 f707 	lsl.w	r7, r4, r7
 800140a:	fa22 f301 	lsr.w	r3, r2, r1
 800140e:	431f      	orrs	r7, r3
 8001410:	40cc      	lsrs	r4, r1
 8001412:	e9c6 7400 	strd	r7, r4, [r6]
 8001416:	2100      	movs	r1, #0
 8001418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800141c:	4631      	mov	r1, r6
 800141e:	4630      	mov	r0, r6
 8001420:	e70c      	b.n	800123c <__udivmoddi4+0xa4>
 8001422:	468c      	mov	ip, r1
 8001424:	e6eb      	b.n	80011fe <__udivmoddi4+0x66>
 8001426:	4610      	mov	r0, r2
 8001428:	e6ff      	b.n	800122a <__udivmoddi4+0x92>
 800142a:	4543      	cmp	r3, r8
 800142c:	d2e6      	bcs.n	80013fc <__udivmoddi4+0x264>
 800142e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001432:	eb69 050c 	sbc.w	r5, r9, ip
 8001436:	3801      	subs	r0, #1
 8001438:	e7e0      	b.n	80013fc <__udivmoddi4+0x264>
 800143a:	4628      	mov	r0, r5
 800143c:	e7d3      	b.n	80013e6 <__udivmoddi4+0x24e>
 800143e:	4611      	mov	r1, r2
 8001440:	e78c      	b.n	800135c <__udivmoddi4+0x1c4>
 8001442:	4681      	mov	r9, r0
 8001444:	e7b9      	b.n	80013ba <__udivmoddi4+0x222>
 8001446:	4608      	mov	r0, r1
 8001448:	e773      	b.n	8001332 <__udivmoddi4+0x19a>
 800144a:	4608      	mov	r0, r1
 800144c:	e749      	b.n	80012e2 <__udivmoddi4+0x14a>
 800144e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001452:	443d      	add	r5, r7
 8001454:	e713      	b.n	800127e <__udivmoddi4+0xe6>
 8001456:	3802      	subs	r0, #2
 8001458:	443c      	add	r4, r7
 800145a:	e724      	b.n	80012a6 <__udivmoddi4+0x10e>

0800145c <__aeabi_idiv0>:
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <Mount_USB>:




void Mount_USB (void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8001464:	2201      	movs	r2, #1
 8001466:	4905      	ldr	r1, [pc, #20]	; (800147c <Mount_USB+0x1c>)
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <Mount_USB+0x20>)
 800146a:	f00c f893 	bl	800d594 <f_mount>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <Mount_USB+0x24>)
 8001474:	701a      	strb	r2, [r3, #0]
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000aa2c 	.word	0x2000aa2c
 8001480:	2000ac5c 	.word	0x2000ac5c
 8001484:	20004594 	.word	0x20004594

08001488 <Unmount_USB>:
void Unmount_USB (void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 800148c:	2201      	movs	r2, #1
 800148e:	4905      	ldr	r1, [pc, #20]	; (80014a4 <Unmount_USB+0x1c>)
 8001490:	2000      	movs	r0, #0
 8001492:	f00c f87f 	bl	800d594 <f_mount>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <Unmount_USB+0x20>)
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000aa2c 	.word	0x2000aa2c
 80014a8:	20004594 	.word	0x20004594

080014ac <Scan_USB>:
char *path[20*8] = {0};
/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	6018      	str	r0, [r3, #0]
    DIR dir;
    UINT i=0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c


    fresult = f_opendir(&dir, *path);                       /* Open the directory */
 80014be:	4b30      	ldr	r3, [pc, #192]	; (8001580 <Scan_USB+0xd4>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00c f8cb 	bl	800d664 <f_opendir>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <Scan_USB+0xd8>)
 80014d4:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <Scan_USB+0xd8>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d143      	bne.n	8001566 <Scan_USB+0xba>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	4929      	ldr	r1, [pc, #164]	; (8001588 <Scan_USB+0xdc>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00c f972 	bl	800d7ce <f_readdir>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <Scan_USB+0xd8>)
 80014f0:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <Scan_USB+0xd8>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d130      	bne.n	800155c <Scan_USB+0xb0>
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <Scan_USB+0xdc>)
 80014fc:	7a5b      	ldrb	r3, [r3, #9]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d02c      	beq.n	800155c <Scan_USB+0xb0>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8001502:	4b21      	ldr	r3, [pc, #132]	; (8001588 <Scan_USB+0xdc>)
 8001504:	7a1b      	ldrb	r3, [r3, #8]
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0e7      	beq.n	80014de <Scan_USB+0x32>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 800150e:	491f      	ldr	r1, [pc, #124]	; (800158c <Scan_USB+0xe0>)
 8001510:	481f      	ldr	r0, [pc, #124]	; (8001590 <Scan_USB+0xe4>)
 8001512:	f7fe fe5d 	bl	80001d0 <strcmp>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d01a      	beq.n	8001552 <Scan_USB+0xa6>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800151c:	491b      	ldr	r1, [pc, #108]	; (800158c <Scan_USB+0xe0>)
 800151e:	481d      	ldr	r0, [pc, #116]	; (8001594 <Scan_USB+0xe8>)
 8001520:	f7fe fe56 	bl	80001d0 <strcmp>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d015      	beq.n	8001556 <Scan_USB+0xaa>
                fresult = Scan_USB(*path);                     /* Enter the directory */
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <Scan_USB+0xd4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ffbc 	bl	80014ac <Scan_USB>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <Scan_USB+0xd8>)
 800153a:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <Scan_USB+0xd8>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10a      	bne.n	800155a <Scan_USB+0xae>
                path[i] = 0;
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <Scan_USB+0xd4>)
 8001546:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800154a:	2100      	movs	r1, #0
 800154c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001550:	e7c5      	b.n	80014de <Scan_USB+0x32>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001552:	bf00      	nop
 8001554:	e7c3      	b.n	80014de <Scan_USB+0x32>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8001556:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8001558:	e7c1      	b.n	80014de <Scan_USB+0x32>
                if (fresult != FR_OK) break;
 800155a:	bf00      	nop
            }
            else
            {
            }
        }
        f_closedir(&dir);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4618      	mov	r0, r3
 8001562:	f00c f907 	bl	800d774 <f_closedir>
    }
    free(*path);
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <Scan_USB+0xd4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f00f feb2 	bl	80112d4 <free>
    return fresult;
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <Scan_USB+0xd8>)
 8001572:	781b      	ldrb	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000244 	.word	0x20000244
 8001584:	20004594 	.word	0x20004594
 8001588:	20004598 	.word	0x20004598
 800158c:	200045a1 	.word	0x200045a1
 8001590:	080159f0 	.word	0x080159f0
 8001594:	080159fc 	.word	0x080159fc

08001598 <Check_USB_Details>:

    return fresult;
}

void Check_USB_Details (void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 800159c:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <Check_USB_Details+0x80>)
 800159e:	491f      	ldr	r1, [pc, #124]	; (800161c <Check_USB_Details+0x84>)
 80015a0:	481f      	ldr	r0, [pc, #124]	; (8001620 <Check_USB_Details+0x88>)
 80015a2:	f00c f962 	bl	800d86a <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <Check_USB_Details+0x80>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80015ae:	3b02      	subs	r3, #2
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <Check_USB_Details+0x80>)
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff5b 	bl	8000478 <__aeabi_ui2d>
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <Check_USB_Details+0x8c>)
 80015c8:	f7fe ffd0 	bl	800056c <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	f7ff faa2 	bl	8000b1c <__aeabi_d2uiz>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <Check_USB_Details+0x90>)
 80015dc:	6013      	str	r3, [r2, #0]

    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <Check_USB_Details+0x80>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <Check_USB_Details+0x84>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fb03 f302 	mul.w	r3, r3, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff41 	bl	8000478 <__aeabi_ui2d>
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <Check_USB_Details+0x8c>)
 80015fc:	f7fe ffb6 	bl	800056c <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff fa88 	bl	8000b1c <__aeabi_d2uiz>
 800160c:	4603      	mov	r3, r0
 800160e:	4a07      	ldr	r2, [pc, #28]	; (800162c <Check_USB_Details+0x94>)
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20004588 	.word	0x20004588
 800161c:	20004580 	.word	0x20004580
 8001620:	08015a18 	.word	0x08015a18
 8001624:	3fe00000 	.word	0x3fe00000
 8001628:	200045b0 	.word	0x200045b0
 800162c:	2000458c 	.word	0x2000458c

08001630 <setTimeDate>:
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &sDate,RTC_FORMAT_BIN);
}

void setTimeDate(uint8_t month, uint8_t day, uint8_t year, uint8_t hours, uint8_t min, uint8_t sec)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4604      	mov	r4, r0
 8001638:	4608      	mov	r0, r1
 800163a:	4611      	mov	r1, r2
 800163c:	461a      	mov	r2, r3
 800163e:	4623      	mov	r3, r4
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	4603      	mov	r3, r0
 8001644:	71bb      	strb	r3, [r7, #6]
 8001646:	460b      	mov	r3, r1
 8001648:	717b      	strb	r3, [r7, #5]
 800164a:	4613      	mov	r3, r2
 800164c:	713b      	strb	r3, [r7, #4]
	sTime.Hours = hours;
 800164e:	4a19      	ldr	r2, [pc, #100]	; (80016b4 <setTimeDate+0x84>)
 8001650:	793b      	ldrb	r3, [r7, #4]
 8001652:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 8001654:	4a17      	ldr	r2, [pc, #92]	; (80016b4 <setTimeDate+0x84>)
 8001656:	7e3b      	ldrb	r3, [r7, #24]
 8001658:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 800165a:	4a16      	ldr	r2, [pc, #88]	; (80016b4 <setTimeDate+0x84>)
 800165c:	7f3b      	ldrb	r3, [r7, #28]
 800165e:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <setTimeDate+0x84>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <setTimeDate+0x84>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
	if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 800166c:	2201      	movs	r2, #1
 800166e:	4911      	ldr	r1, [pc, #68]	; (80016b4 <setTimeDate+0x84>)
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <setTimeDate+0x88>)
 8001672:	f004 fe2f 	bl	80062d4 <HAL_RTC_SetTime>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <setTimeDate+0x50>
 800167c:	f000 fea6 	bl	80023cc <Error_Handler>

	sDate.WeekDay = 0x01;
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <setTimeDate+0x8c>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
	sDate.Month = month;
 8001686:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <setTimeDate+0x8c>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	7053      	strb	r3, [r2, #1]
	sDate.Date = day;
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <setTimeDate+0x8c>)
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	7093      	strb	r3, [r2, #2]
	sDate.Year = year;
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <setTimeDate+0x8c>)
 8001694:	797b      	ldrb	r3, [r7, #5]
 8001696:	70d3      	strb	r3, [r2, #3]
	if(HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 8001698:	2201      	movs	r2, #1
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <setTimeDate+0x8c>)
 800169c:	4806      	ldr	r0, [pc, #24]	; (80016b8 <setTimeDate+0x88>)
 800169e:	f004 fecf 	bl	8006440 <HAL_RTC_SetDate>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <setTimeDate+0x7c>
 80016a8:	f000 fe90 	bl	80023cc <Error_Handler>
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}
 80016b4:	2000079c 	.word	0x2000079c
 80016b8:	2000a790 	.word	0x2000a790
 80016bc:	200007a8 	.word	0x200007a8

080016c0 <getMedianNum>:
#include "TDS_driver.h"
#include "main.h"
#include "sensors.h"

int getMedianNum(int bArray[], int iFilterLen)
{
 80016c0:	b4b0      	push	{r4, r5, r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	466b      	mov	r3, sp
 80016cc:	461d      	mov	r5, r3
      int bTab[iFilterLen];
 80016ce:	683c      	ldr	r4, [r7, #0]
 80016d0:	1e63      	subs	r3, r4, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	4623      	mov	r3, r4
 80016d6:	4618      	mov	r0, r3
 80016d8:	f04f 0100 	mov.w	r1, #0
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	014b      	lsls	r3, r1, #5
 80016e6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016ea:	0142      	lsls	r2, r0, #5
 80016ec:	4623      	mov	r3, r4
 80016ee:	4618      	mov	r0, r3
 80016f0:	f04f 0100 	mov.w	r1, #0
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	014b      	lsls	r3, r1, #5
 80016fe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001702:	0142      	lsls	r2, r0, #5
 8001704:	4623      	mov	r3, r4
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	3307      	adds	r3, #7
 800170a:	08db      	lsrs	r3, r3, #3
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	ebad 0d03 	sub.w	sp, sp, r3
 8001712:	466b      	mov	r3, sp
 8001714:	3303      	adds	r3, #3
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	60bb      	str	r3, [r7, #8]
      for (int i = 0; i<iFilterLen; i++)
 800171c:	2300      	movs	r3, #0
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	e00b      	b.n	800173a <getMedianNum+0x7a>
      bTab[i] = bArray[i];
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	6819      	ldr	r1, [r3, #0]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (int i = 0; i<iFilterLen; i++)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	3301      	adds	r3, #1
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	dbef      	blt.n	8001722 <getMedianNum+0x62>
      int i, j, bTemp;
      for (j = 0; j < iFilterLen - 1; j++)
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	e02e      	b.n	80017a6 <getMedianNum+0xe6>
      {
      for (i = 0; i < iFilterLen - j - 1; i++)
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	e021      	b.n	8001792 <getMedianNum+0xd2>
          {
        if (bTab[i] > bTab[i + 1])
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	1c59      	adds	r1, r3, #1
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001760:	429a      	cmp	r2, r3
 8001762:	dd13      	ble.n	800178c <getMedianNum+0xcc>
            {
        bTemp = bTab[i];
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176c:	61fb      	str	r3, [r7, #28]
            bTab[i] = bTab[i + 1];
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        bTab[i + 1] = bTemp;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	69f9      	ldr	r1, [r7, #28]
 8001788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (i = 0; i < iFilterLen - j - 1; i++)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	3b01      	subs	r3, #1
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	429a      	cmp	r2, r3
 800179e:	dbd6      	blt.n	800174e <getMedianNum+0x8e>
      for (j = 0; j < iFilterLen - 1; j++)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	3301      	adds	r3, #1
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbcb      	blt.n	8001748 <getMedianNum+0x88>
         }
      }
      }
      if ((iFilterLen & 1) > 0)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dd0a      	ble.n	80017d0 <getMedianNum+0x110>
    bTemp = bTab[(iFilterLen - 1) / 2];
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	3b01      	subs	r3, #1
 80017be:	0fda      	lsrs	r2, r3, #31
 80017c0:	4413      	add	r3, r2
 80017c2:	105b      	asrs	r3, r3, #1
 80017c4:	461a      	mov	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	e014      	b.n	80017fa <getMedianNum+0x13a>
      else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	0fda      	lsrs	r2, r3, #31
 80017d4:	4413      	add	r3, r2
 80017d6:	105b      	asrs	r3, r3, #1
 80017d8:	461a      	mov	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	0fd9      	lsrs	r1, r3, #31
 80017e4:	440b      	add	r3, r1
 80017e6:	105b      	asrs	r3, r3, #1
 80017e8:	1e59      	subs	r1, r3, #1
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017f0:	4413      	add	r3, r2
 80017f2:	0fda      	lsrs	r2, r3, #31
 80017f4:	4413      	add	r3, r2
 80017f6:	105b      	asrs	r3, r3, #1
 80017f8:	61fb      	str	r3, [r7, #28]
      return bTemp;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	46ad      	mov	sp, r5
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	bcb0      	pop	{r4, r5, r7}
 8001806:	4770      	bx	lr

08001808 <fanOn>:

float system_fan_sp = 5.5;
float plant_fan_sp = 3.5;
float heat_cool_fan_sp = 3.5; // set default fan speed values
void fanOn()
{
 8001808:	b598      	push	{r3, r4, r7, lr}
 800180a:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// start heater cooler fan control
 800180c:	2100      	movs	r1, #0
 800180e:	482f      	ldr	r0, [pc, #188]	; (80018cc <fanOn+0xc4>)
 8001810:	f005 fa3c 	bl	8006c8c <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001814:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <fanOn+0xc8>)
 8001816:	f640 323f 	movw	r2, #2879	; 0xb3f
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;	// sets the fan speed
 800181c:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <fanOn+0xc8>)
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff faa1 	bl	8000d68 <__aeabi_ui2f>
 8001826:	4602      	mov	r2, r0
 8001828:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <fanOn+0xcc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	4610      	mov	r0, r2
 8001830:	f7ff fba6 	bl	8000f80 <__aeabi_fdiv>
 8001834:	4603      	mov	r3, r0
 8001836:	4c26      	ldr	r4, [pc, #152]	; (80018d0 <fanOn+0xc8>)
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fc3d 	bl	80010b8 <__aeabi_f2uiz>
 800183e:	4603      	mov	r3, r0
 8001840:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <fanOn+0xc8>)
 8001844:	f245 0214 	movw	r2, #20500	; 0x5014
 8001848:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// start system fan control
 800184a:	2108      	movs	r1, #8
 800184c:	481f      	ldr	r0, [pc, #124]	; (80018cc <fanOn+0xc4>)
 800184e:	f005 fa1d 	bl	8006c8c <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <fanOn+0xc8>)
 8001854:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001858:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR3 = (TIM1->ARR)/system_fan_sp;		// sets the fan speed
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <fanOn+0xc8>)
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fa82 	bl	8000d68 <__aeabi_ui2f>
 8001864:	4602      	mov	r2, r0
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <fanOn+0xd0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4619      	mov	r1, r3
 800186c:	4610      	mov	r0, r2
 800186e:	f7ff fb87 	bl	8000f80 <__aeabi_fdiv>
 8001872:	4603      	mov	r3, r0
 8001874:	4c16      	ldr	r4, [pc, #88]	; (80018d0 <fanOn+0xc8>)
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fc1e 	bl	80010b8 <__aeabi_f2uiz>
 800187c:	4603      	mov	r3, r0
 800187e:	63e3      	str	r3, [r4, #60]	; 0x3c
   TIM1->CNT = 20500;
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <fanOn+0xc8>)
 8001882:	f245 0214 	movw	r2, #20500	; 0x5014
 8001886:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);	// start plant fan control
 8001888:	2100      	movs	r1, #0
 800188a:	4814      	ldr	r0, [pc, #80]	; (80018dc <fanOn+0xd4>)
 800188c:	f005 f9fe 	bl	8006c8c <HAL_TIM_PWM_Start>
   TIM10->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <fanOn+0xd8>)
 8001892:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM10->CCR1 = (TIM10->ARR)/plant_fan_sp;		// sets the fan speed
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <fanOn+0xd8>)
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fa63 	bl	8000d68 <__aeabi_ui2f>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <fanOn+0xdc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f7ff fb68 	bl	8000f80 <__aeabi_fdiv>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4c0b      	ldr	r4, [pc, #44]	; (80018e0 <fanOn+0xd8>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fbff 	bl	80010b8 <__aeabi_f2uiz>
 80018ba:	4603      	mov	r3, r0
 80018bc:	6363      	str	r3, [r4, #52]	; 0x34
   TIM10->CNT = 20500;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <fanOn+0xd8>)
 80018c0:	f245 0214 	movw	r2, #20500	; 0x5014
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018c6:	bf00      	nop
 80018c8:	bd98      	pop	{r3, r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000a878 	.word	0x2000a878
 80018d0:	40010000 	.word	0x40010000
 80018d4:	20000008 	.word	0x20000008
 80018d8:	20000000 	.word	0x20000000
 80018dc:	200046fc 	.word	0x200046fc
 80018e0:	40014400 	.word	0x40014400
 80018e4:	20000004 	.word	0x20000004

080018e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a06      	ldr	r2, [pc, #24]	; (8001910 <vApplicationGetIdleTaskMemory+0x28>)
 80018f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	4a05      	ldr	r2, [pc, #20]	; (8001914 <vApplicationGetIdleTaskMemory+0x2c>)
 80018fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	200004c4 	.word	0x200004c4
 8001914:	20000578 	.word	0x20000578

08001918 <systemControl>:
	osDelay(5000);
	//else if(done_sampling == 'y' && new_sample == 'n') getFiveSamples(1);
	//done_sampling = 'y';
}
void systemControl()
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af02      	add	r7, sp, #8


	if(run_once == 1)// && write_times == 2)
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <systemControl+0x44>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d114      	bne.n	8001950 <systemControl+0x38>
	{
		//doseWater(30,30,50);
		run_once = 0;
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <systemControl+0x44>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
		fanOn();
 800192c:	f7ff ff6c 	bl	8001808 <fanOn>
		setTimeDate(0x01, 0x08, 0x22, 0x19, 0x09, 0x00); // MUST BE HEX BUT NOT CONVERTED i,e,(the 22 day of the month is represented as 0x22 NOT 0x16) (month, day, year, hours, min, sec)
 8001930:	2300      	movs	r3, #0
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2309      	movs	r3, #9
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2319      	movs	r3, #25
 800193a:	2222      	movs	r2, #34	; 0x22
 800193c:	2108      	movs	r1, #8
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff fe76 	bl	8001630 <setTimeDate>
		setLightCyle(19, 9, 19, 10); 			   		 // MUST BE INT (start hour, start min, start sec, end hour, end min)
 8001944:	230a      	movs	r3, #10
 8001946:	2213      	movs	r2, #19
 8001948:	2109      	movs	r1, #9
 800194a:	2013      	movs	r0, #19
 800194c:	f000 f808 	bl	8001960 <setLightCyle>
	//getFiveSamples(1);
	// osThreadSuspend(WaterTempControHandle);
	// osDelay(5000);


	getFiveSamples(1);
 8001950:	2001      	movs	r0, #1
 8001952:	f000 fe63 	bl	800261c <getFiveSamples>
	 //osDelay(5000);
	// Water Temp control



}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000000c 	.word	0x2000000c

08001960 <setLightCyle>:
	HAL_GPIO_WritePin(GPIOE,grow_light_Pin,GPIO_PIN_RESET);		// turn off grow light
	day_or_night = 0;											// it just turned to night time so set night status
}

void setLightCyle(uint8_t start_hour, uint8_t start_min, uint8_t end_hours, uint8_t end_min)
{
 8001960:	b490      	push	{r4, r7}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4604      	mov	r4, r0
 8001968:	4608      	mov	r0, r1
 800196a:	4611      	mov	r1, r2
 800196c:	461a      	mov	r2, r3
 800196e:	4623      	mov	r3, r4
 8001970:	71fb      	strb	r3, [r7, #7]
 8001972:	4603      	mov	r3, r0
 8001974:	71bb      	strb	r3, [r7, #6]
 8001976:	460b      	mov	r3, r1
 8001978:	717b      	strb	r3, [r7, #5]
 800197a:	4613      	mov	r3, r2
 800197c:	713b      	strb	r3, [r7, #4]
	light_on_time.Hours = start_hour;
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <setLightCyle+0x40>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	7013      	strb	r3, [r2, #0]
	light_on_time.Minutes = start_min;
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <setLightCyle+0x40>)
 8001986:	79bb      	ldrb	r3, [r7, #6]
 8001988:	7053      	strb	r3, [r2, #1]

	light_off_time.Hours = end_hours;
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <setLightCyle+0x44>)
 800198c:	797b      	ldrb	r3, [r7, #5]
 800198e:	7013      	strb	r3, [r2, #0]
	light_off_time.Minutes = end_min;
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <setLightCyle+0x44>)
 8001992:	793b      	ldrb	r3, [r7, #4]
 8001994:	7053      	strb	r3, [r2, #1]
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bc90      	pop	{r4, r7}
 800199e:	4770      	bx	lr
 80019a0:	20000784 	.word	0x20000784
 80019a4:	20000790 	.word	0x20000790

080019a8 <HAL_ADC_ConvCpltCallback>:
int adc_index = 0;
char new_TDS_sample = 'n';
char new_pH_sample = 'n';
char retrieved_ADC_value = 'n';
void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef *hadc)
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]


	if(adc_index == 0)
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <HAL_ADC_ConvCpltCallback+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10f      	bne.n	80019d8 <HAL_ADC_ConvCpltCallback+0x30>
	{
		nutrient_ph_values[adc_index]  = HAL_ADC_GetValue(&hadc2);
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_ADC_ConvCpltCallback+0x64>)
 80019ba:	681c      	ldr	r4, [r3, #0]
 80019bc:	4814      	ldr	r0, [pc, #80]	; (8001a10 <HAL_ADC_ConvCpltCallback+0x68>)
 80019be:	f001 fc70 	bl	80032a2 <HAL_ADC_GetValue>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <HAL_ADC_ConvCpltCallback+0x6c>)
 80019c6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

		adc_index = 1;
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_ADC_ConvCpltCallback+0x64>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
		new_TDS_sample = 'y';
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_ADC_ConvCpltCallback+0x70>)
 80019d2:	2279      	movs	r2, #121	; 0x79
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	e012      	b.n	80019fe <HAL_ADC_ConvCpltCallback+0x56>
	}
	else if(adc_index == 1)
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_ADC_ConvCpltCallback+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d10e      	bne.n	80019fe <HAL_ADC_ConvCpltCallback+0x56>
	{
		nutrient_ph_values[adc_index] = HAL_ADC_GetValue(&hadc2);
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_ADC_ConvCpltCallback+0x64>)
 80019e2:	681c      	ldr	r4, [r3, #0]
 80019e4:	480a      	ldr	r0, [pc, #40]	; (8001a10 <HAL_ADC_ConvCpltCallback+0x68>)
 80019e6:	f001 fc5c 	bl	80032a2 <HAL_ADC_GetValue>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <HAL_ADC_ConvCpltCallback+0x6c>)
 80019ee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		new_pH_sample = 'y';
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_ADC_ConvCpltCallback+0x74>)
 80019f4:	2279      	movs	r2, #121	; 0x79
 80019f6:	701a      	strb	r2, [r3, #0]
		adc_index = 0;
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <HAL_ADC_ConvCpltCallback+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
	}

	retrieved_ADC_value = 'y';
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x78>)
 8001a00:	2279      	movs	r2, #121	; 0x79
 8001a02:	701a      	strb	r2, [r3, #0]



}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}
 8001a0c:	200007b4 	.word	0x200007b4
 8001a10:	200046b4 	.word	0x200046b4
 8001a14:	200007ac 	.word	0x200007ac
 8001a18:	20000010 	.word	0x20000010
 8001a1c:	20000011 	.word	0x20000011
 8001a20:	20000012 	.word	0x20000012

08001a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a24:	b5b0      	push	{r4, r5, r7, lr}
 8001a26:	b08e      	sub	sp, #56	; 0x38
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2a:	f001 f999 	bl	8002d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2e:	f000 f84d 	bl	8001acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a32:	f000 fbcb 	bl	80021cc <MX_GPIO_Init>
  MX_ADC2_Init();
 8001a36:	f000 f8a9 	bl	8001b8c <MX_ADC2_Init>
  MX_TIM1_Init();
 8001a3a:	f000 f99f 	bl	8001d7c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a3e:	f000 fa49 	bl	8001ed4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001a42:	f000 faed 	bl	8002020 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001a46:	f000 fb39 	bl	80020bc <MX_TIM10_Init>
  MX_RTC_Init();
 8001a4a:	f000 f905 	bl	8001c58 <MX_RTC_Init>
  MX_TIM12_Init();
 8001a4e:	f000 fb83 	bl	8002158 <MX_TIM12_Init>
  MX_FATFS_Init();
 8001a52:	f007 f80f 	bl	8008a74 <MX_FATFS_Init>
  MX_TIM3_Init();
 8001a56:	f000 fa89 	bl	8001f6c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

HAL_TIM_Base_Start(&htim3);
 8001a5a:	4816      	ldr	r0, [pc, #88]	; (8001ab4 <main+0x90>)
 8001a5c:	f004 ffea 	bl	8006a34 <HAL_TIM_Base_Start>
HAL_ADC_Start_IT(&hadc2);
 8001a60:	4815      	ldr	r0, [pc, #84]	; (8001ab8 <main+0x94>)
 8001a62:	f001 fa23 	bl	8002eac <HAL_ADC_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BalanceWater */
  osThreadStaticDef(BalanceWater, StartBalanceWater, osPriorityRealtime, 0, 4096, BalanceWaterBuffer, &BalanceWaterControlBlock);
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <main+0x98>)
 8001a68:	f107 041c 	add.w	r4, r7, #28
 8001a6c:	461d      	mov	r5, r3
 8001a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BalanceWaterHandle = osThreadCreate(osThread(BalanceWater), NULL);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00c f9c6 	bl	800de12 <osThreadCreate>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <main+0x9c>)
 8001a8a:	6013      	str	r3, [r2, #0]

  /* definition and creation of WaterTempContro */
  osThreadStaticDef(WaterTempContro, StartWaterTempControl, osPriorityNormal, 0, 2048, WaterTempControBuffer, &WaterTempControControlBlock);
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <main+0xa0>)
 8001a8e:	463c      	mov	r4, r7
 8001a90:	461d      	mov	r5, r3
 8001a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WaterTempControHandle = osThreadCreate(osThread(WaterTempContro), NULL);
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f00c f9b5 	bl	800de12 <osThreadCreate>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <main+0xa4>)
 8001aac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001aae:	f00c f9a9 	bl	800de04 <osKernelStart>
  GPIO_InitStruct.Pull = GPIO_NOPULL;


  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);*/

  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <main+0x8e>
 8001ab4:	20006744 	.word	0x20006744
 8001ab8:	200046b4 	.word	0x200046b4
 8001abc:	08015a3c 	.word	0x08015a3c
 8001ac0:	200045b4 	.word	0x200045b4
 8001ac4:	08015a58 	.word	0x08015a58
 8001ac8:	2000a78c 	.word	0x2000a78c

08001acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b096      	sub	sp, #88	; 0x58
 8001ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad6:	2230      	movs	r2, #48	; 0x30
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f00f fc10 	bl	8011300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	463b      	mov	r3, r7
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001afe:	230a      	movs	r3, #10
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b02:	2301      	movs	r3, #1
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b06:	2310      	movs	r3, #16
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b12:	2300      	movs	r3, #0
 8001b14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b16:	2308      	movs	r3, #8
 8001b18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001b1a:	23d8      	movs	r3, #216	; 0xd8
 8001b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001b1e:	2306      	movs	r3, #6
 8001b20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001b22:	2309      	movs	r3, #9
 8001b24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fe04 	bl	8005738 <HAL_RCC_OscConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001b36:	f000 fc49 	bl	80023cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	2102      	movs	r1, #2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f004 f83d 	bl	8005bd8 <HAL_RCC_ClockConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b64:	f000 fc32 	bl	80023cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b68:	2304      	movs	r3, #4
 8001b6a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b70:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b72:	463b      	mov	r3, r7
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 fa2d 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001b80:	f000 fc24 	bl	80023cc <Error_Handler>
  }
}
 8001b84:	bf00      	nop
 8001b86:	3758      	adds	r7, #88	; 0x58
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b92:	463b      	mov	r3, r7
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC2_Init 1 */
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001b9e:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	761a      	strb	r2, [r3, #24]
  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001ba6:	4a2b      	ldr	r2, [pc, #172]	; (8001c54 <MX_ADC2_Init+0xc8>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001baa:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001bd2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001bda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001be8:	2202      	movs	r2, #2
 8001bea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bfa:	4815      	ldr	r0, [pc, #84]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001bfc:	f001 f912 	bl	8002e24 <HAL_ADC_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001c06:	f000 fbe1 	bl	80023cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c16:	463b      	mov	r3, r7
 8001c18:	4619      	mov	r1, r3
 8001c1a:	480d      	ldr	r0, [pc, #52]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001c1c:	f001 fb60 	bl	80032e0 <HAL_ADC_ConfigChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 8001c26:	f000 fbd1 	bl	80023cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c32:	463b      	mov	r3, r7
 8001c34:	4619      	mov	r1, r3
 8001c36:	4806      	ldr	r0, [pc, #24]	; (8001c50 <MX_ADC2_Init+0xc4>)
 8001c38:	f001 fb52 	bl	80032e0 <HAL_ADC_ConfigChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001c42:	f000 fbc3 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200046b4 	.word	0x200046b4
 8001c54:	40012100 	.word	0x40012100

08001c58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08c      	sub	sp, #48	; 0x30
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
 8001c7c:	615a      	str	r2, [r3, #20]
 8001c7e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c80:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <MX_RTC_Init+0x11c>)
 8001c82:	4a3d      	ldr	r2, [pc, #244]	; (8001d78 <MX_RTC_Init+0x120>)
 8001c84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c86:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <MX_RTC_Init+0x11c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c8c:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <MX_RTC_Init+0x11c>)
 8001c8e:	227f      	movs	r2, #127	; 0x7f
 8001c90:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c92:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <MX_RTC_Init+0x11c>)
 8001c94:	22ff      	movs	r2, #255	; 0xff
 8001c96:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <MX_RTC_Init+0x11c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c9e:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <MX_RTC_Init+0x11c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ca4:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <MX_RTC_Init+0x11c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001caa:	4832      	ldr	r0, [pc, #200]	; (8001d74 <MX_RTC_Init+0x11c>)
 8001cac:	f004 fa88 	bl	80061c0 <HAL_RTC_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001cb6:	f000 fb89 	bl	80023cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0x0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0x0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4825      	ldr	r0, [pc, #148]	; (8001d74 <MX_RTC_Init+0x11c>)
 8001cde:	f004 faf9 	bl	80062d4 <HAL_RTC_SetTime>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001ce8:	f000 fb70 	bl	80023cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cec:	2301      	movs	r3, #1
 8001cee:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 0x1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 0x0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d04:	f107 0320 	add.w	r3, r7, #32
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4819      	ldr	r0, [pc, #100]	; (8001d74 <MX_RTC_Init+0x11c>)
 8001d0e:	f004 fb97 	bl	8006440 <HAL_RTC_SetDate>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001d18:	f000 fb58 	bl	80023cc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d40:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2201      	movs	r2, #1
 8001d46:	4619      	mov	r1, r3
 8001d48:	480a      	ldr	r0, [pc, #40]	; (8001d74 <MX_RTC_Init+0x11c>)
 8001d4a:	f004 fc19 	bl	8006580 <HAL_RTC_SetAlarm>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8001d54:	f000 fb3a 	bl	80023cc <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_RTC_Init+0x11c>)
 8001d5e:	f004 fd86 	bl	800686e <HAL_RTCEx_SetWakeUpTimer>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8001d68:	f000 fb30 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	3730      	adds	r7, #48	; 0x30
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	2000a790 	.word	0x2000a790
 8001d78:	40002800 	.word	0x40002800

08001d7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b096      	sub	sp, #88	; 0x58
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]
 8001daa:	615a      	str	r2, [r3, #20]
 8001dac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	2220      	movs	r2, #32
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f00f faa3 	bl	8011300 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dba:	4b44      	ldr	r3, [pc, #272]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001dbc:	4a44      	ldr	r2, [pc, #272]	; (8001ed0 <MX_TIM1_Init+0x154>)
 8001dbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dc0:	4b42      	ldr	r3, [pc, #264]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dda:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001de0:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001de2:	2280      	movs	r2, #128	; 0x80
 8001de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001de6:	4839      	ldr	r0, [pc, #228]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001de8:	f004 fdd5 	bl	8006996 <HAL_TIM_Base_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001df2:	f000 faeb 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e00:	4619      	mov	r1, r3
 8001e02:	4832      	ldr	r0, [pc, #200]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001e04:	f005 f9d0 	bl	80071a8 <HAL_TIM_ConfigClockSource>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e0e:	f000 fadd 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e12:	482e      	ldr	r0, [pc, #184]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001e14:	f004 fee2 	bl	8006bdc <HAL_TIM_PWM_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e1e:	f000 fad5 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4826      	ldr	r0, [pc, #152]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001e32:	f005 fda5 	bl	8007980 <HAL_TIMEx_MasterConfigSynchronization>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e3c:	f000 fac6 	bl	80023cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e40:	2360      	movs	r3, #96	; 0x60
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001e50:	2304      	movs	r3, #4
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	2200      	movs	r2, #0
 8001e62:	4619      	mov	r1, r3
 8001e64:	4819      	ldr	r0, [pc, #100]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001e66:	f005 f8e1 	bl	800702c <HAL_TIM_PWM_ConfigChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001e70:	f000 faac 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e78:	2208      	movs	r2, #8
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4813      	ldr	r0, [pc, #76]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001e7e:	f005 f8d5 	bl	800702c <HAL_TIM_PWM_ConfigChannel>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001e88:	f000 faa0 	bl	80023cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	4619      	mov	r1, r3
 8001eae:	4807      	ldr	r0, [pc, #28]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001eb0:	f005 fde0 	bl	8007a74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001eba:	f000 fa87 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ebe:	4803      	ldr	r0, [pc, #12]	; (8001ecc <MX_TIM1_Init+0x150>)
 8001ec0:	f000 fd64 	bl	800298c <HAL_TIM_MspPostInit>

}
 8001ec4:	bf00      	nop
 8001ec6:	3758      	adds	r7, #88	; 0x58
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000a878 	.word	0x2000a878
 8001ed0:	40010000 	.word	0x40010000

08001ed4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee8:	463b      	mov	r3, r7
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <MX_TIM2_Init+0x94>)
 8001ef2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <MX_TIM2_Init+0x94>)
 8001efa:	2223      	movs	r2, #35	; 0x23
 8001efc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <MX_TIM2_Init+0x94>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <MX_TIM2_Init+0x94>)
 8001f06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <MX_TIM2_Init+0x94>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <MX_TIM2_Init+0x94>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f18:	4813      	ldr	r0, [pc, #76]	; (8001f68 <MX_TIM2_Init+0x94>)
 8001f1a:	f004 fd3c 	bl	8006996 <HAL_TIM_Base_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f24:	f000 fa52 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	4619      	mov	r1, r3
 8001f34:	480c      	ldr	r0, [pc, #48]	; (8001f68 <MX_TIM2_Init+0x94>)
 8001f36:	f005 f937 	bl	80071a8 <HAL_TIM_ConfigClockSource>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f40:	f000 fa44 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f44:	2300      	movs	r3, #0
 8001f46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_TIM2_Init+0x94>)
 8001f52:	f005 fd15 	bl	8007980 <HAL_TIMEx_MasterConfigSynchronization>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f5c:	f000 fa36 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f60:	bf00      	nop
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	2000a8c0 	.word	0x2000a8c0

08001f6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f80:	463b      	mov	r3, r7
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  TIM3->CR2 &= ~0x02;
 8001f88:	4b23      	ldr	r3, [pc, #140]	; (8002018 <MX_TIM3_Init+0xac>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a22      	ldr	r2, [pc, #136]	; (8002018 <MX_TIM3_Init+0xac>)
 8001f8e:	f023 0302 	bic.w	r3, r3, #2
 8001f92:	6053      	str	r3, [r2, #4]
  TIM3->CR2 |= 0x02;
 8001f94:	4b20      	ldr	r3, [pc, #128]	; (8002018 <MX_TIM3_Init+0xac>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <MX_TIM3_Init+0xac>)
 8001f9a:	f043 0302 	orr.w	r3, r3, #2
 8001f9e:	6053      	str	r3, [r2, #4]
  //TIM_CR2_MMS = 0x02;
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <MX_TIM3_Init+0xb0>)
 8001fa2:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <MX_TIM3_Init+0xac>)
 8001fa4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <MX_TIM3_Init+0xb0>)
 8001fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fae:	4b1b      	ldr	r3, [pc, #108]	; (800201c <MX_TIM3_Init+0xb0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <MX_TIM3_Init+0xb0>)
 8001fb6:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001fba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <MX_TIM3_Init+0xb0>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <MX_TIM3_Init+0xb0>)
 8001fc4:	2280      	movs	r2, #128	; 0x80
 8001fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fc8:	4814      	ldr	r0, [pc, #80]	; (800201c <MX_TIM3_Init+0xb0>)
 8001fca:	f004 fce4 	bl	8006996 <HAL_TIM_Base_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001fd4:	f000 f9fa 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480d      	ldr	r0, [pc, #52]	; (800201c <MX_TIM3_Init+0xb0>)
 8001fe6:	f005 f8df 	bl	80071a8 <HAL_TIM_ConfigClockSource>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001ff0:	f000 f9ec 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	4619      	mov	r1, r3
 8002000:	4806      	ldr	r0, [pc, #24]	; (800201c <MX_TIM3_Init+0xb0>)
 8002002:	f005 fcbd 	bl	8007980 <HAL_TIMEx_MasterConfigSynchronization>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 800200c:	f000 f9de 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40000400 	.word	0x40000400
 800201c:	20006744 	.word	0x20006744

08002020 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	463b      	mov	r3, r7
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <MX_TIM4_Init+0x94>)
 800203e:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <MX_TIM4_Init+0x98>)
 8002040:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002044:	2223      	movs	r2, #35	; 0x23
 8002046:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <MX_TIM4_Init+0x94>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002050:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002054:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205c:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <MX_TIM4_Init+0x94>)
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002062:	4814      	ldr	r0, [pc, #80]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002064:	f004 fc97 	bl	8006996 <HAL_TIM_Base_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800206e:	f000 f9ad 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002076:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	4619      	mov	r1, r3
 800207e:	480d      	ldr	r0, [pc, #52]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002080:	f005 f892 	bl	80071a8 <HAL_TIM_ConfigClockSource>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800208a:	f000 f99f 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002096:	463b      	mov	r3, r7
 8002098:	4619      	mov	r1, r3
 800209a:	4806      	ldr	r0, [pc, #24]	; (80020b4 <MX_TIM4_Init+0x94>)
 800209c:	f005 fc70 	bl	8007980 <HAL_TIMEx_MasterConfigSynchronization>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80020a6:	f000 f991 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	2000466c 	.word	0x2000466c
 80020b8:	40000800 	.word	0x40000800

080020bc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
 80020d0:	615a      	str	r2, [r3, #20]
 80020d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80020d4:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <MX_TIM10_Init+0x94>)
 80020d6:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <MX_TIM10_Init+0x98>)
 80020d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <MX_TIM10_Init+0x94>)
 80020dc:	2200      	movs	r2, #0
 80020de:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <MX_TIM10_Init+0x94>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80020e6:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <MX_TIM10_Init+0x94>)
 80020e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ec:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <MX_TIM10_Init+0x94>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020f4:	4b16      	ldr	r3, [pc, #88]	; (8002150 <MX_TIM10_Init+0x94>)
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80020fa:	4815      	ldr	r0, [pc, #84]	; (8002150 <MX_TIM10_Init+0x94>)
 80020fc:	f004 fc4b 	bl	8006996 <HAL_TIM_Base_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002106:	f000 f961 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800210a:	4811      	ldr	r0, [pc, #68]	; (8002150 <MX_TIM10_Init+0x94>)
 800210c:	f004 fd66 	bl	8006bdc <HAL_TIM_PWM_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002116:	f000 f959 	bl	80023cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800211a:	2360      	movs	r3, #96	; 0x60
 800211c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	2200      	movs	r2, #0
 800212e:	4619      	mov	r1, r3
 8002130:	4807      	ldr	r0, [pc, #28]	; (8002150 <MX_TIM10_Init+0x94>)
 8002132:	f004 ff7b 	bl	800702c <HAL_TIM_PWM_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800213c:	f000 f946 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002140:	4803      	ldr	r0, [pc, #12]	; (8002150 <MX_TIM10_Init+0x94>)
 8002142:	f000 fc23 	bl	800298c <HAL_TIM_MspPostInit>

}
 8002146:	bf00      	nop
 8002148:	3720      	adds	r7, #32
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200046fc 	.word	0x200046fc
 8002154:	40014400 	.word	0x40014400

08002158 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215e:	463b      	mov	r3, r7
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800216a:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <MX_TIM12_Init+0x6c>)
 800216c:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <MX_TIM12_Init+0x70>)
 800216e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1000;
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <MX_TIM12_Init+0x6c>)
 8002172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002176:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <MX_TIM12_Init+0x6c>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 36000;
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <MX_TIM12_Init+0x6c>)
 8002180:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8002184:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <MX_TIM12_Init+0x6c>)
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218c:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <MX_TIM12_Init+0x6c>)
 800218e:	2200      	movs	r2, #0
 8002190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002192:	480c      	ldr	r0, [pc, #48]	; (80021c4 <MX_TIM12_Init+0x6c>)
 8002194:	f004 fbff 	bl	8006996 <HAL_TIM_Base_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800219e:	f000 f915 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80021a8:	463b      	mov	r3, r7
 80021aa:	4619      	mov	r1, r3
 80021ac:	4805      	ldr	r0, [pc, #20]	; (80021c4 <MX_TIM12_Init+0x6c>)
 80021ae:	f004 fffb 	bl	80071a8 <HAL_TIM_ConfigClockSource>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 80021b8:	f000 f908 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	2000a908 	.word	0x2000a908
 80021c8:	40001800 	.word	0x40001800

080021cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	; 0x30
 80021d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d2:	f107 031c 	add.w	r3, r7, #28
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	4b58      	ldr	r3, [pc, #352]	; (8002348 <MX_GPIO_Init+0x17c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a57      	ldr	r2, [pc, #348]	; (8002348 <MX_GPIO_Init+0x17c>)
 80021ec:	f043 0310 	orr.w	r3, r3, #16
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b55      	ldr	r3, [pc, #340]	; (8002348 <MX_GPIO_Init+0x17c>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	4b51      	ldr	r3, [pc, #324]	; (8002348 <MX_GPIO_Init+0x17c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a50      	ldr	r2, [pc, #320]	; (8002348 <MX_GPIO_Init+0x17c>)
 8002208:	f043 0320 	orr.w	r3, r3, #32
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b4e      	ldr	r3, [pc, #312]	; (8002348 <MX_GPIO_Init+0x17c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <MX_GPIO_Init+0x17c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a49      	ldr	r2, [pc, #292]	; (8002348 <MX_GPIO_Init+0x17c>)
 8002224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <MX_GPIO_Init+0x17c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b43      	ldr	r3, [pc, #268]	; (8002348 <MX_GPIO_Init+0x17c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a42      	ldr	r2, [pc, #264]	; (8002348 <MX_GPIO_Init+0x17c>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b40      	ldr	r3, [pc, #256]	; (8002348 <MX_GPIO_Init+0x17c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <MX_GPIO_Init+0x17c>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a3b      	ldr	r2, [pc, #236]	; (8002348 <MX_GPIO_Init+0x17c>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <MX_GPIO_Init+0x17c>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	4b35      	ldr	r3, [pc, #212]	; (8002348 <MX_GPIO_Init+0x17c>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a34      	ldr	r2, [pc, #208]	; (8002348 <MX_GPIO_Init+0x17c>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b32      	ldr	r3, [pc, #200]	; (8002348 <MX_GPIO_Init+0x17c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 800228a:	2201      	movs	r2, #1
 800228c:	21fc      	movs	r1, #252	; 0xfc
 800228e:	482f      	ldr	r0, [pc, #188]	; (800234c <MX_GPIO_Init+0x180>)
 8002290:	f001 fcd4 	bl	8003c3c <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8002294:	2200      	movs	r2, #0
 8002296:	2104      	movs	r1, #4
 8002298:	482d      	ldr	r0, [pc, #180]	; (8002350 <MX_GPIO_Init+0x184>)
 800229a:	f001 fccf 	bl	8003c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	2104      	movs	r1, #4
 80022a2:	482c      	ldr	r0, [pc, #176]	; (8002354 <MX_GPIO_Init+0x188>)
 80022a4:	f001 fcca 	bl	8003c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, water_heat_cool_Pin|grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin, GPIO_PIN_RESET);
 80022a8:	2200      	movs	r2, #0
 80022aa:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80022ae:	4827      	ldr	r0, [pc, #156]	; (800234c <MX_GPIO_Init+0x180>)
 80022b0:	f001 fcc4 	bl	8003c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 80022b4:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 80022b8:	61fb      	str	r3, [r7, #28]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ba:	2301      	movs	r3, #1
 80022bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c6:	f107 031c 	add.w	r3, r7, #28
 80022ca:	4619      	mov	r1, r3
 80022cc:	481f      	ldr	r0, [pc, #124]	; (800234c <MX_GPIO_Init+0x180>)
 80022ce:	f001 fb17 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022d2:	2304      	movs	r3, #4
 80022d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e2:	f107 031c 	add.w	r3, r7, #28
 80022e6:	4619      	mov	r1, r3
 80022e8:	4819      	ldr	r0, [pc, #100]	; (8002350 <MX_GPIO_Init+0x184>)
 80022ea:	f001 fb09 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 80022ee:	2304      	movs	r3, #4
 80022f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f2:	2301      	movs	r3, #1
 80022f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 80022fe:	f107 031c 	add.w	r3, r7, #28
 8002302:	4619      	mov	r1, r3
 8002304:	4813      	ldr	r0, [pc, #76]	; (8002354 <MX_GPIO_Init+0x188>)
 8002306:	f001 fafb 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin water_heat_cool_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin;
 800230a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800230e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	480a      	ldr	r0, [pc, #40]	; (800234c <MX_GPIO_Init+0x180>)
 8002324:	f001 faec 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 8002328:	2302      	movs	r3, #2
 800232a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	4804      	ldr	r0, [pc, #16]	; (800234c <MX_GPIO_Init+0x180>)
 800233c:	f001 fae0 	bl	8003900 <HAL_GPIO_Init>

}
 8002340:	bf00      	nop
 8002342:	3730      	adds	r7, #48	; 0x30
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	40021000 	.word	0x40021000
 8002350:	40020800 	.word	0x40020800
 8002354:	40020400 	.word	0x40020400

08002358 <StartBalanceWater>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBalanceWater */
void StartBalanceWater(void const * argument)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002360:	f00e fb4c 	bl	80109fc <MX_USB_HOST_Init>
  /* Infinite loop */
  for(;;)
  {

	 // MX_USB_HOST_Process();
	  systemControl();
 8002364:	f7ff fad8 	bl	8001918 <systemControl>
    osDelay(1);
 8002368:	2001      	movs	r0, #1
 800236a:	f00b fd9e 	bl	800deaa <osDelay>
	  systemControl();
 800236e:	e7f9      	b.n	8002364 <StartBalanceWater+0xc>

08002370 <StartWaterTempControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWaterTempControl */
void StartWaterTempControl(void const * argument)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWaterTempControl */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002378:	2001      	movs	r0, #1
 800237a:	f00b fd96 	bl	800deaa <osDelay>
 800237e:	e7fb      	b.n	8002378 <StartWaterTempControl+0x8>

08002380 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM3)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d109      	bne.n	80023a6 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		if(retrieved_ADC_value == 'y')
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b79      	cmp	r3, #121	; 0x79
 8002398:	d105      	bne.n	80023a6 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			retrieved_ADC_value = 'n';
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800239c:	226e      	movs	r2, #110	; 0x6e
 800239e:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc2);
 80023a0:	4808      	ldr	r0, [pc, #32]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80023a2:	f000 fd83 	bl	8002eac <HAL_ADC_Start_IT>
		}

	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d101      	bne.n	80023b4 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 80023b0:	f000 fcf8 	bl	8002da4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40000400 	.word	0x40000400
 80023c0:	20000012 	.word	0x20000012
 80023c4:	200046b4 	.word	0x200046b4
 80023c8:	40001000 	.word	0x40001000

080023cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023d0:	b672      	cpsid	i
}
 80023d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <Error_Handler+0x8>
	...

080023d8 <readWaterTDS>:
double averageVoltage = 0,tdsValue = 0,temperature = 25,compensationCoefficient = 0,compensationVolatge = 0;
int TDS_index = 0;
char nutrient_buffer_ready = 'n';

double readWaterTDS() // Get nutrient level
{
 80023d8:	b5b0      	push	{r4, r5, r7, lr}
 80023da:	af00      	add	r7, sp, #0

	if(new_TDS_sample == 'y' && TDS_index >= samples)
 80023dc:	4b7e      	ldr	r3, [pc, #504]	; (80025d8 <readWaterTDS+0x200>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b79      	cmp	r3, #121	; 0x79
 80023e2:	f040 80b9 	bne.w	8002558 <readWaterTDS+0x180>
 80023e6:	4b7d      	ldr	r3, [pc, #500]	; (80025dc <readWaterTDS+0x204>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b0e      	cmp	r3, #14
 80023ec:	f340 80b4 	ble.w	8002558 <readWaterTDS+0x180>
	{
		for(copyIndex=0;copyIndex<30;copyIndex++) analogBufferTemp[copyIndex]=nutrientBuffer[copyIndex];
 80023f0:	4b7b      	ldr	r3, [pc, #492]	; (80025e0 <readWaterTDS+0x208>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e00e      	b.n	8002416 <readWaterTDS+0x3e>
 80023f8:	4b79      	ldr	r3, [pc, #484]	; (80025e0 <readWaterTDS+0x208>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b78      	ldr	r3, [pc, #480]	; (80025e0 <readWaterTDS+0x208>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4978      	ldr	r1, [pc, #480]	; (80025e4 <readWaterTDS+0x20c>)
 8002402:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002406:	4978      	ldr	r1, [pc, #480]	; (80025e8 <readWaterTDS+0x210>)
 8002408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800240c:	4b74      	ldr	r3, [pc, #464]	; (80025e0 <readWaterTDS+0x208>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a73      	ldr	r2, [pc, #460]	; (80025e0 <readWaterTDS+0x208>)
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b72      	ldr	r3, [pc, #456]	; (80025e0 <readWaterTDS+0x208>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b1d      	cmp	r3, #29
 800241c:	ddec      	ble.n	80023f8 <readWaterTDS+0x20>
		averageVoltage = getMedianNum(analogBufferTemp,samples) * (double)0.000805664; 																					 // read the analog value more stable by averaging and convert to voltage value
 800241e:	210f      	movs	r1, #15
 8002420:	4871      	ldr	r0, [pc, #452]	; (80025e8 <readWaterTDS+0x210>)
 8002422:	f7ff f94d 	bl	80016c0 <getMedianNum>
 8002426:	4603      	mov	r3, r0
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f835 	bl	8000498 <__aeabi_i2d>
 800242e:	a360      	add	r3, pc, #384	; (adr r3, 80025b0 <readWaterTDS+0x1d8>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	f7fe f89a 	bl	800056c <__aeabi_dmul>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	496b      	ldr	r1, [pc, #428]	; (80025ec <readWaterTDS+0x214>)
 800243e:	e9c1 2300 	strd	r2, r3, [r1]
		compensationCoefficient=1.0+0.02*(temperature-25.0);   																								    		 //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 8002442:	4b6b      	ldr	r3, [pc, #428]	; (80025f0 <readWaterTDS+0x218>)
 8002444:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	4b69      	ldr	r3, [pc, #420]	; (80025f4 <readWaterTDS+0x21c>)
 800244e:	f7fd fed5 	bl	80001fc <__aeabi_dsub>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	a357      	add	r3, pc, #348	; (adr r3, 80025b8 <readWaterTDS+0x1e0>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	f7fe f884 	bl	800056c <__aeabi_dmul>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	4b61      	ldr	r3, [pc, #388]	; (80025f8 <readWaterTDS+0x220>)
 8002472:	f7fd fec5 	bl	8000200 <__adddf3>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4960      	ldr	r1, [pc, #384]	; (80025fc <readWaterTDS+0x224>)
 800247c:	e9c1 2300 	strd	r2, r3, [r1]
		compensationVolatge=averageVoltage/compensationCoefficient;  																									 //temperature compensation
 8002480:	4b5a      	ldr	r3, [pc, #360]	; (80025ec <readWaterTDS+0x214>)
 8002482:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002486:	4b5d      	ldr	r3, [pc, #372]	; (80025fc <readWaterTDS+0x224>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	f7fe f998 	bl	80007c0 <__aeabi_ddiv>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	495a      	ldr	r1, [pc, #360]	; (8002600 <readWaterTDS+0x228>)
 8002496:	e9c1 2300 	strd	r2, r3, [r1]
		tdsValue=(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds
 800249a:	4b59      	ldr	r3, [pc, #356]	; (8002600 <readWaterTDS+0x228>)
 800249c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024a0:	a347      	add	r3, pc, #284	; (adr r3, 80025c0 <readWaterTDS+0x1e8>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fe f861 	bl	800056c <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	4b53      	ldr	r3, [pc, #332]	; (8002600 <readWaterTDS+0x228>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f7fe f858 	bl	800056c <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	4b4e      	ldr	r3, [pc, #312]	; (8002600 <readWaterTDS+0x228>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f7fe f84f 	bl	800056c <__aeabi_dmul>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4614      	mov	r4, r2
 80024d4:	461d      	mov	r5, r3
 80024d6:	4b4a      	ldr	r3, [pc, #296]	; (8002600 <readWaterTDS+0x228>)
 80024d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024dc:	a33a      	add	r3, pc, #232	; (adr r3, 80025c8 <readWaterTDS+0x1f0>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	f7fe f843 	bl	800056c <__aeabi_dmul>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	4b44      	ldr	r3, [pc, #272]	; (8002600 <readWaterTDS+0x228>)
 80024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f4:	f7fe f83a 	bl	800056c <__aeabi_dmul>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4620      	mov	r0, r4
 80024fe:	4629      	mov	r1, r5
 8002500:	f7fd fe7c 	bl	80001fc <__aeabi_dsub>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4614      	mov	r4, r2
 800250a:	461d      	mov	r5, r3
 800250c:	4b3c      	ldr	r3, [pc, #240]	; (8002600 <readWaterTDS+0x228>)
 800250e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002512:	a32f      	add	r3, pc, #188	; (adr r3, 80025d0 <readWaterTDS+0x1f8>)
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f7fe f828 	bl	800056c <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4620      	mov	r0, r4
 8002522:	4629      	mov	r1, r5
 8002524:	f7fd fe6c 	bl	8000200 <__adddf3>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	4b33      	ldr	r3, [pc, #204]	; (8002604 <readWaterTDS+0x22c>)
 8002536:	f7fe f819 	bl	800056c <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4932      	ldr	r1, [pc, #200]	; (8002608 <readWaterTDS+0x230>)
 8002540:	e9c1 2300 	strd	r2, r3, [r1]
		nutrient_buffer_ready = 'y';
 8002544:	4b31      	ldr	r3, [pc, #196]	; (800260c <readWaterTDS+0x234>)
 8002546:	2279      	movs	r2, #121	; 0x79
 8002548:	701a      	strb	r2, [r3, #0]
		TDS_index = 0;
 800254a:	4b24      	ldr	r3, [pc, #144]	; (80025dc <readWaterTDS+0x204>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
	    return tdsValue;
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <readWaterTDS+0x230>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	e026      	b.n	80025a6 <readWaterTDS+0x1ce>
	}
	else if(new_TDS_sample == 'y' && TDS_index < samples)
 8002558:	4b1f      	ldr	r3, [pc, #124]	; (80025d8 <readWaterTDS+0x200>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b79      	cmp	r3, #121	; 0x79
 800255e:	d117      	bne.n	8002590 <readWaterTDS+0x1b8>
 8002560:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <readWaterTDS+0x204>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b0e      	cmp	r3, #14
 8002566:	dc13      	bgt.n	8002590 <readWaterTDS+0x1b8>
	{
		nutrientBuffer[TDS_index] = nutrient_ph_values[1];  		 // skip first 10 values since they are way off (pH: position 0 Nutrient: position 1)
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <readWaterTDS+0x238>)
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <readWaterTDS+0x204>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4611      	mov	r1, r2
 8002572:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <readWaterTDS+0x20c>)
 8002574:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		osDelay(10);
 8002578:	200a      	movs	r0, #10
 800257a:	f00b fc96 	bl	800deaa <osDelay>
		TDS_index++;
 800257e:	4b17      	ldr	r3, [pc, #92]	; (80025dc <readWaterTDS+0x204>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	4a15      	ldr	r2, [pc, #84]	; (80025dc <readWaterTDS+0x204>)
 8002586:	6013      	str	r3, [r2, #0]
		new_TDS_sample = 'n';
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <readWaterTDS+0x200>)
 800258a:	226e      	movs	r2, #110	; 0x6e
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	e007      	b.n	80025a0 <readWaterTDS+0x1c8>
	}
	else if(TDS_index < samples)  return -1; // reutrn -1 if
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <readWaterTDS+0x204>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b0e      	cmp	r3, #14
 8002596:	dc03      	bgt.n	80025a0 <readWaterTDS+0x1c8>
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <readWaterTDS+0x23c>)
 800259e:	e002      	b.n	80025a6 <readWaterTDS+0x1ce>

	return -10; // else if we make it here there is no new sample ready so return -10 to signify we need to check again
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <readWaterTDS+0x240>)

}
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	bdb0      	pop	{r4, r5, r7, pc}
 80025ac:	f3af 8000 	nop.w
 80025b0:	440a4e96 	.word	0x440a4e96
 80025b4:	3f4a6666 	.word	0x3f4a6666
 80025b8:	47ae147b 	.word	0x47ae147b
 80025bc:	3f947ae1 	.word	0x3f947ae1
 80025c0:	a3d70a3d 	.word	0xa3d70a3d
 80025c4:	4060ad70 	.word	0x4060ad70
 80025c8:	1eb851ec 	.word	0x1eb851ec
 80025cc:	406ffb85 	.word	0x406ffb85
 80025d0:	b851eb85 	.word	0xb851eb85
 80025d4:	408acb1e 	.word	0x408acb1e
 80025d8:	20000010 	.word	0x20000010
 80025dc:	200007e0 	.word	0x200007e0
 80025e0:	200007b8 	.word	0x200007b8
 80025e4:	2000a954 	.word	0x2000a954
 80025e8:	2000a9a0 	.word	0x2000a9a0
 80025ec:	200007c0 	.word	0x200007c0
 80025f0:	20000018 	.word	0x20000018
 80025f4:	40390000 	.word	0x40390000
 80025f8:	3ff00000 	.word	0x3ff00000
 80025fc:	200007d0 	.word	0x200007d0
 8002600:	200007d8 	.word	0x200007d8
 8002604:	3fe00000 	.word	0x3fe00000
 8002608:	200007c8 	.word	0x200007c8
 800260c:	20000020 	.word	0x20000020
 8002610:	200007ac 	.word	0x200007ac
 8002614:	bff00000 	.word	0xbff00000
 8002618:	c0240000 	.word	0xc0240000

0800261c <getFiveSamples>:
	return ph_value;
}
double TDS_check = 0, pH_check = 0;
int fiveSamples = 0;
void getFiveSamples(int delay_enable)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]


	//osThreadSuspend(WaterTempControHandle);

	done_sampling = 'n';
 8002624:	4b3f      	ldr	r3, [pc, #252]	; (8002724 <getFiveSamples+0x108>)
 8002626:	226e      	movs	r2, #110	; 0x6e
 8002628:	701a      	strb	r2, [r3, #0]
	water_temp = 0;
 800262a:	4b3f      	ldr	r3, [pc, #252]	; (8002728 <getFiveSamples+0x10c>)
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
	TDS = 0;
 8002632:	4b3e      	ldr	r3, [pc, #248]	; (800272c <getFiveSamples+0x110>)
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
	pH = 0;
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <getFiveSamples+0x114>)
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	601a      	str	r2, [r3, #0]


	for(fiveSamples = 0; fiveSamples<5 && nutrient_ph_values[0] != 0 &&nutrient_ph_values[1] != 0;)
 8002642:	4b3c      	ldr	r3, [pc, #240]	; (8002734 <getFiveSamples+0x118>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e037      	b.n	80026ba <getFiveSamples+0x9e>
	{
		//pH_check 	=  readPH();
		TDS_check	=  readWaterTDS();
 800264a:	f7ff fec5 	bl	80023d8 <readWaterTDS>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4939      	ldr	r1, [pc, #228]	; (8002738 <getFiveSamples+0x11c>)
 8002654:	e9c1 2300 	strd	r2, r3, [r1]
		if(TDS_check > 0)// && pH_check != -1 )
 8002658:	4b37      	ldr	r3, [pc, #220]	; (8002738 <getFiveSamples+0x11c>)
 800265a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	f7fe fa11 	bl	8000a8c <__aeabi_dcmpgt>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d100      	bne.n	8002672 <getFiveSamples+0x56>
 8002670:	e023      	b.n	80026ba <getFiveSamples+0x9e>
		{
			TDS 		  += TDS_check;	// get sensor data
 8002672:	4b2e      	ldr	r3, [pc, #184]	; (800272c <getFiveSamples+0x110>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff20 	bl	80004bc <__aeabi_f2d>
 800267c:	4b2e      	ldr	r3, [pc, #184]	; (8002738 <getFiveSamples+0x11c>)
 800267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002682:	f7fd fdbd 	bl	8000200 <__adddf3>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f7fe fa65 	bl	8000b5c <__aeabi_d2f>
 8002692:	4603      	mov	r3, r0
 8002694:	4a25      	ldr	r2, [pc, #148]	; (800272c <getFiveSamples+0x110>)
 8002696:	6013      	str	r3, [r2, #0]
			//pH 		 	  +=  readPH();
			//water_temp	  += readWaterTemp();
			if(delay_enable == 1) osDelay(100);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d102      	bne.n	80026a4 <getFiveSamples+0x88>
 800269e:	2064      	movs	r0, #100	; 0x64
 80026a0:	f00b fc03 	bl	800deaa <osDelay>

			nutrient_ph_values[0] = 0;
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <getFiveSamples+0x120>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
			nutrient_ph_values[1] = 0;
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <getFiveSamples+0x120>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	605a      	str	r2, [r3, #4]
			fiveSamples++;
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <getFiveSamples+0x118>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <getFiveSamples+0x118>)
 80026b8:	6013      	str	r3, [r2, #0]
	for(fiveSamples = 0; fiveSamples<5 && nutrient_ph_values[0] != 0 &&nutrient_ph_values[1] != 0;)
 80026ba:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <getFiveSamples+0x118>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b04      	cmp	r3, #4
 80026c0:	dc07      	bgt.n	80026d2 <getFiveSamples+0xb6>
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <getFiveSamples+0x120>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <getFiveSamples+0xb6>
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <getFiveSamples+0x120>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1bb      	bne.n	800264a <getFiveSamples+0x2e>
		}
	}
	if(fiveSamples >= 5)
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <getFiveSamples+0x118>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	dd1d      	ble.n	8002716 <getFiveSamples+0xfa>
	{
		water_temp	  = water_temp/5;							    // get sensor data so we can tell if its time to do pH up or pH down
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <getFiveSamples+0x10c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4918      	ldr	r1, [pc, #96]	; (8002740 <getFiveSamples+0x124>)
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fc4d 	bl	8000f80 <__aeabi_fdiv>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <getFiveSamples+0x10c>)
 80026ec:	601a      	str	r2, [r3, #0]
		TDS 		  = TDS/5;
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <getFiveSamples+0x110>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4913      	ldr	r1, [pc, #76]	; (8002740 <getFiveSamples+0x124>)
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fc43 	bl	8000f80 <__aeabi_fdiv>
 80026fa:	4603      	mov	r3, r0
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <getFiveSamples+0x110>)
 8002700:	601a      	str	r2, [r3, #0]
		pH 		 	  = pH/5;
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <getFiveSamples+0x114>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	490e      	ldr	r1, [pc, #56]	; (8002740 <getFiveSamples+0x124>)
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe fc39 	bl	8000f80 <__aeabi_fdiv>
 800270e:	4603      	mov	r3, r0
 8002710:	461a      	mov	r2, r3
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <getFiveSamples+0x114>)
 8002714:	601a      	str	r2, [r3, #0]
	}


	new_sample = 'y';
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <getFiveSamples+0x128>)
 8002718:	2279      	movs	r2, #121	; 0x79
 800271a:	701a      	strb	r2, [r3, #0]
	//osThreadResume(WaterTempControHandle);
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000014 	.word	0x20000014
 8002728:	20000780 	.word	0x20000780
 800272c:	20000778 	.word	0x20000778
 8002730:	2000077c 	.word	0x2000077c
 8002734:	200007f0 	.word	0x200007f0
 8002738:	200007e8 	.word	0x200007e8
 800273c:	200007ac 	.word	0x200007ac
 8002740:	40a00000 	.word	0x40a00000
 8002744:	20000013 	.word	0x20000013

08002748 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_MspInit+0x54>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	4a11      	ldr	r2, [pc, #68]	; (800279c <HAL_MspInit+0x54>)
 8002758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275c:	6453      	str	r3, [r2, #68]	; 0x44
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_MspInit+0x54>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_MspInit+0x54>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <HAL_MspInit+0x54>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_MspInit+0x54>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002786:	2200      	movs	r2, #0
 8002788:	210f      	movs	r1, #15
 800278a:	f06f 0001 	mvn.w	r0, #1
 800278e:	f001 f88c 	bl	80038aa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800

080027a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1b      	ldr	r2, [pc, #108]	; (800282c <HAL_ADC_MspInit+0x8c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d12f      	bne.n	8002822 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_ADC_MspInit+0x90>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4a19      	ldr	r2, [pc, #100]	; (8002830 <HAL_ADC_MspInit+0x90>)
 80027cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <HAL_ADC_MspInit+0x90>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_ADC_MspInit+0x90>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <HAL_ADC_MspInit+0x90>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_ADC_MspInit+0x90>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN4
    PA5     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = water_ph_Pin|nutrient_level_Pin;
 80027fa:	2330      	movs	r3, #48	; 0x30
 80027fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027fe:	2303      	movs	r3, #3
 8002800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	4619      	mov	r1, r3
 800280c:	4809      	ldr	r0, [pc, #36]	; (8002834 <HAL_ADC_MspInit+0x94>)
 800280e:	f001 f877 	bl	8003900 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2105      	movs	r1, #5
 8002816:	2012      	movs	r0, #18
 8002818:	f001 f847 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800281c:	2012      	movs	r0, #18
 800281e:	f001 f860 	bl	80038e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002822:	bf00      	nop
 8002824:	3728      	adds	r7, #40	; 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40012100 	.word	0x40012100
 8002830:	40023800 	.word	0x40023800
 8002834:	40020000 	.word	0x40020000

08002838 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a05      	ldr	r2, [pc, #20]	; (800285c <HAL_RTC_MspInit+0x24>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d102      	bne.n	8002850 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RTC_MspInit+0x28>)
 800284c:	2201      	movs	r2, #1
 800284e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40002800 	.word	0x40002800
 8002860:	42470e3c 	.word	0x42470e3c

08002864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a40      	ldr	r2, [pc, #256]	; (8002974 <HAL_TIM_Base_MspInit+0x110>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	4a3e      	ldr	r2, [pc, #248]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6453      	str	r3, [r2, #68]	; 0x44
 8002886:	4b3c      	ldr	r3, [pc, #240]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002892:	e06a      	b.n	800296a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289c:	d116      	bne.n	80028cc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	4b35      	ldr	r3, [pc, #212]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a34      	ldr	r2, [pc, #208]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b32      	ldr	r3, [pc, #200]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	61bb      	str	r3, [r7, #24]
 80028b8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2105      	movs	r1, #5
 80028be:	201c      	movs	r0, #28
 80028c0:	f000 fff3 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028c4:	201c      	movs	r0, #28
 80028c6:	f001 f80c 	bl	80038e2 <HAL_NVIC_EnableIRQ>
}
 80028ca:	e04e      	b.n	800296a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a2a      	ldr	r2, [pc, #168]	; (800297c <HAL_TIM_Base_MspInit+0x118>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d10e      	bne.n	80028f4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a26      	ldr	r2, [pc, #152]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	697b      	ldr	r3, [r7, #20]
}
 80028f2:	e03a      	b.n	800296a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM4)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a21      	ldr	r2, [pc, #132]	; (8002980 <HAL_TIM_Base_MspInit+0x11c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10e      	bne.n	800291c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	6413      	str	r3, [r2, #64]	; 0x40
 800290e:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
}
 800291a:	e026      	b.n	800296a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM10)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a18      	ldr	r2, [pc, #96]	; (8002984 <HAL_TIM_Base_MspInit+0x120>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10e      	bne.n	8002944 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	4a12      	ldr	r2, [pc, #72]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	6453      	str	r3, [r2, #68]	; 0x44
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
}
 8002942:	e012      	b.n	800296a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM12)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0f      	ldr	r2, [pc, #60]	; (8002988 <HAL_TIM_Base_MspInit+0x124>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10d      	bne.n	800296a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 8002958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_TIM_Base_MspInit+0x114>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
}
 800296a:	bf00      	nop
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40010000 	.word	0x40010000
 8002978:	40023800 	.word	0x40023800
 800297c:	40000400 	.word	0x40000400
 8002980:	40000800 	.word	0x40000800
 8002984:	40014400 	.word	0x40014400
 8002988:	40001800 	.word	0x40001800

0800298c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <HAL_TIM_MspPostInit+0xb0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d11f      	bne.n	80029ee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_TIM_MspPostInit+0xb4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <HAL_TIM_MspPostInit+0xb4>)
 80029b8:	f043 0310 	orr.w	r3, r3, #16
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <HAL_TIM_MspPostInit+0xb4>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin|system_fan_speed_Pin;
 80029ca:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80029ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	2300      	movs	r3, #0
 80029da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029dc:	2301      	movs	r3, #1
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4619      	mov	r1, r3
 80029e6:	4817      	ldr	r0, [pc, #92]	; (8002a44 <HAL_TIM_MspPostInit+0xb8>)
 80029e8:	f000 ff8a 	bl	8003900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80029ec:	e022      	b.n	8002a34 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <HAL_TIM_MspPostInit+0xbc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d11d      	bne.n	8002a34 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <HAL_TIM_MspPostInit+0xb4>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a0f      	ldr	r2, [pc, #60]	; (8002a40 <HAL_TIM_MspPostInit+0xb4>)
 8002a02:	f043 0320 	orr.w	r3, r3, #32
 8002a06:	6313      	str	r3, [r2, #48]	; 0x30
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_TIM_MspPostInit+0xb4>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 8002a14:	2340      	movs	r3, #64	; 0x40
 8002a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002a24:	2303      	movs	r3, #3
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4807      	ldr	r0, [pc, #28]	; (8002a4c <HAL_TIM_MspPostInit+0xc0>)
 8002a30:	f000 ff66 	bl	8003900 <HAL_GPIO_Init>
}
 8002a34:	bf00      	nop
 8002a36:	3728      	adds	r7, #40	; 0x28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40010000 	.word	0x40010000
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40014400 	.word	0x40014400
 8002a4c:	40021400 	.word	0x40021400

08002a50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08c      	sub	sp, #48	; 0x30
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002a60:	2200      	movs	r2, #0
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	2036      	movs	r0, #54	; 0x36
 8002a66:	f000 ff20 	bl	80038aa <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a6a:	2036      	movs	r0, #54	; 0x36
 8002a6c:	f000 ff39 	bl	80038e2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <HAL_InitTick+0xa4>)
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <HAL_InitTick+0xa4>)
 8002a7a:	f043 0310 	orr.w	r3, r3, #16
 8002a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <HAL_InitTick+0xa4>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a8c:	f107 0210 	add.w	r2, r7, #16
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f003 fa6c 	bl	8005f74 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a9c:	f003 fa48 	bl	8005f30 <HAL_RCC_GetPCLK1Freq>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <HAL_InitTick+0xa8>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0c9b      	lsrs	r3, r3, #18
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_InitTick+0xac>)
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <HAL_InitTick+0xb0>)
 8002ab8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_InitTick+0xac>)
 8002abc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ac0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ac2:	4a0e      	ldr	r2, [pc, #56]	; (8002afc <HAL_InitTick+0xac>)
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_InitTick+0xac>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_InitTick+0xac>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002ad4:	4809      	ldr	r0, [pc, #36]	; (8002afc <HAL_InitTick+0xac>)
 8002ad6:	f003 ff5e 	bl	8006996 <HAL_TIM_Base_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ae0:	4806      	ldr	r0, [pc, #24]	; (8002afc <HAL_InitTick+0xac>)
 8002ae2:	f004 f80d 	bl	8006b00 <HAL_TIM_Base_Start_IT>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	e000      	b.n	8002aec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3730      	adds	r7, #48	; 0x30
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	431bde83 	.word	0x431bde83
 8002afc:	2000a9e0 	.word	0x2000a9e0
 8002b00:	40001000 	.word	0x40001000

08002b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b08:	e7fe      	b.n	8002b08 <NMI_Handler+0x4>

08002b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0e:	e7fe      	b.n	8002b0e <HardFault_Handler+0x4>

08002b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <MemManage_Handler+0x4>

08002b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1a:	e7fe      	b.n	8002b1a <BusFault_Handler+0x4>

08002b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <UsageFault_Handler+0x4>

08002b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
	...

08002b30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <ADC_IRQHandler+0x10>)
 8002b36:	f000 fa73 	bl	8003020 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200046b4 	.word	0x200046b4

08002b44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <TIM2_IRQHandler+0x10>)
 8002b4a:	f004 f967 	bl	8006e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	2000a8c0 	.word	0x2000a8c0

08002b58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <TIM6_DAC_IRQHandler+0x10>)
 8002b5e:	f004 f95d 	bl	8006e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	2000a9e0 	.word	0x2000a9e0

08002b6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <OTG_FS_IRQHandler+0x10>)
 8002b72:	f001 fae5 	bl	8004140 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	2000b2b0 	.word	0x2000b2b0

08002b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
	return 1;
 8002b84:	2301      	movs	r3, #1
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <_kill>:

int _kill(int pid, int sig)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b98:	f00e fa70 	bl	801107c <__errno>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2216      	movs	r2, #22
 8002ba0:	601a      	str	r2, [r3, #0]
	return -1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_exit>:

void _exit (int status)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bb6:	f04f 31ff 	mov.w	r1, #4294967295
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ffe7 	bl	8002b8e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bc0:	e7fe      	b.n	8002bc0 <_exit+0x12>

08002bc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	e00a      	b.n	8002bea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bd4:	f3af 8000 	nop.w
 8002bd8:	4601      	mov	r1, r0
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	60ba      	str	r2, [r7, #8]
 8002be0:	b2ca      	uxtb	r2, r1
 8002be2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3301      	adds	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	dbf0      	blt.n	8002bd4 <_read+0x12>
	}

return len;
 8002bf2:	687b      	ldr	r3, [r7, #4]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e009      	b.n	8002c22 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	60ba      	str	r2, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	dbf1      	blt.n	8002c0e <_write+0x12>
	}
	return len;
 8002c2a:	687b      	ldr	r3, [r7, #4]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_close>:

int _close(int file)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	return -1;
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <_isatty>:

int _isatty(int file)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	return 1;
 8002c70:	2301      	movs	r3, #1
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
	return 0;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c9c:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <_sbrk+0x5c>)
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <_sbrk+0x60>)
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <_sbrk+0x64>)
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <_sbrk+0x68>)
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <_sbrk+0x64>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d207      	bcs.n	8002cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc4:	f00e f9da 	bl	801107c <__errno>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	220c      	movs	r2, #12
 8002ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	e009      	b.n	8002ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <_sbrk+0x64>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <_sbrk+0x64>)
 8002ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2001c000 	.word	0x2001c000
 8002cf4:	00000800 	.word	0x00000800
 8002cf8:	200007f4 	.word	0x200007f4
 8002cfc:	2000b5c8 	.word	0x2000b5c8

08002d00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d10:	480d      	ldr	r0, [pc, #52]	; (8002d48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d12:	490e      	ldr	r1, [pc, #56]	; (8002d4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d14:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d18:	e002      	b.n	8002d20 <LoopCopyDataInit>

08002d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d1e:	3304      	adds	r3, #4

08002d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d24:	d3f9      	bcc.n	8002d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d26:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d28:	4c0b      	ldr	r4, [pc, #44]	; (8002d58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d2c:	e001      	b.n	8002d32 <LoopFillZerobss>

08002d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d30:	3204      	adds	r2, #4

08002d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d34:	d3fb      	bcc.n	8002d2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d36:	f7ff ffe3 	bl	8002d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d3a:	f00e fa9b 	bl	8011274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d3e:	f7fe fe71 	bl	8001a24 <main>
  bx  lr
 8002d42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d44:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d4c:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8002d50:	08016074 	.word	0x08016074
  ldr r2, =_sbss
 8002d54:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8002d58:	2000b5c4 	.word	0x2000b5c4

08002d5c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <CAN1_RX0_IRQHandler>
	...

08002d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d64:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <HAL_Init+0x40>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <HAL_Init+0x40>)
 8002d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_Init+0x40>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <HAL_Init+0x40>)
 8002d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_Init+0x40>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <HAL_Init+0x40>)
 8002d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d88:	2003      	movs	r0, #3
 8002d8a:	f000 fd83 	bl	8003894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d8e:	200f      	movs	r0, #15
 8002d90:	f7ff fe5e 	bl	8002a50 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002d94:	f7ff fcd8 	bl	8002748 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023c00 	.word	0x40023c00

08002da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_IncTick+0x1c>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_IncTick+0x20>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4413      	add	r3, r2
 8002db4:	4a03      	ldr	r2, [pc, #12]	; (8002dc4 <HAL_IncTick+0x20>)
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	2000002c 	.word	0x2000002c
 8002dc4:	2000aa28 	.word	0x2000aa28

08002dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return uwTick;
 8002dcc:	4b02      	ldr	r3, [pc, #8]	; (8002dd8 <HAL_GetTick+0x10>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	2000aa28 	.word	0x2000aa28

08002ddc <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7ff fff0 	bl	8002dc8 <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d005      	beq.n	8002e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_Delay+0x44>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e02:	bf00      	nop
 8002e04:	f7ff ffe0 	bl	8002dc8 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d8f7      	bhi.n	8002e04 <HAL_Delay+0x28>
  {
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	2000002c 	.word	0x2000002c

08002e24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e033      	b.n	8002ea2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff fcac 	bl	80027a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e6a:	f023 0302 	bic.w	r3, r3, #2
 8002e6e:	f043 0202 	orr.w	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fb52 	bl	8003520 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f023 0303 	bic.w	r3, r3, #3
 8002e8a:	f043 0201 	orr.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
 8002e92:	e001      	b.n	8002e98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_Start_IT+0x1a>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e09f      	b.n	8003006 <HAL_ADC_Start_IT+0x15a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d018      	beq.n	8002f0e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eec:	4b48      	ldr	r3, [pc, #288]	; (8003010 <HAL_ADC_Start_IT+0x164>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a48      	ldr	r2, [pc, #288]	; (8003014 <HAL_ADC_Start_IT+0x168>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0c9a      	lsrs	r2, r3, #18
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002f00:	e002      	b.n	8002f08 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f9      	bne.n	8002f02 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d167      	bne.n	8002fec <HAL_ADC_Start_IT+0x140>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	d106      	bne.n	8002f6a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	f023 0206 	bic.w	r2, r3, #6
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44
 8002f68:	e002      	b.n	8002f70 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f80:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f90:	f043 0320 	orr.w	r3, r3, #32
 8002f94:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <HAL_ADC_Start_IT+0x16c>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <HAL_ADC_Start_IT+0x116>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d129      	bne.n	8003004 <HAL_ADC_Start_IT+0x158>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	e020      	b.n	8003004 <HAL_ADC_Start_IT+0x158>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a15      	ldr	r2, [pc, #84]	; (800301c <HAL_ADC_Start_IT+0x170>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d11b      	bne.n	8003004 <HAL_ADC_Start_IT+0x158>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d114      	bne.n	8003004 <HAL_ADC_Start_IT+0x158>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	e00b      	b.n	8003004 <HAL_ADC_Start_IT+0x158>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f043 0210 	orr.w	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr
 8003010:	20000024 	.word	0x20000024
 8003014:	431bde83 	.word	0x431bde83
 8003018:	40012300 	.word	0x40012300
 800301c:	40012000 	.word	0x40012000

08003020 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	2300      	movs	r3, #0
 800302e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b02      	cmp	r3, #2
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b20      	cmp	r3, #32
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d049      	beq.n	80030f6 <HAL_ADC_IRQHandler+0xd6>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d046      	beq.n	80030f6 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	d105      	bne.n	8003080 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d12b      	bne.n	80030e6 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003092:	2b00      	cmp	r3, #0
 8003094:	d127      	bne.n	80030e6 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d006      	beq.n	80030b2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d119      	bne.n	80030e6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0220 	bic.w	r2, r2, #32
 80030c0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fe fc5e 	bl	80019a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0212 	mvn.w	r2, #18
 80030f4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b04      	cmp	r3, #4
 8003102:	bf0c      	ite	eq
 8003104:	2301      	moveq	r3, #1
 8003106:	2300      	movne	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	2b80      	cmp	r3, #128	; 0x80
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d057      	beq.n	80031d8 <HAL_ADC_IRQHandler+0x1b8>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d054      	beq.n	80031d8 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d139      	bne.n	80031c8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800315e:	2b00      	cmp	r3, #0
 8003160:	d006      	beq.n	8003170 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800316c:	2b00      	cmp	r3, #0
 800316e:	d12b      	bne.n	80031c8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800317a:	2b00      	cmp	r3, #0
 800317c:	d124      	bne.n	80031c8 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003188:	2b00      	cmp	r3, #0
 800318a:	d11d      	bne.n	80031c8 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003190:	2b00      	cmp	r3, #0
 8003192:	d119      	bne.n	80031c8 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f043 0201 	orr.w	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 faaf 	bl	800372c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f06f 020c 	mvn.w	r2, #12
 80031d6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	bf0c      	ite	eq
 80031e6:	2301      	moveq	r3, #1
 80031e8:	2300      	movne	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d017      	beq.n	800323a <HAL_ADC_IRQHandler+0x21a>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d014      	beq.n	800323a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b01      	cmp	r3, #1
 800321c:	d10d      	bne.n	800323a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f845 	bl	80032ba <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0201 	mvn.w	r2, #1
 8003238:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b20      	cmp	r3, #32
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800325a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d015      	beq.n	800329a <HAL_ADC_IRQHandler+0x27a>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d012      	beq.n	800329a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	f043 0202 	orr.w	r2, r3, #2
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0220 	mvn.w	r2, #32
 8003288:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f81e 	bl	80032cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0220 	mvn.w	r2, #32
 8003298:	601a      	str	r2, [r3, #0]
  }
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x1c>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e103      	b.n	8003504 <HAL_ADC_ConfigChannel+0x224>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b09      	cmp	r3, #9
 800330a:	d925      	bls.n	8003358 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68d9      	ldr	r1, [r3, #12]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	3b1e      	subs	r3, #30
 8003322:	2207      	movs	r2, #7
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43da      	mvns	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	400a      	ands	r2, r1
 8003330:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68d9      	ldr	r1, [r3, #12]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	b29b      	uxth	r3, r3
 8003342:	4618      	mov	r0, r3
 8003344:	4603      	mov	r3, r0
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4403      	add	r3, r0
 800334a:	3b1e      	subs	r3, #30
 800334c:	409a      	lsls	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	e022      	b.n	800339e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6919      	ldr	r1, [r3, #16]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	2207      	movs	r2, #7
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43da      	mvns	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	400a      	ands	r2, r1
 800337a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6919      	ldr	r1, [r3, #16]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	4618      	mov	r0, r3
 800338e:	4603      	mov	r3, r0
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	4403      	add	r3, r0
 8003394:	409a      	lsls	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d824      	bhi.n	80033f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	3b05      	subs	r3, #5
 80033b8:	221f      	movs	r2, #31
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43da      	mvns	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	400a      	ands	r2, r1
 80033c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	4618      	mov	r0, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	3b05      	subs	r3, #5
 80033e2:	fa00 f203 	lsl.w	r2, r0, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	635a      	str	r2, [r3, #52]	; 0x34
 80033ee:	e04c      	b.n	800348a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b0c      	cmp	r3, #12
 80033f6:	d824      	bhi.n	8003442 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	3b23      	subs	r3, #35	; 0x23
 800340a:	221f      	movs	r2, #31
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43da      	mvns	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	400a      	ands	r2, r1
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	b29b      	uxth	r3, r3
 8003426:	4618      	mov	r0, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	3b23      	subs	r3, #35	; 0x23
 8003434:	fa00 f203 	lsl.w	r2, r0, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
 8003440:	e023      	b.n	800348a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	3b41      	subs	r3, #65	; 0x41
 8003454:	221f      	movs	r2, #31
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43da      	mvns	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	400a      	ands	r2, r1
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	4618      	mov	r0, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	3b41      	subs	r3, #65	; 0x41
 800347e:	fa00 f203 	lsl.w	r2, r0, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a20      	ldr	r2, [pc, #128]	; (8003510 <HAL_ADC_ConfigChannel+0x230>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d109      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x1c8>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b12      	cmp	r3, #18
 800349a:	d105      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_ADC_ConfigChannel+0x234>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <HAL_ADC_ConfigChannel+0x234>)
 80034a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034a6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a18      	ldr	r2, [pc, #96]	; (8003510 <HAL_ADC_ConfigChannel+0x230>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d123      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x21a>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d003      	beq.n	80034c2 <HAL_ADC_ConfigChannel+0x1e2>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b11      	cmp	r3, #17
 80034c0:	d11b      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <HAL_ADC_ConfigChannel+0x234>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4a13      	ldr	r2, [pc, #76]	; (8003514 <HAL_ADC_ConfigChannel+0x234>)
 80034c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034cc:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b10      	cmp	r3, #16
 80034d4:	d111      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_ADC_ConfigChannel+0x238>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a10      	ldr	r2, [pc, #64]	; (800351c <HAL_ADC_ConfigChannel+0x23c>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	0c9a      	lsrs	r2, r3, #18
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80034ec:	e002      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f9      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40012000 	.word	0x40012000
 8003514:	40012300 	.word	0x40012300
 8003518:	20000024 	.word	0x20000024
 800351c:	431bde83 	.word	0x431bde83

08003520 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003528:	4b7e      	ldr	r3, [pc, #504]	; (8003724 <ADC_Init+0x204>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a7d      	ldr	r2, [pc, #500]	; (8003724 <ADC_Init+0x204>)
 800352e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003532:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003534:	4b7b      	ldr	r3, [pc, #492]	; (8003724 <ADC_Init+0x204>)
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4979      	ldr	r1, [pc, #484]	; (8003724 <ADC_Init+0x204>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	021a      	lsls	r2, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003596:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6899      	ldr	r1, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	4a5e      	ldr	r2, [pc, #376]	; (8003728 <ADC_Init+0x208>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d022      	beq.n	80035fa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6899      	ldr	r1, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6899      	ldr	r1, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	e00f      	b.n	800361a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003618:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0202 	bic.w	r2, r2, #2
 8003628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6899      	ldr	r1, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7e1b      	ldrb	r3, [r3, #24]
 8003634:	005a      	lsls	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d027      	beq.n	8003698 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003656:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003666:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	3b01      	subs	r3, #1
 800366e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003672:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	fa92 f2a2 	rbit	r2, r2
 800367a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	fab2 f282 	clz	r2, r2
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	fa03 f102 	lsl.w	r1, r3, r2
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	e007      	b.n	80036a8 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	051a      	lsls	r2, r3, #20
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6899      	ldr	r1, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ea:	025a      	lsls	r2, r3, #9
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6899      	ldr	r1, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	029a      	lsls	r2, r3, #10
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40012300 	.word	0x40012300
 8003728:	0f000001 	.word	0x0f000001

0800372c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
	...

08003740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <__NVIC_SetPriorityGrouping+0x44>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800375c:	4013      	ands	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800376c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003772:	4a04      	ldr	r2, [pc, #16]	; (8003784 <__NVIC_SetPriorityGrouping+0x44>)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	60d3      	str	r3, [r2, #12]
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <__NVIC_GetPriorityGrouping+0x18>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	f003 0307 	and.w	r3, r3, #7
}
 8003796:	4618      	mov	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	db0b      	blt.n	80037ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	f003 021f 	and.w	r2, r3, #31
 80037bc:	4906      	ldr	r1, [pc, #24]	; (80037d8 <__NVIC_EnableIRQ+0x34>)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	2001      	movs	r0, #1
 80037c6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	e000e100 	.word	0xe000e100

080037dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	6039      	str	r1, [r7, #0]
 80037e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	db0a      	blt.n	8003806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	490c      	ldr	r1, [pc, #48]	; (8003828 <__NVIC_SetPriority+0x4c>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	440b      	add	r3, r1
 8003800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003804:	e00a      	b.n	800381c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4908      	ldr	r1, [pc, #32]	; (800382c <__NVIC_SetPriority+0x50>)
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	3b04      	subs	r3, #4
 8003814:	0112      	lsls	r2, r2, #4
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	440b      	add	r3, r1
 800381a:	761a      	strb	r2, [r3, #24]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000e100 	.word	0xe000e100
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f1c3 0307 	rsb	r3, r3, #7
 800384a:	2b04      	cmp	r3, #4
 800384c:	bf28      	it	cs
 800384e:	2304      	movcs	r3, #4
 8003850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3304      	adds	r3, #4
 8003856:	2b06      	cmp	r3, #6
 8003858:	d902      	bls.n	8003860 <NVIC_EncodePriority+0x30>
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3b03      	subs	r3, #3
 800385e:	e000      	b.n	8003862 <NVIC_EncodePriority+0x32>
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	f04f 32ff 	mov.w	r2, #4294967295
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43da      	mvns	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	401a      	ands	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003878:	f04f 31ff 	mov.w	r1, #4294967295
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	fa01 f303 	lsl.w	r3, r1, r3
 8003882:	43d9      	mvns	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003888:	4313      	orrs	r3, r2
         );
}
 800388a:	4618      	mov	r0, r3
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff4f 	bl	8003740 <__NVIC_SetPriorityGrouping>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4603      	mov	r3, r0
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038bc:	f7ff ff64 	bl	8003788 <__NVIC_GetPriorityGrouping>
 80038c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	6978      	ldr	r0, [r7, #20]
 80038c8:	f7ff ffb2 	bl	8003830 <NVIC_EncodePriority>
 80038cc:	4602      	mov	r2, r0
 80038ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ff81 	bl	80037dc <__NVIC_SetPriority>
}
 80038da:	bf00      	nop
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	4603      	mov	r3, r0
 80038ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff57 	bl	80037a4 <__NVIC_EnableIRQ>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800390e:	e16f      	b.n	8003bf0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2101      	movs	r1, #1
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8161 	beq.w	8003bea <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d005      	beq.n	8003940 <HAL_GPIO_Init+0x40>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d130      	bne.n	80039a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	2203      	movs	r2, #3
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003976:	2201      	movs	r2, #1
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	f003 0201 	and.w	r2, r3, #1
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d017      	beq.n	80039de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d123      	bne.n	8003a32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	08da      	lsrs	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3208      	adds	r2, #8
 80039f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	220f      	movs	r2, #15
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	08da      	lsrs	r2, r3, #3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3208      	adds	r2, #8
 8003a2c:	6939      	ldr	r1, [r7, #16]
 8003a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0203 	and.w	r2, r3, #3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80bb 	beq.w	8003bea <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a74:	2300      	movs	r3, #0
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	4b64      	ldr	r3, [pc, #400]	; (8003c0c <HAL_GPIO_Init+0x30c>)
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	4a63      	ldr	r2, [pc, #396]	; (8003c0c <HAL_GPIO_Init+0x30c>)
 8003a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a82:	6453      	str	r3, [r2, #68]	; 0x44
 8003a84:	4b61      	ldr	r3, [pc, #388]	; (8003c0c <HAL_GPIO_Init+0x30c>)
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a90:	4a5f      	ldr	r2, [pc, #380]	; (8003c10 <HAL_GPIO_Init+0x310>)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	3302      	adds	r3, #2
 8003a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	220f      	movs	r2, #15
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a57      	ldr	r2, [pc, #348]	; (8003c14 <HAL_GPIO_Init+0x314>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d031      	beq.n	8003b20 <HAL_GPIO_Init+0x220>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a56      	ldr	r2, [pc, #344]	; (8003c18 <HAL_GPIO_Init+0x318>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d02b      	beq.n	8003b1c <HAL_GPIO_Init+0x21c>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a55      	ldr	r2, [pc, #340]	; (8003c1c <HAL_GPIO_Init+0x31c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d025      	beq.n	8003b18 <HAL_GPIO_Init+0x218>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a54      	ldr	r2, [pc, #336]	; (8003c20 <HAL_GPIO_Init+0x320>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d01f      	beq.n	8003b14 <HAL_GPIO_Init+0x214>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a53      	ldr	r2, [pc, #332]	; (8003c24 <HAL_GPIO_Init+0x324>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d019      	beq.n	8003b10 <HAL_GPIO_Init+0x210>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a52      	ldr	r2, [pc, #328]	; (8003c28 <HAL_GPIO_Init+0x328>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d013      	beq.n	8003b0c <HAL_GPIO_Init+0x20c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a51      	ldr	r2, [pc, #324]	; (8003c2c <HAL_GPIO_Init+0x32c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00d      	beq.n	8003b08 <HAL_GPIO_Init+0x208>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a50      	ldr	r2, [pc, #320]	; (8003c30 <HAL_GPIO_Init+0x330>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d007      	beq.n	8003b04 <HAL_GPIO_Init+0x204>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a4f      	ldr	r2, [pc, #316]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d101      	bne.n	8003b00 <HAL_GPIO_Init+0x200>
 8003afc:	2308      	movs	r3, #8
 8003afe:	e010      	b.n	8003b22 <HAL_GPIO_Init+0x222>
 8003b00:	2309      	movs	r3, #9
 8003b02:	e00e      	b.n	8003b22 <HAL_GPIO_Init+0x222>
 8003b04:	2307      	movs	r3, #7
 8003b06:	e00c      	b.n	8003b22 <HAL_GPIO_Init+0x222>
 8003b08:	2306      	movs	r3, #6
 8003b0a:	e00a      	b.n	8003b22 <HAL_GPIO_Init+0x222>
 8003b0c:	2305      	movs	r3, #5
 8003b0e:	e008      	b.n	8003b22 <HAL_GPIO_Init+0x222>
 8003b10:	2304      	movs	r3, #4
 8003b12:	e006      	b.n	8003b22 <HAL_GPIO_Init+0x222>
 8003b14:	2303      	movs	r3, #3
 8003b16:	e004      	b.n	8003b22 <HAL_GPIO_Init+0x222>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e002      	b.n	8003b22 <HAL_GPIO_Init+0x222>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <HAL_GPIO_Init+0x222>
 8003b20:	2300      	movs	r3, #0
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	f002 0203 	and.w	r2, r2, #3
 8003b28:	0092      	lsls	r2, r2, #2
 8003b2a:	4093      	lsls	r3, r2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b34:	4936      	ldr	r1, [pc, #216]	; (8003c10 <HAL_GPIO_Init+0x310>)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b42:	4b3d      	ldr	r3, [pc, #244]	; (8003c38 <HAL_GPIO_Init+0x338>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b66:	4a34      	ldr	r2, [pc, #208]	; (8003c38 <HAL_GPIO_Init+0x338>)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b6c:	4b32      	ldr	r3, [pc, #200]	; (8003c38 <HAL_GPIO_Init+0x338>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b90:	4a29      	ldr	r2, [pc, #164]	; (8003c38 <HAL_GPIO_Init+0x338>)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b96:	4b28      	ldr	r3, [pc, #160]	; (8003c38 <HAL_GPIO_Init+0x338>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003bba:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <HAL_GPIO_Init+0x338>)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_GPIO_Init+0x338>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003be4:	4a14      	ldr	r2, [pc, #80]	; (8003c38 <HAL_GPIO_Init+0x338>)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	3301      	adds	r3, #1
 8003bee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f47f ae88 	bne.w	8003910 <HAL_GPIO_Init+0x10>
  }
}
 8003c00:	bf00      	nop
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40013800 	.word	0x40013800
 8003c14:	40020000 	.word	0x40020000
 8003c18:	40020400 	.word	0x40020400
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40020c00 	.word	0x40020c00
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40021400 	.word	0x40021400
 8003c2c:	40021800 	.word	0x40021800
 8003c30:	40021c00 	.word	0x40021c00
 8003c34:	40022000 	.word	0x40022000
 8003c38:	40013c00 	.word	0x40013c00

08003c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	807b      	strh	r3, [r7, #2]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c4c:	787b      	ldrb	r3, [r7, #1]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c58:	e003      	b.n	8003c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c5a:	887b      	ldrh	r3, [r7, #2]
 8003c5c:	041a      	lsls	r2, r3, #16
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	619a      	str	r2, [r3, #24]
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6e:	b08f      	sub	sp, #60	; 0x3c
 8003c70:	af0a      	add	r7, sp, #40	; 0x28
 8003c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e054      	b.n	8003d28 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d106      	bne.n	8003c9e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f00c ff13 	bl	8010ac4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f003 ffa3 	bl	8007c08 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	687e      	ldr	r6, [r7, #4]
 8003cca:	466d      	mov	r5, sp
 8003ccc:	f106 0410 	add.w	r4, r6, #16
 8003cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ce0:	1d33      	adds	r3, r6, #4
 8003ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ce4:	6838      	ldr	r0, [r7, #0]
 8003ce6:	f003 ff28 	bl	8007b3a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f003 ff99 	bl	8007c28 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	687e      	ldr	r6, [r7, #4]
 8003cfe:	466d      	mov	r5, sp
 8003d00:	f106 0410 	add.w	r4, r6, #16
 8003d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d10:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d14:	1d33      	adds	r3, r6, #4
 8003d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d18:	6838      	ldr	r0, [r7, #0]
 8003d1a:	f004 f8fb 	bl	8007f14 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d30 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b089      	sub	sp, #36	; 0x24
 8003d34:	af04      	add	r7, sp, #16
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	70fb      	strb	r3, [r7, #3]
 8003d42:	460b      	mov	r3, r1
 8003d44:	70bb      	strb	r3, [r7, #2]
 8003d46:	4613      	mov	r3, r2
 8003d48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_HCD_HC_Init+0x28>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e076      	b.n	8003e46 <HAL_HCD_HC_Init+0x116>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	212c      	movs	r1, #44	; 0x2c
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	333d      	adds	r3, #61	; 0x3d
 8003d6e:	2200      	movs	r2, #0
 8003d70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	212c      	movs	r1, #44	; 0x2c
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3338      	adds	r3, #56	; 0x38
 8003d80:	787a      	ldrb	r2, [r7, #1]
 8003d82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	3340      	adds	r3, #64	; 0x40
 8003d92:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d94:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	3339      	adds	r3, #57	; 0x39
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	212c      	movs	r1, #44	; 0x2c
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	333f      	adds	r3, #63	; 0x3f
 8003db6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003dba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	78ba      	ldrb	r2, [r7, #2]
 8003dc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dc4:	b2d0      	uxtb	r0, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	212c      	movs	r1, #44	; 0x2c
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	333a      	adds	r3, #58	; 0x3a
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003dd6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	da09      	bge.n	8003df2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	212c      	movs	r1, #44	; 0x2c
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	4413      	add	r3, r2
 8003dea:	333b      	adds	r3, #59	; 0x3b
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	e008      	b.n	8003e04 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	212c      	movs	r1, #44	; 0x2c
 8003df8:	fb01 f303 	mul.w	r3, r1, r3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	333b      	adds	r3, #59	; 0x3b
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	333c      	adds	r3, #60	; 0x3c
 8003e12:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003e16:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	787c      	ldrb	r4, [r7, #1]
 8003e1e:	78ba      	ldrb	r2, [r7, #2]
 8003e20:	78f9      	ldrb	r1, [r7, #3]
 8003e22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e24:	9302      	str	r3, [sp, #8]
 8003e26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	4623      	mov	r3, r4
 8003e34:	f004 f9e4 	bl	8008200 <USB_HC_Init>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd90      	pop	{r4, r7, pc}

08003e4e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_HCD_HC_Halt+0x1e>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e00f      	b.n	8003e8c <HAL_HCD_HC_Halt+0x3e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f004 fc1f 	bl	80086c0 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	70fb      	strb	r3, [r7, #3]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	70bb      	strb	r3, [r7, #2]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	333b      	adds	r3, #59	; 0x3b
 8003ebc:	78ba      	ldrb	r2, [r7, #2]
 8003ebe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	212c      	movs	r1, #44	; 0x2c
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	333f      	adds	r3, #63	; 0x3f
 8003ece:	787a      	ldrb	r2, [r7, #1]
 8003ed0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003ed2:	7c3b      	ldrb	r3, [r7, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d112      	bne.n	8003efe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3342      	adds	r3, #66	; 0x42
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	212c      	movs	r1, #44	; 0x2c
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	333d      	adds	r3, #61	; 0x3d
 8003ef8:	7f3a      	ldrb	r2, [r7, #28]
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	e008      	b.n	8003f10 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	212c      	movs	r1, #44	; 0x2c
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	4413      	add	r3, r2
 8003f0a:	3342      	adds	r3, #66	; 0x42
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003f10:	787b      	ldrb	r3, [r7, #1]
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	f200 80c6 	bhi.w	80040a4 <HAL_HCD_HC_SubmitRequest+0x210>
 8003f18:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1e:	bf00      	nop
 8003f20:	08003f31 	.word	0x08003f31
 8003f24:	08004091 	.word	0x08004091
 8003f28:	08003f95 	.word	0x08003f95
 8003f2c:	08004013 	.word	0x08004013
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003f30:	7c3b      	ldrb	r3, [r7, #16]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	f040 80b8 	bne.w	80040a8 <HAL_HCD_HC_SubmitRequest+0x214>
 8003f38:	78bb      	ldrb	r3, [r7, #2]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 80b4 	bne.w	80040a8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003f40:	8b3b      	ldrh	r3, [r7, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d108      	bne.n	8003f58 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	212c      	movs	r1, #44	; 0x2c
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	4413      	add	r3, r2
 8003f52:	3355      	adds	r3, #85	; 0x55
 8003f54:	2201      	movs	r2, #1
 8003f56:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	212c      	movs	r1, #44	; 0x2c
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	3355      	adds	r3, #85	; 0x55
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	212c      	movs	r1, #44	; 0x2c
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	4413      	add	r3, r2
 8003f78:	3342      	adds	r3, #66	; 0x42
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003f7e:	e093      	b.n	80040a8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	212c      	movs	r1, #44	; 0x2c
 8003f86:	fb01 f303 	mul.w	r3, r1, r3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3342      	adds	r3, #66	; 0x42
 8003f8e:	2202      	movs	r2, #2
 8003f90:	701a      	strb	r2, [r3, #0]
      break;
 8003f92:	e089      	b.n	80040a8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003f94:	78bb      	ldrb	r3, [r7, #2]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d11d      	bne.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	212c      	movs	r1, #44	; 0x2c
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3355      	adds	r3, #85	; 0x55
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fae:	78fb      	ldrb	r3, [r7, #3]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	212c      	movs	r1, #44	; 0x2c
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	4413      	add	r3, r2
 8003fba:	3342      	adds	r3, #66	; 0x42
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003fc0:	e073      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	212c      	movs	r1, #44	; 0x2c
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	4413      	add	r3, r2
 8003fce:	3342      	adds	r3, #66	; 0x42
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	701a      	strb	r2, [r3, #0]
      break;
 8003fd4:	e069      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	212c      	movs	r1, #44	; 0x2c
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3354      	adds	r3, #84	; 0x54
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	212c      	movs	r1, #44	; 0x2c
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3342      	adds	r3, #66	; 0x42
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
      break;
 8003ffc:	e055      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	212c      	movs	r1, #44	; 0x2c
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	4413      	add	r3, r2
 800400a:	3342      	adds	r3, #66	; 0x42
 800400c:	2202      	movs	r2, #2
 800400e:	701a      	strb	r2, [r3, #0]
      break;
 8004010:	e04b      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004012:	78bb      	ldrb	r3, [r7, #2]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d11d      	bne.n	8004054 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	212c      	movs	r1, #44	; 0x2c
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	3355      	adds	r3, #85	; 0x55
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d109      	bne.n	8004040 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	212c      	movs	r1, #44	; 0x2c
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	4413      	add	r3, r2
 8004038:	3342      	adds	r3, #66	; 0x42
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800403e:	e034      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	212c      	movs	r1, #44	; 0x2c
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	4413      	add	r3, r2
 800404c:	3342      	adds	r3, #66	; 0x42
 800404e:	2202      	movs	r2, #2
 8004050:	701a      	strb	r2, [r3, #0]
      break;
 8004052:	e02a      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	212c      	movs	r1, #44	; 0x2c
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	4413      	add	r3, r2
 8004060:	3354      	adds	r3, #84	; 0x54
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	212c      	movs	r1, #44	; 0x2c
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3342      	adds	r3, #66	; 0x42
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
      break;
 800407a:	e016      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	212c      	movs	r1, #44	; 0x2c
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	4413      	add	r3, r2
 8004088:	3342      	adds	r3, #66	; 0x42
 800408a:	2202      	movs	r2, #2
 800408c:	701a      	strb	r2, [r3, #0]
      break;
 800408e:	e00c      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	3342      	adds	r3, #66	; 0x42
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]
      break;
 80040a2:	e002      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80040a4:	bf00      	nop
 80040a6:	e000      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80040a8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	212c      	movs	r1, #44	; 0x2c
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	4413      	add	r3, r2
 80040b6:	3344      	adds	r3, #68	; 0x44
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	8b3a      	ldrh	r2, [r7, #24]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	202c      	movs	r0, #44	; 0x2c
 80040c4:	fb00 f303 	mul.w	r3, r0, r3
 80040c8:	440b      	add	r3, r1
 80040ca:	334c      	adds	r3, #76	; 0x4c
 80040cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	212c      	movs	r1, #44	; 0x2c
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	4413      	add	r3, r2
 80040da:	3360      	adds	r3, #96	; 0x60
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	212c      	movs	r1, #44	; 0x2c
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	3350      	adds	r3, #80	; 0x50
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	3339      	adds	r3, #57	; 0x39
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	3361      	adds	r3, #97	; 0x61
 8004112:	2200      	movs	r2, #0
 8004114:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	222c      	movs	r2, #44	; 0x2c
 800411e:	fb02 f303 	mul.w	r3, r2, r3
 8004122:	3338      	adds	r3, #56	; 0x38
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	18d1      	adds	r1, r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	f004 f974 	bl	800841c <USB_HC_StartXfer>
 8004134:	4603      	mov	r3, r0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop

08004140 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f003 fe9c 	bl	8007e94 <USB_GetMode>
 800415c:	4603      	mov	r3, r0
 800415e:	2b01      	cmp	r3, #1
 8004160:	f040 80ef 	bne.w	8004342 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f003 fe81 	bl	8007e70 <USB_ReadInterrupts>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80e5 	beq.w	8004340 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f003 fe78 	bl	8007e70 <USB_ReadInterrupts>
 8004180:	4603      	mov	r3, r0
 8004182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800418a:	d104      	bne.n	8004196 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004194:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f003 fe68 	bl	8007e70 <USB_ReadInterrupts>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041aa:	d104      	bne.n	80041b6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f003 fe58 	bl	8007e70 <USB_ReadInterrupts>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041ca:	d104      	bne.n	80041d6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80041d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f003 fe48 	bl	8007e70 <USB_ReadInterrupts>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d103      	bne.n	80041f2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2202      	movs	r2, #2
 80041f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f003 fe3a 	bl	8007e70 <USB_ReadInterrupts>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004206:	d115      	bne.n	8004234 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004210:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d108      	bne.n	8004234 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f00c fccc 	bl	8010bc0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2101      	movs	r1, #1
 800422e:	4618      	mov	r0, r3
 8004230:	f003 ff24 	bl	800807c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f003 fe19 	bl	8007e70 <USB_ReadInterrupts>
 800423e:	4603      	mov	r3, r0
 8004240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004248:	d102      	bne.n	8004250 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f001 fa01 	bl	8005652 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f003 fe0b 	bl	8007e70 <USB_ReadInterrupts>
 800425a:	4603      	mov	r3, r0
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b08      	cmp	r3, #8
 8004262:	d106      	bne.n	8004272 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f00c fc8f 	bl	8010b88 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2208      	movs	r2, #8
 8004270:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f003 fdfa 	bl	8007e70 <USB_ReadInterrupts>
 800427c:	4603      	mov	r3, r0
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b10      	cmp	r3, #16
 8004284:	d101      	bne.n	800428a <HAL_HCD_IRQHandler+0x14a>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_HCD_IRQHandler+0x14c>
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d012      	beq.n	80042b6 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0210 	bic.w	r2, r2, #16
 800429e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f001 f904 	bl	80054ae <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699a      	ldr	r2, [r3, #24]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0210 	orr.w	r2, r2, #16
 80042b4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f003 fdd8 	bl	8007e70 <USB_ReadInterrupts>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042ca:	d13a      	bne.n	8004342 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f004 f9e5 	bl	80086a0 <USB_HC_ReadInterrupt>
 80042d6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	e025      	b.n	800432a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d018      	beq.n	8004324 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004308:	d106      	bne.n	8004318 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	4619      	mov	r1, r3
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f8a9 	bl	8004468 <HCD_HC_IN_IRQHandler>
 8004316:	e005      	b.n	8004324 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	4619      	mov	r1, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fcc4 	bl	8004cac <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	3301      	adds	r3, #1
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	429a      	cmp	r2, r3
 8004332:	d3d4      	bcc.n	80042de <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800433c:	615a      	str	r2, [r3, #20]
 800433e:	e000      	b.n	8004342 <HAL_HCD_IRQHandler+0x202>
      return;
 8004340:	bf00      	nop
    }
  }
}
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_HCD_Start+0x16>
 800435a:	2302      	movs	r3, #2
 800435c:	e013      	b.n	8004386 <HAL_HCD_Start+0x3e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2101      	movs	r1, #1
 800436c:	4618      	mov	r0, r3
 800436e:	f003 fee8 	bl	8008142 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f003 fc36 	bl	8007be8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_HCD_Stop+0x16>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e00d      	b.n	80043c0 <HAL_HCD_Stop+0x32>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f004 fadb 	bl	800896c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f003 fe8a 	bl	80080ee <USB_ResetPort>
 80043da:	4603      	mov	r3, r0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	212c      	movs	r1, #44	; 0x2c
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	4413      	add	r3, r2
 80043fc:	3360      	adds	r3, #96	; 0x60
 80043fe:	781b      	ldrb	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr

0800440a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	212c      	movs	r1, #44	; 0x2c
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	4413      	add	r3, r2
 8004422:	3350      	adds	r3, #80	; 0x50
 8004424:	681b      	ldr	r3, [r3, #0]
}
 8004426:	4618      	mov	r0, r3
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f003 fece 	bl	80081de <USB_GetCurrentFrame>
 8004442:	4603      	mov	r3, r0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f003 feaa 	bl	80081b2 <USB_GetHostSpeed>
 800445e:	4603      	mov	r3, r0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b04      	cmp	r3, #4
 8004496:	d119      	bne.n	80044cc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a4:	461a      	mov	r2, r3
 80044a6:	2304      	movs	r3, #4
 80044a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	0151      	lsls	r1, r2, #5
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	440a      	add	r2, r1
 80044c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044c4:	f043 0302 	orr.w	r3, r3, #2
 80044c8:	60d3      	str	r3, [r2, #12]
 80044ca:	e101      	b.n	80046d0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e2:	d12b      	bne.n	800453c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f0:	461a      	mov	r2, r3
 80044f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	212c      	movs	r1, #44	; 0x2c
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	3361      	adds	r3, #97	; 0x61
 8004506:	2207      	movs	r2, #7
 8004508:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4413      	add	r3, r2
 8004512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	0151      	lsls	r1, r2, #5
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	440a      	add	r2, r1
 8004520:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004524:	f043 0302 	orr.w	r3, r3, #2
 8004528:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	4611      	mov	r1, r2
 8004534:	4618      	mov	r0, r3
 8004536:	f004 f8c3 	bl	80086c0 <USB_HC_Halt>
 800453a:	e0c9      	b.n	80046d0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4413      	add	r3, r2
 8004544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b20      	cmp	r3, #32
 8004550:	d109      	bne.n	8004566 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4413      	add	r3, r2
 800455a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455e:	461a      	mov	r2, r3
 8004560:	2320      	movs	r3, #32
 8004562:	6093      	str	r3, [r2, #8]
 8004564:	e0b4      	b.n	80046d0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4413      	add	r3, r2
 800456e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b08      	cmp	r3, #8
 800457a:	d133      	bne.n	80045e4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	0151      	lsls	r1, r2, #5
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	440a      	add	r2, r1
 8004592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004596:	f043 0302 	orr.w	r3, r3, #2
 800459a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	3361      	adds	r3, #97	; 0x61
 80045aa:	2205      	movs	r2, #5
 80045ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ba:	461a      	mov	r2, r3
 80045bc:	2310      	movs	r3, #16
 80045be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045cc:	461a      	mov	r2, r3
 80045ce:	2308      	movs	r3, #8
 80045d0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f004 f86f 	bl	80086c0 <USB_HC_Halt>
 80045e2:	e075      	b.n	80046d0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fa:	d134      	bne.n	8004666 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4413      	add	r3, r2
 8004604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	440a      	add	r2, r1
 8004612:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004616:	f043 0302 	orr.w	r3, r3, #2
 800461a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	212c      	movs	r1, #44	; 0x2c
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	3361      	adds	r3, #97	; 0x61
 800462a:	2208      	movs	r2, #8
 800462c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4413      	add	r3, r2
 8004636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463a:	461a      	mov	r2, r3
 800463c:	2310      	movs	r3, #16
 800463e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464c:	461a      	mov	r2, r3
 800464e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004652:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	4611      	mov	r1, r2
 800465e:	4618      	mov	r0, r3
 8004660:	f004 f82e 	bl	80086c0 <USB_HC_Halt>
 8004664:	e034      	b.n	80046d0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004678:	2b80      	cmp	r3, #128	; 0x80
 800467a:	d129      	bne.n	80046d0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4413      	add	r3, r2
 8004684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	440a      	add	r2, r1
 8004692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004696:	f043 0302 	orr.w	r3, r3, #2
 800469a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	212c      	movs	r1, #44	; 0x2c
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	3361      	adds	r3, #97	; 0x61
 80046aa:	2206      	movs	r2, #6
 80046ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	4611      	mov	r1, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f004 f801 	bl	80086c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ca:	461a      	mov	r2, r3
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e6:	d122      	bne.n	800472e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004702:	f043 0302 	orr.w	r3, r3, #2
 8004706:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f003 ffd4 	bl	80086c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4413      	add	r3, r2
 8004720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004724:	461a      	mov	r2, r3
 8004726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800472a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800472c:	e2ba      	b.n	8004ca4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4413      	add	r3, r2
 8004736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b01      	cmp	r3, #1
 8004742:	f040 811b 	bne.w	800497c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d019      	beq.n	8004782 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	212c      	movs	r1, #44	; 0x2c
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	4413      	add	r3, r2
 800475a:	3348      	adds	r3, #72	; 0x48
 800475c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	0159      	lsls	r1, r3, #5
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	440b      	add	r3, r1
 8004766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004770:	1ad2      	subs	r2, r2, r3
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	202c      	movs	r0, #44	; 0x2c
 8004778:	fb00 f303 	mul.w	r3, r0, r3
 800477c:	440b      	add	r3, r1
 800477e:	3350      	adds	r3, #80	; 0x50
 8004780:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	212c      	movs	r1, #44	; 0x2c
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	4413      	add	r3, r2
 800478e:	3361      	adds	r3, #97	; 0x61
 8004790:	2201      	movs	r2, #1
 8004792:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	212c      	movs	r1, #44	; 0x2c
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	4413      	add	r3, r2
 80047a0:	335c      	adds	r3, #92	; 0x5c
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b2:	461a      	mov	r2, r3
 80047b4:	2301      	movs	r3, #1
 80047b6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	212c      	movs	r1, #44	; 0x2c
 80047be:	fb01 f303 	mul.w	r3, r1, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	333f      	adds	r3, #63	; 0x3f
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	212c      	movs	r1, #44	; 0x2c
 80047d2:	fb01 f303 	mul.w	r3, r1, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	333f      	adds	r3, #63	; 0x3f
 80047da:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d121      	bne.n	8004824 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	0151      	lsls	r1, r2, #5
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	440a      	add	r2, r1
 80047f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047fa:	f043 0302 	orr.w	r3, r3, #2
 80047fe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f003 ff58 	bl	80086c0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481c:	461a      	mov	r2, r3
 800481e:	2310      	movs	r3, #16
 8004820:	6093      	str	r3, [r2, #8]
 8004822:	e066      	b.n	80048f2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	212c      	movs	r1, #44	; 0x2c
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	4413      	add	r3, r2
 8004830:	333f      	adds	r3, #63	; 0x3f
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d127      	bne.n	8004888 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	0151      	lsls	r1, r2, #5
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	440a      	add	r2, r1
 800484e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004852:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004856:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	212c      	movs	r1, #44	; 0x2c
 800485e:	fb01 f303 	mul.w	r3, r1, r3
 8004862:	4413      	add	r3, r2
 8004864:	3360      	adds	r3, #96	; 0x60
 8004866:	2201      	movs	r2, #1
 8004868:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	b2d9      	uxtb	r1, r3
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	202c      	movs	r0, #44	; 0x2c
 8004874:	fb00 f303 	mul.w	r3, r0, r3
 8004878:	4413      	add	r3, r2
 800487a:	3360      	adds	r3, #96	; 0x60
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f00c f9ab 	bl	8010bdc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004886:	e034      	b.n	80048f2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	333f      	adds	r3, #63	; 0x3f
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d12a      	bne.n	80048f2 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	212c      	movs	r1, #44	; 0x2c
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	3360      	adds	r3, #96	; 0x60
 80048aa:	2201      	movs	r2, #1
 80048ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	212c      	movs	r1, #44	; 0x2c
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	3354      	adds	r3, #84	; 0x54
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	f083 0301 	eor.w	r3, r3, #1
 80048c2:	b2d8      	uxtb	r0, r3
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	212c      	movs	r1, #44	; 0x2c
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	4413      	add	r3, r2
 80048d0:	3354      	adds	r3, #84	; 0x54
 80048d2:	4602      	mov	r2, r0
 80048d4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	b2d9      	uxtb	r1, r3
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	202c      	movs	r0, #44	; 0x2c
 80048e0:	fb00 f303 	mul.w	r3, r0, r3
 80048e4:	4413      	add	r3, r2
 80048e6:	3360      	adds	r3, #96	; 0x60
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f00c f975 	bl	8010bdc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d12b      	bne.n	8004952 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	212c      	movs	r1, #44	; 0x2c
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	4413      	add	r3, r2
 8004906:	3348      	adds	r3, #72	; 0x48
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	202c      	movs	r0, #44	; 0x2c
 8004910:	fb00 f202 	mul.w	r2, r0, r2
 8004914:	440a      	add	r2, r1
 8004916:	3240      	adds	r2, #64	; 0x40
 8004918:	8812      	ldrh	r2, [r2, #0]
 800491a:	fbb3 f3f2 	udiv	r3, r3, r2
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 81be 	beq.w	8004ca4 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	212c      	movs	r1, #44	; 0x2c
 800492e:	fb01 f303 	mul.w	r3, r1, r3
 8004932:	4413      	add	r3, r2
 8004934:	3354      	adds	r3, #84	; 0x54
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	f083 0301 	eor.w	r3, r3, #1
 800493c:	b2d8      	uxtb	r0, r3
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	212c      	movs	r1, #44	; 0x2c
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	4413      	add	r3, r2
 800494a:	3354      	adds	r3, #84	; 0x54
 800494c:	4602      	mov	r2, r0
 800494e:	701a      	strb	r2, [r3, #0]
}
 8004950:	e1a8      	b.n	8004ca4 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	212c      	movs	r1, #44	; 0x2c
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	4413      	add	r3, r2
 800495e:	3354      	adds	r3, #84	; 0x54
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	f083 0301 	eor.w	r3, r3, #1
 8004966:	b2d8      	uxtb	r0, r3
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	212c      	movs	r1, #44	; 0x2c
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	4413      	add	r3, r2
 8004974:	3354      	adds	r3, #84	; 0x54
 8004976:	4602      	mov	r2, r0
 8004978:	701a      	strb	r2, [r3, #0]
}
 800497a:	e193      	b.n	8004ca4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4413      	add	r3, r2
 8004984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	f040 8106 	bne.w	8004ba0 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	4413      	add	r3, r2
 800499c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	0151      	lsls	r1, r2, #5
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	440a      	add	r2, r1
 80049aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ae:	f023 0302 	bic.w	r3, r3, #2
 80049b2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	212c      	movs	r1, #44	; 0x2c
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	4413      	add	r3, r2
 80049c0:	3361      	adds	r3, #97	; 0x61
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d109      	bne.n	80049dc <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	212c      	movs	r1, #44	; 0x2c
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	3360      	adds	r3, #96	; 0x60
 80049d6:	2201      	movs	r2, #1
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	e0c9      	b.n	8004b70 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	212c      	movs	r1, #44	; 0x2c
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	4413      	add	r3, r2
 80049e8:	3361      	adds	r3, #97	; 0x61
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d109      	bne.n	8004a04 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	212c      	movs	r1, #44	; 0x2c
 80049f6:	fb01 f303 	mul.w	r3, r1, r3
 80049fa:	4413      	add	r3, r2
 80049fc:	3360      	adds	r3, #96	; 0x60
 80049fe:	2205      	movs	r2, #5
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	e0b5      	b.n	8004b70 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	212c      	movs	r1, #44	; 0x2c
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	3361      	adds	r3, #97	; 0x61
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b06      	cmp	r3, #6
 8004a16:	d009      	beq.n	8004a2c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	212c      	movs	r1, #44	; 0x2c
 8004a1e:	fb01 f303 	mul.w	r3, r1, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	3361      	adds	r3, #97	; 0x61
 8004a26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d150      	bne.n	8004ace <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	212c      	movs	r1, #44	; 0x2c
 8004a32:	fb01 f303 	mul.w	r3, r1, r3
 8004a36:	4413      	add	r3, r2
 8004a38:	335c      	adds	r3, #92	; 0x5c
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	202c      	movs	r0, #44	; 0x2c
 8004a44:	fb00 f303 	mul.w	r3, r0, r3
 8004a48:	440b      	add	r3, r1
 8004a4a:	335c      	adds	r3, #92	; 0x5c
 8004a4c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	212c      	movs	r1, #44	; 0x2c
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	335c      	adds	r3, #92	; 0x5c
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d912      	bls.n	8004a88 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	335c      	adds	r3, #92	; 0x5c
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	212c      	movs	r1, #44	; 0x2c
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	3360      	adds	r3, #96	; 0x60
 8004a82:	2204      	movs	r2, #4
 8004a84:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a86:	e073      	b.n	8004b70 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	212c      	movs	r1, #44	; 0x2c
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	3360      	adds	r3, #96	; 0x60
 8004a96:	2202      	movs	r2, #2
 8004a98:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ab0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ab8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004acc:	e050      	b.n	8004b70 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	212c      	movs	r1, #44	; 0x2c
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	3361      	adds	r3, #97	; 0x61
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d122      	bne.n	8004b28 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	212c      	movs	r1, #44	; 0x2c
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	3360      	adds	r3, #96	; 0x60
 8004af0:	2202      	movs	r2, #2
 8004af2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b0a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b12:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b20:	461a      	mov	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	e023      	b.n	8004b70 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	212c      	movs	r1, #44	; 0x2c
 8004b2e:	fb01 f303 	mul.w	r3, r1, r3
 8004b32:	4413      	add	r3, r2
 8004b34:	3361      	adds	r3, #97	; 0x61
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b07      	cmp	r3, #7
 8004b3a:	d119      	bne.n	8004b70 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	212c      	movs	r1, #44	; 0x2c
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	4413      	add	r3, r2
 8004b48:	335c      	adds	r3, #92	; 0x5c
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	202c      	movs	r0, #44	; 0x2c
 8004b54:	fb00 f303 	mul.w	r3, r0, r3
 8004b58:	440b      	add	r3, r1
 8004b5a:	335c      	adds	r3, #92	; 0x5c
 8004b5c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	212c      	movs	r1, #44	; 0x2c
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	4413      	add	r3, r2
 8004b6a:	3360      	adds	r3, #96	; 0x60
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2302      	movs	r3, #2
 8004b80:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	b2d9      	uxtb	r1, r3
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	202c      	movs	r0, #44	; 0x2c
 8004b8c:	fb00 f303 	mul.w	r3, r0, r3
 8004b90:	4413      	add	r3, r2
 8004b92:	3360      	adds	r3, #96	; 0x60
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f00c f81f 	bl	8010bdc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b9e:	e081      	b.n	8004ca4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b10      	cmp	r3, #16
 8004bb4:	d176      	bne.n	8004ca4 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	212c      	movs	r1, #44	; 0x2c
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	333f      	adds	r3, #63	; 0x3f
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d121      	bne.n	8004c0e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	212c      	movs	r1, #44	; 0x2c
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	335c      	adds	r3, #92	; 0x5c
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bf6:	f043 0302 	orr.w	r3, r3, #2
 8004bfa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f003 fd5a 	bl	80086c0 <USB_HC_Halt>
 8004c0c:	e041      	b.n	8004c92 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	212c      	movs	r1, #44	; 0x2c
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	333f      	adds	r3, #63	; 0x3f
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	212c      	movs	r1, #44	; 0x2c
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	333f      	adds	r3, #63	; 0x3f
 8004c30:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d12d      	bne.n	8004c92 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	212c      	movs	r1, #44	; 0x2c
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	4413      	add	r3, r2
 8004c42:	335c      	adds	r3, #92	; 0x5c
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d120      	bne.n	8004c92 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	212c      	movs	r1, #44	; 0x2c
 8004c56:	fb01 f303 	mul.w	r3, r1, r3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3361      	adds	r3, #97	; 0x61
 8004c5e:	2203      	movs	r2, #3
 8004c60:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c7c:	f043 0302 	orr.w	r3, r3, #2
 8004c80:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f003 fd17 	bl	80086c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	6093      	str	r3, [r2, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d119      	bne.n	8004d10 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2304      	movs	r3, #4
 8004cec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d08:	f043 0302 	orr.w	r3, r3, #2
 8004d0c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004d0e:	e3ca      	b.n	80054a6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d13e      	bne.n	8004da4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d32:	461a      	mov	r2, r3
 8004d34:	2320      	movs	r3, #32
 8004d36:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	212c      	movs	r1, #44	; 0x2c
 8004d3e:	fb01 f303 	mul.w	r3, r1, r3
 8004d42:	4413      	add	r3, r2
 8004d44:	333d      	adds	r3, #61	; 0x3d
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	f040 83ac 	bne.w	80054a6 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	212c      	movs	r1, #44	; 0x2c
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	4413      	add	r3, r2
 8004d5a:	333d      	adds	r3, #61	; 0x3d
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	212c      	movs	r1, #44	; 0x2c
 8004d66:	fb01 f303 	mul.w	r3, r1, r3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3360      	adds	r3, #96	; 0x60
 8004d6e:	2202      	movs	r2, #2
 8004d70:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d8c:	f043 0302 	orr.w	r3, r3, #2
 8004d90:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f003 fc8f 	bl	80086c0 <USB_HC_Halt>
}
 8004da2:	e380      	b.n	80054a6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dba:	d122      	bne.n	8004e02 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	0151      	lsls	r1, r2, #5
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	440a      	add	r2, r1
 8004dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd6:	f043 0302 	orr.w	r3, r3, #2
 8004dda:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	4611      	mov	r1, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f003 fc6a 	bl	80086c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df8:	461a      	mov	r2, r3
 8004dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dfe:	6093      	str	r3, [r2, #8]
}
 8004e00:	e351      	b.n	80054a6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d150      	bne.n	8004eba <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	212c      	movs	r1, #44	; 0x2c
 8004e1e:	fb01 f303 	mul.w	r3, r1, r3
 8004e22:	4413      	add	r3, r2
 8004e24:	335c      	adds	r3, #92	; 0x5c
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d111      	bne.n	8004e64 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	212c      	movs	r1, #44	; 0x2c
 8004e46:	fb01 f303 	mul.w	r3, r1, r3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	333d      	adds	r3, #61	; 0x3d
 8004e4e:	2201      	movs	r2, #1
 8004e50:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2340      	movs	r3, #64	; 0x40
 8004e62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e7e:	f043 0302 	orr.w	r3, r3, #2
 8004e82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f003 fc16 	bl	80086c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	212c      	movs	r1, #44	; 0x2c
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3361      	adds	r3, #97	; 0x61
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	701a      	strb	r2, [r3, #0]
}
 8004eb8:	e2f5      	b.n	80054a6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b40      	cmp	r3, #64	; 0x40
 8004ece:	d13c      	bne.n	8004f4a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	212c      	movs	r1, #44	; 0x2c
 8004ed6:	fb01 f303 	mul.w	r3, r1, r3
 8004eda:	4413      	add	r3, r2
 8004edc:	3361      	adds	r3, #97	; 0x61
 8004ede:	2204      	movs	r2, #4
 8004ee0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	212c      	movs	r1, #44	; 0x2c
 8004ee8:	fb01 f303 	mul.w	r3, r1, r3
 8004eec:	4413      	add	r3, r2
 8004eee:	333d      	adds	r3, #61	; 0x3d
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	212c      	movs	r1, #44	; 0x2c
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	4413      	add	r3, r2
 8004f00:	335c      	adds	r3, #92	; 0x5c
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f003 fbc5 	bl	80086c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f42:	461a      	mov	r2, r3
 8004f44:	2340      	movs	r3, #64	; 0x40
 8004f46:	6093      	str	r3, [r2, #8]
}
 8004f48:	e2ad      	b.n	80054a6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d12a      	bne.n	8004fb6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	2308      	movs	r3, #8
 8004f70:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f8c:	f043 0302 	orr.w	r3, r3, #2
 8004f90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f003 fb8f 	bl	80086c0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	212c      	movs	r1, #44	; 0x2c
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	4413      	add	r3, r2
 8004fae:	3361      	adds	r3, #97	; 0x61
 8004fb0:	2205      	movs	r2, #5
 8004fb2:	701a      	strb	r2, [r3, #0]
}
 8004fb4:	e277      	b.n	80054a6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	2b10      	cmp	r3, #16
 8004fca:	d150      	bne.n	800506e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	212c      	movs	r1, #44	; 0x2c
 8004fd2:	fb01 f303 	mul.w	r3, r1, r3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	335c      	adds	r3, #92	; 0x5c
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	212c      	movs	r1, #44	; 0x2c
 8004fe4:	fb01 f303 	mul.w	r3, r1, r3
 8004fe8:	4413      	add	r3, r2
 8004fea:	3361      	adds	r3, #97	; 0x61
 8004fec:	2203      	movs	r2, #3
 8004fee:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	212c      	movs	r1, #44	; 0x2c
 8004ff6:	fb01 f303 	mul.w	r3, r1, r3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	333d      	adds	r3, #61	; 0x3d
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d112      	bne.n	800502a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	212c      	movs	r1, #44	; 0x2c
 800500a:	fb01 f303 	mul.w	r3, r1, r3
 800500e:	4413      	add	r3, r2
 8005010:	333c      	adds	r3, #60	; 0x3c
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	212c      	movs	r1, #44	; 0x2c
 800501e:	fb01 f303 	mul.w	r3, r1, r3
 8005022:	4413      	add	r3, r2
 8005024:	333d      	adds	r3, #61	; 0x3d
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	4413      	add	r3, r2
 8005032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	0151      	lsls	r1, r2, #5
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	440a      	add	r2, r1
 8005040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005044:	f043 0302 	orr.w	r3, r3, #2
 8005048:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	4611      	mov	r1, r2
 8005054:	4618      	mov	r0, r3
 8005056:	f003 fb33 	bl	80086c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	4413      	add	r3, r2
 8005062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005066:	461a      	mov	r2, r3
 8005068:	2310      	movs	r3, #16
 800506a:	6093      	str	r3, [r2, #8]
}
 800506c:	e21b      	b.n	80054a6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005080:	2b80      	cmp	r3, #128	; 0x80
 8005082:	d174      	bne.n	800516e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d121      	bne.n	80050d0 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	212c      	movs	r1, #44	; 0x2c
 8005092:	fb01 f303 	mul.w	r3, r1, r3
 8005096:	4413      	add	r3, r2
 8005098:	3361      	adds	r3, #97	; 0x61
 800509a:	2206      	movs	r2, #6
 800509c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	0151      	lsls	r1, r2, #5
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	440a      	add	r2, r1
 80050b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b8:	f043 0302 	orr.w	r3, r3, #2
 80050bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	4611      	mov	r1, r2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f003 faf9 	bl	80086c0 <USB_HC_Halt>
 80050ce:	e044      	b.n	800515a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	212c      	movs	r1, #44	; 0x2c
 80050d6:	fb01 f303 	mul.w	r3, r1, r3
 80050da:	4413      	add	r3, r2
 80050dc:	335c      	adds	r3, #92	; 0x5c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	202c      	movs	r0, #44	; 0x2c
 80050e8:	fb00 f303 	mul.w	r3, r0, r3
 80050ec:	440b      	add	r3, r1
 80050ee:	335c      	adds	r3, #92	; 0x5c
 80050f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	212c      	movs	r1, #44	; 0x2c
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	4413      	add	r3, r2
 80050fe:	335c      	adds	r3, #92	; 0x5c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d920      	bls.n	8005148 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	212c      	movs	r1, #44	; 0x2c
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	4413      	add	r3, r2
 8005112:	335c      	adds	r3, #92	; 0x5c
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	212c      	movs	r1, #44	; 0x2c
 800511e:	fb01 f303 	mul.w	r3, r1, r3
 8005122:	4413      	add	r3, r2
 8005124:	3360      	adds	r3, #96	; 0x60
 8005126:	2204      	movs	r2, #4
 8005128:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	b2d9      	uxtb	r1, r3
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	202c      	movs	r0, #44	; 0x2c
 8005134:	fb00 f303 	mul.w	r3, r0, r3
 8005138:	4413      	add	r3, r2
 800513a:	3360      	adds	r3, #96	; 0x60
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f00b fd4b 	bl	8010bdc <HAL_HCD_HC_NotifyURBChange_Callback>
 8005146:	e008      	b.n	800515a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	212c      	movs	r1, #44	; 0x2c
 800514e:	fb01 f303 	mul.w	r3, r1, r3
 8005152:	4413      	add	r3, r2
 8005154:	3360      	adds	r3, #96	; 0x60
 8005156:	2202      	movs	r2, #2
 8005158:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	4413      	add	r3, r2
 8005162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005166:	461a      	mov	r2, r3
 8005168:	2380      	movs	r3, #128	; 0x80
 800516a:	6093      	str	r3, [r2, #8]
}
 800516c:	e19b      	b.n	80054a6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005184:	d134      	bne.n	80051f0 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	440a      	add	r2, r1
 800519c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a0:	f043 0302 	orr.w	r3, r3, #2
 80051a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f003 fa85 	bl	80086c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c2:	461a      	mov	r2, r3
 80051c4:	2310      	movs	r3, #16
 80051c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d4:	461a      	mov	r2, r3
 80051d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	212c      	movs	r1, #44	; 0x2c
 80051e2:	fb01 f303 	mul.w	r3, r1, r3
 80051e6:	4413      	add	r3, r2
 80051e8:	3361      	adds	r3, #97	; 0x61
 80051ea:	2208      	movs	r2, #8
 80051ec:	701a      	strb	r2, [r3, #0]
}
 80051ee:	e15a      	b.n	80054a6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	f040 814f 	bne.w	80054a6 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	4413      	add	r3, r2
 8005210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	440a      	add	r2, r1
 800521e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005222:	f023 0302 	bic.w	r3, r3, #2
 8005226:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	212c      	movs	r1, #44	; 0x2c
 800522e:	fb01 f303 	mul.w	r3, r1, r3
 8005232:	4413      	add	r3, r2
 8005234:	3361      	adds	r3, #97	; 0x61
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d17d      	bne.n	8005338 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	212c      	movs	r1, #44	; 0x2c
 8005242:	fb01 f303 	mul.w	r3, r1, r3
 8005246:	4413      	add	r3, r2
 8005248:	3360      	adds	r3, #96	; 0x60
 800524a:	2201      	movs	r2, #1
 800524c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	212c      	movs	r1, #44	; 0x2c
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	4413      	add	r3, r2
 800525a:	333f      	adds	r3, #63	; 0x3f
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d00a      	beq.n	8005278 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	212c      	movs	r1, #44	; 0x2c
 8005268:	fb01 f303 	mul.w	r3, r1, r3
 800526c:	4413      	add	r3, r2
 800526e:	333f      	adds	r3, #63	; 0x3f
 8005270:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005272:	2b03      	cmp	r3, #3
 8005274:	f040 8100 	bne.w	8005478 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d113      	bne.n	80052a8 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	212c      	movs	r1, #44	; 0x2c
 8005286:	fb01 f303 	mul.w	r3, r1, r3
 800528a:	4413      	add	r3, r2
 800528c:	3355      	adds	r3, #85	; 0x55
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	f083 0301 	eor.w	r3, r3, #1
 8005294:	b2d8      	uxtb	r0, r3
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	212c      	movs	r1, #44	; 0x2c
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	4413      	add	r3, r2
 80052a2:	3355      	adds	r3, #85	; 0x55
 80052a4:	4602      	mov	r2, r0
 80052a6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	f040 80e3 	bne.w	8005478 <HCD_HC_OUT_IRQHandler+0x7cc>
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	212c      	movs	r1, #44	; 0x2c
 80052b8:	fb01 f303 	mul.w	r3, r1, r3
 80052bc:	4413      	add	r3, r2
 80052be:	334c      	adds	r3, #76	; 0x4c
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80d8 	beq.w	8005478 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	212c      	movs	r1, #44	; 0x2c
 80052ce:	fb01 f303 	mul.w	r3, r1, r3
 80052d2:	4413      	add	r3, r2
 80052d4:	334c      	adds	r3, #76	; 0x4c
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	202c      	movs	r0, #44	; 0x2c
 80052de:	fb00 f202 	mul.w	r2, r0, r2
 80052e2:	440a      	add	r2, r1
 80052e4:	3240      	adds	r2, #64	; 0x40
 80052e6:	8812      	ldrh	r2, [r2, #0]
 80052e8:	4413      	add	r3, r2
 80052ea:	3b01      	subs	r3, #1
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	202c      	movs	r0, #44	; 0x2c
 80052f2:	fb00 f202 	mul.w	r2, r0, r2
 80052f6:	440a      	add	r2, r1
 80052f8:	3240      	adds	r2, #64	; 0x40
 80052fa:	8812      	ldrh	r2, [r2, #0]
 80052fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80b5 	beq.w	8005478 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	212c      	movs	r1, #44	; 0x2c
 8005314:	fb01 f303 	mul.w	r3, r1, r3
 8005318:	4413      	add	r3, r2
 800531a:	3355      	adds	r3, #85	; 0x55
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	f083 0301 	eor.w	r3, r3, #1
 8005322:	b2d8      	uxtb	r0, r3
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	212c      	movs	r1, #44	; 0x2c
 800532a:	fb01 f303 	mul.w	r3, r1, r3
 800532e:	4413      	add	r3, r2
 8005330:	3355      	adds	r3, #85	; 0x55
 8005332:	4602      	mov	r2, r0
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	e09f      	b.n	8005478 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	212c      	movs	r1, #44	; 0x2c
 800533e:	fb01 f303 	mul.w	r3, r1, r3
 8005342:	4413      	add	r3, r2
 8005344:	3361      	adds	r3, #97	; 0x61
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b03      	cmp	r3, #3
 800534a:	d109      	bne.n	8005360 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	212c      	movs	r1, #44	; 0x2c
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	4413      	add	r3, r2
 8005358:	3360      	adds	r3, #96	; 0x60
 800535a:	2202      	movs	r2, #2
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	e08b      	b.n	8005478 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	212c      	movs	r1, #44	; 0x2c
 8005366:	fb01 f303 	mul.w	r3, r1, r3
 800536a:	4413      	add	r3, r2
 800536c:	3361      	adds	r3, #97	; 0x61
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b04      	cmp	r3, #4
 8005372:	d109      	bne.n	8005388 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	212c      	movs	r1, #44	; 0x2c
 800537a:	fb01 f303 	mul.w	r3, r1, r3
 800537e:	4413      	add	r3, r2
 8005380:	3360      	adds	r3, #96	; 0x60
 8005382:	2202      	movs	r2, #2
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	e077      	b.n	8005478 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	212c      	movs	r1, #44	; 0x2c
 800538e:	fb01 f303 	mul.w	r3, r1, r3
 8005392:	4413      	add	r3, r2
 8005394:	3361      	adds	r3, #97	; 0x61
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b05      	cmp	r3, #5
 800539a:	d109      	bne.n	80053b0 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	212c      	movs	r1, #44	; 0x2c
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	4413      	add	r3, r2
 80053a8:	3360      	adds	r3, #96	; 0x60
 80053aa:	2205      	movs	r2, #5
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	e063      	b.n	8005478 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	212c      	movs	r1, #44	; 0x2c
 80053b6:	fb01 f303 	mul.w	r3, r1, r3
 80053ba:	4413      	add	r3, r2
 80053bc:	3361      	adds	r3, #97	; 0x61
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b06      	cmp	r3, #6
 80053c2:	d009      	beq.n	80053d8 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	212c      	movs	r1, #44	; 0x2c
 80053ca:	fb01 f303 	mul.w	r3, r1, r3
 80053ce:	4413      	add	r3, r2
 80053d0:	3361      	adds	r3, #97	; 0x61
 80053d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d14f      	bne.n	8005478 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	212c      	movs	r1, #44	; 0x2c
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	4413      	add	r3, r2
 80053e4:	335c      	adds	r3, #92	; 0x5c
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	202c      	movs	r0, #44	; 0x2c
 80053f0:	fb00 f303 	mul.w	r3, r0, r3
 80053f4:	440b      	add	r3, r1
 80053f6:	335c      	adds	r3, #92	; 0x5c
 80053f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	212c      	movs	r1, #44	; 0x2c
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	4413      	add	r3, r2
 8005406:	335c      	adds	r3, #92	; 0x5c
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d912      	bls.n	8005434 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	212c      	movs	r1, #44	; 0x2c
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	4413      	add	r3, r2
 800541a:	335c      	adds	r3, #92	; 0x5c
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	212c      	movs	r1, #44	; 0x2c
 8005426:	fb01 f303 	mul.w	r3, r1, r3
 800542a:	4413      	add	r3, r2
 800542c:	3360      	adds	r3, #96	; 0x60
 800542e:	2204      	movs	r2, #4
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	e021      	b.n	8005478 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	212c      	movs	r1, #44	; 0x2c
 800543a:	fb01 f303 	mul.w	r3, r1, r3
 800543e:	4413      	add	r3, r2
 8005440:	3360      	adds	r3, #96	; 0x60
 8005442:	2202      	movs	r2, #2
 8005444:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	4413      	add	r3, r2
 800544e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800545c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005464:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	4413      	add	r3, r2
 800546e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005472:	461a      	mov	r2, r3
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005484:	461a      	mov	r2, r3
 8005486:	2302      	movs	r3, #2
 8005488:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	b2d9      	uxtb	r1, r3
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	202c      	movs	r0, #44	; 0x2c
 8005494:	fb00 f303 	mul.w	r3, r0, r3
 8005498:	4413      	add	r3, r2
 800549a:	3360      	adds	r3, #96	; 0x60
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f00b fb9b 	bl	8010bdc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80054a6:	bf00      	nop
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b08a      	sub	sp, #40	; 0x28
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	0c5b      	lsrs	r3, r3, #17
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054e2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d004      	beq.n	80054f4 <HCD_RXQLVL_IRQHandler+0x46>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b05      	cmp	r3, #5
 80054ee:	f000 80a9 	beq.w	8005644 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80054f2:	e0aa      	b.n	800564a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 80a6 	beq.w	8005648 <HCD_RXQLVL_IRQHandler+0x19a>
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	212c      	movs	r1, #44	; 0x2c
 8005502:	fb01 f303 	mul.w	r3, r1, r3
 8005506:	4413      	add	r3, r2
 8005508:	3344      	adds	r3, #68	; 0x44
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 809b 	beq.w	8005648 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	212c      	movs	r1, #44	; 0x2c
 8005518:	fb01 f303 	mul.w	r3, r1, r3
 800551c:	4413      	add	r3, r2
 800551e:	3350      	adds	r3, #80	; 0x50
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	441a      	add	r2, r3
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	202c      	movs	r0, #44	; 0x2c
 800552c:	fb00 f303 	mul.w	r3, r0, r3
 8005530:	440b      	add	r3, r1
 8005532:	334c      	adds	r3, #76	; 0x4c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d87a      	bhi.n	8005630 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	212c      	movs	r1, #44	; 0x2c
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	4413      	add	r3, r2
 800554a:	3344      	adds	r3, #68	; 0x44
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	b292      	uxth	r2, r2
 8005552:	4619      	mov	r1, r3
 8005554:	f002 fc35 	bl	8007dc2 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	212c      	movs	r1, #44	; 0x2c
 800555e:	fb01 f303 	mul.w	r3, r1, r3
 8005562:	4413      	add	r3, r2
 8005564:	3344      	adds	r3, #68	; 0x44
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	441a      	add	r2, r3
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	202c      	movs	r0, #44	; 0x2c
 8005572:	fb00 f303 	mul.w	r3, r0, r3
 8005576:	440b      	add	r3, r1
 8005578:	3344      	adds	r3, #68	; 0x44
 800557a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	212c      	movs	r1, #44	; 0x2c
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	4413      	add	r3, r2
 8005588:	3350      	adds	r3, #80	; 0x50
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	441a      	add	r2, r3
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	202c      	movs	r0, #44	; 0x2c
 8005596:	fb00 f303 	mul.w	r3, r0, r3
 800559a:	440b      	add	r3, r1
 800559c:	3350      	adds	r3, #80	; 0x50
 800559e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	0cdb      	lsrs	r3, r3, #19
 80055b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	212c      	movs	r1, #44	; 0x2c
 80055bc:	fb01 f303 	mul.w	r3, r1, r3
 80055c0:	4413      	add	r3, r2
 80055c2:	3340      	adds	r3, #64	; 0x40
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d13c      	bne.n	8005648 <HCD_RXQLVL_IRQHandler+0x19a>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d039      	beq.n	8005648 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055ea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055f2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005600:	461a      	mov	r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	212c      	movs	r1, #44	; 0x2c
 800560c:	fb01 f303 	mul.w	r3, r1, r3
 8005610:	4413      	add	r3, r2
 8005612:	3354      	adds	r3, #84	; 0x54
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	f083 0301 	eor.w	r3, r3, #1
 800561a:	b2d8      	uxtb	r0, r3
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	212c      	movs	r1, #44	; 0x2c
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	4413      	add	r3, r2
 8005628:	3354      	adds	r3, #84	; 0x54
 800562a:	4602      	mov	r2, r0
 800562c:	701a      	strb	r2, [r3, #0]
      break;
 800562e:	e00b      	b.n	8005648 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	212c      	movs	r1, #44	; 0x2c
 8005636:	fb01 f303 	mul.w	r3, r1, r3
 800563a:	4413      	add	r3, r2
 800563c:	3360      	adds	r3, #96	; 0x60
 800563e:	2204      	movs	r2, #4
 8005640:	701a      	strb	r2, [r3, #0]
      break;
 8005642:	e001      	b.n	8005648 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005644:	bf00      	nop
 8005646:	e000      	b.n	800564a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005648:	bf00      	nop
  }
}
 800564a:	bf00      	nop
 800564c:	3728      	adds	r7, #40	; 0x28
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b086      	sub	sp, #24
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800567e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d10b      	bne.n	80056a2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b01      	cmp	r3, #1
 8005692:	d102      	bne.n	800569a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f00b fa85 	bl	8010ba4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f043 0302 	orr.w	r3, r3, #2
 80056a0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d132      	bne.n	8005712 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f043 0308 	orr.w	r3, r3, #8
 80056b2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d126      	bne.n	800570c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d113      	bne.n	80056ee <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80056cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056d0:	d106      	bne.n	80056e0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2102      	movs	r1, #2
 80056d8:	4618      	mov	r0, r3
 80056da:	f002 fccf 	bl	800807c <USB_InitFSLSPClkSel>
 80056de:	e011      	b.n	8005704 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2101      	movs	r1, #1
 80056e6:	4618      	mov	r0, r3
 80056e8:	f002 fcc8 	bl	800807c <USB_InitFSLSPClkSel>
 80056ec:	e00a      	b.n	8005704 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d106      	bne.n	8005704 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056fc:	461a      	mov	r2, r3
 80056fe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005702:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f00b fa7b 	bl	8010c00 <HAL_HCD_PortEnabled_Callback>
 800570a:	e002      	b.n	8005712 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f00b fa85 	bl	8010c1c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b20      	cmp	r3, #32
 800571a:	d103      	bne.n	8005724 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f043 0320 	orr.w	r3, r3, #32
 8005722:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800572a:	461a      	mov	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6013      	str	r3, [r2, #0]
}
 8005730:	bf00      	nop
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e237      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d050      	beq.n	80057f8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005756:	4ba3      	ldr	r3, [pc, #652]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b04      	cmp	r3, #4
 8005760:	d00c      	beq.n	800577c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005762:	4ba0      	ldr	r3, [pc, #640]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800576a:	2b08      	cmp	r3, #8
 800576c:	d112      	bne.n	8005794 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800576e:	4b9d      	ldr	r3, [pc, #628]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800577a:	d10b      	bne.n	8005794 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800577c:	4b99      	ldr	r3, [pc, #612]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d036      	beq.n	80057f6 <HAL_RCC_OscConfig+0xbe>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d132      	bne.n	80057f6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e212      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	4b93      	ldr	r3, [pc, #588]	; (80059e8 <HAL_RCC_OscConfig+0x2b0>)
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d013      	beq.n	80057ce <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a6:	f7fd fb0f 	bl	8002dc8 <HAL_GetTick>
 80057aa:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057ae:	f7fd fb0b 	bl	8002dc8 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b64      	cmp	r3, #100	; 0x64
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e1fc      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057c0:	4b88      	ldr	r3, [pc, #544]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCC_OscConfig+0x76>
 80057cc:	e014      	b.n	80057f8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ce:	f7fd fafb 	bl	8002dc8 <HAL_GetTick>
 80057d2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057d6:	f7fd faf7 	bl	8002dc8 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b64      	cmp	r3, #100	; 0x64
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e1e8      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057e8:	4b7e      	ldr	r3, [pc, #504]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1f0      	bne.n	80057d6 <HAL_RCC_OscConfig+0x9e>
 80057f4:	e000      	b.n	80057f8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d077      	beq.n	80058f4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005804:	4b77      	ldr	r3, [pc, #476]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 030c 	and.w	r3, r3, #12
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00b      	beq.n	8005828 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005810:	4b74      	ldr	r3, [pc, #464]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005818:	2b08      	cmp	r3, #8
 800581a:	d126      	bne.n	800586a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800581c:	4b71      	ldr	r3, [pc, #452]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d120      	bne.n	800586a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005828:	4b6e      	ldr	r3, [pc, #440]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d005      	beq.n	8005840 <HAL_RCC_OscConfig+0x108>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d001      	beq.n	8005840 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e1bc      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005840:	4b68      	ldr	r3, [pc, #416]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	21f8      	movs	r1, #248	; 0xf8
 800584e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	fa91 f1a1 	rbit	r1, r1
 8005856:	6179      	str	r1, [r7, #20]
  return result;
 8005858:	6979      	ldr	r1, [r7, #20]
 800585a:	fab1 f181 	clz	r1, r1
 800585e:	b2c9      	uxtb	r1, r1
 8005860:	408b      	lsls	r3, r1
 8005862:	4960      	ldr	r1, [pc, #384]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005864:	4313      	orrs	r3, r2
 8005866:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005868:	e044      	b.n	80058f4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d02a      	beq.n	80058c8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005872:	4b5e      	ldr	r3, [pc, #376]	; (80059ec <HAL_RCC_OscConfig+0x2b4>)
 8005874:	2201      	movs	r2, #1
 8005876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005878:	f7fd faa6 	bl	8002dc8 <HAL_GetTick>
 800587c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005880:	f7fd faa2 	bl	8002dc8 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e193      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005892:	4b54      	ldr	r3, [pc, #336]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0f0      	beq.n	8005880 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800589e:	4b51      	ldr	r3, [pc, #324]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	21f8      	movs	r1, #248	; 0xf8
 80058ac:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ae:	6939      	ldr	r1, [r7, #16]
 80058b0:	fa91 f1a1 	rbit	r1, r1
 80058b4:	60f9      	str	r1, [r7, #12]
  return result;
 80058b6:	68f9      	ldr	r1, [r7, #12]
 80058b8:	fab1 f181 	clz	r1, r1
 80058bc:	b2c9      	uxtb	r1, r1
 80058be:	408b      	lsls	r3, r1
 80058c0:	4948      	ldr	r1, [pc, #288]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	600b      	str	r3, [r1, #0]
 80058c6:	e015      	b.n	80058f4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058c8:	4b48      	ldr	r3, [pc, #288]	; (80059ec <HAL_RCC_OscConfig+0x2b4>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ce:	f7fd fa7b 	bl	8002dc8 <HAL_GetTick>
 80058d2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058d6:	f7fd fa77 	bl	8002dc8 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e168      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058e8:	4b3e      	ldr	r3, [pc, #248]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1f0      	bne.n	80058d6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d030      	beq.n	8005962 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d016      	beq.n	8005936 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005908:	4b39      	ldr	r3, [pc, #228]	; (80059f0 <HAL_RCC_OscConfig+0x2b8>)
 800590a:	2201      	movs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800590e:	f7fd fa5b 	bl	8002dc8 <HAL_GetTick>
 8005912:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005916:	f7fd fa57 	bl	8002dc8 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e148      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005928:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 800592a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f0      	beq.n	8005916 <HAL_RCC_OscConfig+0x1de>
 8005934:	e015      	b.n	8005962 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005936:	4b2e      	ldr	r3, [pc, #184]	; (80059f0 <HAL_RCC_OscConfig+0x2b8>)
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800593c:	f7fd fa44 	bl	8002dc8 <HAL_GetTick>
 8005940:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005944:	f7fd fa40 	bl	8002dc8 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e131      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005956:	4b23      	ldr	r3, [pc, #140]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f0      	bne.n	8005944 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8088 	beq.w	8005a80 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005970:	2300      	movs	r3, #0
 8005972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005976:	4b1b      	ldr	r3, [pc, #108]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d110      	bne.n	80059a4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	4b17      	ldr	r3, [pc, #92]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	4a16      	ldr	r2, [pc, #88]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 800598c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005990:	6413      	str	r3, [r2, #64]	; 0x40
 8005992:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599a:	60bb      	str	r3, [r7, #8]
 800599c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059a4:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <HAL_RCC_OscConfig+0x2bc>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a12      	ldr	r2, [pc, #72]	; (80059f4 <HAL_RCC_OscConfig+0x2bc>)
 80059aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ae:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b0:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <HAL_RCC_OscConfig+0x2bc>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d123      	bne.n	8005a04 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059bc:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <HAL_RCC_OscConfig+0x2bc>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a0c      	ldr	r2, [pc, #48]	; (80059f4 <HAL_RCC_OscConfig+0x2bc>)
 80059c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059c8:	f7fd f9fe 	bl	8002dc8 <HAL_GetTick>
 80059cc:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ce:	e013      	b.n	80059f8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d0:	f7fd f9fa 	bl	8002dc8 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d90c      	bls.n	80059f8 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e0eb      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800
 80059e8:	40023802 	.word	0x40023802
 80059ec:	42470000 	.word	0x42470000
 80059f0:	42470e80 	.word	0x42470e80
 80059f4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f8:	4b72      	ldr	r3, [pc, #456]	; (8005bc4 <HAL_RCC_OscConfig+0x48c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0e5      	beq.n	80059d0 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	4b6f      	ldr	r3, [pc, #444]	; (8005bc8 <HAL_RCC_OscConfig+0x490>)
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d015      	beq.n	8005a42 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a16:	f7fd f9d7 	bl	8002dc8 <HAL_GetTick>
 8005a1a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1c:	e00a      	b.n	8005a34 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a1e:	f7fd f9d3 	bl	8002dc8 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e0c2      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a34:	4b65      	ldr	r3, [pc, #404]	; (8005bcc <HAL_RCC_OscConfig+0x494>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0ee      	beq.n	8005a1e <HAL_RCC_OscConfig+0x2e6>
 8005a40:	e014      	b.n	8005a6c <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a42:	f7fd f9c1 	bl	8002dc8 <HAL_GetTick>
 8005a46:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a48:	e00a      	b.n	8005a60 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a4a:	f7fd f9bd 	bl	8002dc8 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e0ac      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a60:	4b5a      	ldr	r3, [pc, #360]	; (8005bcc <HAL_RCC_OscConfig+0x494>)
 8005a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1ee      	bne.n	8005a4a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d105      	bne.n	8005a80 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a74:	4b55      	ldr	r3, [pc, #340]	; (8005bcc <HAL_RCC_OscConfig+0x494>)
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	4a54      	ldr	r2, [pc, #336]	; (8005bcc <HAL_RCC_OscConfig+0x494>)
 8005a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8097 	beq.w	8005bb8 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a8a:	4b50      	ldr	r3, [pc, #320]	; (8005bcc <HAL_RCC_OscConfig+0x494>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 030c 	and.w	r3, r3, #12
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d061      	beq.n	8005b5a <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d146      	bne.n	8005b2c <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a9e:	4b4c      	ldr	r3, [pc, #304]	; (8005bd0 <HAL_RCC_OscConfig+0x498>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa4:	f7fd f990 	bl	8002dc8 <HAL_GetTick>
 8005aa8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fd f98c 	bl	8002dc8 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b64      	cmp	r3, #100	; 0x64
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e07d      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005abe:	4b43      	ldr	r3, [pc, #268]	; (8005bcc <HAL_RCC_OscConfig+0x494>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aca:	4b40      	ldr	r3, [pc, #256]	; (8005bcc <HAL_RCC_OscConfig+0x494>)
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	4b41      	ldr	r3, [pc, #260]	; (8005bd4 <HAL_RCC_OscConfig+0x49c>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	69d1      	ldr	r1, [r2, #28]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6a12      	ldr	r2, [r2, #32]
 8005ada:	4311      	orrs	r1, r2
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ae0:	0192      	lsls	r2, r2, #6
 8005ae2:	4311      	orrs	r1, r2
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005ae8:	0612      	lsls	r2, r2, #24
 8005aea:	4311      	orrs	r1, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005af0:	0852      	lsrs	r2, r2, #1
 8005af2:	3a01      	subs	r2, #1
 8005af4:	0412      	lsls	r2, r2, #16
 8005af6:	430a      	orrs	r2, r1
 8005af8:	4934      	ldr	r1, [pc, #208]	; (8005bcc <HAL_RCC_OscConfig+0x494>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005afe:	4b34      	ldr	r3, [pc, #208]	; (8005bd0 <HAL_RCC_OscConfig+0x498>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b04:	f7fd f960 	bl	8002dc8 <HAL_GetTick>
 8005b08:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b0c:	f7fd f95c 	bl	8002dc8 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b64      	cmp	r3, #100	; 0x64
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e04d      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b1e:	4b2b      	ldr	r3, [pc, #172]	; (8005bcc <HAL_RCC_OscConfig+0x494>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0f0      	beq.n	8005b0c <HAL_RCC_OscConfig+0x3d4>
 8005b2a:	e045      	b.n	8005bb8 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2c:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <HAL_RCC_OscConfig+0x498>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b32:	f7fd f949 	bl	8002dc8 <HAL_GetTick>
 8005b36:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b3a:	f7fd f945 	bl	8002dc8 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b64      	cmp	r3, #100	; 0x64
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e036      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4c:	4b1f      	ldr	r3, [pc, #124]	; (8005bcc <HAL_RCC_OscConfig+0x494>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1f0      	bne.n	8005b3a <HAL_RCC_OscConfig+0x402>
 8005b58:	e02e      	b.n	8005bb8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e029      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005b66:	4b19      	ldr	r3, [pc, #100]	; (8005bcc <HAL_RCC_OscConfig+0x494>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d11c      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d115      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	099b      	lsrs	r3, r3, #6
 8005b8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d10d      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d106      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d001      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3728      	adds	r7, #40	; 0x28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40007000 	.word	0x40007000
 8005bc8:	40023870 	.word	0x40023870
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	42470060 	.word	0x42470060
 8005bd4:	f0bc8000 	.word	0xf0bc8000

08005bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e0d2      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bec:	4b6b      	ldr	r3, [pc, #428]	; (8005d9c <HAL_RCC_ClockConfig+0x1c4>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d90c      	bls.n	8005c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfa:	4b68      	ldr	r3, [pc, #416]	; (8005d9c <HAL_RCC_ClockConfig+0x1c4>)
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c02:	4b66      	ldr	r3, [pc, #408]	; (8005d9c <HAL_RCC_ClockConfig+0x1c4>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d001      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0be      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d020      	beq.n	8005c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c2c:	4b5c      	ldr	r3, [pc, #368]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	4a5b      	ldr	r2, [pc, #364]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005c44:	4b56      	ldr	r3, [pc, #344]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	4a55      	ldr	r2, [pc, #340]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c50:	4b53      	ldr	r3, [pc, #332]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	4950      	ldr	r1, [pc, #320]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d040      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d107      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c76:	4b4a      	ldr	r3, [pc, #296]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d115      	bne.n	8005cae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e085      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d107      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c8e:	4b44      	ldr	r3, [pc, #272]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d109      	bne.n	8005cae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e079      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c9e:	4b40      	ldr	r3, [pc, #256]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e071      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cae:	4b3c      	ldr	r3, [pc, #240]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f023 0203 	bic.w	r2, r3, #3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	4939      	ldr	r1, [pc, #228]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cc0:	f7fd f882 	bl	8002dc8 <HAL_GetTick>
 8005cc4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc6:	e00a      	b.n	8005cde <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc8:	f7fd f87e 	bl	8002dc8 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e059      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cde:	4b30      	ldr	r3, [pc, #192]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 020c 	and.w	r2, r3, #12
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d1eb      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cf0:	4b2a      	ldr	r3, [pc, #168]	; (8005d9c <HAL_RCC_ClockConfig+0x1c4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d20c      	bcs.n	8005d18 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfe:	4b27      	ldr	r3, [pc, #156]	; (8005d9c <HAL_RCC_ClockConfig+0x1c4>)
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b25      	ldr	r3, [pc, #148]	; (8005d9c <HAL_RCC_ClockConfig+0x1c4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d001      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e03c      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d24:	4b1e      	ldr	r3, [pc, #120]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	491b      	ldr	r1, [pc, #108]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d42:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	4913      	ldr	r1, [pc, #76]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005d56:	f000 f82b 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8005d5a:	4601      	mov	r1, r0
 8005d5c:	4b10      	ldr	r3, [pc, #64]	; (8005da0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d64:	22f0      	movs	r2, #240	; 0xf0
 8005d66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	fa92 f2a2 	rbit	r2, r2
 8005d6e:	60fa      	str	r2, [r7, #12]
  return result;
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	fab2 f282 	clz	r2, r2
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	40d3      	lsrs	r3, r2
 8005d7a:	4a0a      	ldr	r2, [pc, #40]	; (8005da4 <HAL_RCC_ClockConfig+0x1cc>)
 8005d7c:	5cd3      	ldrb	r3, [r2, r3]
 8005d7e:	fa21 f303 	lsr.w	r3, r1, r3
 8005d82:	4a09      	ldr	r2, [pc, #36]	; (8005da8 <HAL_RCC_ClockConfig+0x1d0>)
 8005d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d86:	4b09      	ldr	r3, [pc, #36]	; (8005dac <HAL_RCC_ClockConfig+0x1d4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fc fe60 	bl	8002a50 <HAL_InitTick>

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40023c00 	.word	0x40023c00
 8005da0:	40023800 	.word	0x40023800
 8005da4:	08015b00 	.word	0x08015b00
 8005da8:	20000024 	.word	0x20000024
 8005dac:	20000028 	.word	0x20000028

08005db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005db0:	b5b0      	push	{r4, r5, r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005db6:	2100      	movs	r1, #0
 8005db8:	6079      	str	r1, [r7, #4]
 8005dba:	2100      	movs	r1, #0
 8005dbc:	60f9      	str	r1, [r7, #12]
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dc6:	4952      	ldr	r1, [pc, #328]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x160>)
 8005dc8:	6889      	ldr	r1, [r1, #8]
 8005dca:	f001 010c 	and.w	r1, r1, #12
 8005dce:	2908      	cmp	r1, #8
 8005dd0:	d00d      	beq.n	8005dee <HAL_RCC_GetSysClockFreq+0x3e>
 8005dd2:	2908      	cmp	r1, #8
 8005dd4:	f200 8094 	bhi.w	8005f00 <HAL_RCC_GetSysClockFreq+0x150>
 8005dd8:	2900      	cmp	r1, #0
 8005dda:	d002      	beq.n	8005de2 <HAL_RCC_GetSysClockFreq+0x32>
 8005ddc:	2904      	cmp	r1, #4
 8005dde:	d003      	beq.n	8005de8 <HAL_RCC_GetSysClockFreq+0x38>
 8005de0:	e08e      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005de2:	4b4c      	ldr	r3, [pc, #304]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x164>)
 8005de4:	60bb      	str	r3, [r7, #8]
       break;
 8005de6:	e08e      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005de8:	4b4b      	ldr	r3, [pc, #300]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x168>)
 8005dea:	60bb      	str	r3, [r7, #8]
      break;
 8005dec:	e08b      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dee:	4948      	ldr	r1, [pc, #288]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x160>)
 8005df0:	6849      	ldr	r1, [r1, #4]
 8005df2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005df6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005df8:	4945      	ldr	r1, [pc, #276]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x160>)
 8005dfa:	6849      	ldr	r1, [r1, #4]
 8005dfc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005e00:	2900      	cmp	r1, #0
 8005e02:	d024      	beq.n	8005e4e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e04:	4942      	ldr	r1, [pc, #264]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e06:	6849      	ldr	r1, [r1, #4]
 8005e08:	0989      	lsrs	r1, r1, #6
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	f04f 0100 	mov.w	r1, #0
 8005e10:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005e14:	f04f 0500 	mov.w	r5, #0
 8005e18:	ea00 0204 	and.w	r2, r0, r4
 8005e1c:	ea01 0305 	and.w	r3, r1, r5
 8005e20:	493d      	ldr	r1, [pc, #244]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x168>)
 8005e22:	fb01 f003 	mul.w	r0, r1, r3
 8005e26:	2100      	movs	r1, #0
 8005e28:	fb01 f102 	mul.w	r1, r1, r2
 8005e2c:	1844      	adds	r4, r0, r1
 8005e2e:	493a      	ldr	r1, [pc, #232]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x168>)
 8005e30:	fba2 0101 	umull	r0, r1, r2, r1
 8005e34:	1863      	adds	r3, r4, r1
 8005e36:	4619      	mov	r1, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	f7fb f95a 	bl	80010f8 <__aeabi_uldivmod>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4613      	mov	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	e04a      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e4e:	4b30      	ldr	r3, [pc, #192]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	099b      	lsrs	r3, r3, #6
 8005e54:	461a      	mov	r2, r3
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e5e:	f04f 0100 	mov.w	r1, #0
 8005e62:	ea02 0400 	and.w	r4, r2, r0
 8005e66:	ea03 0501 	and.w	r5, r3, r1
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	014b      	lsls	r3, r1, #5
 8005e78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e7c:	0142      	lsls	r2, r0, #5
 8005e7e:	4610      	mov	r0, r2
 8005e80:	4619      	mov	r1, r3
 8005e82:	1b00      	subs	r0, r0, r4
 8005e84:	eb61 0105 	sbc.w	r1, r1, r5
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	018b      	lsls	r3, r1, #6
 8005e92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e96:	0182      	lsls	r2, r0, #6
 8005e98:	1a12      	subs	r2, r2, r0
 8005e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8005e9e:	f04f 0000 	mov.w	r0, #0
 8005ea2:	f04f 0100 	mov.w	r1, #0
 8005ea6:	00d9      	lsls	r1, r3, #3
 8005ea8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005eac:	00d0      	lsls	r0, r2, #3
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	1912      	adds	r2, r2, r4
 8005eb4:	eb45 0303 	adc.w	r3, r5, r3
 8005eb8:	f04f 0000 	mov.w	r0, #0
 8005ebc:	f04f 0100 	mov.w	r1, #0
 8005ec0:	0299      	lsls	r1, r3, #10
 8005ec2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005ec6:	0290      	lsls	r0, r2, #10
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4619      	mov	r1, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	f7fb f90e 	bl	80010f8 <__aeabi_uldivmod>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	0c1b      	lsrs	r3, r3, #16
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	60bb      	str	r3, [r7, #8]
      break;
 8005efe:	e002      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f00:	4b04      	ldr	r3, [pc, #16]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x164>)
 8005f02:	60bb      	str	r3, [r7, #8]
      break;
 8005f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f06:	68bb      	ldr	r3, [r7, #8]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f10:	40023800 	.word	0x40023800
 8005f14:	00f42400 	.word	0x00f42400
 8005f18:	017d7840 	.word	0x017d7840

08005f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f20:	4b02      	ldr	r3, [pc, #8]	; (8005f2c <HAL_RCC_GetHCLKFreq+0x10>)
 8005f22:	681b      	ldr	r3, [r3, #0]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bc80      	pop	{r7}
 8005f2a:	4770      	bx	lr
 8005f2c:	20000024 	.word	0x20000024

08005f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005f36:	f7ff fff1 	bl	8005f1c <HAL_RCC_GetHCLKFreq>
 8005f3a:	4601      	mov	r1, r0
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005f44:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8005f48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	fa92 f2a2 	rbit	r2, r2
 8005f50:	603a      	str	r2, [r7, #0]
  return result;
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	fab2 f282 	clz	r2, r2
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	40d3      	lsrs	r3, r2
 8005f5c:	4a04      	ldr	r2, [pc, #16]	; (8005f70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005f5e:	5cd3      	ldrb	r3, [r2, r3]
 8005f60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	08015b10 	.word	0x08015b10

08005f74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	220f      	movs	r2, #15
 8005f82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f84:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <HAL_RCC_GetClockConfig+0x58>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 0203 	and.w	r2, r3, #3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f90:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <HAL_RCC_GetClockConfig+0x58>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <HAL_RCC_GetClockConfig+0x58>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005fa8:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <HAL_RCC_GetClockConfig+0x58>)
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	08db      	lsrs	r3, r3, #3
 8005fae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005fb6:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 020f 	and.w	r2, r3, #15
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	601a      	str	r2, [r3, #0]
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	40023c00 	.word	0x40023c00

08005fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08a      	sub	sp, #40	; 0x28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d103      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d14c      	bne.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ff8:	4b6d      	ldr	r3, [pc, #436]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ffe:	f7fc fee3 	bl	8002dc8 <HAL_GetTick>
 8006002:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006004:	e008      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006006:	f7fc fedf 	bl	8002dc8 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d901      	bls.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e0c7      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006018:	4b66      	ldr	r3, [pc, #408]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1f0      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800602c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	fa92 f2a2 	rbit	r2, r2
 8006034:	613a      	str	r2, [r7, #16]
  return result;
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	fab2 f282 	clz	r2, r2
 800603c:	b2d2      	uxtb	r2, r2
 800603e:	fa03 f202 	lsl.w	r2, r3, r2
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800604a:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800604c:	69f9      	ldr	r1, [r7, #28]
 800604e:	fa91 f1a1 	rbit	r1, r1
 8006052:	61b9      	str	r1, [r7, #24]
  return result;
 8006054:	69b9      	ldr	r1, [r7, #24]
 8006056:	fab1 f181 	clz	r1, r1
 800605a:	b2c9      	uxtb	r1, r1
 800605c:	408b      	lsls	r3, r1
 800605e:	4955      	ldr	r1, [pc, #340]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006060:	4313      	orrs	r3, r2
 8006062:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006066:	4b52      	ldr	r3, [pc, #328]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006068:	2201      	movs	r2, #1
 800606a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800606c:	f7fc feac 	bl	8002dc8 <HAL_GetTick>
 8006070:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006072:	e008      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006074:	f7fc fea8 	bl	8002dc8 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e090      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006086:	4b4b      	ldr	r3, [pc, #300]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0f0      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 8083 	beq.w	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	4b43      	ldr	r3, [pc, #268]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a8:	4a42      	ldr	r2, [pc, #264]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ae:	6413      	str	r3, [r2, #64]	; 0x40
 80060b0:	4b40      	ldr	r3, [pc, #256]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060bc:	4b3e      	ldr	r3, [pc, #248]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a3d      	ldr	r2, [pc, #244]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80060c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c6:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80060c8:	f7fc fe7e 	bl	8002dc8 <HAL_GetTick>
 80060cc:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060ce:	e008      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060d0:	f7fc fe7a 	bl	8002dc8 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e062      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060e2:	4b35      	ldr	r3, [pc, #212]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0f0      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060ee:	4b31      	ldr	r3, [pc, #196]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f6:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d02f      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006106:	6a3a      	ldr	r2, [r7, #32]
 8006108:	429a      	cmp	r2, r3
 800610a:	d028      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800610c:	4b29      	ldr	r3, [pc, #164]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006114:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006116:	4b29      	ldr	r3, [pc, #164]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006118:	2201      	movs	r2, #1
 800611a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800611c:	4b27      	ldr	r3, [pc, #156]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006122:	4a24      	ldr	r2, [pc, #144]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006128:	4b22      	ldr	r3, [pc, #136]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800612a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b01      	cmp	r3, #1
 8006132:	d114      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006134:	f7fc fe48 	bl	8002dc8 <HAL_GetTick>
 8006138:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800613a:	e00a      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800613c:	f7fc fe44 	bl	8002dc8 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	f241 3288 	movw	r2, #5000	; 0x1388
 800614a:	4293      	cmp	r3, r2
 800614c:	d901      	bls.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e02a      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006152:	4b18      	ldr	r3, [pc, #96]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0ee      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800616a:	d10d      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800616c:	4b11      	ldr	r3, [pc, #68]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800617c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006180:	490c      	ldr	r1, [pc, #48]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006182:	4313      	orrs	r3, r2
 8006184:	608b      	str	r3, [r1, #8]
 8006186:	e005      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006188:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800618e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006192:	6093      	str	r3, [r2, #8]
 8006194:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006196:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a0:	4904      	ldr	r1, [pc, #16]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3728      	adds	r7, #40	; 0x28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	42470068 	.word	0x42470068
 80061b4:	40023800 	.word	0x40023800
 80061b8:	40007000 	.word	0x40007000
 80061bc:	42470e40 	.word	0x42470e40

080061c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e07c      	b.n	80062cc <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	7f5b      	ldrb	r3, [r3, #29]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d105      	bne.n	80061e8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fc fb28 	bl	8002838 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	22ca      	movs	r2, #202	; 0xca
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2253      	movs	r2, #83	; 0x53
 80061fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 faec 	bl	80067dc <RTC_EnterInitMode>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d008      	beq.n	800621c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	22ff      	movs	r2, #255	; 0xff
 8006210:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2204      	movs	r2, #4
 8006216:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e057      	b.n	80062cc <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800622a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6899      	ldr	r1, [r3, #8]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	68d2      	ldr	r2, [r2, #12]
 8006256:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6919      	ldr	r1, [r3, #16]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	041a      	lsls	r2, r3, #16
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800627a:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fa85 	bl	800678c <HAL_RTC_WaitForSynchro>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d008      	beq.n	800629a <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	22ff      	movs	r2, #255	; 0xff
 800628e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2204      	movs	r2, #4
 8006294:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e018      	b.n	80062cc <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062a8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699a      	ldr	r2, [r3, #24]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	22ff      	movs	r2, #255	; 0xff
 80062c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80062ca:	2300      	movs	r3, #0
  }
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80062d4:	b590      	push	{r4, r7, lr}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	7f1b      	ldrb	r3, [r3, #28]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_RTC_SetTime+0x1c>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e0a3      	b.n	8006438 <HAL_RTC_SetTime+0x164>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2202      	movs	r2, #2
 80062fa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d126      	bne.n	8006350 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2200      	movs	r2, #0
 8006314:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fa8a 	bl	8006834 <RTC_ByteToBcd2>
 8006320:	4603      	mov	r3, r0
 8006322:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fa83 	bl	8006834 <RTC_ByteToBcd2>
 800632e:	4603      	mov	r3, r0
 8006330:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006332:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	789b      	ldrb	r3, [r3, #2]
 8006338:	4618      	mov	r0, r3
 800633a:	f000 fa7b 	bl	8006834 <RTC_ByteToBcd2>
 800633e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006340:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	78db      	ldrb	r3, [r3, #3]
 8006348:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	e018      	b.n	8006382 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d102      	bne.n	8006364 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2200      	movs	r2, #0
 8006362:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006370:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006376:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	78db      	ldrb	r3, [r3, #3]
 800637c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	22ca      	movs	r2, #202	; 0xca
 8006388:	625a      	str	r2, [r3, #36]	; 0x24
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2253      	movs	r2, #83	; 0x53
 8006390:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 fa22 	bl	80067dc <RTC_EnterInitMode>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	22ff      	movs	r2, #255	; 0xff
 80063a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2204      	movs	r2, #4
 80063aa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e040      	b.n	8006438 <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80063c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80063c4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063d4:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6899      	ldr	r1, [r3, #8]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063fc:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 f9c4 	bl	800678c <HAL_RTC_WaitForSynchro>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00b      	beq.n	8006422 <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	22ff      	movs	r2, #255	; 0xff
 8006410:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2204      	movs	r2, #4
 8006416:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e00a      	b.n	8006438 <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	22ff      	movs	r2, #255	; 0xff
 8006428:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006436:	2300      	movs	r3, #0
  }
}
 8006438:	4618      	mov	r0, r3
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	bd90      	pop	{r4, r7, pc}

08006440 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006440:	b590      	push	{r4, r7, lr}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	7f1b      	ldrb	r3, [r3, #28]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_RTC_SetDate+0x1c>
 8006458:	2302      	movs	r3, #2
 800645a:	e08d      	b.n	8006578 <HAL_RTC_SetDate+0x138>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2201      	movs	r2, #1
 8006460:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2202      	movs	r2, #2
 8006466:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10e      	bne.n	800648c <HAL_RTC_SetDate+0x4c>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	785b      	ldrb	r3, [r3, #1]
 8006472:	f003 0310 	and.w	r3, r3, #16
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	f023 0310 	bic.w	r3, r3, #16
 8006482:	b2db      	uxtb	r3, r3
 8006484:	330a      	adds	r3, #10
 8006486:	b2da      	uxtb	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d11c      	bne.n	80064cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	78db      	ldrb	r3, [r3, #3]
 8006496:	4618      	mov	r0, r3
 8006498:	f000 f9cc 	bl	8006834 <RTC_ByteToBcd2>
 800649c:	4603      	mov	r3, r0
 800649e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 f9c5 	bl	8006834 <RTC_ByteToBcd2>
 80064aa:	4603      	mov	r3, r0
 80064ac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80064ae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	789b      	ldrb	r3, [r3, #2]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 f9bd 	bl	8006834 <RTC_ByteToBcd2>
 80064ba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80064bc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	e00e      	b.n	80064ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	78db      	ldrb	r3, [r3, #3]
 80064d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80064d8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80064de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	22ca      	movs	r2, #202	; 0xca
 80064f0:	625a      	str	r2, [r3, #36]	; 0x24
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2253      	movs	r2, #83	; 0x53
 80064f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f96e 	bl	80067dc <RTC_EnterInitMode>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00b      	beq.n	800651e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	22ff      	movs	r2, #255	; 0xff
 800650c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2204      	movs	r2, #4
 8006512:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e02c      	b.n	8006578 <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006528:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800652c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800653c:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 f924 	bl	800678c <HAL_RTC_WaitForSynchro>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00b      	beq.n	8006562 <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	22ff      	movs	r2, #255	; 0xff
 8006550:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2204      	movs	r2, #4
 8006556:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e00a      	b.n	8006578 <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	22ff      	movs	r2, #255	; 0xff
 8006568:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006576:	2300      	movs	r3, #0
  }
}
 8006578:	4618      	mov	r0, r3
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	bd90      	pop	{r4, r7, pc}

08006580 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006580:	b590      	push	{r4, r7, lr}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	7f1b      	ldrb	r3, [r3, #28]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_RTC_SetAlarm+0x20>
 800659c:	2302      	movs	r3, #2
 800659e:	e0f1      	b.n	8006784 <HAL_RTC_SetAlarm+0x204>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2202      	movs	r2, #2
 80065aa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d136      	bne.n	8006620 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d102      	bne.n	80065c6 <HAL_RTC_SetAlarm+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2200      	movs	r2, #0
 80065c4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 f932 	bl	8006834 <RTC_ByteToBcd2>
 80065d0:	4603      	mov	r3, r0
 80065d2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 f92b 	bl	8006834 <RTC_ByteToBcd2>
 80065de:	4603      	mov	r3, r0
 80065e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80065e2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	789b      	ldrb	r3, [r3, #2]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 f923 	bl	8006834 <RTC_ByteToBcd2>
 80065ee:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80065f0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	78db      	ldrb	r3, [r3, #3]
 80065f8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80065fa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	7d1b      	ldrb	r3, [r3, #20]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f916 	bl	8006834 <RTC_ByteToBcd2>
 8006608:	4603      	mov	r3, r0
 800660a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800660c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006614:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	e022      	b.n	8006666 <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d102      	bne.n	8006634 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2200      	movs	r2, #0
 8006632:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006640:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006646:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	78db      	ldrb	r3, [r3, #3]
 800664c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800664e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	7d1b      	ldrb	r3, [r3, #20]
 8006654:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006656:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800665c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	22ca      	movs	r2, #202	; 0xca
 800666c:	625a      	str	r2, [r3, #36]	; 0x24
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2253      	movs	r2, #83	; 0x53
 8006674:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800667e:	d13b      	bne.n	80066f8 <HAL_RTC_SetAlarm+0x178>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800668e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800669e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066a0:	f7fc fb92 	bl	8002dc8 <HAL_GetTick>
 80066a4:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80066a6:	e013      	b.n	80066d0 <HAL_RTC_SetAlarm+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066a8:	f7fc fb8e 	bl	8002dc8 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066b6:	d90b      	bls.n	80066d0 <HAL_RTC_SetAlarm+0x150>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	22ff      	movs	r2, #255	; 0xff
 80066be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2203      	movs	r2, #3
 80066c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e059      	b.n	8006784 <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0e4      	beq.n	80066a8 <HAL_RTC_SetAlarm+0x128>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066f4:	609a      	str	r2, [r3, #8]
 80066f6:	e03a      	b.n	800676e <HAL_RTC_SetAlarm+0x1ee>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006706:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006716:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006718:	f7fc fb56 	bl	8002dc8 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800671e:	e013      	b.n	8006748 <HAL_RTC_SetAlarm+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006720:	f7fc fb52 	bl	8002dc8 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800672e:	d90b      	bls.n	8006748 <HAL_RTC_SetAlarm+0x1c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	22ff      	movs	r2, #255	; 0xff
 8006736:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2203      	movs	r2, #3
 800673c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e01d      	b.n	8006784 <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0e4      	beq.n	8006720 <HAL_RTC_SetAlarm+0x1a0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800676c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	22ff      	movs	r2, #255	; 0xff
 8006774:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	bd90      	pop	{r4, r7, pc}

0800678c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067a6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067a8:	f7fc fb0e 	bl	8002dc8 <HAL_GetTick>
 80067ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80067ae:	e009      	b.n	80067c4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067b0:	f7fc fb0a 	bl	8002dc8 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067be:	d901      	bls.n	80067c4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e007      	b.n	80067d4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0ee      	beq.n	80067b0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d119      	bne.n	800682a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f04f 32ff 	mov.w	r2, #4294967295
 80067fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006800:	f7fc fae2 	bl	8002dc8 <HAL_GetTick>
 8006804:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006806:	e009      	b.n	800681c <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006808:	f7fc fade 	bl	8002dc8 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006816:	d901      	bls.n	800681c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e007      	b.n	800682c <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0ee      	beq.n	8006808 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 8006842:	e005      	b.n	8006850 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3301      	adds	r3, #1
 8006848:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	3b0a      	subs	r3, #10
 800684e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	2b09      	cmp	r3, #9
 8006854:	d8f6      	bhi.n	8006844 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	b2da      	uxtb	r2, r3
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	4313      	orrs	r3, r2
 8006862:	b2db      	uxtb	r3, r3
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	bc80      	pop	{r7}
 800686c:	4770      	bx	lr

0800686e <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b086      	sub	sp, #24
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	7f1b      	ldrb	r3, [r3, #28]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d101      	bne.n	800688a <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8006886:	2302      	movs	r3, #2
 8006888:	e081      	b.n	800698e <HAL_RTCEx_SetWakeUpTimer+0x120>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2202      	movs	r2, #2
 8006894:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	22ca      	movs	r2, #202	; 0xca
 800689c:	625a      	str	r2, [r3, #36]	; 0x24
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2253      	movs	r2, #83	; 0x53
 80068a4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01e      	beq.n	80068f2 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 80068b4:	f7fc fa88 	bl	8002dc8 <HAL_GetTick>
 80068b8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80068ba:	e013      	b.n	80068e4 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068bc:	f7fc fa84 	bl	8002dc8 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ca:	d90b      	bls.n	80068e4 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	22ff      	movs	r2, #255	; 0xff
 80068d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2203      	movs	r2, #3
 80068d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e054      	b.n	800698e <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1e4      	bne.n	80068bc <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006900:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006902:	f7fc fa61 	bl	8002dc8 <HAL_GetTick>
 8006906:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006908:	e013      	b.n	8006932 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800690a:	f7fc fa5d 	bl	8002dc8 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006918:	d90b      	bls.n	8006932 <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	22ff      	movs	r2, #255	; 0xff
 8006920:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2203      	movs	r2, #3
 8006926:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e02d      	b.n	800698e <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0e4      	beq.n	800690a <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0207 	bic.w	r2, r2, #7
 800694e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6899      	ldr	r1, [r3, #8]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	430a      	orrs	r2, r1
 800695e:	609a      	str	r2, [r3, #8]

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	615a      	str	r2, [r3, #20]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006976:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	22ff      	movs	r2, #255	; 0xff
 800697e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2201      	movs	r2, #1
 8006984:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b082      	sub	sp, #8
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e041      	b.n	8006a2c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d106      	bne.n	80069c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7fb ff51 	bl	8002864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2202      	movs	r2, #2
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3304      	adds	r3, #4
 80069d2:	4619      	mov	r1, r3
 80069d4:	4610      	mov	r0, r2
 80069d6:	f000 fccf 	bl	8007378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d001      	beq.n	8006a4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e046      	b.n	8006ada <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a22      	ldr	r2, [pc, #136]	; (8006ae4 <HAL_TIM_Base_Start+0xb0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d022      	beq.n	8006aa4 <HAL_TIM_Base_Start+0x70>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a66:	d01d      	beq.n	8006aa4 <HAL_TIM_Base_Start+0x70>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1e      	ldr	r2, [pc, #120]	; (8006ae8 <HAL_TIM_Base_Start+0xb4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d018      	beq.n	8006aa4 <HAL_TIM_Base_Start+0x70>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1d      	ldr	r2, [pc, #116]	; (8006aec <HAL_TIM_Base_Start+0xb8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d013      	beq.n	8006aa4 <HAL_TIM_Base_Start+0x70>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1b      	ldr	r2, [pc, #108]	; (8006af0 <HAL_TIM_Base_Start+0xbc>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00e      	beq.n	8006aa4 <HAL_TIM_Base_Start+0x70>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1a      	ldr	r2, [pc, #104]	; (8006af4 <HAL_TIM_Base_Start+0xc0>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d009      	beq.n	8006aa4 <HAL_TIM_Base_Start+0x70>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <HAL_TIM_Base_Start+0xc4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d004      	beq.n	8006aa4 <HAL_TIM_Base_Start+0x70>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a17      	ldr	r2, [pc, #92]	; (8006afc <HAL_TIM_Base_Start+0xc8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d111      	bne.n	8006ac8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b06      	cmp	r3, #6
 8006ab4:	d010      	beq.n	8006ad8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f042 0201 	orr.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac6:	e007      	b.n	8006ad8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40000400 	.word	0x40000400
 8006aec:	40000800 	.word	0x40000800
 8006af0:	40000c00 	.word	0x40000c00
 8006af4:	40010400 	.word	0x40010400
 8006af8:	40014000 	.word	0x40014000
 8006afc:	40001800 	.word	0x40001800

08006b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d001      	beq.n	8006b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e04e      	b.n	8006bb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0201 	orr.w	r2, r2, #1
 8006b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a22      	ldr	r2, [pc, #136]	; (8006bc0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d022      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b42:	d01d      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a1e      	ldr	r2, [pc, #120]	; (8006bc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d018      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a1d      	ldr	r2, [pc, #116]	; (8006bc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a1b      	ldr	r2, [pc, #108]	; (8006bcc <HAL_TIM_Base_Start_IT+0xcc>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00e      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1a      	ldr	r2, [pc, #104]	; (8006bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a18      	ldr	r2, [pc, #96]	; (8006bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a17      	ldr	r2, [pc, #92]	; (8006bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d111      	bne.n	8006ba4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b06      	cmp	r3, #6
 8006b90:	d010      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0201 	orr.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba2:	e007      	b.n	8006bb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40000400 	.word	0x40000400
 8006bc8:	40000800 	.word	0x40000800
 8006bcc:	40000c00 	.word	0x40000c00
 8006bd0:	40010400 	.word	0x40010400
 8006bd4:	40014000 	.word	0x40014000
 8006bd8:	40001800 	.word	0x40001800

08006bdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e041      	b.n	8006c72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d106      	bne.n	8006c08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f839 	bl	8006c7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	f000 fbac 	bl	8007378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bc80      	pop	{r7}
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d109      	bne.n	8006cb0 <HAL_TIM_PWM_Start+0x24>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	bf14      	ite	ne
 8006ca8:	2301      	movne	r3, #1
 8006caa:	2300      	moveq	r3, #0
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	e022      	b.n	8006cf6 <HAL_TIM_PWM_Start+0x6a>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	d109      	bne.n	8006cca <HAL_TIM_PWM_Start+0x3e>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	bf14      	ite	ne
 8006cc2:	2301      	movne	r3, #1
 8006cc4:	2300      	moveq	r3, #0
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	e015      	b.n	8006cf6 <HAL_TIM_PWM_Start+0x6a>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d109      	bne.n	8006ce4 <HAL_TIM_PWM_Start+0x58>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	bf14      	ite	ne
 8006cdc:	2301      	movne	r3, #1
 8006cde:	2300      	moveq	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	e008      	b.n	8006cf6 <HAL_TIM_PWM_Start+0x6a>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	bf14      	ite	ne
 8006cf0:	2301      	movne	r3, #1
 8006cf2:	2300      	moveq	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e07c      	b.n	8006df8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <HAL_TIM_PWM_Start+0x82>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d0c:	e013      	b.n	8006d36 <HAL_TIM_PWM_Start+0xaa>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d104      	bne.n	8006d1e <HAL_TIM_PWM_Start+0x92>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d1c:	e00b      	b.n	8006d36 <HAL_TIM_PWM_Start+0xaa>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d104      	bne.n	8006d2e <HAL_TIM_PWM_Start+0xa2>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d2c:	e003      	b.n	8006d36 <HAL_TIM_PWM_Start+0xaa>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2202      	movs	r2, #2
 8006d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fdfa 	bl	8007938 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a2d      	ldr	r2, [pc, #180]	; (8006e00 <HAL_TIM_PWM_Start+0x174>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d004      	beq.n	8006d58 <HAL_TIM_PWM_Start+0xcc>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a2c      	ldr	r2, [pc, #176]	; (8006e04 <HAL_TIM_PWM_Start+0x178>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d101      	bne.n	8006d5c <HAL_TIM_PWM_Start+0xd0>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <HAL_TIM_PWM_Start+0xd2>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d007      	beq.n	8006d72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a22      	ldr	r2, [pc, #136]	; (8006e00 <HAL_TIM_PWM_Start+0x174>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d022      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x136>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d84:	d01d      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x136>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a1f      	ldr	r2, [pc, #124]	; (8006e08 <HAL_TIM_PWM_Start+0x17c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d018      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x136>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a1d      	ldr	r2, [pc, #116]	; (8006e0c <HAL_TIM_PWM_Start+0x180>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d013      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x136>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a1c      	ldr	r2, [pc, #112]	; (8006e10 <HAL_TIM_PWM_Start+0x184>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00e      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x136>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a16      	ldr	r2, [pc, #88]	; (8006e04 <HAL_TIM_PWM_Start+0x178>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d009      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x136>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a18      	ldr	r2, [pc, #96]	; (8006e14 <HAL_TIM_PWM_Start+0x188>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d004      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x136>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a16      	ldr	r2, [pc, #88]	; (8006e18 <HAL_TIM_PWM_Start+0x18c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d111      	bne.n	8006de6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b06      	cmp	r3, #6
 8006dd2:	d010      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de4:	e007      	b.n	8006df6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0201 	orr.w	r2, r2, #1
 8006df4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	40010000 	.word	0x40010000
 8006e04:	40010400 	.word	0x40010400
 8006e08:	40000400 	.word	0x40000400
 8006e0c:	40000800 	.word	0x40000800
 8006e10:	40000c00 	.word	0x40000c00
 8006e14:	40014000 	.word	0x40014000
 8006e18:	40001800 	.word	0x40001800

08006e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d122      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d11b      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0202 	mvn.w	r2, #2
 8006e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa6f 	bl	8007342 <HAL_TIM_IC_CaptureCallback>
 8006e64:	e005      	b.n	8006e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa62 	bl	8007330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fa71 	bl	8007354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0304 	and.w	r3, r3, #4
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d122      	bne.n	8006ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b04      	cmp	r3, #4
 8006e92:	d11b      	bne.n	8006ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0204 	mvn.w	r2, #4
 8006e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa45 	bl	8007342 <HAL_TIM_IC_CaptureCallback>
 8006eb8:	e005      	b.n	8006ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa38 	bl	8007330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fa47 	bl	8007354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d122      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0308 	and.w	r3, r3, #8
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d11b      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0208 	mvn.w	r2, #8
 8006ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2204      	movs	r2, #4
 8006ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fa1b 	bl	8007342 <HAL_TIM_IC_CaptureCallback>
 8006f0c:	e005      	b.n	8006f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa0e 	bl	8007330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fa1d 	bl	8007354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 0310 	and.w	r3, r3, #16
 8006f2a:	2b10      	cmp	r3, #16
 8006f2c:	d122      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	2b10      	cmp	r3, #16
 8006f3a:	d11b      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0210 	mvn.w	r2, #16
 8006f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2208      	movs	r2, #8
 8006f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f9f1 	bl	8007342 <HAL_TIM_IC_CaptureCallback>
 8006f60:	e005      	b.n	8006f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f9e4 	bl	8007330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f9f3 	bl	8007354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d10e      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d107      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0201 	mvn.w	r2, #1
 8006f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fb f9f0 	bl	8002380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006faa:	2b80      	cmp	r3, #128	; 0x80
 8006fac:	d10e      	bne.n	8006fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb8:	2b80      	cmp	r3, #128	; 0x80
 8006fba:	d107      	bne.n	8006fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fdae 	bl	8007b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd6:	2b40      	cmp	r3, #64	; 0x40
 8006fd8:	d10e      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d107      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f9b7 	bl	8007366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f003 0320 	and.w	r3, r3, #32
 8007002:	2b20      	cmp	r3, #32
 8007004:	d10e      	bne.n	8007024 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f003 0320 	and.w	r3, r3, #32
 8007010:	2b20      	cmp	r3, #32
 8007012:	d107      	bne.n	8007024 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0220 	mvn.w	r2, #32
 800701c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fd79 	bl	8007b16 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007024:	bf00      	nop
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800703e:	2b01      	cmp	r3, #1
 8007040:	d101      	bne.n	8007046 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007042:	2302      	movs	r3, #2
 8007044:	e0ac      	b.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b0c      	cmp	r3, #12
 8007052:	f200 809f 	bhi.w	8007194 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007056:	a201      	add	r2, pc, #4	; (adr r2, 800705c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	08007091 	.word	0x08007091
 8007060:	08007195 	.word	0x08007195
 8007064:	08007195 	.word	0x08007195
 8007068:	08007195 	.word	0x08007195
 800706c:	080070d1 	.word	0x080070d1
 8007070:	08007195 	.word	0x08007195
 8007074:	08007195 	.word	0x08007195
 8007078:	08007195 	.word	0x08007195
 800707c:	08007113 	.word	0x08007113
 8007080:	08007195 	.word	0x08007195
 8007084:	08007195 	.word	0x08007195
 8007088:	08007195 	.word	0x08007195
 800708c:	08007153 	.word	0x08007153
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68b9      	ldr	r1, [r7, #8]
 8007096:	4618      	mov	r0, r3
 8007098:	f000 fa0c 	bl	80074b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699a      	ldr	r2, [r3, #24]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0208 	orr.w	r2, r2, #8
 80070aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699a      	ldr	r2, [r3, #24]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0204 	bic.w	r2, r2, #4
 80070ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6999      	ldr	r1, [r3, #24]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	691a      	ldr	r2, [r3, #16]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	619a      	str	r2, [r3, #24]
      break;
 80070ce:	e062      	b.n	8007196 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68b9      	ldr	r1, [r7, #8]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 fa5c 	bl	8007594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699a      	ldr	r2, [r3, #24]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6999      	ldr	r1, [r3, #24]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	021a      	lsls	r2, r3, #8
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	619a      	str	r2, [r3, #24]
      break;
 8007110:	e041      	b.n	8007196 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68b9      	ldr	r1, [r7, #8]
 8007118:	4618      	mov	r0, r3
 800711a:	f000 faaf 	bl	800767c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69da      	ldr	r2, [r3, #28]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f042 0208 	orr.w	r2, r2, #8
 800712c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69da      	ldr	r2, [r3, #28]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0204 	bic.w	r2, r2, #4
 800713c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69d9      	ldr	r1, [r3, #28]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	61da      	str	r2, [r3, #28]
      break;
 8007150:	e021      	b.n	8007196 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	4618      	mov	r0, r3
 800715a:	f000 fb03 	bl	8007764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	69da      	ldr	r2, [r3, #28]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800716c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69da      	ldr	r2, [r3, #28]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800717c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69d9      	ldr	r1, [r3, #28]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	021a      	lsls	r2, r3, #8
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	61da      	str	r2, [r3, #28]
      break;
 8007192:	e000      	b.n	8007196 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007194:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d101      	bne.n	80071c0 <HAL_TIM_ConfigClockSource+0x18>
 80071bc:	2302      	movs	r3, #2
 80071be:	e0b3      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x180>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071f8:	d03e      	beq.n	8007278 <HAL_TIM_ConfigClockSource+0xd0>
 80071fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071fe:	f200 8087 	bhi.w	8007310 <HAL_TIM_ConfigClockSource+0x168>
 8007202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007206:	f000 8085 	beq.w	8007314 <HAL_TIM_ConfigClockSource+0x16c>
 800720a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800720e:	d87f      	bhi.n	8007310 <HAL_TIM_ConfigClockSource+0x168>
 8007210:	2b70      	cmp	r3, #112	; 0x70
 8007212:	d01a      	beq.n	800724a <HAL_TIM_ConfigClockSource+0xa2>
 8007214:	2b70      	cmp	r3, #112	; 0x70
 8007216:	d87b      	bhi.n	8007310 <HAL_TIM_ConfigClockSource+0x168>
 8007218:	2b60      	cmp	r3, #96	; 0x60
 800721a:	d050      	beq.n	80072be <HAL_TIM_ConfigClockSource+0x116>
 800721c:	2b60      	cmp	r3, #96	; 0x60
 800721e:	d877      	bhi.n	8007310 <HAL_TIM_ConfigClockSource+0x168>
 8007220:	2b50      	cmp	r3, #80	; 0x50
 8007222:	d03c      	beq.n	800729e <HAL_TIM_ConfigClockSource+0xf6>
 8007224:	2b50      	cmp	r3, #80	; 0x50
 8007226:	d873      	bhi.n	8007310 <HAL_TIM_ConfigClockSource+0x168>
 8007228:	2b40      	cmp	r3, #64	; 0x40
 800722a:	d058      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x136>
 800722c:	2b40      	cmp	r3, #64	; 0x40
 800722e:	d86f      	bhi.n	8007310 <HAL_TIM_ConfigClockSource+0x168>
 8007230:	2b30      	cmp	r3, #48	; 0x30
 8007232:	d064      	beq.n	80072fe <HAL_TIM_ConfigClockSource+0x156>
 8007234:	2b30      	cmp	r3, #48	; 0x30
 8007236:	d86b      	bhi.n	8007310 <HAL_TIM_ConfigClockSource+0x168>
 8007238:	2b20      	cmp	r3, #32
 800723a:	d060      	beq.n	80072fe <HAL_TIM_ConfigClockSource+0x156>
 800723c:	2b20      	cmp	r3, #32
 800723e:	d867      	bhi.n	8007310 <HAL_TIM_ConfigClockSource+0x168>
 8007240:	2b00      	cmp	r3, #0
 8007242:	d05c      	beq.n	80072fe <HAL_TIM_ConfigClockSource+0x156>
 8007244:	2b10      	cmp	r3, #16
 8007246:	d05a      	beq.n	80072fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007248:	e062      	b.n	8007310 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	6899      	ldr	r1, [r3, #8]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f000 fb4e 	bl	80078fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800726c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	609a      	str	r2, [r3, #8]
      break;
 8007276:	e04e      	b.n	8007316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6818      	ldr	r0, [r3, #0]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	6899      	ldr	r1, [r3, #8]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f000 fb37 	bl	80078fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800729a:	609a      	str	r2, [r3, #8]
      break;
 800729c:	e03b      	b.n	8007316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	6859      	ldr	r1, [r3, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	461a      	mov	r2, r3
 80072ac:	f000 faae 	bl	800780c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2150      	movs	r1, #80	; 0x50
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fb05 	bl	80078c6 <TIM_ITRx_SetConfig>
      break;
 80072bc:	e02b      	b.n	8007316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	6859      	ldr	r1, [r3, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	461a      	mov	r2, r3
 80072cc:	f000 facc 	bl	8007868 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2160      	movs	r1, #96	; 0x60
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 faf5 	bl	80078c6 <TIM_ITRx_SetConfig>
      break;
 80072dc:	e01b      	b.n	8007316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6818      	ldr	r0, [r3, #0]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	6859      	ldr	r1, [r3, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	461a      	mov	r2, r3
 80072ec:	f000 fa8e 	bl	800780c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2140      	movs	r1, #64	; 0x40
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fae5 	bl	80078c6 <TIM_ITRx_SetConfig>
      break;
 80072fc:	e00b      	b.n	8007316 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f000 fadc 	bl	80078c6 <TIM_ITRx_SetConfig>
        break;
 800730e:	e002      	b.n	8007316 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007310:	bf00      	nop
 8007312:	e000      	b.n	8007316 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007314:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr

08007342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800734a:	bf00      	nop
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr

08007354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr

08007366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr

08007378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a3f      	ldr	r2, [pc, #252]	; (8007488 <TIM_Base_SetConfig+0x110>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d013      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007396:	d00f      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a3c      	ldr	r2, [pc, #240]	; (800748c <TIM_Base_SetConfig+0x114>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00b      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a3b      	ldr	r2, [pc, #236]	; (8007490 <TIM_Base_SetConfig+0x118>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d007      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a3a      	ldr	r2, [pc, #232]	; (8007494 <TIM_Base_SetConfig+0x11c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a39      	ldr	r2, [pc, #228]	; (8007498 <TIM_Base_SetConfig+0x120>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d108      	bne.n	80073ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a2e      	ldr	r2, [pc, #184]	; (8007488 <TIM_Base_SetConfig+0x110>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d02b      	beq.n	800742a <TIM_Base_SetConfig+0xb2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d8:	d027      	beq.n	800742a <TIM_Base_SetConfig+0xb2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a2b      	ldr	r2, [pc, #172]	; (800748c <TIM_Base_SetConfig+0x114>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d023      	beq.n	800742a <TIM_Base_SetConfig+0xb2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a2a      	ldr	r2, [pc, #168]	; (8007490 <TIM_Base_SetConfig+0x118>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d01f      	beq.n	800742a <TIM_Base_SetConfig+0xb2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a29      	ldr	r2, [pc, #164]	; (8007494 <TIM_Base_SetConfig+0x11c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d01b      	beq.n	800742a <TIM_Base_SetConfig+0xb2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a28      	ldr	r2, [pc, #160]	; (8007498 <TIM_Base_SetConfig+0x120>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d017      	beq.n	800742a <TIM_Base_SetConfig+0xb2>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a27      	ldr	r2, [pc, #156]	; (800749c <TIM_Base_SetConfig+0x124>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d013      	beq.n	800742a <TIM_Base_SetConfig+0xb2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a26      	ldr	r2, [pc, #152]	; (80074a0 <TIM_Base_SetConfig+0x128>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00f      	beq.n	800742a <TIM_Base_SetConfig+0xb2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a25      	ldr	r2, [pc, #148]	; (80074a4 <TIM_Base_SetConfig+0x12c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00b      	beq.n	800742a <TIM_Base_SetConfig+0xb2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a24      	ldr	r2, [pc, #144]	; (80074a8 <TIM_Base_SetConfig+0x130>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d007      	beq.n	800742a <TIM_Base_SetConfig+0xb2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a23      	ldr	r2, [pc, #140]	; (80074ac <TIM_Base_SetConfig+0x134>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d003      	beq.n	800742a <TIM_Base_SetConfig+0xb2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a22      	ldr	r2, [pc, #136]	; (80074b0 <TIM_Base_SetConfig+0x138>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d108      	bne.n	800743c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a09      	ldr	r2, [pc, #36]	; (8007488 <TIM_Base_SetConfig+0x110>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d003      	beq.n	8007470 <TIM_Base_SetConfig+0xf8>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a0b      	ldr	r2, [pc, #44]	; (8007498 <TIM_Base_SetConfig+0x120>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d103      	bne.n	8007478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	615a      	str	r2, [r3, #20]
}
 800747e:	bf00      	nop
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr
 8007488:	40010000 	.word	0x40010000
 800748c:	40000400 	.word	0x40000400
 8007490:	40000800 	.word	0x40000800
 8007494:	40000c00 	.word	0x40000c00
 8007498:	40010400 	.word	0x40010400
 800749c:	40014000 	.word	0x40014000
 80074a0:	40014400 	.word	0x40014400
 80074a4:	40014800 	.word	0x40014800
 80074a8:	40001800 	.word	0x40001800
 80074ac:	40001c00 	.word	0x40001c00
 80074b0:	40002000 	.word	0x40002000

080074b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f023 0201 	bic.w	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f023 0302 	bic.w	r3, r3, #2
 80074fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a20      	ldr	r2, [pc, #128]	; (800758c <TIM_OC1_SetConfig+0xd8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d003      	beq.n	8007518 <TIM_OC1_SetConfig+0x64>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a1f      	ldr	r2, [pc, #124]	; (8007590 <TIM_OC1_SetConfig+0xdc>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d10c      	bne.n	8007532 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f023 0308 	bic.w	r3, r3, #8
 800751e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f023 0304 	bic.w	r3, r3, #4
 8007530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a15      	ldr	r2, [pc, #84]	; (800758c <TIM_OC1_SetConfig+0xd8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d003      	beq.n	8007542 <TIM_OC1_SetConfig+0x8e>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a14      	ldr	r2, [pc, #80]	; (8007590 <TIM_OC1_SetConfig+0xdc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d111      	bne.n	8007566 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	4313      	orrs	r3, r2
 800755a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4313      	orrs	r3, r2
 8007564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	621a      	str	r2, [r3, #32]
}
 8007580:	bf00      	nop
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	bc80      	pop	{r7}
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	40010000 	.word	0x40010000
 8007590:	40010400 	.word	0x40010400

08007594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	f023 0210 	bic.w	r2, r3, #16
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f023 0320 	bic.w	r3, r3, #32
 80075de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	011b      	lsls	r3, r3, #4
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a21      	ldr	r2, [pc, #132]	; (8007674 <TIM_OC2_SetConfig+0xe0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d003      	beq.n	80075fc <TIM_OC2_SetConfig+0x68>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a20      	ldr	r2, [pc, #128]	; (8007678 <TIM_OC2_SetConfig+0xe4>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d10d      	bne.n	8007618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	4313      	orrs	r3, r2
 800760e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a16      	ldr	r2, [pc, #88]	; (8007674 <TIM_OC2_SetConfig+0xe0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d003      	beq.n	8007628 <TIM_OC2_SetConfig+0x94>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a15      	ldr	r2, [pc, #84]	; (8007678 <TIM_OC2_SetConfig+0xe4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d113      	bne.n	8007650 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800762e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	4313      	orrs	r3, r2
 8007642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	621a      	str	r2, [r3, #32]
}
 800766a:	bf00      	nop
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	bc80      	pop	{r7}
 8007672:	4770      	bx	lr
 8007674:	40010000 	.word	0x40010000
 8007678:	40010400 	.word	0x40010400

0800767c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0303 	bic.w	r3, r3, #3
 80076b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	021b      	lsls	r3, r3, #8
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a21      	ldr	r2, [pc, #132]	; (800775c <TIM_OC3_SetConfig+0xe0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d003      	beq.n	80076e2 <TIM_OC3_SetConfig+0x66>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a20      	ldr	r2, [pc, #128]	; (8007760 <TIM_OC3_SetConfig+0xe4>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d10d      	bne.n	80076fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a16      	ldr	r2, [pc, #88]	; (800775c <TIM_OC3_SetConfig+0xe0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d003      	beq.n	800770e <TIM_OC3_SetConfig+0x92>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a15      	ldr	r2, [pc, #84]	; (8007760 <TIM_OC3_SetConfig+0xe4>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d113      	bne.n	8007736 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800771c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	4313      	orrs	r3, r2
 8007728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	621a      	str	r2, [r3, #32]
}
 8007750:	bf00      	nop
 8007752:	371c      	adds	r7, #28
 8007754:	46bd      	mov	sp, r7
 8007756:	bc80      	pop	{r7}
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	40010000 	.word	0x40010000
 8007760:	40010400 	.word	0x40010400

08007764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800779a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	031b      	lsls	r3, r3, #12
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a11      	ldr	r2, [pc, #68]	; (8007804 <TIM_OC4_SetConfig+0xa0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_OC4_SetConfig+0x68>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a10      	ldr	r2, [pc, #64]	; (8007808 <TIM_OC4_SetConfig+0xa4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d109      	bne.n	80077e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	019b      	lsls	r3, r3, #6
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	621a      	str	r2, [r3, #32]
}
 80077fa:	bf00      	nop
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr
 8007804:	40010000 	.word	0x40010000
 8007808:	40010400 	.word	0x40010400

0800780c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	f023 0201 	bic.w	r2, r3, #1
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	4313      	orrs	r3, r2
 8007840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f023 030a 	bic.w	r3, r3, #10
 8007848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	621a      	str	r2, [r3, #32]
}
 800785e:	bf00      	nop
 8007860:	371c      	adds	r7, #28
 8007862:	46bd      	mov	sp, r7
 8007864:	bc80      	pop	{r7}
 8007866:	4770      	bx	lr

08007868 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	f023 0210 	bic.w	r2, r3, #16
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007892:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	031b      	lsls	r3, r3, #12
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	4313      	orrs	r3, r2
 800789c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	011b      	lsls	r3, r3, #4
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	621a      	str	r2, [r3, #32]
}
 80078bc:	bf00      	nop
 80078be:	371c      	adds	r7, #28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr

080078c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b085      	sub	sp, #20
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f043 0307 	orr.w	r3, r3, #7
 80078e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	609a      	str	r2, [r3, #8]
}
 80078f0:	bf00      	nop
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bc80      	pop	{r7}
 80078f8:	4770      	bx	lr

080078fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b087      	sub	sp, #28
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
 8007906:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007914:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	021a      	lsls	r2, r3, #8
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	431a      	orrs	r2, r3
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	4313      	orrs	r3, r2
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	4313      	orrs	r3, r2
 8007926:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	609a      	str	r2, [r3, #8]
}
 800792e:	bf00      	nop
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr

08007938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f003 031f 	and.w	r3, r3, #31
 800794a:	2201      	movs	r2, #1
 800794c:	fa02 f303 	lsl.w	r3, r2, r3
 8007950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a1a      	ldr	r2, [r3, #32]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	43db      	mvns	r3, r3
 800795a:	401a      	ands	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a1a      	ldr	r2, [r3, #32]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f003 031f 	and.w	r3, r3, #31
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	fa01 f303 	lsl.w	r3, r1, r3
 8007970:	431a      	orrs	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	621a      	str	r2, [r3, #32]
}
 8007976:	bf00      	nop
 8007978:	371c      	adds	r7, #28
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr

08007980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007994:	2302      	movs	r3, #2
 8007996:	e05a      	b.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a20      	ldr	r2, [pc, #128]	; (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d022      	beq.n	8007a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e4:	d01d      	beq.n	8007a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1c      	ldr	r2, [pc, #112]	; (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d018      	beq.n	8007a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1a      	ldr	r2, [pc, #104]	; (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d013      	beq.n	8007a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a19      	ldr	r2, [pc, #100]	; (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d00e      	beq.n	8007a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d009      	beq.n	8007a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a16      	ldr	r2, [pc, #88]	; (8007a6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d004      	beq.n	8007a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a14      	ldr	r2, [pc, #80]	; (8007a70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d10c      	bne.n	8007a3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bc80      	pop	{r7}
 8007a56:	4770      	bx	lr
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	40000400 	.word	0x40000400
 8007a60:	40000800 	.word	0x40000800
 8007a64:	40000c00 	.word	0x40000c00
 8007a68:	40010400 	.word	0x40010400
 8007a6c:	40014000 	.word	0x40014000
 8007a70:	40001800 	.word	0x40001800

08007a74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e03d      	b.n	8007b0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bc80      	pop	{r7}
 8007b14:	4770      	bx	lr

08007b16 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr

08007b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bc80      	pop	{r7}
 8007b38:	4770      	bx	lr

08007b3a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	f107 001c 	add.w	r0, r7, #28
 8007b48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d122      	bne.n	8007b98 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d105      	bne.n	8007b8c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f98f 	bl	8007eb0 <USB_CoreReset>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
 8007b96:	e010      	b.n	8007bba <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f983 	bl	8007eb0 <USB_CoreReset>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d10b      	bne.n	8007bd8 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f043 0206 	orr.w	r2, r3, #6
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f043 0220 	orr.w	r2, r3, #32
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007be4:	b004      	add	sp, #16
 8007be6:	4770      	bx	lr

08007be8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f043 0201 	orr.w	r2, r3, #1
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bc80      	pop	{r7}
 8007c06:	4770      	bx	lr

08007c08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f023 0201 	bic.w	r2, r3, #1
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d115      	bne.n	8007c76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c56:	2001      	movs	r0, #1
 8007c58:	f7fb f8c0 	bl	8002ddc <HAL_Delay>
      ms++;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f916 	bl	8007e94 <USB_GetMode>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d01e      	beq.n	8007cac <USB_SetCurrentMode+0x84>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b31      	cmp	r3, #49	; 0x31
 8007c72:	d9f0      	bls.n	8007c56 <USB_SetCurrentMode+0x2e>
 8007c74:	e01a      	b.n	8007cac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d115      	bne.n	8007ca8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c88:	2001      	movs	r0, #1
 8007c8a:	f7fb f8a7 	bl	8002ddc <HAL_Delay>
      ms++;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3301      	adds	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f8fd 	bl	8007e94 <USB_GetMode>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <USB_SetCurrentMode+0x84>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b31      	cmp	r3, #49	; 0x31
 8007ca4:	d9f0      	bls.n	8007c88 <USB_SetCurrentMode+0x60>
 8007ca6:	e001      	b.n	8007cac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e005      	b.n	8007cb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b32      	cmp	r3, #50	; 0x32
 8007cb0:	d101      	bne.n	8007cb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e000      	b.n	8007cb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	019b      	lsls	r3, r3, #6
 8007cd2:	f043 0220 	orr.w	r2, r3, #32
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4a08      	ldr	r2, [pc, #32]	; (8007d04 <USB_FlushTxFifo+0x44>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d901      	bls.n	8007cec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e006      	b.n	8007cfa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	f003 0320 	and.w	r3, r3, #32
 8007cf4:	2b20      	cmp	r3, #32
 8007cf6:	d0f0      	beq.n	8007cda <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bc80      	pop	{r7}
 8007d02:	4770      	bx	lr
 8007d04:	00030d40 	.word	0x00030d40

08007d08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2210      	movs	r2, #16
 8007d18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4a08      	ldr	r2, [pc, #32]	; (8007d44 <USB_FlushRxFifo+0x3c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d901      	bls.n	8007d2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e006      	b.n	8007d3a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	f003 0310 	and.w	r3, r3, #16
 8007d34:	2b10      	cmp	r3, #16
 8007d36:	d0f0      	beq.n	8007d1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bc80      	pop	{r7}
 8007d42:	4770      	bx	lr
 8007d44:	00030d40 	.word	0x00030d40

08007d48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b089      	sub	sp, #36	; 0x24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	4611      	mov	r1, r2
 8007d54:	461a      	mov	r2, r3
 8007d56:	460b      	mov	r3, r1
 8007d58:	71fb      	strb	r3, [r7, #7]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007d66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d123      	bne.n	8007db6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d6e:	88bb      	ldrh	r3, [r7, #4]
 8007d70:	3303      	adds	r3, #3
 8007d72:	089b      	lsrs	r3, r3, #2
 8007d74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d76:	2300      	movs	r3, #0
 8007d78:	61bb      	str	r3, [r7, #24]
 8007d7a:	e018      	b.n	8007dae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	031a      	lsls	r2, r3, #12
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d88:	461a      	mov	r2, r3
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	3301      	adds	r3, #1
 8007d94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	3301      	adds	r3, #1
 8007da6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	3301      	adds	r3, #1
 8007dac:	61bb      	str	r3, [r7, #24]
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d3e2      	bcc.n	8007d7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3724      	adds	r7, #36	; 0x24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bc80      	pop	{r7}
 8007dc0:	4770      	bx	lr

08007dc2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b08b      	sub	sp, #44	; 0x2c
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007dd8:	88fb      	ldrh	r3, [r7, #6]
 8007dda:	089b      	lsrs	r3, r3, #2
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007de0:	88fb      	ldrh	r3, [r7, #6]
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007de8:	2300      	movs	r3, #0
 8007dea:	623b      	str	r3, [r7, #32]
 8007dec:	e014      	b.n	8007e18 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	601a      	str	r2, [r3, #0]
    pDest++;
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	3301      	adds	r3, #1
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	3301      	adds	r3, #1
 8007e0a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	3301      	adds	r3, #1
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	3301      	adds	r3, #1
 8007e16:	623b      	str	r3, [r7, #32]
 8007e18:	6a3a      	ldr	r2, [r7, #32]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d3e6      	bcc.n	8007dee <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007e20:	8bfb      	ldrh	r3, [r7, #30]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d01e      	beq.n	8007e64 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e30:	461a      	mov	r2, r3
 8007e32:	f107 0310 	add.w	r3, r7, #16
 8007e36:	6812      	ldr	r2, [r2, #0]
 8007e38:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	fa22 f303 	lsr.w	r3, r2, r3
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	701a      	strb	r2, [r3, #0]
      i++;
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	623b      	str	r3, [r7, #32]
      pDest++;
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	3301      	adds	r3, #1
 8007e56:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007e58:	8bfb      	ldrh	r3, [r7, #30]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007e5e:	8bfb      	ldrh	r3, [r7, #30]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1ea      	bne.n	8007e3a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	372c      	adds	r7, #44	; 0x2c
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bc80      	pop	{r7}
 8007e6e:	4770      	bx	lr

08007e70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4013      	ands	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e88:	68fb      	ldr	r3, [r7, #12]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bc80      	pop	{r7}
 8007e92:	4770      	bx	lr

08007e94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bc80      	pop	{r7}
 8007eac:	4770      	bx	lr
	...

08007eb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	4a12      	ldr	r2, [pc, #72]	; (8007f10 <USB_CoreReset+0x60>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d901      	bls.n	8007ece <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e01b      	b.n	8007f06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	daf2      	bge.n	8007ebc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	f043 0201 	orr.w	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4a08      	ldr	r2, [pc, #32]	; (8007f10 <USB_CoreReset+0x60>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d901      	bls.n	8007ef8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e006      	b.n	8007f06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d0f0      	beq.n	8007ee6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc80      	pop	{r7}
 8007f0e:	4770      	bx	lr
 8007f10:	00030d40 	.word	0x00030d40

08007f14 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f14:	b084      	sub	sp, #16
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	f107 001c 	add.w	r0, r7, #28
 8007f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f30:	461a      	mov	r2, r3
 8007f32:	2300      	movs	r3, #0
 8007f34:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f46:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d018      	beq.n	8007f98 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d10a      	bne.n	8007f82 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f7a:	f043 0304 	orr.w	r3, r3, #4
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	e014      	b.n	8007fac <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f90:	f023 0304 	bic.w	r3, r3, #4
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	e009      	b.n	8007fac <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fa6:	f023 0304 	bic.w	r3, r3, #4
 8007faa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007fac:	2110      	movs	r1, #16
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff fe86 	bl	8007cc0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff fea7 	bl	8007d08 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	e015      	b.n	8007fec <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fcc:	461a      	mov	r2, r3
 8007fce:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d3e5      	bcc.n	8007fc0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8008000:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008014:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a13      	ldr	r2, [pc, #76]	; (8008068 <USB_HostInit+0x154>)
 800801a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a13      	ldr	r2, [pc, #76]	; (800806c <USB_HostInit+0x158>)
 8008020:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008024:	e009      	b.n	800803a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2280      	movs	r2, #128	; 0x80
 800802a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a10      	ldr	r2, [pc, #64]	; (8008070 <USB_HostInit+0x15c>)
 8008030:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a0f      	ldr	r2, [pc, #60]	; (8008074 <USB_HostInit+0x160>)
 8008036:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	2b00      	cmp	r3, #0
 800803e:	d105      	bne.n	800804c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	f043 0210 	orr.w	r2, r3, #16
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	699a      	ldr	r2, [r3, #24]
 8008050:	4b09      	ldr	r3, [pc, #36]	; (8008078 <USB_HostInit+0x164>)
 8008052:	4313      	orrs	r3, r2
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008064:	b004      	add	sp, #16
 8008066:	4770      	bx	lr
 8008068:	01000200 	.word	0x01000200
 800806c:	00e00300 	.word	0x00e00300
 8008070:	00600080 	.word	0x00600080
 8008074:	004000e0 	.word	0x004000e0
 8008078:	a3200008 	.word	0xa3200008

0800807c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800809a:	f023 0303 	bic.w	r3, r3, #3
 800809e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	68f9      	ldr	r1, [r7, #12]
 80080b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080b4:	4313      	orrs	r3, r2
 80080b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80080b8:	78fb      	ldrb	r3, [r7, #3]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d107      	bne.n	80080ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080c4:	461a      	mov	r2, r3
 80080c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80080ca:	6053      	str	r3, [r2, #4]
 80080cc:	e009      	b.n	80080e2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d106      	bne.n	80080e2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080da:	461a      	mov	r2, r3
 80080dc:	f241 7370 	movw	r3, #6000	; 0x1770
 80080e0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bc80      	pop	{r7}
 80080ec:	4770      	bx	lr

080080ee <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800810e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800811c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800811e:	2064      	movs	r0, #100	; 0x64
 8008120:	f7fa fe5c 	bl	8002ddc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800812c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008130:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008132:	200a      	movs	r0, #10
 8008134:	f7fa fe52 	bl	8002ddc <HAL_Delay>

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008152:	2300      	movs	r3, #0
 8008154:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008166:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d109      	bne.n	8008186 <USB_DriveVbus+0x44>
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d106      	bne.n	8008186 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008184:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800818c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008190:	d109      	bne.n	80081a6 <USB_DriveVbus+0x64>
 8008192:	78fb      	ldrb	r3, [r7, #3]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d106      	bne.n	80081a6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80081a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081a4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bc80      	pop	{r7}
 80081b0:	4770      	bx	lr

080081b2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	0c5b      	lsrs	r3, r3, #17
 80081d0:	f003 0303 	and.w	r3, r3, #3
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr

080081de <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80081de:	b480      	push	{r7}
 80081e0:	b085      	sub	sp, #20
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	b29b      	uxth	r3, r3
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bc80      	pop	{r7}
 80081fc:	4770      	bx	lr
	...

08008200 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	4608      	mov	r0, r1
 800820a:	4611      	mov	r1, r2
 800820c:	461a      	mov	r2, r3
 800820e:	4603      	mov	r3, r0
 8008210:	70fb      	strb	r3, [r7, #3]
 8008212:	460b      	mov	r3, r1
 8008214:	70bb      	strb	r3, [r7, #2]
 8008216:	4613      	mov	r3, r2
 8008218:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008222:	78fb      	ldrb	r3, [r7, #3]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	4413      	add	r3, r2
 800822a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800822e:	461a      	mov	r2, r3
 8008230:	f04f 33ff 	mov.w	r3, #4294967295
 8008234:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008236:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800823a:	2b03      	cmp	r3, #3
 800823c:	d87e      	bhi.n	800833c <USB_HC_Init+0x13c>
 800823e:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <USB_HC_Init+0x44>)
 8008240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008244:	08008255 	.word	0x08008255
 8008248:	080082ff 	.word	0x080082ff
 800824c:	08008255 	.word	0x08008255
 8008250:	080082c1 	.word	0x080082c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008254:	78fb      	ldrb	r3, [r7, #3]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	4413      	add	r3, r2
 800825c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008260:	461a      	mov	r2, r3
 8008262:	f240 439d 	movw	r3, #1181	; 0x49d
 8008266:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008268:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800826c:	2b00      	cmp	r3, #0
 800826e:	da10      	bge.n	8008292 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	4413      	add	r3, r2
 8008278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	78fa      	ldrb	r2, [r7, #3]
 8008280:	0151      	lsls	r1, r2, #5
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	440a      	add	r2, r1
 8008286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800828a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800828e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008290:	e057      	b.n	8008342 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800829a:	2b00      	cmp	r3, #0
 800829c:	d051      	beq.n	8008342 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	78fa      	ldrb	r2, [r7, #3]
 80082ae:	0151      	lsls	r1, r2, #5
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	440a      	add	r2, r1
 80082b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80082bc:	60d3      	str	r3, [r2, #12]
      break;
 80082be:	e040      	b.n	8008342 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082cc:	461a      	mov	r2, r3
 80082ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80082d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	da34      	bge.n	8008346 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	78fa      	ldrb	r2, [r7, #3]
 80082ec:	0151      	lsls	r1, r2, #5
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	440a      	add	r2, r1
 80082f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80082fc:	e023      	b.n	8008346 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082fe:	78fb      	ldrb	r3, [r7, #3]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	4413      	add	r3, r2
 8008306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830a:	461a      	mov	r2, r3
 800830c:	f240 2325 	movw	r3, #549	; 0x225
 8008310:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008312:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008316:	2b00      	cmp	r3, #0
 8008318:	da17      	bge.n	800834a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800831a:	78fb      	ldrb	r3, [r7, #3]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	4413      	add	r3, r2
 8008322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	78fa      	ldrb	r2, [r7, #3]
 800832a:	0151      	lsls	r1, r2, #5
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	440a      	add	r2, r1
 8008330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008334:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008338:	60d3      	str	r3, [r2, #12]
      }
      break;
 800833a:	e006      	b.n	800834a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	77fb      	strb	r3, [r7, #31]
      break;
 8008340:	e004      	b.n	800834c <USB_HC_Init+0x14c>
      break;
 8008342:	bf00      	nop
 8008344:	e002      	b.n	800834c <USB_HC_Init+0x14c>
      break;
 8008346:	bf00      	nop
 8008348:	e000      	b.n	800834c <USB_HC_Init+0x14c>
      break;
 800834a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008352:	699a      	ldr	r2, [r3, #24]
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	f003 030f 	and.w	r3, r3, #15
 800835a:	2101      	movs	r1, #1
 800835c:	fa01 f303 	lsl.w	r3, r1, r3
 8008360:	6939      	ldr	r1, [r7, #16]
 8008362:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008366:	4313      	orrs	r3, r2
 8008368:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008376:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800837a:	2b00      	cmp	r3, #0
 800837c:	da03      	bge.n	8008386 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800837e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008382:	61bb      	str	r3, [r7, #24]
 8008384:	e001      	b.n	800838a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff ff11 	bl	80081b2 <USB_GetHostSpeed>
 8008390:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008392:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008396:	2b02      	cmp	r3, #2
 8008398:	d106      	bne.n	80083a8 <USB_HC_Init+0x1a8>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b02      	cmp	r3, #2
 800839e:	d003      	beq.n	80083a8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80083a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80083a4:	617b      	str	r3, [r7, #20]
 80083a6:	e001      	b.n	80083ac <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083ac:	787b      	ldrb	r3, [r7, #1]
 80083ae:	059b      	lsls	r3, r3, #22
 80083b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083b4:	78bb      	ldrb	r3, [r7, #2]
 80083b6:	02db      	lsls	r3, r3, #11
 80083b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083c2:	049b      	lsls	r3, r3, #18
 80083c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80083cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083d6:	78fb      	ldrb	r3, [r7, #3]
 80083d8:	0159      	lsls	r1, r3, #5
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	440b      	add	r3, r1
 80083de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083e8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80083ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d10f      	bne.n	8008412 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80083f2:	78fb      	ldrb	r3, [r7, #3]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	78fa      	ldrb	r2, [r7, #3]
 8008402:	0151      	lsls	r1, r2, #5
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	440a      	add	r2, r1
 8008408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800840c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008410:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008412:	7ffb      	ldrb	r3, [r7, #31]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3720      	adds	r7, #32
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08c      	sub	sp, #48	; 0x30
 8008420:	af02      	add	r7, sp, #8
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	785b      	ldrb	r3, [r3, #1]
 8008432:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008438:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008442:	2b00      	cmp	r3, #0
 8008444:	d02d      	beq.n	80084a2 <USB_HC_StartXfer+0x86>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	791b      	ldrb	r3, [r3, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d129      	bne.n	80084a2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800844e:	79fb      	ldrb	r3, [r7, #7]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d117      	bne.n	8008484 <USB_HC_StartXfer+0x68>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	79db      	ldrb	r3, [r3, #7]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <USB_HC_StartXfer+0x48>
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	79db      	ldrb	r3, [r3, #7]
 8008460:	2b02      	cmp	r3, #2
 8008462:	d10f      	bne.n	8008484 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	4413      	add	r3, r2
 800846c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	69fa      	ldr	r2, [r7, #28]
 8008474:	0151      	lsls	r1, r2, #5
 8008476:	6a3a      	ldr	r2, [r7, #32]
 8008478:	440a      	add	r2, r1
 800847a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800847e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008482:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008484:	79fb      	ldrb	r3, [r7, #7]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10b      	bne.n	80084a2 <USB_HC_StartXfer+0x86>
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	795b      	ldrb	r3, [r3, #5]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d107      	bne.n	80084a2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	4619      	mov	r1, r3
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 fa2d 	bl	80088f8 <USB_DoPing>
      return HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	e0f8      	b.n	8008694 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d018      	beq.n	80084dc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	8912      	ldrh	r2, [r2, #8]
 80084b2:	4413      	add	r3, r2
 80084b4:	3b01      	subs	r3, #1
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	8912      	ldrh	r2, [r2, #8]
 80084ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80084be:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80084c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084c2:	8b7b      	ldrh	r3, [r7, #26]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d90b      	bls.n	80084e0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80084c8:	8b7b      	ldrh	r3, [r7, #26]
 80084ca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	8912      	ldrh	r2, [r2, #8]
 80084d2:	fb02 f203 	mul.w	r2, r2, r3
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	611a      	str	r2, [r3, #16]
 80084da:	e001      	b.n	80084e0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80084dc:	2301      	movs	r3, #1
 80084de:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	78db      	ldrb	r3, [r3, #3]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d007      	beq.n	80084f8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	8912      	ldrh	r2, [r2, #8]
 80084ee:	fb02 f203 	mul.w	r2, r2, r3
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	611a      	str	r2, [r3, #16]
 80084f6:	e003      	b.n	8008500 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	695a      	ldr	r2, [r3, #20]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008508:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800850a:	04d9      	lsls	r1, r3, #19
 800850c:	4b63      	ldr	r3, [pc, #396]	; (800869c <USB_HC_StartXfer+0x280>)
 800850e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008510:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	7a9b      	ldrb	r3, [r3, #10]
 8008516:	075b      	lsls	r3, r3, #29
 8008518:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800851c:	69f9      	ldr	r1, [r7, #28]
 800851e:	0148      	lsls	r0, r1, #5
 8008520:	6a39      	ldr	r1, [r7, #32]
 8008522:	4401      	add	r1, r0
 8008524:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008528:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800852a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800852c:	79fb      	ldrb	r3, [r7, #7]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d009      	beq.n	8008546 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	68d9      	ldr	r1, [r3, #12]
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	4413      	add	r3, r2
 800853e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008542:	460a      	mov	r2, r1
 8008544:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	bf0c      	ite	eq
 8008556:	2301      	moveq	r3, #1
 8008558:	2300      	movne	r3, #0
 800855a:	b2db      	uxtb	r3, r3
 800855c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	4413      	add	r3, r2
 8008566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	69fa      	ldr	r2, [r7, #28]
 800856e:	0151      	lsls	r1, r2, #5
 8008570:	6a3a      	ldr	r2, [r7, #32]
 8008572:	440a      	add	r2, r1
 8008574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008578:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800857c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	4413      	add	r3, r2
 8008586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	7e7b      	ldrb	r3, [r7, #25]
 800858e:	075b      	lsls	r3, r3, #29
 8008590:	69f9      	ldr	r1, [r7, #28]
 8008592:	0148      	lsls	r0, r1, #5
 8008594:	6a39      	ldr	r1, [r7, #32]
 8008596:	4401      	add	r1, r0
 8008598:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800859c:	4313      	orrs	r3, r2
 800859e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085b6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	78db      	ldrb	r3, [r3, #3]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d004      	beq.n	80085ca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	e003      	b.n	80085d2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085d0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085d8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e6:	461a      	mov	r2, r3
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	e04e      	b.n	8008694 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	78db      	ldrb	r3, [r3, #3]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d149      	bne.n	8008692 <USB_HC_StartXfer+0x276>
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d045      	beq.n	8008692 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	79db      	ldrb	r3, [r3, #7]
 800860a:	2b03      	cmp	r3, #3
 800860c:	d830      	bhi.n	8008670 <USB_HC_StartXfer+0x254>
 800860e:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <USB_HC_StartXfer+0x1f8>)
 8008610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008614:	08008625 	.word	0x08008625
 8008618:	08008649 	.word	0x08008649
 800861c:	08008625 	.word	0x08008625
 8008620:	08008649 	.word	0x08008649
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	3303      	adds	r3, #3
 800862a:	089b      	lsrs	r3, r3, #2
 800862c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800862e:	8afa      	ldrh	r2, [r7, #22]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008634:	b29b      	uxth	r3, r3
 8008636:	429a      	cmp	r2, r3
 8008638:	d91c      	bls.n	8008674 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	f043 0220 	orr.w	r2, r3, #32
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	619a      	str	r2, [r3, #24]
        }
        break;
 8008646:	e015      	b.n	8008674 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	3303      	adds	r3, #3
 800864e:	089b      	lsrs	r3, r3, #2
 8008650:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008652:	8afa      	ldrh	r2, [r7, #22]
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	b29b      	uxth	r3, r3
 800865e:	429a      	cmp	r2, r3
 8008660:	d90a      	bls.n	8008678 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	619a      	str	r2, [r3, #24]
        }
        break;
 800866e:	e003      	b.n	8008678 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008670:	bf00      	nop
 8008672:	e002      	b.n	800867a <USB_HC_StartXfer+0x25e>
        break;
 8008674:	bf00      	nop
 8008676:	e000      	b.n	800867a <USB_HC_StartXfer+0x25e>
        break;
 8008678:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	68d9      	ldr	r1, [r3, #12]
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	785a      	ldrb	r2, [r3, #1]
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	b29b      	uxth	r3, r3
 8008688:	2000      	movs	r0, #0
 800868a:	9000      	str	r0, [sp, #0]
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f7ff fb5b 	bl	8007d48 <USB_WritePacket>
  }

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3728      	adds	r7, #40	; 0x28
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	1ff80000 	.word	0x1ff80000

080086a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	b29b      	uxth	r3, r3
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr

080086c0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b089      	sub	sp, #36	; 0x24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	015a      	lsls	r2, r3, #5
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	0c9b      	lsrs	r3, r3, #18
 80086e8:	f003 0303 	and.w	r3, r3, #3
 80086ec:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	015a      	lsls	r2, r3, #5
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	0fdb      	lsrs	r3, r3, #31
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f003 0320 	and.w	r3, r3, #32
 800870c:	2b20      	cmp	r3, #32
 800870e:	d104      	bne.n	800871a <USB_HC_Halt+0x5a>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	e0e8      	b.n	80088ec <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <USB_HC_Halt+0x66>
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d173      	bne.n	800880e <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	4413      	add	r3, r2
 800872e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	0151      	lsls	r1, r2, #5
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	440a      	add	r2, r1
 800873c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008744:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	f040 80cb 	bne.w	80088ea <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d143      	bne.n	80087e8 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	4413      	add	r3, r2
 8008768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	0151      	lsls	r1, r2, #5
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	440a      	add	r2, r1
 8008776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800877a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800877e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	4413      	add	r3, r2
 8008788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	0151      	lsls	r1, r2, #5
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	440a      	add	r2, r1
 8008796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800879a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800879e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	0151      	lsls	r1, r2, #5
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	440a      	add	r2, r1
 80087b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087be:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	3301      	adds	r3, #1
 80087c4:	61fb      	str	r3, [r7, #28]
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087cc:	d81d      	bhi.n	800880a <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087e4:	d0ec      	beq.n	80087c0 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087e6:	e080      	b.n	80088ea <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	0151      	lsls	r1, r2, #5
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	440a      	add	r2, r1
 80087fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008802:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008806:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008808:	e06f      	b.n	80088ea <USB_HC_Halt+0x22a>
            break;
 800880a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800880c:	e06d      	b.n	80088ea <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	4413      	add	r3, r2
 8008816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	0151      	lsls	r1, r2, #5
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	440a      	add	r2, r1
 8008824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008828:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800882c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d143      	bne.n	80088c6 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	4413      	add	r3, r2
 8008846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	0151      	lsls	r1, r2, #5
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	440a      	add	r2, r1
 8008854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800885c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	4413      	add	r3, r2
 8008866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	0151      	lsls	r1, r2, #5
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	440a      	add	r2, r1
 8008874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008878:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800887c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	4413      	add	r3, r2
 8008886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	0151      	lsls	r1, r2, #5
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	440a      	add	r2, r1
 8008894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008898:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800889c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	3301      	adds	r3, #1
 80088a2:	61fb      	str	r3, [r7, #28]
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088aa:	d81d      	bhi.n	80088e8 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088c2:	d0ec      	beq.n	800889e <USB_HC_Halt+0x1de>
 80088c4:	e011      	b.n	80088ea <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	0151      	lsls	r1, r2, #5
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	440a      	add	r2, r1
 80088dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	e000      	b.n	80088ea <USB_HC_Halt+0x22a>
          break;
 80088e8:	bf00      	nop
    }
  }

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3724      	adds	r7, #36	; 0x24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bc80      	pop	{r7}
 80088f4:	4770      	bx	lr
	...

080088f8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008908:	78fb      	ldrb	r3, [r7, #3]
 800890a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800890c:	2301      	movs	r3, #1
 800890e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	04da      	lsls	r2, r3, #19
 8008914:	4b14      	ldr	r3, [pc, #80]	; (8008968 <USB_DoPing+0x70>)
 8008916:	4013      	ands	r3, r2
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	0151      	lsls	r1, r2, #5
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	440a      	add	r2, r1
 8008920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008928:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	015a      	lsls	r2, r3, #5
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	4413      	add	r3, r2
 8008932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008940:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008948:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	4413      	add	r3, r2
 8008952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008956:	461a      	mov	r2, r3
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	371c      	adds	r7, #28
 8008962:	46bd      	mov	sp, r7
 8008964:	bc80      	pop	{r7}
 8008966:	4770      	bx	lr
 8008968:	1ff80000 	.word	0x1ff80000

0800896c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff f943 	bl	8007c08 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008982:	2110      	movs	r1, #16
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7ff f99b 	bl	8007cc0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff f9bc 	bl	8007d08 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008990:	2300      	movs	r3, #0
 8008992:	613b      	str	r3, [r7, #16]
 8008994:	e01f      	b.n	80089d6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4413      	add	r3, r2
 800899e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089bc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ca:	461a      	mov	r2, r3
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	3301      	adds	r3, #1
 80089d4:	613b      	str	r3, [r7, #16]
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	2b0f      	cmp	r3, #15
 80089da:	d9dc      	bls.n	8008996 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80089dc:	2300      	movs	r3, #0
 80089de:	613b      	str	r3, [r7, #16]
 80089e0:	e034      	b.n	8008a4c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a00:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a08:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a16:	461a      	mov	r2, r3
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	617b      	str	r3, [r7, #20]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a28:	d80c      	bhi.n	8008a44 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a40:	d0ec      	beq.n	8008a1c <USB_StopHost+0xb0>
 8008a42:	e000      	b.n	8008a46 <USB_StopHost+0xda>
        break;
 8008a44:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	613b      	str	r3, [r7, #16]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	2b0f      	cmp	r3, #15
 8008a50:	d9c7      	bls.n	80089e2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f04f 32ff 	mov.w	r2, #4294967295
 8008a66:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
	...

08008a74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008a78:	4904      	ldr	r1, [pc, #16]	; (8008a8c <MX_FATFS_Init+0x18>)
 8008a7a:	4805      	ldr	r0, [pc, #20]	; (8008a90 <MX_FATFS_Init+0x1c>)
 8008a7c:	f005 f812 	bl	800daa4 <FATFS_LinkDriver>
 8008a80:	4603      	mov	r3, r0
 8008a82:	461a      	mov	r2, r3
 8008a84:	4b03      	ldr	r3, [pc, #12]	; (8008a94 <MX_FATFS_Init+0x20>)
 8008a86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008a88:	bf00      	nop
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	2000aa2c 	.word	0x2000aa2c
 8008a90:	08015b98 	.word	0x08015b98
 8008a94:	2000ae90 	.word	0x2000ae90

08008a98 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008a98:	b590      	push	{r4, r7, lr}
 8008a9a:	b089      	sub	sp, #36	; 0x24
 8008a9c:	af04      	add	r7, sp, #16
 8008a9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008aa6:	7919      	ldrb	r1, [r3, #4]
 8008aa8:	2350      	movs	r3, #80	; 0x50
 8008aaa:	2206      	movs	r2, #6
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f001 fd3c 	bl	800a52a <USBH_FindInterface>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	2bff      	cmp	r3, #255	; 0xff
 8008aba:	d002      	beq.n	8008ac2 <USBH_MSC_InterfaceInit+0x2a>
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d901      	bls.n	8008ac6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e0ef      	b.n	8008ca6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f001 fd12 	bl	800a4f4 <USBH_SelectInterface>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008ada:	2302      	movs	r3, #2
 8008adc:	e0e3      	b.n	8008ca6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8008ae4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008ae8:	f008 fbec 	bl	80112c4 <malloc>
 8008aec:	4603      	mov	r3, r0
 8008aee:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008b00:	2302      	movs	r3, #2
 8008b02:	e0d0      	b.n	8008ca6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b08:	2100      	movs	r1, #0
 8008b0a:	68b8      	ldr	r0, [r7, #8]
 8008b0c:	f008 fbf8 	bl	8011300 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	211a      	movs	r1, #26
 8008b16:	fb01 f303 	mul.w	r3, r1, r3
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	b25b      	sxtb	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	da16      	bge.n	8008b56 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	211a      	movs	r1, #26
 8008b2e:	fb01 f303 	mul.w	r3, r1, r3
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008b38:	781a      	ldrb	r2, [r3, #0]
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	211a      	movs	r1, #26
 8008b44:	fb01 f303 	mul.w	r3, r1, r3
 8008b48:	4413      	add	r3, r2
 8008b4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b4e:	881a      	ldrh	r2, [r3, #0]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	815a      	strh	r2, [r3, #10]
 8008b54:	e015      	b.n	8008b82 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	211a      	movs	r1, #26
 8008b5c:	fb01 f303 	mul.w	r3, r1, r3
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008b66:	781a      	ldrb	r2, [r3, #0]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	211a      	movs	r1, #26
 8008b72:	fb01 f303 	mul.w	r3, r1, r3
 8008b76:	4413      	add	r3, r2
 8008b78:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b7c:	881a      	ldrh	r2, [r3, #0]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	211a      	movs	r1, #26
 8008b88:	fb01 f303 	mul.w	r3, r1, r3
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	b25b      	sxtb	r3, r3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	da16      	bge.n	8008bc8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	211a      	movs	r1, #26
 8008ba0:	fb01 f303 	mul.w	r3, r1, r3
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008baa:	781a      	ldrb	r2, [r3, #0]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	211a      	movs	r1, #26
 8008bb6:	fb01 f303 	mul.w	r3, r1, r3
 8008bba:	4413      	add	r3, r2
 8008bbc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008bc0:	881a      	ldrh	r2, [r3, #0]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	815a      	strh	r2, [r3, #10]
 8008bc6:	e015      	b.n	8008bf4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	211a      	movs	r1, #26
 8008bce:	fb01 f303 	mul.w	r3, r1, r3
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008bd8:	781a      	ldrb	r2, [r3, #0]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	211a      	movs	r1, #26
 8008be4:	fb01 f303 	mul.w	r3, r1, r3
 8008be8:	4413      	add	r3, r2
 8008bea:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008bee:	881a      	ldrh	r2, [r3, #0]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2200      	movs	r2, #0
 8008c04:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	799b      	ldrb	r3, [r3, #6]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f002 ff78 	bl	800bb02 <USBH_AllocPipe>
 8008c12:	4603      	mov	r3, r0
 8008c14:	461a      	mov	r2, r3
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	79db      	ldrb	r3, [r3, #7]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f002 ff6e 	bl	800bb02 <USBH_AllocPipe>
 8008c26:	4603      	mov	r3, r0
 8008c28:	461a      	mov	r2, r3
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fdec 	bl	800980c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	7959      	ldrb	r1, [r3, #5]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	7998      	ldrb	r0, [r3, #6]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	8912      	ldrh	r2, [r2, #8]
 8008c4c:	9202      	str	r2, [sp, #8]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	9201      	str	r2, [sp, #4]
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	4623      	mov	r3, r4
 8008c56:	4602      	mov	r2, r0
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f002 ff23 	bl	800baa4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	7919      	ldrb	r1, [r3, #4]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	79d8      	ldrb	r0, [r3, #7]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	8952      	ldrh	r2, [r2, #10]
 8008c76:	9202      	str	r2, [sp, #8]
 8008c78:	2202      	movs	r2, #2
 8008c7a:	9201      	str	r2, [sp, #4]
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	4623      	mov	r3, r4
 8008c80:	4602      	mov	r2, r0
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f002 ff0e 	bl	800baa4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	791b      	ldrb	r3, [r3, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f008 f941 	bl	8010f18 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	795b      	ldrb	r3, [r3, #5]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f008 f93a 	bl	8010f18 <USBH_LL_SetToggle>

  return USBH_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd90      	pop	{r4, r7, pc}

08008cae <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	795b      	ldrb	r3, [r3, #5]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00e      	beq.n	8008ce6 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	795b      	ldrb	r3, [r3, #5]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f002 ff07 	bl	800bae2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	795b      	ldrb	r3, [r3, #5]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f002 ff31 	bl	800bb42 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	791b      	ldrb	r3, [r3, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00e      	beq.n	8008d0c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	791b      	ldrb	r3, [r3, #4]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f002 fef4 	bl	800bae2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	791b      	ldrb	r3, [r3, #4]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f002 ff1e 	bl	800bb42 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d12:	69db      	ldr	r3, [r3, #28]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00b      	beq.n	8008d30 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f008 fad7 	bl	80112d4 <free>
    phost->pActiveClass->pData = 0U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	7b9b      	ldrb	r3, [r3, #14]
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d042      	beq.n	8008dde <USBH_MSC_ClassRequest+0xa4>
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	dc4c      	bgt.n	8008df6 <USBH_MSC_ClassRequest+0xbc>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <USBH_MSC_ClassRequest+0x2a>
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d148      	bne.n	8008df6 <USBH_MSC_ClassRequest+0xbc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fd31 	bl	80097d0 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d104      	bne.n	8008d82 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d138      	bne.n	8008dfa <USBH_MSC_ClassRequest+0xc0>
      {
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d804      	bhi.n	8008d9c <USBH_MSC_ClassRequest+0x62>
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	3301      	adds	r3, #1
 8008d9a:	e000      	b.n	8008d9e <USBH_MSC_ClassRequest+0x64>
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	6013      	str	r3, [r2, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008da2:	2300      	movs	r3, #0
 8008da4:	73bb      	strb	r3, [r7, #14]
 8008da6:	e014      	b.n	8008dd2 <USBH_MSC_ClassRequest+0x98>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	2134      	movs	r1, #52	; 0x34
 8008dae:	fb01 f303 	mul.w	r3, r1, r3
 8008db2:	4413      	add	r3, r2
 8008db4:	3392      	adds	r3, #146	; 0x92
 8008db6:	2202      	movs	r2, #2
 8008db8:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	2134      	movs	r1, #52	; 0x34
 8008dc0:	fb01 f303 	mul.w	r3, r1, r3
 8008dc4:	4413      	add	r3, r2
 8008dc6:	33c1      	adds	r3, #193	; 0xc1
 8008dc8:	2200      	movs	r2, #0
 8008dca:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008dcc:	7bbb      	ldrb	r3, [r7, #14]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	73bb      	strb	r3, [r7, #14]
 8008dd2:	7bba      	ldrb	r2, [r7, #14]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d3e5      	bcc.n	8008da8 <USBH_MSC_ClassRequest+0x6e>
        }
      }
      break;
 8008ddc:	e00d      	b.n	8008dfa <USBH_MSC_ClassRequest+0xc0>

    case MSC_REQ_ERROR :
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008dde:	2100      	movs	r1, #0
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f002 f950 	bl	800b086 <USBH_ClrFeature>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d108      	bne.n	8008dfe <USBH_MSC_ClassRequest+0xc4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	7bda      	ldrb	r2, [r3, #15]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008df4:	e003      	b.n	8008dfe <USBH_MSC_ClassRequest+0xc4>

    default:
      break;
 8008df6:	bf00      	nop
 8008df8:	e002      	b.n	8008e00 <USBH_MSC_ClassRequest+0xc6>
      break;
 8008dfa:	bf00      	nop
 8008dfc:	e000      	b.n	8008e00 <USBH_MSC_ClassRequest+0xc6>
      break;
 8008dfe:	bf00      	nop
  }

  return status;
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008e22:	2301      	movs	r3, #1
 8008e24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008e26:	2301      	movs	r3, #1
 8008e28:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	7b1b      	ldrb	r3, [r3, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <USBH_MSC_Process+0x2e>
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	f000 828d 	beq.w	8009352 <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008e38:	e28e      	b.n	8009358 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e40:	461a      	mov	r2, r3
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	f080 8267 	bcs.w	800931a <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e52:	4619      	mov	r1, r3
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	2334      	movs	r3, #52	; 0x34
 8008e58:	fb03 f301 	mul.w	r3, r3, r1
 8008e5c:	4413      	add	r3, r2
 8008e5e:	3391      	adds	r3, #145	; 0x91
 8008e60:	2201      	movs	r2, #1
 8008e62:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	2334      	movs	r3, #52	; 0x34
 8008e70:	fb03 f301 	mul.w	r3, r3, r1
 8008e74:	4413      	add	r3, r2
 8008e76:	3390      	adds	r3, #144	; 0x90
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b08      	cmp	r3, #8
 8008e7c:	f200 8235 	bhi.w	80092ea <USBH_MSC_Process+0x4de>
 8008e80:	a201      	add	r2, pc, #4	; (adr r2, 8008e88 <USBH_MSC_Process+0x7c>)
 8008e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e86:	bf00      	nop
 8008e88:	08008ead 	.word	0x08008ead
 8008e8c:	080092eb 	.word	0x080092eb
 8008e90:	08008f75 	.word	0x08008f75
 8008e94:	080090f9 	.word	0x080090f9
 8008e98:	08008ed3 	.word	0x08008ed3
 8008e9c:	080091c5 	.word	0x080091c5
 8008ea0:	080092eb 	.word	0x080092eb
 8008ea4:	080092eb 	.word	0x080092eb
 8008ea8:	080092d9 	.word	0x080092d9
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	2334      	movs	r3, #52	; 0x34
 8008eb8:	fb03 f301 	mul.w	r3, r3, r1
 8008ebc:	4413      	add	r3, r2
 8008ebe:	3390      	adds	r3, #144	; 0x90
 8008ec0:	2204      	movs	r2, #4
 8008ec2:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008ed0:	e214      	b.n	80092fc <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ed8:	b2d9      	uxtb	r1, r3
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	2334      	movs	r3, #52	; 0x34
 8008ee4:	fb03 f302 	mul.w	r3, r3, r2
 8008ee8:	3398      	adds	r3, #152	; 0x98
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	4413      	add	r3, r2
 8008eee:	3307      	adds	r3, #7
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f001 f834 	bl	8009f60 <USBH_MSC_SCSI_Inquiry>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10b      	bne.n	8008f1a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f08:	4619      	mov	r1, r3
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	2334      	movs	r3, #52	; 0x34
 8008f0e:	fb03 f301 	mul.w	r3, r3, r1
 8008f12:	4413      	add	r3, r2
 8008f14:	3390      	adds	r3, #144	; 0x90
 8008f16:	2202      	movs	r2, #2
 8008f18:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d10c      	bne.n	8008f3a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f26:	4619      	mov	r1, r3
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	2334      	movs	r3, #52	; 0x34
 8008f2c:	fb03 f301 	mul.w	r3, r3, r1
 8008f30:	4413      	add	r3, r2
 8008f32:	3390      	adds	r3, #144	; 0x90
 8008f34:	2205      	movs	r2, #5
 8008f36:	701a      	strb	r2, [r3, #0]
            break;
 8008f38:	e1d9      	b.n	80092ee <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	f040 81d6 	bne.w	80092ee <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f48:	4619      	mov	r1, r3
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	2334      	movs	r3, #52	; 0x34
 8008f4e:	fb03 f301 	mul.w	r3, r3, r1
 8008f52:	4413      	add	r3, r2
 8008f54:	3390      	adds	r3, #144	; 0x90
 8008f56:	2201      	movs	r2, #1
 8008f58:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f60:	4619      	mov	r1, r3
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	2334      	movs	r3, #52	; 0x34
 8008f66:	fb03 f301 	mul.w	r3, r3, r1
 8008f6a:	4413      	add	r3, r2
 8008f6c:	3391      	adds	r3, #145	; 0x91
 8008f6e:	2202      	movs	r2, #2
 8008f70:	701a      	strb	r2, [r3, #0]
            break;
 8008f72:	e1bc      	b.n	80092ee <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 ff30 	bl	8009de4 <USBH_MSC_SCSI_TestUnitReady>
 8008f84:	4603      	mov	r3, r0
 8008f86:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008f88:	7bbb      	ldrb	r3, [r7, #14]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d149      	bne.n	8009022 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f94:	4619      	mov	r1, r3
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	2334      	movs	r3, #52	; 0x34
 8008f9a:	fb03 f301 	mul.w	r3, r3, r1
 8008f9e:	4413      	add	r3, r2
 8008fa0:	3392      	adds	r3, #146	; 0x92
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00c      	beq.n	8008fc2 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fae:	4619      	mov	r1, r3
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	2334      	movs	r3, #52	; 0x34
 8008fb4:	fb03 f301 	mul.w	r3, r3, r1
 8008fb8:	4413      	add	r3, r2
 8008fba:	33c1      	adds	r3, #193	; 0xc1
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	701a      	strb	r2, [r3, #0]
 8008fc0:	e00b      	b.n	8008fda <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fc8:	4619      	mov	r1, r3
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	2334      	movs	r3, #52	; 0x34
 8008fce:	fb03 f301 	mul.w	r3, r3, r1
 8008fd2:	4413      	add	r3, r2
 8008fd4:	33c1      	adds	r3, #193	; 0xc1
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	2334      	movs	r3, #52	; 0x34
 8008fe6:	fb03 f301 	mul.w	r3, r3, r1
 8008fea:	4413      	add	r3, r2
 8008fec:	3390      	adds	r3, #144	; 0x90
 8008fee:	2203      	movs	r2, #3
 8008ff0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	2334      	movs	r3, #52	; 0x34
 8008ffe:	fb03 f301 	mul.w	r3, r3, r1
 8009002:	4413      	add	r3, r2
 8009004:	3391      	adds	r3, #145	; 0x91
 8009006:	2200      	movs	r2, #0
 8009008:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009010:	4619      	mov	r1, r3
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	2334      	movs	r3, #52	; 0x34
 8009016:	fb03 f301 	mul.w	r3, r3, r1
 800901a:	4413      	add	r3, r2
 800901c:	3392      	adds	r3, #146	; 0x92
 800901e:	2200      	movs	r2, #0
 8009020:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009022:	7bbb      	ldrb	r3, [r7, #14]
 8009024:	2b02      	cmp	r3, #2
 8009026:	d14a      	bne.n	80090be <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800902e:	4619      	mov	r1, r3
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	2334      	movs	r3, #52	; 0x34
 8009034:	fb03 f301 	mul.w	r3, r3, r1
 8009038:	4413      	add	r3, r2
 800903a:	3392      	adds	r3, #146	; 0x92
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b02      	cmp	r3, #2
 8009040:	d00c      	beq.n	800905c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009048:	4619      	mov	r1, r3
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	2334      	movs	r3, #52	; 0x34
 800904e:	fb03 f301 	mul.w	r3, r3, r1
 8009052:	4413      	add	r3, r2
 8009054:	33c1      	adds	r3, #193	; 0xc1
 8009056:	2201      	movs	r2, #1
 8009058:	701a      	strb	r2, [r3, #0]
 800905a:	e00b      	b.n	8009074 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009062:	4619      	mov	r1, r3
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	2334      	movs	r3, #52	; 0x34
 8009068:	fb03 f301 	mul.w	r3, r3, r1
 800906c:	4413      	add	r3, r2
 800906e:	33c1      	adds	r3, #193	; 0xc1
 8009070:	2200      	movs	r2, #0
 8009072:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800907a:	4619      	mov	r1, r3
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	2334      	movs	r3, #52	; 0x34
 8009080:	fb03 f301 	mul.w	r3, r3, r1
 8009084:	4413      	add	r3, r2
 8009086:	3390      	adds	r3, #144	; 0x90
 8009088:	2205      	movs	r2, #5
 800908a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009092:	4619      	mov	r1, r3
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	2334      	movs	r3, #52	; 0x34
 8009098:	fb03 f301 	mul.w	r3, r3, r1
 800909c:	4413      	add	r3, r2
 800909e:	3391      	adds	r3, #145	; 0x91
 80090a0:	2201      	movs	r2, #1
 80090a2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090aa:	4619      	mov	r1, r3
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	2334      	movs	r3, #52	; 0x34
 80090b0:	fb03 f301 	mul.w	r3, r3, r1
 80090b4:	4413      	add	r3, r2
 80090b6:	3392      	adds	r3, #146	; 0x92
 80090b8:	2202      	movs	r2, #2
 80090ba:	701a      	strb	r2, [r3, #0]
            break;
 80090bc:	e119      	b.n	80092f2 <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80090be:	7bbb      	ldrb	r3, [r7, #14]
 80090c0:	2b04      	cmp	r3, #4
 80090c2:	f040 8116 	bne.w	80092f2 <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090cc:	4619      	mov	r1, r3
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	2334      	movs	r3, #52	; 0x34
 80090d2:	fb03 f301 	mul.w	r3, r3, r1
 80090d6:	4413      	add	r3, r2
 80090d8:	3390      	adds	r3, #144	; 0x90
 80090da:	2201      	movs	r2, #1
 80090dc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090e4:	4619      	mov	r1, r3
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	2334      	movs	r3, #52	; 0x34
 80090ea:	fb03 f301 	mul.w	r3, r3, r1
 80090ee:	4413      	add	r3, r2
 80090f0:	3391      	adds	r3, #145	; 0x91
 80090f2:	2202      	movs	r2, #2
 80090f4:	701a      	strb	r2, [r3, #0]
            break;
 80090f6:	e0fc      	b.n	80092f2 <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090fe:	b2d9      	uxtb	r1, r3
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009106:	461a      	mov	r2, r3
 8009108:	2334      	movs	r3, #52	; 0x34
 800910a:	fb03 f302 	mul.w	r3, r3, r2
 800910e:	3390      	adds	r3, #144	; 0x90
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	4413      	add	r3, r2
 8009114:	3304      	adds	r3, #4
 8009116:	461a      	mov	r2, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fea6 	bl	8009e6a <USBH_MSC_SCSI_ReadCapacity>
 800911e:	4603      	mov	r3, r0
 8009120:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009122:	7bfb      	ldrb	r3, [r7, #15]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d120      	bne.n	800916a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800912e:	4619      	mov	r1, r3
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	2334      	movs	r3, #52	; 0x34
 8009134:	fb03 f301 	mul.w	r3, r3, r1
 8009138:	4413      	add	r3, r2
 800913a:	3390      	adds	r3, #144	; 0x90
 800913c:	2201      	movs	r2, #1
 800913e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009146:	4619      	mov	r1, r3
 8009148:	693a      	ldr	r2, [r7, #16]
 800914a:	2334      	movs	r3, #52	; 0x34
 800914c:	fb03 f301 	mul.w	r3, r3, r1
 8009150:	4413      	add	r3, r2
 8009152:	3391      	adds	r3, #145	; 0x91
 8009154:	2200      	movs	r2, #0
 8009156:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800915e:	3301      	adds	r3, #1
 8009160:	b29a      	uxth	r2, r3
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009168:	e0c5      	b.n	80092f6 <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d10c      	bne.n	800918a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009176:	4619      	mov	r1, r3
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	2334      	movs	r3, #52	; 0x34
 800917c:	fb03 f301 	mul.w	r3, r3, r1
 8009180:	4413      	add	r3, r2
 8009182:	3390      	adds	r3, #144	; 0x90
 8009184:	2205      	movs	r2, #5
 8009186:	701a      	strb	r2, [r3, #0]
            break;
 8009188:	e0b5      	b.n	80092f6 <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	2b04      	cmp	r3, #4
 800918e:	f040 80b2 	bne.w	80092f6 <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009198:	4619      	mov	r1, r3
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	2334      	movs	r3, #52	; 0x34
 800919e:	fb03 f301 	mul.w	r3, r3, r1
 80091a2:	4413      	add	r3, r2
 80091a4:	3390      	adds	r3, #144	; 0x90
 80091a6:	2201      	movs	r2, #1
 80091a8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091b0:	4619      	mov	r1, r3
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	2334      	movs	r3, #52	; 0x34
 80091b6:	fb03 f301 	mul.w	r3, r3, r1
 80091ba:	4413      	add	r3, r2
 80091bc:	3391      	adds	r3, #145	; 0x91
 80091be:	2202      	movs	r2, #2
 80091c0:	701a      	strb	r2, [r3, #0]
            break;
 80091c2:	e098      	b.n	80092f6 <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091ca:	b2d9      	uxtb	r1, r3
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091d2:	461a      	mov	r2, r3
 80091d4:	2334      	movs	r3, #52	; 0x34
 80091d6:	fb03 f302 	mul.w	r3, r3, r2
 80091da:	3398      	adds	r3, #152	; 0x98
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	4413      	add	r3, r2
 80091e0:	3304      	adds	r3, #4
 80091e2:	461a      	mov	r2, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 ff60 	bl	800a0aa <USBH_MSC_SCSI_RequestSense>
 80091ea:	4603      	mov	r3, r0
 80091ec:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d145      	bne.n	8009280 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091fa:	4619      	mov	r1, r3
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	2334      	movs	r3, #52	; 0x34
 8009200:	fb03 f301 	mul.w	r3, r3, r1
 8009204:	4413      	add	r3, r2
 8009206:	339c      	adds	r3, #156	; 0x9c
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	2b06      	cmp	r3, #6
 800920c:	d00c      	beq.n	8009228 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009214:	4619      	mov	r1, r3
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	2334      	movs	r3, #52	; 0x34
 800921a:	fb03 f301 	mul.w	r3, r3, r1
 800921e:	4413      	add	r3, r2
 8009220:	339c      	adds	r3, #156	; 0x9c
 8009222:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009224:	2b02      	cmp	r3, #2
 8009226:	d117      	bne.n	8009258 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	f242 720f 	movw	r2, #9999	; 0x270f
 800923a:	4293      	cmp	r3, r2
 800923c:	d80c      	bhi.n	8009258 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009244:	4619      	mov	r1, r3
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	2334      	movs	r3, #52	; 0x34
 800924a:	fb03 f301 	mul.w	r3, r3, r1
 800924e:	4413      	add	r3, r2
 8009250:	3390      	adds	r3, #144	; 0x90
 8009252:	2202      	movs	r2, #2
 8009254:	701a      	strb	r2, [r3, #0]
                  break;
 8009256:	e051      	b.n	80092fc <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800925e:	4619      	mov	r1, r3
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	2334      	movs	r3, #52	; 0x34
 8009264:	fb03 f301 	mul.w	r3, r3, r1
 8009268:	4413      	add	r3, r2
 800926a:	3390      	adds	r3, #144	; 0x90
 800926c:	2201      	movs	r2, #1
 800926e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009276:	3301      	adds	r3, #1
 8009278:	b29a      	uxth	r2, r3
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	2b02      	cmp	r3, #2
 8009284:	d10c      	bne.n	80092a0 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800928c:	4619      	mov	r1, r3
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	2334      	movs	r3, #52	; 0x34
 8009292:	fb03 f301 	mul.w	r3, r3, r1
 8009296:	4413      	add	r3, r2
 8009298:	3390      	adds	r3, #144	; 0x90
 800929a:	2208      	movs	r2, #8
 800929c:	701a      	strb	r2, [r3, #0]
            break;
 800929e:	e02c      	b.n	80092fa <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	2b04      	cmp	r3, #4
 80092a4:	d129      	bne.n	80092fa <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092ac:	4619      	mov	r1, r3
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	2334      	movs	r3, #52	; 0x34
 80092b2:	fb03 f301 	mul.w	r3, r3, r1
 80092b6:	4413      	add	r3, r2
 80092b8:	3390      	adds	r3, #144	; 0x90
 80092ba:	2201      	movs	r2, #1
 80092bc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092c4:	4619      	mov	r1, r3
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	2334      	movs	r3, #52	; 0x34
 80092ca:	fb03 f301 	mul.w	r3, r3, r1
 80092ce:	4413      	add	r3, r2
 80092d0:	3391      	adds	r3, #145	; 0x91
 80092d2:	2202      	movs	r2, #2
 80092d4:	701a      	strb	r2, [r3, #0]
            break;
 80092d6:	e010      	b.n	80092fa <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092de:	3301      	adds	r3, #1
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80092e8:	e008      	b.n	80092fc <USBH_MSC_Process+0x4f0>
            break;
 80092ea:	bf00      	nop
 80092ec:	e006      	b.n	80092fc <USBH_MSC_Process+0x4f0>
            break;
 80092ee:	bf00      	nop
 80092f0:	e004      	b.n	80092fc <USBH_MSC_Process+0x4f0>
            break;
 80092f2:	bf00      	nop
 80092f4:	e002      	b.n	80092fc <USBH_MSC_Process+0x4f0>
            break;
 80092f6:	bf00      	nop
 80092f8:	e000      	b.n	80092fc <USBH_MSC_Process+0x4f0>
            break;
 80092fa:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2204      	movs	r2, #4
 8009300:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009310:	2200      	movs	r2, #0
 8009312:	4619      	mov	r1, r3
 8009314:	f004 fed0 	bl	800e0b8 <osMessagePut>
      break;
 8009318:	e01e      	b.n	8009358 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	2200      	movs	r2, #0
 800931e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2201      	movs	r2, #1
 8009326:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2204      	movs	r2, #4
 800932c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800933c:	2200      	movs	r2, #0
 800933e:	4619      	mov	r1, r3
 8009340:	f004 feba 	bl	800e0b8 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800934a:	2102      	movs	r1, #2
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	4798      	blx	r3
      break;
 8009350:	e002      	b.n	8009358 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	75fb      	strb	r3, [r7, #23]
      break;
 8009356:	bf00      	nop
  }
  return error;
 8009358:	7dfb      	ldrb	r3, [r7, #23]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop

08009364 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	370c      	adds	r7, #12
 8009372:	46bd      	mov	sp, r7
 8009374:	bc80      	pop	{r7}
 8009376:	4770      	bx	lr

08009378 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af02      	add	r7, sp, #8
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800938e:	2301      	movs	r3, #1
 8009390:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009392:	2301      	movs	r3, #1
 8009394:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009396:	78fb      	ldrb	r3, [r7, #3]
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	2134      	movs	r1, #52	; 0x34
 800939c:	fb01 f303 	mul.w	r3, r1, r3
 80093a0:	4413      	add	r3, r2
 80093a2:	3390      	adds	r3, #144	; 0x90
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	2b07      	cmp	r3, #7
 80093a8:	d04b      	beq.n	8009442 <USBH_MSC_RdWrProcess+0xca>
 80093aa:	2b07      	cmp	r3, #7
 80093ac:	f300 80d2 	bgt.w	8009554 <USBH_MSC_RdWrProcess+0x1dc>
 80093b0:	2b05      	cmp	r3, #5
 80093b2:	f000 8089 	beq.w	80094c8 <USBH_MSC_RdWrProcess+0x150>
 80093b6:	2b06      	cmp	r3, #6
 80093b8:	f040 80cc 	bne.w	8009554 <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80093bc:	78f9      	ldrb	r1, [r7, #3]
 80093be:	2300      	movs	r3, #0
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	2300      	movs	r3, #0
 80093c4:	2200      	movs	r2, #0
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 ff53 	bl	800a272 <USBH_MSC_SCSI_Read>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10b      	bne.n	80093ee <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80093d6:	78fb      	ldrb	r3, [r7, #3]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	2134      	movs	r1, #52	; 0x34
 80093dc:	fb01 f303 	mul.w	r3, r1, r3
 80093e0:	4413      	add	r3, r2
 80093e2:	3390      	adds	r3, #144	; 0x90
 80093e4:	2201      	movs	r2, #1
 80093e6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	75fb      	strb	r3, [r7, #23]
 80093ec:	e01a      	b.n	8009424 <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d109      	bne.n	8009408 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80093f4:	78fb      	ldrb	r3, [r7, #3]
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	2134      	movs	r1, #52	; 0x34
 80093fa:	fb01 f303 	mul.w	r3, r1, r3
 80093fe:	4413      	add	r3, r2
 8009400:	3390      	adds	r3, #144	; 0x90
 8009402:	2205      	movs	r2, #5
 8009404:	701a      	strb	r2, [r3, #0]
 8009406:	e00d      	b.n	8009424 <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009408:	7bfb      	ldrb	r3, [r7, #15]
 800940a:	2b04      	cmp	r3, #4
 800940c:	d10a      	bne.n	8009424 <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800940e:	78fb      	ldrb	r3, [r7, #3]
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	2134      	movs	r1, #52	; 0x34
 8009414:	fb01 f303 	mul.w	r3, r1, r3
 8009418:	4413      	add	r3, r2
 800941a:	3390      	adds	r3, #144	; 0x90
 800941c:	2208      	movs	r2, #8
 800941e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009420:	2302      	movs	r3, #2
 8009422:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2204      	movs	r2, #4
 8009428:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009438:	2200      	movs	r2, #0
 800943a:	4619      	mov	r1, r3
 800943c:	f004 fe3c 	bl	800e0b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009440:	e089      	b.n	8009556 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009442:	78f9      	ldrb	r1, [r7, #3]
 8009444:	2300      	movs	r3, #0
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	2300      	movs	r3, #0
 800944a:	2200      	movs	r2, #0
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fea5 	bl	800a19c <USBH_MSC_SCSI_Write>
 8009452:	4603      	mov	r3, r0
 8009454:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009456:	7bfb      	ldrb	r3, [r7, #15]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10b      	bne.n	8009474 <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800945c:	78fb      	ldrb	r3, [r7, #3]
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	2134      	movs	r1, #52	; 0x34
 8009462:	fb01 f303 	mul.w	r3, r1, r3
 8009466:	4413      	add	r3, r2
 8009468:	3390      	adds	r3, #144	; 0x90
 800946a:	2201      	movs	r2, #1
 800946c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	75fb      	strb	r3, [r7, #23]
 8009472:	e01a      	b.n	80094aa <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	2b02      	cmp	r3, #2
 8009478:	d109      	bne.n	800948e <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800947a:	78fb      	ldrb	r3, [r7, #3]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	2134      	movs	r1, #52	; 0x34
 8009480:	fb01 f303 	mul.w	r3, r1, r3
 8009484:	4413      	add	r3, r2
 8009486:	3390      	adds	r3, #144	; 0x90
 8009488:	2205      	movs	r2, #5
 800948a:	701a      	strb	r2, [r3, #0]
 800948c:	e00d      	b.n	80094aa <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	2b04      	cmp	r3, #4
 8009492:	d10a      	bne.n	80094aa <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	2134      	movs	r1, #52	; 0x34
 800949a:	fb01 f303 	mul.w	r3, r1, r3
 800949e:	4413      	add	r3, r2
 80094a0:	3390      	adds	r3, #144	; 0x90
 80094a2:	2208      	movs	r2, #8
 80094a4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80094a6:	2302      	movs	r3, #2
 80094a8:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2204      	movs	r2, #4
 80094ae:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80094be:	2200      	movs	r2, #0
 80094c0:	4619      	mov	r1, r3
 80094c2:	f004 fdf9 	bl	800e0b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80094c6:	e046      	b.n	8009556 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	2234      	movs	r2, #52	; 0x34
 80094cc:	fb02 f303 	mul.w	r3, r2, r3
 80094d0:	3398      	adds	r3, #152	; 0x98
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	4413      	add	r3, r2
 80094d6:	1d1a      	adds	r2, r3, #4
 80094d8:	78fb      	ldrb	r3, [r7, #3]
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fde4 	bl	800a0aa <USBH_MSC_SCSI_RequestSense>
 80094e2:	4603      	mov	r3, r0
 80094e4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d113      	bne.n	8009514 <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	2134      	movs	r1, #52	; 0x34
 80094f2:	fb01 f303 	mul.w	r3, r1, r3
 80094f6:	4413      	add	r3, r2
 80094f8:	3390      	adds	r3, #144	; 0x90
 80094fa:	2201      	movs	r2, #1
 80094fc:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	2134      	movs	r1, #52	; 0x34
 8009504:	fb01 f303 	mul.w	r3, r1, r3
 8009508:	4413      	add	r3, r2
 800950a:	3391      	adds	r3, #145	; 0x91
 800950c:	2202      	movs	r2, #2
 800950e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009510:	2302      	movs	r3, #2
 8009512:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d00d      	beq.n	8009536 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	2b04      	cmp	r3, #4
 800951e:	d10a      	bne.n	8009536 <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	2134      	movs	r1, #52	; 0x34
 8009526:	fb01 f303 	mul.w	r3, r1, r3
 800952a:	4413      	add	r3, r2
 800952c:	3390      	adds	r3, #144	; 0x90
 800952e:	2208      	movs	r2, #8
 8009530:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009532:	2302      	movs	r3, #2
 8009534:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2204      	movs	r2, #4
 800953a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800954a:	2200      	movs	r2, #0
 800954c:	4619      	mov	r1, r3
 800954e:	f004 fdb3 	bl	800e0b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009552:	e000      	b.n	8009556 <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 8009554:	bf00      	nop

  }
  return error;
 8009556:	7dfb      	ldrb	r3, [r7, #23]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009572:	69db      	ldr	r3, [r3, #28]
 8009574:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b0b      	cmp	r3, #11
 800957e:	d10c      	bne.n	800959a <USBH_MSC_UnitIsReady+0x3a>
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	2134      	movs	r1, #52	; 0x34
 8009586:	fb01 f303 	mul.w	r3, r1, r3
 800958a:	4413      	add	r3, r2
 800958c:	3391      	adds	r3, #145	; 0x91
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d102      	bne.n	800959a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009594:	2301      	movs	r3, #1
 8009596:	73fb      	strb	r3, [r7, #15]
 8009598:	e001      	b.n	800959e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800959e:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bc80      	pop	{r7}
 80095a8:	4770      	bx	lr

080095aa <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b086      	sub	sp, #24
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	60f8      	str	r0, [r7, #12]
 80095b2:	460b      	mov	r3, r1
 80095b4:	607a      	str	r2, [r7, #4]
 80095b6:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b0b      	cmp	r3, #11
 80095ca:	d10d      	bne.n	80095e8 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80095cc:	7afb      	ldrb	r3, [r7, #11]
 80095ce:	2234      	movs	r2, #52	; 0x34
 80095d0:	fb02 f303 	mul.w	r3, r2, r3
 80095d4:	3390      	adds	r3, #144	; 0x90
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	4413      	add	r3, r2
 80095da:	2234      	movs	r2, #52	; 0x34
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f007 fe80 	bl	80112e4 <memcpy>
    return USBH_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	e000      	b.n	80095ea <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80095e8:	2302      	movs	r3, #2
  }
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3718      	adds	r7, #24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b088      	sub	sp, #32
 80095f6:	af02      	add	r7, sp, #8
 80095f8:	60f8      	str	r0, [r7, #12]
 80095fa:	607a      	str	r2, [r7, #4]
 80095fc:	603b      	str	r3, [r7, #0]
 80095fe:	460b      	mov	r3, r1
 8009600:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00e      	beq.n	8009636 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800961e:	2b0b      	cmp	r3, #11
 8009620:	d109      	bne.n	8009636 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009622:	7afb      	ldrb	r3, [r7, #11]
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	2134      	movs	r1, #52	; 0x34
 8009628:	fb01 f303 	mul.w	r3, r1, r3
 800962c:	4413      	add	r3, r2
 800962e:	3390      	adds	r3, #144	; 0x90
 8009630:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009632:	2b01      	cmp	r3, #1
 8009634:	d001      	beq.n	800963a <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009636:	2302      	movs	r3, #2
 8009638:	e040      	b.n	80096bc <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2206      	movs	r2, #6
 800963e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009640:	7afb      	ldrb	r3, [r7, #11]
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	2134      	movs	r1, #52	; 0x34
 8009646:	fb01 f303 	mul.w	r3, r1, r3
 800964a:	4413      	add	r3, r2
 800964c:	3390      	adds	r3, #144	; 0x90
 800964e:	2206      	movs	r2, #6
 8009650:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009652:	7afb      	ldrb	r3, [r7, #11]
 8009654:	b29a      	uxth	r2, r3
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800965c:	7af9      	ldrb	r1, [r7, #11]
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 fe03 	bl	800a272 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009672:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009674:	e016      	b.n	80096a4 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	1ad2      	subs	r2, r2, r3
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	f242 7110 	movw	r1, #10000	; 0x2710
 8009686:	fb01 f303 	mul.w	r3, r1, r3
 800968a:	429a      	cmp	r2, r3
 800968c:	d805      	bhi.n	800969a <USBH_MSC_Read+0xa8>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d104      	bne.n	80096a4 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2201      	movs	r2, #1
 800969e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80096a0:	2302      	movs	r3, #2
 80096a2:	e00b      	b.n	80096bc <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80096a4:	7afb      	ldrb	r3, [r7, #11]
 80096a6:	4619      	mov	r1, r3
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f7ff fe65 	bl	8009378 <USBH_MSC_RdWrProcess>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d0e0      	beq.n	8009676 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	2201      	movs	r2, #1
 80096b8:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3718      	adds	r7, #24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af02      	add	r7, sp, #8
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	607a      	str	r2, [r7, #4]
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	460b      	mov	r3, r1
 80096d2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00e      	beq.n	8009708 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80096f0:	2b0b      	cmp	r3, #11
 80096f2:	d109      	bne.n	8009708 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80096f4:	7afb      	ldrb	r3, [r7, #11]
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	2134      	movs	r1, #52	; 0x34
 80096fa:	fb01 f303 	mul.w	r3, r1, r3
 80096fe:	4413      	add	r3, r2
 8009700:	3390      	adds	r3, #144	; 0x90
 8009702:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009704:	2b01      	cmp	r3, #1
 8009706:	d001      	beq.n	800970c <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009708:	2302      	movs	r3, #2
 800970a:	e040      	b.n	800978e <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2207      	movs	r2, #7
 8009710:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009712:	7afb      	ldrb	r3, [r7, #11]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	2134      	movs	r1, #52	; 0x34
 8009718:	fb01 f303 	mul.w	r3, r1, r3
 800971c:	4413      	add	r3, r2
 800971e:	3390      	adds	r3, #144	; 0x90
 8009720:	2207      	movs	r2, #7
 8009722:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009724:	7afb      	ldrb	r3, [r7, #11]
 8009726:	b29a      	uxth	r2, r3
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800972e:	7af9      	ldrb	r1, [r7, #11]
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f000 fd2f 	bl	800a19c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009744:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009746:	e016      	b.n	8009776 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	1ad2      	subs	r2, r2, r3
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	f242 7110 	movw	r1, #10000	; 0x2710
 8009758:	fb01 f303 	mul.w	r3, r1, r3
 800975c:	429a      	cmp	r2, r3
 800975e:	d805      	bhi.n	800976c <USBH_MSC_Write+0xa8>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	d104      	bne.n	8009776 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	2201      	movs	r2, #1
 8009770:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009772:	2302      	movs	r3, #2
 8009774:	e00b      	b.n	800978e <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009776:	7afb      	ldrb	r3, [r7, #11]
 8009778:	4619      	mov	r1, r3
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f7ff fdfc 	bl	8009378 <USBH_MSC_RdWrProcess>
 8009780:	4603      	mov	r3, r0
 8009782:	2b01      	cmp	r3, #1
 8009784:	d0e0      	beq.n	8009748 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2201      	movs	r2, #1
 800978a:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b082      	sub	sp, #8
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2221      	movs	r2, #33	; 0x21
 80097a2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	22ff      	movs	r2, #255	; 0xff
 80097a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80097bc:	2200      	movs	r2, #0
 80097be:	2100      	movs	r1, #0
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f001 fe3b 	bl	800b43c <USBH_CtlReq>
 80097c6:	4603      	mov	r3, r0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	22a1      	movs	r2, #161	; 0xa1
 80097de:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	22fe      	movs	r2, #254	; 0xfe
 80097e4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80097f8:	2201      	movs	r2, #1
 80097fa:	6839      	ldr	r1, [r7, #0]
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 fe1d 	bl	800b43c <USBH_CtlReq>
 8009802:	4603      	mov	r3, r0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800981a:	69db      	ldr	r3, [r3, #28]
 800981c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	4a09      	ldr	r2, [pc, #36]	; (8009848 <USBH_MSC_BOT_Init+0x3c>)
 8009822:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4a09      	ldr	r2, [pc, #36]	; (800984c <USBH_MSC_BOT_Init+0x40>)
 8009828:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	bc80      	pop	{r7}
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	43425355 	.word	0x43425355
 800984c:	20304050 	.word	0x20304050

08009850 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af02      	add	r7, sp, #8
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800985c:	2301      	movs	r3, #1
 800985e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009860:	2301      	movs	r3, #1
 8009862:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009864:	2301      	movs	r3, #1
 8009866:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009868:	2300      	movs	r3, #0
 800986a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009880:	3b01      	subs	r3, #1
 8009882:	2b0a      	cmp	r3, #10
 8009884:	f200 822a 	bhi.w	8009cdc <USBH_MSC_BOT_Process+0x48c>
 8009888:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <USBH_MSC_BOT_Process+0x40>)
 800988a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988e:	bf00      	nop
 8009890:	080098bd 	.word	0x080098bd
 8009894:	080098e5 	.word	0x080098e5
 8009898:	080099a3 	.word	0x080099a3
 800989c:	080099c1 	.word	0x080099c1
 80098a0:	08009a7d 	.word	0x08009a7d
 80098a4:	08009a9f 	.word	0x08009a9f
 80098a8:	08009b8b 	.word	0x08009b8b
 80098ac:	08009ba7 	.word	0x08009ba7
 80098b0:	08009c31 	.word	0x08009c31
 80098b4:	08009c61 	.word	0x08009c61
 80098b8:	08009cc3 	.word	0x08009cc3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	78fa      	ldrb	r2, [r7, #3]
 80098c0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	2202      	movs	r2, #2
 80098c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	795b      	ldrb	r3, [r3, #5]
 80098d6:	2201      	movs	r2, #1
 80098d8:	9200      	str	r2, [sp, #0]
 80098da:	221f      	movs	r2, #31
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f002 f89e 	bl	800ba1e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80098e2:	e20a      	b.n	8009cfa <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	795b      	ldrb	r3, [r3, #5]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f007 faea 	bl	8010ec4 <USBH_LL_GetURBState>
 80098f0:	4603      	mov	r3, r0
 80098f2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80098f4:	7d3b      	ldrb	r3, [r7, #20]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d126      	bne.n	8009948 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00f      	beq.n	8009922 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009908:	b25b      	sxtb	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	da04      	bge.n	8009918 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	2203      	movs	r2, #3
 8009912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009916:	e008      	b.n	800992a <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	2205      	movs	r2, #5
 800991c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009920:	e003      	b.n	800992a <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	2207      	movs	r2, #7
 8009926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2202      	movs	r2, #2
 800992e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800993e:	2200      	movs	r2, #0
 8009940:	4619      	mov	r1, r3
 8009942:	f004 fbb9 	bl	800e0b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009946:	e1cb      	b.n	8009ce0 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009948:	7d3b      	ldrb	r3, [r7, #20]
 800994a:	2b02      	cmp	r3, #2
 800994c:	d112      	bne.n	8009974 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2202      	movs	r2, #2
 800995a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800996a:	2200      	movs	r2, #0
 800996c:	4619      	mov	r1, r3
 800996e:	f004 fba3 	bl	800e0b8 <osMessagePut>
      break;
 8009972:	e1b5      	b.n	8009ce0 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 8009974:	7d3b      	ldrb	r3, [r7, #20]
 8009976:	2b05      	cmp	r3, #5
 8009978:	f040 81b2 	bne.w	8009ce0 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	220a      	movs	r2, #10
 8009980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009998:	2200      	movs	r2, #0
 800999a:	4619      	mov	r1, r3
 800999c:	f004 fb8c 	bl	800e0b8 <osMessagePut>
      break;
 80099a0:	e19e      	b.n	8009ce0 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	895a      	ldrh	r2, [r3, #10]
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	791b      	ldrb	r3, [r3, #4]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f002 f859 	bl	800ba68 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	2204      	movs	r2, #4
 80099ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80099be:	e19c      	b.n	8009cfa <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	791b      	ldrb	r3, [r3, #4]
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f007 fa7c 	bl	8010ec4 <USBH_LL_GetURBState>
 80099cc:	4603      	mov	r3, r0
 80099ce:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80099d0:	7d3b      	ldrb	r3, [r7, #20]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d13b      	bne.n	8009a4e <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	8952      	ldrh	r2, [r2, #10]
 80099de:	4293      	cmp	r3, r2
 80099e0:	d910      	bls.n	8009a04 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	8952      	ldrh	r2, [r2, #10]
 80099ec:	441a      	add	r2, r3
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099f8:	693a      	ldr	r2, [r7, #16]
 80099fa:	8952      	ldrh	r2, [r2, #10]
 80099fc:	1a9a      	subs	r2, r3, r2
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a02:	e002      	b.n	8009a0a <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	2200      	movs	r2, #0
 8009a08:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00a      	beq.n	8009a28 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	895a      	ldrh	r2, [r3, #10]
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	791b      	ldrb	r3, [r3, #4]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f002 f821 	bl	800ba68 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009a26:	e15d      	b.n	8009ce4 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	2207      	movs	r2, #7
 8009a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2202      	movs	r2, #2
 8009a34:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009a44:	2200      	movs	r2, #0
 8009a46:	4619      	mov	r1, r3
 8009a48:	f004 fb36 	bl	800e0b8 <osMessagePut>
      break;
 8009a4c:	e14a      	b.n	8009ce4 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 8009a4e:	7d3b      	ldrb	r3, [r7, #20]
 8009a50:	2b05      	cmp	r3, #5
 8009a52:	f040 8147 	bne.w	8009ce4 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	2209      	movs	r2, #9
 8009a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2202      	movs	r2, #2
 8009a62:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009a72:	2200      	movs	r2, #0
 8009a74:	4619      	mov	r1, r3
 8009a76:	f004 fb1f 	bl	800e0b8 <osMessagePut>
      break;
 8009a7a:	e133      	b.n	8009ce4 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	891a      	ldrh	r2, [r3, #8]
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	795b      	ldrb	r3, [r3, #5]
 8009a8a:	2001      	movs	r0, #1
 8009a8c:	9000      	str	r0, [sp, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 ffc5 	bl	800ba1e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	2206      	movs	r2, #6
 8009a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a9c:	e12d      	b.n	8009cfa <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	795b      	ldrb	r3, [r3, #5]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f007 fa0d 	bl	8010ec4 <USBH_LL_GetURBState>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009aae:	7d3b      	ldrb	r3, [r7, #20]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d13d      	bne.n	8009b30 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	8912      	ldrh	r2, [r2, #8]
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d910      	bls.n	8009ae2 <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	8912      	ldrh	r2, [r2, #8]
 8009aca:	441a      	add	r2, r3
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	8912      	ldrh	r2, [r2, #8]
 8009ada:	1a9a      	subs	r2, r3, r2
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	65da      	str	r2, [r3, #92]	; 0x5c
 8009ae0:	e002      	b.n	8009ae8 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00c      	beq.n	8009b0a <USBH_MSC_BOT_Process+0x2ba>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	891a      	ldrh	r2, [r3, #8]
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	795b      	ldrb	r3, [r3, #5]
 8009afe:	2001      	movs	r0, #1
 8009b00:	9000      	str	r0, [sp, #0]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f001 ff8b 	bl	800ba1e <USBH_BulkSendData>
 8009b08:	e003      	b.n	8009b12 <USBH_MSC_BOT_Process+0x2c2>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	2207      	movs	r2, #7
 8009b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2202      	movs	r2, #2
 8009b16:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009b26:	2200      	movs	r2, #0
 8009b28:	4619      	mov	r1, r3
 8009b2a:	f004 fac5 	bl	800e0b8 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 8009b2e:	e0db      	b.n	8009ce8 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b30:	7d3b      	ldrb	r3, [r7, #20]
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d112      	bne.n	8009b5c <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	2205      	movs	r2, #5
 8009b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2202      	movs	r2, #2
 8009b42:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009b52:	2200      	movs	r2, #0
 8009b54:	4619      	mov	r1, r3
 8009b56:	f004 faaf 	bl	800e0b8 <osMessagePut>
      break;
 8009b5a:	e0c5      	b.n	8009ce8 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 8009b5c:	7d3b      	ldrb	r3, [r7, #20]
 8009b5e:	2b05      	cmp	r3, #5
 8009b60:	f040 80c2 	bne.w	8009ce8 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	220a      	movs	r2, #10
 8009b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009b80:	2200      	movs	r2, #0
 8009b82:	4619      	mov	r1, r3
 8009b84:	f004 fa98 	bl	800e0b8 <osMessagePut>
      break;
 8009b88:	e0ae      	b.n	8009ce8 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	791b      	ldrb	r3, [r3, #4]
 8009b94:	220d      	movs	r2, #13
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f001 ff66 	bl	800ba68 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2208      	movs	r2, #8
 8009ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ba4:	e0a9      	b.n	8009cfa <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	791b      	ldrb	r3, [r3, #4]
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f007 f989 	bl	8010ec4 <USBH_LL_GetURBState>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009bb6:	7d3b      	ldrb	r3, [r7, #20]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d123      	bne.n	8009c04 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f8c5 	bl	8009d5c <USBH_MSC_DecodeCSW>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009bd6:	7d7b      	ldrb	r3, [r7, #21]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d102      	bne.n	8009be2 <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	75fb      	strb	r3, [r7, #23]
 8009be0:	e001      	b.n	8009be6 <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 8009be2:	2302      	movs	r3, #2
 8009be4:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2202      	movs	r2, #2
 8009bea:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	f004 fa5b 	bl	800e0b8 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 8009c02:	e073      	b.n	8009cec <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 8009c04:	7d3b      	ldrb	r3, [r7, #20]
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	d170      	bne.n	8009cec <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	2209      	movs	r2, #9
 8009c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2202      	movs	r2, #2
 8009c16:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009c26:	2200      	movs	r2, #0
 8009c28:	4619      	mov	r1, r3
 8009c2a:	f004 fa45 	bl	800e0b8 <osMessagePut>
      break;
 8009c2e:	e05d      	b.n	8009cec <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009c30:	78fb      	ldrb	r3, [r7, #3]
 8009c32:	2200      	movs	r2, #0
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f864 	bl	8009d04 <USBH_MSC_BOT_Abort>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009c40:	7dbb      	ldrb	r3, [r7, #22]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d104      	bne.n	8009c50 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	2207      	movs	r2, #7
 8009c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009c4e:	e04f      	b.n	8009cf0 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009c50:	7dbb      	ldrb	r3, [r7, #22]
 8009c52:	2b04      	cmp	r3, #4
 8009c54:	d14c      	bne.n	8009cf0 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	220b      	movs	r2, #11
 8009c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c5e:	e047      	b.n	8009cf0 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009c60:	78fb      	ldrb	r3, [r7, #3]
 8009c62:	2201      	movs	r2, #1
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f84c 	bl	8009d04 <USBH_MSC_BOT_Abort>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009c70:	7dbb      	ldrb	r3, [r7, #22]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d11d      	bne.n	8009cb2 <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	795b      	ldrb	r3, [r3, #5]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f007 f97a 	bl	8010f76 <USBH_LL_GetToggle>
 8009c82:	4603      	mov	r3, r0
 8009c84:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	7959      	ldrb	r1, [r3, #5]
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
 8009c8c:	f1c3 0301 	rsb	r3, r3, #1
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	461a      	mov	r2, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f007 f93f 	bl	8010f18 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	791b      	ldrb	r3, [r3, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f007 f938 	bl	8010f18 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	2209      	movs	r2, #9
 8009cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009cb0:	e020      	b.n	8009cf4 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 8009cb2:	7dbb      	ldrb	r3, [r7, #22]
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	d11d      	bne.n	8009cf4 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	220b      	movs	r2, #11
 8009cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cc0:	e018      	b.n	8009cf4 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7ff fd67 	bl	8009796 <USBH_MSC_BOT_REQ_Reset>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d112      	bne.n	8009cf8 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009cda:	e00d      	b.n	8009cf8 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 8009cdc:	bf00      	nop
 8009cde:	e00c      	b.n	8009cfa <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009ce0:	bf00      	nop
 8009ce2:	e00a      	b.n	8009cfa <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009ce4:	bf00      	nop
 8009ce6:	e008      	b.n	8009cfa <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009ce8:	bf00      	nop
 8009cea:	e006      	b.n	8009cfa <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009cec:	bf00      	nop
 8009cee:	e004      	b.n	8009cfa <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009cf0:	bf00      	nop
 8009cf2:	e002      	b.n	8009cfa <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009cf4:	bf00      	nop
 8009cf6:	e000      	b.n	8009cfa <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009cf8:	bf00      	nop
  }
  return status;
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	70fb      	strb	r3, [r7, #3]
 8009d10:	4613      	mov	r3, r2
 8009d12:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009d14:	2302      	movs	r3, #2
 8009d16:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009d22:	78bb      	ldrb	r3, [r7, #2]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <USBH_MSC_BOT_Abort+0x2a>
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d009      	beq.n	8009d40 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009d2c:	e011      	b.n	8009d52 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	79db      	ldrb	r3, [r3, #7]
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 f9a6 	bl	800b086 <USBH_ClrFeature>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d3e:	e008      	b.n	8009d52 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	799b      	ldrb	r3, [r3, #6]
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f001 f99d 	bl	800b086 <USBH_ClrFeature>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d50:	bf00      	nop
  }
  return status;
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	791b      	ldrb	r3, [r3, #4]
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f007 f811 	bl	8010da0 <USBH_LL_GetLastXferSize>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b0d      	cmp	r3, #13
 8009d82:	d002      	beq.n	8009d8a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009d84:	2302      	movs	r3, #2
 8009d86:	73fb      	strb	r3, [r7, #15]
 8009d88:	e024      	b.n	8009dd4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d8e:	4a14      	ldr	r2, [pc, #80]	; (8009de0 <USBH_MSC_DecodeCSW+0x84>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d11d      	bne.n	8009dd0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d119      	bne.n	8009dd4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d102      	bne.n	8009db0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73fb      	strb	r3, [r7, #15]
 8009dae:	e011      	b.n	8009dd4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d102      	bne.n	8009dc0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	73fb      	strb	r3, [r7, #15]
 8009dbe:	e009      	b.n	8009dd4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d104      	bne.n	8009dd4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009dca:	2302      	movs	r3, #2
 8009dcc:	73fb      	strb	r3, [r7, #15]
 8009dce:	e001      	b.n	8009dd4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	53425355 	.word	0x53425355

08009de4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	460b      	mov	r3, r1
 8009dee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009df0:	2302      	movs	r3, #2
 8009df2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d002      	beq.n	8009e0e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d021      	beq.n	8009e50 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009e0c:	e028      	b.n	8009e60 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2200      	movs	r2, #0
 8009e12:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	220a      	movs	r2, #10
 8009e20:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	3363      	adds	r3, #99	; 0x63
 8009e28:	2210      	movs	r2, #16
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f007 fa67 	bl	8011300 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2202      	movs	r2, #2
 8009e46:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e4e:	e007      	b.n	8009e60 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7ff fcfb 	bl	8009850 <USBH_MSC_BOT_Process>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e5e:	bf00      	nop
  }

  return error;
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b086      	sub	sp, #24
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	60f8      	str	r0, [r7, #12]
 8009e72:	460b      	mov	r3, r1
 8009e74:	607a      	str	r2, [r7, #4]
 8009e76:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009e82:	69db      	ldr	r3, [r3, #28]
 8009e84:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d002      	beq.n	8009e96 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d027      	beq.n	8009ee4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009e94:	e05f      	b.n	8009f56 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	2208      	movs	r2, #8
 8009e9a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	2280      	movs	r2, #128	; 0x80
 8009ea0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	220a      	movs	r2, #10
 8009ea8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	3363      	adds	r3, #99	; 0x63
 8009eb0:	2210      	movs	r2, #16
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f007 fa23 	bl	8011300 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	2225      	movs	r2, #37	; 0x25
 8009ebe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	2202      	movs	r2, #2
 8009ece:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	f103 0210 	add.w	r2, r3, #16
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee2:	e038      	b.n	8009f56 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009ee4:	7afb      	ldrb	r3, [r7, #11]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f7ff fcb1 	bl	8009850 <USBH_MSC_BOT_Process>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d12d      	bne.n	8009f54 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009efe:	3303      	adds	r3, #3
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	461a      	mov	r2, r3
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f0a:	3302      	adds	r3, #2
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	021b      	lsls	r3, r3, #8
 8009f10:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f18:	3301      	adds	r3, #1
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009f1e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	061b      	lsls	r3, r3, #24
 8009f2a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f36:	3307      	adds	r3, #7
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f42:	3306      	adds	r3, #6
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	021b      	lsls	r3, r3, #8
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	809a      	strh	r2, [r3, #4]
      break;
 8009f54:	bf00      	nop
  }

  return error;
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	607a      	str	r2, [r7, #4]
 8009f6c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009f6e:	2302      	movs	r3, #2
 8009f70:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d002      	beq.n	8009f8c <USBH_MSC_SCSI_Inquiry+0x2c>
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d03d      	beq.n	800a006 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009f8a:	e089      	b.n	800a0a0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	2224      	movs	r2, #36	; 0x24
 8009f90:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	2280      	movs	r2, #128	; 0x80
 8009f96:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	220a      	movs	r2, #10
 8009f9e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	3363      	adds	r3, #99	; 0x63
 8009fa6:	220a      	movs	r2, #10
 8009fa8:	2100      	movs	r1, #0
 8009faa:	4618      	mov	r0, r3
 8009fac:	f007 f9a8 	bl	8011300 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	2212      	movs	r2, #18
 8009fb4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009fb8:	7afb      	ldrb	r3, [r7, #11]
 8009fba:	015b      	lsls	r3, r3, #5
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	2224      	movs	r2, #36	; 0x24
 8009fd8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	2202      	movs	r2, #2
 8009ff0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f103 0210 	add.w	r2, r3, #16
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a000:	2301      	movs	r3, #1
 800a002:	75fb      	strb	r3, [r7, #23]
      break;
 800a004:	e04c      	b.n	800a0a0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a006:	7afb      	ldrb	r3, [r7, #11]
 800a008:	4619      	mov	r1, r3
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f7ff fc20 	bl	8009850 <USBH_MSC_BOT_Process>
 800a010:	4603      	mov	r3, r0
 800a012:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a014:	7dfb      	ldrb	r3, [r7, #23]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d141      	bne.n	800a09e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a01a:	2222      	movs	r2, #34	; 0x22
 800a01c:	2100      	movs	r1, #0
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f007 f96e 	bl	8011300 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	f003 031f 	and.w	r3, r3, #31
 800a030:	b2da      	uxtb	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	095b      	lsrs	r3, r3, #5
 800a040:	b2da      	uxtb	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a04c:	3301      	adds	r3, #1
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	b25b      	sxtb	r3, r3
 800a052:	2b00      	cmp	r3, #0
 800a054:	da03      	bge.n	800a05e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2201      	movs	r2, #1
 800a05a:	709a      	strb	r2, [r3, #2]
 800a05c:	e002      	b.n	800a064 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	1cd8      	adds	r0, r3, #3
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a06e:	3308      	adds	r3, #8
 800a070:	2208      	movs	r2, #8
 800a072:	4619      	mov	r1, r3
 800a074:	f007 f936 	bl	80112e4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f103 000c 	add.w	r0, r3, #12
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a084:	3310      	adds	r3, #16
 800a086:	2210      	movs	r2, #16
 800a088:	4619      	mov	r1, r3
 800a08a:	f007 f92b 	bl	80112e4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	331d      	adds	r3, #29
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a098:	3220      	adds	r2, #32
 800a09a:	6812      	ldr	r2, [r2, #0]
 800a09c:	601a      	str	r2, [r3, #0]
      break;
 800a09e:	bf00      	nop
  }

  return error;
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3718      	adds	r7, #24
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b086      	sub	sp, #24
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	60f8      	str	r0, [r7, #12]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	607a      	str	r2, [r7, #4]
 800a0b6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a0c2:	69db      	ldr	r3, [r3, #28]
 800a0c4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d002      	beq.n	800a0d6 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d03d      	beq.n	800a150 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a0d4:	e05d      	b.n	800a192 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	220e      	movs	r2, #14
 800a0da:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2280      	movs	r2, #128	; 0x80
 800a0e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	220a      	movs	r2, #10
 800a0e8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	3363      	adds	r3, #99	; 0x63
 800a0f0:	2210      	movs	r2, #16
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f007 f903 	bl	8011300 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	2203      	movs	r2, #3
 800a0fe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a102:	7afb      	ldrb	r3, [r7, #11]
 800a104:	015b      	lsls	r3, r3, #5
 800a106:	b2da      	uxtb	r2, r3
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	220e      	movs	r2, #14
 800a122:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	2202      	movs	r2, #2
 800a13a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f103 0210 	add.w	r2, r3, #16
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a14a:	2301      	movs	r3, #1
 800a14c:	75fb      	strb	r3, [r7, #23]
      break;
 800a14e:	e020      	b.n	800a192 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a150:	7afb      	ldrb	r3, [r7, #11]
 800a152:	4619      	mov	r1, r3
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f7ff fb7b 	bl	8009850 <USBH_MSC_BOT_Process>
 800a15a:	4603      	mov	r3, r0
 800a15c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a15e:	7dfb      	ldrb	r3, [r7, #23]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d115      	bne.n	800a190 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a16a:	3302      	adds	r3, #2
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	f003 030f 	and.w	r3, r3, #15
 800a172:	b2da      	uxtb	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a17e:	7b1a      	ldrb	r2, [r3, #12]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a18a:	7b5a      	ldrb	r2, [r3, #13]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	709a      	strb	r2, [r3, #2]
      break;
 800a190:	bf00      	nop
  }

  return error;
 800a192:	7dfb      	ldrb	r3, [r7, #23]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b086      	sub	sp, #24
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	607a      	str	r2, [r7, #4]
 800a1a6:	603b      	str	r3, [r7, #0]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d002      	beq.n	800a1ca <USBH_MSC_SCSI_Write+0x2e>
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d047      	beq.n	800a258 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a1c8:	e04e      	b.n	800a268 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	fb03 f202 	mul.w	r2, r3, r2
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	220a      	movs	r2, #10
 800a1e8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	3363      	adds	r3, #99	; 0x63
 800a1f0:	2210      	movs	r2, #16
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f007 f883 	bl	8011300 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	222a      	movs	r2, #42	; 0x2a
 800a1fe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a202:	79fa      	ldrb	r2, [r7, #7]
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a20a:	79ba      	ldrb	r2, [r7, #6]
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a212:	797a      	ldrb	r2, [r7, #5]
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a21a:	1d3b      	adds	r3, r7, #4
 800a21c:	781a      	ldrb	r2, [r3, #0]
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a224:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a22e:	f107 0320 	add.w	r3, r7, #32
 800a232:	781a      	ldrb	r2, [r3, #0]
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	2202      	movs	r2, #2
 800a246:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a252:	2301      	movs	r3, #1
 800a254:	75fb      	strb	r3, [r7, #23]
      break;
 800a256:	e007      	b.n	800a268 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a258:	7afb      	ldrb	r3, [r7, #11]
 800a25a:	4619      	mov	r1, r3
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f7ff faf7 	bl	8009850 <USBH_MSC_BOT_Process>
 800a262:	4603      	mov	r3, r0
 800a264:	75fb      	strb	r3, [r7, #23]
      break;
 800a266:	bf00      	nop
  }

  return error;
 800a268:	7dfb      	ldrb	r3, [r7, #23]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3718      	adds	r7, #24
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b086      	sub	sp, #24
 800a276:	af00      	add	r7, sp, #0
 800a278:	60f8      	str	r0, [r7, #12]
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	603b      	str	r3, [r7, #0]
 800a27e:	460b      	mov	r3, r1
 800a280:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a282:	2302      	movs	r3, #2
 800a284:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a28c:	69db      	ldr	r3, [r3, #28]
 800a28e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a296:	2b01      	cmp	r3, #1
 800a298:	d002      	beq.n	800a2a0 <USBH_MSC_SCSI_Read+0x2e>
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d047      	beq.n	800a32e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a29e:	e04e      	b.n	800a33e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	fb03 f202 	mul.w	r2, r3, r2
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2280      	movs	r2, #128	; 0x80
 800a2b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	220a      	movs	r2, #10
 800a2be:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	3363      	adds	r3, #99	; 0x63
 800a2c6:	2210      	movs	r2, #16
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f007 f818 	bl	8011300 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2228      	movs	r2, #40	; 0x28
 800a2d4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a2d8:	79fa      	ldrb	r2, [r7, #7]
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a2e0:	79ba      	ldrb	r2, [r7, #6]
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a2e8:	797a      	ldrb	r2, [r7, #5]
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a2f0:	1d3b      	adds	r3, r7, #4
 800a2f2:	781a      	ldrb	r2, [r3, #0]
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a2fa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a304:	f107 0320 	add.w	r3, r7, #32
 800a308:	781a      	ldrb	r2, [r3, #0]
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	2202      	movs	r2, #2
 800a31c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a328:	2301      	movs	r3, #1
 800a32a:	75fb      	strb	r3, [r7, #23]
      break;
 800a32c:	e007      	b.n	800a33e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a32e:	7afb      	ldrb	r3, [r7, #11]
 800a330:	4619      	mov	r1, r3
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f7ff fa8c 	bl	8009850 <USBH_MSC_BOT_Process>
 800a338:	4603      	mov	r3, r0
 800a33a:	75fb      	strb	r3, [r7, #23]
      break;
 800a33c:	bf00      	nop
  }

  return error;
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a348:	b5b0      	push	{r4, r5, r7, lr}
 800a34a:	b090      	sub	sp, #64	; 0x40
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	4613      	mov	r3, r2
 800a354:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d101      	bne.n	800a360 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a35c:	2302      	movs	r3, #2
 800a35e:	e04d      	b.n	800a3fc <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	79fa      	ldrb	r2, [r7, #7]
 800a364:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 f847 	bl	800a40c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d003      	beq.n	800a3ac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800a3ac:	4b15      	ldr	r3, [pc, #84]	; (800a404 <USBH_Init+0xbc>)
 800a3ae:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800a3b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a3b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800a3b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a3bc:	2100      	movs	r1, #0
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f003 fe51 	bl	800e066 <osMessageCreate>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800a3cc:	4b0e      	ldr	r3, [pc, #56]	; (800a408 <USBH_Init+0xc0>)
 800a3ce:	f107 0414 	add.w	r4, r7, #20
 800a3d2:	461d      	mov	r5, r3
 800a3d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a3dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800a3e0:	f107 0314 	add.w	r3, r7, #20
 800a3e4:	68f9      	ldr	r1, [r7, #12]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f003 fd13 	bl	800de12 <osThreadCreate>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f006 fc1f 	bl	8010c38 <USBH_LL_Init>

  return USBH_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3740      	adds	r7, #64	; 0x40
 800a400:	46bd      	mov	sp, r7
 800a402:	bdb0      	pop	{r4, r5, r7, pc}
 800a404:	08015a84 	.word	0x08015a84
 800a408:	08015a94 	.word	0x08015a94

0800a40c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a414:	2300      	movs	r3, #0
 800a416:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a418:	2300      	movs	r3, #0
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	e008      	b.n	800a430 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	32e0      	adds	r2, #224	; 0xe0
 800a424:	2100      	movs	r1, #0
 800a426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	3301      	adds	r3, #1
 800a42e:	60fb      	str	r3, [r7, #12]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2b0e      	cmp	r3, #14
 800a434:	d9f3      	bls.n	800a41e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a436:	2300      	movs	r3, #0
 800a438:	60fb      	str	r3, [r7, #12]
 800a43a:	e009      	b.n	800a450 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4413      	add	r3, r2
 800a442:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a446:	2200      	movs	r2, #0
 800a448:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3301      	adds	r3, #1
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a456:	d3f1      	bcc.n	800a43c <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2201      	movs	r2, #1
 800a476:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2240      	movs	r2, #64	; 0x40
 800a47c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3714      	adds	r7, #20
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bc80      	pop	{r7}
 800a49e:	4770      	bx	lr

0800a4a0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d017      	beq.n	800a4e4 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10f      	bne.n	800a4de <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4c4:	1c59      	adds	r1, r3, #1
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	33dc      	adds	r3, #220	; 0xdc
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	73fb      	strb	r3, [r7, #15]
 800a4dc:	e004      	b.n	800a4e8 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a4de:	2302      	movs	r3, #2
 800a4e0:	73fb      	strb	r3, [r7, #15]
 800a4e2:	e001      	b.n	800a4e8 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bc80      	pop	{r7}
 800a4f2:	4770      	bx	lr

0800a4f4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a500:	2300      	movs	r3, #0
 800a502:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a50a:	78fa      	ldrb	r2, [r7, #3]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d204      	bcs.n	800a51a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800a518:	e001      	b.n	800a51e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a51a:	2302      	movs	r3, #2
 800a51c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	bc80      	pop	{r7}
 800a528:	4770      	bx	lr

0800a52a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a52a:	b480      	push	{r7}
 800a52c:	b087      	sub	sp, #28
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	4608      	mov	r0, r1
 800a534:	4611      	mov	r1, r2
 800a536:	461a      	mov	r2, r3
 800a538:	4603      	mov	r3, r0
 800a53a:	70fb      	strb	r3, [r7, #3]
 800a53c:	460b      	mov	r3, r1
 800a53e:	70bb      	strb	r3, [r7, #2]
 800a540:	4613      	mov	r3, r2
 800a542:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a544:	2300      	movs	r3, #0
 800a546:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a548:	2300      	movs	r3, #0
 800a54a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f203 3336 	addw	r3, r3, #822	; 0x336
 800a552:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a554:	e025      	b.n	800a5a2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a556:	7dfb      	ldrb	r3, [r7, #23]
 800a558:	221a      	movs	r2, #26
 800a55a:	fb02 f303 	mul.w	r3, r2, r3
 800a55e:	3308      	adds	r3, #8
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4413      	add	r3, r2
 800a564:	3302      	adds	r3, #2
 800a566:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	795b      	ldrb	r3, [r3, #5]
 800a56c:	78fa      	ldrb	r2, [r7, #3]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d002      	beq.n	800a578 <USBH_FindInterface+0x4e>
 800a572:	78fb      	ldrb	r3, [r7, #3]
 800a574:	2bff      	cmp	r3, #255	; 0xff
 800a576:	d111      	bne.n	800a59c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a57c:	78ba      	ldrb	r2, [r7, #2]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d002      	beq.n	800a588 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a582:	78bb      	ldrb	r3, [r7, #2]
 800a584:	2bff      	cmp	r3, #255	; 0xff
 800a586:	d109      	bne.n	800a59c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a58c:	787a      	ldrb	r2, [r7, #1]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d002      	beq.n	800a598 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a592:	787b      	ldrb	r3, [r7, #1]
 800a594:	2bff      	cmp	r3, #255	; 0xff
 800a596:	d101      	bne.n	800a59c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a598:	7dfb      	ldrb	r3, [r7, #23]
 800a59a:	e006      	b.n	800a5aa <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d9d6      	bls.n	800a556 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a5a8:	23ff      	movs	r3, #255	; 0xff
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	371c      	adds	r7, #28
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bc80      	pop	{r7}
 800a5b2:	4770      	bx	lr

0800a5b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f006 fb77 	bl	8010cb0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f006 fc90 	bl	8010eea <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	af04      	add	r7, sp, #16
 800a5da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a5dc:	2302      	movs	r3, #2
 800a5de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d102      	bne.n	800a5f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2203      	movs	r2, #3
 800a5f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b0b      	cmp	r3, #11
 800a5fe:	f200 81e4 	bhi.w	800a9ca <USBH_Process+0x3f6>
 800a602:	a201      	add	r2, pc, #4	; (adr r2, 800a608 <USBH_Process+0x34>)
 800a604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a608:	0800a639 	.word	0x0800a639
 800a60c:	0800a677 	.word	0x0800a677
 800a610:	0800a68b 	.word	0x0800a68b
 800a614:	0800a949 	.word	0x0800a949
 800a618:	0800a9cb 	.word	0x0800a9cb
 800a61c:	0800a74b 	.word	0x0800a74b
 800a620:	0800a8e3 	.word	0x0800a8e3
 800a624:	0800a77b 	.word	0x0800a77b
 800a628:	0800a7b7 	.word	0x0800a7b7
 800a62c:	0800a7f1 	.word	0x0800a7f1
 800a630:	0800a839 	.word	0x0800a839
 800a634:	0800a931 	.word	0x0800a931
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 81c4 	beq.w	800a9ce <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a64c:	20c8      	movs	r0, #200	; 0xc8
 800a64e:	f006 fcc1 	bl	8010fd4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f006 fb89 	bl	8010d6a <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800a66c:	2200      	movs	r2, #0
 800a66e:	4619      	mov	r1, r3
 800a670:	f003 fd22 	bl	800e0b8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a674:	e1ab      	b.n	800a9ce <USBH_Process+0x3fa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	f040 81a8 	bne.w	800a9d2 <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2202      	movs	r2, #2
 800a686:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a688:	e1a3      	b.n	800a9d2 <USBH_Process+0x3fe>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a690:	2b00      	cmp	r3, #0
 800a692:	d005      	beq.n	800a6a0 <USBH_Process+0xcc>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a69a:	2104      	movs	r1, #4
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a6a0:	2064      	movs	r0, #100	; 0x64
 800a6a2:	f006 fc97 	bl	8010fd4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f006 fb38 	bl	8010d1c <USBH_LL_GetSpeed>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2205      	movs	r2, #5
 800a6ba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a6bc:	2100      	movs	r1, #0
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f001 fa1f 	bl	800bb02 <USBH_AllocPipe>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a6cc:	2180      	movs	r1, #128	; 0x80
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f001 fa17 	bl	800bb02 <USBH_AllocPipe>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	7919      	ldrb	r1, [r3, #4]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800a6f0:	b292      	uxth	r2, r2
 800a6f2:	9202      	str	r2, [sp, #8]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	9201      	str	r2, [sp, #4]
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2280      	movs	r2, #128	; 0x80
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f001 f9d0 	bl	800baa4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	7959      	ldrb	r1, [r3, #5]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800a718:	b292      	uxth	r2, r2
 800a71a:	9202      	str	r2, [sp, #8]
 800a71c:	2200      	movs	r2, #0
 800a71e:	9201      	str	r2, [sp, #4]
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	4603      	mov	r3, r0
 800a724:	2200      	movs	r2, #0
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f001 f9bc 	bl	800baa4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800a740:	2200      	movs	r2, #0
 800a742:	4619      	mov	r1, r3
 800a744:	f003 fcb8 	bl	800e0b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a748:	e14c      	b.n	800a9e4 <USBH_Process+0x410>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f950 	bl	800a9f0 <USBH_HandleEnum>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	f040 813f 	bne.w	800a9d6 <USBH_Process+0x402>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a766:	2b01      	cmp	r3, #1
 800a768:	d103      	bne.n	800a772 <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2208      	movs	r2, #8
 800a76e:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 800a770:	e131      	b.n	800a9d6 <USBH_Process+0x402>
          phost->gState = HOST_INPUT;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2207      	movs	r2, #7
 800a776:	701a      	strb	r2, [r3, #0]
      break;
 800a778:	e12d      	b.n	800a9d6 <USBH_Process+0x402>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a780:	2b00      	cmp	r3, #0
 800a782:	f000 812a 	beq.w	800a9da <USBH_Process+0x406>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a78c:	2101      	movs	r1, #1
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2208      	movs	r2, #8
 800a796:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2205      	movs	r2, #5
 800a79c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	f003 fc82 	bl	800e0b8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a7b4:	e111      	b.n	800a9da <USBH_Process+0x406>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fc19 	bl	800aff8 <USBH_SetCfg>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d102      	bne.n	800a7d2 <USBH_Process+0x1fe>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2209      	movs	r2, #9
 800a7d0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	f003 fc65 	bl	800e0b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a7ee:	e0f9      	b.n	800a9e4 <USBH_Process+0x410>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a7f6:	f003 0320 	and.w	r3, r3, #32
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00a      	beq.n	800a814 <USBH_Process+0x240>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a7fe:	2101      	movs	r1, #1
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fc1c 	bl	800b03e <USBH_SetFeature>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d106      	bne.n	800a81a <USBH_Process+0x246>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	220a      	movs	r2, #10
 800a810:	701a      	strb	r2, [r3, #0]
 800a812:	e002      	b.n	800a81a <USBH_Process+0x246>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	220a      	movs	r2, #10
 800a818:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800a82e:	2200      	movs	r2, #0
 800a830:	4619      	mov	r1, r3
 800a832:	f003 fc41 	bl	800e0b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a836:	e0d5      	b.n	800a9e4 <USBH_Process+0x410>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d040      	beq.n	800a8c4 <USBH_Process+0x2f0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a84a:	2300      	movs	r3, #0
 800a84c:	73fb      	strb	r3, [r7, #15]
 800a84e:	e017      	b.n	800a880 <USBH_Process+0x2ac>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a850:	7bfb      	ldrb	r3, [r7, #15]
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	33dc      	adds	r3, #220	; 0xdc
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	791a      	ldrb	r2, [r3, #4]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 800a864:	429a      	cmp	r2, r3
 800a866:	d108      	bne.n	800a87a <USBH_Process+0x2a6>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a868:	7bfb      	ldrb	r3, [r7, #15]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	33dc      	adds	r3, #220	; 0xdc
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4413      	add	r3, r2
 800a872:	685a      	ldr	r2, [r3, #4]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
 800a87c:	3301      	adds	r3, #1
 800a87e:	73fb      	strb	r3, [r7, #15]
 800a880:	7bfb      	ldrb	r3, [r7, #15]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d0e4      	beq.n	800a850 <USBH_Process+0x27c>
          }
        }

        if (phost->pActiveClass != NULL)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d016      	beq.n	800a8be <USBH_Process+0x2ea>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	4798      	blx	r3
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d109      	bne.n	800a8b6 <USBH_Process+0x2e2>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2206      	movs	r2, #6
 800a8a6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a8ae:	2103      	movs	r1, #3
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	4798      	blx	r3
 800a8b4:	e006      	b.n	800a8c4 <USBH_Process+0x2f0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	220d      	movs	r2, #13
 800a8ba:	701a      	strb	r2, [r3, #0]
 800a8bc:	e002      	b.n	800a8c4 <USBH_Process+0x2f0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	220d      	movs	r2, #13
 800a8c2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2205      	movs	r2, #5
 800a8c8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800a8d8:	2200      	movs	r2, #0
 800a8da:	4619      	mov	r1, r3
 800a8dc:	f003 fbec 	bl	800e0b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a8e0:	e080      	b.n	800a9e4 <USBH_Process+0x410>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00f      	beq.n	800a90c <USBH_Process+0x338>
      {
        status = phost->pActiveClass->Requests(phost);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	4798      	blx	r3
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d16c      	bne.n	800a9de <USBH_Process+0x40a>
        {
          phost->gState = HOST_CLASS;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	220b      	movs	r2, #11
 800a908:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a90a:	e068      	b.n	800a9de <USBH_Process+0x40a>
        phost->gState = HOST_ABORT_STATE;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	220d      	movs	r2, #13
 800a910:	701a      	strb	r2, [r3, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2205      	movs	r2, #5
 800a916:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800a926:	2200      	movs	r2, #0
 800a928:	4619      	mov	r1, r3
 800a92a:	f003 fbc5 	bl	800e0b8 <osMessagePut>
      break;
 800a92e:	e056      	b.n	800a9de <USBH_Process+0x40a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a936:	2b00      	cmp	r3, #0
 800a938:	d053      	beq.n	800a9e2 <USBH_Process+0x40e>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	4798      	blx	r3
      }
      break;
 800a946:	e04c      	b.n	800a9e2 <USBH_Process+0x40e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7ff fd5b 	bl	800a40c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d009      	beq.n	800a974 <USBH_Process+0x3a0>
      {
        phost->pActiveClass->DeInit(phost);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d005      	beq.n	800a98a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a984:	2105      	movs	r1, #5
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b01      	cmp	r3, #1
 800a994:	d107      	bne.n	800a9a6 <USBH_Process+0x3d2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7ff fe08 	bl	800a5b4 <USBH_Start>
 800a9a4:	e002      	b.n	800a9ac <USBH_Process+0x3d8>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f006 f982 	bl	8010cb0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	f003 fb78 	bl	800e0b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9c8:	e00c      	b.n	800a9e4 <USBH_Process+0x410>

    case HOST_ABORT_STATE:
    default :
      break;
 800a9ca:	bf00      	nop
 800a9cc:	e00a      	b.n	800a9e4 <USBH_Process+0x410>
      break;
 800a9ce:	bf00      	nop
 800a9d0:	e008      	b.n	800a9e4 <USBH_Process+0x410>
      break;
 800a9d2:	bf00      	nop
 800a9d4:	e006      	b.n	800a9e4 <USBH_Process+0x410>
      break;
 800a9d6:	bf00      	nop
 800a9d8:	e004      	b.n	800a9e4 <USBH_Process+0x410>
    break;
 800a9da:	bf00      	nop
 800a9dc:	e002      	b.n	800a9e4 <USBH_Process+0x410>
      break;
 800a9de:	bf00      	nop
 800a9e0:	e000      	b.n	800a9e4 <USBH_Process+0x410>
      break;
 800a9e2:	bf00      	nop
  }
  return USBH_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop

0800a9f0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b088      	sub	sp, #32
 800a9f4:	af04      	add	r7, sp, #16
 800a9f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	785b      	ldrb	r3, [r3, #1]
 800aa00:	2b07      	cmp	r3, #7
 800aa02:	f200 8132 	bhi.w	800ac6a <USBH_HandleEnum+0x27a>
 800aa06:	a201      	add	r2, pc, #4	; (adr r2, 800aa0c <USBH_HandleEnum+0x1c>)
 800aa08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0c:	0800aa2d 	.word	0x0800aa2d
 800aa10:	0800aa9f 	.word	0x0800aa9f
 800aa14:	0800aab7 	.word	0x0800aab7
 800aa18:	0800ab2d 	.word	0x0800ab2d
 800aa1c:	0800ab45 	.word	0x0800ab45
 800aa20:	0800ab63 	.word	0x0800ab63
 800aa24:	0800abcf 	.word	0x0800abcf
 800aa28:	0800ac1f 	.word	0x0800ac1f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800aa2c:	2108      	movs	r1, #8
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fa12 	bl	800ae58 <USBH_Get_DevDesc>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f040 8119 	bne.w	800ac6e <USBH_HandleEnum+0x27e>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	7919      	ldrb	r1, [r3, #4]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800aa60:	b292      	uxth	r2, r2
 800aa62:	9202      	str	r2, [sp, #8]
 800aa64:	2200      	movs	r2, #0
 800aa66:	9201      	str	r2, [sp, #4]
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2280      	movs	r2, #128	; 0x80
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 f818 	bl	800baa4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	7959      	ldrb	r1, [r3, #5]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800aa88:	b292      	uxth	r2, r2
 800aa8a:	9202      	str	r2, [sp, #8]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	9201      	str	r2, [sp, #4]
 800aa90:	9300      	str	r3, [sp, #0]
 800aa92:	4603      	mov	r3, r0
 800aa94:	2200      	movs	r2, #0
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f001 f804 	bl	800baa4 <USBH_OpenPipe>
      }
      break;
 800aa9c:	e0e7      	b.n	800ac6e <USBH_HandleEnum+0x27e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 800aa9e:	2112      	movs	r1, #18
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f9d9 	bl	800ae58 <USBH_Get_DevDesc>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f040 80e2 	bne.w	800ac72 <USBH_HandleEnum+0x282>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2202      	movs	r2, #2
 800aab2:	705a      	strb	r2, [r3, #1]

      }
      break;
 800aab4:	e0dd      	b.n	800ac72 <USBH_HandleEnum+0x282>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800aab6:	2101      	movs	r1, #1
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fa79 	bl	800afb0 <USBH_SetAddress>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f040 80d8 	bne.w	800ac76 <USBH_HandleEnum+0x286>
      {
        USBH_Delay(2U);
 800aac6:	2002      	movs	r0, #2
 800aac8:	f006 fa84 	bl	8010fd4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2203      	movs	r2, #3
 800aad8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	7919      	ldrb	r1, [r3, #4]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800aaee:	b292      	uxth	r2, r2
 800aaf0:	9202      	str	r2, [sp, #8]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	9201      	str	r2, [sp, #4]
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2280      	movs	r2, #128	; 0x80
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 ffd1 	bl	800baa4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	7959      	ldrb	r1, [r3, #5]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800ab16:	b292      	uxth	r2, r2
 800ab18:	9202      	str	r2, [sp, #8]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	9201      	str	r2, [sp, #4]
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	4603      	mov	r3, r0
 800ab22:	2200      	movs	r2, #0
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 ffbd 	bl	800baa4 <USBH_OpenPipe>
      }
      break;
 800ab2a:	e0a4      	b.n	800ac76 <USBH_HandleEnum+0x286>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 800ab2c:	2109      	movs	r1, #9
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f9ba 	bl	800aea8 <USBH_Get_CfgDesc>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f040 809f 	bne.w	800ac7a <USBH_HandleEnum+0x28a>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2204      	movs	r2, #4
 800ab40:	705a      	strb	r2, [r3, #1]
      }
      break;
 800ab42:	e09a      	b.n	800ac7a <USBH_HandleEnum+0x28a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f9ab 	bl	800aea8 <USBH_Get_CfgDesc>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f040 8092 	bne.w	800ac7e <USBH_HandleEnum+0x28e>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2205      	movs	r2, #5
 800ab5e:	705a      	strb	r2, [r3, #1]
      }
      break;
 800ab60:	e08d      	b.n	800ac7e <USBH_HandleEnum+0x28e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d01e      	beq.n	800abaa <USBH_HandleEnum+0x1ba>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800ab78:	23ff      	movs	r3, #255	; 0xff
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f9b8 	bl	800aef0 <USBH_Get_StringDesc>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d17d      	bne.n	800ac82 <USBH_HandleEnum+0x292>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2206      	movs	r2, #6
 800ab8a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2205      	movs	r2, #5
 800ab90:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800aba0:	2200      	movs	r2, #0
 800aba2:	4619      	mov	r1, r3
 800aba4:	f003 fa88 	bl	800e0b8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aba8:	e06b      	b.n	800ac82 <USBH_HandleEnum+0x292>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2206      	movs	r2, #6
 800abae:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2205      	movs	r2, #5
 800abb4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800abc4:	2200      	movs	r2, #0
 800abc6:	4619      	mov	r1, r3
 800abc8:	f003 fa76 	bl	800e0b8 <osMessagePut>
      break;
 800abcc:	e059      	b.n	800ac82 <USBH_HandleEnum+0x292>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d010      	beq.n	800abfa <USBH_HandleEnum+0x20a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800abe4:	23ff      	movs	r3, #255	; 0xff
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 f982 	bl	800aef0 <USBH_Get_StringDesc>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d149      	bne.n	800ac86 <USBH_HandleEnum+0x296>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2207      	movs	r2, #7
 800abf6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800abf8:	e045      	b.n	800ac86 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2207      	movs	r2, #7
 800abfe:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2205      	movs	r2, #5
 800ac04:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ac14:	2200      	movs	r2, #0
 800ac16:	4619      	mov	r1, r3
 800ac18:	f003 fa4e 	bl	800e0b8 <osMessagePut>
      break;
 800ac1c:	e033      	b.n	800ac86 <USBH_HandleEnum+0x296>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00f      	beq.n	800ac48 <USBH_HandleEnum+0x258>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800ac34:	23ff      	movs	r3, #255	; 0xff
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f95a 	bl	800aef0 <USBH_Get_StringDesc>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d123      	bne.n	800ac8a <USBH_HandleEnum+0x29a>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ac46:	e020      	b.n	800ac8a <USBH_HandleEnum+0x29a>
        Status = USBH_OK;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2205      	movs	r2, #5
 800ac50:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ac60:	2200      	movs	r2, #0
 800ac62:	4619      	mov	r1, r3
 800ac64:	f003 fa28 	bl	800e0b8 <osMessagePut>
      break;
 800ac68:	e00f      	b.n	800ac8a <USBH_HandleEnum+0x29a>

    default:
      break;
 800ac6a:	bf00      	nop
 800ac6c:	e00e      	b.n	800ac8c <USBH_HandleEnum+0x29c>
      break;
 800ac6e:	bf00      	nop
 800ac70:	e00c      	b.n	800ac8c <USBH_HandleEnum+0x29c>
      break;
 800ac72:	bf00      	nop
 800ac74:	e00a      	b.n	800ac8c <USBH_HandleEnum+0x29c>
      break;
 800ac76:	bf00      	nop
 800ac78:	e008      	b.n	800ac8c <USBH_HandleEnum+0x29c>
      break;
 800ac7a:	bf00      	nop
 800ac7c:	e006      	b.n	800ac8c <USBH_HandleEnum+0x29c>
      break;
 800ac7e:	bf00      	nop
 800ac80:	e004      	b.n	800ac8c <USBH_HandleEnum+0x29c>
      break;
 800ac82:	bf00      	nop
 800ac84:	e002      	b.n	800ac8c <USBH_HandleEnum+0x29c>
      break;
 800ac86:	bf00      	nop
 800ac88:	e000      	b.n	800ac8c <USBH_HandleEnum+0x29c>
      break;
 800ac8a:	bf00      	nop
  }
  return Status;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop

0800ac98 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800acaa:	bf00      	nop
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	bc80      	pop	{r7}
 800acb2:	4770      	bx	lr

0800acb4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800acc2:	1c5a      	adds	r2, r3, #1
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f804 	bl	800acd8 <USBH_HandleSof>
}
 800acd0:	bf00      	nop
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b0b      	cmp	r3, #11
 800ace8:	d10a      	bne.n	800ad00 <USBH_HandleSof+0x28>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d005      	beq.n	800ad00 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800acfa:	699b      	ldr	r3, [r3, #24]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	4798      	blx	r3
  }
}
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	4619      	mov	r1, r3
 800ad30:	f003 f9c2 	bl	800e0b8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ad34:	bf00      	nop
}
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800ad4c:	bf00      	nop
}
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bc80      	pop	{r7}
 800ad54:	4770      	bx	lr

0800ad56 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b082      	sub	sp, #8
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2201      	movs	r2, #1
 800ad62:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	f003 f993 	bl	800e0b8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f005 ff92 	bl	8010ce6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	791b      	ldrb	r3, [r3, #4]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 feba 	bl	800bb42 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	795b      	ldrb	r3, [r3, #5]
 800add2:	4619      	mov	r1, r3
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 feb4 	bl	800bb42 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800adee:	2200      	movs	r2, #0
 800adf0:	4619      	mov	r1, r3
 800adf2:	f003 f961 	bl	800e0b8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 800ae0e:	f107 030c 	add.w	r3, r7, #12
 800ae12:	f04f 32ff 	mov.w	r2, #4294967295
 800ae16:	4618      	mov	r0, r3
 800ae18:	f003 f98e 	bl	800e138 <osMessageGet>
    if (event.status == osEventMessage)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2b10      	cmp	r3, #16
 800ae20:	d1f2      	bne.n	800ae08 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7ff fbd6 	bl	800a5d4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800ae28:	e7ee      	b.n	800ae08 <USBH_Process_OS+0x8>

0800ae2a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ae46:	2200      	movs	r2, #0
 800ae48:	4619      	mov	r1, r3
 800ae4a:	f003 f935 	bl	800e0b8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af02      	add	r7, sp, #8
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	460b      	mov	r3, r1
 800ae62:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ae6a:	78fb      	ldrb	r3, [r7, #3]
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	9300      	str	r3, [sp, #0]
 800ae70:	4613      	mov	r3, r2
 800ae72:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae76:	2100      	movs	r1, #0
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f864 	bl	800af46 <USBH_GetDescriptor>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	73fb      	strb	r3, [r7, #15]
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10a      	bne.n	800ae9e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f503 7049 	add.w	r0, r3, #804	; 0x324
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ae94:	78fa      	ldrb	r2, [r7, #3]
 800ae96:	b292      	uxth	r2, r2
 800ae98:	4619      	mov	r1, r3
 800ae9a:	f000 f918 	bl	800b0ce <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af02      	add	r7, sp, #8
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	331c      	adds	r3, #28
 800aeb8:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aeba:	887b      	ldrh	r3, [r7, #2]
 800aebc:	9300      	str	r3, [sp, #0]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aec4:	2100      	movs	r1, #0
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f83d 	bl	800af46 <USBH_GetDescriptor>
 800aecc:	4603      	mov	r3, r0
 800aece:	72fb      	strb	r3, [r7, #11]
 800aed0:	7afb      	ldrb	r3, [r7, #11]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d107      	bne.n	800aee6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f203 3336 	addw	r3, r3, #822	; 0x336
 800aedc:	887a      	ldrh	r2, [r7, #2]
 800aede:	68f9      	ldr	r1, [r7, #12]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 f963 	bl	800b1ac <USBH_ParseCfgDesc>
  }

  return status;
 800aee6:	7afb      	ldrb	r3, [r7, #11]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b088      	sub	sp, #32
 800aef4:	af02      	add	r7, sp, #8
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	607a      	str	r2, [r7, #4]
 800aefa:	461a      	mov	r2, r3
 800aefc:	460b      	mov	r3, r1
 800aefe:	72fb      	strb	r3, [r7, #11]
 800af00:	4613      	mov	r3, r2
 800af02:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800af04:	7afb      	ldrb	r3, [r7, #11]
 800af06:	b29b      	uxth	r3, r3
 800af08:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800af0c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800af14:	893b      	ldrh	r3, [r7, #8]
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	460b      	mov	r3, r1
 800af1a:	2100      	movs	r1, #0
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f000 f812 	bl	800af46 <USBH_GetDescriptor>
 800af22:	4603      	mov	r3, r0
 800af24:	75fb      	strb	r3, [r7, #23]
 800af26:	7dfb      	ldrb	r3, [r7, #23]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d107      	bne.n	800af3c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af32:	893a      	ldrh	r2, [r7, #8]
 800af34:	6879      	ldr	r1, [r7, #4]
 800af36:	4618      	mov	r0, r3
 800af38:	f000 fa34 	bl	800b3a4 <USBH_ParseStringDesc>
  }

  return status;
 800af3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3718      	adds	r7, #24
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	60f8      	str	r0, [r7, #12]
 800af4e:	607b      	str	r3, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	72fb      	strb	r3, [r7, #11]
 800af54:	4613      	mov	r3, r2
 800af56:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	789b      	ldrb	r3, [r3, #2]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d11c      	bne.n	800af9a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800af60:	7afb      	ldrb	r3, [r7, #11]
 800af62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af66:	b2da      	uxtb	r2, r3
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2206      	movs	r2, #6
 800af70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	893a      	ldrh	r2, [r7, #8]
 800af76:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800af78:	893b      	ldrh	r3, [r7, #8]
 800af7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800af7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af82:	d104      	bne.n	800af8e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f240 4209 	movw	r2, #1033	; 0x409
 800af8a:	829a      	strh	r2, [r3, #20]
 800af8c:	e002      	b.n	800af94 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	8b3a      	ldrh	r2, [r7, #24]
 800af98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800af9a:	8b3b      	ldrh	r3, [r7, #24]
 800af9c:	461a      	mov	r2, r3
 800af9e:	6879      	ldr	r1, [r7, #4]
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f000 fa4b 	bl	800b43c <USBH_CtlReq>
 800afa6:	4603      	mov	r3, r0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	460b      	mov	r3, r1
 800afba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	789b      	ldrb	r3, [r3, #2]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d10f      	bne.n	800afe4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2205      	movs	r2, #5
 800afce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800afd0:	78fb      	ldrb	r3, [r7, #3]
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800afe4:	2200      	movs	r2, #0
 800afe6:	2100      	movs	r1, #0
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fa27 	bl	800b43c <USBH_CtlReq>
 800afee:	4603      	mov	r3, r0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	460b      	mov	r3, r1
 800b002:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	789b      	ldrb	r3, [r3, #2]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d10e      	bne.n	800b02a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2209      	movs	r2, #9
 800b016:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	887a      	ldrh	r2, [r7, #2]
 800b01c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b02a:	2200      	movs	r2, #0
 800b02c:	2100      	movs	r1, #0
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 fa04 	bl	800b43c <USBH_CtlReq>
 800b034:	4603      	mov	r3, r0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	460b      	mov	r3, r1
 800b048:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	789b      	ldrb	r3, [r3, #2]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d10f      	bne.n	800b072 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2203      	movs	r2, #3
 800b05c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b05e:	78fb      	ldrb	r3, [r7, #3]
 800b060:	b29a      	uxth	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b072:	2200      	movs	r2, #0
 800b074:	2100      	movs	r1, #0
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f9e0 	bl	800b43c <USBH_CtlReq>
 800b07c:	4603      	mov	r3, r0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b082      	sub	sp, #8
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	460b      	mov	r3, r1
 800b090:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	789b      	ldrb	r3, [r3, #2]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d10f      	bne.n	800b0ba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2202      	movs	r2, #2
 800b09e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b0ac:	78fb      	ldrb	r3, [r7, #3]
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	2100      	movs	r1, #0
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f9bc 	bl	800b43c <USBH_CtlReq>
 800b0c4:	4603      	mov	r3, r0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b085      	sub	sp, #20
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	60f8      	str	r0, [r7, #12]
 800b0d6:	60b9      	str	r1, [r7, #8]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	781a      	ldrb	r2, [r3, #0]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	785a      	ldrb	r2, [r3, #1]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	3302      	adds	r3, #2
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	3303      	adds	r3, #3
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	021b      	lsls	r3, r3, #8
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	4313      	orrs	r3, r2
 800b102:	b29a      	uxth	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	791a      	ldrb	r2, [r3, #4]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	795a      	ldrb	r2, [r3, #5]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	799a      	ldrb	r2, [r3, #6]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	79da      	ldrb	r2, [r3, #7]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b128:	88fb      	ldrh	r3, [r7, #6]
 800b12a:	2b08      	cmp	r3, #8
 800b12c:	d939      	bls.n	800b1a2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	3308      	adds	r3, #8
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	b29a      	uxth	r2, r3
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	3309      	adds	r3, #9
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	021b      	lsls	r3, r3, #8
 800b140:	b29b      	uxth	r3, r3
 800b142:	4313      	orrs	r3, r2
 800b144:	b29a      	uxth	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	330a      	adds	r3, #10
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	b29a      	uxth	r2, r3
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	330b      	adds	r3, #11
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	b29b      	uxth	r3, r3
 800b15a:	021b      	lsls	r3, r3, #8
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	4313      	orrs	r3, r2
 800b160:	b29a      	uxth	r2, r3
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	330c      	adds	r3, #12
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	330d      	adds	r3, #13
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	b29b      	uxth	r3, r3
 800b176:	021b      	lsls	r3, r3, #8
 800b178:	b29b      	uxth	r3, r3
 800b17a:	4313      	orrs	r3, r2
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	7b9a      	ldrb	r2, [r3, #14]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	7bda      	ldrb	r2, [r3, #15]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	7c1a      	ldrb	r2, [r3, #16]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	7c5a      	ldrb	r2, [r3, #17]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	745a      	strb	r2, [r3, #17]
  }
}
 800b1a2:	bf00      	nop
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bc80      	pop	{r7}
 800b1aa:	4770      	bx	lr

0800b1ac <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08a      	sub	sp, #40	; 0x28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	781a      	ldrb	r2, [r3, #0]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	785a      	ldrb	r2, [r3, #1]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	3302      	adds	r3, #2
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	3303      	adds	r3, #3
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	021b      	lsls	r3, r3, #8
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	791a      	ldrb	r2, [r3, #4]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	795a      	ldrb	r2, [r3, #5]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	799a      	ldrb	r2, [r3, #6]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	79da      	ldrb	r2, [r3, #7]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	7a1a      	ldrb	r2, [r3, #8]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b222:	88fb      	ldrh	r3, [r7, #6]
 800b224:	2b09      	cmp	r3, #9
 800b226:	d95f      	bls.n	800b2e8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b228:	2309      	movs	r3, #9
 800b22a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b230:	e051      	b.n	800b2d6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b232:	f107 0316 	add.w	r3, r7, #22
 800b236:	4619      	mov	r1, r3
 800b238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b23a:	f000 f8e5 	bl	800b408 <USBH_GetNextDesc>
 800b23e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b242:	785b      	ldrb	r3, [r3, #1]
 800b244:	2b04      	cmp	r3, #4
 800b246:	d146      	bne.n	800b2d6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b248:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b24c:	221a      	movs	r2, #26
 800b24e:	fb02 f303 	mul.w	r3, r2, r3
 800b252:	3308      	adds	r3, #8
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	4413      	add	r3, r2
 800b258:	3302      	adds	r3, #2
 800b25a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b25c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b25e:	69f8      	ldr	r0, [r7, #28]
 800b260:	f000 f846 	bl	800b2f0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b264:	2300      	movs	r3, #0
 800b266:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b26e:	e022      	b.n	800b2b6 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b270:	f107 0316 	add.w	r3, r7, #22
 800b274:	4619      	mov	r1, r3
 800b276:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b278:	f000 f8c6 	bl	800b408 <USBH_GetNextDesc>
 800b27c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b280:	785b      	ldrb	r3, [r3, #1]
 800b282:	2b05      	cmp	r3, #5
 800b284:	d117      	bne.n	800b2b6 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b286:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b28a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b28e:	3201      	adds	r2, #1
 800b290:	00d2      	lsls	r2, r2, #3
 800b292:	211a      	movs	r1, #26
 800b294:	fb01 f303 	mul.w	r3, r1, r3
 800b298:	4413      	add	r3, r2
 800b29a:	3308      	adds	r3, #8
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	4413      	add	r3, r2
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b2a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2a6:	69b8      	ldr	r0, [r7, #24]
 800b2a8:	f000 f850 	bl	800b34c <USBH_ParseEPDesc>
            ep_ix++;
 800b2ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	791b      	ldrb	r3, [r3, #4]
 800b2ba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d204      	bcs.n	800b2cc <USBH_ParseCfgDesc+0x120>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	885a      	ldrh	r2, [r3, #2]
 800b2c6:	8afb      	ldrh	r3, [r7, #22]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d8d1      	bhi.n	800b270 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b2cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b2d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d804      	bhi.n	800b2e8 <USBH_ParseCfgDesc+0x13c>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	885a      	ldrh	r2, [r3, #2]
 800b2e2:	8afb      	ldrh	r3, [r7, #22]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d8a4      	bhi.n	800b232 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b2e8:	bf00      	nop
 800b2ea:	3728      	adds	r7, #40	; 0x28
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	781a      	ldrb	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	785a      	ldrb	r2, [r3, #1]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	789a      	ldrb	r2, [r3, #2]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	78da      	ldrb	r2, [r3, #3]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	791a      	ldrb	r2, [r3, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	795a      	ldrb	r2, [r3, #5]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	799a      	ldrb	r2, [r3, #6]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	79da      	ldrb	r2, [r3, #7]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	7a1a      	ldrb	r2, [r3, #8]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	721a      	strb	r2, [r3, #8]
}
 800b342:	bf00      	nop
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	bc80      	pop	{r7}
 800b34a:	4770      	bx	lr

0800b34c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	785a      	ldrb	r2, [r3, #1]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	789a      	ldrb	r2, [r3, #2]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	78da      	ldrb	r2, [r3, #3]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	3304      	adds	r3, #4
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	3305      	adds	r3, #5
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	b29b      	uxth	r3, r3
 800b386:	021b      	lsls	r3, r3, #8
 800b388:	b29b      	uxth	r3, r3
 800b38a:	4313      	orrs	r3, r2
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	799a      	ldrb	r2, [r3, #6]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	719a      	strb	r2, [r3, #6]
}
 800b39a:	bf00      	nop
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bc80      	pop	{r7}
 800b3a2:	4770      	bx	lr

0800b3a4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	2b03      	cmp	r3, #3
 800b3ba:	d120      	bne.n	800b3fe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	1e9a      	subs	r2, r3, #2
 800b3c2:	88fb      	ldrh	r3, [r7, #6]
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	bf28      	it	cs
 800b3c8:	4613      	movcs	r3, r2
 800b3ca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	3302      	adds	r3, #2
 800b3d0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	82fb      	strh	r3, [r7, #22]
 800b3d6:	e00b      	b.n	800b3f0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b3d8:	8afb      	ldrh	r3, [r7, #22]
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	4413      	add	r3, r2
 800b3de:	781a      	ldrb	r2, [r3, #0]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b3ea:	8afb      	ldrh	r3, [r7, #22]
 800b3ec:	3302      	adds	r3, #2
 800b3ee:	82fb      	strh	r3, [r7, #22]
 800b3f0:	8afa      	ldrh	r2, [r7, #22]
 800b3f2:	8abb      	ldrh	r3, [r7, #20]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d3ef      	bcc.n	800b3d8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	701a      	strb	r2, [r3, #0]
  }
}
 800b3fe:	bf00      	nop
 800b400:	371c      	adds	r7, #28
 800b402:	46bd      	mov	sp, r7
 800b404:	bc80      	pop	{r7}
 800b406:	4770      	bx	lr

0800b408 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	881a      	ldrh	r2, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	4413      	add	r3, r2
 800b41e:	b29a      	uxth	r2, r3
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4413      	add	r3, r2
 800b42e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b430:	68fb      	ldr	r3, [r7, #12]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3714      	adds	r7, #20
 800b436:	46bd      	mov	sp, r7
 800b438:	bc80      	pop	{r7}
 800b43a:	4770      	bx	lr

0800b43c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	4613      	mov	r3, r2
 800b448:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b44a:	2301      	movs	r3, #1
 800b44c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	789b      	ldrb	r3, [r3, #2]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d002      	beq.n	800b45c <USBH_CtlReq+0x20>
 800b456:	2b02      	cmp	r3, #2
 800b458:	d01d      	beq.n	800b496 <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 800b45a:	e042      	b.n	800b4e2 <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	88fa      	ldrh	r2, [r7, #6]
 800b466:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2201      	movs	r2, #1
 800b46c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2202      	movs	r2, #2
 800b472:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b474:	2301      	movs	r3, #1
 800b476:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2203      	movs	r2, #3
 800b47c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b48c:	2200      	movs	r2, #0
 800b48e:	4619      	mov	r1, r3
 800b490:	f002 fe12 	bl	800e0b8 <osMessagePut>
      break;
 800b494:	e025      	b.n	800b4e2 <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f000 f828 	bl	800b4ec <USBH_HandleControl>
 800b49c:	4603      	mov	r3, r0
 800b49e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b4a0:	7dfb      	ldrb	r3, [r7, #23]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d108      	bne.n	800b4b8 <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	75fb      	strb	r3, [r7, #23]
      break;
 800b4b6:	e013      	b.n	800b4e0 <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 800b4b8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	d108      	bne.n	800b4d0 <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b4ca:	2303      	movs	r3, #3
 800b4cc:	75fb      	strb	r3, [r7, #23]
      break;
 800b4ce:	e007      	b.n	800b4e0 <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 800b4d0:	7dfb      	ldrb	r3, [r7, #23]
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d104      	bne.n	800b4e0 <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800b4dc:	2302      	movs	r3, #2
 800b4de:	75fb      	strb	r3, [r7, #23]
      break;
 800b4e0:	bf00      	nop
  }
  return status;
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3718      	adds	r7, #24
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af02      	add	r7, sp, #8
 800b4f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	7e1b      	ldrb	r3, [r3, #24]
 800b500:	3b01      	subs	r3, #1
 800b502:	2b0a      	cmp	r3, #10
 800b504:	f200 821d 	bhi.w	800b942 <USBH_HandleControl+0x456>
 800b508:	a201      	add	r2, pc, #4	; (adr r2, 800b510 <USBH_HandleControl+0x24>)
 800b50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b50e:	bf00      	nop
 800b510:	0800b53d 	.word	0x0800b53d
 800b514:	0800b557 	.word	0x0800b557
 800b518:	0800b5f9 	.word	0x0800b5f9
 800b51c:	0800b61f 	.word	0x0800b61f
 800b520:	0800b6ab 	.word	0x0800b6ab
 800b524:	0800b6d5 	.word	0x0800b6d5
 800b528:	0800b797 	.word	0x0800b797
 800b52c:	0800b7b9 	.word	0x0800b7b9
 800b530:	0800b84b 	.word	0x0800b84b
 800b534:	0800b871 	.word	0x0800b871
 800b538:	0800b903 	.word	0x0800b903
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f103 0110 	add.w	r1, r3, #16
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	795b      	ldrb	r3, [r3, #5]
 800b546:	461a      	mov	r2, r3
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fa0b 	bl	800b964 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2202      	movs	r2, #2
 800b552:	761a      	strb	r2, [r3, #24]
      break;
 800b554:	e200      	b.n	800b958 <USBH_HandleControl+0x46c>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	795b      	ldrb	r3, [r3, #5]
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f005 fcb1 	bl	8010ec4 <USBH_LL_GetURBState>
 800b562:	4603      	mov	r3, r0
 800b564:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b566:	7bbb      	ldrb	r3, [r7, #14]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d12c      	bne.n	800b5c6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	7c1b      	ldrb	r3, [r3, #16]
 800b570:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b574:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	8adb      	ldrh	r3, [r3, #22]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00a      	beq.n	800b594 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b57e:	7b7b      	ldrb	r3, [r7, #13]
 800b580:	2b80      	cmp	r3, #128	; 0x80
 800b582:	d103      	bne.n	800b58c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2203      	movs	r2, #3
 800b588:	761a      	strb	r2, [r3, #24]
 800b58a:	e00d      	b.n	800b5a8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2205      	movs	r2, #5
 800b590:	761a      	strb	r2, [r3, #24]
 800b592:	e009      	b.n	800b5a8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b594:	7b7b      	ldrb	r3, [r7, #13]
 800b596:	2b80      	cmp	r3, #128	; 0x80
 800b598:	d103      	bne.n	800b5a2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2209      	movs	r2, #9
 800b59e:	761a      	strb	r2, [r3, #24]
 800b5a0:	e002      	b.n	800b5a8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2207      	movs	r2, #7
 800b5a6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2203      	movs	r2, #3
 800b5ac:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b5bc:	2200      	movs	r2, #0
 800b5be:	4619      	mov	r1, r3
 800b5c0:	f002 fd7a 	bl	800e0b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b5c4:	e1bf      	b.n	800b946 <USBH_HandleControl+0x45a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b5c6:	7bbb      	ldrb	r3, [r7, #14]
 800b5c8:	2b04      	cmp	r3, #4
 800b5ca:	d003      	beq.n	800b5d4 <USBH_HandleControl+0xe8>
 800b5cc:	7bbb      	ldrb	r3, [r7, #14]
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	f040 81b9 	bne.w	800b946 <USBH_HandleControl+0x45a>
          phost->Control.state = CTRL_ERROR;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	220b      	movs	r2, #11
 800b5d8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2203      	movs	r2, #3
 800b5de:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	f002 fd61 	bl	800e0b8 <osMessagePut>
      break;
 800b5f6:	e1a6      	b.n	800b946 <USBH_HandleControl+0x45a>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6899      	ldr	r1, [r3, #8]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	899a      	ldrh	r2, [r3, #12]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	791b      	ldrb	r3, [r3, #4]
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f9e6 	bl	800b9e2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2204      	movs	r2, #4
 800b61a:	761a      	strb	r2, [r3, #24]
      break;
 800b61c:	e19c      	b.n	800b958 <USBH_HandleControl+0x46c>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	791b      	ldrb	r3, [r3, #4]
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f005 fc4d 	bl	8010ec4 <USBH_LL_GetURBState>
 800b62a:	4603      	mov	r3, r0
 800b62c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b62e:	7bbb      	ldrb	r3, [r7, #14]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d110      	bne.n	800b656 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2209      	movs	r2, #9
 800b638:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2203      	movs	r2, #3
 800b63e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b64e:	2200      	movs	r2, #0
 800b650:	4619      	mov	r1, r3
 800b652:	f002 fd31 	bl	800e0b8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b656:	7bbb      	ldrb	r3, [r7, #14]
 800b658:	2b05      	cmp	r3, #5
 800b65a:	d110      	bne.n	800b67e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b65c:	2303      	movs	r3, #3
 800b65e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2203      	movs	r2, #3
 800b664:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b674:	2200      	movs	r2, #0
 800b676:	4619      	mov	r1, r3
 800b678:	f002 fd1e 	bl	800e0b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b67c:	e165      	b.n	800b94a <USBH_HandleControl+0x45e>
        if (URB_Status == USBH_URB_ERROR)
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
 800b680:	2b04      	cmp	r3, #4
 800b682:	f040 8162 	bne.w	800b94a <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	220b      	movs	r2, #11
 800b68a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2203      	movs	r2, #3
 800b690:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	f002 fd08 	bl	800e0b8 <osMessagePut>
      break;
 800b6a8:	e14f      	b.n	800b94a <USBH_HandleControl+0x45e>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6899      	ldr	r1, [r3, #8]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	899a      	ldrh	r2, [r3, #12]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	795b      	ldrb	r3, [r3, #5]
 800b6b6:	2001      	movs	r0, #1
 800b6b8:	9000      	str	r0, [sp, #0]
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f96c 	bl	800b998 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2206      	movs	r2, #6
 800b6d0:	761a      	strb	r2, [r3, #24]
      break;
 800b6d2:	e141      	b.n	800b958 <USBH_HandleControl+0x46c>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	795b      	ldrb	r3, [r3, #5]
 800b6d8:	4619      	mov	r1, r3
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f005 fbf2 	bl	8010ec4 <USBH_LL_GetURBState>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b6e4:	7bbb      	ldrb	r3, [r7, #14]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d111      	bne.n	800b70e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2207      	movs	r2, #7
 800b6ee:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2203      	movs	r2, #3
 800b6f4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b704:	2200      	movs	r2, #0
 800b706:	4619      	mov	r1, r3
 800b708:	f002 fcd6 	bl	800e0b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b70c:	e11f      	b.n	800b94e <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_STALL)
 800b70e:	7bbb      	ldrb	r3, [r7, #14]
 800b710:	2b05      	cmp	r3, #5
 800b712:	d113      	bne.n	800b73c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	220c      	movs	r2, #12
 800b718:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b71a:	2303      	movs	r3, #3
 800b71c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2203      	movs	r2, #3
 800b722:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b732:	2200      	movs	r2, #0
 800b734:	4619      	mov	r1, r3
 800b736:	f002 fcbf 	bl	800e0b8 <osMessagePut>
      break;
 800b73a:	e108      	b.n	800b94e <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b73c:	7bbb      	ldrb	r3, [r7, #14]
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d111      	bne.n	800b766 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2205      	movs	r2, #5
 800b746:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2203      	movs	r2, #3
 800b74c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b75c:	2200      	movs	r2, #0
 800b75e:	4619      	mov	r1, r3
 800b760:	f002 fcaa 	bl	800e0b8 <osMessagePut>
      break;
 800b764:	e0f3      	b.n	800b94e <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 800b766:	7bbb      	ldrb	r3, [r7, #14]
 800b768:	2b04      	cmp	r3, #4
 800b76a:	f040 80f0 	bne.w	800b94e <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	220b      	movs	r2, #11
 800b772:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b774:	2302      	movs	r3, #2
 800b776:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2203      	movs	r2, #3
 800b77c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b78c:	2200      	movs	r2, #0
 800b78e:	4619      	mov	r1, r3
 800b790:	f002 fc92 	bl	800e0b8 <osMessagePut>
      break;
 800b794:	e0db      	b.n	800b94e <USBH_HandleControl+0x462>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	791b      	ldrb	r3, [r3, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	2100      	movs	r1, #0
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 f91f 	bl	800b9e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2208      	movs	r2, #8
 800b7b4:	761a      	strb	r2, [r3, #24]

      break;
 800b7b6:	e0cf      	b.n	800b958 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	791b      	ldrb	r3, [r3, #4]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f005 fb80 	bl	8010ec4 <USBH_LL_GetURBState>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b7c8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d113      	bne.n	800b7f6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	220d      	movs	r2, #13
 800b7d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2203      	movs	r2, #3
 800b7dc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	f002 fc62 	bl	800e0b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b7f4:	e0ad      	b.n	800b952 <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_ERROR)
 800b7f6:	7bbb      	ldrb	r3, [r7, #14]
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d111      	bne.n	800b820 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	220b      	movs	r2, #11
 800b800:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2203      	movs	r2, #3
 800b806:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b816:	2200      	movs	r2, #0
 800b818:	4619      	mov	r1, r3
 800b81a:	f002 fc4d 	bl	800e0b8 <osMessagePut>
      break;
 800b81e:	e098      	b.n	800b952 <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_STALL)
 800b820:	7bbb      	ldrb	r3, [r7, #14]
 800b822:	2b05      	cmp	r3, #5
 800b824:	f040 8095 	bne.w	800b952 <USBH_HandleControl+0x466>
          status = USBH_NOT_SUPPORTED;
 800b828:	2303      	movs	r3, #3
 800b82a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2203      	movs	r2, #3
 800b830:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b840:	2200      	movs	r2, #0
 800b842:	4619      	mov	r1, r3
 800b844:	f002 fc38 	bl	800e0b8 <osMessagePut>
      break;
 800b848:	e083      	b.n	800b952 <USBH_HandleControl+0x466>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	795b      	ldrb	r3, [r3, #5]
 800b84e:	2201      	movs	r2, #1
 800b850:	9200      	str	r2, [sp, #0]
 800b852:	2200      	movs	r2, #0
 800b854:	2100      	movs	r1, #0
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f89e 	bl	800b998 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800b862:	b29a      	uxth	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	220a      	movs	r2, #10
 800b86c:	761a      	strb	r2, [r3, #24]
      break;
 800b86e:	e073      	b.n	800b958 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	795b      	ldrb	r3, [r3, #5]
 800b874:	4619      	mov	r1, r3
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f005 fb24 	bl	8010ec4 <USBH_LL_GetURBState>
 800b87c:	4603      	mov	r3, r0
 800b87e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b880:	7bbb      	ldrb	r3, [r7, #14]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d113      	bne.n	800b8ae <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b886:	2300      	movs	r3, #0
 800b888:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	220d      	movs	r2, #13
 800b88e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2203      	movs	r2, #3
 800b894:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	f002 fc06 	bl	800e0b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b8ac:	e053      	b.n	800b956 <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
 800b8b0:	2b02      	cmp	r3, #2
 800b8b2:	d111      	bne.n	800b8d8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2209      	movs	r2, #9
 800b8b8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2203      	movs	r2, #3
 800b8be:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	f002 fbf1 	bl	800e0b8 <osMessagePut>
      break;
 800b8d6:	e03e      	b.n	800b956 <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_ERROR)
 800b8d8:	7bbb      	ldrb	r3, [r7, #14]
 800b8da:	2b04      	cmp	r3, #4
 800b8dc:	d13b      	bne.n	800b956 <USBH_HandleControl+0x46a>
          phost->Control.state = CTRL_ERROR;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	220b      	movs	r2, #11
 800b8e2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2203      	movs	r2, #3
 800b8e8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	f002 fbdc 	bl	800e0b8 <osMessagePut>
      break;
 800b900:	e029      	b.n	800b956 <USBH_HandleControl+0x46a>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	7e5b      	ldrb	r3, [r3, #25]
 800b906:	3301      	adds	r3, #1
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	765a      	strb	r2, [r3, #25]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	7e5b      	ldrb	r3, [r3, #25]
 800b912:	2b02      	cmp	r3, #2
 800b914:	d806      	bhi.n	800b924 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b922:	e019      	b.n	800b958 <USBH_HandleControl+0x46c>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800b92a:	2106      	movs	r1, #6
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b93c:	2302      	movs	r3, #2
 800b93e:	73fb      	strb	r3, [r7, #15]
      break;
 800b940:	e00a      	b.n	800b958 <USBH_HandleControl+0x46c>

    default:
      break;
 800b942:	bf00      	nop
 800b944:	e008      	b.n	800b958 <USBH_HandleControl+0x46c>
      break;
 800b946:	bf00      	nop
 800b948:	e006      	b.n	800b958 <USBH_HandleControl+0x46c>
      break;
 800b94a:	bf00      	nop
 800b94c:	e004      	b.n	800b958 <USBH_HandleControl+0x46c>
      break;
 800b94e:	bf00      	nop
 800b950:	e002      	b.n	800b958 <USBH_HandleControl+0x46c>
      break;
 800b952:	bf00      	nop
 800b954:	e000      	b.n	800b958 <USBH_HandleControl+0x46c>
      break;
 800b956:	bf00      	nop
  }

  return status;
 800b958:	7bfb      	ldrb	r3, [r7, #15]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop

0800b964 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b088      	sub	sp, #32
 800b968:	af04      	add	r7, sp, #16
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	4613      	mov	r3, r2
 800b970:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b972:	79f9      	ldrb	r1, [r7, #7]
 800b974:	2300      	movs	r3, #0
 800b976:	9303      	str	r3, [sp, #12]
 800b978:	2308      	movs	r3, #8
 800b97a:	9302      	str	r3, [sp, #8]
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	2300      	movs	r3, #0
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	2300      	movs	r3, #0
 800b986:	2200      	movs	r2, #0
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f005 fa6a 	bl	8010e62 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b088      	sub	sp, #32
 800b99c:	af04      	add	r7, sp, #16
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	80fb      	strh	r3, [r7, #6]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b9bc:	7979      	ldrb	r1, [r7, #5]
 800b9be:	7e3b      	ldrb	r3, [r7, #24]
 800b9c0:	9303      	str	r3, [sp, #12]
 800b9c2:	88fb      	ldrh	r3, [r7, #6]
 800b9c4:	9302      	str	r3, [sp, #8]
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	9301      	str	r3, [sp, #4]
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f005 fa45 	bl	8010e62 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b088      	sub	sp, #32
 800b9e6:	af04      	add	r7, sp, #16
 800b9e8:	60f8      	str	r0, [r7, #12]
 800b9ea:	60b9      	str	r1, [r7, #8]
 800b9ec:	4611      	mov	r1, r2
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	80fb      	strh	r3, [r7, #6]
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b9f8:	7979      	ldrb	r1, [r7, #5]
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	9303      	str	r3, [sp, #12]
 800b9fe:	88fb      	ldrh	r3, [r7, #6]
 800ba00:	9302      	str	r3, [sp, #8]
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	9301      	str	r3, [sp, #4]
 800ba06:	2301      	movs	r3, #1
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f005 fa27 	bl	8010e62 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ba14:	2300      	movs	r3, #0

}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b088      	sub	sp, #32
 800ba22:	af04      	add	r7, sp, #16
 800ba24:	60f8      	str	r0, [r7, #12]
 800ba26:	60b9      	str	r1, [r7, #8]
 800ba28:	4611      	mov	r1, r2
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	80fb      	strh	r3, [r7, #6]
 800ba30:	4613      	mov	r3, r2
 800ba32:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ba42:	7979      	ldrb	r1, [r7, #5]
 800ba44:	7e3b      	ldrb	r3, [r7, #24]
 800ba46:	9303      	str	r3, [sp, #12]
 800ba48:	88fb      	ldrh	r3, [r7, #6]
 800ba4a:	9302      	str	r3, [sp, #8]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	9301      	str	r3, [sp, #4]
 800ba50:	2301      	movs	r3, #1
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	2302      	movs	r3, #2
 800ba56:	2200      	movs	r2, #0
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f005 fa02 	bl	8010e62 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b088      	sub	sp, #32
 800ba6c:	af04      	add	r7, sp, #16
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	4611      	mov	r1, r2
 800ba74:	461a      	mov	r2, r3
 800ba76:	460b      	mov	r3, r1
 800ba78:	80fb      	strh	r3, [r7, #6]
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ba7e:	7979      	ldrb	r1, [r7, #5]
 800ba80:	2300      	movs	r3, #0
 800ba82:	9303      	str	r3, [sp, #12]
 800ba84:	88fb      	ldrh	r3, [r7, #6]
 800ba86:	9302      	str	r3, [sp, #8]
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	9301      	str	r3, [sp, #4]
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	2302      	movs	r3, #2
 800ba92:	2201      	movs	r2, #1
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f005 f9e4 	bl	8010e62 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af04      	add	r7, sp, #16
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	4608      	mov	r0, r1
 800baae:	4611      	mov	r1, r2
 800bab0:	461a      	mov	r2, r3
 800bab2:	4603      	mov	r3, r0
 800bab4:	70fb      	strb	r3, [r7, #3]
 800bab6:	460b      	mov	r3, r1
 800bab8:	70bb      	strb	r3, [r7, #2]
 800baba:	4613      	mov	r3, r2
 800babc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800babe:	7878      	ldrb	r0, [r7, #1]
 800bac0:	78ba      	ldrb	r2, [r7, #2]
 800bac2:	78f9      	ldrb	r1, [r7, #3]
 800bac4:	8b3b      	ldrh	r3, [r7, #24]
 800bac6:	9302      	str	r3, [sp, #8]
 800bac8:	7d3b      	ldrb	r3, [r7, #20]
 800baca:	9301      	str	r3, [sp, #4]
 800bacc:	7c3b      	ldrb	r3, [r7, #16]
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	4603      	mov	r3, r0
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f005 f977 	bl	8010dc6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b082      	sub	sp, #8
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	460b      	mov	r3, r1
 800baec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800baee:	78fb      	ldrb	r3, [r7, #3]
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f005 f996 	bl	8010e24 <USBH_LL_ClosePipe>

  return USBH_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b084      	sub	sp, #16
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f832 	bl	800bb78 <USBH_GetFreePipe>
 800bb14:	4603      	mov	r3, r0
 800bb16:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bb18:	89fb      	ldrh	r3, [r7, #14]
 800bb1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d009      	beq.n	800bb36 <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bb22:	78fb      	ldrb	r3, [r7, #3]
 800bb24:	89fa      	ldrh	r2, [r7, #14]
 800bb26:	f002 020f 	and.w	r2, r2, #15
 800bb2a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	32e0      	adds	r2, #224	; 0xe0
 800bb32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800bb36:	89fb      	ldrh	r3, [r7, #14]
 800bb38:	b2db      	uxtb	r3, r3
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bb42:	b480      	push	{r7}
 800bb44:	b083      	sub	sp, #12
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bb4e:	78fb      	ldrb	r3, [r7, #3]
 800bb50:	2b0a      	cmp	r3, #10
 800bb52:	d80b      	bhi.n	800bb6c <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bb54:	78fa      	ldrb	r2, [r7, #3]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	32e0      	adds	r2, #224	; 0xe0
 800bb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb5e:	78fa      	ldrb	r2, [r7, #3]
 800bb60:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	32e0      	adds	r2, #224	; 0xe0
 800bb68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	370c      	adds	r7, #12
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bc80      	pop	{r7}
 800bb76:	4770      	bx	lr

0800bb78 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bb84:	2300      	movs	r3, #0
 800bb86:	73fb      	strb	r3, [r7, #15]
 800bb88:	e00e      	b.n	800bba8 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bb8a:	7bfa      	ldrb	r2, [r7, #15]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	32e0      	adds	r2, #224	; 0xe0
 800bb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d102      	bne.n	800bba2 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	e007      	b.n	800bbb2 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800bba2:	7bfb      	ldrb	r3, [r7, #15]
 800bba4:	3301      	adds	r3, #1
 800bba6:	73fb      	strb	r3, [r7, #15]
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
 800bbaa:	2b0a      	cmp	r3, #10
 800bbac:	d9ed      	bls.n	800bb8a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bbae:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bc80      	pop	{r7}
 800bbba:	4770      	bx	lr

0800bbbc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bbc6:	79fb      	ldrb	r3, [r7, #7]
 800bbc8:	4a08      	ldr	r2, [pc, #32]	; (800bbec <disk_status+0x30>)
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4413      	add	r3, r2
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	79fa      	ldrb	r2, [r7, #7]
 800bbd4:	4905      	ldr	r1, [pc, #20]	; (800bbec <disk_status+0x30>)
 800bbd6:	440a      	add	r2, r1
 800bbd8:	7a12      	ldrb	r2, [r2, #8]
 800bbda:	4610      	mov	r0, r2
 800bbdc:	4798      	blx	r3
 800bbde:	4603      	mov	r3, r0
 800bbe0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	20000818 	.word	0x20000818

0800bbf0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800bbfe:	79fb      	ldrb	r3, [r7, #7]
 800bc00:	4a0d      	ldr	r2, [pc, #52]	; (800bc38 <disk_initialize+0x48>)
 800bc02:	5cd3      	ldrb	r3, [r2, r3]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d111      	bne.n	800bc2c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800bc08:	79fb      	ldrb	r3, [r7, #7]
 800bc0a:	4a0b      	ldr	r2, [pc, #44]	; (800bc38 <disk_initialize+0x48>)
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bc10:	79fb      	ldrb	r3, [r7, #7]
 800bc12:	4a09      	ldr	r2, [pc, #36]	; (800bc38 <disk_initialize+0x48>)
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	79fa      	ldrb	r2, [r7, #7]
 800bc1e:	4906      	ldr	r1, [pc, #24]	; (800bc38 <disk_initialize+0x48>)
 800bc20:	440a      	add	r2, r1
 800bc22:	7a12      	ldrb	r2, [r2, #8]
 800bc24:	4610      	mov	r0, r2
 800bc26:	4798      	blx	r3
 800bc28:	4603      	mov	r3, r0
 800bc2a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	20000818 	.word	0x20000818

0800bc3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bc3c:	b590      	push	{r4, r7, lr}
 800bc3e:	b087      	sub	sp, #28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60b9      	str	r1, [r7, #8]
 800bc44:	607a      	str	r2, [r7, #4]
 800bc46:	603b      	str	r3, [r7, #0]
 800bc48:	4603      	mov	r3, r0
 800bc4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bc4c:	7bfb      	ldrb	r3, [r7, #15]
 800bc4e:	4a0a      	ldr	r2, [pc, #40]	; (800bc78 <disk_read+0x3c>)
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	4413      	add	r3, r2
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	689c      	ldr	r4, [r3, #8]
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	4a07      	ldr	r2, [pc, #28]	; (800bc78 <disk_read+0x3c>)
 800bc5c:	4413      	add	r3, r2
 800bc5e:	7a18      	ldrb	r0, [r3, #8]
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	68b9      	ldr	r1, [r7, #8]
 800bc66:	47a0      	blx	r4
 800bc68:	4603      	mov	r3, r0
 800bc6a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bc6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	371c      	adds	r7, #28
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd90      	pop	{r4, r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20000818 	.word	0x20000818

0800bc7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bc7c:	b590      	push	{r4, r7, lr}
 800bc7e:	b087      	sub	sp, #28
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60b9      	str	r1, [r7, #8]
 800bc84:	607a      	str	r2, [r7, #4]
 800bc86:	603b      	str	r3, [r7, #0]
 800bc88:	4603      	mov	r3, r0
 800bc8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bc8c:	7bfb      	ldrb	r3, [r7, #15]
 800bc8e:	4a0a      	ldr	r2, [pc, #40]	; (800bcb8 <disk_write+0x3c>)
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4413      	add	r3, r2
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	68dc      	ldr	r4, [r3, #12]
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	4a07      	ldr	r2, [pc, #28]	; (800bcb8 <disk_write+0x3c>)
 800bc9c:	4413      	add	r3, r2
 800bc9e:	7a18      	ldrb	r0, [r3, #8]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	68b9      	ldr	r1, [r7, #8]
 800bca6:	47a0      	blx	r4
 800bca8:	4603      	mov	r3, r0
 800bcaa:	75fb      	strb	r3, [r7, #23]
  return res;
 800bcac:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	371c      	adds	r7, #28
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd90      	pop	{r4, r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20000818 	.word	0x20000818

0800bcbc <mem_set>:
		*d++ = *s++;
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800bccc:	e005      	b.n	800bcda <mem_set+0x1e>
		*d++ = (BYTE)val;
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	1c5a      	adds	r2, r3, #1
 800bcd2:	617a      	str	r2, [r7, #20]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	b2d2      	uxtb	r2, r2
 800bcd8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	1e5a      	subs	r2, r3, #1
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1f4      	bne.n	800bcce <mem_set+0x12>
}
 800bce4:	bf00      	nop
 800bce6:	bf00      	nop
 800bce8:	371c      	adds	r7, #28
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bc80      	pop	{r7}
 800bcee:	4770      	bx	lr

0800bcf0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800bcf0:	b480      	push	{r7}
 800bcf2:	b089      	sub	sp, #36	; 0x24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	61fb      	str	r3, [r7, #28]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bd04:	2300      	movs	r3, #0
 800bd06:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800bd08:	bf00      	nop
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	1e5a      	subs	r2, r3, #1
 800bd0e:	607a      	str	r2, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00d      	beq.n	800bd30 <mem_cmp+0x40>
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	1c5a      	adds	r2, r3, #1
 800bd18:	61fa      	str	r2, [r7, #28]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	1c5a      	adds	r2, r3, #1
 800bd22:	61ba      	str	r2, [r7, #24]
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	1acb      	subs	r3, r1, r3
 800bd28:	617b      	str	r3, [r7, #20]
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d0ec      	beq.n	800bd0a <mem_cmp+0x1a>
	return r;
 800bd30:	697b      	ldr	r3, [r7, #20]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3724      	adds	r7, #36	; 0x24
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bc80      	pop	{r7}
 800bd3a:	4770      	bx	lr

0800bd3c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bd46:	e002      	b.n	800bd4e <chk_chr+0x12>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	607b      	str	r3, [r7, #4]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d005      	beq.n	800bd62 <chk_chr+0x26>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d1f2      	bne.n	800bd48 <chk_chr+0xc>
	return *str;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	781b      	ldrb	r3, [r3, #0]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	370c      	adds	r7, #12
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bc80      	pop	{r7}
 800bd6e:	4770      	bx	lr

0800bd70 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f001 fff8 	bl	800dd74 <ff_req_grant>
 800bd84:	4603      	mov	r3, r0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b082      	sub	sp, #8
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
 800bd96:	460b      	mov	r3, r1
 800bd98:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d011      	beq.n	800bdc4 <unlock_fs+0x36>
 800bda0:	78fb      	ldrb	r3, [r7, #3]
 800bda2:	2b0c      	cmp	r3, #12
 800bda4:	d00e      	beq.n	800bdc4 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800bda6:	78fb      	ldrb	r3, [r7, #3]
 800bda8:	2b0b      	cmp	r3, #11
 800bdaa:	d00b      	beq.n	800bdc4 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800bdac:	78fb      	ldrb	r3, [r7, #3]
 800bdae:	2b09      	cmp	r3, #9
 800bdb0:	d008      	beq.n	800bdc4 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800bdb2:	78fb      	ldrb	r3, [r7, #3]
 800bdb4:	2b0f      	cmp	r3, #15
 800bdb6:	d005      	beq.n	800bdc4 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f001 ffed 	bl	800dd9e <ff_rel_grant>
	}
}
 800bdc4:	bf00      	nop
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	60fb      	str	r3, [r7, #12]
 800bdda:	e02b      	b.n	800be34 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800bddc:	4955      	ldr	r1, [pc, #340]	; (800bf34 <inc_lock+0x168>)
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	4613      	mov	r3, r2
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	440b      	add	r3, r1
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d11b      	bne.n	800be2e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800bdf6:	494f      	ldr	r1, [pc, #316]	; (800bf34 <inc_lock+0x168>)
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	005b      	lsls	r3, r3, #1
 800bdfe:	4413      	add	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	440b      	add	r3, r1
 800be04:	3304      	adds	r3, #4
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800be0e:	429a      	cmp	r2, r3
 800be10:	d10d      	bne.n	800be2e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800be12:	4948      	ldr	r1, [pc, #288]	; (800bf34 <inc_lock+0x168>)
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	4613      	mov	r3, r2
 800be18:	005b      	lsls	r3, r3, #1
 800be1a:	4413      	add	r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	440b      	add	r3, r1
 800be20:	3308      	adds	r3, #8
 800be22:	881a      	ldrh	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d006      	beq.n	800be3c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	3301      	adds	r3, #1
 800be32:	60fb      	str	r3, [r7, #12]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d9d0      	bls.n	800bddc <inc_lock+0x10>
 800be3a:	e000      	b.n	800be3e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800be3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2b02      	cmp	r3, #2
 800be42:	d145      	bne.n	800bed0 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800be44:	2300      	movs	r3, #0
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	e002      	b.n	800be50 <inc_lock+0x84>
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3301      	adds	r3, #1
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d809      	bhi.n	800be6a <inc_lock+0x9e>
 800be56:	4937      	ldr	r1, [pc, #220]	; (800bf34 <inc_lock+0x168>)
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	4613      	mov	r3, r2
 800be5c:	005b      	lsls	r3, r3, #1
 800be5e:	4413      	add	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	440b      	add	r3, r1
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1ef      	bne.n	800be4a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	d101      	bne.n	800be74 <inc_lock+0xa8>
 800be70:	2300      	movs	r3, #0
 800be72:	e05a      	b.n	800bf2a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800be7a:	482e      	ldr	r0, [pc, #184]	; (800bf34 <inc_lock+0x168>)
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	4613      	mov	r3, r2
 800be80:	005b      	lsls	r3, r3, #1
 800be82:	4413      	add	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4403      	add	r3, r0
 800be88:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800be90:	4828      	ldr	r0, [pc, #160]	; (800bf34 <inc_lock+0x168>)
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	4613      	mov	r3, r2
 800be96:	005b      	lsls	r3, r3, #1
 800be98:	4413      	add	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4403      	add	r3, r0
 800be9e:	3304      	adds	r3, #4
 800bea0:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800bea8:	4922      	ldr	r1, [pc, #136]	; (800bf34 <inc_lock+0x168>)
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	4613      	mov	r3, r2
 800beae:	005b      	lsls	r3, r3, #1
 800beb0:	4413      	add	r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	440b      	add	r3, r1
 800beb6:	3308      	adds	r3, #8
 800beb8:	4602      	mov	r2, r0
 800beba:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800bebc:	491d      	ldr	r1, [pc, #116]	; (800bf34 <inc_lock+0x168>)
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	4613      	mov	r3, r2
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	4413      	add	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	440b      	add	r3, r1
 800beca:	330a      	adds	r3, #10
 800becc:	2200      	movs	r2, #0
 800bece:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00c      	beq.n	800bef0 <inc_lock+0x124>
 800bed6:	4917      	ldr	r1, [pc, #92]	; (800bf34 <inc_lock+0x168>)
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	4613      	mov	r3, r2
 800bedc:	005b      	lsls	r3, r3, #1
 800bede:	4413      	add	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	440b      	add	r3, r1
 800bee4:	330a      	adds	r3, #10
 800bee6:	881b      	ldrh	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <inc_lock+0x124>
 800beec:	2300      	movs	r3, #0
 800beee:	e01c      	b.n	800bf2a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d10b      	bne.n	800bf0e <inc_lock+0x142>
 800bef6:	490f      	ldr	r1, [pc, #60]	; (800bf34 <inc_lock+0x168>)
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	4613      	mov	r3, r2
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	4413      	add	r3, r2
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	440b      	add	r3, r1
 800bf04:	330a      	adds	r3, #10
 800bf06:	881b      	ldrh	r3, [r3, #0]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	b299      	uxth	r1, r3
 800bf0c:	e001      	b.n	800bf12 <inc_lock+0x146>
 800bf0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bf12:	4808      	ldr	r0, [pc, #32]	; (800bf34 <inc_lock+0x168>)
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	4613      	mov	r3, r2
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	4413      	add	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4403      	add	r3, r0
 800bf20:	330a      	adds	r3, #10
 800bf22:	460a      	mov	r2, r1
 800bf24:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	3301      	adds	r3, #1
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bc80      	pop	{r7}
 800bf32:	4770      	bx	lr
 800bf34:	20000800 	.word	0x20000800

0800bf38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	3b01      	subs	r3, #1
 800bf44:	607b      	str	r3, [r7, #4]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d82e      	bhi.n	800bfaa <dec_lock+0x72>
		n = Files[i].ctr;
 800bf4c:	491b      	ldr	r1, [pc, #108]	; (800bfbc <dec_lock+0x84>)
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	4613      	mov	r3, r2
 800bf52:	005b      	lsls	r3, r3, #1
 800bf54:	4413      	add	r3, r2
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	440b      	add	r3, r1
 800bf5a:	330a      	adds	r3, #10
 800bf5c:	881b      	ldrh	r3, [r3, #0]
 800bf5e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bf60:	89fb      	ldrh	r3, [r7, #14]
 800bf62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf66:	d101      	bne.n	800bf6c <dec_lock+0x34>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800bf6c:	89fb      	ldrh	r3, [r7, #14]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d002      	beq.n	800bf78 <dec_lock+0x40>
 800bf72:	89fb      	ldrh	r3, [r7, #14]
 800bf74:	3b01      	subs	r3, #1
 800bf76:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bf78:	4910      	ldr	r1, [pc, #64]	; (800bfbc <dec_lock+0x84>)
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	005b      	lsls	r3, r3, #1
 800bf80:	4413      	add	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	440b      	add	r3, r1
 800bf86:	330a      	adds	r3, #10
 800bf88:	89fa      	ldrh	r2, [r7, #14]
 800bf8a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bf8c:	89fb      	ldrh	r3, [r7, #14]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d108      	bne.n	800bfa4 <dec_lock+0x6c>
 800bf92:	490a      	ldr	r1, [pc, #40]	; (800bfbc <dec_lock+0x84>)
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	4613      	mov	r3, r2
 800bf98:	005b      	lsls	r3, r3, #1
 800bf9a:	4413      	add	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	440b      	add	r3, r1
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	737b      	strb	r3, [r7, #13]
 800bfa8:	e001      	b.n	800bfae <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bfaa:	2302      	movs	r3, #2
 800bfac:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bfae:	7b7b      	ldrb	r3, [r7, #13]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3714      	adds	r7, #20
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bc80      	pop	{r7}
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	20000800 	.word	0x20000800

0800bfc0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bfc8:	2300      	movs	r3, #0
 800bfca:	60fb      	str	r3, [r7, #12]
 800bfcc:	e016      	b.n	800bffc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bfce:	4910      	ldr	r1, [pc, #64]	; (800c010 <clear_lock+0x50>)
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	005b      	lsls	r3, r3, #1
 800bfd6:	4413      	add	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	440b      	add	r3, r1
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d108      	bne.n	800bff6 <clear_lock+0x36>
 800bfe4:	490a      	ldr	r1, [pc, #40]	; (800c010 <clear_lock+0x50>)
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	4613      	mov	r3, r2
 800bfea:	005b      	lsls	r3, r3, #1
 800bfec:	4413      	add	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	440b      	add	r3, r1
 800bff2:	2200      	movs	r2, #0
 800bff4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3301      	adds	r3, #1
 800bffa:	60fb      	str	r3, [r7, #12]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d9e5      	bls.n	800bfce <clear_lock+0xe>
	}
}
 800c002:	bf00      	nop
 800c004:	bf00      	nop
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	bc80      	pop	{r7}
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	20000800 	.word	0x20000800

0800c014 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800c026:	2b00      	cmp	r3, #0
 800c028:	d038      	beq.n	800c09c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800c030:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c038:	6879      	ldr	r1, [r7, #4]
 800c03a:	2301      	movs	r3, #1
 800c03c:	697a      	ldr	r2, [r7, #20]
 800c03e:	f7ff fe1d 	bl	800bc7c <disk_write>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <sync_window+0x3a>
			res = FR_DISK_ERR;
 800c048:	2301      	movs	r3, #1
 800c04a:	73fb      	strb	r3, [r7, #15]
 800c04c:	e026      	b.n	800c09c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c05c:	697a      	ldr	r2, [r7, #20]
 800c05e:	1ad2      	subs	r2, r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c066:	429a      	cmp	r2, r3
 800c068:	d218      	bcs.n	800c09c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c070:	613b      	str	r3, [r7, #16]
 800c072:	e010      	b.n	800c096 <sync_window+0x82>
					wsect += fs->fsize;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c07a:	697a      	ldr	r2, [r7, #20]
 800c07c:	4413      	add	r3, r2
 800c07e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	2301      	movs	r3, #1
 800c08a:	697a      	ldr	r2, [r7, #20]
 800c08c:	f7ff fdf6 	bl	800bc7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	3b01      	subs	r3, #1
 800c094:	613b      	str	r3, [r7, #16]
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d8eb      	bhi.n	800c074 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3718      	adds	r7, #24
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b084      	sub	sp, #16
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800c0ba:	683a      	ldr	r2, [r7, #0]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d01b      	beq.n	800c0f8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff ffa7 	bl	800c014 <sync_window>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d113      	bne.n	800c0f8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c0d6:	6879      	ldr	r1, [r7, #4]
 800c0d8:	2301      	movs	r3, #1
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	f7ff fdae 	bl	800bc3c <disk_read>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d004      	beq.n	800c0f0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c0e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ea:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	683a      	ldr	r2, [r7, #0]
 800c0f4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 800c0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c102:	b480      	push	{r7}
 800c104:	b083      	sub	sp, #12
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	3b02      	subs	r3, #2
 800c110:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c118:	3b02      	subs	r3, #2
 800c11a:	683a      	ldr	r2, [r7, #0]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d301      	bcc.n	800c124 <clust2sect+0x22>
 800c120:	2300      	movs	r3, #0
 800c122:	e00a      	b.n	800c13a <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c12a:	461a      	mov	r2, r3
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	fb03 f202 	mul.w	r2, r3, r2
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800c138:	4413      	add	r3, r2
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	370c      	adds	r7, #12
 800c13e:	46bd      	mov	sp, r7
 800c140:	bc80      	pop	{r7}
 800c142:	4770      	bx	lr

0800c144 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d905      	bls.n	800c160 <get_fat+0x1c>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d302      	bcc.n	800c166 <get_fat+0x22>
		val = 1;	/* Internal error */
 800c160:	2301      	movs	r3, #1
 800c162:	617b      	str	r3, [r7, #20]
 800c164:	e0a3      	b.n	800c2ae <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c166:	f04f 33ff 	mov.w	r3, #4294967295
 800c16a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c172:	2b03      	cmp	r3, #3
 800c174:	d068      	beq.n	800c248 <get_fat+0x104>
 800c176:	2b03      	cmp	r3, #3
 800c178:	f300 808f 	bgt.w	800c29a <get_fat+0x156>
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d002      	beq.n	800c186 <get_fat+0x42>
 800c180:	2b02      	cmp	r3, #2
 800c182:	d040      	beq.n	800c206 <get_fat+0xc2>
 800c184:	e089      	b.n	800c29a <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	60fb      	str	r3, [r7, #12]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	085b      	lsrs	r3, r3, #1
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	4413      	add	r3, r2
 800c192:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	0a5b      	lsrs	r3, r3, #9
 800c19e:	4413      	add	r3, r2
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7ff ff7f 	bl	800c0a6 <move_window>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d178      	bne.n	800c2a0 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	1c5a      	adds	r2, r3, #1
 800c1b2:	60fa      	str	r2, [r7, #12]
 800c1b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	5cd3      	ldrb	r3, [r2, r3]
 800c1bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	0a5b      	lsrs	r3, r3, #9
 800c1c8:	4413      	add	r3, r2
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7ff ff6a 	bl	800c0a6 <move_window>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d165      	bne.n	800c2a4 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	5cd3      	ldrb	r3, [r2, r3]
 800c1e2:	021b      	lsls	r3, r3, #8
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	f003 0301 	and.w	r3, r3, #1
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d002      	beq.n	800c1fc <get_fat+0xb8>
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	091b      	lsrs	r3, r3, #4
 800c1fa:	e002      	b.n	800c202 <get_fat+0xbe>
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c202:	617b      	str	r3, [r7, #20]
			break;
 800c204:	e053      	b.n	800c2ae <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	0a1b      	lsrs	r3, r3, #8
 800c210:	4413      	add	r3, r2
 800c212:	4619      	mov	r1, r3
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7ff ff46 	bl	800c0a6 <move_window>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d143      	bne.n	800c2a8 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	005b      	lsls	r3, r3, #1
 800c224:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	4413      	add	r3, r2
 800c22c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	3301      	adds	r3, #1
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	021b      	lsls	r3, r3, #8
 800c236:	b21a      	sxth	r2, r3
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	b21b      	sxth	r3, r3
 800c23e:	4313      	orrs	r3, r2
 800c240:	b21b      	sxth	r3, r3
 800c242:	b29b      	uxth	r3, r3
 800c244:	617b      	str	r3, [r7, #20]
			break;
 800c246:	e032      	b.n	800c2ae <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	09db      	lsrs	r3, r3, #7
 800c252:	4413      	add	r3, r2
 800c254:	4619      	mov	r1, r3
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7ff ff25 	bl	800c0a6 <move_window>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d124      	bne.n	800c2ac <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	4413      	add	r3, r2
 800c26e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	3303      	adds	r3, #3
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	061a      	lsls	r2, r3, #24
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	3302      	adds	r3, #2
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	041b      	lsls	r3, r3, #16
 800c280:	4313      	orrs	r3, r2
 800c282:	693a      	ldr	r2, [r7, #16]
 800c284:	3201      	adds	r2, #1
 800c286:	7812      	ldrb	r2, [r2, #0]
 800c288:	0212      	lsls	r2, r2, #8
 800c28a:	4313      	orrs	r3, r2
 800c28c:	693a      	ldr	r2, [r7, #16]
 800c28e:	7812      	ldrb	r2, [r2, #0]
 800c290:	4313      	orrs	r3, r2
 800c292:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c296:	617b      	str	r3, [r7, #20]
			break;
 800c298:	e009      	b.n	800c2ae <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800c29a:	2301      	movs	r3, #1
 800c29c:	617b      	str	r3, [r7, #20]
 800c29e:	e006      	b.n	800c2ae <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c2a0:	bf00      	nop
 800c2a2:	e004      	b.n	800c2ae <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c2a4:	bf00      	nop
 800c2a6:	e002      	b.n	800c2ae <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c2a8:	bf00      	nop
 800c2aa:	e000      	b.n	800c2ae <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c2ac:	bf00      	nop
		}
	}

	return val;
 800c2ae:	697b      	ldr	r3, [r7, #20]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3718      	adds	r7, #24
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b088      	sub	sp, #32
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d905      	bls.n	800c2d6 <put_fat+0x1e>
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d302      	bcc.n	800c2dc <put_fat+0x24>
		res = FR_INT_ERR;
 800c2d6:	2302      	movs	r3, #2
 800c2d8:	77fb      	strb	r3, [r7, #31]
 800c2da:	e0f6      	b.n	800c4ca <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c2e2:	2b03      	cmp	r3, #3
 800c2e4:	f000 809e 	beq.w	800c424 <put_fat+0x16c>
 800c2e8:	2b03      	cmp	r3, #3
 800c2ea:	f300 80e4 	bgt.w	800c4b6 <put_fat+0x1fe>
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d002      	beq.n	800c2f8 <put_fat+0x40>
 800c2f2:	2b02      	cmp	r3, #2
 800c2f4:	d06f      	beq.n	800c3d6 <put_fat+0x11e>
 800c2f6:	e0de      	b.n	800c4b6 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	617b      	str	r3, [r7, #20]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	085b      	lsrs	r3, r3, #1
 800c300:	697a      	ldr	r2, [r7, #20]
 800c302:	4413      	add	r3, r2
 800c304:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	0a5b      	lsrs	r3, r3, #9
 800c310:	4413      	add	r3, r2
 800c312:	4619      	mov	r1, r3
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f7ff fec6 	bl	800c0a6 <move_window>
 800c31a:	4603      	mov	r3, r0
 800c31c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c31e:	7ffb      	ldrb	r3, [r7, #31]
 800c320:	2b00      	cmp	r3, #0
 800c322:	f040 80cb 	bne.w	800c4bc <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	1c5a      	adds	r2, r3, #1
 800c32a:	617a      	str	r2, [r7, #20]
 800c32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	4413      	add	r3, r2
 800c334:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	f003 0301 	and.w	r3, r3, #1
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00d      	beq.n	800c35c <put_fat+0xa4>
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	b25b      	sxtb	r3, r3
 800c346:	f003 030f 	and.w	r3, r3, #15
 800c34a:	b25a      	sxtb	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	011b      	lsls	r3, r3, #4
 800c352:	b25b      	sxtb	r3, r3
 800c354:	4313      	orrs	r3, r2
 800c356:	b25b      	sxtb	r3, r3
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	e001      	b.n	800c360 <put_fat+0xa8>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	69ba      	ldr	r2, [r7, #24]
 800c362:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2201      	movs	r2, #1
 800c368:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	0a5b      	lsrs	r3, r3, #9
 800c376:	4413      	add	r3, r2
 800c378:	4619      	mov	r1, r3
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f7ff fe93 	bl	800c0a6 <move_window>
 800c380:	4603      	mov	r3, r0
 800c382:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c384:	7ffb      	ldrb	r3, [r7, #31]
 800c386:	2b00      	cmp	r3, #0
 800c388:	f040 809a 	bne.w	800c4c0 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	4413      	add	r3, r2
 800c396:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	f003 0301 	and.w	r3, r3, #1
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d003      	beq.n	800c3aa <put_fat+0xf2>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	091b      	lsrs	r3, r3, #4
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	e00e      	b.n	800c3c8 <put_fat+0x110>
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	b25b      	sxtb	r3, r3
 800c3b0:	f023 030f 	bic.w	r3, r3, #15
 800c3b4:	b25a      	sxtb	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	0a1b      	lsrs	r3, r3, #8
 800c3ba:	b25b      	sxtb	r3, r3
 800c3bc:	f003 030f 	and.w	r3, r3, #15
 800c3c0:	b25b      	sxtb	r3, r3
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	b25b      	sxtb	r3, r3
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	69ba      	ldr	r2, [r7, #24]
 800c3ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800c3d4:	e079      	b.n	800c4ca <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	0a1b      	lsrs	r3, r3, #8
 800c3e0:	4413      	add	r3, r2
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f7ff fe5e 	bl	800c0a6 <move_window>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3ee:	7ffb      	ldrb	r3, [r7, #31]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d167      	bne.n	800c4c4 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	005b      	lsls	r3, r3, #1
 800c3f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	4413      	add	r3, r2
 800c400:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	b2da      	uxtb	r2, r3
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	701a      	strb	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	0a1b      	lsrs	r3, r3, #8
 800c410:	b29a      	uxth	r2, r3
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	3301      	adds	r3, #1
 800c416:	b2d2      	uxtb	r2, r2
 800c418:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2201      	movs	r2, #1
 800c41e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800c422:	e052      	b.n	800c4ca <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	09db      	lsrs	r3, r3, #7
 800c42e:	4413      	add	r3, r2
 800c430:	4619      	mov	r1, r3
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f7ff fe37 	bl	800c0a6 <move_window>
 800c438:	4603      	mov	r3, r0
 800c43a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c43c:	7ffb      	ldrb	r3, [r7, #31]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d142      	bne.n	800c4c8 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	4413      	add	r3, r2
 800c44e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	3303      	adds	r3, #3
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	061a      	lsls	r2, r3, #24
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	3302      	adds	r3, #2
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	041b      	lsls	r3, r3, #16
 800c460:	4313      	orrs	r3, r2
 800c462:	69ba      	ldr	r2, [r7, #24]
 800c464:	3201      	adds	r2, #1
 800c466:	7812      	ldrb	r2, [r2, #0]
 800c468:	0212      	lsls	r2, r2, #8
 800c46a:	4313      	orrs	r3, r2
 800c46c:	69ba      	ldr	r2, [r7, #24]
 800c46e:	7812      	ldrb	r2, [r2, #0]
 800c470:	4313      	orrs	r3, r2
 800c472:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	4313      	orrs	r3, r2
 800c47a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	701a      	strb	r2, [r3, #0]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	b29b      	uxth	r3, r3
 800c488:	0a1b      	lsrs	r3, r3, #8
 800c48a:	b29a      	uxth	r2, r3
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	3301      	adds	r3, #1
 800c490:	b2d2      	uxtb	r2, r2
 800c492:	701a      	strb	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	0c1a      	lsrs	r2, r3, #16
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	3302      	adds	r3, #2
 800c49c:	b2d2      	uxtb	r2, r2
 800c49e:	701a      	strb	r2, [r3, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	0e1a      	lsrs	r2, r3, #24
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	3303      	adds	r3, #3
 800c4a8:	b2d2      	uxtb	r2, r2
 800c4aa:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800c4b4:	e009      	b.n	800c4ca <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800c4b6:	2302      	movs	r3, #2
 800c4b8:	77fb      	strb	r3, [r7, #31]
 800c4ba:	e006      	b.n	800c4ca <put_fat+0x212>
			if (res != FR_OK) break;
 800c4bc:	bf00      	nop
 800c4be:	e004      	b.n	800c4ca <put_fat+0x212>
			if (res != FR_OK) break;
 800c4c0:	bf00      	nop
 800c4c2:	e002      	b.n	800c4ca <put_fat+0x212>
			if (res != FR_OK) break;
 800c4c4:	bf00      	nop
 800c4c6:	e000      	b.n	800c4ca <put_fat+0x212>
			if (res != FR_OK) break;
 800c4c8:	bf00      	nop
		}
	}

	return res;
 800c4ca:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3720      	adds	r7, #32
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b086      	sub	sp, #24
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10f      	bne.n	800c504 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c4ea:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d005      	beq.n	800c4fe <create_chain+0x2a>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c4f8:	693a      	ldr	r2, [r7, #16]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d31c      	bcc.n	800c538 <create_chain+0x64>
 800c4fe:	2301      	movs	r3, #1
 800c500:	613b      	str	r3, [r7, #16]
 800c502:	e019      	b.n	800c538 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800c504:	6839      	ldr	r1, [r7, #0]
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7ff fe1c 	bl	800c144 <get_fat>
 800c50c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d801      	bhi.n	800c518 <create_chain+0x44>
 800c514:	2301      	movs	r3, #1
 800c516:	e076      	b.n	800c606 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c51e:	d101      	bne.n	800c524 <create_chain+0x50>
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	e070      	b.n	800c606 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d201      	bcs.n	800c534 <create_chain+0x60>
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	e068      	b.n	800c606 <create_chain+0x132>
		scl = clst;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	3301      	adds	r3, #1
 800c540:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c548:	697a      	ldr	r2, [r7, #20]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d307      	bcc.n	800c55e <create_chain+0x8a>
			ncl = 2;
 800c54e:	2302      	movs	r3, #2
 800c550:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	429a      	cmp	r2, r3
 800c558:	d901      	bls.n	800c55e <create_chain+0x8a>
 800c55a:	2300      	movs	r3, #0
 800c55c:	e053      	b.n	800c606 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800c55e:	6979      	ldr	r1, [r7, #20]
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f7ff fdef 	bl	800c144 <get_fat>
 800c566:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00e      	beq.n	800c58c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c574:	d002      	beq.n	800c57c <create_chain+0xa8>
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d101      	bne.n	800c580 <create_chain+0xac>
			return cs;
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	e042      	b.n	800c606 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800c580:	697a      	ldr	r2, [r7, #20]
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	429a      	cmp	r2, r3
 800c586:	d1d9      	bne.n	800c53c <create_chain+0x68>
 800c588:	2300      	movs	r3, #0
 800c58a:	e03c      	b.n	800c606 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800c58c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800c58e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800c592:	6979      	ldr	r1, [r7, #20]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff fe8f 	bl	800c2b8 <put_fat>
 800c59a:	4603      	mov	r3, r0
 800c59c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800c59e:	7bfb      	ldrb	r3, [r7, #15]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d109      	bne.n	800c5b8 <create_chain+0xe4>
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d006      	beq.n	800c5b8 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800c5aa:	697a      	ldr	r2, [r7, #20]
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7ff fe82 	bl	800c2b8 <put_fat>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800c5b8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d11a      	bne.n	800c5f4 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	697a      	ldr	r2, [r7, #20]
 800c5c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d0:	d018      	beq.n	800c604 <create_chain+0x130>
			fs->free_clust--;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c5d8:	1e5a      	subs	r2, r3, #1
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800c5e6:	f043 0301 	orr.w	r3, r3, #1
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800c5f2:	e007      	b.n	800c604 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800c5f4:	7bfb      	ldrb	r3, [r7, #15]
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d102      	bne.n	800c600 <create_chain+0x12c>
 800c5fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c5fe:	e000      	b.n	800c602 <create_chain+0x12e>
 800c600:	2301      	movs	r3, #1
 800c602:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800c604:	697b      	ldr	r3, [r7, #20]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3718      	adds	r7, #24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b086      	sub	sp, #24
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
 800c616:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	b29a      	uxth	r2, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c628:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d007      	beq.n	800c640 <dir_sdi+0x32>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c636:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c63a:	697a      	ldr	r2, [r7, #20]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d301      	bcc.n	800c644 <dir_sdi+0x36>
		return FR_INT_ERR;
 800c640:	2302      	movs	r3, #2
 800c642:	e074      	b.n	800c72e <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d10c      	bne.n	800c664 <dir_sdi+0x56>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c650:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c654:	2b03      	cmp	r3, #3
 800c656:	d105      	bne.n	800c664 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c65e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c662:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d111      	bne.n	800c68e <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c670:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800c674:	461a      	mov	r2, r3
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	4293      	cmp	r3, r2
 800c67a:	d301      	bcc.n	800c680 <dir_sdi+0x72>
			return FR_INT_ERR;
 800c67c:	2302      	movs	r3, #2
 800c67e:	e056      	b.n	800c72e <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c686:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c68a:	613b      	str	r3, [r7, #16]
 800c68c:	e032      	b.n	800c6f4 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c694:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c698:	011b      	lsls	r3, r3, #4
 800c69a:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800c69c:	e01e      	b.n	800c6dc <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c6a4:	6979      	ldr	r1, [r7, #20]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7ff fd4c 	bl	800c144 <get_fat>
 800c6ac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b4:	d101      	bne.n	800c6ba <dir_sdi+0xac>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e039      	b.n	800c72e <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d907      	bls.n	800c6d0 <dir_sdi+0xc2>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c6c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c6ca:	697a      	ldr	r2, [r7, #20]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d301      	bcc.n	800c6d4 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	e02c      	b.n	800c72e <dir_sdi+0x120>
			idx -= ic;
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	1ad3      	subs	r3, r2, r3
 800c6da:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800c6dc:	683a      	ldr	r2, [r7, #0]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d2dc      	bcs.n	800c69e <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c6ea:	6979      	ldr	r1, [r7, #20]
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7ff fd08 	bl	800c102 <clust2sect>
 800c6f2:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	697a      	ldr	r2, [r7, #20]
 800c6f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d101      	bne.n	800c706 <dir_sdi+0xf8>
 800c702:	2302      	movs	r3, #2
 800c704:	e013      	b.n	800c72e <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	091a      	lsrs	r2, r3, #4
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	441a      	add	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c71a:	461a      	mov	r2, r3
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	f003 030f 	and.w	r3, r3, #15
 800c722:	015b      	lsls	r3, r3, #5
 800c724:	441a      	add	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3718      	adds	r7, #24
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c736:	b590      	push	{r4, r7, lr}
 800c738:	b087      	sub	sp, #28
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
 800c73e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800c746:	3301      	adds	r3, #1
 800c748:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d004      	beq.n	800c75c <dir_next+0x26>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d101      	bne.n	800c760 <dir_next+0x2a>
		return FR_NO_FILE;
 800c75c:	2304      	movs	r3, #4
 800c75e:	e0dd      	b.n	800c91c <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f003 030f 	and.w	r3, r3, #15
 800c766:	2b00      	cmp	r3, #0
 800c768:	f040 80c6 	bne.w	800c8f8 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c780:	2b00      	cmp	r3, #0
 800c782:	d10b      	bne.n	800c79c <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c78a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800c78e:	461a      	mov	r2, r3
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	4293      	cmp	r3, r2
 800c794:	f0c0 80b0 	bcc.w	800c8f8 <dir_next+0x1c2>
				return FR_NO_FILE;
 800c798:	2304      	movs	r3, #4
 800c79a:	e0bf      	b.n	800c91c <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	091b      	lsrs	r3, r3, #4
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800c7a6:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800c7aa:	3a01      	subs	r2, #1
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f040 80a2 	bne.w	800c8f8 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	4610      	mov	r0, r2
 800c7c4:	f7ff fcbe 	bl	800c144 <get_fat>
 800c7c8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d801      	bhi.n	800c7d4 <dir_next+0x9e>
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	e0a3      	b.n	800c91c <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7da:	d101      	bne.n	800c7e0 <dir_next+0xaa>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e09d      	b.n	800c91c <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c7e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c7ea:	697a      	ldr	r2, [r7, #20]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d374      	bcc.n	800c8da <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d101      	bne.n	800c7fa <dir_next+0xc4>
 800c7f6:	2304      	movs	r3, #4
 800c7f8:	e090      	b.n	800c91c <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c806:	4619      	mov	r1, r3
 800c808:	4610      	mov	r0, r2
 800c80a:	f7ff fe63 	bl	800c4d4 <create_chain>
 800c80e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d101      	bne.n	800c81a <dir_next+0xe4>
 800c816:	2307      	movs	r3, #7
 800c818:	e080      	b.n	800c91c <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d101      	bne.n	800c824 <dir_next+0xee>
 800c820:	2302      	movs	r3, #2
 800c822:	e07b      	b.n	800c91c <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c82a:	d101      	bne.n	800c830 <dir_next+0xfa>
 800c82c:	2301      	movs	r3, #1
 800c82e:	e075      	b.n	800c91c <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c836:	4618      	mov	r0, r3
 800c838:	f7ff fbec 	bl	800c014 <sync_window>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d001      	beq.n	800c846 <dir_next+0x110>
 800c842:	2301      	movs	r3, #1
 800c844:	e06a      	b.n	800c91c <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c84c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c850:	2100      	movs	r1, #0
 800c852:	4618      	mov	r0, r3
 800c854:	f7ff fa32 	bl	800bcbc <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800c864:	6979      	ldr	r1, [r7, #20]
 800c866:	4610      	mov	r0, r2
 800c868:	f7ff fc4b 	bl	800c102 <clust2sect>
 800c86c:	4603      	mov	r3, r0
 800c86e:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800c872:	2300      	movs	r3, #0
 800c874:	613b      	str	r3, [r7, #16]
 800c876:	e01b      	b.n	800c8b0 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7ff fbc2 	bl	800c014 <sync_window>
 800c890:	4603      	mov	r3, r0
 800c892:	2b00      	cmp	r3, #0
 800c894:	d001      	beq.n	800c89a <dir_next+0x164>
 800c896:	2301      	movs	r3, #1
 800c898:	e040      	b.n	800c91c <dir_next+0x1e6>
						dp->fs->winsect++;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c8a0:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800c8a4:	3201      	adds	r2, #1
 800c8a6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	613b      	str	r3, [r7, #16]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c8b6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d3da      	bcc.n	800c878 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c8c8:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	1a8a      	subs	r2, r1, r2
 800c8d6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	697a      	ldr	r2, [r7, #20]
 800c8de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c8e8:	6979      	ldr	r1, [r7, #20]
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7ff fc09 	bl	800c102 <clust2sect>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c908:	461a      	mov	r2, r3
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f003 030f 	and.w	r3, r3, #15
 800c910:	015b      	lsls	r3, r3, #5
 800c912:	441a      	add	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	371c      	adds	r7, #28
 800c920:	46bd      	mov	sp, r7
 800c922:	bd90      	pop	{r4, r7, pc}

0800c924 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	331b      	adds	r3, #27
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	021b      	lsls	r3, r3, #8
 800c936:	b21a      	sxth	r2, r3
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	331a      	adds	r3, #26
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	b21b      	sxth	r3, r3
 800c940:	4313      	orrs	r3, r2
 800c942:	b21b      	sxth	r3, r3
 800c944:	b29b      	uxth	r3, r3
 800c946:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c94e:	2b03      	cmp	r3, #3
 800c950:	d10f      	bne.n	800c972 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	3315      	adds	r3, #21
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	021b      	lsls	r3, r3, #8
 800c95a:	b21a      	sxth	r2, r3
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	3314      	adds	r3, #20
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	b21b      	sxth	r3, r3
 800c964:	4313      	orrs	r3, r2
 800c966:	b21b      	sxth	r3, r3
 800c968:	b29b      	uxth	r3, r3
 800c96a:	041b      	lsls	r3, r3, #16
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	4313      	orrs	r3, r2
 800c970:	60fb      	str	r3, [r7, #12]

	return cl;
 800c972:	68fb      	ldr	r3, [r7, #12]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3714      	adds	r7, #20
 800c978:	46bd      	mov	sp, r7
 800c97a:	bc80      	pop	{r7}
 800c97c:	4770      	bx	lr

0800c97e <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b086      	sub	sp, #24
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c986:	2100      	movs	r1, #0
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f7ff fe40 	bl	800c60e <dir_sdi>
 800c98e:	4603      	mov	r3, r0
 800c990:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c992:	7dfb      	ldrb	r3, [r7, #23]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d001      	beq.n	800c99c <dir_find+0x1e>
 800c998:	7dfb      	ldrb	r3, [r7, #23]
 800c99a:	e03b      	b.n	800ca14 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	4610      	mov	r0, r2
 800c9ac:	f7ff fb7b 	bl	800c0a6 <move_window>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c9b4:	7dfb      	ldrb	r3, [r7, #23]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d128      	bne.n	800ca0c <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c9c0:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d102      	bne.n	800c9d4 <dir_find+0x56>
 800c9ce:	2304      	movs	r3, #4
 800c9d0:	75fb      	strb	r3, [r7, #23]
 800c9d2:	e01e      	b.n	800ca12 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	330b      	adds	r3, #11
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	f003 0308 	and.w	r3, r3, #8
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10a      	bne.n	800c9f8 <dir_find+0x7a>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c9e8:	220b      	movs	r2, #11
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	6938      	ldr	r0, [r7, #16]
 800c9ee:	f7ff f97f 	bl	800bcf0 <mem_cmp>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d00b      	beq.n	800ca10 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7ff fe9b 	bl	800c736 <dir_next>
 800ca00:	4603      	mov	r3, r0
 800ca02:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d0c8      	beq.n	800c99c <dir_find+0x1e>
 800ca0a:	e002      	b.n	800ca12 <dir_find+0x94>
		if (res != FR_OK) break;
 800ca0c:	bf00      	nop
 800ca0e:	e000      	b.n	800ca12 <dir_find+0x94>
			break;
 800ca10:	bf00      	nop

	return res;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3718      	adds	r7, #24
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b086      	sub	sp, #24
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 800ca26:	2304      	movs	r3, #4
 800ca28:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 800ca2a:	e03f      	b.n	800caac <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ca38:	4619      	mov	r1, r3
 800ca3a:	4610      	mov	r0, r2
 800ca3c:	f7ff fb33 	bl	800c0a6 <move_window>
 800ca40:	4603      	mov	r3, r0
 800ca42:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca44:	7dfb      	ldrb	r3, [r7, #23]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d136      	bne.n	800cab8 <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ca50:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ca58:	7bfb      	ldrb	r3, [r7, #15]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d102      	bne.n	800ca64 <dir_read+0x48>
 800ca5e:	2304      	movs	r3, #4
 800ca60:	75fb      	strb	r3, [r7, #23]
 800ca62:	e02e      	b.n	800cac2 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	330b      	adds	r3, #11
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca6e:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
 800ca72:	2be5      	cmp	r3, #229	; 0xe5
 800ca74:	d011      	beq.n	800ca9a <dir_read+0x7e>
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
 800ca78:	2b2e      	cmp	r3, #46	; 0x2e
 800ca7a:	d00e      	beq.n	800ca9a <dir_read+0x7e>
 800ca7c:	7bbb      	ldrb	r3, [r7, #14]
 800ca7e:	2b0f      	cmp	r3, #15
 800ca80:	d00b      	beq.n	800ca9a <dir_read+0x7e>
 800ca82:	7bbb      	ldrb	r3, [r7, #14]
 800ca84:	f023 0320 	bic.w	r3, r3, #32
 800ca88:	2b08      	cmp	r3, #8
 800ca8a:	bf0c      	ite	eq
 800ca8c:	2301      	moveq	r3, #1
 800ca8e:	2300      	movne	r3, #0
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	461a      	mov	r2, r3
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d010      	beq.n	800cabc <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 800ca9a:	2100      	movs	r1, #0
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f7ff fe4a 	bl	800c736 <dir_next>
 800caa2:	4603      	mov	r3, r0
 800caa4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800caa6:	7dfb      	ldrb	r3, [r7, #23]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d109      	bne.n	800cac0 <dir_read+0xa4>
	while (dp->sect) {
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1ba      	bne.n	800ca2c <dir_read+0x10>
 800cab6:	e004      	b.n	800cac2 <dir_read+0xa6>
		if (res != FR_OK) break;
 800cab8:	bf00      	nop
 800caba:	e002      	b.n	800cac2 <dir_read+0xa6>
			break;
 800cabc:	bf00      	nop
 800cabe:	e000      	b.n	800cac2 <dir_read+0xa6>
		if (res != FR_OK) break;
 800cac0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d003      	beq.n	800cad0 <dir_read+0xb4>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 800cad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3718      	adds	r7, #24
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cada:	b480      	push	{r7}
 800cadc:	b087      	sub	sp, #28
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	3309      	adds	r3, #9
 800cae8:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d05a      	beq.n	800cbaa <get_fileinfo+0xd0>
		dir = dp->dir;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cafa:	60bb      	str	r3, [r7, #8]
		i = 0;
 800cafc:	2300      	movs	r3, #0
 800cafe:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 800cb00:	e01c      	b.n	800cb3c <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	1c5a      	adds	r2, r3, #1
 800cb06:	617a      	str	r2, [r7, #20]
 800cb08:	68ba      	ldr	r2, [r7, #8]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 800cb10:	7bfb      	ldrb	r3, [r7, #15]
 800cb12:	2b20      	cmp	r3, #32
 800cb14:	d100      	bne.n	800cb18 <get_fileinfo+0x3e>
 800cb16:	e011      	b.n	800cb3c <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cb18:	7bfb      	ldrb	r3, [r7, #15]
 800cb1a:	2b05      	cmp	r3, #5
 800cb1c:	d101      	bne.n	800cb22 <get_fileinfo+0x48>
 800cb1e:	23e5      	movs	r3, #229	; 0xe5
 800cb20:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	2b09      	cmp	r3, #9
 800cb26:	d104      	bne.n	800cb32 <get_fileinfo+0x58>
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	1c5a      	adds	r2, r3, #1
 800cb2c:	613a      	str	r2, [r7, #16]
 800cb2e:	222e      	movs	r2, #46	; 0x2e
 800cb30:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	1c5a      	adds	r2, r3, #1
 800cb36:	613a      	str	r2, [r7, #16]
 800cb38:	7bfa      	ldrb	r2, [r7, #15]
 800cb3a:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	2b0a      	cmp	r3, #10
 800cb40:	d9df      	bls.n	800cb02 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	7ada      	ldrb	r2, [r3, #11]
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	331f      	adds	r3, #31
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	061a      	lsls	r2, r3, #24
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	331e      	adds	r3, #30
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	041b      	lsls	r3, r3, #16
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	321d      	adds	r2, #29
 800cb60:	7812      	ldrb	r2, [r2, #0]
 800cb62:	0212      	lsls	r2, r2, #8
 800cb64:	4313      	orrs	r3, r2
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	321c      	adds	r2, #28
 800cb6a:	7812      	ldrb	r2, [r2, #0]
 800cb6c:	431a      	orrs	r2, r3
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	3319      	adds	r3, #25
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	021b      	lsls	r3, r3, #8
 800cb7a:	b21a      	sxth	r2, r3
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	3318      	adds	r3, #24
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	b21b      	sxth	r3, r3
 800cb84:	4313      	orrs	r3, r2
 800cb86:	b21b      	sxth	r3, r3
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	3317      	adds	r3, #23
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	021b      	lsls	r3, r3, #8
 800cb96:	b21a      	sxth	r2, r3
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	3316      	adds	r3, #22
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	b21b      	sxth	r3, r3
 800cba0:	4313      	orrs	r3, r2
 800cba2:	b21b      	sxth	r3, r3
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	2200      	movs	r2, #0
 800cbae:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 800cbb0:	bf00      	nop
 800cbb2:	371c      	adds	r7, #28
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bc80      	pop	{r7}
 800cbb8:	4770      	bx	lr
	...

0800cbbc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b088      	sub	sp, #32
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	60fb      	str	r3, [r7, #12]
 800cbcc:	e002      	b.n	800cbd4 <create_name+0x18>
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	60fb      	str	r3, [r7, #12]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	2b2f      	cmp	r3, #47	; 0x2f
 800cbda:	d0f8      	beq.n	800cbce <create_name+0x12>
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	2b5c      	cmp	r3, #92	; 0x5c
 800cbe2:	d0f4      	beq.n	800cbce <create_name+0x12>
	sfn = dp->fn;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cbea:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cbec:	220b      	movs	r2, #11
 800cbee:	2120      	movs	r1, #32
 800cbf0:	68b8      	ldr	r0, [r7, #8]
 800cbf2:	f7ff f863 	bl	800bcbc <mem_set>
	si = i = b = 0; ni = 8;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	77fb      	strb	r3, [r7, #31]
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	613b      	str	r3, [r7, #16]
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	617b      	str	r3, [r7, #20]
 800cc02:	2308      	movs	r3, #8
 800cc04:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	1c5a      	adds	r2, r3, #1
 800cc0a:	617a      	str	r2, [r7, #20]
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	4413      	add	r3, r2
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800cc14:	7fbb      	ldrb	r3, [r7, #30]
 800cc16:	2b20      	cmp	r3, #32
 800cc18:	d953      	bls.n	800ccc2 <create_name+0x106>
 800cc1a:	7fbb      	ldrb	r3, [r7, #30]
 800cc1c:	2b2f      	cmp	r3, #47	; 0x2f
 800cc1e:	d050      	beq.n	800ccc2 <create_name+0x106>
 800cc20:	7fbb      	ldrb	r3, [r7, #30]
 800cc22:	2b5c      	cmp	r3, #92	; 0x5c
 800cc24:	d04d      	beq.n	800ccc2 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800cc26:	7fbb      	ldrb	r3, [r7, #30]
 800cc28:	2b2e      	cmp	r3, #46	; 0x2e
 800cc2a:	d003      	beq.n	800cc34 <create_name+0x78>
 800cc2c:	693a      	ldr	r2, [r7, #16]
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d30f      	bcc.n	800cc54 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	2b08      	cmp	r3, #8
 800cc38:	d102      	bne.n	800cc40 <create_name+0x84>
 800cc3a:	7fbb      	ldrb	r3, [r7, #30]
 800cc3c:	2b2e      	cmp	r3, #46	; 0x2e
 800cc3e:	d001      	beq.n	800cc44 <create_name+0x88>
 800cc40:	2306      	movs	r3, #6
 800cc42:	e073      	b.n	800cd2c <create_name+0x170>
			i = 8; ni = 11;
 800cc44:	2308      	movs	r3, #8
 800cc46:	613b      	str	r3, [r7, #16]
 800cc48:	230b      	movs	r3, #11
 800cc4a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800cc4c:	7ffb      	ldrb	r3, [r7, #31]
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	77fb      	strb	r3, [r7, #31]
 800cc52:	e035      	b.n	800ccc0 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cc54:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	da08      	bge.n	800cc6e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800cc5c:	7ffb      	ldrb	r3, [r7, #31]
 800cc5e:	f043 0303 	orr.w	r3, r3, #3
 800cc62:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cc64:	7fbb      	ldrb	r3, [r7, #30]
 800cc66:	3b80      	subs	r3, #128	; 0x80
 800cc68:	4a32      	ldr	r2, [pc, #200]	; (800cd34 <create_name+0x178>)
 800cc6a:	5cd3      	ldrb	r3, [r2, r3]
 800cc6c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800cc6e:	7fbb      	ldrb	r3, [r7, #30]
 800cc70:	4619      	mov	r1, r3
 800cc72:	4831      	ldr	r0, [pc, #196]	; (800cd38 <create_name+0x17c>)
 800cc74:	f7ff f862 	bl	800bd3c <chk_chr>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d001      	beq.n	800cc82 <create_name+0xc6>
				return FR_INVALID_NAME;
 800cc7e:	2306      	movs	r3, #6
 800cc80:	e054      	b.n	800cd2c <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800cc82:	7fbb      	ldrb	r3, [r7, #30]
 800cc84:	2b40      	cmp	r3, #64	; 0x40
 800cc86:	d907      	bls.n	800cc98 <create_name+0xdc>
 800cc88:	7fbb      	ldrb	r3, [r7, #30]
 800cc8a:	2b5a      	cmp	r3, #90	; 0x5a
 800cc8c:	d804      	bhi.n	800cc98 <create_name+0xdc>
				b |= 2;
 800cc8e:	7ffb      	ldrb	r3, [r7, #31]
 800cc90:	f043 0302 	orr.w	r3, r3, #2
 800cc94:	77fb      	strb	r3, [r7, #31]
 800cc96:	e00c      	b.n	800ccb2 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800cc98:	7fbb      	ldrb	r3, [r7, #30]
 800cc9a:	2b60      	cmp	r3, #96	; 0x60
 800cc9c:	d909      	bls.n	800ccb2 <create_name+0xf6>
 800cc9e:	7fbb      	ldrb	r3, [r7, #30]
 800cca0:	2b7a      	cmp	r3, #122	; 0x7a
 800cca2:	d806      	bhi.n	800ccb2 <create_name+0xf6>
					b |= 1; c -= 0x20;
 800cca4:	7ffb      	ldrb	r3, [r7, #31]
 800cca6:	f043 0301 	orr.w	r3, r3, #1
 800ccaa:	77fb      	strb	r3, [r7, #31]
 800ccac:	7fbb      	ldrb	r3, [r7, #30]
 800ccae:	3b20      	subs	r3, #32
 800ccb0:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	1c5a      	adds	r2, r3, #1
 800ccb6:	613a      	str	r2, [r7, #16]
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	4413      	add	r3, r2
 800ccbc:	7fba      	ldrb	r2, [r7, #30]
 800ccbe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ccc0:	e7a1      	b.n	800cc06 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	441a      	add	r2, r3
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800cccc:	7fbb      	ldrb	r3, [r7, #30]
 800ccce:	2b20      	cmp	r3, #32
 800ccd0:	d801      	bhi.n	800ccd6 <create_name+0x11a>
 800ccd2:	2304      	movs	r3, #4
 800ccd4:	e000      	b.n	800ccd8 <create_name+0x11c>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d101      	bne.n	800cce4 <create_name+0x128>
 800cce0:	2306      	movs	r3, #6
 800cce2:	e023      	b.n	800cd2c <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	2be5      	cmp	r3, #229	; 0xe5
 800ccea:	d102      	bne.n	800ccf2 <create_name+0x136>
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	2205      	movs	r2, #5
 800ccf0:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	2b08      	cmp	r3, #8
 800ccf6:	d102      	bne.n	800ccfe <create_name+0x142>
 800ccf8:	7ffb      	ldrb	r3, [r7, #31]
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800ccfe:	7ffb      	ldrb	r3, [r7, #31]
 800cd00:	f003 0303 	and.w	r3, r3, #3
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d103      	bne.n	800cd10 <create_name+0x154>
 800cd08:	7fbb      	ldrb	r3, [r7, #30]
 800cd0a:	f043 0310 	orr.w	r3, r3, #16
 800cd0e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800cd10:	7ffb      	ldrb	r3, [r7, #31]
 800cd12:	f003 030c 	and.w	r3, r3, #12
 800cd16:	2b04      	cmp	r3, #4
 800cd18:	d103      	bne.n	800cd22 <create_name+0x166>
 800cd1a:	7fbb      	ldrb	r3, [r7, #30]
 800cd1c:	f043 0308 	orr.w	r3, r3, #8
 800cd20:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	330b      	adds	r3, #11
 800cd26:	7fba      	ldrb	r2, [r7, #30]
 800cd28:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cd2a:	2300      	movs	r3, #0
#endif
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3720      	adds	r7, #32
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	08015b18 	.word	0x08015b18
 800cd38:	08015ab0 	.word	0x08015ab0

0800cd3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	2b2f      	cmp	r3, #47	; 0x2f
 800cd4c:	d003      	beq.n	800cd56 <follow_path+0x1a>
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	2b5c      	cmp	r3, #92	; 0x5c
 800cd54:	d102      	bne.n	800cd5c <follow_path+0x20>
		path++;
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	3301      	adds	r3, #1
 800cd5a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	2b1f      	cmp	r3, #31
 800cd6a:	d80a      	bhi.n	800cd82 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7ff fc4d 	bl	800c60e <dir_sdi>
 800cd74:	4603      	mov	r3, r0
 800cd76:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800cd80:	e045      	b.n	800ce0e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cd82:	463b      	mov	r3, r7
 800cd84:	4619      	mov	r1, r3
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff ff18 	bl	800cbbc <create_name>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800cd90:	7bfb      	ldrb	r3, [r7, #15]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d136      	bne.n	800ce04 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f7ff fdf1 	bl	800c97e <dir_find>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cda6:	7adb      	ldrb	r3, [r3, #11]
 800cda8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800cdaa:	7bfb      	ldrb	r3, [r7, #15]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00a      	beq.n	800cdc6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cdb0:	7bfb      	ldrb	r3, [r7, #15]
 800cdb2:	2b04      	cmp	r3, #4
 800cdb4:	d128      	bne.n	800ce08 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cdb6:	7bbb      	ldrb	r3, [r7, #14]
 800cdb8:	f003 0304 	and.w	r3, r3, #4
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d123      	bne.n	800ce08 <follow_path+0xcc>
 800cdc0:	2305      	movs	r3, #5
 800cdc2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800cdc4:	e020      	b.n	800ce08 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cdc6:	7bbb      	ldrb	r3, [r7, #14]
 800cdc8:	f003 0304 	and.w	r3, r3, #4
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d11d      	bne.n	800ce0c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cdd6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	330b      	adds	r3, #11
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	f003 0310 	and.w	r3, r3, #16
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d102      	bne.n	800cdec <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800cde6:	2305      	movs	r3, #5
 800cde8:	73fb      	strb	r3, [r7, #15]
 800cdea:	e010      	b.n	800ce0e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cdf2:	68b9      	ldr	r1, [r7, #8]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7ff fd95 	bl	800c924 <ld_clust>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce02:	e7be      	b.n	800cd82 <follow_path+0x46>
			if (res != FR_OK) break;
 800ce04:	bf00      	nop
 800ce06:	e002      	b.n	800ce0e <follow_path+0xd2>
				break;
 800ce08:	bf00      	nop
 800ce0a:	e000      	b.n	800ce0e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ce0c:	bf00      	nop
		}
	}

	return res;
 800ce0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3710      	adds	r7, #16
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b087      	sub	sp, #28
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ce20:	f04f 33ff 	mov.w	r3, #4294967295
 800ce24:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d031      	beq.n	800ce92 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	617b      	str	r3, [r7, #20]
 800ce34:	e002      	b.n	800ce3c <get_ldnumber+0x24>
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	617b      	str	r3, [r7, #20]
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	2b20      	cmp	r3, #32
 800ce42:	d903      	bls.n	800ce4c <get_ldnumber+0x34>
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	2b3a      	cmp	r3, #58	; 0x3a
 800ce4a:	d1f4      	bne.n	800ce36 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	2b3a      	cmp	r3, #58	; 0x3a
 800ce52:	d11c      	bne.n	800ce8e <get_ldnumber+0x76>
			tp = *path;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	1c5a      	adds	r2, r3, #1
 800ce5e:	60fa      	str	r2, [r7, #12]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	3b30      	subs	r3, #48	; 0x30
 800ce64:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	2b09      	cmp	r3, #9
 800ce6a:	d80e      	bhi.n	800ce8a <get_ldnumber+0x72>
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d10a      	bne.n	800ce8a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d107      	bne.n	800ce8a <get_ldnumber+0x72>
					vol = (int)i;
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	3301      	adds	r3, #1
 800ce82:	617b      	str	r3, [r7, #20]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	697a      	ldr	r2, [r7, #20]
 800ce88:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	e002      	b.n	800ce94 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ce8e:	2300      	movs	r3, #0
 800ce90:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ce92:	693b      	ldr	r3, [r7, #16]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	371c      	adds	r7, #28
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bc80      	pop	{r7}
 800ce9c:	4770      	bx	lr
	...

0800cea0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800cebc:	6839      	ldr	r1, [r7, #0]
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7ff f8f1 	bl	800c0a6 <move_window>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <check_fs+0x2e>
		return 3;
 800ceca:	2303      	movs	r3, #3
 800cecc:	e04a      	b.n	800cf64 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ced4:	3301      	adds	r3, #1
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	021b      	lsls	r3, r3, #8
 800ceda:	b21a      	sxth	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800cee2:	b21b      	sxth	r3, r3
 800cee4:	4313      	orrs	r3, r2
 800cee6:	b21b      	sxth	r3, r3
 800cee8:	4a20      	ldr	r2, [pc, #128]	; (800cf6c <check_fs+0xcc>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d001      	beq.n	800cef2 <check_fs+0x52>
		return 2;
 800ceee:	2302      	movs	r3, #2
 800cef0:	e038      	b.n	800cf64 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	3336      	adds	r3, #54	; 0x36
 800cef6:	3303      	adds	r3, #3
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	061a      	lsls	r2, r3, #24
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	3336      	adds	r3, #54	; 0x36
 800cf00:	3302      	adds	r3, #2
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	041b      	lsls	r3, r3, #16
 800cf06:	4313      	orrs	r3, r2
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	3236      	adds	r2, #54	; 0x36
 800cf0c:	3201      	adds	r2, #1
 800cf0e:	7812      	ldrb	r2, [r2, #0]
 800cf10:	0212      	lsls	r2, r2, #8
 800cf12:	4313      	orrs	r3, r2
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf20:	4a13      	ldr	r2, [pc, #76]	; (800cf70 <check_fs+0xd0>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d101      	bne.n	800cf2a <check_fs+0x8a>
		return 0;
 800cf26:	2300      	movs	r3, #0
 800cf28:	e01c      	b.n	800cf64 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	3352      	adds	r3, #82	; 0x52
 800cf2e:	3303      	adds	r3, #3
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	061a      	lsls	r2, r3, #24
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	3352      	adds	r3, #82	; 0x52
 800cf38:	3302      	adds	r3, #2
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	041b      	lsls	r3, r3, #16
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	3252      	adds	r2, #82	; 0x52
 800cf44:	3201      	adds	r2, #1
 800cf46:	7812      	ldrb	r2, [r2, #0]
 800cf48:	0212      	lsls	r2, r2, #8
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800cf52:	4313      	orrs	r3, r2
 800cf54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf58:	4a05      	ldr	r2, [pc, #20]	; (800cf70 <check_fs+0xd0>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d101      	bne.n	800cf62 <check_fs+0xc2>
		return 0;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	e000      	b.n	800cf64 <check_fs+0xc4>

	return 1;
 800cf62:	2301      	movs	r3, #1
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	ffffaa55 	.word	0xffffaa55
 800cf70:	00544146 	.word	0x00544146

0800cf74 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b096      	sub	sp, #88	; 0x58
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	4613      	mov	r3, r2
 800cf80:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cf88:	68b8      	ldr	r0, [r7, #8]
 800cf8a:	f7ff ff45 	bl	800ce18 <get_ldnumber>
 800cf8e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	da01      	bge.n	800cf9a <find_volume+0x26>
 800cf96:	230b      	movs	r3, #11
 800cf98:	e2b2      	b.n	800d500 <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cf9a:	4aa2      	ldr	r2, [pc, #648]	; (800d224 <find_volume+0x2b0>)
 800cf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfa2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d101      	bne.n	800cfae <find_volume+0x3a>
 800cfaa:	230c      	movs	r3, #12
 800cfac:	e2a8      	b.n	800d500 <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 800cfae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfb0:	f7fe fede 	bl	800bd70 <lock_fs>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <find_volume+0x4a>
 800cfba:	230f      	movs	r3, #15
 800cfbc:	e2a0      	b.n	800d500 <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfc2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d01b      	beq.n	800d006 <find_volume+0x92>
		stat = disk_status(fs->drv);
 800cfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7fe fdf1 	bl	800bbbc <disk_status>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cfe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cfe4:	f003 0301 	and.w	r3, r3, #1
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10c      	bne.n	800d006 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800cfec:	79fb      	ldrb	r3, [r7, #7]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d007      	beq.n	800d002 <find_volume+0x8e>
 800cff2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cff6:	f003 0304 	and.w	r3, r3, #4
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d001      	beq.n	800d002 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 800cffe:	230a      	movs	r3, #10
 800d000:	e27e      	b.n	800d500 <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 800d002:	2300      	movs	r3, #0
 800d004:	e27c      	b.n	800d500 <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d008:	2200      	movs	r2, #0
 800d00a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d010:	b2da      	uxtb	r2, r3
 800d012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d014:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fe fde6 	bl	800bbf0 <disk_initialize>
 800d024:	4603      	mov	r3, r0
 800d026:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800d02a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d02e:	f003 0301 	and.w	r3, r3, #1
 800d032:	2b00      	cmp	r3, #0
 800d034:	d001      	beq.n	800d03a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d036:	2303      	movs	r3, #3
 800d038:	e262      	b.n	800d500 <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800d03a:	79fb      	ldrb	r3, [r7, #7]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d007      	beq.n	800d050 <find_volume+0xdc>
 800d040:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d044:	f003 0304 	and.w	r3, r3, #4
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d001      	beq.n	800d050 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800d04c:	230a      	movs	r3, #10
 800d04e:	e257      	b.n	800d500 <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800d050:	2300      	movs	r3, #0
 800d052:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800d054:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d056:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d058:	f7ff ff22 	bl	800cea0 <check_fs>
 800d05c:	4603      	mov	r3, r0
 800d05e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800d062:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d066:	2b01      	cmp	r3, #1
 800d068:	d155      	bne.n	800d116 <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800d06a:	2300      	movs	r3, #0
 800d06c:	643b      	str	r3, [r7, #64]	; 0x40
 800d06e:	e029      	b.n	800d0c4 <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800d070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d074:	011b      	lsls	r3, r3, #4
 800d076:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d07a:	4413      	add	r3, r2
 800d07c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800d07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d080:	3304      	adds	r3, #4
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d012      	beq.n	800d0ae <find_volume+0x13a>
 800d088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08a:	330b      	adds	r3, #11
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	061a      	lsls	r2, r3, #24
 800d090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d092:	330a      	adds	r3, #10
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	041b      	lsls	r3, r3, #16
 800d098:	4313      	orrs	r3, r2
 800d09a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d09c:	3209      	adds	r2, #9
 800d09e:	7812      	ldrb	r2, [r2, #0]
 800d0a0:	0212      	lsls	r2, r2, #8
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0a6:	3208      	adds	r2, #8
 800d0a8:	7812      	ldrb	r2, [r2, #0]
 800d0aa:	431a      	orrs	r2, r3
 800d0ac:	e000      	b.n	800d0b0 <find_volume+0x13c>
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d0b8:	440b      	add	r3, r1
 800d0ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800d0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	643b      	str	r3, [r7, #64]	; 0x40
 800d0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	d9d2      	bls.n	800d070 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <find_volume+0x166>
 800d0d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800d0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d0e2:	4413      	add	r3, r2
 800d0e4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d0e8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800d0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d005      	beq.n	800d0fc <find_volume+0x188>
 800d0f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0f4:	f7ff fed4 	bl	800cea0 <check_fs>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	e000      	b.n	800d0fe <find_volume+0x18a>
 800d0fc:	2302      	movs	r3, #2
 800d0fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800d102:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d106:	2b00      	cmp	r3, #0
 800d108:	d005      	beq.n	800d116 <find_volume+0x1a2>
 800d10a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d10c:	3301      	adds	r3, #1
 800d10e:	643b      	str	r3, [r7, #64]	; 0x40
 800d110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d112:	2b03      	cmp	r3, #3
 800d114:	d9e1      	bls.n	800d0da <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d116:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d11a:	2b03      	cmp	r3, #3
 800d11c:	d101      	bne.n	800d122 <find_volume+0x1ae>
 800d11e:	2301      	movs	r3, #1
 800d120:	e1ee      	b.n	800d500 <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800d122:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <find_volume+0x1ba>
 800d12a:	230d      	movs	r3, #13
 800d12c:	e1e8      	b.n	800d500 <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d130:	7b1b      	ldrb	r3, [r3, #12]
 800d132:	021b      	lsls	r3, r3, #8
 800d134:	b21a      	sxth	r2, r3
 800d136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d138:	7adb      	ldrb	r3, [r3, #11]
 800d13a:	b21b      	sxth	r3, r3
 800d13c:	4313      	orrs	r3, r2
 800d13e:	b21b      	sxth	r3, r3
 800d140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d144:	d001      	beq.n	800d14a <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 800d146:	230d      	movs	r3, #13
 800d148:	e1da      	b.n	800d500 <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800d14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14c:	7ddb      	ldrb	r3, [r3, #23]
 800d14e:	021b      	lsls	r3, r3, #8
 800d150:	b21a      	sxth	r2, r3
 800d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d154:	7d9b      	ldrb	r3, [r3, #22]
 800d156:	b21b      	sxth	r3, r3
 800d158:	4313      	orrs	r3, r2
 800d15a:	b21b      	sxth	r3, r3
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800d160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d162:	2b00      	cmp	r3, #0
 800d164:	d112      	bne.n	800d18c <find_volume+0x218>
 800d166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d168:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800d16c:	061a      	lsls	r2, r3, #24
 800d16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d170:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d174:	041b      	lsls	r3, r3, #16
 800d176:	4313      	orrs	r3, r2
 800d178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d17a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d17e:	0212      	lsls	r2, r2, #8
 800d180:	4313      	orrs	r3, r2
 800d182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d184:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d188:	4313      	orrs	r3, r2
 800d18a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800d18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d190:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800d194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d196:	7c1a      	ldrb	r2, [r3, #16]
 800d198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800d19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d006      	beq.n	800d1b6 <find_volume+0x242>
 800d1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1aa:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800d1ae:	2b02      	cmp	r3, #2
 800d1b0:	d001      	beq.n	800d1b6 <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 800d1b2:	230d      	movs	r3, #13
 800d1b4:	e1a4      	b.n	800d500 <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800d1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800d1bc:	461a      	mov	r2, r3
 800d1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1c0:	fb02 f303 	mul.w	r3, r2, r3
 800d1c4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800d1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c8:	7b5a      	ldrb	r2, [r3, #13]
 800d1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1cc:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00a      	beq.n	800d1f0 <find_volume+0x27c>
 800d1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1dc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	4013      	ands	r3, r2
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d001      	beq.n	800d1f4 <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 800d1f0:	230d      	movs	r3, #13
 800d1f2:	e185      	b.n	800d500 <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f6:	7c9b      	ldrb	r3, [r3, #18]
 800d1f8:	021b      	lsls	r3, r3, #8
 800d1fa:	b21a      	sxth	r2, r3
 800d1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fe:	7c5b      	ldrb	r3, [r3, #17]
 800d200:	b21b      	sxth	r3, r3
 800d202:	4313      	orrs	r3, r2
 800d204:	b21b      	sxth	r3, r3
 800d206:	b29a      	uxth	r2, r3
 800d208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800d20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d210:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800d214:	f003 030f 	and.w	r3, r3, #15
 800d218:	b29b      	uxth	r3, r3
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d004      	beq.n	800d228 <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 800d21e:	230d      	movs	r3, #13
 800d220:	e16e      	b.n	800d500 <find_volume+0x58c>
 800d222:	bf00      	nop
 800d224:	200007f8 	.word	0x200007f8

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800d228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22a:	7d1b      	ldrb	r3, [r3, #20]
 800d22c:	021b      	lsls	r3, r3, #8
 800d22e:	b21a      	sxth	r2, r3
 800d230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d232:	7cdb      	ldrb	r3, [r3, #19]
 800d234:	b21b      	sxth	r3, r3
 800d236:	4313      	orrs	r3, r2
 800d238:	b21b      	sxth	r3, r3
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800d23e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d240:	2b00      	cmp	r3, #0
 800d242:	d112      	bne.n	800d26a <find_volume+0x2f6>
 800d244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d246:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d24a:	061a      	lsls	r2, r3, #24
 800d24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d252:	041b      	lsls	r3, r3, #16
 800d254:	4313      	orrs	r3, r2
 800d256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d258:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800d25c:	0212      	lsls	r2, r2, #8
 800d25e:	4313      	orrs	r3, r2
 800d260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d262:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d266:	4313      	orrs	r3, r2
 800d268:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800d26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26c:	7bdb      	ldrb	r3, [r3, #15]
 800d26e:	021b      	lsls	r3, r3, #8
 800d270:	b21a      	sxth	r2, r3
 800d272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d274:	7b9b      	ldrb	r3, [r3, #14]
 800d276:	b21b      	sxth	r3, r3
 800d278:	4313      	orrs	r3, r2
 800d27a:	b21b      	sxth	r3, r3
 800d27c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800d27e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d280:	2b00      	cmp	r3, #0
 800d282:	d101      	bne.n	800d288 <find_volume+0x314>
 800d284:	230d      	movs	r3, #13
 800d286:	e13b      	b.n	800d500 <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800d288:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d28a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d28c:	4413      	add	r3, r2
 800d28e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d290:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800d294:	0912      	lsrs	r2, r2, #4
 800d296:	b292      	uxth	r2, r2
 800d298:	4413      	add	r3, r2
 800d29a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d29c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d201      	bcs.n	800d2a8 <find_volume+0x334>
 800d2a4:	230d      	movs	r3, #13
 800d2a6:	e12b      	b.n	800d500 <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800d2a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ac:	1ad3      	subs	r3, r2, r3
 800d2ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2b0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800d2b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2b8:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800d2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d101      	bne.n	800d2c4 <find_volume+0x350>
 800d2c0:	230d      	movs	r3, #13
 800d2c2:	e11d      	b.n	800d500 <find_volume+0x58c>
	fmt = FS_FAT12;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d902      	bls.n	800d2da <find_volume+0x366>
 800d2d4:	2302      	movs	r3, #2
 800d2d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800d2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d902      	bls.n	800d2ea <find_volume+0x376>
 800d2e4:	2303      	movs	r3, #3
 800d2e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	1c9a      	adds	r2, r3, #2
 800d2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 800d2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2f8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800d2fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d2fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d300:	441a      	add	r2, r3
 800d302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d304:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 800d308:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30c:	441a      	add	r2, r3
 800d30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d310:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 800d314:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d318:	2b03      	cmp	r3, #3
 800d31a:	d121      	bne.n	800d360 <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800d31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800d322:	2b00      	cmp	r3, #0
 800d324:	d001      	beq.n	800d32a <find_volume+0x3b6>
 800d326:	230d      	movs	r3, #13
 800d328:	e0ea      	b.n	800d500 <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800d32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d330:	061a      	lsls	r2, r3, #24
 800d332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d334:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d338:	041b      	lsls	r3, r3, #16
 800d33a:	4313      	orrs	r3, r2
 800d33c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d33e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800d342:	0212      	lsls	r2, r2, #8
 800d344:	4313      	orrs	r3, r2
 800d346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d348:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d34c:	431a      	orrs	r2, r3
 800d34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d350:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800d354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d356:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	647b      	str	r3, [r7, #68]	; 0x44
 800d35e:	e025      	b.n	800d3ac <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d362:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800d366:	2b00      	cmp	r3, #0
 800d368:	d101      	bne.n	800d36e <find_volume+0x3fa>
 800d36a:	230d      	movs	r3, #13
 800d36c:	e0c8      	b.n	800d500 <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800d36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d370:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800d374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d376:	441a      	add	r2, r3
 800d378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d37e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d382:	2b02      	cmp	r3, #2
 800d384:	d104      	bne.n	800d390 <find_volume+0x41c>
 800d386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d388:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d38c:	005b      	lsls	r3, r3, #1
 800d38e:	e00c      	b.n	800d3aa <find_volume+0x436>
 800d390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d392:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d396:	4613      	mov	r3, r2
 800d398:	005b      	lsls	r3, r3, #1
 800d39a:	4413      	add	r3, r2
 800d39c:	085a      	lsrs	r2, r3, #1
 800d39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d3a4:	f003 0301 	and.w	r3, r3, #1
 800d3a8:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800d3aa:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800d3b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d3b8:	0a5b      	lsrs	r3, r3, #9
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d201      	bcs.n	800d3c2 <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 800d3be:	230d      	movs	r3, #13
 800d3c0:	e09e      	b.n	800d500 <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800d3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3da:	2280      	movs	r2, #128	; 0x80
 800d3dc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800d3e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d3e4:	2b03      	cmp	r3, #3
 800d3e6:	d177      	bne.n	800d4d8 <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800d3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d3ee:	021b      	lsls	r3, r3, #8
 800d3f0:	b21a      	sxth	r2, r3
 800d3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3f8:	b21b      	sxth	r3, r3
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	b21b      	sxth	r3, r3
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d16a      	bne.n	800d4d8 <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 800d402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d404:	3301      	adds	r3, #1
 800d406:	4619      	mov	r1, r3
 800d408:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d40a:	f7fe fe4c 	bl	800c0a6 <move_window>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d161      	bne.n	800d4d8 <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 800d414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d416:	2200      	movs	r2, #0
 800d418:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800d422:	021b      	lsls	r3, r3, #8
 800d424:	b21a      	sxth	r2, r3
 800d426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d428:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800d42c:	b21b      	sxth	r3, r3
 800d42e:	4313      	orrs	r3, r2
 800d430:	b21b      	sxth	r3, r3
 800d432:	4a35      	ldr	r2, [pc, #212]	; (800d508 <find_volume+0x594>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d14f      	bne.n	800d4d8 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800d438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43a:	78db      	ldrb	r3, [r3, #3]
 800d43c:	061a      	lsls	r2, r3, #24
 800d43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d440:	789b      	ldrb	r3, [r3, #2]
 800d442:	041b      	lsls	r3, r3, #16
 800d444:	4313      	orrs	r3, r2
 800d446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d448:	7852      	ldrb	r2, [r2, #1]
 800d44a:	0212      	lsls	r2, r2, #8
 800d44c:	4313      	orrs	r3, r2
 800d44e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d450:	7812      	ldrb	r2, [r2, #0]
 800d452:	4313      	orrs	r3, r2
 800d454:	4a2d      	ldr	r2, [pc, #180]	; (800d50c <find_volume+0x598>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d13e      	bne.n	800d4d8 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800d45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800d460:	061a      	lsls	r2, r3, #24
 800d462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d464:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800d468:	041b      	lsls	r3, r3, #16
 800d46a:	4313      	orrs	r3, r2
 800d46c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d46e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800d472:	0212      	lsls	r2, r2, #8
 800d474:	4313      	orrs	r3, r2
 800d476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d478:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800d47c:	4313      	orrs	r3, r2
 800d47e:	4a24      	ldr	r2, [pc, #144]	; (800d510 <find_volume+0x59c>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d129      	bne.n	800d4d8 <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800d484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d486:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800d48a:	061a      	lsls	r2, r3, #24
 800d48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800d492:	041b      	lsls	r3, r3, #16
 800d494:	4313      	orrs	r3, r2
 800d496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d498:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800d49c:	0212      	lsls	r2, r2, #8
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4a2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800d4a6:	431a      	orrs	r2, r3
 800d4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800d4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b0:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800d4b4:	061a      	lsls	r2, r3, #24
 800d4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b8:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800d4bc:	041b      	lsls	r3, r3, #16
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4c2:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800d4c6:	0212      	lsls	r2, r2, #8
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4cc:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800d4d0:	431a      	orrs	r2, r3
 800d4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800d4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4da:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d4de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800d4e2:	4b0c      	ldr	r3, [pc, #48]	; (800d514 <find_volume+0x5a0>)
 800d4e4:	881b      	ldrh	r3, [r3, #0]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	4b0a      	ldr	r3, [pc, #40]	; (800d514 <find_volume+0x5a0>)
 800d4ec:	801a      	strh	r2, [r3, #0]
 800d4ee:	4b09      	ldr	r3, [pc, #36]	; (800d514 <find_volume+0x5a0>)
 800d4f0:	881a      	ldrh	r2, [r3, #0]
 800d4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800d4f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4fa:	f7fe fd61 	bl	800bfc0 <clear_lock>
#endif

	return FR_OK;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	3758      	adds	r7, #88	; 0x58
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	ffffaa55 	.word	0xffffaa55
 800d50c:	41615252 	.word	0x41615252
 800d510:	61417272 	.word	0x61417272
 800d514:	200007fc 	.word	0x200007fc

0800d518 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d022      	beq.n	800d570 <validate+0x58>
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d530:	2b00      	cmp	r3, #0
 800d532:	d01d      	beq.n	800d570 <validate+0x58>
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d53a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d016      	beq.n	800d570 <validate+0x58>
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d548:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800d552:	429a      	cmp	r2, r3
 800d554:	d10c      	bne.n	800d570 <validate+0x58>
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d55c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d560:	4618      	mov	r0, r3
 800d562:	f7fe fb2b 	bl	800bbbc <disk_status>
 800d566:	4603      	mov	r3, r0
 800d568:	f003 0301 	and.w	r3, r3, #1
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d001      	beq.n	800d574 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800d570:	2309      	movs	r3, #9
 800d572:	e00b      	b.n	800d58c <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7fe fbf8 	bl	800bd70 <lock_fs>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	d101      	bne.n	800d58a <validate+0x72>
 800d586:	230f      	movs	r3, #15
 800d588:	e000      	b.n	800d58c <validate+0x74>

	return FR_OK;
 800d58a:	2300      	movs	r3, #0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b088      	sub	sp, #32
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800d5a6:	f107 0310 	add.w	r3, r7, #16
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7ff fc34 	bl	800ce18 <get_ldnumber>
 800d5b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	da01      	bge.n	800d5bc <f_mount+0x28>
 800d5b8:	230b      	movs	r3, #11
 800d5ba:	e04c      	b.n	800d656 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d5bc:	4a28      	ldr	r2, [pc, #160]	; (800d660 <f_mount+0xcc>)
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d5c6:	69bb      	ldr	r3, [r7, #24]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d011      	beq.n	800d5f0 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 800d5cc:	69b8      	ldr	r0, [r7, #24]
 800d5ce:	f7fe fcf7 	bl	800bfc0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f000 fbbf 	bl	800dd5c <ff_del_syncobj>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d101      	bne.n	800d5e8 <f_mount+0x54>
 800d5e4:	2302      	movs	r3, #2
 800d5e6:	e036      	b.n	800d656 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d011      	beq.n	800d61a <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	b2da      	uxtb	r2, r3
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800d608:	4619      	mov	r1, r3
 800d60a:	4610      	mov	r0, r2
 800d60c:	f000 fb86 	bl	800dd1c <ff_cre_syncobj>
 800d610:	4603      	mov	r3, r0
 800d612:	2b00      	cmp	r3, #0
 800d614:	d101      	bne.n	800d61a <f_mount+0x86>
 800d616:	2302      	movs	r3, #2
 800d618:	e01d      	b.n	800d656 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	4910      	ldr	r1, [pc, #64]	; (800d660 <f_mount+0xcc>)
 800d61e:	69fb      	ldr	r3, [r7, #28]
 800d620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d002      	beq.n	800d630 <f_mount+0x9c>
 800d62a:	79fb      	ldrb	r3, [r7, #7]
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d001      	beq.n	800d634 <f_mount+0xa0>
 800d630:	2300      	movs	r3, #0
 800d632:	e010      	b.n	800d656 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800d634:	f107 0108 	add.w	r1, r7, #8
 800d638:	f107 030c 	add.w	r3, r7, #12
 800d63c:	2200      	movs	r2, #0
 800d63e:	4618      	mov	r0, r3
 800d640:	f7ff fc98 	bl	800cf74 <find_volume>
 800d644:	4603      	mov	r3, r0
 800d646:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	7dfa      	ldrb	r2, [r7, #23]
 800d64c:	4611      	mov	r1, r2
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe fb9d 	bl	800bd8e <unlock_fs>
 800d654:	7dfb      	ldrb	r3, [r7, #23]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3720      	adds	r7, #32
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	200007f8 	.word	0x200007f8

0800d664 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b088      	sub	sp, #32
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d101      	bne.n	800d678 <f_opendir+0x14>
 800d674:	2309      	movs	r3, #9
 800d676:	e079      	b.n	800d76c <f_opendir+0x108>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800d678:	4639      	mov	r1, r7
 800d67a:	f107 0318 	add.w	r3, r7, #24
 800d67e:	2200      	movs	r2, #0
 800d680:	4618      	mov	r0, r3
 800d682:	f7ff fc77 	bl	800cf74 <find_volume>
 800d686:	4603      	mov	r3, r0
 800d688:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 800d68a:	7ffb      	ldrb	r3, [r7, #31]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d15f      	bne.n	800d750 <f_opendir+0xec>
		dp->fs = fs;
 800d690:	69ba      	ldr	r2, [r7, #24]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f107 020c 	add.w	r2, r7, #12
 800d69e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f7ff fb48 	bl	800cd3c <follow_path>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800d6b0:	7ffb      	ldrb	r3, [r7, #31]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d147      	bne.n	800d746 <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d017      	beq.n	800d6f0 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d6c6:	330b      	adds	r3, #11
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	f003 0310 	and.w	r3, r3, #16
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00c      	beq.n	800d6ec <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 800d6d2:	69ba      	ldr	r2, [r7, #24]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d6da:	4619      	mov	r1, r3
 800d6dc:	4610      	mov	r0, r2
 800d6de:	f7ff f921 	bl	800c924 <ld_clust>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800d6ea:	e001      	b.n	800d6f0 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800d6ec:	2305      	movs	r3, #5
 800d6ee:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 800d6f0:	7ffb      	ldrb	r3, [r7, #31]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d127      	bne.n	800d746 <f_opendir+0xe2>
				dp->id = fs->id;
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d702:	2100      	movs	r1, #0
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f7fe ff82 	bl	800c60e <dir_sdi>
 800d70a:	4603      	mov	r3, r0
 800d70c:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 800d70e:	7ffb      	ldrb	r3, [r7, #31]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d118      	bne.n	800d746 <f_opendir+0xe2>
					if (dp->sclust) {
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00f      	beq.n	800d73e <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d71e:	2100      	movs	r1, #0
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f7fe fb53 	bl	800bdcc <inc_lock>
 800d726:	4602      	mov	r2, r0
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d734:	2b00      	cmp	r3, #0
 800d736:	d106      	bne.n	800d746 <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 800d738:	2312      	movs	r3, #18
 800d73a:	77fb      	strb	r3, [r7, #31]
 800d73c:	e003      	b.n	800d746 <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d746:	7ffb      	ldrb	r3, [r7, #31]
 800d748:	2b04      	cmp	r3, #4
 800d74a:	d101      	bne.n	800d750 <f_opendir+0xec>
 800d74c:	2305      	movs	r3, #5
 800d74e:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800d750:	7ffb      	ldrb	r3, [r7, #31]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d003      	beq.n	800d75e <f_opendir+0xfa>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2200      	movs	r2, #0
 800d75a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	7ffa      	ldrb	r2, [r7, #31]
 800d762:	4611      	mov	r1, r2
 800d764:	4618      	mov	r0, r3
 800d766:	f7fe fb12 	bl	800bd8e <unlock_fs>
 800d76a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3720      	adds	r7, #32
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f7ff fecb 	bl	800d518 <validate>
 800d782:	4603      	mov	r3, r0
 800d784:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d786:	7bfb      	ldrb	r3, [r7, #15]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d11b      	bne.n	800d7c4 <f_closedir+0x50>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d792:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d007      	beq.n	800d7ae <f_closedir+0x3a>
			res = dec_lock(dp->lockid);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7fe fbc7 	bl	800bf38 <dec_lock>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 800d7ae:	7bfb      	ldrb	r3, [r7, #15]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d103      	bne.n	800d7bc <f_closedir+0x48>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d7bc:	2100      	movs	r1, #0
 800d7be:	68b8      	ldr	r0, [r7, #8]
 800d7c0:	f7fe fae5 	bl	800bd8e <unlock_fs>
#endif
	}
	return res;
 800d7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b086      	sub	sp, #24
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f7ff fe9d 	bl	800d518 <validate>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d7e2:	7dfb      	ldrb	r3, [r7, #23]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d133      	bne.n	800d850 <f_readdir+0x82>
		if (!fno) {
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d106      	bne.n	800d7fc <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f7fe ff0c 	bl	800c60e <dir_sdi>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	75fb      	strb	r3, [r7, #23]
 800d7fa:	e029      	b.n	800d850 <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f107 0208 	add.w	r2, r7, #8
 800d802:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 800d806:	2100      	movs	r1, #0
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f7ff f907 	bl	800ca1c <dir_read>
 800d80e:	4603      	mov	r3, r0
 800d810:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800d812:	7dfb      	ldrb	r3, [r7, #23]
 800d814:	2b04      	cmp	r3, #4
 800d816:	d105      	bne.n	800d824 <f_readdir+0x56>
				dp->sect = 0;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 800d820:	2300      	movs	r3, #0
 800d822:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 800d824:	7dfb      	ldrb	r3, [r7, #23]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d112      	bne.n	800d850 <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d82a:	6839      	ldr	r1, [r7, #0]
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7ff f954 	bl	800cada <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d832:	2100      	movs	r1, #0
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7fe ff7e 	bl	800c736 <dir_next>
 800d83a:	4603      	mov	r3, r0
 800d83c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 800d83e:	7dfb      	ldrb	r3, [r7, #23]
 800d840:	2b04      	cmp	r3, #4
 800d842:	d105      	bne.n	800d850 <f_readdir+0x82>
					dp->sect = 0;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2200      	movs	r2, #0
 800d848:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 800d84c:	2300      	movs	r3, #0
 800d84e:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d856:	7dfa      	ldrb	r2, [r7, #23]
 800d858:	4611      	mov	r1, r2
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fe fa97 	bl	800bd8e <unlock_fs>
 800d860:	7dfb      	ldrb	r3, [r7, #23]
}
 800d862:	4618      	mov	r0, r3
 800d864:	3718      	adds	r7, #24
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}

0800d86a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b08e      	sub	sp, #56	; 0x38
 800d86e:	af00      	add	r7, sp, #0
 800d870:	60f8      	str	r0, [r7, #12]
 800d872:	60b9      	str	r1, [r7, #8]
 800d874:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800d876:	f107 030c 	add.w	r3, r7, #12
 800d87a:	2200      	movs	r2, #0
 800d87c:	4619      	mov	r1, r3
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f7ff fb78 	bl	800cf74 <find_volume>
 800d884:	4603      	mov	r3, r0
 800d886:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800d890:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d894:	2b00      	cmp	r3, #0
 800d896:	f040 80af 	bne.w	800d9f8 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800d89a:	69fb      	ldr	r3, [r7, #28]
 800d89c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d8a6:	3b02      	subs	r3, #2
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d805      	bhi.n	800d8b8 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	e09f      	b.n	800d9f8 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d8be:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800d8c4:	7efb      	ldrb	r3, [r7, #27]
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d125      	bne.n	800d916 <f_getfree+0xac>
				clst = 2;
 800d8ca:	2302      	movs	r3, #2
 800d8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800d8ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8d0:	69f8      	ldr	r0, [r7, #28]
 800d8d2:	f7fe fc37 	bl	800c144 <get_fat>
 800d8d6:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8de:	d103      	bne.n	800d8e8 <f_getfree+0x7e>
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d8e6:	e077      	b.n	800d9d8 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d103      	bne.n	800d8f6 <f_getfree+0x8c>
 800d8ee:	2302      	movs	r3, #2
 800d8f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d8f4:	e070      	b.n	800d9d8 <f_getfree+0x16e>
					if (stat == 0) n++;
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d102      	bne.n	800d902 <f_getfree+0x98>
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fe:	3301      	adds	r3, #1
 800d900:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800d902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d904:	3301      	adds	r3, #1
 800d906:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d90e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d910:	429a      	cmp	r2, r3
 800d912:	d3dc      	bcc.n	800d8ce <f_getfree+0x64>
 800d914:	e060      	b.n	800d9d8 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d91c:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d924:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800d926:	2300      	movs	r3, #0
 800d928:	627b      	str	r3, [r7, #36]	; 0x24
 800d92a:	2300      	movs	r3, #0
 800d92c:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800d92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d930:	2b00      	cmp	r3, #0
 800d932:	d112      	bne.n	800d95a <f_getfree+0xf0>
						res = move_window(fs, sect++);
 800d934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d936:	1c5a      	adds	r2, r3, #1
 800d938:	62ba      	str	r2, [r7, #40]	; 0x28
 800d93a:	4619      	mov	r1, r3
 800d93c:	69f8      	ldr	r0, [r7, #28]
 800d93e:	f7fe fbb2 	bl	800c0a6 <move_window>
 800d942:	4603      	mov	r3, r0
 800d944:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800d948:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d142      	bne.n	800d9d6 <f_getfree+0x16c>
						p = fs->win.d8;
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800d954:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d958:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800d95a:	7efb      	ldrb	r3, [r7, #27]
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	d115      	bne.n	800d98c <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 800d960:	6a3b      	ldr	r3, [r7, #32]
 800d962:	3301      	adds	r3, #1
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	021b      	lsls	r3, r3, #8
 800d968:	b21a      	sxth	r2, r3
 800d96a:	6a3b      	ldr	r3, [r7, #32]
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	b21b      	sxth	r3, r3
 800d970:	4313      	orrs	r3, r2
 800d972:	b21b      	sxth	r3, r3
 800d974:	2b00      	cmp	r3, #0
 800d976:	d102      	bne.n	800d97e <f_getfree+0x114>
 800d978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97a:	3301      	adds	r3, #1
 800d97c:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	3302      	adds	r3, #2
 800d982:	623b      	str	r3, [r7, #32]
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	3b02      	subs	r3, #2
 800d988:	627b      	str	r3, [r7, #36]	; 0x24
 800d98a:	e01d      	b.n	800d9c8 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800d98c:	6a3b      	ldr	r3, [r7, #32]
 800d98e:	3303      	adds	r3, #3
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	061a      	lsls	r2, r3, #24
 800d994:	6a3b      	ldr	r3, [r7, #32]
 800d996:	3302      	adds	r3, #2
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	041b      	lsls	r3, r3, #16
 800d99c:	4313      	orrs	r3, r2
 800d99e:	6a3a      	ldr	r2, [r7, #32]
 800d9a0:	3201      	adds	r2, #1
 800d9a2:	7812      	ldrb	r2, [r2, #0]
 800d9a4:	0212      	lsls	r2, r2, #8
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	6a3a      	ldr	r2, [r7, #32]
 800d9aa:	7812      	ldrb	r2, [r2, #0]
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d102      	bne.n	800d9bc <f_getfree+0x152>
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800d9bc:	6a3b      	ldr	r3, [r7, #32]
 800d9be:	3304      	adds	r3, #4
 800d9c0:	623b      	str	r3, [r7, #32]
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c4:	3b04      	subs	r3, #4
 800d9c6:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800d9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d1ac      	bne.n	800d92e <f_getfree+0xc4>
 800d9d4:	e000      	b.n	800d9d8 <f_getfree+0x16e>
						if (res != FR_OK) break;
 800d9d6:	bf00      	nop
			}
			fs->free_clust = n;
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800d9e6:	f043 0301 	orr.w	r3, r3, #1
 800d9ea:	b2da      	uxtb	r2, r3
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9f6:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800d9f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	69f8      	ldr	r0, [r7, #28]
 800da00:	f7fe f9c5 	bl	800bd8e <unlock_fs>
 800da04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3738      	adds	r7, #56	; 0x38
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800da10:	b480      	push	{r7}
 800da12:	b087      	sub	sp, #28
 800da14:	af00      	add	r7, sp, #0
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	4613      	mov	r3, r2
 800da1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800da1e:	2301      	movs	r3, #1
 800da20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800da22:	2300      	movs	r3, #0
 800da24:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800da26:	4b1e      	ldr	r3, [pc, #120]	; (800daa0 <FATFS_LinkDriverEx+0x90>)
 800da28:	7a5b      	ldrb	r3, [r3, #9]
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d831      	bhi.n	800da94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800da30:	4b1b      	ldr	r3, [pc, #108]	; (800daa0 <FATFS_LinkDriverEx+0x90>)
 800da32:	7a5b      	ldrb	r3, [r3, #9]
 800da34:	b2db      	uxtb	r3, r3
 800da36:	461a      	mov	r2, r3
 800da38:	4b19      	ldr	r3, [pc, #100]	; (800daa0 <FATFS_LinkDriverEx+0x90>)
 800da3a:	2100      	movs	r1, #0
 800da3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800da3e:	4b18      	ldr	r3, [pc, #96]	; (800daa0 <FATFS_LinkDriverEx+0x90>)
 800da40:	7a5b      	ldrb	r3, [r3, #9]
 800da42:	b2db      	uxtb	r3, r3
 800da44:	4a16      	ldr	r2, [pc, #88]	; (800daa0 <FATFS_LinkDriverEx+0x90>)
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	4413      	add	r3, r2
 800da4a:	68fa      	ldr	r2, [r7, #12]
 800da4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800da4e:	4b14      	ldr	r3, [pc, #80]	; (800daa0 <FATFS_LinkDriverEx+0x90>)
 800da50:	7a5b      	ldrb	r3, [r3, #9]
 800da52:	b2db      	uxtb	r3, r3
 800da54:	461a      	mov	r2, r3
 800da56:	4b12      	ldr	r3, [pc, #72]	; (800daa0 <FATFS_LinkDriverEx+0x90>)
 800da58:	4413      	add	r3, r2
 800da5a:	79fa      	ldrb	r2, [r7, #7]
 800da5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800da5e:	4b10      	ldr	r3, [pc, #64]	; (800daa0 <FATFS_LinkDriverEx+0x90>)
 800da60:	7a5b      	ldrb	r3, [r3, #9]
 800da62:	b2db      	uxtb	r3, r3
 800da64:	1c5a      	adds	r2, r3, #1
 800da66:	b2d1      	uxtb	r1, r2
 800da68:	4a0d      	ldr	r2, [pc, #52]	; (800daa0 <FATFS_LinkDriverEx+0x90>)
 800da6a:	7251      	strb	r1, [r2, #9]
 800da6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800da6e:	7dbb      	ldrb	r3, [r7, #22]
 800da70:	3330      	adds	r3, #48	; 0x30
 800da72:	b2da      	uxtb	r2, r3
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	3301      	adds	r3, #1
 800da7c:	223a      	movs	r2, #58	; 0x3a
 800da7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	3302      	adds	r3, #2
 800da84:	222f      	movs	r2, #47	; 0x2f
 800da86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	3303      	adds	r3, #3
 800da8c:	2200      	movs	r2, #0
 800da8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800da90:	2300      	movs	r3, #0
 800da92:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800da94:	7dfb      	ldrb	r3, [r7, #23]
}
 800da96:	4618      	mov	r0, r3
 800da98:	371c      	adds	r7, #28
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bc80      	pop	{r7}
 800da9e:	4770      	bx	lr
 800daa0:	20000818 	.word	0x20000818

0800daa4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800daae:	2200      	movs	r2, #0
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7ff ffac 	bl	800da10 <FATFS_LinkDriverEx>
 800dab8:	4603      	mov	r3, r0
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3708      	adds	r7, #8
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800dac2:	b480      	push	{r7}
 800dac4:	b083      	sub	sp, #12
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	4603      	mov	r3, r0
 800daca:	71fb      	strb	r3, [r7, #7]
  return RES_OK;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	370c      	adds	r7, #12
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bc80      	pop	{r7}
 800dad6:	4770      	bx	lr

0800dad8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	4603      	mov	r3, r0
 800dae0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800dae2:	2301      	movs	r3, #1
 800dae4:	73fb      	strb	r3, [r7, #15]
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 800dae6:	79fb      	ldrb	r3, [r7, #7]
 800dae8:	4619      	mov	r1, r3
 800daea:	4808      	ldr	r0, [pc, #32]	; (800db0c <USBH_status+0x34>)
 800daec:	f7fb fd38 	bl	8009560 <USBH_MSC_UnitIsReady>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d002      	beq.n	800dafc <USBH_status+0x24>
  {
    res = RES_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	73fb      	strb	r3, [r7, #15]
 800dafa:	e001      	b.n	800db00 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	73fb      	strb	r3, [r7, #15]
  }
  
  return res;
 800db00:	7bfb      	ldrb	r3, [r7, #15]
}
 800db02:	4618      	mov	r0, r3
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	2000aed4 	.word	0x2000aed4

0800db10 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b094      	sub	sp, #80	; 0x50
 800db14:	af02      	add	r7, sp, #8
 800db16:	60b9      	str	r1, [r7, #8]
 800db18:	607a      	str	r2, [r7, #4]
 800db1a:	603b      	str	r3, [r7, #0]
 800db1c:	4603      	mov	r3, r0
 800db1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800db20:	2301      	movs	r3, #1
 800db22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	f003 0303 	and.w	r3, r3, #3
 800db32:	2b00      	cmp	r3, #0
 800db34:	d002      	beq.n	800db3c <USBH_read+0x2c>
      {
        break;
      }
    }
#else
    return res;
 800db36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800db3a:	e02c      	b.n	800db96 <USBH_read+0x86>
#endif
  }
  else
  {
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 800db3c:	7bf9      	ldrb	r1, [r7, #15]
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	4816      	ldr	r0, [pc, #88]	; (800dba0 <USBH_read+0x90>)
 800db48:	f7fb fd53 	bl	80095f2 <USBH_MSC_Read>
 800db4c:	4603      	mov	r3, r0
 800db4e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 800db52:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800db56:	2b00      	cmp	r3, #0
 800db58:	d103      	bne.n	800db62 <USBH_read+0x52>
  {
    res = RES_OK;
 800db5a:	2300      	movs	r3, #0
 800db5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800db60:	e017      	b.n	800db92 <USBH_read+0x82>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 800db62:	f107 0210 	add.w	r2, r7, #16
 800db66:	7bfb      	ldrb	r3, [r7, #15]
 800db68:	4619      	mov	r1, r3
 800db6a:	480d      	ldr	r0, [pc, #52]	; (800dba0 <USBH_read+0x90>)
 800db6c:	f7fb fd1d 	bl	80095aa <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 800db70:	7f7b      	ldrb	r3, [r7, #29]
 800db72:	2b3a      	cmp	r3, #58	; 0x3a
 800db74:	d005      	beq.n	800db82 <USBH_read+0x72>
 800db76:	2b3a      	cmp	r3, #58	; 0x3a
 800db78:	dc07      	bgt.n	800db8a <USBH_read+0x7a>
 800db7a:	2b04      	cmp	r3, #4
 800db7c:	d001      	beq.n	800db82 <USBH_read+0x72>
 800db7e:	2b28      	cmp	r3, #40	; 0x28
 800db80:	d103      	bne.n	800db8a <USBH_read+0x7a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE: 
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
 800db82:	2303      	movs	r3, #3
 800db84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 800db88:	e003      	b.n	800db92 <USBH_read+0x82>
      
    default:
      res = RES_ERROR;
 800db8a:	2301      	movs	r3, #1
 800db8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800db90:	bf00      	nop
    }
  }
  
  return res;
 800db92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800db96:	4618      	mov	r0, r3
 800db98:	3748      	adds	r7, #72	; 0x48
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	2000aed4 	.word	0x2000aed4

0800dba4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b094      	sub	sp, #80	; 0x50
 800dba8:	af02      	add	r7, sp, #8
 800dbaa:	60b9      	str	r1, [r7, #8]
 800dbac:	607a      	str	r2, [r7, #4]
 800dbae:	603b      	str	r3, [r7, #0]
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR; 
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;  
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	f003 0303 	and.w	r3, r3, #3
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d002      	beq.n	800dbd0 <USBH_write+0x2c>
      {
        break;
      }
    }
#else
    return res;
 800dbca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dbce:	e034      	b.n	800dc3a <USBH_write+0x96>
#endif
  }
  else
  {
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 800dbd0:	7bf9      	ldrb	r1, [r7, #15]
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	9300      	str	r3, [sp, #0]
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	481a      	ldr	r0, [pc, #104]	; (800dc44 <USBH_write+0xa0>)
 800dbdc:	f7fb fd72 	bl	80096c4 <USBH_MSC_Write>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 800dbe6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d103      	bne.n	800dbf6 <USBH_write+0x52>
  {
    res = RES_OK;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dbf4:	e01f      	b.n	800dc36 <USBH_write+0x92>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 800dbf6:	f107 0210 	add.w	r2, r7, #16
 800dbfa:	7bfb      	ldrb	r3, [r7, #15]
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	4811      	ldr	r0, [pc, #68]	; (800dc44 <USBH_write+0xa0>)
 800dc00:	f7fb fcd3 	bl	80095aa <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 800dc04:	7f7b      	ldrb	r3, [r7, #29]
 800dc06:	2b3a      	cmp	r3, #58	; 0x3a
 800dc08:	d00d      	beq.n	800dc26 <USBH_write+0x82>
 800dc0a:	2b3a      	cmp	r3, #58	; 0x3a
 800dc0c:	dc0f      	bgt.n	800dc2e <USBH_write+0x8a>
 800dc0e:	2b28      	cmp	r3, #40	; 0x28
 800dc10:	d009      	beq.n	800dc26 <USBH_write+0x82>
 800dc12:	2b28      	cmp	r3, #40	; 0x28
 800dc14:	dc0b      	bgt.n	800dc2e <USBH_write+0x8a>
 800dc16:	2b04      	cmp	r3, #4
 800dc18:	d005      	beq.n	800dc26 <USBH_write+0x82>
 800dc1a:	2b27      	cmp	r3, #39	; 0x27
 800dc1c:	d107      	bne.n	800dc2e <USBH_write+0x8a>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800dc1e:	2302      	movs	r3, #2
 800dc20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800dc24:	e007      	b.n	800dc36 <USBH_write+0x92>
      
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");      
      res = RES_NOTRDY;
 800dc26:	2303      	movs	r3, #3
 800dc28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 800dc2c:	e003      	b.n	800dc36 <USBH_write+0x92>
      
    default:
      res = RES_ERROR;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800dc34:	bf00      	nop
    }
  }
  
  return res;   
 800dc36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3748      	adds	r7, #72	; 0x48
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	2000aed4 	.word	0x2000aed4

0800dc48 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b090      	sub	sp, #64	; 0x40
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	4603      	mov	r3, r0
 800dc50:	603a      	str	r2, [r7, #0]
 800dc52:	71fb      	strb	r3, [r7, #7]
 800dc54:	460b      	mov	r3, r1
 800dc56:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;
  
  switch (cmd)
 800dc5e:	79bb      	ldrb	r3, [r7, #6]
 800dc60:	2b03      	cmp	r3, #3
 800dc62:	d850      	bhi.n	800dd06 <USBH_ioctl+0xbe>
 800dc64:	a201      	add	r2, pc, #4	; (adr r2, 800dc6c <USBH_ioctl+0x24>)
 800dc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc6a:	bf00      	nop
 800dc6c:	0800dc7d 	.word	0x0800dc7d
 800dc70:	0800dc85 	.word	0x0800dc85
 800dc74:	0800dcaf 	.word	0x0800dcaf
 800dc78:	0800dcdb 	.word	0x0800dcdb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC: 
    res = RES_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800dc82:	e043      	b.n	800dd0c <USBH_ioctl+0xc4>
    
  /* Get number of sectors on the disk (DWORD) */  
  case GET_SECTOR_COUNT : 
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800dc84:	f107 0208 	add.w	r2, r7, #8
 800dc88:	79fb      	ldrb	r3, [r7, #7]
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	4822      	ldr	r0, [pc, #136]	; (800dd18 <USBH_ioctl+0xd0>)
 800dc8e:	f7fb fc8c 	bl	80095aa <USBH_MSC_GetLUNInfo>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d106      	bne.n	800dca6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800dca4:	e032      	b.n	800dd0c <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800dcac:	e02e      	b.n	800dd0c <USBH_ioctl+0xc4>
    
  /* Get R/W sector size (WORD) */  
  case GET_SECTOR_SIZE :	
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800dcae:	f107 0208 	add.w	r2, r7, #8
 800dcb2:	79fb      	ldrb	r3, [r7, #7]
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	4818      	ldr	r0, [pc, #96]	; (800dd18 <USBH_ioctl+0xd0>)
 800dcb8:	f7fb fc77 	bl	80095aa <USBH_MSC_GetLUNInfo>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d107      	bne.n	800dcd2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800dcc2:	8a3b      	ldrh	r3, [r7, #16]
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800dcca:	2300      	movs	r3, #0
 800dccc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800dcd0:	e01c      	b.n	800dd0c <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800dcd8:	e018      	b.n	800dd0c <USBH_ioctl+0xc4>
    
    /* Get erase block size in unit of sector (DWORD) */ 
  case GET_BLOCK_SIZE : 
    
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800dcda:	f107 0208 	add.w	r2, r7, #8
 800dcde:	79fb      	ldrb	r3, [r7, #7]
 800dce0:	4619      	mov	r1, r3
 800dce2:	480d      	ldr	r0, [pc, #52]	; (800dd18 <USBH_ioctl+0xd0>)
 800dce4:	f7fb fc61 	bl	80095aa <USBH_MSC_GetLUNInfo>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d107      	bne.n	800dcfe <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800dcee:	8a3b      	ldrh	r3, [r7, #16]
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800dcfc:	e006      	b.n	800dd0c <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800dd04:	e002      	b.n	800dd0c <USBH_ioctl+0xc4>
    
  default:
    res = RES_PARERR;
 800dd06:	2304      	movs	r3, #4
 800dd08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  return res;
 800dd0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3740      	adds	r7, #64	; 0x40
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	2000aed4 	.word	0x2000aed4

0800dd1c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b086      	sub	sp, #24
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	4603      	mov	r3, r0
 800dd24:	6039      	str	r1, [r7, #0]
 800dd26:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 800dd28:	2300      	movs	r3, #0
 800dd2a:	60fb      	str	r3, [r7, #12]
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800dd30:	f107 030c 	add.w	r3, r7, #12
 800dd34:	2101      	movs	r1, #1
 800dd36:	4618      	mov	r0, r3
 800dd38:	f000 f8cb 	bl	800ded2 <osSemaphoreCreate>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	bf14      	ite	ne
 800dd4a:	2301      	movne	r3, #1
 800dd4c:	2300      	moveq	r3, #0
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	617b      	str	r3, [r7, #20]
  
  return ret;
 800dd52:	697b      	ldr	r3, [r7, #20]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3718      	adds	r7, #24
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f000 f96b 	bl	800e040 <osSemaphoreDelete>
  return 1;
 800dd6a:	2301      	movs	r3, #1
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3708      	adds	r7, #8
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800dd80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 f8d7 	bl	800df38 <osSemaphoreWait>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d101      	bne.n	800dd94 <ff_req_grant+0x20>
  {
    ret = 1;
 800dd90:	2301      	movs	r3, #1
 800dd92:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800dd94:	68fb      	ldr	r3, [r7, #12]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}

0800dd9e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b082      	sub	sp, #8
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 f914 	bl	800dfd4 <osSemaphoreRelease>
}
 800ddac:	bf00      	nop
 800ddae:	3708      	adds	r7, #8
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	4603      	mov	r3, r0
 800ddbc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ddc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ddc6:	2b84      	cmp	r3, #132	; 0x84
 800ddc8:	d005      	beq.n	800ddd6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ddca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	3303      	adds	r3, #3
 800ddd4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3714      	adds	r7, #20
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bc80      	pop	{r7}
 800dde0:	4770      	bx	lr

0800dde2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800dde2:	b480      	push	{r7}
 800dde4:	b083      	sub	sp, #12
 800dde6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dde8:	f3ef 8305 	mrs	r3, IPSR
 800ddec:	607b      	str	r3, [r7, #4]
  return(result);
 800ddee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	bf14      	ite	ne
 800ddf4:	2301      	movne	r3, #1
 800ddf6:	2300      	moveq	r3, #0
 800ddf8:	b2db      	uxtb	r3, r3
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	370c      	adds	r7, #12
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bc80      	pop	{r7}
 800de02:	4770      	bx	lr

0800de04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800de08:	f001 fbd0 	bl	800f5ac <vTaskStartScheduler>
  
  return osOK;
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	bd80      	pop	{r7, pc}

0800de12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800de12:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de14:	b089      	sub	sp, #36	; 0x24
 800de16:	af04      	add	r7, sp, #16
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	695b      	ldr	r3, [r3, #20]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d020      	beq.n	800de66 <osThreadCreate+0x54>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	699b      	ldr	r3, [r3, #24]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d01c      	beq.n	800de66 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	685c      	ldr	r4, [r3, #4]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681d      	ldr	r5, [r3, #0]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	691e      	ldr	r6, [r3, #16]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800de3e:	4618      	mov	r0, r3
 800de40:	f7ff ffb8 	bl	800ddb4 <makeFreeRtosPriority>
 800de44:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800de4e:	9202      	str	r2, [sp, #8]
 800de50:	9301      	str	r3, [sp, #4]
 800de52:	9100      	str	r1, [sp, #0]
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	4632      	mov	r2, r6
 800de58:	4629      	mov	r1, r5
 800de5a:	4620      	mov	r0, r4
 800de5c:	f001 f9d0 	bl	800f200 <xTaskCreateStatic>
 800de60:	4603      	mov	r3, r0
 800de62:	60fb      	str	r3, [r7, #12]
 800de64:	e01c      	b.n	800dea0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	685c      	ldr	r4, [r3, #4]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800de72:	b29e      	uxth	r6, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7ff ff9a 	bl	800ddb4 <makeFreeRtosPriority>
 800de80:	4602      	mov	r2, r0
 800de82:	f107 030c 	add.w	r3, r7, #12
 800de86:	9301      	str	r3, [sp, #4]
 800de88:	9200      	str	r2, [sp, #0]
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	4632      	mov	r2, r6
 800de8e:	4629      	mov	r1, r5
 800de90:	4620      	mov	r0, r4
 800de92:	f001 fa11 	bl	800f2b8 <xTaskCreate>
 800de96:	4603      	mov	r3, r0
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d001      	beq.n	800dea0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800de9c:	2300      	movs	r3, #0
 800de9e:	e000      	b.n	800dea2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800dea0:	68fb      	ldr	r3, [r7, #12]
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3714      	adds	r7, #20
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800deaa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800deaa:	b580      	push	{r7, lr}
 800deac:	b084      	sub	sp, #16
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d001      	beq.n	800dec0 <osDelay+0x16>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	e000      	b.n	800dec2 <osDelay+0x18>
 800dec0:	2301      	movs	r3, #1
 800dec2:	4618      	mov	r0, r3
 800dec4:	f001 fb3e 	bl	800f544 <vTaskDelay>
  
  return osOK;
 800dec8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800deca:	4618      	mov	r0, r3
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}

0800ded2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ded2:	b580      	push	{r7, lr}
 800ded4:	b086      	sub	sp, #24
 800ded6:	af02      	add	r7, sp, #8
 800ded8:	6078      	str	r0, [r7, #4]
 800deda:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d00f      	beq.n	800df04 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d10a      	bne.n	800df00 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	2203      	movs	r2, #3
 800def0:	9200      	str	r2, [sp, #0]
 800def2:	2200      	movs	r2, #0
 800def4:	2100      	movs	r1, #0
 800def6:	2001      	movs	r0, #1
 800def8:	f000 faaa 	bl	800e450 <xQueueGenericCreateStatic>
 800defc:	4603      	mov	r3, r0
 800defe:	e016      	b.n	800df2e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800df00:	2300      	movs	r3, #0
 800df02:	e014      	b.n	800df2e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	2b01      	cmp	r3, #1
 800df08:	d110      	bne.n	800df2c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800df0a:	2203      	movs	r2, #3
 800df0c:	2100      	movs	r1, #0
 800df0e:	2001      	movs	r0, #1
 800df10:	f000 fb15 	bl	800e53e <xQueueGenericCreate>
 800df14:	60f8      	str	r0, [r7, #12]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d005      	beq.n	800df28 <osSemaphoreCreate+0x56>
 800df1c:	2300      	movs	r3, #0
 800df1e:	2200      	movs	r2, #0
 800df20:	2100      	movs	r1, #0
 800df22:	68f8      	ldr	r0, [r7, #12]
 800df24:	f000 fb68 	bl	800e5f8 <xQueueGenericSend>
      return sema;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	e000      	b.n	800df2e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800df2c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3710      	adds	r7, #16
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
	...

0800df38 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800df42:	2300      	movs	r3, #0
 800df44:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d101      	bne.n	800df50 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800df4c:	2380      	movs	r3, #128	; 0x80
 800df4e:	e03a      	b.n	800dfc6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800df50:	2300      	movs	r3, #0
 800df52:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df5a:	d103      	bne.n	800df64 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800df5c:	f04f 33ff 	mov.w	r3, #4294967295
 800df60:	60fb      	str	r3, [r7, #12]
 800df62:	e009      	b.n	800df78 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d006      	beq.n	800df78 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d101      	bne.n	800df78 <osSemaphoreWait+0x40>
      ticks = 1;
 800df74:	2301      	movs	r3, #1
 800df76:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800df78:	f7ff ff33 	bl	800dde2 <inHandlerMode>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d017      	beq.n	800dfb2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800df82:	f107 0308 	add.w	r3, r7, #8
 800df86:	461a      	mov	r2, r3
 800df88:	2100      	movs	r1, #0
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 ff44 	bl	800ee18 <xQueueReceiveFromISR>
 800df90:	4603      	mov	r3, r0
 800df92:	2b01      	cmp	r3, #1
 800df94:	d001      	beq.n	800df9a <osSemaphoreWait+0x62>
      return osErrorOS;
 800df96:	23ff      	movs	r3, #255	; 0xff
 800df98:	e015      	b.n	800dfc6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d011      	beq.n	800dfc4 <osSemaphoreWait+0x8c>
 800dfa0:	4b0b      	ldr	r3, [pc, #44]	; (800dfd0 <osSemaphoreWait+0x98>)
 800dfa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfa6:	601a      	str	r2, [r3, #0]
 800dfa8:	f3bf 8f4f 	dsb	sy
 800dfac:	f3bf 8f6f 	isb	sy
 800dfb0:	e008      	b.n	800dfc4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800dfb2:	68f9      	ldr	r1, [r7, #12]
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 fe23 	bl	800ec00 <xQueueSemaphoreTake>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d001      	beq.n	800dfc4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800dfc0:	23ff      	movs	r3, #255	; 0xff
 800dfc2:	e000      	b.n	800dfc6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800dfc4:	2300      	movs	r3, #0
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3710      	adds	r7, #16
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	e000ed04 	.word	0xe000ed04

0800dfd4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800dfe4:	f7ff fefd 	bl	800dde2 <inHandlerMode>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d016      	beq.n	800e01c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dfee:	f107 0308 	add.w	r3, r7, #8
 800dff2:	4619      	mov	r1, r3
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 fc95 	bl	800e924 <xQueueGiveFromISR>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d001      	beq.n	800e004 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800e000:	23ff      	movs	r3, #255	; 0xff
 800e002:	e017      	b.n	800e034 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d013      	beq.n	800e032 <osSemaphoreRelease+0x5e>
 800e00a:	4b0c      	ldr	r3, [pc, #48]	; (800e03c <osSemaphoreRelease+0x68>)
 800e00c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e010:	601a      	str	r2, [r3, #0]
 800e012:	f3bf 8f4f 	dsb	sy
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	e00a      	b.n	800e032 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e01c:	2300      	movs	r3, #0
 800e01e:	2200      	movs	r2, #0
 800e020:	2100      	movs	r1, #0
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 fae8 	bl	800e5f8 <xQueueGenericSend>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d001      	beq.n	800e032 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800e02e:	23ff      	movs	r3, #255	; 0xff
 800e030:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800e032:	68fb      	ldr	r3, [r7, #12]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	e000ed04 	.word	0xe000ed04

0800e040 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e048:	f7ff fecb 	bl	800dde2 <inHandlerMode>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d001      	beq.n	800e056 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800e052:	2382      	movs	r3, #130	; 0x82
 800e054:	e003      	b.n	800e05e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 ff5e 	bl	800ef18 <vQueueDelete>

  return osOK; 
 800e05c:	2300      	movs	r3, #0
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3708      	adds	r7, #8
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e066:	b590      	push	{r4, r7, lr}
 800e068:	b085      	sub	sp, #20
 800e06a:	af02      	add	r7, sp, #8
 800e06c:	6078      	str	r0, [r7, #4]
 800e06e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d011      	beq.n	800e09c <osMessageCreate+0x36>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00d      	beq.n	800e09c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6818      	ldr	r0, [r3, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6859      	ldr	r1, [r3, #4]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	689a      	ldr	r2, [r3, #8]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	2400      	movs	r4, #0
 800e092:	9400      	str	r4, [sp, #0]
 800e094:	f000 f9dc 	bl	800e450 <xQueueGenericCreateStatic>
 800e098:	4603      	mov	r3, r0
 800e09a:	e008      	b.n	800e0ae <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6818      	ldr	r0, [r3, #0]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	f000 fa49 	bl	800e53e <xQueueGenericCreate>
 800e0ac:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	370c      	adds	r7, #12
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd90      	pop	{r4, r7, pc}
	...

0800e0b8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b086      	sub	sp, #24
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d101      	bne.n	800e0d6 <osMessagePut+0x1e>
    ticks = 1;
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e0d6:	f7ff fe84 	bl	800dde2 <inHandlerMode>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d018      	beq.n	800e112 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e0e0:	f107 0210 	add.w	r2, r7, #16
 800e0e4:	f107 0108 	add.w	r1, r7, #8
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f000 fb82 	bl	800e7f4 <xQueueGenericSendFromISR>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d001      	beq.n	800e0fa <osMessagePut+0x42>
      return osErrorOS;
 800e0f6:	23ff      	movs	r3, #255	; 0xff
 800e0f8:	e018      	b.n	800e12c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d014      	beq.n	800e12a <osMessagePut+0x72>
 800e100:	4b0c      	ldr	r3, [pc, #48]	; (800e134 <osMessagePut+0x7c>)
 800e102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e106:	601a      	str	r2, [r3, #0]
 800e108:	f3bf 8f4f 	dsb	sy
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	e00b      	b.n	800e12a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e112:	f107 0108 	add.w	r1, r7, #8
 800e116:	2300      	movs	r3, #0
 800e118:	697a      	ldr	r2, [r7, #20]
 800e11a:	68f8      	ldr	r0, [r7, #12]
 800e11c:	f000 fa6c 	bl	800e5f8 <xQueueGenericSend>
 800e120:	4603      	mov	r3, r0
 800e122:	2b01      	cmp	r3, #1
 800e124:	d001      	beq.n	800e12a <osMessagePut+0x72>
      return osErrorOS;
 800e126:	23ff      	movs	r3, #255	; 0xff
 800e128:	e000      	b.n	800e12c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3718      	adds	r7, #24
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	e000ed04 	.word	0xe000ed04

0800e138 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e138:	b590      	push	{r4, r7, lr}
 800e13a:	b08b      	sub	sp, #44	; 0x2c
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e148:	2300      	movs	r3, #0
 800e14a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d10a      	bne.n	800e168 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e152:	2380      	movs	r3, #128	; 0x80
 800e154:	617b      	str	r3, [r7, #20]
    return event;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	461c      	mov	r4, r3
 800e15a:	f107 0314 	add.w	r3, r7, #20
 800e15e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e162:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e166:	e054      	b.n	800e212 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e168:	2300      	movs	r3, #0
 800e16a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e16c:	2300      	movs	r3, #0
 800e16e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e176:	d103      	bne.n	800e180 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e178:	f04f 33ff 	mov.w	r3, #4294967295
 800e17c:	627b      	str	r3, [r7, #36]	; 0x24
 800e17e:	e009      	b.n	800e194 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d006      	beq.n	800e194 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d101      	bne.n	800e194 <osMessageGet+0x5c>
      ticks = 1;
 800e190:	2301      	movs	r3, #1
 800e192:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e194:	f7ff fe25 	bl	800dde2 <inHandlerMode>
 800e198:	4603      	mov	r3, r0
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d01c      	beq.n	800e1d8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e19e:	f107 0220 	add.w	r2, r7, #32
 800e1a2:	f107 0314 	add.w	r3, r7, #20
 800e1a6:	3304      	adds	r3, #4
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	68b8      	ldr	r0, [r7, #8]
 800e1ac:	f000 fe34 	bl	800ee18 <xQueueReceiveFromISR>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d102      	bne.n	800e1bc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e1b6:	2310      	movs	r3, #16
 800e1b8:	617b      	str	r3, [r7, #20]
 800e1ba:	e001      	b.n	800e1c0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e1c0:	6a3b      	ldr	r3, [r7, #32]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d01d      	beq.n	800e202 <osMessageGet+0xca>
 800e1c6:	4b15      	ldr	r3, [pc, #84]	; (800e21c <osMessageGet+0xe4>)
 800e1c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1cc:	601a      	str	r2, [r3, #0]
 800e1ce:	f3bf 8f4f 	dsb	sy
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	e014      	b.n	800e202 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e1d8:	f107 0314 	add.w	r3, r7, #20
 800e1dc:	3304      	adds	r3, #4
 800e1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	68b8      	ldr	r0, [r7, #8]
 800e1e4:	f000 fc2c 	bl	800ea40 <xQueueReceive>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d102      	bne.n	800e1f4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e1ee:	2310      	movs	r3, #16
 800e1f0:	617b      	str	r3, [r7, #20]
 800e1f2:	e006      	b.n	800e202 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d101      	bne.n	800e1fe <osMessageGet+0xc6>
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	e000      	b.n	800e200 <osMessageGet+0xc8>
 800e1fe:	2340      	movs	r3, #64	; 0x40
 800e200:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	461c      	mov	r4, r3
 800e206:	f107 0314 	add.w	r3, r7, #20
 800e20a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e20e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e212:	68f8      	ldr	r0, [r7, #12]
 800e214:	372c      	adds	r7, #44	; 0x2c
 800e216:	46bd      	mov	sp, r7
 800e218:	bd90      	pop	{r4, r7, pc}
 800e21a:	bf00      	nop
 800e21c:	e000ed04 	.word	0xe000ed04

0800e220 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e220:	b480      	push	{r7}
 800e222:	b083      	sub	sp, #12
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f103 0208 	add.w	r2, r3, #8
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f04f 32ff 	mov.w	r2, #4294967295
 800e238:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f103 0208 	add.w	r2, r3, #8
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f103 0208 	add.w	r2, r3, #8
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2200      	movs	r2, #0
 800e252:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e254:	bf00      	nop
 800e256:	370c      	adds	r7, #12
 800e258:	46bd      	mov	sp, r7
 800e25a:	bc80      	pop	{r7}
 800e25c:	4770      	bx	lr

0800e25e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e25e:	b480      	push	{r7}
 800e260:	b083      	sub	sp, #12
 800e262:	af00      	add	r7, sp, #0
 800e264:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2200      	movs	r2, #0
 800e26a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e26c:	bf00      	nop
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	bc80      	pop	{r7}
 800e274:	4770      	bx	lr

0800e276 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e276:	b480      	push	{r7}
 800e278:	b085      	sub	sp, #20
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
 800e27e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	68fa      	ldr	r2, [r7, #12]
 800e28a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	689a      	ldr	r2, [r3, #8]
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	683a      	ldr	r2, [r7, #0]
 800e29a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	683a      	ldr	r2, [r7, #0]
 800e2a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	1c5a      	adds	r2, r3, #1
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	601a      	str	r2, [r3, #0]
}
 800e2b2:	bf00      	nop
 800e2b4:	3714      	adds	r7, #20
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bc80      	pop	{r7}
 800e2ba:	4770      	bx	lr

0800e2bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b085      	sub	sp, #20
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d2:	d103      	bne.n	800e2dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	691b      	ldr	r3, [r3, #16]
 800e2d8:	60fb      	str	r3, [r7, #12]
 800e2da:	e00c      	b.n	800e2f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	3308      	adds	r3, #8
 800e2e0:	60fb      	str	r3, [r7, #12]
 800e2e2:	e002      	b.n	800e2ea <vListInsert+0x2e>
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	60fb      	str	r3, [r7, #12]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d2f6      	bcs.n	800e2e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	685a      	ldr	r2, [r3, #4]
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	683a      	ldr	r2, [r7, #0]
 800e304:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	683a      	ldr	r2, [r7, #0]
 800e310:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	1c5a      	adds	r2, r3, #1
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	601a      	str	r2, [r3, #0]
}
 800e322:	bf00      	nop
 800e324:	3714      	adds	r7, #20
 800e326:	46bd      	mov	sp, r7
 800e328:	bc80      	pop	{r7}
 800e32a:	4770      	bx	lr

0800e32c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e32c:	b480      	push	{r7}
 800e32e:	b085      	sub	sp, #20
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	691b      	ldr	r3, [r3, #16]
 800e338:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	6892      	ldr	r2, [r2, #8]
 800e342:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	6852      	ldr	r2, [r2, #4]
 800e34c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	429a      	cmp	r2, r3
 800e356:	d103      	bne.n	800e360 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	689a      	ldr	r2, [r3, #8]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	1e5a      	subs	r2, r3, #1
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
}
 800e374:	4618      	mov	r0, r3
 800e376:	3714      	adds	r7, #20
 800e378:	46bd      	mov	sp, r7
 800e37a:	bc80      	pop	{r7}
 800e37c:	4770      	bx	lr
	...

0800e380 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d10a      	bne.n	800e3aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e398:	f383 8811 	msr	BASEPRI, r3
 800e39c:	f3bf 8f6f 	isb	sy
 800e3a0:	f3bf 8f4f 	dsb	sy
 800e3a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e3a6:	bf00      	nop
 800e3a8:	e7fe      	b.n	800e3a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e3aa:	f002 f84f 	bl	801044c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b6:	68f9      	ldr	r1, [r7, #12]
 800e3b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e3ba:	fb01 f303 	mul.w	r3, r1, r3
 800e3be:	441a      	add	r2, r3
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3da:	3b01      	subs	r3, #1
 800e3dc:	68f9      	ldr	r1, [r7, #12]
 800e3de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e3e0:	fb01 f303 	mul.w	r3, r1, r3
 800e3e4:	441a      	add	r2, r3
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	22ff      	movs	r2, #255	; 0xff
 800e3ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	22ff      	movs	r2, #255	; 0xff
 800e3f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d114      	bne.n	800e42a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d01a      	beq.n	800e43e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3310      	adds	r3, #16
 800e40c:	4618      	mov	r0, r3
 800e40e:	f001 fb25 	bl	800fa5c <xTaskRemoveFromEventList>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d012      	beq.n	800e43e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e418:	4b0c      	ldr	r3, [pc, #48]	; (800e44c <xQueueGenericReset+0xcc>)
 800e41a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e41e:	601a      	str	r2, [r3, #0]
 800e420:	f3bf 8f4f 	dsb	sy
 800e424:	f3bf 8f6f 	isb	sy
 800e428:	e009      	b.n	800e43e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	3310      	adds	r3, #16
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff fef6 	bl	800e220 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	3324      	adds	r3, #36	; 0x24
 800e438:	4618      	mov	r0, r3
 800e43a:	f7ff fef1 	bl	800e220 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e43e:	f002 f835 	bl	80104ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e442:	2301      	movs	r3, #1
}
 800e444:	4618      	mov	r0, r3
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	e000ed04 	.word	0xe000ed04

0800e450 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e450:	b580      	push	{r7, lr}
 800e452:	b08e      	sub	sp, #56	; 0x38
 800e454:	af02      	add	r7, sp, #8
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
 800e45c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d10a      	bne.n	800e47a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e468:	f383 8811 	msr	BASEPRI, r3
 800e46c:	f3bf 8f6f 	isb	sy
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e476:	bf00      	nop
 800e478:	e7fe      	b.n	800e478 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d10a      	bne.n	800e496 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e484:	f383 8811 	msr	BASEPRI, r3
 800e488:	f3bf 8f6f 	isb	sy
 800e48c:	f3bf 8f4f 	dsb	sy
 800e490:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e492:	bf00      	nop
 800e494:	e7fe      	b.n	800e494 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d002      	beq.n	800e4a2 <xQueueGenericCreateStatic+0x52>
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <xQueueGenericCreateStatic+0x56>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e000      	b.n	800e4a8 <xQueueGenericCreateStatic+0x58>
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10a      	bne.n	800e4c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	623b      	str	r3, [r7, #32]
}
 800e4be:	bf00      	nop
 800e4c0:	e7fe      	b.n	800e4c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d102      	bne.n	800e4ce <xQueueGenericCreateStatic+0x7e>
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d101      	bne.n	800e4d2 <xQueueGenericCreateStatic+0x82>
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e000      	b.n	800e4d4 <xQueueGenericCreateStatic+0x84>
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10a      	bne.n	800e4ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4dc:	f383 8811 	msr	BASEPRI, r3
 800e4e0:	f3bf 8f6f 	isb	sy
 800e4e4:	f3bf 8f4f 	dsb	sy
 800e4e8:	61fb      	str	r3, [r7, #28]
}
 800e4ea:	bf00      	nop
 800e4ec:	e7fe      	b.n	800e4ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e4ee:	2348      	movs	r3, #72	; 0x48
 800e4f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	2b48      	cmp	r3, #72	; 0x48
 800e4f6:	d00a      	beq.n	800e50e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fc:	f383 8811 	msr	BASEPRI, r3
 800e500:	f3bf 8f6f 	isb	sy
 800e504:	f3bf 8f4f 	dsb	sy
 800e508:	61bb      	str	r3, [r7, #24]
}
 800e50a:	bf00      	nop
 800e50c:	e7fe      	b.n	800e50c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00d      	beq.n	800e534 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51a:	2201      	movs	r2, #1
 800e51c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e520:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e526:	9300      	str	r3, [sp, #0]
 800e528:	4613      	mov	r3, r2
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	68b9      	ldr	r1, [r7, #8]
 800e52e:	68f8      	ldr	r0, [r7, #12]
 800e530:	f000 f843 	bl	800e5ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800e534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e536:	4618      	mov	r0, r3
 800e538:	3730      	adds	r7, #48	; 0x30
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e53e:	b580      	push	{r7, lr}
 800e540:	b08a      	sub	sp, #40	; 0x28
 800e542:	af02      	add	r7, sp, #8
 800e544:	60f8      	str	r0, [r7, #12]
 800e546:	60b9      	str	r1, [r7, #8]
 800e548:	4613      	mov	r3, r2
 800e54a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10a      	bne.n	800e568 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e556:	f383 8811 	msr	BASEPRI, r3
 800e55a:	f3bf 8f6f 	isb	sy
 800e55e:	f3bf 8f4f 	dsb	sy
 800e562:	613b      	str	r3, [r7, #16]
}
 800e564:	bf00      	nop
 800e566:	e7fe      	b.n	800e566 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d102      	bne.n	800e574 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e56e:	2300      	movs	r3, #0
 800e570:	61fb      	str	r3, [r7, #28]
 800e572:	e004      	b.n	800e57e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	fb02 f303 	mul.w	r3, r2, r3
 800e57c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e57e:	69fb      	ldr	r3, [r7, #28]
 800e580:	3348      	adds	r3, #72	; 0x48
 800e582:	4618      	mov	r0, r3
 800e584:	f002 f862 	bl	801064c <pvPortMalloc>
 800e588:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d00f      	beq.n	800e5b0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	3348      	adds	r3, #72	; 0x48
 800e594:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e59e:	79fa      	ldrb	r2, [r7, #7]
 800e5a0:	69bb      	ldr	r3, [r7, #24]
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	697a      	ldr	r2, [r7, #20]
 800e5a8:	68b9      	ldr	r1, [r7, #8]
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f000 f805 	bl	800e5ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800e5b0:	69bb      	ldr	r3, [r7, #24]
	}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3720      	adds	r7, #32
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b084      	sub	sp, #16
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	60f8      	str	r0, [r7, #12]
 800e5c2:	60b9      	str	r1, [r7, #8]
 800e5c4:	607a      	str	r2, [r7, #4]
 800e5c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d103      	bne.n	800e5d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e5ce:	69bb      	ldr	r3, [r7, #24]
 800e5d0:	69ba      	ldr	r2, [r7, #24]
 800e5d2:	601a      	str	r2, [r3, #0]
 800e5d4:	e002      	b.n	800e5dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	68fa      	ldr	r2, [r7, #12]
 800e5e0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	68ba      	ldr	r2, [r7, #8]
 800e5e6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e5e8:	2101      	movs	r1, #1
 800e5ea:	69b8      	ldr	r0, [r7, #24]
 800e5ec:	f7ff fec8 	bl	800e380 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e5f0:	bf00      	nop
 800e5f2:	3710      	adds	r7, #16
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b08e      	sub	sp, #56	; 0x38
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	60f8      	str	r0, [r7, #12]
 800e600:	60b9      	str	r1, [r7, #8]
 800e602:	607a      	str	r2, [r7, #4]
 800e604:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e606:	2300      	movs	r3, #0
 800e608:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	2b00      	cmp	r3, #0
 800e612:	d10a      	bne.n	800e62a <xQueueGenericSend+0x32>
	__asm volatile
 800e614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e618:	f383 8811 	msr	BASEPRI, r3
 800e61c:	f3bf 8f6f 	isb	sy
 800e620:	f3bf 8f4f 	dsb	sy
 800e624:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e626:	bf00      	nop
 800e628:	e7fe      	b.n	800e628 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d103      	bne.n	800e638 <xQueueGenericSend+0x40>
 800e630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e634:	2b00      	cmp	r3, #0
 800e636:	d101      	bne.n	800e63c <xQueueGenericSend+0x44>
 800e638:	2301      	movs	r3, #1
 800e63a:	e000      	b.n	800e63e <xQueueGenericSend+0x46>
 800e63c:	2300      	movs	r3, #0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d10a      	bne.n	800e658 <xQueueGenericSend+0x60>
	__asm volatile
 800e642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e646:	f383 8811 	msr	BASEPRI, r3
 800e64a:	f3bf 8f6f 	isb	sy
 800e64e:	f3bf 8f4f 	dsb	sy
 800e652:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e654:	bf00      	nop
 800e656:	e7fe      	b.n	800e656 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	d103      	bne.n	800e666 <xQueueGenericSend+0x6e>
 800e65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e662:	2b01      	cmp	r3, #1
 800e664:	d101      	bne.n	800e66a <xQueueGenericSend+0x72>
 800e666:	2301      	movs	r3, #1
 800e668:	e000      	b.n	800e66c <xQueueGenericSend+0x74>
 800e66a:	2300      	movs	r3, #0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10a      	bne.n	800e686 <xQueueGenericSend+0x8e>
	__asm volatile
 800e670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e674:	f383 8811 	msr	BASEPRI, r3
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	f3bf 8f4f 	dsb	sy
 800e680:	623b      	str	r3, [r7, #32]
}
 800e682:	bf00      	nop
 800e684:	e7fe      	b.n	800e684 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e686:	f001 fbad 	bl	800fde4 <xTaskGetSchedulerState>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d102      	bne.n	800e696 <xQueueGenericSend+0x9e>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d101      	bne.n	800e69a <xQueueGenericSend+0xa2>
 800e696:	2301      	movs	r3, #1
 800e698:	e000      	b.n	800e69c <xQueueGenericSend+0xa4>
 800e69a:	2300      	movs	r3, #0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d10a      	bne.n	800e6b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800e6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a4:	f383 8811 	msr	BASEPRI, r3
 800e6a8:	f3bf 8f6f 	isb	sy
 800e6ac:	f3bf 8f4f 	dsb	sy
 800e6b0:	61fb      	str	r3, [r7, #28]
}
 800e6b2:	bf00      	nop
 800e6b4:	e7fe      	b.n	800e6b4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6b6:	f001 fec9 	bl	801044c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d302      	bcc.n	800e6cc <xQueueGenericSend+0xd4>
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	2b02      	cmp	r3, #2
 800e6ca:	d129      	bne.n	800e720 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6cc:	683a      	ldr	r2, [r7, #0]
 800e6ce:	68b9      	ldr	r1, [r7, #8]
 800e6d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6d2:	f000 fc5b 	bl	800ef8c <prvCopyDataToQueue>
 800e6d6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d010      	beq.n	800e702 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e2:	3324      	adds	r3, #36	; 0x24
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f001 f9b9 	bl	800fa5c <xTaskRemoveFromEventList>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d013      	beq.n	800e718 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e6f0:	4b3f      	ldr	r3, [pc, #252]	; (800e7f0 <xQueueGenericSend+0x1f8>)
 800e6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6f6:	601a      	str	r2, [r3, #0]
 800e6f8:	f3bf 8f4f 	dsb	sy
 800e6fc:	f3bf 8f6f 	isb	sy
 800e700:	e00a      	b.n	800e718 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e704:	2b00      	cmp	r3, #0
 800e706:	d007      	beq.n	800e718 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e708:	4b39      	ldr	r3, [pc, #228]	; (800e7f0 <xQueueGenericSend+0x1f8>)
 800e70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e70e:	601a      	str	r2, [r3, #0]
 800e710:	f3bf 8f4f 	dsb	sy
 800e714:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e718:	f001 fec8 	bl	80104ac <vPortExitCritical>
				return pdPASS;
 800e71c:	2301      	movs	r3, #1
 800e71e:	e063      	b.n	800e7e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d103      	bne.n	800e72e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e726:	f001 fec1 	bl	80104ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e72a:	2300      	movs	r3, #0
 800e72c:	e05c      	b.n	800e7e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e730:	2b00      	cmp	r3, #0
 800e732:	d106      	bne.n	800e742 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e734:	f107 0314 	add.w	r3, r7, #20
 800e738:	4618      	mov	r0, r3
 800e73a:	f001 f9f1 	bl	800fb20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e73e:	2301      	movs	r3, #1
 800e740:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e742:	f001 feb3 	bl	80104ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e746:	f000 ff9b 	bl	800f680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e74a:	f001 fe7f 	bl	801044c <vPortEnterCritical>
 800e74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e754:	b25b      	sxtb	r3, r3
 800e756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e75a:	d103      	bne.n	800e764 <xQueueGenericSend+0x16c>
 800e75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75e:	2200      	movs	r2, #0
 800e760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e76a:	b25b      	sxtb	r3, r3
 800e76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e770:	d103      	bne.n	800e77a <xQueueGenericSend+0x182>
 800e772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e774:	2200      	movs	r2, #0
 800e776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e77a:	f001 fe97 	bl	80104ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e77e:	1d3a      	adds	r2, r7, #4
 800e780:	f107 0314 	add.w	r3, r7, #20
 800e784:	4611      	mov	r1, r2
 800e786:	4618      	mov	r0, r3
 800e788:	f001 f9e0 	bl	800fb4c <xTaskCheckForTimeOut>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d124      	bne.n	800e7dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e794:	f000 fcf2 	bl	800f17c <prvIsQueueFull>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d018      	beq.n	800e7d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a0:	3310      	adds	r3, #16
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	4611      	mov	r1, r2
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f001 f934 	bl	800fa14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e7ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7ae:	f000 fc7d 	bl	800f0ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e7b2:	f000 ff73 	bl	800f69c <xTaskResumeAll>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f47f af7c 	bne.w	800e6b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e7be:	4b0c      	ldr	r3, [pc, #48]	; (800e7f0 <xQueueGenericSend+0x1f8>)
 800e7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7c4:	601a      	str	r2, [r3, #0]
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	f3bf 8f6f 	isb	sy
 800e7ce:	e772      	b.n	800e6b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e7d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7d2:	f000 fc6b 	bl	800f0ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7d6:	f000 ff61 	bl	800f69c <xTaskResumeAll>
 800e7da:	e76c      	b.n	800e6b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e7dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7de:	f000 fc65 	bl	800f0ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7e2:	f000 ff5b 	bl	800f69c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e7e6:	2300      	movs	r3, #0
		}
	}
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3738      	adds	r7, #56	; 0x38
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}
 800e7f0:	e000ed04 	.word	0xe000ed04

0800e7f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b08e      	sub	sp, #56	; 0x38
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]
 800e800:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d10a      	bne.n	800e822 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e810:	f383 8811 	msr	BASEPRI, r3
 800e814:	f3bf 8f6f 	isb	sy
 800e818:	f3bf 8f4f 	dsb	sy
 800e81c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e81e:	bf00      	nop
 800e820:	e7fe      	b.n	800e820 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d103      	bne.n	800e830 <xQueueGenericSendFromISR+0x3c>
 800e828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d101      	bne.n	800e834 <xQueueGenericSendFromISR+0x40>
 800e830:	2301      	movs	r3, #1
 800e832:	e000      	b.n	800e836 <xQueueGenericSendFromISR+0x42>
 800e834:	2300      	movs	r3, #0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d10a      	bne.n	800e850 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83e:	f383 8811 	msr	BASEPRI, r3
 800e842:	f3bf 8f6f 	isb	sy
 800e846:	f3bf 8f4f 	dsb	sy
 800e84a:	623b      	str	r3, [r7, #32]
}
 800e84c:	bf00      	nop
 800e84e:	e7fe      	b.n	800e84e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	2b02      	cmp	r3, #2
 800e854:	d103      	bne.n	800e85e <xQueueGenericSendFromISR+0x6a>
 800e856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d101      	bne.n	800e862 <xQueueGenericSendFromISR+0x6e>
 800e85e:	2301      	movs	r3, #1
 800e860:	e000      	b.n	800e864 <xQueueGenericSendFromISR+0x70>
 800e862:	2300      	movs	r3, #0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d10a      	bne.n	800e87e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86c:	f383 8811 	msr	BASEPRI, r3
 800e870:	f3bf 8f6f 	isb	sy
 800e874:	f3bf 8f4f 	dsb	sy
 800e878:	61fb      	str	r3, [r7, #28]
}
 800e87a:	bf00      	nop
 800e87c:	e7fe      	b.n	800e87c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e87e:	f001 fea7 	bl	80105d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e882:	f3ef 8211 	mrs	r2, BASEPRI
 800e886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88a:	f383 8811 	msr	BASEPRI, r3
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f3bf 8f4f 	dsb	sy
 800e896:	61ba      	str	r2, [r7, #24]
 800e898:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e89a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e89c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d302      	bcc.n	800e8b0 <xQueueGenericSendFromISR+0xbc>
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	2b02      	cmp	r3, #2
 800e8ae:	d12c      	bne.n	800e90a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8ba:	683a      	ldr	r2, [r7, #0]
 800e8bc:	68b9      	ldr	r1, [r7, #8]
 800e8be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8c0:	f000 fb64 	bl	800ef8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e8c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8cc:	d112      	bne.n	800e8f4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d016      	beq.n	800e904 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d8:	3324      	adds	r3, #36	; 0x24
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f001 f8be 	bl	800fa5c <xTaskRemoveFromEventList>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00e      	beq.n	800e904 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d00b      	beq.n	800e904 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	601a      	str	r2, [r3, #0]
 800e8f2:	e007      	b.n	800e904 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e8f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	b25a      	sxtb	r2, r3
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e904:	2301      	movs	r3, #1
 800e906:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e908:	e001      	b.n	800e90e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e90a:	2300      	movs	r3, #0
 800e90c:	637b      	str	r3, [r7, #52]	; 0x34
 800e90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e910:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e918:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3738      	adds	r7, #56	; 0x38
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b08e      	sub	sp, #56	; 0x38
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e934:	2b00      	cmp	r3, #0
 800e936:	d10a      	bne.n	800e94e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e93c:	f383 8811 	msr	BASEPRI, r3
 800e940:	f3bf 8f6f 	isb	sy
 800e944:	f3bf 8f4f 	dsb	sy
 800e948:	623b      	str	r3, [r7, #32]
}
 800e94a:	bf00      	nop
 800e94c:	e7fe      	b.n	800e94c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e952:	2b00      	cmp	r3, #0
 800e954:	d00a      	beq.n	800e96c <xQueueGiveFromISR+0x48>
	__asm volatile
 800e956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95a:	f383 8811 	msr	BASEPRI, r3
 800e95e:	f3bf 8f6f 	isb	sy
 800e962:	f3bf 8f4f 	dsb	sy
 800e966:	61fb      	str	r3, [r7, #28]
}
 800e968:	bf00      	nop
 800e96a:	e7fe      	b.n	800e96a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800e96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d103      	bne.n	800e97c <xQueueGiveFromISR+0x58>
 800e974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d101      	bne.n	800e980 <xQueueGiveFromISR+0x5c>
 800e97c:	2301      	movs	r3, #1
 800e97e:	e000      	b.n	800e982 <xQueueGiveFromISR+0x5e>
 800e980:	2300      	movs	r3, #0
 800e982:	2b00      	cmp	r3, #0
 800e984:	d10a      	bne.n	800e99c <xQueueGiveFromISR+0x78>
	__asm volatile
 800e986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e98a:	f383 8811 	msr	BASEPRI, r3
 800e98e:	f3bf 8f6f 	isb	sy
 800e992:	f3bf 8f4f 	dsb	sy
 800e996:	61bb      	str	r3, [r7, #24]
}
 800e998:	bf00      	nop
 800e99a:	e7fe      	b.n	800e99a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e99c:	f001 fe18 	bl	80105d0 <vPortValidateInterruptPriority>
	__asm volatile
 800e9a0:	f3ef 8211 	mrs	r2, BASEPRI
 800e9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a8:	f383 8811 	msr	BASEPRI, r3
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	617a      	str	r2, [r7, #20]
 800e9b6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e9b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d22b      	bcs.n	800ea24 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d8:	1c5a      	adds	r2, r3, #1
 800e9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e9de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9e6:	d112      	bne.n	800ea0e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d016      	beq.n	800ea1e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f2:	3324      	adds	r3, #36	; 0x24
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f001 f831 	bl	800fa5c <xTaskRemoveFromEventList>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d00e      	beq.n	800ea1e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d00b      	beq.n	800ea1e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	601a      	str	r2, [r3, #0]
 800ea0c:	e007      	b.n	800ea1e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ea0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea12:	3301      	adds	r3, #1
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	b25a      	sxtb	r2, r3
 800ea18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	637b      	str	r3, [r7, #52]	; 0x34
 800ea22:	e001      	b.n	800ea28 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ea24:	2300      	movs	r3, #0
 800ea26:	637b      	str	r3, [r7, #52]	; 0x34
 800ea28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f383 8811 	msr	BASEPRI, r3
}
 800ea32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3738      	adds	r7, #56	; 0x38
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
	...

0800ea40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b08c      	sub	sp, #48	; 0x30
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d10a      	bne.n	800ea70 <xQueueReceive+0x30>
	__asm volatile
 800ea5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5e:	f383 8811 	msr	BASEPRI, r3
 800ea62:	f3bf 8f6f 	isb	sy
 800ea66:	f3bf 8f4f 	dsb	sy
 800ea6a:	623b      	str	r3, [r7, #32]
}
 800ea6c:	bf00      	nop
 800ea6e:	e7fe      	b.n	800ea6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d103      	bne.n	800ea7e <xQueueReceive+0x3e>
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d101      	bne.n	800ea82 <xQueueReceive+0x42>
 800ea7e:	2301      	movs	r3, #1
 800ea80:	e000      	b.n	800ea84 <xQueueReceive+0x44>
 800ea82:	2300      	movs	r3, #0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d10a      	bne.n	800ea9e <xQueueReceive+0x5e>
	__asm volatile
 800ea88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8c:	f383 8811 	msr	BASEPRI, r3
 800ea90:	f3bf 8f6f 	isb	sy
 800ea94:	f3bf 8f4f 	dsb	sy
 800ea98:	61fb      	str	r3, [r7, #28]
}
 800ea9a:	bf00      	nop
 800ea9c:	e7fe      	b.n	800ea9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea9e:	f001 f9a1 	bl	800fde4 <xTaskGetSchedulerState>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d102      	bne.n	800eaae <xQueueReceive+0x6e>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d101      	bne.n	800eab2 <xQueueReceive+0x72>
 800eaae:	2301      	movs	r3, #1
 800eab0:	e000      	b.n	800eab4 <xQueueReceive+0x74>
 800eab2:	2300      	movs	r3, #0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d10a      	bne.n	800eace <xQueueReceive+0x8e>
	__asm volatile
 800eab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eabc:	f383 8811 	msr	BASEPRI, r3
 800eac0:	f3bf 8f6f 	isb	sy
 800eac4:	f3bf 8f4f 	dsb	sy
 800eac8:	61bb      	str	r3, [r7, #24]
}
 800eaca:	bf00      	nop
 800eacc:	e7fe      	b.n	800eacc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800eace:	f001 fcbd 	bl	801044c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ead2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ead8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d01f      	beq.n	800eb1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eade:	68b9      	ldr	r1, [r7, #8]
 800eae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eae2:	f000 fabd 	bl	800f060 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae8:	1e5a      	subs	r2, r3, #1
 800eaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf0:	691b      	ldr	r3, [r3, #16]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00f      	beq.n	800eb16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf8:	3310      	adds	r3, #16
 800eafa:	4618      	mov	r0, r3
 800eafc:	f000 ffae 	bl	800fa5c <xTaskRemoveFromEventList>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d007      	beq.n	800eb16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb06:	4b3d      	ldr	r3, [pc, #244]	; (800ebfc <xQueueReceive+0x1bc>)
 800eb08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb0c:	601a      	str	r2, [r3, #0]
 800eb0e:	f3bf 8f4f 	dsb	sy
 800eb12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb16:	f001 fcc9 	bl	80104ac <vPortExitCritical>
				return pdPASS;
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	e069      	b.n	800ebf2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d103      	bne.n	800eb2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb24:	f001 fcc2 	bl	80104ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	e062      	b.n	800ebf2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d106      	bne.n	800eb40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb32:	f107 0310 	add.w	r3, r7, #16
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 fff2 	bl	800fb20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb40:	f001 fcb4 	bl	80104ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb44:	f000 fd9c 	bl	800f680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb48:	f001 fc80 	bl	801044c <vPortEnterCritical>
 800eb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb52:	b25b      	sxtb	r3, r3
 800eb54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb58:	d103      	bne.n	800eb62 <xQueueReceive+0x122>
 800eb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb68:	b25b      	sxtb	r3, r3
 800eb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb6e:	d103      	bne.n	800eb78 <xQueueReceive+0x138>
 800eb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb72:	2200      	movs	r2, #0
 800eb74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb78:	f001 fc98 	bl	80104ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb7c:	1d3a      	adds	r2, r7, #4
 800eb7e:	f107 0310 	add.w	r3, r7, #16
 800eb82:	4611      	mov	r1, r2
 800eb84:	4618      	mov	r0, r3
 800eb86:	f000 ffe1 	bl	800fb4c <xTaskCheckForTimeOut>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d123      	bne.n	800ebd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb92:	f000 fadd 	bl	800f150 <prvIsQueueEmpty>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d017      	beq.n	800ebcc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9e:	3324      	adds	r3, #36	; 0x24
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	4611      	mov	r1, r2
 800eba4:	4618      	mov	r0, r3
 800eba6:	f000 ff35 	bl	800fa14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebac:	f000 fa7e 	bl	800f0ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ebb0:	f000 fd74 	bl	800f69c <xTaskResumeAll>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d189      	bne.n	800eace <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ebba:	4b10      	ldr	r3, [pc, #64]	; (800ebfc <xQueueReceive+0x1bc>)
 800ebbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebc0:	601a      	str	r2, [r3, #0]
 800ebc2:	f3bf 8f4f 	dsb	sy
 800ebc6:	f3bf 8f6f 	isb	sy
 800ebca:	e780      	b.n	800eace <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ebcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebce:	f000 fa6d 	bl	800f0ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ebd2:	f000 fd63 	bl	800f69c <xTaskResumeAll>
 800ebd6:	e77a      	b.n	800eace <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ebd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebda:	f000 fa67 	bl	800f0ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebde:	f000 fd5d 	bl	800f69c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebe4:	f000 fab4 	bl	800f150 <prvIsQueueEmpty>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	f43f af6f 	beq.w	800eace <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ebf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3730      	adds	r7, #48	; 0x30
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	e000ed04 	.word	0xe000ed04

0800ec00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b08e      	sub	sp, #56	; 0x38
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ec12:	2300      	movs	r3, #0
 800ec14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ec16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d10a      	bne.n	800ec32 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ec1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec20:	f383 8811 	msr	BASEPRI, r3
 800ec24:	f3bf 8f6f 	isb	sy
 800ec28:	f3bf 8f4f 	dsb	sy
 800ec2c:	623b      	str	r3, [r7, #32]
}
 800ec2e:	bf00      	nop
 800ec30:	e7fe      	b.n	800ec30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ec32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d00a      	beq.n	800ec50 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ec3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3e:	f383 8811 	msr	BASEPRI, r3
 800ec42:	f3bf 8f6f 	isb	sy
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	61fb      	str	r3, [r7, #28]
}
 800ec4c:	bf00      	nop
 800ec4e:	e7fe      	b.n	800ec4e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec50:	f001 f8c8 	bl	800fde4 <xTaskGetSchedulerState>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d102      	bne.n	800ec60 <xQueueSemaphoreTake+0x60>
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d101      	bne.n	800ec64 <xQueueSemaphoreTake+0x64>
 800ec60:	2301      	movs	r3, #1
 800ec62:	e000      	b.n	800ec66 <xQueueSemaphoreTake+0x66>
 800ec64:	2300      	movs	r3, #0
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d10a      	bne.n	800ec80 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ec6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6e:	f383 8811 	msr	BASEPRI, r3
 800ec72:	f3bf 8f6f 	isb	sy
 800ec76:	f3bf 8f4f 	dsb	sy
 800ec7a:	61bb      	str	r3, [r7, #24]
}
 800ec7c:	bf00      	nop
 800ec7e:	e7fe      	b.n	800ec7e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec80:	f001 fbe4 	bl	801044c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ec84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec88:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ec8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d024      	beq.n	800ecda <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ec90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec92:	1e5a      	subs	r2, r3, #1
 800ec94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec96:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d104      	bne.n	800ecaa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800eca0:	f001 fa6a 	bl	8010178 <pvTaskIncrementMutexHeldCount>
 800eca4:	4602      	mov	r2, r0
 800eca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecac:	691b      	ldr	r3, [r3, #16]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00f      	beq.n	800ecd2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb4:	3310      	adds	r3, #16
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f000 fed0 	bl	800fa5c <xTaskRemoveFromEventList>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d007      	beq.n	800ecd2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ecc2:	4b54      	ldr	r3, [pc, #336]	; (800ee14 <xQueueSemaphoreTake+0x214>)
 800ecc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecc8:	601a      	str	r2, [r3, #0]
 800ecca:	f3bf 8f4f 	dsb	sy
 800ecce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ecd2:	f001 fbeb 	bl	80104ac <vPortExitCritical>
				return pdPASS;
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	e097      	b.n	800ee0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d111      	bne.n	800ed04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ece0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d00a      	beq.n	800ecfc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ece6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecea:	f383 8811 	msr	BASEPRI, r3
 800ecee:	f3bf 8f6f 	isb	sy
 800ecf2:	f3bf 8f4f 	dsb	sy
 800ecf6:	617b      	str	r3, [r7, #20]
}
 800ecf8:	bf00      	nop
 800ecfa:	e7fe      	b.n	800ecfa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ecfc:	f001 fbd6 	bl	80104ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ed00:	2300      	movs	r3, #0
 800ed02:	e082      	b.n	800ee0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d106      	bne.n	800ed18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed0a:	f107 030c 	add.w	r3, r7, #12
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f000 ff06 	bl	800fb20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed14:	2301      	movs	r3, #1
 800ed16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed18:	f001 fbc8 	bl	80104ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed1c:	f000 fcb0 	bl	800f680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed20:	f001 fb94 	bl	801044c <vPortEnterCritical>
 800ed24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed2a:	b25b      	sxtb	r3, r3
 800ed2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed30:	d103      	bne.n	800ed3a <xQueueSemaphoreTake+0x13a>
 800ed32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed34:	2200      	movs	r2, #0
 800ed36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed40:	b25b      	sxtb	r3, r3
 800ed42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed46:	d103      	bne.n	800ed50 <xQueueSemaphoreTake+0x150>
 800ed48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed50:	f001 fbac 	bl	80104ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed54:	463a      	mov	r2, r7
 800ed56:	f107 030c 	add.w	r3, r7, #12
 800ed5a:	4611      	mov	r1, r2
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f000 fef5 	bl	800fb4c <xTaskCheckForTimeOut>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d132      	bne.n	800edce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed6a:	f000 f9f1 	bl	800f150 <prvIsQueueEmpty>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d026      	beq.n	800edc2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d109      	bne.n	800ed90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ed7c:	f001 fb66 	bl	801044c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ed80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	4618      	mov	r0, r3
 800ed86:	f001 f84b 	bl	800fe20 <xTaskPriorityInherit>
 800ed8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ed8c:	f001 fb8e 	bl	80104ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ed90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed92:	3324      	adds	r3, #36	; 0x24
 800ed94:	683a      	ldr	r2, [r7, #0]
 800ed96:	4611      	mov	r1, r2
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f000 fe3b 	bl	800fa14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ed9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eda0:	f000 f984 	bl	800f0ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eda4:	f000 fc7a 	bl	800f69c <xTaskResumeAll>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	f47f af68 	bne.w	800ec80 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800edb0:	4b18      	ldr	r3, [pc, #96]	; (800ee14 <xQueueSemaphoreTake+0x214>)
 800edb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edb6:	601a      	str	r2, [r3, #0]
 800edb8:	f3bf 8f4f 	dsb	sy
 800edbc:	f3bf 8f6f 	isb	sy
 800edc0:	e75e      	b.n	800ec80 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800edc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edc4:	f000 f972 	bl	800f0ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800edc8:	f000 fc68 	bl	800f69c <xTaskResumeAll>
 800edcc:	e758      	b.n	800ec80 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800edce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edd0:	f000 f96c 	bl	800f0ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800edd4:	f000 fc62 	bl	800f69c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800edd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edda:	f000 f9b9 	bl	800f150 <prvIsQueueEmpty>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f43f af4d 	beq.w	800ec80 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ede6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d00d      	beq.n	800ee08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800edec:	f001 fb2e 	bl	801044c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800edf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edf2:	f000 f8b4 	bl	800ef5e <prvGetDisinheritPriorityAfterTimeout>
 800edf6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800edf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800edfe:	4618      	mov	r0, r3
 800ee00:	f001 f91a 	bl	8010038 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ee04:	f001 fb52 	bl	80104ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ee08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3738      	adds	r7, #56	; 0x38
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	e000ed04 	.word	0xe000ed04

0800ee18 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b08e      	sub	sp, #56	; 0x38
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ee28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d10a      	bne.n	800ee44 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ee2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee32:	f383 8811 	msr	BASEPRI, r3
 800ee36:	f3bf 8f6f 	isb	sy
 800ee3a:	f3bf 8f4f 	dsb	sy
 800ee3e:	623b      	str	r3, [r7, #32]
}
 800ee40:	bf00      	nop
 800ee42:	e7fe      	b.n	800ee42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d103      	bne.n	800ee52 <xQueueReceiveFromISR+0x3a>
 800ee4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d101      	bne.n	800ee56 <xQueueReceiveFromISR+0x3e>
 800ee52:	2301      	movs	r3, #1
 800ee54:	e000      	b.n	800ee58 <xQueueReceiveFromISR+0x40>
 800ee56:	2300      	movs	r3, #0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d10a      	bne.n	800ee72 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ee5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee60:	f383 8811 	msr	BASEPRI, r3
 800ee64:	f3bf 8f6f 	isb	sy
 800ee68:	f3bf 8f4f 	dsb	sy
 800ee6c:	61fb      	str	r3, [r7, #28]
}
 800ee6e:	bf00      	nop
 800ee70:	e7fe      	b.n	800ee70 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee72:	f001 fbad 	bl	80105d0 <vPortValidateInterruptPriority>
	__asm volatile
 800ee76:	f3ef 8211 	mrs	r2, BASEPRI
 800ee7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7e:	f383 8811 	msr	BASEPRI, r3
 800ee82:	f3bf 8f6f 	isb	sy
 800ee86:	f3bf 8f4f 	dsb	sy
 800ee8a:	61ba      	str	r2, [r7, #24]
 800ee8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ee8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d02f      	beq.n	800eefe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ee9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eea8:	68b9      	ldr	r1, [r7, #8]
 800eeaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eeac:	f000 f8d8 	bl	800f060 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb2:	1e5a      	subs	r2, r3, #1
 800eeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eeb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eec0:	d112      	bne.n	800eee8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec4:	691b      	ldr	r3, [r3, #16]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d016      	beq.n	800eef8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eecc:	3310      	adds	r3, #16
 800eece:	4618      	mov	r0, r3
 800eed0:	f000 fdc4 	bl	800fa5c <xTaskRemoveFromEventList>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d00e      	beq.n	800eef8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d00b      	beq.n	800eef8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2201      	movs	r2, #1
 800eee4:	601a      	str	r2, [r3, #0]
 800eee6:	e007      	b.n	800eef8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800eee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeec:	3301      	adds	r3, #1
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	b25a      	sxtb	r2, r3
 800eef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800eef8:	2301      	movs	r3, #1
 800eefa:	637b      	str	r3, [r7, #52]	; 0x34
 800eefc:	e001      	b.n	800ef02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800eefe:	2300      	movs	r3, #0
 800ef00:	637b      	str	r3, [r7, #52]	; 0x34
 800ef02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef04:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	f383 8811 	msr	BASEPRI, r3
}
 800ef0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3738      	adds	r7, #56	; 0x38
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d10a      	bne.n	800ef40 <vQueueDelete+0x28>
	__asm volatile
 800ef2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2e:	f383 8811 	msr	BASEPRI, r3
 800ef32:	f3bf 8f6f 	isb	sy
 800ef36:	f3bf 8f4f 	dsb	sy
 800ef3a:	60bb      	str	r3, [r7, #8]
}
 800ef3c:	bf00      	nop
 800ef3e:	e7fe      	b.n	800ef3e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ef40:	68f8      	ldr	r0, [r7, #12]
 800ef42:	f000 f933 	bl	800f1ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d102      	bne.n	800ef56 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ef50:	68f8      	ldr	r0, [r7, #12]
 800ef52:	f001 fc3f 	bl	80107d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ef56:	bf00      	nop
 800ef58:	3710      	adds	r7, #16
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}

0800ef5e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ef5e:	b480      	push	{r7}
 800ef60:	b085      	sub	sp, #20
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d006      	beq.n	800ef7c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f1c3 0307 	rsb	r3, r3, #7
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	e001      	b.n	800ef80 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ef80:	68fb      	ldr	r3, [r7, #12]
	}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3714      	adds	r7, #20
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bc80      	pop	{r7}
 800ef8a:	4770      	bx	lr

0800ef8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10d      	bne.n	800efc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d14d      	bne.n	800f04e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f000 ffb8 	bl	800ff2c <xTaskPriorityDisinherit>
 800efbc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2200      	movs	r2, #0
 800efc2:	605a      	str	r2, [r3, #4]
 800efc4:	e043      	b.n	800f04e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d119      	bne.n	800f000 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	6898      	ldr	r0, [r3, #8]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efd4:	461a      	mov	r2, r3
 800efd6:	68b9      	ldr	r1, [r7, #8]
 800efd8:	f002 f984 	bl	80112e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	689a      	ldr	r2, [r3, #8]
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efe4:	441a      	add	r2, r3
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	689a      	ldr	r2, [r3, #8]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	685b      	ldr	r3, [r3, #4]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d32b      	bcc.n	800f04e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	609a      	str	r2, [r3, #8]
 800effe:	e026      	b.n	800f04e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	68d8      	ldr	r0, [r3, #12]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f008:	461a      	mov	r2, r3
 800f00a:	68b9      	ldr	r1, [r7, #8]
 800f00c:	f002 f96a 	bl	80112e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	68da      	ldr	r2, [r3, #12]
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f018:	425b      	negs	r3, r3
 800f01a:	441a      	add	r2, r3
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	68da      	ldr	r2, [r3, #12]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d207      	bcs.n	800f03c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	685a      	ldr	r2, [r3, #4]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f034:	425b      	negs	r3, r3
 800f036:	441a      	add	r2, r3
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b02      	cmp	r3, #2
 800f040:	d105      	bne.n	800f04e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d002      	beq.n	800f04e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	3b01      	subs	r3, #1
 800f04c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	1c5a      	adds	r2, r3, #1
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f056:	697b      	ldr	r3, [r7, #20]
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3718      	adds	r7, #24
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b082      	sub	sp, #8
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d018      	beq.n	800f0a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	68da      	ldr	r2, [r3, #12]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f07a:	441a      	add	r2, r3
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	68da      	ldr	r2, [r3, #12]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d303      	bcc.n	800f094 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	68d9      	ldr	r1, [r3, #12]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f09c:	461a      	mov	r2, r3
 800f09e:	6838      	ldr	r0, [r7, #0]
 800f0a0:	f002 f920 	bl	80112e4 <memcpy>
	}
}
 800f0a4:	bf00      	nop
 800f0a6:	3708      	adds	r7, #8
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f0b4:	f001 f9ca 	bl	801044c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f0c0:	e011      	b.n	800f0e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d012      	beq.n	800f0f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	3324      	adds	r3, #36	; 0x24
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f000 fcc4 	bl	800fa5c <xTaskRemoveFromEventList>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d001      	beq.n	800f0de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f0da:	f000 fd99 	bl	800fc10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f0de:	7bfb      	ldrb	r3, [r7, #15]
 800f0e0:	3b01      	subs	r3, #1
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	dce9      	bgt.n	800f0c2 <prvUnlockQueue+0x16>
 800f0ee:	e000      	b.n	800f0f2 <prvUnlockQueue+0x46>
					break;
 800f0f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	22ff      	movs	r2, #255	; 0xff
 800f0f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f0fa:	f001 f9d7 	bl	80104ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f0fe:	f001 f9a5 	bl	801044c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f108:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f10a:	e011      	b.n	800f130 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	691b      	ldr	r3, [r3, #16]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d012      	beq.n	800f13a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	3310      	adds	r3, #16
 800f118:	4618      	mov	r0, r3
 800f11a:	f000 fc9f 	bl	800fa5c <xTaskRemoveFromEventList>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	d001      	beq.n	800f128 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f124:	f000 fd74 	bl	800fc10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f128:	7bbb      	ldrb	r3, [r7, #14]
 800f12a:	3b01      	subs	r3, #1
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f134:	2b00      	cmp	r3, #0
 800f136:	dce9      	bgt.n	800f10c <prvUnlockQueue+0x60>
 800f138:	e000      	b.n	800f13c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f13a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	22ff      	movs	r2, #255	; 0xff
 800f140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f144:	f001 f9b2 	bl	80104ac <vPortExitCritical>
}
 800f148:	bf00      	nop
 800f14a:	3710      	adds	r7, #16
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f158:	f001 f978 	bl	801044c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f160:	2b00      	cmp	r3, #0
 800f162:	d102      	bne.n	800f16a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f164:	2301      	movs	r3, #1
 800f166:	60fb      	str	r3, [r7, #12]
 800f168:	e001      	b.n	800f16e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f16a:	2300      	movs	r3, #0
 800f16c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f16e:	f001 f99d 	bl	80104ac <vPortExitCritical>

	return xReturn;
 800f172:	68fb      	ldr	r3, [r7, #12]
}
 800f174:	4618      	mov	r0, r3
 800f176:	3710      	adds	r7, #16
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b084      	sub	sp, #16
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f184:	f001 f962 	bl	801044c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f190:	429a      	cmp	r2, r3
 800f192:	d102      	bne.n	800f19a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f194:	2301      	movs	r3, #1
 800f196:	60fb      	str	r3, [r7, #12]
 800f198:	e001      	b.n	800f19e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f19a:	2300      	movs	r3, #0
 800f19c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f19e:	f001 f985 	bl	80104ac <vPortExitCritical>

	return xReturn;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b085      	sub	sp, #20
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	60fb      	str	r3, [r7, #12]
 800f1b8:	e016      	b.n	800f1e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f1ba:	4a10      	ldr	r2, [pc, #64]	; (800f1fc <vQueueUnregisterQueue+0x50>)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	00db      	lsls	r3, r3, #3
 800f1c0:	4413      	add	r3, r2
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d10b      	bne.n	800f1e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f1ca:	4a0c      	ldr	r2, [pc, #48]	; (800f1fc <vQueueUnregisterQueue+0x50>)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2100      	movs	r1, #0
 800f1d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f1d4:	4a09      	ldr	r2, [pc, #36]	; (800f1fc <vQueueUnregisterQueue+0x50>)
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	00db      	lsls	r3, r3, #3
 800f1da:	4413      	add	r3, r2
 800f1dc:	2200      	movs	r2, #0
 800f1de:	605a      	str	r2, [r3, #4]
				break;
 800f1e0:	e006      	b.n	800f1f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	60fb      	str	r3, [r7, #12]
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2b07      	cmp	r3, #7
 800f1ec:	d9e5      	bls.n	800f1ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f1ee:	bf00      	nop
 800f1f0:	bf00      	nop
 800f1f2:	3714      	adds	r7, #20
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bc80      	pop	{r7}
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	2000ae94 	.word	0x2000ae94

0800f200 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f200:	b580      	push	{r7, lr}
 800f202:	b08e      	sub	sp, #56	; 0x38
 800f204:	af04      	add	r7, sp, #16
 800f206:	60f8      	str	r0, [r7, #12]
 800f208:	60b9      	str	r1, [r7, #8]
 800f20a:	607a      	str	r2, [r7, #4]
 800f20c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f210:	2b00      	cmp	r3, #0
 800f212:	d10a      	bne.n	800f22a <xTaskCreateStatic+0x2a>
	__asm volatile
 800f214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f218:	f383 8811 	msr	BASEPRI, r3
 800f21c:	f3bf 8f6f 	isb	sy
 800f220:	f3bf 8f4f 	dsb	sy
 800f224:	623b      	str	r3, [r7, #32]
}
 800f226:	bf00      	nop
 800f228:	e7fe      	b.n	800f228 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d10a      	bne.n	800f246 <xTaskCreateStatic+0x46>
	__asm volatile
 800f230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f234:	f383 8811 	msr	BASEPRI, r3
 800f238:	f3bf 8f6f 	isb	sy
 800f23c:	f3bf 8f4f 	dsb	sy
 800f240:	61fb      	str	r3, [r7, #28]
}
 800f242:	bf00      	nop
 800f244:	e7fe      	b.n	800f244 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f246:	23b4      	movs	r3, #180	; 0xb4
 800f248:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	2bb4      	cmp	r3, #180	; 0xb4
 800f24e:	d00a      	beq.n	800f266 <xTaskCreateStatic+0x66>
	__asm volatile
 800f250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f254:	f383 8811 	msr	BASEPRI, r3
 800f258:	f3bf 8f6f 	isb	sy
 800f25c:	f3bf 8f4f 	dsb	sy
 800f260:	61bb      	str	r3, [r7, #24]
}
 800f262:	bf00      	nop
 800f264:	e7fe      	b.n	800f264 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d01e      	beq.n	800f2aa <xTaskCreateStatic+0xaa>
 800f26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d01b      	beq.n	800f2aa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f274:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f27a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27e:	2202      	movs	r2, #2
 800f280:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f284:	2300      	movs	r3, #0
 800f286:	9303      	str	r3, [sp, #12]
 800f288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28a:	9302      	str	r3, [sp, #8]
 800f28c:	f107 0314 	add.w	r3, r7, #20
 800f290:	9301      	str	r3, [sp, #4]
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	9300      	str	r3, [sp, #0]
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	68b9      	ldr	r1, [r7, #8]
 800f29c:	68f8      	ldr	r0, [r7, #12]
 800f29e:	f000 f851 	bl	800f344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2a4:	f000 f8e4 	bl	800f470 <prvAddNewTaskToReadyList>
 800f2a8:	e001      	b.n	800f2ae <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f2ae:	697b      	ldr	r3, [r7, #20]
	}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3728      	adds	r7, #40	; 0x28
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b08c      	sub	sp, #48	; 0x30
 800f2bc:	af04      	add	r7, sp, #16
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	60b9      	str	r1, [r7, #8]
 800f2c2:	603b      	str	r3, [r7, #0]
 800f2c4:	4613      	mov	r3, r2
 800f2c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2c8:	88fb      	ldrh	r3, [r7, #6]
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f001 f9bd 	bl	801064c <pvPortMalloc>
 800f2d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00e      	beq.n	800f2f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800f2da:	20b4      	movs	r0, #180	; 0xb4
 800f2dc:	f001 f9b6 	bl	801064c <pvPortMalloc>
 800f2e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f2e2:	69fb      	ldr	r3, [r7, #28]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d003      	beq.n	800f2f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	697a      	ldr	r2, [r7, #20]
 800f2ec:	631a      	str	r2, [r3, #48]	; 0x30
 800f2ee:	e005      	b.n	800f2fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f2f0:	6978      	ldr	r0, [r7, #20]
 800f2f2:	f001 fa6f 	bl	80107d4 <vPortFree>
 800f2f6:	e001      	b.n	800f2fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d017      	beq.n	800f332 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	2200      	movs	r2, #0
 800f306:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f30a:	88fa      	ldrh	r2, [r7, #6]
 800f30c:	2300      	movs	r3, #0
 800f30e:	9303      	str	r3, [sp, #12]
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	9302      	str	r3, [sp, #8]
 800f314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f316:	9301      	str	r3, [sp, #4]
 800f318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	68b9      	ldr	r1, [r7, #8]
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f000 f80f 	bl	800f344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f326:	69f8      	ldr	r0, [r7, #28]
 800f328:	f000 f8a2 	bl	800f470 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f32c:	2301      	movs	r3, #1
 800f32e:	61bb      	str	r3, [r7, #24]
 800f330:	e002      	b.n	800f338 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f332:	f04f 33ff 	mov.w	r3, #4294967295
 800f336:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f338:	69bb      	ldr	r3, [r7, #24]
	}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3720      	adds	r7, #32
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
	...

0800f344 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b088      	sub	sp, #32
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]
 800f350:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800f352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f35c:	3b01      	subs	r3, #1
 800f35e:	009b      	lsls	r3, r3, #2
 800f360:	4413      	add	r3, r2
 800f362:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f364:	69bb      	ldr	r3, [r7, #24]
 800f366:	f023 0307 	bic.w	r3, r3, #7
 800f36a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	f003 0307 	and.w	r3, r3, #7
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00a      	beq.n	800f38c <prvInitialiseNewTask+0x48>
	__asm volatile
 800f376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37a:	f383 8811 	msr	BASEPRI, r3
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	f3bf 8f4f 	dsb	sy
 800f386:	617b      	str	r3, [r7, #20]
}
 800f388:	bf00      	nop
 800f38a:	e7fe      	b.n	800f38a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f38c:	2300      	movs	r3, #0
 800f38e:	61fb      	str	r3, [r7, #28]
 800f390:	e012      	b.n	800f3b8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f392:	68ba      	ldr	r2, [r7, #8]
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	4413      	add	r3, r2
 800f398:	7819      	ldrb	r1, [r3, #0]
 800f39a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	4413      	add	r3, r2
 800f3a0:	3334      	adds	r3, #52	; 0x34
 800f3a2:	460a      	mov	r2, r1
 800f3a4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800f3a6:	68ba      	ldr	r2, [r7, #8]
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d006      	beq.n	800f3c0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f3b2:	69fb      	ldr	r3, [r7, #28]
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	61fb      	str	r3, [r7, #28]
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	2b0f      	cmp	r3, #15
 800f3bc:	d9e9      	bls.n	800f392 <prvInitialiseNewTask+0x4e>
 800f3be:	e000      	b.n	800f3c2 <prvInitialiseNewTask+0x7e>
		{
			break;
 800f3c0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3cc:	2b06      	cmp	r3, #6
 800f3ce:	d901      	bls.n	800f3d4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f3d0:	2306      	movs	r3, #6
 800f3d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e8:	3304      	adds	r3, #4
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fe ff37 	bl	800e25e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f2:	3318      	adds	r3, #24
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7fe ff32 	bl	800e25e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f402:	f1c3 0207 	rsb	r2, r3, #7
 800f406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f408:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f40c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f40e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f412:	2200      	movs	r2, #0
 800f414:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41a:	2200      	movs	r2, #0
 800f41c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f422:	334c      	adds	r3, #76	; 0x4c
 800f424:	2260      	movs	r2, #96	; 0x60
 800f426:	2100      	movs	r1, #0
 800f428:	4618      	mov	r0, r3
 800f42a:	f001 ff69 	bl	8011300 <memset>
 800f42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f430:	4a0c      	ldr	r2, [pc, #48]	; (800f464 <prvInitialiseNewTask+0x120>)
 800f432:	651a      	str	r2, [r3, #80]	; 0x50
 800f434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f436:	4a0c      	ldr	r2, [pc, #48]	; (800f468 <prvInitialiseNewTask+0x124>)
 800f438:	655a      	str	r2, [r3, #84]	; 0x54
 800f43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43c:	4a0b      	ldr	r2, [pc, #44]	; (800f46c <prvInitialiseNewTask+0x128>)
 800f43e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f440:	683a      	ldr	r2, [r7, #0]
 800f442:	68f9      	ldr	r1, [r7, #12]
 800f444:	69b8      	ldr	r0, [r7, #24]
 800f446:	f000 ff11 	bl	801026c <pxPortInitialiseStack>
 800f44a:	4602      	mov	r2, r0
 800f44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800f450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f452:	2b00      	cmp	r3, #0
 800f454:	d002      	beq.n	800f45c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f45a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f45c:	bf00      	nop
 800f45e:	3720      	adds	r7, #32
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	08015bcc 	.word	0x08015bcc
 800f468:	08015bec 	.word	0x08015bec
 800f46c:	08015bac 	.word	0x08015bac

0800f470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f478:	f000 ffe8 	bl	801044c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f47c:	4b2a      	ldr	r3, [pc, #168]	; (800f528 <prvAddNewTaskToReadyList+0xb8>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	3301      	adds	r3, #1
 800f482:	4a29      	ldr	r2, [pc, #164]	; (800f528 <prvAddNewTaskToReadyList+0xb8>)
 800f484:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f486:	4b29      	ldr	r3, [pc, #164]	; (800f52c <prvAddNewTaskToReadyList+0xbc>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d109      	bne.n	800f4a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f48e:	4a27      	ldr	r2, [pc, #156]	; (800f52c <prvAddNewTaskToReadyList+0xbc>)
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f494:	4b24      	ldr	r3, [pc, #144]	; (800f528 <prvAddNewTaskToReadyList+0xb8>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d110      	bne.n	800f4be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f49c:	f000 fbdc 	bl	800fc58 <prvInitialiseTaskLists>
 800f4a0:	e00d      	b.n	800f4be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f4a2:	4b23      	ldr	r3, [pc, #140]	; (800f530 <prvAddNewTaskToReadyList+0xc0>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d109      	bne.n	800f4be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f4aa:	4b20      	ldr	r3, [pc, #128]	; (800f52c <prvAddNewTaskToReadyList+0xbc>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d802      	bhi.n	800f4be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f4b8:	4a1c      	ldr	r2, [pc, #112]	; (800f52c <prvAddNewTaskToReadyList+0xbc>)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f4be:	4b1d      	ldr	r3, [pc, #116]	; (800f534 <prvAddNewTaskToReadyList+0xc4>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	4a1b      	ldr	r2, [pc, #108]	; (800f534 <prvAddNewTaskToReadyList+0xc4>)
 800f4c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	409a      	lsls	r2, r3
 800f4d0:	4b19      	ldr	r3, [pc, #100]	; (800f538 <prvAddNewTaskToReadyList+0xc8>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	4a18      	ldr	r2, [pc, #96]	; (800f538 <prvAddNewTaskToReadyList+0xc8>)
 800f4d8:	6013      	str	r3, [r2, #0]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4de:	4613      	mov	r3, r2
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	4413      	add	r3, r2
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	4a15      	ldr	r2, [pc, #84]	; (800f53c <prvAddNewTaskToReadyList+0xcc>)
 800f4e8:	441a      	add	r2, r3
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	3304      	adds	r3, #4
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	4610      	mov	r0, r2
 800f4f2:	f7fe fec0 	bl	800e276 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f4f6:	f000 ffd9 	bl	80104ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f4fa:	4b0d      	ldr	r3, [pc, #52]	; (800f530 <prvAddNewTaskToReadyList+0xc0>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d00e      	beq.n	800f520 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f502:	4b0a      	ldr	r3, [pc, #40]	; (800f52c <prvAddNewTaskToReadyList+0xbc>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d207      	bcs.n	800f520 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f510:	4b0b      	ldr	r3, [pc, #44]	; (800f540 <prvAddNewTaskToReadyList+0xd0>)
 800f512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f516:	601a      	str	r2, [r3, #0]
 800f518:	f3bf 8f4f 	dsb	sy
 800f51c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f520:	bf00      	nop
 800f522:	3708      	adds	r7, #8
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	20000924 	.word	0x20000924
 800f52c:	20000824 	.word	0x20000824
 800f530:	20000930 	.word	0x20000930
 800f534:	20000940 	.word	0x20000940
 800f538:	2000092c 	.word	0x2000092c
 800f53c:	20000828 	.word	0x20000828
 800f540:	e000ed04 	.word	0xe000ed04

0800f544 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f54c:	2300      	movs	r3, #0
 800f54e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d017      	beq.n	800f586 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f556:	4b13      	ldr	r3, [pc, #76]	; (800f5a4 <vTaskDelay+0x60>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d00a      	beq.n	800f574 <vTaskDelay+0x30>
	__asm volatile
 800f55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f562:	f383 8811 	msr	BASEPRI, r3
 800f566:	f3bf 8f6f 	isb	sy
 800f56a:	f3bf 8f4f 	dsb	sy
 800f56e:	60bb      	str	r3, [r7, #8]
}
 800f570:	bf00      	nop
 800f572:	e7fe      	b.n	800f572 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f574:	f000 f884 	bl	800f680 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f578:	2100      	movs	r1, #0
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f000 fe10 	bl	80101a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f580:	f000 f88c 	bl	800f69c <xTaskResumeAll>
 800f584:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d107      	bne.n	800f59c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f58c:	4b06      	ldr	r3, [pc, #24]	; (800f5a8 <vTaskDelay+0x64>)
 800f58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f592:	601a      	str	r2, [r3, #0]
 800f594:	f3bf 8f4f 	dsb	sy
 800f598:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f59c:	bf00      	nop
 800f59e:	3710      	adds	r7, #16
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	2000094c 	.word	0x2000094c
 800f5a8:	e000ed04 	.word	0xe000ed04

0800f5ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b08a      	sub	sp, #40	; 0x28
 800f5b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f5ba:	463a      	mov	r2, r7
 800f5bc:	1d39      	adds	r1, r7, #4
 800f5be:	f107 0308 	add.w	r3, r7, #8
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7f2 f990 	bl	80018e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f5c8:	6839      	ldr	r1, [r7, #0]
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	68ba      	ldr	r2, [r7, #8]
 800f5ce:	9202      	str	r2, [sp, #8]
 800f5d0:	9301      	str	r3, [sp, #4]
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	9300      	str	r3, [sp, #0]
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	460a      	mov	r2, r1
 800f5da:	4921      	ldr	r1, [pc, #132]	; (800f660 <vTaskStartScheduler+0xb4>)
 800f5dc:	4821      	ldr	r0, [pc, #132]	; (800f664 <vTaskStartScheduler+0xb8>)
 800f5de:	f7ff fe0f 	bl	800f200 <xTaskCreateStatic>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	4a20      	ldr	r2, [pc, #128]	; (800f668 <vTaskStartScheduler+0xbc>)
 800f5e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f5e8:	4b1f      	ldr	r3, [pc, #124]	; (800f668 <vTaskStartScheduler+0xbc>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d002      	beq.n	800f5f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	617b      	str	r3, [r7, #20]
 800f5f4:	e001      	b.n	800f5fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d11b      	bne.n	800f638 <vTaskStartScheduler+0x8c>
	__asm volatile
 800f600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f604:	f383 8811 	msr	BASEPRI, r3
 800f608:	f3bf 8f6f 	isb	sy
 800f60c:	f3bf 8f4f 	dsb	sy
 800f610:	613b      	str	r3, [r7, #16]
}
 800f612:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f614:	4b15      	ldr	r3, [pc, #84]	; (800f66c <vTaskStartScheduler+0xc0>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	334c      	adds	r3, #76	; 0x4c
 800f61a:	4a15      	ldr	r2, [pc, #84]	; (800f670 <vTaskStartScheduler+0xc4>)
 800f61c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f61e:	4b15      	ldr	r3, [pc, #84]	; (800f674 <vTaskStartScheduler+0xc8>)
 800f620:	f04f 32ff 	mov.w	r2, #4294967295
 800f624:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f626:	4b14      	ldr	r3, [pc, #80]	; (800f678 <vTaskStartScheduler+0xcc>)
 800f628:	2201      	movs	r2, #1
 800f62a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f62c:	4b13      	ldr	r3, [pc, #76]	; (800f67c <vTaskStartScheduler+0xd0>)
 800f62e:	2200      	movs	r2, #0
 800f630:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f632:	f000 fe99 	bl	8010368 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f636:	e00e      	b.n	800f656 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f63e:	d10a      	bne.n	800f656 <vTaskStartScheduler+0xaa>
	__asm volatile
 800f640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	60fb      	str	r3, [r7, #12]
}
 800f652:	bf00      	nop
 800f654:	e7fe      	b.n	800f654 <vTaskStartScheduler+0xa8>
}
 800f656:	bf00      	nop
 800f658:	3718      	adds	r7, #24
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	08015af4 	.word	0x08015af4
 800f664:	0800fc29 	.word	0x0800fc29
 800f668:	20000948 	.word	0x20000948
 800f66c:	20000824 	.word	0x20000824
 800f670:	20000054 	.word	0x20000054
 800f674:	20000944 	.word	0x20000944
 800f678:	20000930 	.word	0x20000930
 800f67c:	20000928 	.word	0x20000928

0800f680 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f680:	b480      	push	{r7}
 800f682:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f684:	4b04      	ldr	r3, [pc, #16]	; (800f698 <vTaskSuspendAll+0x18>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	3301      	adds	r3, #1
 800f68a:	4a03      	ldr	r2, [pc, #12]	; (800f698 <vTaskSuspendAll+0x18>)
 800f68c:	6013      	str	r3, [r2, #0]
}
 800f68e:	bf00      	nop
 800f690:	46bd      	mov	sp, r7
 800f692:	bc80      	pop	{r7}
 800f694:	4770      	bx	lr
 800f696:	bf00      	nop
 800f698:	2000094c 	.word	0x2000094c

0800f69c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f6aa:	4b41      	ldr	r3, [pc, #260]	; (800f7b0 <xTaskResumeAll+0x114>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d10a      	bne.n	800f6c8 <xTaskResumeAll+0x2c>
	__asm volatile
 800f6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b6:	f383 8811 	msr	BASEPRI, r3
 800f6ba:	f3bf 8f6f 	isb	sy
 800f6be:	f3bf 8f4f 	dsb	sy
 800f6c2:	603b      	str	r3, [r7, #0]
}
 800f6c4:	bf00      	nop
 800f6c6:	e7fe      	b.n	800f6c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f6c8:	f000 fec0 	bl	801044c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f6cc:	4b38      	ldr	r3, [pc, #224]	; (800f7b0 <xTaskResumeAll+0x114>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	4a37      	ldr	r2, [pc, #220]	; (800f7b0 <xTaskResumeAll+0x114>)
 800f6d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6d6:	4b36      	ldr	r3, [pc, #216]	; (800f7b0 <xTaskResumeAll+0x114>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d161      	bne.n	800f7a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f6de:	4b35      	ldr	r3, [pc, #212]	; (800f7b4 <xTaskResumeAll+0x118>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d05d      	beq.n	800f7a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f6e6:	e02e      	b.n	800f746 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f6e8:	4b33      	ldr	r3, [pc, #204]	; (800f7b8 <xTaskResumeAll+0x11c>)
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	3318      	adds	r3, #24
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7fe fe19 	bl	800e32c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	3304      	adds	r3, #4
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fe fe14 	bl	800e32c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f708:	2201      	movs	r2, #1
 800f70a:	409a      	lsls	r2, r3
 800f70c:	4b2b      	ldr	r3, [pc, #172]	; (800f7bc <xTaskResumeAll+0x120>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4313      	orrs	r3, r2
 800f712:	4a2a      	ldr	r2, [pc, #168]	; (800f7bc <xTaskResumeAll+0x120>)
 800f714:	6013      	str	r3, [r2, #0]
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f71a:	4613      	mov	r3, r2
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	4413      	add	r3, r2
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	4a27      	ldr	r2, [pc, #156]	; (800f7c0 <xTaskResumeAll+0x124>)
 800f724:	441a      	add	r2, r3
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	3304      	adds	r3, #4
 800f72a:	4619      	mov	r1, r3
 800f72c:	4610      	mov	r0, r2
 800f72e:	f7fe fda2 	bl	800e276 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f736:	4b23      	ldr	r3, [pc, #140]	; (800f7c4 <xTaskResumeAll+0x128>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d302      	bcc.n	800f746 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f740:	4b21      	ldr	r3, [pc, #132]	; (800f7c8 <xTaskResumeAll+0x12c>)
 800f742:	2201      	movs	r2, #1
 800f744:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f746:	4b1c      	ldr	r3, [pc, #112]	; (800f7b8 <xTaskResumeAll+0x11c>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d1cc      	bne.n	800f6e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d001      	beq.n	800f758 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f754:	f000 fb22 	bl	800fd9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f758:	4b1c      	ldr	r3, [pc, #112]	; (800f7cc <xTaskResumeAll+0x130>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d010      	beq.n	800f786 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f764:	f000 f836 	bl	800f7d4 <xTaskIncrementTick>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d002      	beq.n	800f774 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f76e:	4b16      	ldr	r3, [pc, #88]	; (800f7c8 <xTaskResumeAll+0x12c>)
 800f770:	2201      	movs	r2, #1
 800f772:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	3b01      	subs	r3, #1
 800f778:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1f1      	bne.n	800f764 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800f780:	4b12      	ldr	r3, [pc, #72]	; (800f7cc <xTaskResumeAll+0x130>)
 800f782:	2200      	movs	r2, #0
 800f784:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f786:	4b10      	ldr	r3, [pc, #64]	; (800f7c8 <xTaskResumeAll+0x12c>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d009      	beq.n	800f7a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f78e:	2301      	movs	r3, #1
 800f790:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f792:	4b0f      	ldr	r3, [pc, #60]	; (800f7d0 <xTaskResumeAll+0x134>)
 800f794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f798:	601a      	str	r2, [r3, #0]
 800f79a:	f3bf 8f4f 	dsb	sy
 800f79e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f7a2:	f000 fe83 	bl	80104ac <vPortExitCritical>

	return xAlreadyYielded;
 800f7a6:	68bb      	ldr	r3, [r7, #8]
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3710      	adds	r7, #16
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	2000094c 	.word	0x2000094c
 800f7b4:	20000924 	.word	0x20000924
 800f7b8:	200008e4 	.word	0x200008e4
 800f7bc:	2000092c 	.word	0x2000092c
 800f7c0:	20000828 	.word	0x20000828
 800f7c4:	20000824 	.word	0x20000824
 800f7c8:	20000938 	.word	0x20000938
 800f7cc:	20000934 	.word	0x20000934
 800f7d0:	e000ed04 	.word	0xe000ed04

0800f7d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b086      	sub	sp, #24
 800f7d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7de:	4b51      	ldr	r3, [pc, #324]	; (800f924 <xTaskIncrementTick+0x150>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f040 808d 	bne.w	800f902 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f7e8:	4b4f      	ldr	r3, [pc, #316]	; (800f928 <xTaskIncrementTick+0x154>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f7f0:	4a4d      	ldr	r2, [pc, #308]	; (800f928 <xTaskIncrementTick+0x154>)
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d120      	bne.n	800f83e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f7fc:	4b4b      	ldr	r3, [pc, #300]	; (800f92c <xTaskIncrementTick+0x158>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00a      	beq.n	800f81c <xTaskIncrementTick+0x48>
	__asm volatile
 800f806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f80a:	f383 8811 	msr	BASEPRI, r3
 800f80e:	f3bf 8f6f 	isb	sy
 800f812:	f3bf 8f4f 	dsb	sy
 800f816:	603b      	str	r3, [r7, #0]
}
 800f818:	bf00      	nop
 800f81a:	e7fe      	b.n	800f81a <xTaskIncrementTick+0x46>
 800f81c:	4b43      	ldr	r3, [pc, #268]	; (800f92c <xTaskIncrementTick+0x158>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	60fb      	str	r3, [r7, #12]
 800f822:	4b43      	ldr	r3, [pc, #268]	; (800f930 <xTaskIncrementTick+0x15c>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	4a41      	ldr	r2, [pc, #260]	; (800f92c <xTaskIncrementTick+0x158>)
 800f828:	6013      	str	r3, [r2, #0]
 800f82a:	4a41      	ldr	r2, [pc, #260]	; (800f930 <xTaskIncrementTick+0x15c>)
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	6013      	str	r3, [r2, #0]
 800f830:	4b40      	ldr	r3, [pc, #256]	; (800f934 <xTaskIncrementTick+0x160>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	3301      	adds	r3, #1
 800f836:	4a3f      	ldr	r2, [pc, #252]	; (800f934 <xTaskIncrementTick+0x160>)
 800f838:	6013      	str	r3, [r2, #0]
 800f83a:	f000 faaf 	bl	800fd9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f83e:	4b3e      	ldr	r3, [pc, #248]	; (800f938 <xTaskIncrementTick+0x164>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	693a      	ldr	r2, [r7, #16]
 800f844:	429a      	cmp	r2, r3
 800f846:	d34d      	bcc.n	800f8e4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f848:	4b38      	ldr	r3, [pc, #224]	; (800f92c <xTaskIncrementTick+0x158>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d101      	bne.n	800f856 <xTaskIncrementTick+0x82>
 800f852:	2301      	movs	r3, #1
 800f854:	e000      	b.n	800f858 <xTaskIncrementTick+0x84>
 800f856:	2300      	movs	r3, #0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d004      	beq.n	800f866 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f85c:	4b36      	ldr	r3, [pc, #216]	; (800f938 <xTaskIncrementTick+0x164>)
 800f85e:	f04f 32ff 	mov.w	r2, #4294967295
 800f862:	601a      	str	r2, [r3, #0]
					break;
 800f864:	e03e      	b.n	800f8e4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f866:	4b31      	ldr	r3, [pc, #196]	; (800f92c <xTaskIncrementTick+0x158>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f876:	693a      	ldr	r2, [r7, #16]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d203      	bcs.n	800f886 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f87e:	4a2e      	ldr	r2, [pc, #184]	; (800f938 <xTaskIncrementTick+0x164>)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6013      	str	r3, [r2, #0]
						break;
 800f884:	e02e      	b.n	800f8e4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	3304      	adds	r3, #4
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fe fd4e 	bl	800e32c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f894:	2b00      	cmp	r3, #0
 800f896:	d004      	beq.n	800f8a2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	3318      	adds	r3, #24
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7fe fd45 	bl	800e32c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	409a      	lsls	r2, r3
 800f8aa:	4b24      	ldr	r3, [pc, #144]	; (800f93c <xTaskIncrementTick+0x168>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	4a22      	ldr	r2, [pc, #136]	; (800f93c <xTaskIncrementTick+0x168>)
 800f8b2:	6013      	str	r3, [r2, #0]
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	4413      	add	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4a1f      	ldr	r2, [pc, #124]	; (800f940 <xTaskIncrementTick+0x16c>)
 800f8c2:	441a      	add	r2, r3
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	3304      	adds	r3, #4
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	4610      	mov	r0, r2
 800f8cc:	f7fe fcd3 	bl	800e276 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8d4:	4b1b      	ldr	r3, [pc, #108]	; (800f944 <xTaskIncrementTick+0x170>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d3b4      	bcc.n	800f848 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f8de:	2301      	movs	r3, #1
 800f8e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8e2:	e7b1      	b.n	800f848 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f8e4:	4b17      	ldr	r3, [pc, #92]	; (800f944 <xTaskIncrementTick+0x170>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ea:	4915      	ldr	r1, [pc, #84]	; (800f940 <xTaskIncrementTick+0x16c>)
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	4413      	add	r3, r2
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	440b      	add	r3, r1
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	d907      	bls.n	800f90c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	617b      	str	r3, [r7, #20]
 800f900:	e004      	b.n	800f90c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f902:	4b11      	ldr	r3, [pc, #68]	; (800f948 <xTaskIncrementTick+0x174>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	3301      	adds	r3, #1
 800f908:	4a0f      	ldr	r2, [pc, #60]	; (800f948 <xTaskIncrementTick+0x174>)
 800f90a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f90c:	4b0f      	ldr	r3, [pc, #60]	; (800f94c <xTaskIncrementTick+0x178>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d001      	beq.n	800f918 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800f914:	2301      	movs	r3, #1
 800f916:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f918:	697b      	ldr	r3, [r7, #20]
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3718      	adds	r7, #24
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	2000094c 	.word	0x2000094c
 800f928:	20000928 	.word	0x20000928
 800f92c:	200008dc 	.word	0x200008dc
 800f930:	200008e0 	.word	0x200008e0
 800f934:	2000093c 	.word	0x2000093c
 800f938:	20000944 	.word	0x20000944
 800f93c:	2000092c 	.word	0x2000092c
 800f940:	20000828 	.word	0x20000828
 800f944:	20000824 	.word	0x20000824
 800f948:	20000934 	.word	0x20000934
 800f94c:	20000938 	.word	0x20000938

0800f950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f950:	b480      	push	{r7}
 800f952:	b087      	sub	sp, #28
 800f954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f956:	4b29      	ldr	r3, [pc, #164]	; (800f9fc <vTaskSwitchContext+0xac>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d003      	beq.n	800f966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f95e:	4b28      	ldr	r3, [pc, #160]	; (800fa00 <vTaskSwitchContext+0xb0>)
 800f960:	2201      	movs	r2, #1
 800f962:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f964:	e044      	b.n	800f9f0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800f966:	4b26      	ldr	r3, [pc, #152]	; (800fa00 <vTaskSwitchContext+0xb0>)
 800f968:	2200      	movs	r2, #0
 800f96a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f96c:	4b25      	ldr	r3, [pc, #148]	; (800fa04 <vTaskSwitchContext+0xb4>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	fab3 f383 	clz	r3, r3
 800f978:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f97a:	7afb      	ldrb	r3, [r7, #11]
 800f97c:	f1c3 031f 	rsb	r3, r3, #31
 800f980:	617b      	str	r3, [r7, #20]
 800f982:	4921      	ldr	r1, [pc, #132]	; (800fa08 <vTaskSwitchContext+0xb8>)
 800f984:	697a      	ldr	r2, [r7, #20]
 800f986:	4613      	mov	r3, r2
 800f988:	009b      	lsls	r3, r3, #2
 800f98a:	4413      	add	r3, r2
 800f98c:	009b      	lsls	r3, r3, #2
 800f98e:	440b      	add	r3, r1
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d10a      	bne.n	800f9ac <vTaskSwitchContext+0x5c>
	__asm volatile
 800f996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f99a:	f383 8811 	msr	BASEPRI, r3
 800f99e:	f3bf 8f6f 	isb	sy
 800f9a2:	f3bf 8f4f 	dsb	sy
 800f9a6:	607b      	str	r3, [r7, #4]
}
 800f9a8:	bf00      	nop
 800f9aa:	e7fe      	b.n	800f9aa <vTaskSwitchContext+0x5a>
 800f9ac:	697a      	ldr	r2, [r7, #20]
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	4413      	add	r3, r2
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	4a14      	ldr	r2, [pc, #80]	; (800fa08 <vTaskSwitchContext+0xb8>)
 800f9b8:	4413      	add	r3, r2
 800f9ba:	613b      	str	r3, [r7, #16]
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	685a      	ldr	r2, [r3, #4]
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	605a      	str	r2, [r3, #4]
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	685a      	ldr	r2, [r3, #4]
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	3308      	adds	r3, #8
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d104      	bne.n	800f9dc <vTaskSwitchContext+0x8c>
 800f9d2:	693b      	ldr	r3, [r7, #16]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	685a      	ldr	r2, [r3, #4]
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	605a      	str	r2, [r3, #4]
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	4a0a      	ldr	r2, [pc, #40]	; (800fa0c <vTaskSwitchContext+0xbc>)
 800f9e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f9e6:	4b09      	ldr	r3, [pc, #36]	; (800fa0c <vTaskSwitchContext+0xbc>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	334c      	adds	r3, #76	; 0x4c
 800f9ec:	4a08      	ldr	r2, [pc, #32]	; (800fa10 <vTaskSwitchContext+0xc0>)
 800f9ee:	6013      	str	r3, [r2, #0]
}
 800f9f0:	bf00      	nop
 800f9f2:	371c      	adds	r7, #28
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bc80      	pop	{r7}
 800f9f8:	4770      	bx	lr
 800f9fa:	bf00      	nop
 800f9fc:	2000094c 	.word	0x2000094c
 800fa00:	20000938 	.word	0x20000938
 800fa04:	2000092c 	.word	0x2000092c
 800fa08:	20000828 	.word	0x20000828
 800fa0c:	20000824 	.word	0x20000824
 800fa10:	20000054 	.word	0x20000054

0800fa14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d10a      	bne.n	800fa3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa28:	f383 8811 	msr	BASEPRI, r3
 800fa2c:	f3bf 8f6f 	isb	sy
 800fa30:	f3bf 8f4f 	dsb	sy
 800fa34:	60fb      	str	r3, [r7, #12]
}
 800fa36:	bf00      	nop
 800fa38:	e7fe      	b.n	800fa38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa3a:	4b07      	ldr	r3, [pc, #28]	; (800fa58 <vTaskPlaceOnEventList+0x44>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	3318      	adds	r3, #24
 800fa40:	4619      	mov	r1, r3
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f7fe fc3a 	bl	800e2bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fa48:	2101      	movs	r1, #1
 800fa4a:	6838      	ldr	r0, [r7, #0]
 800fa4c:	f000 fba8 	bl	80101a0 <prvAddCurrentTaskToDelayedList>
}
 800fa50:	bf00      	nop
 800fa52:	3710      	adds	r7, #16
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	20000824 	.word	0x20000824

0800fa5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b086      	sub	sp, #24
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d10a      	bne.n	800fa88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa76:	f383 8811 	msr	BASEPRI, r3
 800fa7a:	f3bf 8f6f 	isb	sy
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	60fb      	str	r3, [r7, #12]
}
 800fa84:	bf00      	nop
 800fa86:	e7fe      	b.n	800fa86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	3318      	adds	r3, #24
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fe fc4d 	bl	800e32c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa92:	4b1d      	ldr	r3, [pc, #116]	; (800fb08 <xTaskRemoveFromEventList+0xac>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d11c      	bne.n	800fad4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	3304      	adds	r3, #4
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fe fc44 	bl	800e32c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faa8:	2201      	movs	r2, #1
 800faaa:	409a      	lsls	r2, r3
 800faac:	4b17      	ldr	r3, [pc, #92]	; (800fb0c <xTaskRemoveFromEventList+0xb0>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4313      	orrs	r3, r2
 800fab2:	4a16      	ldr	r2, [pc, #88]	; (800fb0c <xTaskRemoveFromEventList+0xb0>)
 800fab4:	6013      	str	r3, [r2, #0]
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faba:	4613      	mov	r3, r2
 800fabc:	009b      	lsls	r3, r3, #2
 800fabe:	4413      	add	r3, r2
 800fac0:	009b      	lsls	r3, r3, #2
 800fac2:	4a13      	ldr	r2, [pc, #76]	; (800fb10 <xTaskRemoveFromEventList+0xb4>)
 800fac4:	441a      	add	r2, r3
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	3304      	adds	r3, #4
 800faca:	4619      	mov	r1, r3
 800facc:	4610      	mov	r0, r2
 800face:	f7fe fbd2 	bl	800e276 <vListInsertEnd>
 800fad2:	e005      	b.n	800fae0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	3318      	adds	r3, #24
 800fad8:	4619      	mov	r1, r3
 800fada:	480e      	ldr	r0, [pc, #56]	; (800fb14 <xTaskRemoveFromEventList+0xb8>)
 800fadc:	f7fe fbcb 	bl	800e276 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fae4:	4b0c      	ldr	r3, [pc, #48]	; (800fb18 <xTaskRemoveFromEventList+0xbc>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faea:	429a      	cmp	r2, r3
 800faec:	d905      	bls.n	800fafa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800faee:	2301      	movs	r3, #1
 800faf0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800faf2:	4b0a      	ldr	r3, [pc, #40]	; (800fb1c <xTaskRemoveFromEventList+0xc0>)
 800faf4:	2201      	movs	r2, #1
 800faf6:	601a      	str	r2, [r3, #0]
 800faf8:	e001      	b.n	800fafe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fafa:	2300      	movs	r3, #0
 800fafc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800fafe:	697b      	ldr	r3, [r7, #20]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3718      	adds	r7, #24
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	2000094c 	.word	0x2000094c
 800fb0c:	2000092c 	.word	0x2000092c
 800fb10:	20000828 	.word	0x20000828
 800fb14:	200008e4 	.word	0x200008e4
 800fb18:	20000824 	.word	0x20000824
 800fb1c:	20000938 	.word	0x20000938

0800fb20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fb20:	b480      	push	{r7}
 800fb22:	b083      	sub	sp, #12
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fb28:	4b06      	ldr	r3, [pc, #24]	; (800fb44 <vTaskInternalSetTimeOutState+0x24>)
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fb30:	4b05      	ldr	r3, [pc, #20]	; (800fb48 <vTaskInternalSetTimeOutState+0x28>)
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	605a      	str	r2, [r3, #4]
}
 800fb38:	bf00      	nop
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bc80      	pop	{r7}
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop
 800fb44:	2000093c 	.word	0x2000093c
 800fb48:	20000928 	.word	0x20000928

0800fb4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b088      	sub	sp, #32
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d10a      	bne.n	800fb72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb60:	f383 8811 	msr	BASEPRI, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	f3bf 8f4f 	dsb	sy
 800fb6c:	613b      	str	r3, [r7, #16]
}
 800fb6e:	bf00      	nop
 800fb70:	e7fe      	b.n	800fb70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d10a      	bne.n	800fb8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7c:	f383 8811 	msr	BASEPRI, r3
 800fb80:	f3bf 8f6f 	isb	sy
 800fb84:	f3bf 8f4f 	dsb	sy
 800fb88:	60fb      	str	r3, [r7, #12]
}
 800fb8a:	bf00      	nop
 800fb8c:	e7fe      	b.n	800fb8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fb8e:	f000 fc5d 	bl	801044c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fb92:	4b1d      	ldr	r3, [pc, #116]	; (800fc08 <xTaskCheckForTimeOut+0xbc>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	69ba      	ldr	r2, [r7, #24]
 800fb9e:	1ad3      	subs	r3, r2, r3
 800fba0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbaa:	d102      	bne.n	800fbb2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fbac:	2300      	movs	r3, #0
 800fbae:	61fb      	str	r3, [r7, #28]
 800fbb0:	e023      	b.n	800fbfa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681a      	ldr	r2, [r3, #0]
 800fbb6:	4b15      	ldr	r3, [pc, #84]	; (800fc0c <xTaskCheckForTimeOut+0xc0>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d007      	beq.n	800fbce <xTaskCheckForTimeOut+0x82>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	69ba      	ldr	r2, [r7, #24]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d302      	bcc.n	800fbce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fbc8:	2301      	movs	r3, #1
 800fbca:	61fb      	str	r3, [r7, #28]
 800fbcc:	e015      	b.n	800fbfa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	697a      	ldr	r2, [r7, #20]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d20b      	bcs.n	800fbf0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	1ad2      	subs	r2, r2, r3
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f7ff ff9b 	bl	800fb20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fbea:	2300      	movs	r3, #0
 800fbec:	61fb      	str	r3, [r7, #28]
 800fbee:	e004      	b.n	800fbfa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fbfa:	f000 fc57 	bl	80104ac <vPortExitCritical>

	return xReturn;
 800fbfe:	69fb      	ldr	r3, [r7, #28]
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3720      	adds	r7, #32
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}
 800fc08:	20000928 	.word	0x20000928
 800fc0c:	2000093c 	.word	0x2000093c

0800fc10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fc10:	b480      	push	{r7}
 800fc12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fc14:	4b03      	ldr	r3, [pc, #12]	; (800fc24 <vTaskMissedYield+0x14>)
 800fc16:	2201      	movs	r2, #1
 800fc18:	601a      	str	r2, [r3, #0]
}
 800fc1a:	bf00      	nop
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bc80      	pop	{r7}
 800fc20:	4770      	bx	lr
 800fc22:	bf00      	nop
 800fc24:	20000938 	.word	0x20000938

0800fc28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fc30:	f000 f852 	bl	800fcd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fc34:	4b06      	ldr	r3, [pc, #24]	; (800fc50 <prvIdleTask+0x28>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d9f9      	bls.n	800fc30 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fc3c:	4b05      	ldr	r3, [pc, #20]	; (800fc54 <prvIdleTask+0x2c>)
 800fc3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc42:	601a      	str	r2, [r3, #0]
 800fc44:	f3bf 8f4f 	dsb	sy
 800fc48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fc4c:	e7f0      	b.n	800fc30 <prvIdleTask+0x8>
 800fc4e:	bf00      	nop
 800fc50:	20000828 	.word	0x20000828
 800fc54:	e000ed04 	.word	0xe000ed04

0800fc58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc5e:	2300      	movs	r3, #0
 800fc60:	607b      	str	r3, [r7, #4]
 800fc62:	e00c      	b.n	800fc7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fc64:	687a      	ldr	r2, [r7, #4]
 800fc66:	4613      	mov	r3, r2
 800fc68:	009b      	lsls	r3, r3, #2
 800fc6a:	4413      	add	r3, r2
 800fc6c:	009b      	lsls	r3, r3, #2
 800fc6e:	4a12      	ldr	r2, [pc, #72]	; (800fcb8 <prvInitialiseTaskLists+0x60>)
 800fc70:	4413      	add	r3, r2
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7fe fad4 	bl	800e220 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	607b      	str	r3, [r7, #4]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2b06      	cmp	r3, #6
 800fc82:	d9ef      	bls.n	800fc64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fc84:	480d      	ldr	r0, [pc, #52]	; (800fcbc <prvInitialiseTaskLists+0x64>)
 800fc86:	f7fe facb 	bl	800e220 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fc8a:	480d      	ldr	r0, [pc, #52]	; (800fcc0 <prvInitialiseTaskLists+0x68>)
 800fc8c:	f7fe fac8 	bl	800e220 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fc90:	480c      	ldr	r0, [pc, #48]	; (800fcc4 <prvInitialiseTaskLists+0x6c>)
 800fc92:	f7fe fac5 	bl	800e220 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fc96:	480c      	ldr	r0, [pc, #48]	; (800fcc8 <prvInitialiseTaskLists+0x70>)
 800fc98:	f7fe fac2 	bl	800e220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fc9c:	480b      	ldr	r0, [pc, #44]	; (800fccc <prvInitialiseTaskLists+0x74>)
 800fc9e:	f7fe fabf 	bl	800e220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fca2:	4b0b      	ldr	r3, [pc, #44]	; (800fcd0 <prvInitialiseTaskLists+0x78>)
 800fca4:	4a05      	ldr	r2, [pc, #20]	; (800fcbc <prvInitialiseTaskLists+0x64>)
 800fca6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fca8:	4b0a      	ldr	r3, [pc, #40]	; (800fcd4 <prvInitialiseTaskLists+0x7c>)
 800fcaa:	4a05      	ldr	r2, [pc, #20]	; (800fcc0 <prvInitialiseTaskLists+0x68>)
 800fcac:	601a      	str	r2, [r3, #0]
}
 800fcae:	bf00      	nop
 800fcb0:	3708      	adds	r7, #8
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	20000828 	.word	0x20000828
 800fcbc:	200008b4 	.word	0x200008b4
 800fcc0:	200008c8 	.word	0x200008c8
 800fcc4:	200008e4 	.word	0x200008e4
 800fcc8:	200008f8 	.word	0x200008f8
 800fccc:	20000910 	.word	0x20000910
 800fcd0:	200008dc 	.word	0x200008dc
 800fcd4:	200008e0 	.word	0x200008e0

0800fcd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fcde:	e019      	b.n	800fd14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fce0:	f000 fbb4 	bl	801044c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800fce4:	4b10      	ldr	r3, [pc, #64]	; (800fd28 <prvCheckTasksWaitingTermination+0x50>)
 800fce6:	68db      	ldr	r3, [r3, #12]
 800fce8:	68db      	ldr	r3, [r3, #12]
 800fcea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	3304      	adds	r3, #4
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7fe fb1b 	bl	800e32c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fcf6:	4b0d      	ldr	r3, [pc, #52]	; (800fd2c <prvCheckTasksWaitingTermination+0x54>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	3b01      	subs	r3, #1
 800fcfc:	4a0b      	ldr	r2, [pc, #44]	; (800fd2c <prvCheckTasksWaitingTermination+0x54>)
 800fcfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fd00:	4b0b      	ldr	r3, [pc, #44]	; (800fd30 <prvCheckTasksWaitingTermination+0x58>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	3b01      	subs	r3, #1
 800fd06:	4a0a      	ldr	r2, [pc, #40]	; (800fd30 <prvCheckTasksWaitingTermination+0x58>)
 800fd08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fd0a:	f000 fbcf 	bl	80104ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f000 f810 	bl	800fd34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd14:	4b06      	ldr	r3, [pc, #24]	; (800fd30 <prvCheckTasksWaitingTermination+0x58>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d1e1      	bne.n	800fce0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fd1c:	bf00      	nop
 800fd1e:	bf00      	nop
 800fd20:	3708      	adds	r7, #8
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	200008f8 	.word	0x200008f8
 800fd2c:	20000924 	.word	0x20000924
 800fd30:	2000090c 	.word	0x2000090c

0800fd34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b084      	sub	sp, #16
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	334c      	adds	r3, #76	; 0x4c
 800fd40:	4618      	mov	r0, r3
 800fd42:	f002 fa0b 	bl	801215c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d108      	bne.n	800fd62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd54:	4618      	mov	r0, r3
 800fd56:	f000 fd3d 	bl	80107d4 <vPortFree>
				vPortFree( pxTCB );
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 fd3a 	bl	80107d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fd60:	e018      	b.n	800fd94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d103      	bne.n	800fd74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 fd31 	bl	80107d4 <vPortFree>
	}
 800fd72:	e00f      	b.n	800fd94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fd7a:	2b02      	cmp	r3, #2
 800fd7c:	d00a      	beq.n	800fd94 <prvDeleteTCB+0x60>
	__asm volatile
 800fd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd82:	f383 8811 	msr	BASEPRI, r3
 800fd86:	f3bf 8f6f 	isb	sy
 800fd8a:	f3bf 8f4f 	dsb	sy
 800fd8e:	60fb      	str	r3, [r7, #12]
}
 800fd90:	bf00      	nop
 800fd92:	e7fe      	b.n	800fd92 <prvDeleteTCB+0x5e>
	}
 800fd94:	bf00      	nop
 800fd96:	3710      	adds	r7, #16
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b083      	sub	sp, #12
 800fda0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fda2:	4b0e      	ldr	r3, [pc, #56]	; (800fddc <prvResetNextTaskUnblockTime+0x40>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d101      	bne.n	800fdb0 <prvResetNextTaskUnblockTime+0x14>
 800fdac:	2301      	movs	r3, #1
 800fdae:	e000      	b.n	800fdb2 <prvResetNextTaskUnblockTime+0x16>
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d004      	beq.n	800fdc0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fdb6:	4b0a      	ldr	r3, [pc, #40]	; (800fde0 <prvResetNextTaskUnblockTime+0x44>)
 800fdb8:	f04f 32ff 	mov.w	r2, #4294967295
 800fdbc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fdbe:	e008      	b.n	800fdd2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800fdc0:	4b06      	ldr	r3, [pc, #24]	; (800fddc <prvResetNextTaskUnblockTime+0x40>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	68db      	ldr	r3, [r3, #12]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	4a04      	ldr	r2, [pc, #16]	; (800fde0 <prvResetNextTaskUnblockTime+0x44>)
 800fdd0:	6013      	str	r3, [r2, #0]
}
 800fdd2:	bf00      	nop
 800fdd4:	370c      	adds	r7, #12
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bc80      	pop	{r7}
 800fdda:	4770      	bx	lr
 800fddc:	200008dc 	.word	0x200008dc
 800fde0:	20000944 	.word	0x20000944

0800fde4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fde4:	b480      	push	{r7}
 800fde6:	b083      	sub	sp, #12
 800fde8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fdea:	4b0b      	ldr	r3, [pc, #44]	; (800fe18 <xTaskGetSchedulerState+0x34>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d102      	bne.n	800fdf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	607b      	str	r3, [r7, #4]
 800fdf6:	e008      	b.n	800fe0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdf8:	4b08      	ldr	r3, [pc, #32]	; (800fe1c <xTaskGetSchedulerState+0x38>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d102      	bne.n	800fe06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fe00:	2302      	movs	r3, #2
 800fe02:	607b      	str	r3, [r7, #4]
 800fe04:	e001      	b.n	800fe0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe06:	2300      	movs	r3, #0
 800fe08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fe0a:	687b      	ldr	r3, [r7, #4]
	}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	370c      	adds	r7, #12
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bc80      	pop	{r7}
 800fe14:	4770      	bx	lr
 800fe16:	bf00      	nop
 800fe18:	20000930 	.word	0x20000930
 800fe1c:	2000094c 	.word	0x2000094c

0800fe20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b084      	sub	sp, #16
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d06e      	beq.n	800ff14 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe3a:	4b39      	ldr	r3, [pc, #228]	; (800ff20 <xTaskPriorityInherit+0x100>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d25e      	bcs.n	800ff02 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	699b      	ldr	r3, [r3, #24]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	db06      	blt.n	800fe5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe4c:	4b34      	ldr	r3, [pc, #208]	; (800ff20 <xTaskPriorityInherit+0x100>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe52:	f1c3 0207 	rsb	r2, r3, #7
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	6959      	ldr	r1, [r3, #20]
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe62:	4613      	mov	r3, r2
 800fe64:	009b      	lsls	r3, r3, #2
 800fe66:	4413      	add	r3, r2
 800fe68:	009b      	lsls	r3, r3, #2
 800fe6a:	4a2e      	ldr	r2, [pc, #184]	; (800ff24 <xTaskPriorityInherit+0x104>)
 800fe6c:	4413      	add	r3, r2
 800fe6e:	4299      	cmp	r1, r3
 800fe70:	d101      	bne.n	800fe76 <xTaskPriorityInherit+0x56>
 800fe72:	2301      	movs	r3, #1
 800fe74:	e000      	b.n	800fe78 <xTaskPriorityInherit+0x58>
 800fe76:	2300      	movs	r3, #0
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d03a      	beq.n	800fef2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	3304      	adds	r3, #4
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7fe fa53 	bl	800e32c <uxListRemove>
 800fe86:	4603      	mov	r3, r0
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d115      	bne.n	800feb8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe90:	4924      	ldr	r1, [pc, #144]	; (800ff24 <xTaskPriorityInherit+0x104>)
 800fe92:	4613      	mov	r3, r2
 800fe94:	009b      	lsls	r3, r3, #2
 800fe96:	4413      	add	r3, r2
 800fe98:	009b      	lsls	r3, r3, #2
 800fe9a:	440b      	add	r3, r1
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d10a      	bne.n	800feb8 <xTaskPriorityInherit+0x98>
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fea6:	2201      	movs	r2, #1
 800fea8:	fa02 f303 	lsl.w	r3, r2, r3
 800feac:	43da      	mvns	r2, r3
 800feae:	4b1e      	ldr	r3, [pc, #120]	; (800ff28 <xTaskPriorityInherit+0x108>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	4013      	ands	r3, r2
 800feb4:	4a1c      	ldr	r2, [pc, #112]	; (800ff28 <xTaskPriorityInherit+0x108>)
 800feb6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800feb8:	4b19      	ldr	r3, [pc, #100]	; (800ff20 <xTaskPriorityInherit+0x100>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fec6:	2201      	movs	r2, #1
 800fec8:	409a      	lsls	r2, r3
 800feca:	4b17      	ldr	r3, [pc, #92]	; (800ff28 <xTaskPriorityInherit+0x108>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4313      	orrs	r3, r2
 800fed0:	4a15      	ldr	r2, [pc, #84]	; (800ff28 <xTaskPriorityInherit+0x108>)
 800fed2:	6013      	str	r3, [r2, #0]
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fed8:	4613      	mov	r3, r2
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	4413      	add	r3, r2
 800fede:	009b      	lsls	r3, r3, #2
 800fee0:	4a10      	ldr	r2, [pc, #64]	; (800ff24 <xTaskPriorityInherit+0x104>)
 800fee2:	441a      	add	r2, r3
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	3304      	adds	r3, #4
 800fee8:	4619      	mov	r1, r3
 800feea:	4610      	mov	r0, r2
 800feec:	f7fe f9c3 	bl	800e276 <vListInsertEnd>
 800fef0:	e004      	b.n	800fefc <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fef2:	4b0b      	ldr	r3, [pc, #44]	; (800ff20 <xTaskPriorityInherit+0x100>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fefc:	2301      	movs	r3, #1
 800fefe:	60fb      	str	r3, [r7, #12]
 800ff00:	e008      	b.n	800ff14 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff06:	4b06      	ldr	r3, [pc, #24]	; (800ff20 <xTaskPriorityInherit+0x100>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d201      	bcs.n	800ff14 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ff10:	2301      	movs	r3, #1
 800ff12:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ff14:	68fb      	ldr	r3, [r7, #12]
	}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3710      	adds	r7, #16
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	20000824 	.word	0x20000824
 800ff24:	20000828 	.word	0x20000828
 800ff28:	2000092c 	.word	0x2000092c

0800ff2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b086      	sub	sp, #24
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d06e      	beq.n	8010020 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ff42:	4b3a      	ldr	r3, [pc, #232]	; (801002c <xTaskPriorityDisinherit+0x100>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	693a      	ldr	r2, [r7, #16]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d00a      	beq.n	800ff62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ff4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff50:	f383 8811 	msr	BASEPRI, r3
 800ff54:	f3bf 8f6f 	isb	sy
 800ff58:	f3bf 8f4f 	dsb	sy
 800ff5c:	60fb      	str	r3, [r7, #12]
}
 800ff5e:	bf00      	nop
 800ff60:	e7fe      	b.n	800ff60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10a      	bne.n	800ff80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ff6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6e:	f383 8811 	msr	BASEPRI, r3
 800ff72:	f3bf 8f6f 	isb	sy
 800ff76:	f3bf 8f4f 	dsb	sy
 800ff7a:	60bb      	str	r3, [r7, #8]
}
 800ff7c:	bf00      	nop
 800ff7e:	e7fe      	b.n	800ff7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff84:	1e5a      	subs	r2, r3, #1
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d044      	beq.n	8010020 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d140      	bne.n	8010020 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fe f9c2 	bl	800e32c <uxListRemove>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d115      	bne.n	800ffda <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb2:	491f      	ldr	r1, [pc, #124]	; (8010030 <xTaskPriorityDisinherit+0x104>)
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	4413      	add	r3, r2
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	440b      	add	r3, r1
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d10a      	bne.n	800ffda <xTaskPriorityDisinherit+0xae>
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc8:	2201      	movs	r2, #1
 800ffca:	fa02 f303 	lsl.w	r3, r2, r3
 800ffce:	43da      	mvns	r2, r3
 800ffd0:	4b18      	ldr	r3, [pc, #96]	; (8010034 <xTaskPriorityDisinherit+0x108>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	4013      	ands	r3, r2
 800ffd6:	4a17      	ldr	r2, [pc, #92]	; (8010034 <xTaskPriorityDisinherit+0x108>)
 800ffd8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffe6:	f1c3 0207 	rsb	r2, r3, #7
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff2:	2201      	movs	r2, #1
 800fff4:	409a      	lsls	r2, r3
 800fff6:	4b0f      	ldr	r3, [pc, #60]	; (8010034 <xTaskPriorityDisinherit+0x108>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4313      	orrs	r3, r2
 800fffc:	4a0d      	ldr	r2, [pc, #52]	; (8010034 <xTaskPriorityDisinherit+0x108>)
 800fffe:	6013      	str	r3, [r2, #0]
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010004:	4613      	mov	r3, r2
 8010006:	009b      	lsls	r3, r3, #2
 8010008:	4413      	add	r3, r2
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	4a08      	ldr	r2, [pc, #32]	; (8010030 <xTaskPriorityDisinherit+0x104>)
 801000e:	441a      	add	r2, r3
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	3304      	adds	r3, #4
 8010014:	4619      	mov	r1, r3
 8010016:	4610      	mov	r0, r2
 8010018:	f7fe f92d 	bl	800e276 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801001c:	2301      	movs	r3, #1
 801001e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010020:	697b      	ldr	r3, [r7, #20]
	}
 8010022:	4618      	mov	r0, r3
 8010024:	3718      	adds	r7, #24
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	20000824 	.word	0x20000824
 8010030:	20000828 	.word	0x20000828
 8010034:	2000092c 	.word	0x2000092c

08010038 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010038:	b580      	push	{r7, lr}
 801003a:	b088      	sub	sp, #32
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010046:	2301      	movs	r3, #1
 8010048:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2b00      	cmp	r3, #0
 801004e:	f000 8088 	beq.w	8010162 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010052:	69bb      	ldr	r3, [r7, #24]
 8010054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010056:	2b00      	cmp	r3, #0
 8010058:	d10a      	bne.n	8010070 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801005a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005e:	f383 8811 	msr	BASEPRI, r3
 8010062:	f3bf 8f6f 	isb	sy
 8010066:	f3bf 8f4f 	dsb	sy
 801006a:	60fb      	str	r3, [r7, #12]
}
 801006c:	bf00      	nop
 801006e:	e7fe      	b.n	801006e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010074:	683a      	ldr	r2, [r7, #0]
 8010076:	429a      	cmp	r2, r3
 8010078:	d902      	bls.n	8010080 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	61fb      	str	r3, [r7, #28]
 801007e:	e002      	b.n	8010086 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010080:	69bb      	ldr	r3, [r7, #24]
 8010082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010084:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801008a:	69fa      	ldr	r2, [r7, #28]
 801008c:	429a      	cmp	r2, r3
 801008e:	d068      	beq.n	8010162 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010090:	69bb      	ldr	r3, [r7, #24]
 8010092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010094:	697a      	ldr	r2, [r7, #20]
 8010096:	429a      	cmp	r2, r3
 8010098:	d163      	bne.n	8010162 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801009a:	4b34      	ldr	r3, [pc, #208]	; (801016c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	69ba      	ldr	r2, [r7, #24]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d10a      	bne.n	80100ba <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80100a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	60bb      	str	r3, [r7, #8]
}
 80100b6:	bf00      	nop
 80100b8:	e7fe      	b.n	80100b8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100be:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80100c0:	69bb      	ldr	r3, [r7, #24]
 80100c2:	69fa      	ldr	r2, [r7, #28]
 80100c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	699b      	ldr	r3, [r3, #24]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	db04      	blt.n	80100d8 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	f1c3 0207 	rsb	r2, r3, #7
 80100d4:	69bb      	ldr	r3, [r7, #24]
 80100d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	6959      	ldr	r1, [r3, #20]
 80100dc:	693a      	ldr	r2, [r7, #16]
 80100de:	4613      	mov	r3, r2
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	4413      	add	r3, r2
 80100e4:	009b      	lsls	r3, r3, #2
 80100e6:	4a22      	ldr	r2, [pc, #136]	; (8010170 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80100e8:	4413      	add	r3, r2
 80100ea:	4299      	cmp	r1, r3
 80100ec:	d101      	bne.n	80100f2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80100ee:	2301      	movs	r3, #1
 80100f0:	e000      	b.n	80100f4 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80100f2:	2300      	movs	r3, #0
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d034      	beq.n	8010162 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100f8:	69bb      	ldr	r3, [r7, #24]
 80100fa:	3304      	adds	r3, #4
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fe f915 	bl	800e32c <uxListRemove>
 8010102:	4603      	mov	r3, r0
 8010104:	2b00      	cmp	r3, #0
 8010106:	d115      	bne.n	8010134 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801010c:	4918      	ldr	r1, [pc, #96]	; (8010170 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801010e:	4613      	mov	r3, r2
 8010110:	009b      	lsls	r3, r3, #2
 8010112:	4413      	add	r3, r2
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	440b      	add	r3, r1
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d10a      	bne.n	8010134 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010122:	2201      	movs	r2, #1
 8010124:	fa02 f303 	lsl.w	r3, r2, r3
 8010128:	43da      	mvns	r2, r3
 801012a:	4b12      	ldr	r3, [pc, #72]	; (8010174 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	4013      	ands	r3, r2
 8010130:	4a10      	ldr	r2, [pc, #64]	; (8010174 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8010132:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010134:	69bb      	ldr	r3, [r7, #24]
 8010136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010138:	2201      	movs	r2, #1
 801013a:	409a      	lsls	r2, r3
 801013c:	4b0d      	ldr	r3, [pc, #52]	; (8010174 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4313      	orrs	r3, r2
 8010142:	4a0c      	ldr	r2, [pc, #48]	; (8010174 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8010144:	6013      	str	r3, [r2, #0]
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801014a:	4613      	mov	r3, r2
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	4413      	add	r3, r2
 8010150:	009b      	lsls	r3, r3, #2
 8010152:	4a07      	ldr	r2, [pc, #28]	; (8010170 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010154:	441a      	add	r2, r3
 8010156:	69bb      	ldr	r3, [r7, #24]
 8010158:	3304      	adds	r3, #4
 801015a:	4619      	mov	r1, r3
 801015c:	4610      	mov	r0, r2
 801015e:	f7fe f88a 	bl	800e276 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010162:	bf00      	nop
 8010164:	3720      	adds	r7, #32
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}
 801016a:	bf00      	nop
 801016c:	20000824 	.word	0x20000824
 8010170:	20000828 	.word	0x20000828
 8010174:	2000092c 	.word	0x2000092c

08010178 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8010178:	b480      	push	{r7}
 801017a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801017c:	4b07      	ldr	r3, [pc, #28]	; (801019c <pvTaskIncrementMutexHeldCount+0x24>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d004      	beq.n	801018e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010184:	4b05      	ldr	r3, [pc, #20]	; (801019c <pvTaskIncrementMutexHeldCount+0x24>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801018a:	3201      	adds	r2, #1
 801018c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801018e:	4b03      	ldr	r3, [pc, #12]	; (801019c <pvTaskIncrementMutexHeldCount+0x24>)
 8010190:	681b      	ldr	r3, [r3, #0]
	}
 8010192:	4618      	mov	r0, r3
 8010194:	46bd      	mov	sp, r7
 8010196:	bc80      	pop	{r7}
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop
 801019c:	20000824 	.word	0x20000824

080101a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b084      	sub	sp, #16
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80101aa:	4b29      	ldr	r3, [pc, #164]	; (8010250 <prvAddCurrentTaskToDelayedList+0xb0>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101b0:	4b28      	ldr	r3, [pc, #160]	; (8010254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	3304      	adds	r3, #4
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fe f8b8 	bl	800e32c <uxListRemove>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d10b      	bne.n	80101da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80101c2:	4b24      	ldr	r3, [pc, #144]	; (8010254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c8:	2201      	movs	r2, #1
 80101ca:	fa02 f303 	lsl.w	r3, r2, r3
 80101ce:	43da      	mvns	r2, r3
 80101d0:	4b21      	ldr	r3, [pc, #132]	; (8010258 <prvAddCurrentTaskToDelayedList+0xb8>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4013      	ands	r3, r2
 80101d6:	4a20      	ldr	r2, [pc, #128]	; (8010258 <prvAddCurrentTaskToDelayedList+0xb8>)
 80101d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101e0:	d10a      	bne.n	80101f8 <prvAddCurrentTaskToDelayedList+0x58>
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d007      	beq.n	80101f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80101e8:	4b1a      	ldr	r3, [pc, #104]	; (8010254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	3304      	adds	r3, #4
 80101ee:	4619      	mov	r1, r3
 80101f0:	481a      	ldr	r0, [pc, #104]	; (801025c <prvAddCurrentTaskToDelayedList+0xbc>)
 80101f2:	f7fe f840 	bl	800e276 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80101f6:	e026      	b.n	8010246 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80101f8:	68fa      	ldr	r2, [r7, #12]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	4413      	add	r3, r2
 80101fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010200:	4b14      	ldr	r3, [pc, #80]	; (8010254 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	68ba      	ldr	r2, [r7, #8]
 8010206:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010208:	68ba      	ldr	r2, [r7, #8]
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	429a      	cmp	r2, r3
 801020e:	d209      	bcs.n	8010224 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010210:	4b13      	ldr	r3, [pc, #76]	; (8010260 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010212:	681a      	ldr	r2, [r3, #0]
 8010214:	4b0f      	ldr	r3, [pc, #60]	; (8010254 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	3304      	adds	r3, #4
 801021a:	4619      	mov	r1, r3
 801021c:	4610      	mov	r0, r2
 801021e:	f7fe f84d 	bl	800e2bc <vListInsert>
}
 8010222:	e010      	b.n	8010246 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010224:	4b0f      	ldr	r3, [pc, #60]	; (8010264 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	4b0a      	ldr	r3, [pc, #40]	; (8010254 <prvAddCurrentTaskToDelayedList+0xb4>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	3304      	adds	r3, #4
 801022e:	4619      	mov	r1, r3
 8010230:	4610      	mov	r0, r2
 8010232:	f7fe f843 	bl	800e2bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010236:	4b0c      	ldr	r3, [pc, #48]	; (8010268 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	68ba      	ldr	r2, [r7, #8]
 801023c:	429a      	cmp	r2, r3
 801023e:	d202      	bcs.n	8010246 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010240:	4a09      	ldr	r2, [pc, #36]	; (8010268 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	6013      	str	r3, [r2, #0]
}
 8010246:	bf00      	nop
 8010248:	3710      	adds	r7, #16
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	20000928 	.word	0x20000928
 8010254:	20000824 	.word	0x20000824
 8010258:	2000092c 	.word	0x2000092c
 801025c:	20000910 	.word	0x20000910
 8010260:	200008e0 	.word	0x200008e0
 8010264:	200008dc 	.word	0x200008dc
 8010268:	20000944 	.word	0x20000944

0801026c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801026c:	b480      	push	{r7}
 801026e:	b085      	sub	sp, #20
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	3b04      	subs	r3, #4
 801027c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010284:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	3b04      	subs	r3, #4
 801028a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	f023 0201 	bic.w	r2, r3, #1
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	3b04      	subs	r3, #4
 801029a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801029c:	4a08      	ldr	r2, [pc, #32]	; (80102c0 <pxPortInitialiseStack+0x54>)
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	3b14      	subs	r3, #20
 80102a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80102a8:	687a      	ldr	r2, [r7, #4]
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	3b20      	subs	r3, #32
 80102b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80102b4:	68fb      	ldr	r3, [r7, #12]
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3714      	adds	r7, #20
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bc80      	pop	{r7}
 80102be:	4770      	bx	lr
 80102c0:	080102c5 	.word	0x080102c5

080102c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80102c4:	b480      	push	{r7}
 80102c6:	b085      	sub	sp, #20
 80102c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80102ca:	2300      	movs	r3, #0
 80102cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80102ce:	4b12      	ldr	r3, [pc, #72]	; (8010318 <prvTaskExitError+0x54>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d6:	d00a      	beq.n	80102ee <prvTaskExitError+0x2a>
	__asm volatile
 80102d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102dc:	f383 8811 	msr	BASEPRI, r3
 80102e0:	f3bf 8f6f 	isb	sy
 80102e4:	f3bf 8f4f 	dsb	sy
 80102e8:	60fb      	str	r3, [r7, #12]
}
 80102ea:	bf00      	nop
 80102ec:	e7fe      	b.n	80102ec <prvTaskExitError+0x28>
	__asm volatile
 80102ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f2:	f383 8811 	msr	BASEPRI, r3
 80102f6:	f3bf 8f6f 	isb	sy
 80102fa:	f3bf 8f4f 	dsb	sy
 80102fe:	60bb      	str	r3, [r7, #8]
}
 8010300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010302:	bf00      	nop
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d0fc      	beq.n	8010304 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801030a:	bf00      	nop
 801030c:	bf00      	nop
 801030e:	3714      	adds	r7, #20
 8010310:	46bd      	mov	sp, r7
 8010312:	bc80      	pop	{r7}
 8010314:	4770      	bx	lr
 8010316:	bf00      	nop
 8010318:	20000050 	.word	0x20000050
 801031c:	00000000 	.word	0x00000000

08010320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010320:	4b07      	ldr	r3, [pc, #28]	; (8010340 <pxCurrentTCBConst2>)
 8010322:	6819      	ldr	r1, [r3, #0]
 8010324:	6808      	ldr	r0, [r1, #0]
 8010326:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801032a:	f380 8809 	msr	PSP, r0
 801032e:	f3bf 8f6f 	isb	sy
 8010332:	f04f 0000 	mov.w	r0, #0
 8010336:	f380 8811 	msr	BASEPRI, r0
 801033a:	f04e 0e0d 	orr.w	lr, lr, #13
 801033e:	4770      	bx	lr

08010340 <pxCurrentTCBConst2>:
 8010340:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010344:	bf00      	nop
 8010346:	bf00      	nop

08010348 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8010348:	4806      	ldr	r0, [pc, #24]	; (8010364 <prvPortStartFirstTask+0x1c>)
 801034a:	6800      	ldr	r0, [r0, #0]
 801034c:	6800      	ldr	r0, [r0, #0]
 801034e:	f380 8808 	msr	MSP, r0
 8010352:	b662      	cpsie	i
 8010354:	b661      	cpsie	f
 8010356:	f3bf 8f4f 	dsb	sy
 801035a:	f3bf 8f6f 	isb	sy
 801035e:	df00      	svc	0
 8010360:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010362:	bf00      	nop
 8010364:	e000ed08 	.word	0xe000ed08

08010368 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b084      	sub	sp, #16
 801036c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801036e:	4b32      	ldr	r3, [pc, #200]	; (8010438 <xPortStartScheduler+0xd0>)
 8010370:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	b2db      	uxtb	r3, r3
 8010378:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	22ff      	movs	r2, #255	; 0xff
 801037e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	b2db      	uxtb	r3, r3
 8010386:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010388:	78fb      	ldrb	r3, [r7, #3]
 801038a:	b2db      	uxtb	r3, r3
 801038c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010390:	b2da      	uxtb	r2, r3
 8010392:	4b2a      	ldr	r3, [pc, #168]	; (801043c <xPortStartScheduler+0xd4>)
 8010394:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010396:	4b2a      	ldr	r3, [pc, #168]	; (8010440 <xPortStartScheduler+0xd8>)
 8010398:	2207      	movs	r2, #7
 801039a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801039c:	e009      	b.n	80103b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801039e:	4b28      	ldr	r3, [pc, #160]	; (8010440 <xPortStartScheduler+0xd8>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	3b01      	subs	r3, #1
 80103a4:	4a26      	ldr	r2, [pc, #152]	; (8010440 <xPortStartScheduler+0xd8>)
 80103a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80103a8:	78fb      	ldrb	r3, [r7, #3]
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	005b      	lsls	r3, r3, #1
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80103b2:	78fb      	ldrb	r3, [r7, #3]
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103ba:	2b80      	cmp	r3, #128	; 0x80
 80103bc:	d0ef      	beq.n	801039e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80103be:	4b20      	ldr	r3, [pc, #128]	; (8010440 <xPortStartScheduler+0xd8>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	f1c3 0307 	rsb	r3, r3, #7
 80103c6:	2b04      	cmp	r3, #4
 80103c8:	d00a      	beq.n	80103e0 <xPortStartScheduler+0x78>
	__asm volatile
 80103ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ce:	f383 8811 	msr	BASEPRI, r3
 80103d2:	f3bf 8f6f 	isb	sy
 80103d6:	f3bf 8f4f 	dsb	sy
 80103da:	60bb      	str	r3, [r7, #8]
}
 80103dc:	bf00      	nop
 80103de:	e7fe      	b.n	80103de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80103e0:	4b17      	ldr	r3, [pc, #92]	; (8010440 <xPortStartScheduler+0xd8>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	021b      	lsls	r3, r3, #8
 80103e6:	4a16      	ldr	r2, [pc, #88]	; (8010440 <xPortStartScheduler+0xd8>)
 80103e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80103ea:	4b15      	ldr	r3, [pc, #84]	; (8010440 <xPortStartScheduler+0xd8>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80103f2:	4a13      	ldr	r2, [pc, #76]	; (8010440 <xPortStartScheduler+0xd8>)
 80103f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	b2da      	uxtb	r2, r3
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80103fe:	4b11      	ldr	r3, [pc, #68]	; (8010444 <xPortStartScheduler+0xdc>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	4a10      	ldr	r2, [pc, #64]	; (8010444 <xPortStartScheduler+0xdc>)
 8010404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010408:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801040a:	4b0e      	ldr	r3, [pc, #56]	; (8010444 <xPortStartScheduler+0xdc>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	4a0d      	ldr	r2, [pc, #52]	; (8010444 <xPortStartScheduler+0xdc>)
 8010410:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010414:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010416:	f000 f8b9 	bl	801058c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801041a:	4b0b      	ldr	r3, [pc, #44]	; (8010448 <xPortStartScheduler+0xe0>)
 801041c:	2200      	movs	r2, #0
 801041e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010420:	f7ff ff92 	bl	8010348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010424:	f7ff fa94 	bl	800f950 <vTaskSwitchContext>
	prvTaskExitError();
 8010428:	f7ff ff4c 	bl	80102c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801042c:	2300      	movs	r3, #0
}
 801042e:	4618      	mov	r0, r3
 8010430:	3710      	adds	r7, #16
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
 8010436:	bf00      	nop
 8010438:	e000e400 	.word	0xe000e400
 801043c:	20000950 	.word	0x20000950
 8010440:	20000954 	.word	0x20000954
 8010444:	e000ed20 	.word	0xe000ed20
 8010448:	20000050 	.word	0x20000050

0801044c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801044c:	b480      	push	{r7}
 801044e:	b083      	sub	sp, #12
 8010450:	af00      	add	r7, sp, #0
	__asm volatile
 8010452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010456:	f383 8811 	msr	BASEPRI, r3
 801045a:	f3bf 8f6f 	isb	sy
 801045e:	f3bf 8f4f 	dsb	sy
 8010462:	607b      	str	r3, [r7, #4]
}
 8010464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010466:	4b0f      	ldr	r3, [pc, #60]	; (80104a4 <vPortEnterCritical+0x58>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	3301      	adds	r3, #1
 801046c:	4a0d      	ldr	r2, [pc, #52]	; (80104a4 <vPortEnterCritical+0x58>)
 801046e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010470:	4b0c      	ldr	r3, [pc, #48]	; (80104a4 <vPortEnterCritical+0x58>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2b01      	cmp	r3, #1
 8010476:	d10f      	bne.n	8010498 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010478:	4b0b      	ldr	r3, [pc, #44]	; (80104a8 <vPortEnterCritical+0x5c>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	b2db      	uxtb	r3, r3
 801047e:	2b00      	cmp	r3, #0
 8010480:	d00a      	beq.n	8010498 <vPortEnterCritical+0x4c>
	__asm volatile
 8010482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010486:	f383 8811 	msr	BASEPRI, r3
 801048a:	f3bf 8f6f 	isb	sy
 801048e:	f3bf 8f4f 	dsb	sy
 8010492:	603b      	str	r3, [r7, #0]
}
 8010494:	bf00      	nop
 8010496:	e7fe      	b.n	8010496 <vPortEnterCritical+0x4a>
	}
}
 8010498:	bf00      	nop
 801049a:	370c      	adds	r7, #12
 801049c:	46bd      	mov	sp, r7
 801049e:	bc80      	pop	{r7}
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop
 80104a4:	20000050 	.word	0x20000050
 80104a8:	e000ed04 	.word	0xe000ed04

080104ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80104b2:	4b11      	ldr	r3, [pc, #68]	; (80104f8 <vPortExitCritical+0x4c>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d10a      	bne.n	80104d0 <vPortExitCritical+0x24>
	__asm volatile
 80104ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104be:	f383 8811 	msr	BASEPRI, r3
 80104c2:	f3bf 8f6f 	isb	sy
 80104c6:	f3bf 8f4f 	dsb	sy
 80104ca:	607b      	str	r3, [r7, #4]
}
 80104cc:	bf00      	nop
 80104ce:	e7fe      	b.n	80104ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80104d0:	4b09      	ldr	r3, [pc, #36]	; (80104f8 <vPortExitCritical+0x4c>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	3b01      	subs	r3, #1
 80104d6:	4a08      	ldr	r2, [pc, #32]	; (80104f8 <vPortExitCritical+0x4c>)
 80104d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80104da:	4b07      	ldr	r3, [pc, #28]	; (80104f8 <vPortExitCritical+0x4c>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d105      	bne.n	80104ee <vPortExitCritical+0x42>
 80104e2:	2300      	movs	r3, #0
 80104e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	f383 8811 	msr	BASEPRI, r3
}
 80104ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80104ee:	bf00      	nop
 80104f0:	370c      	adds	r7, #12
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bc80      	pop	{r7}
 80104f6:	4770      	bx	lr
 80104f8:	20000050 	.word	0x20000050
 80104fc:	00000000 	.word	0x00000000

08010500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010500:	f3ef 8009 	mrs	r0, PSP
 8010504:	f3bf 8f6f 	isb	sy
 8010508:	4b0d      	ldr	r3, [pc, #52]	; (8010540 <pxCurrentTCBConst>)
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010510:	6010      	str	r0, [r2, #0]
 8010512:	e92d 4008 	stmdb	sp!, {r3, lr}
 8010516:	f04f 0050 	mov.w	r0, #80	; 0x50
 801051a:	f380 8811 	msr	BASEPRI, r0
 801051e:	f7ff fa17 	bl	800f950 <vTaskSwitchContext>
 8010522:	f04f 0000 	mov.w	r0, #0
 8010526:	f380 8811 	msr	BASEPRI, r0
 801052a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801052e:	6819      	ldr	r1, [r3, #0]
 8010530:	6808      	ldr	r0, [r1, #0]
 8010532:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010536:	f380 8809 	msr	PSP, r0
 801053a:	f3bf 8f6f 	isb	sy
 801053e:	4770      	bx	lr

08010540 <pxCurrentTCBConst>:
 8010540:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010544:	bf00      	nop
 8010546:	bf00      	nop

08010548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
	__asm volatile
 801054e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010552:	f383 8811 	msr	BASEPRI, r3
 8010556:	f3bf 8f6f 	isb	sy
 801055a:	f3bf 8f4f 	dsb	sy
 801055e:	607b      	str	r3, [r7, #4]
}
 8010560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010562:	f7ff f937 	bl	800f7d4 <xTaskIncrementTick>
 8010566:	4603      	mov	r3, r0
 8010568:	2b00      	cmp	r3, #0
 801056a:	d003      	beq.n	8010574 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801056c:	4b06      	ldr	r3, [pc, #24]	; (8010588 <SysTick_Handler+0x40>)
 801056e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010572:	601a      	str	r2, [r3, #0]
 8010574:	2300      	movs	r3, #0
 8010576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	f383 8811 	msr	BASEPRI, r3
}
 801057e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010580:	bf00      	nop
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	e000ed04 	.word	0xe000ed04

0801058c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801058c:	b480      	push	{r7}
 801058e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010590:	4b0a      	ldr	r3, [pc, #40]	; (80105bc <vPortSetupTimerInterrupt+0x30>)
 8010592:	2200      	movs	r2, #0
 8010594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010596:	4b0a      	ldr	r3, [pc, #40]	; (80105c0 <vPortSetupTimerInterrupt+0x34>)
 8010598:	2200      	movs	r2, #0
 801059a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801059c:	4b09      	ldr	r3, [pc, #36]	; (80105c4 <vPortSetupTimerInterrupt+0x38>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4a09      	ldr	r2, [pc, #36]	; (80105c8 <vPortSetupTimerInterrupt+0x3c>)
 80105a2:	fba2 2303 	umull	r2, r3, r2, r3
 80105a6:	099b      	lsrs	r3, r3, #6
 80105a8:	4a08      	ldr	r2, [pc, #32]	; (80105cc <vPortSetupTimerInterrupt+0x40>)
 80105aa:	3b01      	subs	r3, #1
 80105ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80105ae:	4b03      	ldr	r3, [pc, #12]	; (80105bc <vPortSetupTimerInterrupt+0x30>)
 80105b0:	2207      	movs	r2, #7
 80105b2:	601a      	str	r2, [r3, #0]
}
 80105b4:	bf00      	nop
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bc80      	pop	{r7}
 80105ba:	4770      	bx	lr
 80105bc:	e000e010 	.word	0xe000e010
 80105c0:	e000e018 	.word	0xe000e018
 80105c4:	20000024 	.word	0x20000024
 80105c8:	10624dd3 	.word	0x10624dd3
 80105cc:	e000e014 	.word	0xe000e014

080105d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80105d0:	b480      	push	{r7}
 80105d2:	b085      	sub	sp, #20
 80105d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80105d6:	f3ef 8305 	mrs	r3, IPSR
 80105da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	2b0f      	cmp	r3, #15
 80105e0:	d914      	bls.n	801060c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80105e2:	4a16      	ldr	r2, [pc, #88]	; (801063c <vPortValidateInterruptPriority+0x6c>)
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	4413      	add	r3, r2
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80105ec:	4b14      	ldr	r3, [pc, #80]	; (8010640 <vPortValidateInterruptPriority+0x70>)
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	7afa      	ldrb	r2, [r7, #11]
 80105f2:	429a      	cmp	r2, r3
 80105f4:	d20a      	bcs.n	801060c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80105f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fa:	f383 8811 	msr	BASEPRI, r3
 80105fe:	f3bf 8f6f 	isb	sy
 8010602:	f3bf 8f4f 	dsb	sy
 8010606:	607b      	str	r3, [r7, #4]
}
 8010608:	bf00      	nop
 801060a:	e7fe      	b.n	801060a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801060c:	4b0d      	ldr	r3, [pc, #52]	; (8010644 <vPortValidateInterruptPriority+0x74>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010614:	4b0c      	ldr	r3, [pc, #48]	; (8010648 <vPortValidateInterruptPriority+0x78>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	429a      	cmp	r2, r3
 801061a:	d90a      	bls.n	8010632 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010620:	f383 8811 	msr	BASEPRI, r3
 8010624:	f3bf 8f6f 	isb	sy
 8010628:	f3bf 8f4f 	dsb	sy
 801062c:	603b      	str	r3, [r7, #0]
}
 801062e:	bf00      	nop
 8010630:	e7fe      	b.n	8010630 <vPortValidateInterruptPriority+0x60>
	}
 8010632:	bf00      	nop
 8010634:	3714      	adds	r7, #20
 8010636:	46bd      	mov	sp, r7
 8010638:	bc80      	pop	{r7}
 801063a:	4770      	bx	lr
 801063c:	e000e3f0 	.word	0xe000e3f0
 8010640:	20000950 	.word	0x20000950
 8010644:	e000ed0c 	.word	0xe000ed0c
 8010648:	20000954 	.word	0x20000954

0801064c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b08a      	sub	sp, #40	; 0x28
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010654:	2300      	movs	r3, #0
 8010656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010658:	f7ff f812 	bl	800f680 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801065c:	4b58      	ldr	r3, [pc, #352]	; (80107c0 <pvPortMalloc+0x174>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d101      	bne.n	8010668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010664:	f000 f910 	bl	8010888 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010668:	4b56      	ldr	r3, [pc, #344]	; (80107c4 <pvPortMalloc+0x178>)
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	4013      	ands	r3, r2
 8010670:	2b00      	cmp	r3, #0
 8010672:	f040 808e 	bne.w	8010792 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d01d      	beq.n	80106b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801067c:	2208      	movs	r2, #8
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	4413      	add	r3, r2
 8010682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f003 0307 	and.w	r3, r3, #7
 801068a:	2b00      	cmp	r3, #0
 801068c:	d014      	beq.n	80106b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f023 0307 	bic.w	r3, r3, #7
 8010694:	3308      	adds	r3, #8
 8010696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f003 0307 	and.w	r3, r3, #7
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d00a      	beq.n	80106b8 <pvPortMalloc+0x6c>
	__asm volatile
 80106a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a6:	f383 8811 	msr	BASEPRI, r3
 80106aa:	f3bf 8f6f 	isb	sy
 80106ae:	f3bf 8f4f 	dsb	sy
 80106b2:	617b      	str	r3, [r7, #20]
}
 80106b4:	bf00      	nop
 80106b6:	e7fe      	b.n	80106b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d069      	beq.n	8010792 <pvPortMalloc+0x146>
 80106be:	4b42      	ldr	r3, [pc, #264]	; (80107c8 <pvPortMalloc+0x17c>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d864      	bhi.n	8010792 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80106c8:	4b40      	ldr	r3, [pc, #256]	; (80107cc <pvPortMalloc+0x180>)
 80106ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80106cc:	4b3f      	ldr	r3, [pc, #252]	; (80107cc <pvPortMalloc+0x180>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80106d2:	e004      	b.n	80106de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80106d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80106d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80106de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e0:	685b      	ldr	r3, [r3, #4]
 80106e2:	687a      	ldr	r2, [r7, #4]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d903      	bls.n	80106f0 <pvPortMalloc+0xa4>
 80106e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1f1      	bne.n	80106d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80106f0:	4b33      	ldr	r3, [pc, #204]	; (80107c0 <pvPortMalloc+0x174>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d04b      	beq.n	8010792 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80106fa:	6a3b      	ldr	r3, [r7, #32]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	2208      	movs	r2, #8
 8010700:	4413      	add	r3, r2
 8010702:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	6a3b      	ldr	r3, [r7, #32]
 801070a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070e:	685a      	ldr	r2, [r3, #4]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	1ad2      	subs	r2, r2, r3
 8010714:	2308      	movs	r3, #8
 8010716:	005b      	lsls	r3, r3, #1
 8010718:	429a      	cmp	r2, r3
 801071a:	d91f      	bls.n	801075c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801071c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	4413      	add	r3, r2
 8010722:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010724:	69bb      	ldr	r3, [r7, #24]
 8010726:	f003 0307 	and.w	r3, r3, #7
 801072a:	2b00      	cmp	r3, #0
 801072c:	d00a      	beq.n	8010744 <pvPortMalloc+0xf8>
	__asm volatile
 801072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010732:	f383 8811 	msr	BASEPRI, r3
 8010736:	f3bf 8f6f 	isb	sy
 801073a:	f3bf 8f4f 	dsb	sy
 801073e:	613b      	str	r3, [r7, #16]
}
 8010740:	bf00      	nop
 8010742:	e7fe      	b.n	8010742 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010746:	685a      	ldr	r2, [r3, #4]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	1ad2      	subs	r2, r2, r3
 801074c:	69bb      	ldr	r3, [r7, #24]
 801074e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010756:	69b8      	ldr	r0, [r7, #24]
 8010758:	f000 f8f8 	bl	801094c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801075c:	4b1a      	ldr	r3, [pc, #104]	; (80107c8 <pvPortMalloc+0x17c>)
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010762:	685b      	ldr	r3, [r3, #4]
 8010764:	1ad3      	subs	r3, r2, r3
 8010766:	4a18      	ldr	r2, [pc, #96]	; (80107c8 <pvPortMalloc+0x17c>)
 8010768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801076a:	4b17      	ldr	r3, [pc, #92]	; (80107c8 <pvPortMalloc+0x17c>)
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	4b18      	ldr	r3, [pc, #96]	; (80107d0 <pvPortMalloc+0x184>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	429a      	cmp	r2, r3
 8010774:	d203      	bcs.n	801077e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010776:	4b14      	ldr	r3, [pc, #80]	; (80107c8 <pvPortMalloc+0x17c>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	4a15      	ldr	r2, [pc, #84]	; (80107d0 <pvPortMalloc+0x184>)
 801077c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010780:	685a      	ldr	r2, [r3, #4]
 8010782:	4b10      	ldr	r3, [pc, #64]	; (80107c4 <pvPortMalloc+0x178>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	431a      	orrs	r2, r3
 8010788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078e:	2200      	movs	r2, #0
 8010790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010792:	f7fe ff83 	bl	800f69c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	f003 0307 	and.w	r3, r3, #7
 801079c:	2b00      	cmp	r3, #0
 801079e:	d00a      	beq.n	80107b6 <pvPortMalloc+0x16a>
	__asm volatile
 80107a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	60fb      	str	r3, [r7, #12]
}
 80107b2:	bf00      	nop
 80107b4:	e7fe      	b.n	80107b4 <pvPortMalloc+0x168>
	return pvReturn;
 80107b6:	69fb      	ldr	r3, [r7, #28]
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3728      	adds	r7, #40	; 0x28
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	20004560 	.word	0x20004560
 80107c4:	2000456c 	.word	0x2000456c
 80107c8:	20004564 	.word	0x20004564
 80107cc:	20004558 	.word	0x20004558
 80107d0:	20004568 	.word	0x20004568

080107d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b086      	sub	sp, #24
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d048      	beq.n	8010878 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80107e6:	2308      	movs	r3, #8
 80107e8:	425b      	negs	r3, r3
 80107ea:	697a      	ldr	r2, [r7, #20]
 80107ec:	4413      	add	r3, r2
 80107ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	685a      	ldr	r2, [r3, #4]
 80107f8:	4b21      	ldr	r3, [pc, #132]	; (8010880 <vPortFree+0xac>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	4013      	ands	r3, r2
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d10a      	bne.n	8010818 <vPortFree+0x44>
	__asm volatile
 8010802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010806:	f383 8811 	msr	BASEPRI, r3
 801080a:	f3bf 8f6f 	isb	sy
 801080e:	f3bf 8f4f 	dsb	sy
 8010812:	60fb      	str	r3, [r7, #12]
}
 8010814:	bf00      	nop
 8010816:	e7fe      	b.n	8010816 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d00a      	beq.n	8010836 <vPortFree+0x62>
	__asm volatile
 8010820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010824:	f383 8811 	msr	BASEPRI, r3
 8010828:	f3bf 8f6f 	isb	sy
 801082c:	f3bf 8f4f 	dsb	sy
 8010830:	60bb      	str	r3, [r7, #8]
}
 8010832:	bf00      	nop
 8010834:	e7fe      	b.n	8010834 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	685a      	ldr	r2, [r3, #4]
 801083a:	4b11      	ldr	r3, [pc, #68]	; (8010880 <vPortFree+0xac>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	4013      	ands	r3, r2
 8010840:	2b00      	cmp	r3, #0
 8010842:	d019      	beq.n	8010878 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d115      	bne.n	8010878 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	685a      	ldr	r2, [r3, #4]
 8010850:	4b0b      	ldr	r3, [pc, #44]	; (8010880 <vPortFree+0xac>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	43db      	mvns	r3, r3
 8010856:	401a      	ands	r2, r3
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801085c:	f7fe ff10 	bl	800f680 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	685a      	ldr	r2, [r3, #4]
 8010864:	4b07      	ldr	r3, [pc, #28]	; (8010884 <vPortFree+0xb0>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4413      	add	r3, r2
 801086a:	4a06      	ldr	r2, [pc, #24]	; (8010884 <vPortFree+0xb0>)
 801086c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801086e:	6938      	ldr	r0, [r7, #16]
 8010870:	f000 f86c 	bl	801094c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010874:	f7fe ff12 	bl	800f69c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010878:	bf00      	nop
 801087a:	3718      	adds	r7, #24
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	2000456c 	.word	0x2000456c
 8010884:	20004564 	.word	0x20004564

08010888 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010888:	b480      	push	{r7}
 801088a:	b085      	sub	sp, #20
 801088c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801088e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010892:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010894:	4b27      	ldr	r3, [pc, #156]	; (8010934 <prvHeapInit+0xac>)
 8010896:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	f003 0307 	and.w	r3, r3, #7
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d00c      	beq.n	80108bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	3307      	adds	r3, #7
 80108a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f023 0307 	bic.w	r3, r3, #7
 80108ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80108b0:	68ba      	ldr	r2, [r7, #8]
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	1ad3      	subs	r3, r2, r3
 80108b6:	4a1f      	ldr	r2, [pc, #124]	; (8010934 <prvHeapInit+0xac>)
 80108b8:	4413      	add	r3, r2
 80108ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80108c0:	4a1d      	ldr	r2, [pc, #116]	; (8010938 <prvHeapInit+0xb0>)
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80108c6:	4b1c      	ldr	r3, [pc, #112]	; (8010938 <prvHeapInit+0xb0>)
 80108c8:	2200      	movs	r2, #0
 80108ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	68ba      	ldr	r2, [r7, #8]
 80108d0:	4413      	add	r3, r2
 80108d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80108d4:	2208      	movs	r2, #8
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	1a9b      	subs	r3, r3, r2
 80108da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	f023 0307 	bic.w	r3, r3, #7
 80108e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	4a15      	ldr	r2, [pc, #84]	; (801093c <prvHeapInit+0xb4>)
 80108e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80108ea:	4b14      	ldr	r3, [pc, #80]	; (801093c <prvHeapInit+0xb4>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	2200      	movs	r2, #0
 80108f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80108f2:	4b12      	ldr	r3, [pc, #72]	; (801093c <prvHeapInit+0xb4>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	2200      	movs	r2, #0
 80108f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	68fa      	ldr	r2, [r7, #12]
 8010902:	1ad2      	subs	r2, r2, r3
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010908:	4b0c      	ldr	r3, [pc, #48]	; (801093c <prvHeapInit+0xb4>)
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	4a0a      	ldr	r2, [pc, #40]	; (8010940 <prvHeapInit+0xb8>)
 8010916:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	685b      	ldr	r3, [r3, #4]
 801091c:	4a09      	ldr	r2, [pc, #36]	; (8010944 <prvHeapInit+0xbc>)
 801091e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010920:	4b09      	ldr	r3, [pc, #36]	; (8010948 <prvHeapInit+0xc0>)
 8010922:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010926:	601a      	str	r2, [r3, #0]
}
 8010928:	bf00      	nop
 801092a:	3714      	adds	r7, #20
 801092c:	46bd      	mov	sp, r7
 801092e:	bc80      	pop	{r7}
 8010930:	4770      	bx	lr
 8010932:	bf00      	nop
 8010934:	20000958 	.word	0x20000958
 8010938:	20004558 	.word	0x20004558
 801093c:	20004560 	.word	0x20004560
 8010940:	20004568 	.word	0x20004568
 8010944:	20004564 	.word	0x20004564
 8010948:	2000456c 	.word	0x2000456c

0801094c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801094c:	b480      	push	{r7}
 801094e:	b085      	sub	sp, #20
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010954:	4b27      	ldr	r3, [pc, #156]	; (80109f4 <prvInsertBlockIntoFreeList+0xa8>)
 8010956:	60fb      	str	r3, [r7, #12]
 8010958:	e002      	b.n	8010960 <prvInsertBlockIntoFreeList+0x14>
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	60fb      	str	r3, [r7, #12]
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	429a      	cmp	r2, r3
 8010968:	d8f7      	bhi.n	801095a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	68ba      	ldr	r2, [r7, #8]
 8010974:	4413      	add	r3, r2
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	429a      	cmp	r2, r3
 801097a:	d108      	bne.n	801098e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	685a      	ldr	r2, [r3, #4]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	441a      	add	r2, r3
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	68ba      	ldr	r2, [r7, #8]
 8010998:	441a      	add	r2, r3
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	429a      	cmp	r2, r3
 80109a0:	d118      	bne.n	80109d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681a      	ldr	r2, [r3, #0]
 80109a6:	4b14      	ldr	r3, [pc, #80]	; (80109f8 <prvInsertBlockIntoFreeList+0xac>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d00d      	beq.n	80109ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	685a      	ldr	r2, [r3, #4]
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	685b      	ldr	r3, [r3, #4]
 80109b8:	441a      	add	r2, r3
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	681a      	ldr	r2, [r3, #0]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	601a      	str	r2, [r3, #0]
 80109c8:	e008      	b.n	80109dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80109ca:	4b0b      	ldr	r3, [pc, #44]	; (80109f8 <prvInsertBlockIntoFreeList+0xac>)
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	601a      	str	r2, [r3, #0]
 80109d2:	e003      	b.n	80109dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681a      	ldr	r2, [r3, #0]
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80109dc:	68fa      	ldr	r2, [r7, #12]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d002      	beq.n	80109ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109ea:	bf00      	nop
 80109ec:	3714      	adds	r7, #20
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bc80      	pop	{r7}
 80109f2:	4770      	bx	lr
 80109f4:	20004558 	.word	0x20004558
 80109f8:	20004560 	.word	0x20004560

080109fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010a00:	2201      	movs	r2, #1
 8010a02:	490e      	ldr	r1, [pc, #56]	; (8010a3c <MX_USB_HOST_Init+0x40>)
 8010a04:	480e      	ldr	r0, [pc, #56]	; (8010a40 <MX_USB_HOST_Init+0x44>)
 8010a06:	f7f9 fc9f 	bl	800a348 <USBH_Init>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d001      	beq.n	8010a14 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010a10:	f7f1 fcdc 	bl	80023cc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8010a14:	490b      	ldr	r1, [pc, #44]	; (8010a44 <MX_USB_HOST_Init+0x48>)
 8010a16:	480a      	ldr	r0, [pc, #40]	; (8010a40 <MX_USB_HOST_Init+0x44>)
 8010a18:	f7f9 fd42 	bl	800a4a0 <USBH_RegisterClass>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d001      	beq.n	8010a26 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010a22:	f7f1 fcd3 	bl	80023cc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010a26:	4806      	ldr	r0, [pc, #24]	; (8010a40 <MX_USB_HOST_Init+0x44>)
 8010a28:	f7f9 fdc4 	bl	800a5b4 <USBH_Start>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d001      	beq.n	8010a36 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010a32:	f7f1 fccb 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010a36:	bf00      	nop
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	08010a49 	.word	0x08010a49
 8010a40:	2000aed4 	.word	0x2000aed4
 8010a44:	20000030 	.word	0x20000030

08010a48 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	460b      	mov	r3, r1
 8010a52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010a54:	78fb      	ldrb	r3, [r7, #3]
 8010a56:	3b01      	subs	r3, #1
 8010a58:	2b04      	cmp	r3, #4
 8010a5a:	d828      	bhi.n	8010aae <USBH_UserProcess+0x66>
 8010a5c:	a201      	add	r2, pc, #4	; (adr r2, 8010a64 <USBH_UserProcess+0x1c>)
 8010a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a62:	bf00      	nop
 8010a64:	08010aaf 	.word	0x08010aaf
 8010a68:	08010a8b 	.word	0x08010a8b
 8010a6c:	08010aaf 	.word	0x08010aaf
 8010a70:	08010aa7 	.word	0x08010aa7
 8010a74:	08010a79 	.word	0x08010a79
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010a78:	4b0f      	ldr	r3, [pc, #60]	; (8010ab8 <USBH_UserProcess+0x70>)
 8010a7a:	2203      	movs	r2, #3
 8010a7c:	701a      	strb	r2, [r3, #0]
  usb_good = 0;
 8010a7e:	4b0f      	ldr	r3, [pc, #60]	; (8010abc <USBH_UserProcess+0x74>)
 8010a80:	2200      	movs	r2, #0
 8010a82:	601a      	str	r2, [r3, #0]
  Unmount_USB();
 8010a84:	f7f0 fd00 	bl	8001488 <Unmount_USB>
  break;
 8010a88:	e012      	b.n	8010ab0 <USBH_UserProcess+0x68>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010a8a:	4b0b      	ldr	r3, [pc, #44]	; (8010ab8 <USBH_UserProcess+0x70>)
 8010a8c:	2202      	movs	r2, #2
 8010a8e:	701a      	strb	r2, [r3, #0]
	Mount_USB();
 8010a90:	f7f0 fce6 	bl	8001460 <Mount_USB>
	Check_USB_Details();
 8010a94:	f7f0 fd80 	bl	8001598 <Check_USB_Details>
	Scan_USB("/");
 8010a98:	4809      	ldr	r0, [pc, #36]	; (8010ac0 <USBH_UserProcess+0x78>)
 8010a9a:	f7f0 fd07 	bl	80014ac <Scan_USB>

  usb_good = 1;
 8010a9e:	4b07      	ldr	r3, [pc, #28]	; (8010abc <USBH_UserProcess+0x74>)
 8010aa0:	2201      	movs	r2, #1
 8010aa2:	601a      	str	r2, [r3, #0]

  break;
 8010aa4:	e004      	b.n	8010ab0 <USBH_UserProcess+0x68>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010aa6:	4b04      	ldr	r3, [pc, #16]	; (8010ab8 <USBH_UserProcess+0x70>)
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	701a      	strb	r2, [r3, #0]
  break;
 8010aac:	e000      	b.n	8010ab0 <USBH_UserProcess+0x68>

  default:
  break;
 8010aae:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010ab0:	bf00      	nop
 8010ab2:	3708      	adds	r7, #8
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	20004570 	.word	0x20004570
 8010abc:	20004574 	.word	0x20004574
 8010ac0:	08015afc 	.word	0x08015afc

08010ac4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b08a      	sub	sp, #40	; 0x28
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010acc:	f107 0314 	add.w	r3, r7, #20
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	601a      	str	r2, [r3, #0]
 8010ad4:	605a      	str	r2, [r3, #4]
 8010ad6:	609a      	str	r2, [r3, #8]
 8010ad8:	60da      	str	r2, [r3, #12]
 8010ada:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010ae4:	d147      	bne.n	8010b76 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	613b      	str	r3, [r7, #16]
 8010aea:	4b25      	ldr	r3, [pc, #148]	; (8010b80 <HAL_HCD_MspInit+0xbc>)
 8010aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aee:	4a24      	ldr	r2, [pc, #144]	; (8010b80 <HAL_HCD_MspInit+0xbc>)
 8010af0:	f043 0301 	orr.w	r3, r3, #1
 8010af4:	6313      	str	r3, [r2, #48]	; 0x30
 8010af6:	4b22      	ldr	r3, [pc, #136]	; (8010b80 <HAL_HCD_MspInit+0xbc>)
 8010af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010afa:	f003 0301 	and.w	r3, r3, #1
 8010afe:	613b      	str	r3, [r7, #16]
 8010b00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010b10:	f107 0314 	add.w	r3, r7, #20
 8010b14:	4619      	mov	r1, r3
 8010b16:	481b      	ldr	r0, [pc, #108]	; (8010b84 <HAL_HCD_MspInit+0xc0>)
 8010b18:	f7f2 fef2 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010b1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b22:	2302      	movs	r3, #2
 8010b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b26:	2300      	movs	r3, #0
 8010b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010b2a:	2303      	movs	r3, #3
 8010b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010b2e:	230a      	movs	r3, #10
 8010b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010b32:	f107 0314 	add.w	r3, r7, #20
 8010b36:	4619      	mov	r1, r3
 8010b38:	4812      	ldr	r0, [pc, #72]	; (8010b84 <HAL_HCD_MspInit+0xc0>)
 8010b3a:	f7f2 fee1 	bl	8003900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010b3e:	4b10      	ldr	r3, [pc, #64]	; (8010b80 <HAL_HCD_MspInit+0xbc>)
 8010b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b42:	4a0f      	ldr	r2, [pc, #60]	; (8010b80 <HAL_HCD_MspInit+0xbc>)
 8010b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b48:	6353      	str	r3, [r2, #52]	; 0x34
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	60fb      	str	r3, [r7, #12]
 8010b4e:	4b0c      	ldr	r3, [pc, #48]	; (8010b80 <HAL_HCD_MspInit+0xbc>)
 8010b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b52:	4a0b      	ldr	r2, [pc, #44]	; (8010b80 <HAL_HCD_MspInit+0xbc>)
 8010b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010b58:	6453      	str	r3, [r2, #68]	; 0x44
 8010b5a:	4b09      	ldr	r3, [pc, #36]	; (8010b80 <HAL_HCD_MspInit+0xbc>)
 8010b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b62:	60fb      	str	r3, [r7, #12]
 8010b64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010b66:	2200      	movs	r2, #0
 8010b68:	2105      	movs	r1, #5
 8010b6a:	2043      	movs	r0, #67	; 0x43
 8010b6c:	f7f2 fe9d 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010b70:	2043      	movs	r0, #67	; 0x43
 8010b72:	f7f2 feb6 	bl	80038e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010b76:	bf00      	nop
 8010b78:	3728      	adds	r7, #40	; 0x28
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	40023800 	.word	0x40023800
 8010b84:	40020000 	.word	0x40020000

08010b88 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fa f88c 	bl	800acb4 <USBH_LL_IncTimer>
}
 8010b9c:	bf00      	nop
 8010b9e:	3708      	adds	r7, #8
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f7fa f8cf 	bl	800ad56 <USBH_LL_Connect>
}
 8010bb8:	bf00      	nop
 8010bba:	3708      	adds	r7, #8
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fa f8e4 	bl	800ad9c <USBH_LL_Disconnect>
}
 8010bd4:	bf00      	nop
 8010bd6:	3708      	adds	r7, #8
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	460b      	mov	r3, r1
 8010be6:	70fb      	strb	r3, [r7, #3]
 8010be8:	4613      	mov	r3, r2
 8010bea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7fa f919 	bl	800ae2a <USBH_LL_NotifyURBChange>
#endif
}
 8010bf8:	bf00      	nop
 8010bfa:	3708      	adds	r7, #8
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fa f87a 	bl	800ad08 <USBH_LL_PortEnabled>
}
 8010c14:	bf00      	nop
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fa f886 	bl	800ad3c <USBH_LL_PortDisabled>
}
 8010c30:	bf00      	nop
 8010c32:	3708      	adds	r7, #8
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8010c46:	2b01      	cmp	r3, #1
 8010c48:	d12a      	bne.n	8010ca0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010c4a:	4a18      	ldr	r2, [pc, #96]	; (8010cac <USBH_LL_Init+0x74>)
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	4a15      	ldr	r2, [pc, #84]	; (8010cac <USBH_LL_Init+0x74>)
 8010c56:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010c5a:	4b14      	ldr	r3, [pc, #80]	; (8010cac <USBH_LL_Init+0x74>)
 8010c5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010c60:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010c62:	4b12      	ldr	r3, [pc, #72]	; (8010cac <USBH_LL_Init+0x74>)
 8010c64:	2208      	movs	r2, #8
 8010c66:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010c68:	4b10      	ldr	r3, [pc, #64]	; (8010cac <USBH_LL_Init+0x74>)
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010c6e:	4b0f      	ldr	r3, [pc, #60]	; (8010cac <USBH_LL_Init+0x74>)
 8010c70:	2200      	movs	r2, #0
 8010c72:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010c74:	4b0d      	ldr	r3, [pc, #52]	; (8010cac <USBH_LL_Init+0x74>)
 8010c76:	2202      	movs	r2, #2
 8010c78:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010c7a:	4b0c      	ldr	r3, [pc, #48]	; (8010cac <USBH_LL_Init+0x74>)
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010c80:	480a      	ldr	r0, [pc, #40]	; (8010cac <USBH_LL_Init+0x74>)
 8010c82:	f7f2 fff3 	bl	8003c6c <HAL_HCD_Init>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d001      	beq.n	8010c90 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010c8c:	f7f1 fb9e 	bl	80023cc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010c90:	4806      	ldr	r0, [pc, #24]	; (8010cac <USBH_LL_Init+0x74>)
 8010c92:	f7f3 fbcd 	bl	8004430 <HAL_HCD_GetCurrentFrame>
 8010c96:	4603      	mov	r3, r0
 8010c98:	4619      	mov	r1, r3
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f7f9 fffc 	bl	800ac98 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010ca0:	2300      	movs	r3, #0
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3708      	adds	r7, #8
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	2000b2b0 	.word	0x2000b2b0

08010cb0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b084      	sub	sp, #16
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7f3 fb3e 	bl	8004348 <HAL_HCD_Start>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010cd0:	7bfb      	ldrb	r3, [r7, #15]
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f000 f98a 	bl	8010fec <USBH_Get_USB_Status>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3710      	adds	r7, #16
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}

08010ce6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010ce6:	b580      	push	{r7, lr}
 8010ce8:	b084      	sub	sp, #16
 8010cea:	af00      	add	r7, sp, #0
 8010cec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7f3 fb46 	bl	800438e <HAL_HCD_Stop>
 8010d02:	4603      	mov	r3, r0
 8010d04:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010d06:	7bfb      	ldrb	r3, [r7, #15]
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f000 f96f 	bl	8010fec <USBH_Get_USB_Status>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d12:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3710      	adds	r7, #16
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010d24:	2301      	movs	r3, #1
 8010d26:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7f3 fb8c 	bl	800444c <HAL_HCD_GetCurrentSpeed>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b02      	cmp	r3, #2
 8010d38:	d00c      	beq.n	8010d54 <USBH_LL_GetSpeed+0x38>
 8010d3a:	2b02      	cmp	r3, #2
 8010d3c:	d80d      	bhi.n	8010d5a <USBH_LL_GetSpeed+0x3e>
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d002      	beq.n	8010d48 <USBH_LL_GetSpeed+0x2c>
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d003      	beq.n	8010d4e <USBH_LL_GetSpeed+0x32>
 8010d46:	e008      	b.n	8010d5a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8010d4c:	e008      	b.n	8010d60 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010d4e:	2301      	movs	r3, #1
 8010d50:	73fb      	strb	r3, [r7, #15]
    break;
 8010d52:	e005      	b.n	8010d60 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010d54:	2302      	movs	r3, #2
 8010d56:	73fb      	strb	r3, [r7, #15]
    break;
 8010d58:	e002      	b.n	8010d60 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8010d5e:	bf00      	nop
  }
  return  speed;
 8010d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3710      	adds	r7, #16
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}

08010d6a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010d6a:	b580      	push	{r7, lr}
 8010d6c:	b084      	sub	sp, #16
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d72:	2300      	movs	r3, #0
 8010d74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010d76:	2300      	movs	r3, #0
 8010d78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7f3 fb21 	bl	80043c8 <HAL_HCD_ResetPort>
 8010d86:	4603      	mov	r3, r0
 8010d88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010d8a:	7bfb      	ldrb	r3, [r7, #15]
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f000 f92d 	bl	8010fec <USBH_Get_USB_Status>
 8010d92:	4603      	mov	r3, r0
 8010d94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d96:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3710      	adds	r7, #16
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	460b      	mov	r3, r1
 8010daa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010db2:	78fa      	ldrb	r2, [r7, #3]
 8010db4:	4611      	mov	r1, r2
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7f3 fb27 	bl	800440a <HAL_HCD_HC_GetXferCount>
 8010dbc:	4603      	mov	r3, r0
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}

08010dc6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010dc6:	b590      	push	{r4, r7, lr}
 8010dc8:	b089      	sub	sp, #36	; 0x24
 8010dca:	af04      	add	r7, sp, #16
 8010dcc:	6078      	str	r0, [r7, #4]
 8010dce:	4608      	mov	r0, r1
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	70fb      	strb	r3, [r7, #3]
 8010dd8:	460b      	mov	r3, r1
 8010dda:	70bb      	strb	r3, [r7, #2]
 8010ddc:	4613      	mov	r3, r2
 8010dde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010de0:	2300      	movs	r3, #0
 8010de2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010de4:	2300      	movs	r3, #0
 8010de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 8010dee:	787c      	ldrb	r4, [r7, #1]
 8010df0:	78ba      	ldrb	r2, [r7, #2]
 8010df2:	78f9      	ldrb	r1, [r7, #3]
 8010df4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010df6:	9302      	str	r3, [sp, #8]
 8010df8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010dfc:	9301      	str	r3, [sp, #4]
 8010dfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010e02:	9300      	str	r3, [sp, #0]
 8010e04:	4623      	mov	r3, r4
 8010e06:	f7f2 ff93 	bl	8003d30 <HAL_HCD_HC_Init>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010e0e:	7bfb      	ldrb	r3, [r7, #15]
 8010e10:	4618      	mov	r0, r3
 8010e12:	f000 f8eb 	bl	8010fec <USBH_Get_USB_Status>
 8010e16:	4603      	mov	r3, r0
 8010e18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3714      	adds	r7, #20
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd90      	pop	{r4, r7, pc}

08010e24 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
 8010e2c:	460b      	mov	r3, r1
 8010e2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e30:	2300      	movs	r3, #0
 8010e32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010e34:	2300      	movs	r3, #0
 8010e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010e3e:	78fa      	ldrb	r2, [r7, #3]
 8010e40:	4611      	mov	r1, r2
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7f3 f803 	bl	8003e4e <HAL_HCD_HC_Halt>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010e4c:	7bfb      	ldrb	r3, [r7, #15]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f000 f8cc 	bl	8010fec <USBH_Get_USB_Status>
 8010e54:	4603      	mov	r3, r0
 8010e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3710      	adds	r7, #16
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}

08010e62 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010e62:	b590      	push	{r4, r7, lr}
 8010e64:	b089      	sub	sp, #36	; 0x24
 8010e66:	af04      	add	r7, sp, #16
 8010e68:	6078      	str	r0, [r7, #4]
 8010e6a:	4608      	mov	r0, r1
 8010e6c:	4611      	mov	r1, r2
 8010e6e:	461a      	mov	r2, r3
 8010e70:	4603      	mov	r3, r0
 8010e72:	70fb      	strb	r3, [r7, #3]
 8010e74:	460b      	mov	r3, r1
 8010e76:	70bb      	strb	r3, [r7, #2]
 8010e78:	4613      	mov	r3, r2
 8010e7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010e80:	2300      	movs	r3, #0
 8010e82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 8010e8a:	787c      	ldrb	r4, [r7, #1]
 8010e8c:	78ba      	ldrb	r2, [r7, #2]
 8010e8e:	78f9      	ldrb	r1, [r7, #3]
 8010e90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010e94:	9303      	str	r3, [sp, #12]
 8010e96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010e98:	9302      	str	r3, [sp, #8]
 8010e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9c:	9301      	str	r3, [sp, #4]
 8010e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010ea2:	9300      	str	r3, [sp, #0]
 8010ea4:	4623      	mov	r3, r4
 8010ea6:	f7f2 fff5 	bl	8003e94 <HAL_HCD_HC_SubmitRequest>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010eae:	7bfb      	ldrb	r3, [r7, #15]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f000 f89b 	bl	8010fec <USBH_Get_USB_Status>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010eba:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3714      	adds	r7, #20
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd90      	pop	{r4, r7, pc}

08010ec4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	460b      	mov	r3, r1
 8010ece:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010ed6:	78fa      	ldrb	r2, [r7, #3]
 8010ed8:	4611      	mov	r1, r2
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7f3 fa82 	bl	80043e4 <HAL_HCD_HC_GetURBState>
 8010ee0:	4603      	mov	r3, r0
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3708      	adds	r7, #8
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}

08010eea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010eea:	b580      	push	{r7, lr}
 8010eec:	b082      	sub	sp, #8
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8010efc:	2b01      	cmp	r3, #1
 8010efe:	d103      	bne.n	8010f08 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010f00:	78fb      	ldrb	r3, [r7, #3]
 8010f02:	4618      	mov	r0, r3
 8010f04:	f000 f89e 	bl	8011044 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010f08:	20c8      	movs	r0, #200	; 0xc8
 8010f0a:	f7f1 ff67 	bl	8002ddc <HAL_Delay>
  return USBH_OK;
 8010f0e:	2300      	movs	r3, #0
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3708      	adds	r7, #8
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b085      	sub	sp, #20
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	460b      	mov	r3, r1
 8010f22:	70fb      	strb	r3, [r7, #3]
 8010f24:	4613      	mov	r3, r2
 8010f26:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010f2e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010f30:	78fb      	ldrb	r3, [r7, #3]
 8010f32:	68fa      	ldr	r2, [r7, #12]
 8010f34:	212c      	movs	r1, #44	; 0x2c
 8010f36:	fb01 f303 	mul.w	r3, r1, r3
 8010f3a:	4413      	add	r3, r2
 8010f3c:	333b      	adds	r3, #59	; 0x3b
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d009      	beq.n	8010f58 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010f44:	78fb      	ldrb	r3, [r7, #3]
 8010f46:	68fa      	ldr	r2, [r7, #12]
 8010f48:	212c      	movs	r1, #44	; 0x2c
 8010f4a:	fb01 f303 	mul.w	r3, r1, r3
 8010f4e:	4413      	add	r3, r2
 8010f50:	3354      	adds	r3, #84	; 0x54
 8010f52:	78ba      	ldrb	r2, [r7, #2]
 8010f54:	701a      	strb	r2, [r3, #0]
 8010f56:	e008      	b.n	8010f6a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010f58:	78fb      	ldrb	r3, [r7, #3]
 8010f5a:	68fa      	ldr	r2, [r7, #12]
 8010f5c:	212c      	movs	r1, #44	; 0x2c
 8010f5e:	fb01 f303 	mul.w	r3, r1, r3
 8010f62:	4413      	add	r3, r2
 8010f64:	3355      	adds	r3, #85	; 0x55
 8010f66:	78ba      	ldrb	r2, [r7, #2]
 8010f68:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010f6a:	2300      	movs	r3, #0
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3714      	adds	r7, #20
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bc80      	pop	{r7}
 8010f74:	4770      	bx	lr

08010f76 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010f76:	b480      	push	{r7}
 8010f78:	b085      	sub	sp, #20
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	6078      	str	r0, [r7, #4]
 8010f7e:	460b      	mov	r3, r1
 8010f80:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8010f82:	2300      	movs	r3, #0
 8010f84:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010f8c:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010f8e:	78fb      	ldrb	r3, [r7, #3]
 8010f90:	68ba      	ldr	r2, [r7, #8]
 8010f92:	212c      	movs	r1, #44	; 0x2c
 8010f94:	fb01 f303 	mul.w	r3, r1, r3
 8010f98:	4413      	add	r3, r2
 8010f9a:	333b      	adds	r3, #59	; 0x3b
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d009      	beq.n	8010fb6 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8010fa2:	78fb      	ldrb	r3, [r7, #3]
 8010fa4:	68ba      	ldr	r2, [r7, #8]
 8010fa6:	212c      	movs	r1, #44	; 0x2c
 8010fa8:	fb01 f303 	mul.w	r3, r1, r3
 8010fac:	4413      	add	r3, r2
 8010fae:	3354      	adds	r3, #84	; 0x54
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	73fb      	strb	r3, [r7, #15]
 8010fb4:	e008      	b.n	8010fc8 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010fb6:	78fb      	ldrb	r3, [r7, #3]
 8010fb8:	68ba      	ldr	r2, [r7, #8]
 8010fba:	212c      	movs	r1, #44	; 0x2c
 8010fbc:	fb01 f303 	mul.w	r3, r1, r3
 8010fc0:	4413      	add	r3, r2
 8010fc2:	3355      	adds	r3, #85	; 0x55
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3714      	adds	r7, #20
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bc80      	pop	{r7}
 8010fd2:	4770      	bx	lr

08010fd4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f7f1 fefd 	bl	8002ddc <HAL_Delay>
}
 8010fe2:	bf00      	nop
 8010fe4:	3708      	adds	r7, #8
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}
	...

08010fec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b085      	sub	sp, #20
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010ffa:	79fb      	ldrb	r3, [r7, #7]
 8010ffc:	2b03      	cmp	r3, #3
 8010ffe:	d817      	bhi.n	8011030 <USBH_Get_USB_Status+0x44>
 8011000:	a201      	add	r2, pc, #4	; (adr r2, 8011008 <USBH_Get_USB_Status+0x1c>)
 8011002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011006:	bf00      	nop
 8011008:	08011019 	.word	0x08011019
 801100c:	0801101f 	.word	0x0801101f
 8011010:	08011025 	.word	0x08011025
 8011014:	0801102b 	.word	0x0801102b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011018:	2300      	movs	r3, #0
 801101a:	73fb      	strb	r3, [r7, #15]
    break;
 801101c:	e00b      	b.n	8011036 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801101e:	2302      	movs	r3, #2
 8011020:	73fb      	strb	r3, [r7, #15]
    break;
 8011022:	e008      	b.n	8011036 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011024:	2301      	movs	r3, #1
 8011026:	73fb      	strb	r3, [r7, #15]
    break;
 8011028:	e005      	b.n	8011036 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801102a:	2302      	movs	r3, #2
 801102c:	73fb      	strb	r3, [r7, #15]
    break;
 801102e:	e002      	b.n	8011036 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011030:	2302      	movs	r3, #2
 8011032:	73fb      	strb	r3, [r7, #15]
    break;
 8011034:	bf00      	nop
  }
  return usb_status;
 8011036:	7bfb      	ldrb	r3, [r7, #15]
}
 8011038:	4618      	mov	r0, r3
 801103a:	3714      	adds	r7, #20
 801103c:	46bd      	mov	sp, r7
 801103e:	bc80      	pop	{r7}
 8011040:	4770      	bx	lr
 8011042:	bf00      	nop

08011044 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b084      	sub	sp, #16
 8011048:	af00      	add	r7, sp, #0
 801104a:	4603      	mov	r3, r0
 801104c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801104e:	79fb      	ldrb	r3, [r7, #7]
 8011050:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011052:	79fb      	ldrb	r3, [r7, #7]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d102      	bne.n	801105e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8011058:	2300      	movs	r3, #0
 801105a:	73fb      	strb	r3, [r7, #15]
 801105c:	e001      	b.n	8011062 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801105e:	2301      	movs	r3, #1
 8011060:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,(GPIO_PinState)data);
 8011062:	7bfb      	ldrb	r3, [r7, #15]
 8011064:	461a      	mov	r2, r3
 8011066:	2104      	movs	r1, #4
 8011068:	4803      	ldr	r0, [pc, #12]	; (8011078 <MX_DriverVbusFS+0x34>)
 801106a:	f7f2 fde7 	bl	8003c3c <HAL_GPIO_WritePin>
}
 801106e:	bf00      	nop
 8011070:	3710      	adds	r7, #16
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	40020800 	.word	0x40020800

0801107c <__errno>:
 801107c:	4b01      	ldr	r3, [pc, #4]	; (8011084 <__errno+0x8>)
 801107e:	6818      	ldr	r0, [r3, #0]
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop
 8011084:	20000054 	.word	0x20000054

08011088 <std>:
 8011088:	2300      	movs	r3, #0
 801108a:	b510      	push	{r4, lr}
 801108c:	4604      	mov	r4, r0
 801108e:	e9c0 3300 	strd	r3, r3, [r0]
 8011092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011096:	6083      	str	r3, [r0, #8]
 8011098:	8181      	strh	r1, [r0, #12]
 801109a:	6643      	str	r3, [r0, #100]	; 0x64
 801109c:	81c2      	strh	r2, [r0, #14]
 801109e:	6183      	str	r3, [r0, #24]
 80110a0:	4619      	mov	r1, r3
 80110a2:	2208      	movs	r2, #8
 80110a4:	305c      	adds	r0, #92	; 0x5c
 80110a6:	f000 f92b 	bl	8011300 <memset>
 80110aa:	4b05      	ldr	r3, [pc, #20]	; (80110c0 <std+0x38>)
 80110ac:	6224      	str	r4, [r4, #32]
 80110ae:	6263      	str	r3, [r4, #36]	; 0x24
 80110b0:	4b04      	ldr	r3, [pc, #16]	; (80110c4 <std+0x3c>)
 80110b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80110b4:	4b04      	ldr	r3, [pc, #16]	; (80110c8 <std+0x40>)
 80110b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80110b8:	4b04      	ldr	r3, [pc, #16]	; (80110cc <std+0x44>)
 80110ba:	6323      	str	r3, [r4, #48]	; 0x30
 80110bc:	bd10      	pop	{r4, pc}
 80110be:	bf00      	nop
 80110c0:	0801227d 	.word	0x0801227d
 80110c4:	0801229f 	.word	0x0801229f
 80110c8:	080122d7 	.word	0x080122d7
 80110cc:	080122fb 	.word	0x080122fb

080110d0 <_cleanup_r>:
 80110d0:	4901      	ldr	r1, [pc, #4]	; (80110d8 <_cleanup_r+0x8>)
 80110d2:	f000 b8af 	b.w	8011234 <_fwalk_reent>
 80110d6:	bf00      	nop
 80110d8:	08013e99 	.word	0x08013e99

080110dc <__sfmoreglue>:
 80110dc:	b570      	push	{r4, r5, r6, lr}
 80110de:	2568      	movs	r5, #104	; 0x68
 80110e0:	1e4a      	subs	r2, r1, #1
 80110e2:	4355      	muls	r5, r2
 80110e4:	460e      	mov	r6, r1
 80110e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80110ea:	f000 f95d 	bl	80113a8 <_malloc_r>
 80110ee:	4604      	mov	r4, r0
 80110f0:	b140      	cbz	r0, 8011104 <__sfmoreglue+0x28>
 80110f2:	2100      	movs	r1, #0
 80110f4:	e9c0 1600 	strd	r1, r6, [r0]
 80110f8:	300c      	adds	r0, #12
 80110fa:	60a0      	str	r0, [r4, #8]
 80110fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011100:	f000 f8fe 	bl	8011300 <memset>
 8011104:	4620      	mov	r0, r4
 8011106:	bd70      	pop	{r4, r5, r6, pc}

08011108 <__sfp_lock_acquire>:
 8011108:	4801      	ldr	r0, [pc, #4]	; (8011110 <__sfp_lock_acquire+0x8>)
 801110a:	f000 b8d8 	b.w	80112be <__retarget_lock_acquire_recursive>
 801110e:	bf00      	nop
 8011110:	2000b5bc 	.word	0x2000b5bc

08011114 <__sfp_lock_release>:
 8011114:	4801      	ldr	r0, [pc, #4]	; (801111c <__sfp_lock_release+0x8>)
 8011116:	f000 b8d3 	b.w	80112c0 <__retarget_lock_release_recursive>
 801111a:	bf00      	nop
 801111c:	2000b5bc 	.word	0x2000b5bc

08011120 <__sinit_lock_acquire>:
 8011120:	4801      	ldr	r0, [pc, #4]	; (8011128 <__sinit_lock_acquire+0x8>)
 8011122:	f000 b8cc 	b.w	80112be <__retarget_lock_acquire_recursive>
 8011126:	bf00      	nop
 8011128:	2000b5b7 	.word	0x2000b5b7

0801112c <__sinit_lock_release>:
 801112c:	4801      	ldr	r0, [pc, #4]	; (8011134 <__sinit_lock_release+0x8>)
 801112e:	f000 b8c7 	b.w	80112c0 <__retarget_lock_release_recursive>
 8011132:	bf00      	nop
 8011134:	2000b5b7 	.word	0x2000b5b7

08011138 <__sinit>:
 8011138:	b510      	push	{r4, lr}
 801113a:	4604      	mov	r4, r0
 801113c:	f7ff fff0 	bl	8011120 <__sinit_lock_acquire>
 8011140:	69a3      	ldr	r3, [r4, #24]
 8011142:	b11b      	cbz	r3, 801114c <__sinit+0x14>
 8011144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011148:	f7ff bff0 	b.w	801112c <__sinit_lock_release>
 801114c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011150:	6523      	str	r3, [r4, #80]	; 0x50
 8011152:	4b13      	ldr	r3, [pc, #76]	; (80111a0 <__sinit+0x68>)
 8011154:	4a13      	ldr	r2, [pc, #76]	; (80111a4 <__sinit+0x6c>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	62a2      	str	r2, [r4, #40]	; 0x28
 801115a:	42a3      	cmp	r3, r4
 801115c:	bf08      	it	eq
 801115e:	2301      	moveq	r3, #1
 8011160:	4620      	mov	r0, r4
 8011162:	bf08      	it	eq
 8011164:	61a3      	streq	r3, [r4, #24]
 8011166:	f000 f81f 	bl	80111a8 <__sfp>
 801116a:	6060      	str	r0, [r4, #4]
 801116c:	4620      	mov	r0, r4
 801116e:	f000 f81b 	bl	80111a8 <__sfp>
 8011172:	60a0      	str	r0, [r4, #8]
 8011174:	4620      	mov	r0, r4
 8011176:	f000 f817 	bl	80111a8 <__sfp>
 801117a:	2200      	movs	r2, #0
 801117c:	2104      	movs	r1, #4
 801117e:	60e0      	str	r0, [r4, #12]
 8011180:	6860      	ldr	r0, [r4, #4]
 8011182:	f7ff ff81 	bl	8011088 <std>
 8011186:	2201      	movs	r2, #1
 8011188:	2109      	movs	r1, #9
 801118a:	68a0      	ldr	r0, [r4, #8]
 801118c:	f7ff ff7c 	bl	8011088 <std>
 8011190:	2202      	movs	r2, #2
 8011192:	2112      	movs	r1, #18
 8011194:	68e0      	ldr	r0, [r4, #12]
 8011196:	f7ff ff77 	bl	8011088 <std>
 801119a:	2301      	movs	r3, #1
 801119c:	61a3      	str	r3, [r4, #24]
 801119e:	e7d1      	b.n	8011144 <__sinit+0xc>
 80111a0:	08015c0c 	.word	0x08015c0c
 80111a4:	080110d1 	.word	0x080110d1

080111a8 <__sfp>:
 80111a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111aa:	4607      	mov	r7, r0
 80111ac:	f7ff ffac 	bl	8011108 <__sfp_lock_acquire>
 80111b0:	4b1e      	ldr	r3, [pc, #120]	; (801122c <__sfp+0x84>)
 80111b2:	681e      	ldr	r6, [r3, #0]
 80111b4:	69b3      	ldr	r3, [r6, #24]
 80111b6:	b913      	cbnz	r3, 80111be <__sfp+0x16>
 80111b8:	4630      	mov	r0, r6
 80111ba:	f7ff ffbd 	bl	8011138 <__sinit>
 80111be:	3648      	adds	r6, #72	; 0x48
 80111c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80111c4:	3b01      	subs	r3, #1
 80111c6:	d503      	bpl.n	80111d0 <__sfp+0x28>
 80111c8:	6833      	ldr	r3, [r6, #0]
 80111ca:	b30b      	cbz	r3, 8011210 <__sfp+0x68>
 80111cc:	6836      	ldr	r6, [r6, #0]
 80111ce:	e7f7      	b.n	80111c0 <__sfp+0x18>
 80111d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80111d4:	b9d5      	cbnz	r5, 801120c <__sfp+0x64>
 80111d6:	4b16      	ldr	r3, [pc, #88]	; (8011230 <__sfp+0x88>)
 80111d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80111dc:	60e3      	str	r3, [r4, #12]
 80111de:	6665      	str	r5, [r4, #100]	; 0x64
 80111e0:	f000 f86c 	bl	80112bc <__retarget_lock_init_recursive>
 80111e4:	f7ff ff96 	bl	8011114 <__sfp_lock_release>
 80111e8:	2208      	movs	r2, #8
 80111ea:	4629      	mov	r1, r5
 80111ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80111f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80111f4:	6025      	str	r5, [r4, #0]
 80111f6:	61a5      	str	r5, [r4, #24]
 80111f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80111fc:	f000 f880 	bl	8011300 <memset>
 8011200:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011204:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011208:	4620      	mov	r0, r4
 801120a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801120c:	3468      	adds	r4, #104	; 0x68
 801120e:	e7d9      	b.n	80111c4 <__sfp+0x1c>
 8011210:	2104      	movs	r1, #4
 8011212:	4638      	mov	r0, r7
 8011214:	f7ff ff62 	bl	80110dc <__sfmoreglue>
 8011218:	4604      	mov	r4, r0
 801121a:	6030      	str	r0, [r6, #0]
 801121c:	2800      	cmp	r0, #0
 801121e:	d1d5      	bne.n	80111cc <__sfp+0x24>
 8011220:	f7ff ff78 	bl	8011114 <__sfp_lock_release>
 8011224:	230c      	movs	r3, #12
 8011226:	603b      	str	r3, [r7, #0]
 8011228:	e7ee      	b.n	8011208 <__sfp+0x60>
 801122a:	bf00      	nop
 801122c:	08015c0c 	.word	0x08015c0c
 8011230:	ffff0001 	.word	0xffff0001

08011234 <_fwalk_reent>:
 8011234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011238:	4606      	mov	r6, r0
 801123a:	4688      	mov	r8, r1
 801123c:	2700      	movs	r7, #0
 801123e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011242:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011246:	f1b9 0901 	subs.w	r9, r9, #1
 801124a:	d505      	bpl.n	8011258 <_fwalk_reent+0x24>
 801124c:	6824      	ldr	r4, [r4, #0]
 801124e:	2c00      	cmp	r4, #0
 8011250:	d1f7      	bne.n	8011242 <_fwalk_reent+0xe>
 8011252:	4638      	mov	r0, r7
 8011254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011258:	89ab      	ldrh	r3, [r5, #12]
 801125a:	2b01      	cmp	r3, #1
 801125c:	d907      	bls.n	801126e <_fwalk_reent+0x3a>
 801125e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011262:	3301      	adds	r3, #1
 8011264:	d003      	beq.n	801126e <_fwalk_reent+0x3a>
 8011266:	4629      	mov	r1, r5
 8011268:	4630      	mov	r0, r6
 801126a:	47c0      	blx	r8
 801126c:	4307      	orrs	r7, r0
 801126e:	3568      	adds	r5, #104	; 0x68
 8011270:	e7e9      	b.n	8011246 <_fwalk_reent+0x12>
	...

08011274 <__libc_init_array>:
 8011274:	b570      	push	{r4, r5, r6, lr}
 8011276:	2600      	movs	r6, #0
 8011278:	4d0c      	ldr	r5, [pc, #48]	; (80112ac <__libc_init_array+0x38>)
 801127a:	4c0d      	ldr	r4, [pc, #52]	; (80112b0 <__libc_init_array+0x3c>)
 801127c:	1b64      	subs	r4, r4, r5
 801127e:	10a4      	asrs	r4, r4, #2
 8011280:	42a6      	cmp	r6, r4
 8011282:	d109      	bne.n	8011298 <__libc_init_array+0x24>
 8011284:	f004 fba8 	bl	80159d8 <_init>
 8011288:	2600      	movs	r6, #0
 801128a:	4d0a      	ldr	r5, [pc, #40]	; (80112b4 <__libc_init_array+0x40>)
 801128c:	4c0a      	ldr	r4, [pc, #40]	; (80112b8 <__libc_init_array+0x44>)
 801128e:	1b64      	subs	r4, r4, r5
 8011290:	10a4      	asrs	r4, r4, #2
 8011292:	42a6      	cmp	r6, r4
 8011294:	d105      	bne.n	80112a2 <__libc_init_array+0x2e>
 8011296:	bd70      	pop	{r4, r5, r6, pc}
 8011298:	f855 3b04 	ldr.w	r3, [r5], #4
 801129c:	4798      	blx	r3
 801129e:	3601      	adds	r6, #1
 80112a0:	e7ee      	b.n	8011280 <__libc_init_array+0xc>
 80112a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80112a6:	4798      	blx	r3
 80112a8:	3601      	adds	r6, #1
 80112aa:	e7f2      	b.n	8011292 <__libc_init_array+0x1e>
 80112ac:	0801606c 	.word	0x0801606c
 80112b0:	0801606c 	.word	0x0801606c
 80112b4:	0801606c 	.word	0x0801606c
 80112b8:	08016070 	.word	0x08016070

080112bc <__retarget_lock_init_recursive>:
 80112bc:	4770      	bx	lr

080112be <__retarget_lock_acquire_recursive>:
 80112be:	4770      	bx	lr

080112c0 <__retarget_lock_release_recursive>:
 80112c0:	4770      	bx	lr
	...

080112c4 <malloc>:
 80112c4:	4b02      	ldr	r3, [pc, #8]	; (80112d0 <malloc+0xc>)
 80112c6:	4601      	mov	r1, r0
 80112c8:	6818      	ldr	r0, [r3, #0]
 80112ca:	f000 b86d 	b.w	80113a8 <_malloc_r>
 80112ce:	bf00      	nop
 80112d0:	20000054 	.word	0x20000054

080112d4 <free>:
 80112d4:	4b02      	ldr	r3, [pc, #8]	; (80112e0 <free+0xc>)
 80112d6:	4601      	mov	r1, r0
 80112d8:	6818      	ldr	r0, [r3, #0]
 80112da:	f000 b819 	b.w	8011310 <_free_r>
 80112de:	bf00      	nop
 80112e0:	20000054 	.word	0x20000054

080112e4 <memcpy>:
 80112e4:	440a      	add	r2, r1
 80112e6:	4291      	cmp	r1, r2
 80112e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80112ec:	d100      	bne.n	80112f0 <memcpy+0xc>
 80112ee:	4770      	bx	lr
 80112f0:	b510      	push	{r4, lr}
 80112f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112f6:	4291      	cmp	r1, r2
 80112f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80112fc:	d1f9      	bne.n	80112f2 <memcpy+0xe>
 80112fe:	bd10      	pop	{r4, pc}

08011300 <memset>:
 8011300:	4603      	mov	r3, r0
 8011302:	4402      	add	r2, r0
 8011304:	4293      	cmp	r3, r2
 8011306:	d100      	bne.n	801130a <memset+0xa>
 8011308:	4770      	bx	lr
 801130a:	f803 1b01 	strb.w	r1, [r3], #1
 801130e:	e7f9      	b.n	8011304 <memset+0x4>

08011310 <_free_r>:
 8011310:	b538      	push	{r3, r4, r5, lr}
 8011312:	4605      	mov	r5, r0
 8011314:	2900      	cmp	r1, #0
 8011316:	d043      	beq.n	80113a0 <_free_r+0x90>
 8011318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801131c:	1f0c      	subs	r4, r1, #4
 801131e:	2b00      	cmp	r3, #0
 8011320:	bfb8      	it	lt
 8011322:	18e4      	addlt	r4, r4, r3
 8011324:	f003 f990 	bl	8014648 <__malloc_lock>
 8011328:	4a1e      	ldr	r2, [pc, #120]	; (80113a4 <_free_r+0x94>)
 801132a:	6813      	ldr	r3, [r2, #0]
 801132c:	4610      	mov	r0, r2
 801132e:	b933      	cbnz	r3, 801133e <_free_r+0x2e>
 8011330:	6063      	str	r3, [r4, #4]
 8011332:	6014      	str	r4, [r2, #0]
 8011334:	4628      	mov	r0, r5
 8011336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801133a:	f003 b98b 	b.w	8014654 <__malloc_unlock>
 801133e:	42a3      	cmp	r3, r4
 8011340:	d90a      	bls.n	8011358 <_free_r+0x48>
 8011342:	6821      	ldr	r1, [r4, #0]
 8011344:	1862      	adds	r2, r4, r1
 8011346:	4293      	cmp	r3, r2
 8011348:	bf01      	itttt	eq
 801134a:	681a      	ldreq	r2, [r3, #0]
 801134c:	685b      	ldreq	r3, [r3, #4]
 801134e:	1852      	addeq	r2, r2, r1
 8011350:	6022      	streq	r2, [r4, #0]
 8011352:	6063      	str	r3, [r4, #4]
 8011354:	6004      	str	r4, [r0, #0]
 8011356:	e7ed      	b.n	8011334 <_free_r+0x24>
 8011358:	461a      	mov	r2, r3
 801135a:	685b      	ldr	r3, [r3, #4]
 801135c:	b10b      	cbz	r3, 8011362 <_free_r+0x52>
 801135e:	42a3      	cmp	r3, r4
 8011360:	d9fa      	bls.n	8011358 <_free_r+0x48>
 8011362:	6811      	ldr	r1, [r2, #0]
 8011364:	1850      	adds	r0, r2, r1
 8011366:	42a0      	cmp	r0, r4
 8011368:	d10b      	bne.n	8011382 <_free_r+0x72>
 801136a:	6820      	ldr	r0, [r4, #0]
 801136c:	4401      	add	r1, r0
 801136e:	1850      	adds	r0, r2, r1
 8011370:	4283      	cmp	r3, r0
 8011372:	6011      	str	r1, [r2, #0]
 8011374:	d1de      	bne.n	8011334 <_free_r+0x24>
 8011376:	6818      	ldr	r0, [r3, #0]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	4401      	add	r1, r0
 801137c:	6011      	str	r1, [r2, #0]
 801137e:	6053      	str	r3, [r2, #4]
 8011380:	e7d8      	b.n	8011334 <_free_r+0x24>
 8011382:	d902      	bls.n	801138a <_free_r+0x7a>
 8011384:	230c      	movs	r3, #12
 8011386:	602b      	str	r3, [r5, #0]
 8011388:	e7d4      	b.n	8011334 <_free_r+0x24>
 801138a:	6820      	ldr	r0, [r4, #0]
 801138c:	1821      	adds	r1, r4, r0
 801138e:	428b      	cmp	r3, r1
 8011390:	bf01      	itttt	eq
 8011392:	6819      	ldreq	r1, [r3, #0]
 8011394:	685b      	ldreq	r3, [r3, #4]
 8011396:	1809      	addeq	r1, r1, r0
 8011398:	6021      	streq	r1, [r4, #0]
 801139a:	6063      	str	r3, [r4, #4]
 801139c:	6054      	str	r4, [r2, #4]
 801139e:	e7c9      	b.n	8011334 <_free_r+0x24>
 80113a0:	bd38      	pop	{r3, r4, r5, pc}
 80113a2:	bf00      	nop
 80113a4:	20004578 	.word	0x20004578

080113a8 <_malloc_r>:
 80113a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113aa:	1ccd      	adds	r5, r1, #3
 80113ac:	f025 0503 	bic.w	r5, r5, #3
 80113b0:	3508      	adds	r5, #8
 80113b2:	2d0c      	cmp	r5, #12
 80113b4:	bf38      	it	cc
 80113b6:	250c      	movcc	r5, #12
 80113b8:	2d00      	cmp	r5, #0
 80113ba:	4606      	mov	r6, r0
 80113bc:	db01      	blt.n	80113c2 <_malloc_r+0x1a>
 80113be:	42a9      	cmp	r1, r5
 80113c0:	d903      	bls.n	80113ca <_malloc_r+0x22>
 80113c2:	230c      	movs	r3, #12
 80113c4:	6033      	str	r3, [r6, #0]
 80113c6:	2000      	movs	r0, #0
 80113c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113ca:	f003 f93d 	bl	8014648 <__malloc_lock>
 80113ce:	4921      	ldr	r1, [pc, #132]	; (8011454 <_malloc_r+0xac>)
 80113d0:	680a      	ldr	r2, [r1, #0]
 80113d2:	4614      	mov	r4, r2
 80113d4:	b99c      	cbnz	r4, 80113fe <_malloc_r+0x56>
 80113d6:	4f20      	ldr	r7, [pc, #128]	; (8011458 <_malloc_r+0xb0>)
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	b923      	cbnz	r3, 80113e6 <_malloc_r+0x3e>
 80113dc:	4621      	mov	r1, r4
 80113de:	4630      	mov	r0, r6
 80113e0:	f000 ff18 	bl	8012214 <_sbrk_r>
 80113e4:	6038      	str	r0, [r7, #0]
 80113e6:	4629      	mov	r1, r5
 80113e8:	4630      	mov	r0, r6
 80113ea:	f000 ff13 	bl	8012214 <_sbrk_r>
 80113ee:	1c43      	adds	r3, r0, #1
 80113f0:	d123      	bne.n	801143a <_malloc_r+0x92>
 80113f2:	230c      	movs	r3, #12
 80113f4:	4630      	mov	r0, r6
 80113f6:	6033      	str	r3, [r6, #0]
 80113f8:	f003 f92c 	bl	8014654 <__malloc_unlock>
 80113fc:	e7e3      	b.n	80113c6 <_malloc_r+0x1e>
 80113fe:	6823      	ldr	r3, [r4, #0]
 8011400:	1b5b      	subs	r3, r3, r5
 8011402:	d417      	bmi.n	8011434 <_malloc_r+0x8c>
 8011404:	2b0b      	cmp	r3, #11
 8011406:	d903      	bls.n	8011410 <_malloc_r+0x68>
 8011408:	6023      	str	r3, [r4, #0]
 801140a:	441c      	add	r4, r3
 801140c:	6025      	str	r5, [r4, #0]
 801140e:	e004      	b.n	801141a <_malloc_r+0x72>
 8011410:	6863      	ldr	r3, [r4, #4]
 8011412:	42a2      	cmp	r2, r4
 8011414:	bf0c      	ite	eq
 8011416:	600b      	streq	r3, [r1, #0]
 8011418:	6053      	strne	r3, [r2, #4]
 801141a:	4630      	mov	r0, r6
 801141c:	f003 f91a 	bl	8014654 <__malloc_unlock>
 8011420:	f104 000b 	add.w	r0, r4, #11
 8011424:	1d23      	adds	r3, r4, #4
 8011426:	f020 0007 	bic.w	r0, r0, #7
 801142a:	1ac2      	subs	r2, r0, r3
 801142c:	d0cc      	beq.n	80113c8 <_malloc_r+0x20>
 801142e:	1a1b      	subs	r3, r3, r0
 8011430:	50a3      	str	r3, [r4, r2]
 8011432:	e7c9      	b.n	80113c8 <_malloc_r+0x20>
 8011434:	4622      	mov	r2, r4
 8011436:	6864      	ldr	r4, [r4, #4]
 8011438:	e7cc      	b.n	80113d4 <_malloc_r+0x2c>
 801143a:	1cc4      	adds	r4, r0, #3
 801143c:	f024 0403 	bic.w	r4, r4, #3
 8011440:	42a0      	cmp	r0, r4
 8011442:	d0e3      	beq.n	801140c <_malloc_r+0x64>
 8011444:	1a21      	subs	r1, r4, r0
 8011446:	4630      	mov	r0, r6
 8011448:	f000 fee4 	bl	8012214 <_sbrk_r>
 801144c:	3001      	adds	r0, #1
 801144e:	d1dd      	bne.n	801140c <_malloc_r+0x64>
 8011450:	e7cf      	b.n	80113f2 <_malloc_r+0x4a>
 8011452:	bf00      	nop
 8011454:	20004578 	.word	0x20004578
 8011458:	2000457c 	.word	0x2000457c

0801145c <__cvt>:
 801145c:	2b00      	cmp	r3, #0
 801145e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011462:	461f      	mov	r7, r3
 8011464:	bfbb      	ittet	lt
 8011466:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 801146a:	461f      	movlt	r7, r3
 801146c:	2300      	movge	r3, #0
 801146e:	232d      	movlt	r3, #45	; 0x2d
 8011470:	b088      	sub	sp, #32
 8011472:	4614      	mov	r4, r2
 8011474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011476:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011478:	7013      	strb	r3, [r2, #0]
 801147a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801147c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011480:	f023 0820 	bic.w	r8, r3, #32
 8011484:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011488:	d005      	beq.n	8011496 <__cvt+0x3a>
 801148a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801148e:	d100      	bne.n	8011492 <__cvt+0x36>
 8011490:	3501      	adds	r5, #1
 8011492:	2302      	movs	r3, #2
 8011494:	e000      	b.n	8011498 <__cvt+0x3c>
 8011496:	2303      	movs	r3, #3
 8011498:	aa07      	add	r2, sp, #28
 801149a:	9204      	str	r2, [sp, #16]
 801149c:	aa06      	add	r2, sp, #24
 801149e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80114a2:	e9cd 3500 	strd	r3, r5, [sp]
 80114a6:	4622      	mov	r2, r4
 80114a8:	463b      	mov	r3, r7
 80114aa:	f001 fe81 	bl	80131b0 <_dtoa_r>
 80114ae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80114b2:	4606      	mov	r6, r0
 80114b4:	d102      	bne.n	80114bc <__cvt+0x60>
 80114b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80114b8:	07db      	lsls	r3, r3, #31
 80114ba:	d522      	bpl.n	8011502 <__cvt+0xa6>
 80114bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80114c0:	eb06 0905 	add.w	r9, r6, r5
 80114c4:	d110      	bne.n	80114e8 <__cvt+0x8c>
 80114c6:	7833      	ldrb	r3, [r6, #0]
 80114c8:	2b30      	cmp	r3, #48	; 0x30
 80114ca:	d10a      	bne.n	80114e2 <__cvt+0x86>
 80114cc:	2200      	movs	r2, #0
 80114ce:	2300      	movs	r3, #0
 80114d0:	4620      	mov	r0, r4
 80114d2:	4639      	mov	r1, r7
 80114d4:	f7ef fab2 	bl	8000a3c <__aeabi_dcmpeq>
 80114d8:	b918      	cbnz	r0, 80114e2 <__cvt+0x86>
 80114da:	f1c5 0501 	rsb	r5, r5, #1
 80114de:	f8ca 5000 	str.w	r5, [sl]
 80114e2:	f8da 3000 	ldr.w	r3, [sl]
 80114e6:	4499      	add	r9, r3
 80114e8:	2200      	movs	r2, #0
 80114ea:	2300      	movs	r3, #0
 80114ec:	4620      	mov	r0, r4
 80114ee:	4639      	mov	r1, r7
 80114f0:	f7ef faa4 	bl	8000a3c <__aeabi_dcmpeq>
 80114f4:	b108      	cbz	r0, 80114fa <__cvt+0x9e>
 80114f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80114fa:	2230      	movs	r2, #48	; 0x30
 80114fc:	9b07      	ldr	r3, [sp, #28]
 80114fe:	454b      	cmp	r3, r9
 8011500:	d307      	bcc.n	8011512 <__cvt+0xb6>
 8011502:	4630      	mov	r0, r6
 8011504:	9b07      	ldr	r3, [sp, #28]
 8011506:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011508:	1b9b      	subs	r3, r3, r6
 801150a:	6013      	str	r3, [r2, #0]
 801150c:	b008      	add	sp, #32
 801150e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011512:	1c59      	adds	r1, r3, #1
 8011514:	9107      	str	r1, [sp, #28]
 8011516:	701a      	strb	r2, [r3, #0]
 8011518:	e7f0      	b.n	80114fc <__cvt+0xa0>

0801151a <__exponent>:
 801151a:	4603      	mov	r3, r0
 801151c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801151e:	2900      	cmp	r1, #0
 8011520:	f803 2b02 	strb.w	r2, [r3], #2
 8011524:	bfb6      	itet	lt
 8011526:	222d      	movlt	r2, #45	; 0x2d
 8011528:	222b      	movge	r2, #43	; 0x2b
 801152a:	4249      	neglt	r1, r1
 801152c:	2909      	cmp	r1, #9
 801152e:	7042      	strb	r2, [r0, #1]
 8011530:	dd2b      	ble.n	801158a <__exponent+0x70>
 8011532:	f10d 0407 	add.w	r4, sp, #7
 8011536:	46a4      	mov	ip, r4
 8011538:	270a      	movs	r7, #10
 801153a:	fb91 f6f7 	sdiv	r6, r1, r7
 801153e:	460a      	mov	r2, r1
 8011540:	46a6      	mov	lr, r4
 8011542:	fb07 1516 	mls	r5, r7, r6, r1
 8011546:	2a63      	cmp	r2, #99	; 0x63
 8011548:	f105 0530 	add.w	r5, r5, #48	; 0x30
 801154c:	4631      	mov	r1, r6
 801154e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011552:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011556:	dcf0      	bgt.n	801153a <__exponent+0x20>
 8011558:	3130      	adds	r1, #48	; 0x30
 801155a:	f1ae 0502 	sub.w	r5, lr, #2
 801155e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011562:	4629      	mov	r1, r5
 8011564:	1c44      	adds	r4, r0, #1
 8011566:	4561      	cmp	r1, ip
 8011568:	d30a      	bcc.n	8011580 <__exponent+0x66>
 801156a:	f10d 0209 	add.w	r2, sp, #9
 801156e:	eba2 020e 	sub.w	r2, r2, lr
 8011572:	4565      	cmp	r5, ip
 8011574:	bf88      	it	hi
 8011576:	2200      	movhi	r2, #0
 8011578:	4413      	add	r3, r2
 801157a:	1a18      	subs	r0, r3, r0
 801157c:	b003      	add	sp, #12
 801157e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011580:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011584:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011588:	e7ed      	b.n	8011566 <__exponent+0x4c>
 801158a:	2330      	movs	r3, #48	; 0x30
 801158c:	3130      	adds	r1, #48	; 0x30
 801158e:	7083      	strb	r3, [r0, #2]
 8011590:	70c1      	strb	r1, [r0, #3]
 8011592:	1d03      	adds	r3, r0, #4
 8011594:	e7f1      	b.n	801157a <__exponent+0x60>
	...

08011598 <_printf_float>:
 8011598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801159c:	b091      	sub	sp, #68	; 0x44
 801159e:	460c      	mov	r4, r1
 80115a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80115a4:	4616      	mov	r6, r2
 80115a6:	461f      	mov	r7, r3
 80115a8:	4605      	mov	r5, r0
 80115aa:	f003 f817 	bl	80145dc <_localeconv_r>
 80115ae:	6803      	ldr	r3, [r0, #0]
 80115b0:	4618      	mov	r0, r3
 80115b2:	9309      	str	r3, [sp, #36]	; 0x24
 80115b4:	f7ee fe16 	bl	80001e4 <strlen>
 80115b8:	2300      	movs	r3, #0
 80115ba:	930e      	str	r3, [sp, #56]	; 0x38
 80115bc:	f8d8 3000 	ldr.w	r3, [r8]
 80115c0:	900a      	str	r0, [sp, #40]	; 0x28
 80115c2:	3307      	adds	r3, #7
 80115c4:	f023 0307 	bic.w	r3, r3, #7
 80115c8:	f103 0208 	add.w	r2, r3, #8
 80115cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80115d0:	f8d4 b000 	ldr.w	fp, [r4]
 80115d4:	f8c8 2000 	str.w	r2, [r8]
 80115d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80115e0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80115e4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80115e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80115ea:	f04f 32ff 	mov.w	r2, #4294967295
 80115ee:	4640      	mov	r0, r8
 80115f0:	4b9c      	ldr	r3, [pc, #624]	; (8011864 <_printf_float+0x2cc>)
 80115f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80115f4:	f7ef fa54 	bl	8000aa0 <__aeabi_dcmpun>
 80115f8:	bb70      	cbnz	r0, 8011658 <_printf_float+0xc0>
 80115fa:	f04f 32ff 	mov.w	r2, #4294967295
 80115fe:	4640      	mov	r0, r8
 8011600:	4b98      	ldr	r3, [pc, #608]	; (8011864 <_printf_float+0x2cc>)
 8011602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011604:	f7ef fa2e 	bl	8000a64 <__aeabi_dcmple>
 8011608:	bb30      	cbnz	r0, 8011658 <_printf_float+0xc0>
 801160a:	2200      	movs	r2, #0
 801160c:	2300      	movs	r3, #0
 801160e:	4640      	mov	r0, r8
 8011610:	4651      	mov	r1, sl
 8011612:	f7ef fa1d 	bl	8000a50 <__aeabi_dcmplt>
 8011616:	b110      	cbz	r0, 801161e <_printf_float+0x86>
 8011618:	232d      	movs	r3, #45	; 0x2d
 801161a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801161e:	4b92      	ldr	r3, [pc, #584]	; (8011868 <_printf_float+0x2d0>)
 8011620:	4892      	ldr	r0, [pc, #584]	; (801186c <_printf_float+0x2d4>)
 8011622:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011626:	bf94      	ite	ls
 8011628:	4698      	movls	r8, r3
 801162a:	4680      	movhi	r8, r0
 801162c:	2303      	movs	r3, #3
 801162e:	f04f 0a00 	mov.w	sl, #0
 8011632:	6123      	str	r3, [r4, #16]
 8011634:	f02b 0304 	bic.w	r3, fp, #4
 8011638:	6023      	str	r3, [r4, #0]
 801163a:	4633      	mov	r3, r6
 801163c:	4621      	mov	r1, r4
 801163e:	4628      	mov	r0, r5
 8011640:	9700      	str	r7, [sp, #0]
 8011642:	aa0f      	add	r2, sp, #60	; 0x3c
 8011644:	f000 f9d4 	bl	80119f0 <_printf_common>
 8011648:	3001      	adds	r0, #1
 801164a:	f040 8090 	bne.w	801176e <_printf_float+0x1d6>
 801164e:	f04f 30ff 	mov.w	r0, #4294967295
 8011652:	b011      	add	sp, #68	; 0x44
 8011654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011658:	4642      	mov	r2, r8
 801165a:	4653      	mov	r3, sl
 801165c:	4640      	mov	r0, r8
 801165e:	4651      	mov	r1, sl
 8011660:	f7ef fa1e 	bl	8000aa0 <__aeabi_dcmpun>
 8011664:	b148      	cbz	r0, 801167a <_printf_float+0xe2>
 8011666:	f1ba 0f00 	cmp.w	sl, #0
 801166a:	bfb8      	it	lt
 801166c:	232d      	movlt	r3, #45	; 0x2d
 801166e:	4880      	ldr	r0, [pc, #512]	; (8011870 <_printf_float+0x2d8>)
 8011670:	bfb8      	it	lt
 8011672:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011676:	4b7f      	ldr	r3, [pc, #508]	; (8011874 <_printf_float+0x2dc>)
 8011678:	e7d3      	b.n	8011622 <_printf_float+0x8a>
 801167a:	6863      	ldr	r3, [r4, #4]
 801167c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011680:	1c5a      	adds	r2, r3, #1
 8011682:	d142      	bne.n	801170a <_printf_float+0x172>
 8011684:	2306      	movs	r3, #6
 8011686:	6063      	str	r3, [r4, #4]
 8011688:	2200      	movs	r2, #0
 801168a:	9206      	str	r2, [sp, #24]
 801168c:	aa0e      	add	r2, sp, #56	; 0x38
 801168e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8011692:	aa0d      	add	r2, sp, #52	; 0x34
 8011694:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8011698:	9203      	str	r2, [sp, #12]
 801169a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801169e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80116a2:	6023      	str	r3, [r4, #0]
 80116a4:	6863      	ldr	r3, [r4, #4]
 80116a6:	4642      	mov	r2, r8
 80116a8:	9300      	str	r3, [sp, #0]
 80116aa:	4628      	mov	r0, r5
 80116ac:	4653      	mov	r3, sl
 80116ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80116b0:	f7ff fed4 	bl	801145c <__cvt>
 80116b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80116b6:	4680      	mov	r8, r0
 80116b8:	2947      	cmp	r1, #71	; 0x47
 80116ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80116bc:	d108      	bne.n	80116d0 <_printf_float+0x138>
 80116be:	1cc8      	adds	r0, r1, #3
 80116c0:	db02      	blt.n	80116c8 <_printf_float+0x130>
 80116c2:	6863      	ldr	r3, [r4, #4]
 80116c4:	4299      	cmp	r1, r3
 80116c6:	dd40      	ble.n	801174a <_printf_float+0x1b2>
 80116c8:	f1a9 0902 	sub.w	r9, r9, #2
 80116cc:	fa5f f989 	uxtb.w	r9, r9
 80116d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80116d4:	d81f      	bhi.n	8011716 <_printf_float+0x17e>
 80116d6:	464a      	mov	r2, r9
 80116d8:	3901      	subs	r1, #1
 80116da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80116de:	910d      	str	r1, [sp, #52]	; 0x34
 80116e0:	f7ff ff1b 	bl	801151a <__exponent>
 80116e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80116e6:	4682      	mov	sl, r0
 80116e8:	1813      	adds	r3, r2, r0
 80116ea:	2a01      	cmp	r2, #1
 80116ec:	6123      	str	r3, [r4, #16]
 80116ee:	dc02      	bgt.n	80116f6 <_printf_float+0x15e>
 80116f0:	6822      	ldr	r2, [r4, #0]
 80116f2:	07d2      	lsls	r2, r2, #31
 80116f4:	d501      	bpl.n	80116fa <_printf_float+0x162>
 80116f6:	3301      	adds	r3, #1
 80116f8:	6123      	str	r3, [r4, #16]
 80116fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d09b      	beq.n	801163a <_printf_float+0xa2>
 8011702:	232d      	movs	r3, #45	; 0x2d
 8011704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011708:	e797      	b.n	801163a <_printf_float+0xa2>
 801170a:	2947      	cmp	r1, #71	; 0x47
 801170c:	d1bc      	bne.n	8011688 <_printf_float+0xf0>
 801170e:	2b00      	cmp	r3, #0
 8011710:	d1ba      	bne.n	8011688 <_printf_float+0xf0>
 8011712:	2301      	movs	r3, #1
 8011714:	e7b7      	b.n	8011686 <_printf_float+0xee>
 8011716:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801171a:	d118      	bne.n	801174e <_printf_float+0x1b6>
 801171c:	2900      	cmp	r1, #0
 801171e:	6863      	ldr	r3, [r4, #4]
 8011720:	dd0b      	ble.n	801173a <_printf_float+0x1a2>
 8011722:	6121      	str	r1, [r4, #16]
 8011724:	b913      	cbnz	r3, 801172c <_printf_float+0x194>
 8011726:	6822      	ldr	r2, [r4, #0]
 8011728:	07d0      	lsls	r0, r2, #31
 801172a:	d502      	bpl.n	8011732 <_printf_float+0x19a>
 801172c:	3301      	adds	r3, #1
 801172e:	440b      	add	r3, r1
 8011730:	6123      	str	r3, [r4, #16]
 8011732:	f04f 0a00 	mov.w	sl, #0
 8011736:	65a1      	str	r1, [r4, #88]	; 0x58
 8011738:	e7df      	b.n	80116fa <_printf_float+0x162>
 801173a:	b913      	cbnz	r3, 8011742 <_printf_float+0x1aa>
 801173c:	6822      	ldr	r2, [r4, #0]
 801173e:	07d2      	lsls	r2, r2, #31
 8011740:	d501      	bpl.n	8011746 <_printf_float+0x1ae>
 8011742:	3302      	adds	r3, #2
 8011744:	e7f4      	b.n	8011730 <_printf_float+0x198>
 8011746:	2301      	movs	r3, #1
 8011748:	e7f2      	b.n	8011730 <_printf_float+0x198>
 801174a:	f04f 0967 	mov.w	r9, #103	; 0x67
 801174e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011750:	4299      	cmp	r1, r3
 8011752:	db05      	blt.n	8011760 <_printf_float+0x1c8>
 8011754:	6823      	ldr	r3, [r4, #0]
 8011756:	6121      	str	r1, [r4, #16]
 8011758:	07d8      	lsls	r0, r3, #31
 801175a:	d5ea      	bpl.n	8011732 <_printf_float+0x19a>
 801175c:	1c4b      	adds	r3, r1, #1
 801175e:	e7e7      	b.n	8011730 <_printf_float+0x198>
 8011760:	2900      	cmp	r1, #0
 8011762:	bfcc      	ite	gt
 8011764:	2201      	movgt	r2, #1
 8011766:	f1c1 0202 	rsble	r2, r1, #2
 801176a:	4413      	add	r3, r2
 801176c:	e7e0      	b.n	8011730 <_printf_float+0x198>
 801176e:	6823      	ldr	r3, [r4, #0]
 8011770:	055a      	lsls	r2, r3, #21
 8011772:	d407      	bmi.n	8011784 <_printf_float+0x1ec>
 8011774:	6923      	ldr	r3, [r4, #16]
 8011776:	4642      	mov	r2, r8
 8011778:	4631      	mov	r1, r6
 801177a:	4628      	mov	r0, r5
 801177c:	47b8      	blx	r7
 801177e:	3001      	adds	r0, #1
 8011780:	d12b      	bne.n	80117da <_printf_float+0x242>
 8011782:	e764      	b.n	801164e <_printf_float+0xb6>
 8011784:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011788:	f240 80dd 	bls.w	8011946 <_printf_float+0x3ae>
 801178c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011790:	2200      	movs	r2, #0
 8011792:	2300      	movs	r3, #0
 8011794:	f7ef f952 	bl	8000a3c <__aeabi_dcmpeq>
 8011798:	2800      	cmp	r0, #0
 801179a:	d033      	beq.n	8011804 <_printf_float+0x26c>
 801179c:	2301      	movs	r3, #1
 801179e:	4631      	mov	r1, r6
 80117a0:	4628      	mov	r0, r5
 80117a2:	4a35      	ldr	r2, [pc, #212]	; (8011878 <_printf_float+0x2e0>)
 80117a4:	47b8      	blx	r7
 80117a6:	3001      	adds	r0, #1
 80117a8:	f43f af51 	beq.w	801164e <_printf_float+0xb6>
 80117ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80117b0:	429a      	cmp	r2, r3
 80117b2:	db02      	blt.n	80117ba <_printf_float+0x222>
 80117b4:	6823      	ldr	r3, [r4, #0]
 80117b6:	07d8      	lsls	r0, r3, #31
 80117b8:	d50f      	bpl.n	80117da <_printf_float+0x242>
 80117ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80117be:	4631      	mov	r1, r6
 80117c0:	4628      	mov	r0, r5
 80117c2:	47b8      	blx	r7
 80117c4:	3001      	adds	r0, #1
 80117c6:	f43f af42 	beq.w	801164e <_printf_float+0xb6>
 80117ca:	f04f 0800 	mov.w	r8, #0
 80117ce:	f104 091a 	add.w	r9, r4, #26
 80117d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80117d4:	3b01      	subs	r3, #1
 80117d6:	4543      	cmp	r3, r8
 80117d8:	dc09      	bgt.n	80117ee <_printf_float+0x256>
 80117da:	6823      	ldr	r3, [r4, #0]
 80117dc:	079b      	lsls	r3, r3, #30
 80117de:	f100 8102 	bmi.w	80119e6 <_printf_float+0x44e>
 80117e2:	68e0      	ldr	r0, [r4, #12]
 80117e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117e6:	4298      	cmp	r0, r3
 80117e8:	bfb8      	it	lt
 80117ea:	4618      	movlt	r0, r3
 80117ec:	e731      	b.n	8011652 <_printf_float+0xba>
 80117ee:	2301      	movs	r3, #1
 80117f0:	464a      	mov	r2, r9
 80117f2:	4631      	mov	r1, r6
 80117f4:	4628      	mov	r0, r5
 80117f6:	47b8      	blx	r7
 80117f8:	3001      	adds	r0, #1
 80117fa:	f43f af28 	beq.w	801164e <_printf_float+0xb6>
 80117fe:	f108 0801 	add.w	r8, r8, #1
 8011802:	e7e6      	b.n	80117d2 <_printf_float+0x23a>
 8011804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011806:	2b00      	cmp	r3, #0
 8011808:	dc38      	bgt.n	801187c <_printf_float+0x2e4>
 801180a:	2301      	movs	r3, #1
 801180c:	4631      	mov	r1, r6
 801180e:	4628      	mov	r0, r5
 8011810:	4a19      	ldr	r2, [pc, #100]	; (8011878 <_printf_float+0x2e0>)
 8011812:	47b8      	blx	r7
 8011814:	3001      	adds	r0, #1
 8011816:	f43f af1a 	beq.w	801164e <_printf_float+0xb6>
 801181a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801181e:	4313      	orrs	r3, r2
 8011820:	d102      	bne.n	8011828 <_printf_float+0x290>
 8011822:	6823      	ldr	r3, [r4, #0]
 8011824:	07d9      	lsls	r1, r3, #31
 8011826:	d5d8      	bpl.n	80117da <_printf_float+0x242>
 8011828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801182c:	4631      	mov	r1, r6
 801182e:	4628      	mov	r0, r5
 8011830:	47b8      	blx	r7
 8011832:	3001      	adds	r0, #1
 8011834:	f43f af0b 	beq.w	801164e <_printf_float+0xb6>
 8011838:	f04f 0900 	mov.w	r9, #0
 801183c:	f104 0a1a 	add.w	sl, r4, #26
 8011840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011842:	425b      	negs	r3, r3
 8011844:	454b      	cmp	r3, r9
 8011846:	dc01      	bgt.n	801184c <_printf_float+0x2b4>
 8011848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801184a:	e794      	b.n	8011776 <_printf_float+0x1de>
 801184c:	2301      	movs	r3, #1
 801184e:	4652      	mov	r2, sl
 8011850:	4631      	mov	r1, r6
 8011852:	4628      	mov	r0, r5
 8011854:	47b8      	blx	r7
 8011856:	3001      	adds	r0, #1
 8011858:	f43f aef9 	beq.w	801164e <_printf_float+0xb6>
 801185c:	f109 0901 	add.w	r9, r9, #1
 8011860:	e7ee      	b.n	8011840 <_printf_float+0x2a8>
 8011862:	bf00      	nop
 8011864:	7fefffff 	.word	0x7fefffff
 8011868:	08015c10 	.word	0x08015c10
 801186c:	08015c14 	.word	0x08015c14
 8011870:	08015c1c 	.word	0x08015c1c
 8011874:	08015c18 	.word	0x08015c18
 8011878:	08015c20 	.word	0x08015c20
 801187c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801187e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011880:	429a      	cmp	r2, r3
 8011882:	bfa8      	it	ge
 8011884:	461a      	movge	r2, r3
 8011886:	2a00      	cmp	r2, #0
 8011888:	4691      	mov	r9, r2
 801188a:	dc37      	bgt.n	80118fc <_printf_float+0x364>
 801188c:	f04f 0b00 	mov.w	fp, #0
 8011890:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011894:	f104 021a 	add.w	r2, r4, #26
 8011898:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801189c:	ebaa 0309 	sub.w	r3, sl, r9
 80118a0:	455b      	cmp	r3, fp
 80118a2:	dc33      	bgt.n	801190c <_printf_float+0x374>
 80118a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80118a8:	429a      	cmp	r2, r3
 80118aa:	db3b      	blt.n	8011924 <_printf_float+0x38c>
 80118ac:	6823      	ldr	r3, [r4, #0]
 80118ae:	07da      	lsls	r2, r3, #31
 80118b0:	d438      	bmi.n	8011924 <_printf_float+0x38c>
 80118b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80118b6:	eba2 030a 	sub.w	r3, r2, sl
 80118ba:	eba2 0901 	sub.w	r9, r2, r1
 80118be:	4599      	cmp	r9, r3
 80118c0:	bfa8      	it	ge
 80118c2:	4699      	movge	r9, r3
 80118c4:	f1b9 0f00 	cmp.w	r9, #0
 80118c8:	dc34      	bgt.n	8011934 <_printf_float+0x39c>
 80118ca:	f04f 0800 	mov.w	r8, #0
 80118ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80118d2:	f104 0a1a 	add.w	sl, r4, #26
 80118d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80118da:	1a9b      	subs	r3, r3, r2
 80118dc:	eba3 0309 	sub.w	r3, r3, r9
 80118e0:	4543      	cmp	r3, r8
 80118e2:	f77f af7a 	ble.w	80117da <_printf_float+0x242>
 80118e6:	2301      	movs	r3, #1
 80118e8:	4652      	mov	r2, sl
 80118ea:	4631      	mov	r1, r6
 80118ec:	4628      	mov	r0, r5
 80118ee:	47b8      	blx	r7
 80118f0:	3001      	adds	r0, #1
 80118f2:	f43f aeac 	beq.w	801164e <_printf_float+0xb6>
 80118f6:	f108 0801 	add.w	r8, r8, #1
 80118fa:	e7ec      	b.n	80118d6 <_printf_float+0x33e>
 80118fc:	4613      	mov	r3, r2
 80118fe:	4631      	mov	r1, r6
 8011900:	4642      	mov	r2, r8
 8011902:	4628      	mov	r0, r5
 8011904:	47b8      	blx	r7
 8011906:	3001      	adds	r0, #1
 8011908:	d1c0      	bne.n	801188c <_printf_float+0x2f4>
 801190a:	e6a0      	b.n	801164e <_printf_float+0xb6>
 801190c:	2301      	movs	r3, #1
 801190e:	4631      	mov	r1, r6
 8011910:	4628      	mov	r0, r5
 8011912:	920b      	str	r2, [sp, #44]	; 0x2c
 8011914:	47b8      	blx	r7
 8011916:	3001      	adds	r0, #1
 8011918:	f43f ae99 	beq.w	801164e <_printf_float+0xb6>
 801191c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801191e:	f10b 0b01 	add.w	fp, fp, #1
 8011922:	e7b9      	b.n	8011898 <_printf_float+0x300>
 8011924:	4631      	mov	r1, r6
 8011926:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801192a:	4628      	mov	r0, r5
 801192c:	47b8      	blx	r7
 801192e:	3001      	adds	r0, #1
 8011930:	d1bf      	bne.n	80118b2 <_printf_float+0x31a>
 8011932:	e68c      	b.n	801164e <_printf_float+0xb6>
 8011934:	464b      	mov	r3, r9
 8011936:	4631      	mov	r1, r6
 8011938:	4628      	mov	r0, r5
 801193a:	eb08 020a 	add.w	r2, r8, sl
 801193e:	47b8      	blx	r7
 8011940:	3001      	adds	r0, #1
 8011942:	d1c2      	bne.n	80118ca <_printf_float+0x332>
 8011944:	e683      	b.n	801164e <_printf_float+0xb6>
 8011946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011948:	2a01      	cmp	r2, #1
 801194a:	dc01      	bgt.n	8011950 <_printf_float+0x3b8>
 801194c:	07db      	lsls	r3, r3, #31
 801194e:	d537      	bpl.n	80119c0 <_printf_float+0x428>
 8011950:	2301      	movs	r3, #1
 8011952:	4642      	mov	r2, r8
 8011954:	4631      	mov	r1, r6
 8011956:	4628      	mov	r0, r5
 8011958:	47b8      	blx	r7
 801195a:	3001      	adds	r0, #1
 801195c:	f43f ae77 	beq.w	801164e <_printf_float+0xb6>
 8011960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011964:	4631      	mov	r1, r6
 8011966:	4628      	mov	r0, r5
 8011968:	47b8      	blx	r7
 801196a:	3001      	adds	r0, #1
 801196c:	f43f ae6f 	beq.w	801164e <_printf_float+0xb6>
 8011970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011974:	2200      	movs	r2, #0
 8011976:	2300      	movs	r3, #0
 8011978:	f7ef f860 	bl	8000a3c <__aeabi_dcmpeq>
 801197c:	b9d8      	cbnz	r0, 80119b6 <_printf_float+0x41e>
 801197e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011980:	f108 0201 	add.w	r2, r8, #1
 8011984:	3b01      	subs	r3, #1
 8011986:	4631      	mov	r1, r6
 8011988:	4628      	mov	r0, r5
 801198a:	47b8      	blx	r7
 801198c:	3001      	adds	r0, #1
 801198e:	d10e      	bne.n	80119ae <_printf_float+0x416>
 8011990:	e65d      	b.n	801164e <_printf_float+0xb6>
 8011992:	2301      	movs	r3, #1
 8011994:	464a      	mov	r2, r9
 8011996:	4631      	mov	r1, r6
 8011998:	4628      	mov	r0, r5
 801199a:	47b8      	blx	r7
 801199c:	3001      	adds	r0, #1
 801199e:	f43f ae56 	beq.w	801164e <_printf_float+0xb6>
 80119a2:	f108 0801 	add.w	r8, r8, #1
 80119a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119a8:	3b01      	subs	r3, #1
 80119aa:	4543      	cmp	r3, r8
 80119ac:	dcf1      	bgt.n	8011992 <_printf_float+0x3fa>
 80119ae:	4653      	mov	r3, sl
 80119b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80119b4:	e6e0      	b.n	8011778 <_printf_float+0x1e0>
 80119b6:	f04f 0800 	mov.w	r8, #0
 80119ba:	f104 091a 	add.w	r9, r4, #26
 80119be:	e7f2      	b.n	80119a6 <_printf_float+0x40e>
 80119c0:	2301      	movs	r3, #1
 80119c2:	4642      	mov	r2, r8
 80119c4:	e7df      	b.n	8011986 <_printf_float+0x3ee>
 80119c6:	2301      	movs	r3, #1
 80119c8:	464a      	mov	r2, r9
 80119ca:	4631      	mov	r1, r6
 80119cc:	4628      	mov	r0, r5
 80119ce:	47b8      	blx	r7
 80119d0:	3001      	adds	r0, #1
 80119d2:	f43f ae3c 	beq.w	801164e <_printf_float+0xb6>
 80119d6:	f108 0801 	add.w	r8, r8, #1
 80119da:	68e3      	ldr	r3, [r4, #12]
 80119dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80119de:	1a5b      	subs	r3, r3, r1
 80119e0:	4543      	cmp	r3, r8
 80119e2:	dcf0      	bgt.n	80119c6 <_printf_float+0x42e>
 80119e4:	e6fd      	b.n	80117e2 <_printf_float+0x24a>
 80119e6:	f04f 0800 	mov.w	r8, #0
 80119ea:	f104 0919 	add.w	r9, r4, #25
 80119ee:	e7f4      	b.n	80119da <_printf_float+0x442>

080119f0 <_printf_common>:
 80119f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119f4:	4616      	mov	r6, r2
 80119f6:	4699      	mov	r9, r3
 80119f8:	688a      	ldr	r2, [r1, #8]
 80119fa:	690b      	ldr	r3, [r1, #16]
 80119fc:	4607      	mov	r7, r0
 80119fe:	4293      	cmp	r3, r2
 8011a00:	bfb8      	it	lt
 8011a02:	4613      	movlt	r3, r2
 8011a04:	6033      	str	r3, [r6, #0]
 8011a06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011a0a:	460c      	mov	r4, r1
 8011a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011a10:	b10a      	cbz	r2, 8011a16 <_printf_common+0x26>
 8011a12:	3301      	adds	r3, #1
 8011a14:	6033      	str	r3, [r6, #0]
 8011a16:	6823      	ldr	r3, [r4, #0]
 8011a18:	0699      	lsls	r1, r3, #26
 8011a1a:	bf42      	ittt	mi
 8011a1c:	6833      	ldrmi	r3, [r6, #0]
 8011a1e:	3302      	addmi	r3, #2
 8011a20:	6033      	strmi	r3, [r6, #0]
 8011a22:	6825      	ldr	r5, [r4, #0]
 8011a24:	f015 0506 	ands.w	r5, r5, #6
 8011a28:	d106      	bne.n	8011a38 <_printf_common+0x48>
 8011a2a:	f104 0a19 	add.w	sl, r4, #25
 8011a2e:	68e3      	ldr	r3, [r4, #12]
 8011a30:	6832      	ldr	r2, [r6, #0]
 8011a32:	1a9b      	subs	r3, r3, r2
 8011a34:	42ab      	cmp	r3, r5
 8011a36:	dc28      	bgt.n	8011a8a <_printf_common+0x9a>
 8011a38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011a3c:	1e13      	subs	r3, r2, #0
 8011a3e:	6822      	ldr	r2, [r4, #0]
 8011a40:	bf18      	it	ne
 8011a42:	2301      	movne	r3, #1
 8011a44:	0692      	lsls	r2, r2, #26
 8011a46:	d42d      	bmi.n	8011aa4 <_printf_common+0xb4>
 8011a48:	4649      	mov	r1, r9
 8011a4a:	4638      	mov	r0, r7
 8011a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011a50:	47c0      	blx	r8
 8011a52:	3001      	adds	r0, #1
 8011a54:	d020      	beq.n	8011a98 <_printf_common+0xa8>
 8011a56:	6823      	ldr	r3, [r4, #0]
 8011a58:	68e5      	ldr	r5, [r4, #12]
 8011a5a:	f003 0306 	and.w	r3, r3, #6
 8011a5e:	2b04      	cmp	r3, #4
 8011a60:	bf18      	it	ne
 8011a62:	2500      	movne	r5, #0
 8011a64:	6832      	ldr	r2, [r6, #0]
 8011a66:	f04f 0600 	mov.w	r6, #0
 8011a6a:	68a3      	ldr	r3, [r4, #8]
 8011a6c:	bf08      	it	eq
 8011a6e:	1aad      	subeq	r5, r5, r2
 8011a70:	6922      	ldr	r2, [r4, #16]
 8011a72:	bf08      	it	eq
 8011a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a78:	4293      	cmp	r3, r2
 8011a7a:	bfc4      	itt	gt
 8011a7c:	1a9b      	subgt	r3, r3, r2
 8011a7e:	18ed      	addgt	r5, r5, r3
 8011a80:	341a      	adds	r4, #26
 8011a82:	42b5      	cmp	r5, r6
 8011a84:	d11a      	bne.n	8011abc <_printf_common+0xcc>
 8011a86:	2000      	movs	r0, #0
 8011a88:	e008      	b.n	8011a9c <_printf_common+0xac>
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	4652      	mov	r2, sl
 8011a8e:	4649      	mov	r1, r9
 8011a90:	4638      	mov	r0, r7
 8011a92:	47c0      	blx	r8
 8011a94:	3001      	adds	r0, #1
 8011a96:	d103      	bne.n	8011aa0 <_printf_common+0xb0>
 8011a98:	f04f 30ff 	mov.w	r0, #4294967295
 8011a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aa0:	3501      	adds	r5, #1
 8011aa2:	e7c4      	b.n	8011a2e <_printf_common+0x3e>
 8011aa4:	2030      	movs	r0, #48	; 0x30
 8011aa6:	18e1      	adds	r1, r4, r3
 8011aa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011aac:	1c5a      	adds	r2, r3, #1
 8011aae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011ab2:	4422      	add	r2, r4
 8011ab4:	3302      	adds	r3, #2
 8011ab6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011aba:	e7c5      	b.n	8011a48 <_printf_common+0x58>
 8011abc:	2301      	movs	r3, #1
 8011abe:	4622      	mov	r2, r4
 8011ac0:	4649      	mov	r1, r9
 8011ac2:	4638      	mov	r0, r7
 8011ac4:	47c0      	blx	r8
 8011ac6:	3001      	adds	r0, #1
 8011ac8:	d0e6      	beq.n	8011a98 <_printf_common+0xa8>
 8011aca:	3601      	adds	r6, #1
 8011acc:	e7d9      	b.n	8011a82 <_printf_common+0x92>
	...

08011ad0 <_printf_i>:
 8011ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ad4:	460c      	mov	r4, r1
 8011ad6:	7e27      	ldrb	r7, [r4, #24]
 8011ad8:	4691      	mov	r9, r2
 8011ada:	2f78      	cmp	r7, #120	; 0x78
 8011adc:	4680      	mov	r8, r0
 8011ade:	469a      	mov	sl, r3
 8011ae0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ae6:	d807      	bhi.n	8011af8 <_printf_i+0x28>
 8011ae8:	2f62      	cmp	r7, #98	; 0x62
 8011aea:	d80a      	bhi.n	8011b02 <_printf_i+0x32>
 8011aec:	2f00      	cmp	r7, #0
 8011aee:	f000 80d9 	beq.w	8011ca4 <_printf_i+0x1d4>
 8011af2:	2f58      	cmp	r7, #88	; 0x58
 8011af4:	f000 80a4 	beq.w	8011c40 <_printf_i+0x170>
 8011af8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011b00:	e03a      	b.n	8011b78 <_printf_i+0xa8>
 8011b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011b06:	2b15      	cmp	r3, #21
 8011b08:	d8f6      	bhi.n	8011af8 <_printf_i+0x28>
 8011b0a:	a001      	add	r0, pc, #4	; (adr r0, 8011b10 <_printf_i+0x40>)
 8011b0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011b10:	08011b69 	.word	0x08011b69
 8011b14:	08011b7d 	.word	0x08011b7d
 8011b18:	08011af9 	.word	0x08011af9
 8011b1c:	08011af9 	.word	0x08011af9
 8011b20:	08011af9 	.word	0x08011af9
 8011b24:	08011af9 	.word	0x08011af9
 8011b28:	08011b7d 	.word	0x08011b7d
 8011b2c:	08011af9 	.word	0x08011af9
 8011b30:	08011af9 	.word	0x08011af9
 8011b34:	08011af9 	.word	0x08011af9
 8011b38:	08011af9 	.word	0x08011af9
 8011b3c:	08011c8b 	.word	0x08011c8b
 8011b40:	08011bad 	.word	0x08011bad
 8011b44:	08011c6d 	.word	0x08011c6d
 8011b48:	08011af9 	.word	0x08011af9
 8011b4c:	08011af9 	.word	0x08011af9
 8011b50:	08011cad 	.word	0x08011cad
 8011b54:	08011af9 	.word	0x08011af9
 8011b58:	08011bad 	.word	0x08011bad
 8011b5c:	08011af9 	.word	0x08011af9
 8011b60:	08011af9 	.word	0x08011af9
 8011b64:	08011c75 	.word	0x08011c75
 8011b68:	680b      	ldr	r3, [r1, #0]
 8011b6a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011b6e:	1d1a      	adds	r2, r3, #4
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	600a      	str	r2, [r1, #0]
 8011b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011b78:	2301      	movs	r3, #1
 8011b7a:	e0a4      	b.n	8011cc6 <_printf_i+0x1f6>
 8011b7c:	6825      	ldr	r5, [r4, #0]
 8011b7e:	6808      	ldr	r0, [r1, #0]
 8011b80:	062e      	lsls	r6, r5, #24
 8011b82:	f100 0304 	add.w	r3, r0, #4
 8011b86:	d50a      	bpl.n	8011b9e <_printf_i+0xce>
 8011b88:	6805      	ldr	r5, [r0, #0]
 8011b8a:	600b      	str	r3, [r1, #0]
 8011b8c:	2d00      	cmp	r5, #0
 8011b8e:	da03      	bge.n	8011b98 <_printf_i+0xc8>
 8011b90:	232d      	movs	r3, #45	; 0x2d
 8011b92:	426d      	negs	r5, r5
 8011b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b98:	230a      	movs	r3, #10
 8011b9a:	485e      	ldr	r0, [pc, #376]	; (8011d14 <_printf_i+0x244>)
 8011b9c:	e019      	b.n	8011bd2 <_printf_i+0x102>
 8011b9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011ba2:	6805      	ldr	r5, [r0, #0]
 8011ba4:	600b      	str	r3, [r1, #0]
 8011ba6:	bf18      	it	ne
 8011ba8:	b22d      	sxthne	r5, r5
 8011baa:	e7ef      	b.n	8011b8c <_printf_i+0xbc>
 8011bac:	680b      	ldr	r3, [r1, #0]
 8011bae:	6825      	ldr	r5, [r4, #0]
 8011bb0:	1d18      	adds	r0, r3, #4
 8011bb2:	6008      	str	r0, [r1, #0]
 8011bb4:	0628      	lsls	r0, r5, #24
 8011bb6:	d501      	bpl.n	8011bbc <_printf_i+0xec>
 8011bb8:	681d      	ldr	r5, [r3, #0]
 8011bba:	e002      	b.n	8011bc2 <_printf_i+0xf2>
 8011bbc:	0669      	lsls	r1, r5, #25
 8011bbe:	d5fb      	bpl.n	8011bb8 <_printf_i+0xe8>
 8011bc0:	881d      	ldrh	r5, [r3, #0]
 8011bc2:	2f6f      	cmp	r7, #111	; 0x6f
 8011bc4:	bf0c      	ite	eq
 8011bc6:	2308      	moveq	r3, #8
 8011bc8:	230a      	movne	r3, #10
 8011bca:	4852      	ldr	r0, [pc, #328]	; (8011d14 <_printf_i+0x244>)
 8011bcc:	2100      	movs	r1, #0
 8011bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011bd2:	6866      	ldr	r6, [r4, #4]
 8011bd4:	2e00      	cmp	r6, #0
 8011bd6:	bfa8      	it	ge
 8011bd8:	6821      	ldrge	r1, [r4, #0]
 8011bda:	60a6      	str	r6, [r4, #8]
 8011bdc:	bfa4      	itt	ge
 8011bde:	f021 0104 	bicge.w	r1, r1, #4
 8011be2:	6021      	strge	r1, [r4, #0]
 8011be4:	b90d      	cbnz	r5, 8011bea <_printf_i+0x11a>
 8011be6:	2e00      	cmp	r6, #0
 8011be8:	d04d      	beq.n	8011c86 <_printf_i+0x1b6>
 8011bea:	4616      	mov	r6, r2
 8011bec:	fbb5 f1f3 	udiv	r1, r5, r3
 8011bf0:	fb03 5711 	mls	r7, r3, r1, r5
 8011bf4:	5dc7      	ldrb	r7, [r0, r7]
 8011bf6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011bfa:	462f      	mov	r7, r5
 8011bfc:	42bb      	cmp	r3, r7
 8011bfe:	460d      	mov	r5, r1
 8011c00:	d9f4      	bls.n	8011bec <_printf_i+0x11c>
 8011c02:	2b08      	cmp	r3, #8
 8011c04:	d10b      	bne.n	8011c1e <_printf_i+0x14e>
 8011c06:	6823      	ldr	r3, [r4, #0]
 8011c08:	07df      	lsls	r7, r3, #31
 8011c0a:	d508      	bpl.n	8011c1e <_printf_i+0x14e>
 8011c0c:	6923      	ldr	r3, [r4, #16]
 8011c0e:	6861      	ldr	r1, [r4, #4]
 8011c10:	4299      	cmp	r1, r3
 8011c12:	bfde      	ittt	le
 8011c14:	2330      	movle	r3, #48	; 0x30
 8011c16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011c1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011c1e:	1b92      	subs	r2, r2, r6
 8011c20:	6122      	str	r2, [r4, #16]
 8011c22:	464b      	mov	r3, r9
 8011c24:	4621      	mov	r1, r4
 8011c26:	4640      	mov	r0, r8
 8011c28:	f8cd a000 	str.w	sl, [sp]
 8011c2c:	aa03      	add	r2, sp, #12
 8011c2e:	f7ff fedf 	bl	80119f0 <_printf_common>
 8011c32:	3001      	adds	r0, #1
 8011c34:	d14c      	bne.n	8011cd0 <_printf_i+0x200>
 8011c36:	f04f 30ff 	mov.w	r0, #4294967295
 8011c3a:	b004      	add	sp, #16
 8011c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c40:	4834      	ldr	r0, [pc, #208]	; (8011d14 <_printf_i+0x244>)
 8011c42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011c46:	680e      	ldr	r6, [r1, #0]
 8011c48:	6823      	ldr	r3, [r4, #0]
 8011c4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8011c4e:	061f      	lsls	r7, r3, #24
 8011c50:	600e      	str	r6, [r1, #0]
 8011c52:	d514      	bpl.n	8011c7e <_printf_i+0x1ae>
 8011c54:	07d9      	lsls	r1, r3, #31
 8011c56:	bf44      	itt	mi
 8011c58:	f043 0320 	orrmi.w	r3, r3, #32
 8011c5c:	6023      	strmi	r3, [r4, #0]
 8011c5e:	b91d      	cbnz	r5, 8011c68 <_printf_i+0x198>
 8011c60:	6823      	ldr	r3, [r4, #0]
 8011c62:	f023 0320 	bic.w	r3, r3, #32
 8011c66:	6023      	str	r3, [r4, #0]
 8011c68:	2310      	movs	r3, #16
 8011c6a:	e7af      	b.n	8011bcc <_printf_i+0xfc>
 8011c6c:	6823      	ldr	r3, [r4, #0]
 8011c6e:	f043 0320 	orr.w	r3, r3, #32
 8011c72:	6023      	str	r3, [r4, #0]
 8011c74:	2378      	movs	r3, #120	; 0x78
 8011c76:	4828      	ldr	r0, [pc, #160]	; (8011d18 <_printf_i+0x248>)
 8011c78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c7c:	e7e3      	b.n	8011c46 <_printf_i+0x176>
 8011c7e:	065e      	lsls	r6, r3, #25
 8011c80:	bf48      	it	mi
 8011c82:	b2ad      	uxthmi	r5, r5
 8011c84:	e7e6      	b.n	8011c54 <_printf_i+0x184>
 8011c86:	4616      	mov	r6, r2
 8011c88:	e7bb      	b.n	8011c02 <_printf_i+0x132>
 8011c8a:	680b      	ldr	r3, [r1, #0]
 8011c8c:	6826      	ldr	r6, [r4, #0]
 8011c8e:	1d1d      	adds	r5, r3, #4
 8011c90:	6960      	ldr	r0, [r4, #20]
 8011c92:	600d      	str	r5, [r1, #0]
 8011c94:	0635      	lsls	r5, r6, #24
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	d501      	bpl.n	8011c9e <_printf_i+0x1ce>
 8011c9a:	6018      	str	r0, [r3, #0]
 8011c9c:	e002      	b.n	8011ca4 <_printf_i+0x1d4>
 8011c9e:	0671      	lsls	r1, r6, #25
 8011ca0:	d5fb      	bpl.n	8011c9a <_printf_i+0x1ca>
 8011ca2:	8018      	strh	r0, [r3, #0]
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	4616      	mov	r6, r2
 8011ca8:	6123      	str	r3, [r4, #16]
 8011caa:	e7ba      	b.n	8011c22 <_printf_i+0x152>
 8011cac:	680b      	ldr	r3, [r1, #0]
 8011cae:	1d1a      	adds	r2, r3, #4
 8011cb0:	600a      	str	r2, [r1, #0]
 8011cb2:	681e      	ldr	r6, [r3, #0]
 8011cb4:	2100      	movs	r1, #0
 8011cb6:	4630      	mov	r0, r6
 8011cb8:	6862      	ldr	r2, [r4, #4]
 8011cba:	f002 fcb7 	bl	801462c <memchr>
 8011cbe:	b108      	cbz	r0, 8011cc4 <_printf_i+0x1f4>
 8011cc0:	1b80      	subs	r0, r0, r6
 8011cc2:	6060      	str	r0, [r4, #4]
 8011cc4:	6863      	ldr	r3, [r4, #4]
 8011cc6:	6123      	str	r3, [r4, #16]
 8011cc8:	2300      	movs	r3, #0
 8011cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011cce:	e7a8      	b.n	8011c22 <_printf_i+0x152>
 8011cd0:	4632      	mov	r2, r6
 8011cd2:	4649      	mov	r1, r9
 8011cd4:	4640      	mov	r0, r8
 8011cd6:	6923      	ldr	r3, [r4, #16]
 8011cd8:	47d0      	blx	sl
 8011cda:	3001      	adds	r0, #1
 8011cdc:	d0ab      	beq.n	8011c36 <_printf_i+0x166>
 8011cde:	6823      	ldr	r3, [r4, #0]
 8011ce0:	079b      	lsls	r3, r3, #30
 8011ce2:	d413      	bmi.n	8011d0c <_printf_i+0x23c>
 8011ce4:	68e0      	ldr	r0, [r4, #12]
 8011ce6:	9b03      	ldr	r3, [sp, #12]
 8011ce8:	4298      	cmp	r0, r3
 8011cea:	bfb8      	it	lt
 8011cec:	4618      	movlt	r0, r3
 8011cee:	e7a4      	b.n	8011c3a <_printf_i+0x16a>
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	4632      	mov	r2, r6
 8011cf4:	4649      	mov	r1, r9
 8011cf6:	4640      	mov	r0, r8
 8011cf8:	47d0      	blx	sl
 8011cfa:	3001      	adds	r0, #1
 8011cfc:	d09b      	beq.n	8011c36 <_printf_i+0x166>
 8011cfe:	3501      	adds	r5, #1
 8011d00:	68e3      	ldr	r3, [r4, #12]
 8011d02:	9903      	ldr	r1, [sp, #12]
 8011d04:	1a5b      	subs	r3, r3, r1
 8011d06:	42ab      	cmp	r3, r5
 8011d08:	dcf2      	bgt.n	8011cf0 <_printf_i+0x220>
 8011d0a:	e7eb      	b.n	8011ce4 <_printf_i+0x214>
 8011d0c:	2500      	movs	r5, #0
 8011d0e:	f104 0619 	add.w	r6, r4, #25
 8011d12:	e7f5      	b.n	8011d00 <_printf_i+0x230>
 8011d14:	08015c22 	.word	0x08015c22
 8011d18:	08015c33 	.word	0x08015c33

08011d1c <_scanf_float>:
 8011d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d20:	b087      	sub	sp, #28
 8011d22:	9303      	str	r3, [sp, #12]
 8011d24:	688b      	ldr	r3, [r1, #8]
 8011d26:	4617      	mov	r7, r2
 8011d28:	1e5a      	subs	r2, r3, #1
 8011d2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011d2e:	bf85      	ittet	hi
 8011d30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011d34:	195b      	addhi	r3, r3, r5
 8011d36:	2300      	movls	r3, #0
 8011d38:	9302      	strhi	r3, [sp, #8]
 8011d3a:	bf88      	it	hi
 8011d3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011d40:	468b      	mov	fp, r1
 8011d42:	f04f 0500 	mov.w	r5, #0
 8011d46:	bf8c      	ite	hi
 8011d48:	608b      	strhi	r3, [r1, #8]
 8011d4a:	9302      	strls	r3, [sp, #8]
 8011d4c:	680b      	ldr	r3, [r1, #0]
 8011d4e:	4680      	mov	r8, r0
 8011d50:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011d54:	f84b 3b1c 	str.w	r3, [fp], #28
 8011d58:	460c      	mov	r4, r1
 8011d5a:	465e      	mov	r6, fp
 8011d5c:	46aa      	mov	sl, r5
 8011d5e:	46a9      	mov	r9, r5
 8011d60:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011d64:	9501      	str	r5, [sp, #4]
 8011d66:	68a2      	ldr	r2, [r4, #8]
 8011d68:	b152      	cbz	r2, 8011d80 <_scanf_float+0x64>
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	2b4e      	cmp	r3, #78	; 0x4e
 8011d70:	d864      	bhi.n	8011e3c <_scanf_float+0x120>
 8011d72:	2b40      	cmp	r3, #64	; 0x40
 8011d74:	d83c      	bhi.n	8011df0 <_scanf_float+0xd4>
 8011d76:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011d7a:	b2c8      	uxtb	r0, r1
 8011d7c:	280e      	cmp	r0, #14
 8011d7e:	d93a      	bls.n	8011df6 <_scanf_float+0xda>
 8011d80:	f1b9 0f00 	cmp.w	r9, #0
 8011d84:	d003      	beq.n	8011d8e <_scanf_float+0x72>
 8011d86:	6823      	ldr	r3, [r4, #0]
 8011d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011d8c:	6023      	str	r3, [r4, #0]
 8011d8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d92:	f1ba 0f01 	cmp.w	sl, #1
 8011d96:	f200 8113 	bhi.w	8011fc0 <_scanf_float+0x2a4>
 8011d9a:	455e      	cmp	r6, fp
 8011d9c:	f200 8105 	bhi.w	8011faa <_scanf_float+0x28e>
 8011da0:	2501      	movs	r5, #1
 8011da2:	4628      	mov	r0, r5
 8011da4:	b007      	add	sp, #28
 8011da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011daa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011dae:	2a0d      	cmp	r2, #13
 8011db0:	d8e6      	bhi.n	8011d80 <_scanf_float+0x64>
 8011db2:	a101      	add	r1, pc, #4	; (adr r1, 8011db8 <_scanf_float+0x9c>)
 8011db4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011db8:	08011ef7 	.word	0x08011ef7
 8011dbc:	08011d81 	.word	0x08011d81
 8011dc0:	08011d81 	.word	0x08011d81
 8011dc4:	08011d81 	.word	0x08011d81
 8011dc8:	08011f57 	.word	0x08011f57
 8011dcc:	08011f2f 	.word	0x08011f2f
 8011dd0:	08011d81 	.word	0x08011d81
 8011dd4:	08011d81 	.word	0x08011d81
 8011dd8:	08011f05 	.word	0x08011f05
 8011ddc:	08011d81 	.word	0x08011d81
 8011de0:	08011d81 	.word	0x08011d81
 8011de4:	08011d81 	.word	0x08011d81
 8011de8:	08011d81 	.word	0x08011d81
 8011dec:	08011ebd 	.word	0x08011ebd
 8011df0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011df4:	e7db      	b.n	8011dae <_scanf_float+0x92>
 8011df6:	290e      	cmp	r1, #14
 8011df8:	d8c2      	bhi.n	8011d80 <_scanf_float+0x64>
 8011dfa:	a001      	add	r0, pc, #4	; (adr r0, 8011e00 <_scanf_float+0xe4>)
 8011dfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011e00:	08011eaf 	.word	0x08011eaf
 8011e04:	08011d81 	.word	0x08011d81
 8011e08:	08011eaf 	.word	0x08011eaf
 8011e0c:	08011f43 	.word	0x08011f43
 8011e10:	08011d81 	.word	0x08011d81
 8011e14:	08011e5d 	.word	0x08011e5d
 8011e18:	08011e99 	.word	0x08011e99
 8011e1c:	08011e99 	.word	0x08011e99
 8011e20:	08011e99 	.word	0x08011e99
 8011e24:	08011e99 	.word	0x08011e99
 8011e28:	08011e99 	.word	0x08011e99
 8011e2c:	08011e99 	.word	0x08011e99
 8011e30:	08011e99 	.word	0x08011e99
 8011e34:	08011e99 	.word	0x08011e99
 8011e38:	08011e99 	.word	0x08011e99
 8011e3c:	2b6e      	cmp	r3, #110	; 0x6e
 8011e3e:	d809      	bhi.n	8011e54 <_scanf_float+0x138>
 8011e40:	2b60      	cmp	r3, #96	; 0x60
 8011e42:	d8b2      	bhi.n	8011daa <_scanf_float+0x8e>
 8011e44:	2b54      	cmp	r3, #84	; 0x54
 8011e46:	d077      	beq.n	8011f38 <_scanf_float+0x21c>
 8011e48:	2b59      	cmp	r3, #89	; 0x59
 8011e4a:	d199      	bne.n	8011d80 <_scanf_float+0x64>
 8011e4c:	2d07      	cmp	r5, #7
 8011e4e:	d197      	bne.n	8011d80 <_scanf_float+0x64>
 8011e50:	2508      	movs	r5, #8
 8011e52:	e029      	b.n	8011ea8 <_scanf_float+0x18c>
 8011e54:	2b74      	cmp	r3, #116	; 0x74
 8011e56:	d06f      	beq.n	8011f38 <_scanf_float+0x21c>
 8011e58:	2b79      	cmp	r3, #121	; 0x79
 8011e5a:	e7f6      	b.n	8011e4a <_scanf_float+0x12e>
 8011e5c:	6821      	ldr	r1, [r4, #0]
 8011e5e:	05c8      	lsls	r0, r1, #23
 8011e60:	d51a      	bpl.n	8011e98 <_scanf_float+0x17c>
 8011e62:	9b02      	ldr	r3, [sp, #8]
 8011e64:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011e68:	6021      	str	r1, [r4, #0]
 8011e6a:	f109 0901 	add.w	r9, r9, #1
 8011e6e:	b11b      	cbz	r3, 8011e78 <_scanf_float+0x15c>
 8011e70:	3b01      	subs	r3, #1
 8011e72:	3201      	adds	r2, #1
 8011e74:	9302      	str	r3, [sp, #8]
 8011e76:	60a2      	str	r2, [r4, #8]
 8011e78:	68a3      	ldr	r3, [r4, #8]
 8011e7a:	3b01      	subs	r3, #1
 8011e7c:	60a3      	str	r3, [r4, #8]
 8011e7e:	6923      	ldr	r3, [r4, #16]
 8011e80:	3301      	adds	r3, #1
 8011e82:	6123      	str	r3, [r4, #16]
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	3b01      	subs	r3, #1
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	607b      	str	r3, [r7, #4]
 8011e8c:	f340 8084 	ble.w	8011f98 <_scanf_float+0x27c>
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	3301      	adds	r3, #1
 8011e94:	603b      	str	r3, [r7, #0]
 8011e96:	e766      	b.n	8011d66 <_scanf_float+0x4a>
 8011e98:	eb1a 0f05 	cmn.w	sl, r5
 8011e9c:	f47f af70 	bne.w	8011d80 <_scanf_float+0x64>
 8011ea0:	6822      	ldr	r2, [r4, #0]
 8011ea2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011ea6:	6022      	str	r2, [r4, #0]
 8011ea8:	f806 3b01 	strb.w	r3, [r6], #1
 8011eac:	e7e4      	b.n	8011e78 <_scanf_float+0x15c>
 8011eae:	6822      	ldr	r2, [r4, #0]
 8011eb0:	0610      	lsls	r0, r2, #24
 8011eb2:	f57f af65 	bpl.w	8011d80 <_scanf_float+0x64>
 8011eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011eba:	e7f4      	b.n	8011ea6 <_scanf_float+0x18a>
 8011ebc:	f1ba 0f00 	cmp.w	sl, #0
 8011ec0:	d10e      	bne.n	8011ee0 <_scanf_float+0x1c4>
 8011ec2:	f1b9 0f00 	cmp.w	r9, #0
 8011ec6:	d10e      	bne.n	8011ee6 <_scanf_float+0x1ca>
 8011ec8:	6822      	ldr	r2, [r4, #0]
 8011eca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011ece:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011ed2:	d108      	bne.n	8011ee6 <_scanf_float+0x1ca>
 8011ed4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011ed8:	f04f 0a01 	mov.w	sl, #1
 8011edc:	6022      	str	r2, [r4, #0]
 8011ede:	e7e3      	b.n	8011ea8 <_scanf_float+0x18c>
 8011ee0:	f1ba 0f02 	cmp.w	sl, #2
 8011ee4:	d055      	beq.n	8011f92 <_scanf_float+0x276>
 8011ee6:	2d01      	cmp	r5, #1
 8011ee8:	d002      	beq.n	8011ef0 <_scanf_float+0x1d4>
 8011eea:	2d04      	cmp	r5, #4
 8011eec:	f47f af48 	bne.w	8011d80 <_scanf_float+0x64>
 8011ef0:	3501      	adds	r5, #1
 8011ef2:	b2ed      	uxtb	r5, r5
 8011ef4:	e7d8      	b.n	8011ea8 <_scanf_float+0x18c>
 8011ef6:	f1ba 0f01 	cmp.w	sl, #1
 8011efa:	f47f af41 	bne.w	8011d80 <_scanf_float+0x64>
 8011efe:	f04f 0a02 	mov.w	sl, #2
 8011f02:	e7d1      	b.n	8011ea8 <_scanf_float+0x18c>
 8011f04:	b97d      	cbnz	r5, 8011f26 <_scanf_float+0x20a>
 8011f06:	f1b9 0f00 	cmp.w	r9, #0
 8011f0a:	f47f af3c 	bne.w	8011d86 <_scanf_float+0x6a>
 8011f0e:	6822      	ldr	r2, [r4, #0]
 8011f10:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011f14:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011f18:	f47f af39 	bne.w	8011d8e <_scanf_float+0x72>
 8011f1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011f20:	2501      	movs	r5, #1
 8011f22:	6022      	str	r2, [r4, #0]
 8011f24:	e7c0      	b.n	8011ea8 <_scanf_float+0x18c>
 8011f26:	2d03      	cmp	r5, #3
 8011f28:	d0e2      	beq.n	8011ef0 <_scanf_float+0x1d4>
 8011f2a:	2d05      	cmp	r5, #5
 8011f2c:	e7de      	b.n	8011eec <_scanf_float+0x1d0>
 8011f2e:	2d02      	cmp	r5, #2
 8011f30:	f47f af26 	bne.w	8011d80 <_scanf_float+0x64>
 8011f34:	2503      	movs	r5, #3
 8011f36:	e7b7      	b.n	8011ea8 <_scanf_float+0x18c>
 8011f38:	2d06      	cmp	r5, #6
 8011f3a:	f47f af21 	bne.w	8011d80 <_scanf_float+0x64>
 8011f3e:	2507      	movs	r5, #7
 8011f40:	e7b2      	b.n	8011ea8 <_scanf_float+0x18c>
 8011f42:	6822      	ldr	r2, [r4, #0]
 8011f44:	0591      	lsls	r1, r2, #22
 8011f46:	f57f af1b 	bpl.w	8011d80 <_scanf_float+0x64>
 8011f4a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011f4e:	6022      	str	r2, [r4, #0]
 8011f50:	f8cd 9004 	str.w	r9, [sp, #4]
 8011f54:	e7a8      	b.n	8011ea8 <_scanf_float+0x18c>
 8011f56:	6822      	ldr	r2, [r4, #0]
 8011f58:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011f5c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011f60:	d006      	beq.n	8011f70 <_scanf_float+0x254>
 8011f62:	0550      	lsls	r0, r2, #21
 8011f64:	f57f af0c 	bpl.w	8011d80 <_scanf_float+0x64>
 8011f68:	f1b9 0f00 	cmp.w	r9, #0
 8011f6c:	f43f af0f 	beq.w	8011d8e <_scanf_float+0x72>
 8011f70:	0591      	lsls	r1, r2, #22
 8011f72:	bf58      	it	pl
 8011f74:	9901      	ldrpl	r1, [sp, #4]
 8011f76:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011f7a:	bf58      	it	pl
 8011f7c:	eba9 0101 	subpl.w	r1, r9, r1
 8011f80:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011f84:	f04f 0900 	mov.w	r9, #0
 8011f88:	bf58      	it	pl
 8011f8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011f8e:	6022      	str	r2, [r4, #0]
 8011f90:	e78a      	b.n	8011ea8 <_scanf_float+0x18c>
 8011f92:	f04f 0a03 	mov.w	sl, #3
 8011f96:	e787      	b.n	8011ea8 <_scanf_float+0x18c>
 8011f98:	4639      	mov	r1, r7
 8011f9a:	4640      	mov	r0, r8
 8011f9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011fa0:	4798      	blx	r3
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	f43f aedf 	beq.w	8011d66 <_scanf_float+0x4a>
 8011fa8:	e6ea      	b.n	8011d80 <_scanf_float+0x64>
 8011faa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011fae:	463a      	mov	r2, r7
 8011fb0:	4640      	mov	r0, r8
 8011fb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011fb6:	4798      	blx	r3
 8011fb8:	6923      	ldr	r3, [r4, #16]
 8011fba:	3b01      	subs	r3, #1
 8011fbc:	6123      	str	r3, [r4, #16]
 8011fbe:	e6ec      	b.n	8011d9a <_scanf_float+0x7e>
 8011fc0:	1e6b      	subs	r3, r5, #1
 8011fc2:	2b06      	cmp	r3, #6
 8011fc4:	d825      	bhi.n	8012012 <_scanf_float+0x2f6>
 8011fc6:	2d02      	cmp	r5, #2
 8011fc8:	d836      	bhi.n	8012038 <_scanf_float+0x31c>
 8011fca:	455e      	cmp	r6, fp
 8011fcc:	f67f aee8 	bls.w	8011da0 <_scanf_float+0x84>
 8011fd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011fd4:	463a      	mov	r2, r7
 8011fd6:	4640      	mov	r0, r8
 8011fd8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011fdc:	4798      	blx	r3
 8011fde:	6923      	ldr	r3, [r4, #16]
 8011fe0:	3b01      	subs	r3, #1
 8011fe2:	6123      	str	r3, [r4, #16]
 8011fe4:	e7f1      	b.n	8011fca <_scanf_float+0x2ae>
 8011fe6:	9802      	ldr	r0, [sp, #8]
 8011fe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011fec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011ff0:	463a      	mov	r2, r7
 8011ff2:	9002      	str	r0, [sp, #8]
 8011ff4:	4640      	mov	r0, r8
 8011ff6:	4798      	blx	r3
 8011ff8:	6923      	ldr	r3, [r4, #16]
 8011ffa:	3b01      	subs	r3, #1
 8011ffc:	6123      	str	r3, [r4, #16]
 8011ffe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012002:	fa5f fa8a 	uxtb.w	sl, sl
 8012006:	f1ba 0f02 	cmp.w	sl, #2
 801200a:	d1ec      	bne.n	8011fe6 <_scanf_float+0x2ca>
 801200c:	3d03      	subs	r5, #3
 801200e:	b2ed      	uxtb	r5, r5
 8012010:	1b76      	subs	r6, r6, r5
 8012012:	6823      	ldr	r3, [r4, #0]
 8012014:	05da      	lsls	r2, r3, #23
 8012016:	d52f      	bpl.n	8012078 <_scanf_float+0x35c>
 8012018:	055b      	lsls	r3, r3, #21
 801201a:	d510      	bpl.n	801203e <_scanf_float+0x322>
 801201c:	455e      	cmp	r6, fp
 801201e:	f67f aebf 	bls.w	8011da0 <_scanf_float+0x84>
 8012022:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012026:	463a      	mov	r2, r7
 8012028:	4640      	mov	r0, r8
 801202a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801202e:	4798      	blx	r3
 8012030:	6923      	ldr	r3, [r4, #16]
 8012032:	3b01      	subs	r3, #1
 8012034:	6123      	str	r3, [r4, #16]
 8012036:	e7f1      	b.n	801201c <_scanf_float+0x300>
 8012038:	46aa      	mov	sl, r5
 801203a:	9602      	str	r6, [sp, #8]
 801203c:	e7df      	b.n	8011ffe <_scanf_float+0x2e2>
 801203e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012042:	6923      	ldr	r3, [r4, #16]
 8012044:	2965      	cmp	r1, #101	; 0x65
 8012046:	f103 33ff 	add.w	r3, r3, #4294967295
 801204a:	f106 35ff 	add.w	r5, r6, #4294967295
 801204e:	6123      	str	r3, [r4, #16]
 8012050:	d00c      	beq.n	801206c <_scanf_float+0x350>
 8012052:	2945      	cmp	r1, #69	; 0x45
 8012054:	d00a      	beq.n	801206c <_scanf_float+0x350>
 8012056:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801205a:	463a      	mov	r2, r7
 801205c:	4640      	mov	r0, r8
 801205e:	4798      	blx	r3
 8012060:	6923      	ldr	r3, [r4, #16]
 8012062:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012066:	3b01      	subs	r3, #1
 8012068:	1eb5      	subs	r5, r6, #2
 801206a:	6123      	str	r3, [r4, #16]
 801206c:	463a      	mov	r2, r7
 801206e:	4640      	mov	r0, r8
 8012070:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012074:	4798      	blx	r3
 8012076:	462e      	mov	r6, r5
 8012078:	6825      	ldr	r5, [r4, #0]
 801207a:	f015 0510 	ands.w	r5, r5, #16
 801207e:	d159      	bne.n	8012134 <_scanf_float+0x418>
 8012080:	7035      	strb	r5, [r6, #0]
 8012082:	6823      	ldr	r3, [r4, #0]
 8012084:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801208c:	d11c      	bne.n	80120c8 <_scanf_float+0x3ac>
 801208e:	9b01      	ldr	r3, [sp, #4]
 8012090:	454b      	cmp	r3, r9
 8012092:	eba3 0209 	sub.w	r2, r3, r9
 8012096:	d124      	bne.n	80120e2 <_scanf_float+0x3c6>
 8012098:	2200      	movs	r2, #0
 801209a:	4659      	mov	r1, fp
 801209c:	4640      	mov	r0, r8
 801209e:	f000 ff47 	bl	8012f30 <_strtod_r>
 80120a2:	f8d4 c000 	ldr.w	ip, [r4]
 80120a6:	9b03      	ldr	r3, [sp, #12]
 80120a8:	f01c 0f02 	tst.w	ip, #2
 80120ac:	4606      	mov	r6, r0
 80120ae:	460f      	mov	r7, r1
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	d021      	beq.n	80120f8 <_scanf_float+0x3dc>
 80120b4:	9903      	ldr	r1, [sp, #12]
 80120b6:	1d1a      	adds	r2, r3, #4
 80120b8:	600a      	str	r2, [r1, #0]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	e9c3 6700 	strd	r6, r7, [r3]
 80120c0:	68e3      	ldr	r3, [r4, #12]
 80120c2:	3301      	adds	r3, #1
 80120c4:	60e3      	str	r3, [r4, #12]
 80120c6:	e66c      	b.n	8011da2 <_scanf_float+0x86>
 80120c8:	9b04      	ldr	r3, [sp, #16]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d0e4      	beq.n	8012098 <_scanf_float+0x37c>
 80120ce:	9905      	ldr	r1, [sp, #20]
 80120d0:	230a      	movs	r3, #10
 80120d2:	462a      	mov	r2, r5
 80120d4:	4640      	mov	r0, r8
 80120d6:	3101      	adds	r1, #1
 80120d8:	f000 ffb6 	bl	8013048 <_strtol_r>
 80120dc:	9b04      	ldr	r3, [sp, #16]
 80120de:	9e05      	ldr	r6, [sp, #20]
 80120e0:	1ac2      	subs	r2, r0, r3
 80120e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80120e6:	429e      	cmp	r6, r3
 80120e8:	bf28      	it	cs
 80120ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80120ee:	4630      	mov	r0, r6
 80120f0:	4911      	ldr	r1, [pc, #68]	; (8012138 <_scanf_float+0x41c>)
 80120f2:	f000 f8a3 	bl	801223c <siprintf>
 80120f6:	e7cf      	b.n	8012098 <_scanf_float+0x37c>
 80120f8:	f01c 0f04 	tst.w	ip, #4
 80120fc:	f103 0e04 	add.w	lr, r3, #4
 8012100:	d003      	beq.n	801210a <_scanf_float+0x3ee>
 8012102:	9903      	ldr	r1, [sp, #12]
 8012104:	f8c1 e000 	str.w	lr, [r1]
 8012108:	e7d7      	b.n	80120ba <_scanf_float+0x39e>
 801210a:	9a03      	ldr	r2, [sp, #12]
 801210c:	f8c2 e000 	str.w	lr, [r2]
 8012110:	f8d3 8000 	ldr.w	r8, [r3]
 8012114:	4602      	mov	r2, r0
 8012116:	460b      	mov	r3, r1
 8012118:	f7ee fcc2 	bl	8000aa0 <__aeabi_dcmpun>
 801211c:	b128      	cbz	r0, 801212a <_scanf_float+0x40e>
 801211e:	4807      	ldr	r0, [pc, #28]	; (801213c <_scanf_float+0x420>)
 8012120:	f000 f888 	bl	8012234 <nanf>
 8012124:	f8c8 0000 	str.w	r0, [r8]
 8012128:	e7ca      	b.n	80120c0 <_scanf_float+0x3a4>
 801212a:	4630      	mov	r0, r6
 801212c:	4639      	mov	r1, r7
 801212e:	f7ee fd15 	bl	8000b5c <__aeabi_d2f>
 8012132:	e7f7      	b.n	8012124 <_scanf_float+0x408>
 8012134:	2500      	movs	r5, #0
 8012136:	e634      	b.n	8011da2 <_scanf_float+0x86>
 8012138:	08015c44 	.word	0x08015c44
 801213c:	08016060 	.word	0x08016060

08012140 <cleanup_glue>:
 8012140:	b538      	push	{r3, r4, r5, lr}
 8012142:	460c      	mov	r4, r1
 8012144:	6809      	ldr	r1, [r1, #0]
 8012146:	4605      	mov	r5, r0
 8012148:	b109      	cbz	r1, 801214e <cleanup_glue+0xe>
 801214a:	f7ff fff9 	bl	8012140 <cleanup_glue>
 801214e:	4621      	mov	r1, r4
 8012150:	4628      	mov	r0, r5
 8012152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012156:	f7ff b8db 	b.w	8011310 <_free_r>
	...

0801215c <_reclaim_reent>:
 801215c:	4b2c      	ldr	r3, [pc, #176]	; (8012210 <_reclaim_reent+0xb4>)
 801215e:	b570      	push	{r4, r5, r6, lr}
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	4604      	mov	r4, r0
 8012164:	4283      	cmp	r3, r0
 8012166:	d051      	beq.n	801220c <_reclaim_reent+0xb0>
 8012168:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801216a:	b143      	cbz	r3, 801217e <_reclaim_reent+0x22>
 801216c:	68db      	ldr	r3, [r3, #12]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d14a      	bne.n	8012208 <_reclaim_reent+0xac>
 8012172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012174:	6819      	ldr	r1, [r3, #0]
 8012176:	b111      	cbz	r1, 801217e <_reclaim_reent+0x22>
 8012178:	4620      	mov	r0, r4
 801217a:	f7ff f8c9 	bl	8011310 <_free_r>
 801217e:	6961      	ldr	r1, [r4, #20]
 8012180:	b111      	cbz	r1, 8012188 <_reclaim_reent+0x2c>
 8012182:	4620      	mov	r0, r4
 8012184:	f7ff f8c4 	bl	8011310 <_free_r>
 8012188:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801218a:	b111      	cbz	r1, 8012192 <_reclaim_reent+0x36>
 801218c:	4620      	mov	r0, r4
 801218e:	f7ff f8bf 	bl	8011310 <_free_r>
 8012192:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012194:	b111      	cbz	r1, 801219c <_reclaim_reent+0x40>
 8012196:	4620      	mov	r0, r4
 8012198:	f7ff f8ba 	bl	8011310 <_free_r>
 801219c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801219e:	b111      	cbz	r1, 80121a6 <_reclaim_reent+0x4a>
 80121a0:	4620      	mov	r0, r4
 80121a2:	f7ff f8b5 	bl	8011310 <_free_r>
 80121a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80121a8:	b111      	cbz	r1, 80121b0 <_reclaim_reent+0x54>
 80121aa:	4620      	mov	r0, r4
 80121ac:	f7ff f8b0 	bl	8011310 <_free_r>
 80121b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80121b2:	b111      	cbz	r1, 80121ba <_reclaim_reent+0x5e>
 80121b4:	4620      	mov	r0, r4
 80121b6:	f7ff f8ab 	bl	8011310 <_free_r>
 80121ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80121bc:	b111      	cbz	r1, 80121c4 <_reclaim_reent+0x68>
 80121be:	4620      	mov	r0, r4
 80121c0:	f7ff f8a6 	bl	8011310 <_free_r>
 80121c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121c6:	b111      	cbz	r1, 80121ce <_reclaim_reent+0x72>
 80121c8:	4620      	mov	r0, r4
 80121ca:	f7ff f8a1 	bl	8011310 <_free_r>
 80121ce:	69a3      	ldr	r3, [r4, #24]
 80121d0:	b1e3      	cbz	r3, 801220c <_reclaim_reent+0xb0>
 80121d2:	4620      	mov	r0, r4
 80121d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80121d6:	4798      	blx	r3
 80121d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80121da:	b1b9      	cbz	r1, 801220c <_reclaim_reent+0xb0>
 80121dc:	4620      	mov	r0, r4
 80121de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121e2:	f7ff bfad 	b.w	8012140 <cleanup_glue>
 80121e6:	5949      	ldr	r1, [r1, r5]
 80121e8:	b941      	cbnz	r1, 80121fc <_reclaim_reent+0xa0>
 80121ea:	3504      	adds	r5, #4
 80121ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121ee:	2d80      	cmp	r5, #128	; 0x80
 80121f0:	68d9      	ldr	r1, [r3, #12]
 80121f2:	d1f8      	bne.n	80121e6 <_reclaim_reent+0x8a>
 80121f4:	4620      	mov	r0, r4
 80121f6:	f7ff f88b 	bl	8011310 <_free_r>
 80121fa:	e7ba      	b.n	8012172 <_reclaim_reent+0x16>
 80121fc:	680e      	ldr	r6, [r1, #0]
 80121fe:	4620      	mov	r0, r4
 8012200:	f7ff f886 	bl	8011310 <_free_r>
 8012204:	4631      	mov	r1, r6
 8012206:	e7ef      	b.n	80121e8 <_reclaim_reent+0x8c>
 8012208:	2500      	movs	r5, #0
 801220a:	e7ef      	b.n	80121ec <_reclaim_reent+0x90>
 801220c:	bd70      	pop	{r4, r5, r6, pc}
 801220e:	bf00      	nop
 8012210:	20000054 	.word	0x20000054

08012214 <_sbrk_r>:
 8012214:	b538      	push	{r3, r4, r5, lr}
 8012216:	2300      	movs	r3, #0
 8012218:	4d05      	ldr	r5, [pc, #20]	; (8012230 <_sbrk_r+0x1c>)
 801221a:	4604      	mov	r4, r0
 801221c:	4608      	mov	r0, r1
 801221e:	602b      	str	r3, [r5, #0]
 8012220:	f7f0 fd38 	bl	8002c94 <_sbrk>
 8012224:	1c43      	adds	r3, r0, #1
 8012226:	d102      	bne.n	801222e <_sbrk_r+0x1a>
 8012228:	682b      	ldr	r3, [r5, #0]
 801222a:	b103      	cbz	r3, 801222e <_sbrk_r+0x1a>
 801222c:	6023      	str	r3, [r4, #0]
 801222e:	bd38      	pop	{r3, r4, r5, pc}
 8012230:	2000b5c0 	.word	0x2000b5c0

08012234 <nanf>:
 8012234:	4800      	ldr	r0, [pc, #0]	; (8012238 <nanf+0x4>)
 8012236:	4770      	bx	lr
 8012238:	7fc00000 	.word	0x7fc00000

0801223c <siprintf>:
 801223c:	b40e      	push	{r1, r2, r3}
 801223e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012242:	b500      	push	{lr}
 8012244:	b09c      	sub	sp, #112	; 0x70
 8012246:	ab1d      	add	r3, sp, #116	; 0x74
 8012248:	9002      	str	r0, [sp, #8]
 801224a:	9006      	str	r0, [sp, #24]
 801224c:	9107      	str	r1, [sp, #28]
 801224e:	9104      	str	r1, [sp, #16]
 8012250:	4808      	ldr	r0, [pc, #32]	; (8012274 <siprintf+0x38>)
 8012252:	4909      	ldr	r1, [pc, #36]	; (8012278 <siprintf+0x3c>)
 8012254:	f853 2b04 	ldr.w	r2, [r3], #4
 8012258:	9105      	str	r1, [sp, #20]
 801225a:	6800      	ldr	r0, [r0, #0]
 801225c:	a902      	add	r1, sp, #8
 801225e:	9301      	str	r3, [sp, #4]
 8012260:	f002 ff20 	bl	80150a4 <_svfiprintf_r>
 8012264:	2200      	movs	r2, #0
 8012266:	9b02      	ldr	r3, [sp, #8]
 8012268:	701a      	strb	r2, [r3, #0]
 801226a:	b01c      	add	sp, #112	; 0x70
 801226c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012270:	b003      	add	sp, #12
 8012272:	4770      	bx	lr
 8012274:	20000054 	.word	0x20000054
 8012278:	ffff0208 	.word	0xffff0208

0801227c <__sread>:
 801227c:	b510      	push	{r4, lr}
 801227e:	460c      	mov	r4, r1
 8012280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012284:	f003 f80e 	bl	80152a4 <_read_r>
 8012288:	2800      	cmp	r0, #0
 801228a:	bfab      	itete	ge
 801228c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801228e:	89a3      	ldrhlt	r3, [r4, #12]
 8012290:	181b      	addge	r3, r3, r0
 8012292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012296:	bfac      	ite	ge
 8012298:	6563      	strge	r3, [r4, #84]	; 0x54
 801229a:	81a3      	strhlt	r3, [r4, #12]
 801229c:	bd10      	pop	{r4, pc}

0801229e <__swrite>:
 801229e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122a2:	461f      	mov	r7, r3
 80122a4:	898b      	ldrh	r3, [r1, #12]
 80122a6:	4605      	mov	r5, r0
 80122a8:	05db      	lsls	r3, r3, #23
 80122aa:	460c      	mov	r4, r1
 80122ac:	4616      	mov	r6, r2
 80122ae:	d505      	bpl.n	80122bc <__swrite+0x1e>
 80122b0:	2302      	movs	r3, #2
 80122b2:	2200      	movs	r2, #0
 80122b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122b8:	f002 f994 	bl	80145e4 <_lseek_r>
 80122bc:	89a3      	ldrh	r3, [r4, #12]
 80122be:	4632      	mov	r2, r6
 80122c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80122c4:	81a3      	strh	r3, [r4, #12]
 80122c6:	4628      	mov	r0, r5
 80122c8:	463b      	mov	r3, r7
 80122ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122d2:	f000 bebb 	b.w	801304c <_write_r>

080122d6 <__sseek>:
 80122d6:	b510      	push	{r4, lr}
 80122d8:	460c      	mov	r4, r1
 80122da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122de:	f002 f981 	bl	80145e4 <_lseek_r>
 80122e2:	1c43      	adds	r3, r0, #1
 80122e4:	89a3      	ldrh	r3, [r4, #12]
 80122e6:	bf15      	itete	ne
 80122e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80122ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80122ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80122f2:	81a3      	strheq	r3, [r4, #12]
 80122f4:	bf18      	it	ne
 80122f6:	81a3      	strhne	r3, [r4, #12]
 80122f8:	bd10      	pop	{r4, pc}

080122fa <__sclose>:
 80122fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122fe:	f000 beb7 	b.w	8013070 <_close_r>

08012302 <sulp>:
 8012302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012306:	460f      	mov	r7, r1
 8012308:	4690      	mov	r8, r2
 801230a:	f002 fd19 	bl	8014d40 <__ulp>
 801230e:	4604      	mov	r4, r0
 8012310:	460d      	mov	r5, r1
 8012312:	f1b8 0f00 	cmp.w	r8, #0
 8012316:	d011      	beq.n	801233c <sulp+0x3a>
 8012318:	f3c7 530a 	ubfx	r3, r7, #20, #11
 801231c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012320:	2b00      	cmp	r3, #0
 8012322:	dd0b      	ble.n	801233c <sulp+0x3a>
 8012324:	2400      	movs	r4, #0
 8012326:	051b      	lsls	r3, r3, #20
 8012328:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801232c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012330:	4622      	mov	r2, r4
 8012332:	462b      	mov	r3, r5
 8012334:	f7ee f91a 	bl	800056c <__aeabi_dmul>
 8012338:	4604      	mov	r4, r0
 801233a:	460d      	mov	r5, r1
 801233c:	4620      	mov	r0, r4
 801233e:	4629      	mov	r1, r5
 8012340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012344:	0000      	movs	r0, r0
	...

08012348 <_strtod_l>:
 8012348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801234c:	469b      	mov	fp, r3
 801234e:	2300      	movs	r3, #0
 8012350:	b0a1      	sub	sp, #132	; 0x84
 8012352:	931c      	str	r3, [sp, #112]	; 0x70
 8012354:	4ba1      	ldr	r3, [pc, #644]	; (80125dc <_strtod_l+0x294>)
 8012356:	4682      	mov	sl, r0
 8012358:	681f      	ldr	r7, [r3, #0]
 801235a:	460e      	mov	r6, r1
 801235c:	4638      	mov	r0, r7
 801235e:	9217      	str	r2, [sp, #92]	; 0x5c
 8012360:	f7ed ff40 	bl	80001e4 <strlen>
 8012364:	f04f 0800 	mov.w	r8, #0
 8012368:	4604      	mov	r4, r0
 801236a:	f04f 0900 	mov.w	r9, #0
 801236e:	961b      	str	r6, [sp, #108]	; 0x6c
 8012370:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012372:	781a      	ldrb	r2, [r3, #0]
 8012374:	2a2b      	cmp	r2, #43	; 0x2b
 8012376:	d04c      	beq.n	8012412 <_strtod_l+0xca>
 8012378:	d83a      	bhi.n	80123f0 <_strtod_l+0xa8>
 801237a:	2a0d      	cmp	r2, #13
 801237c:	d833      	bhi.n	80123e6 <_strtod_l+0x9e>
 801237e:	2a08      	cmp	r2, #8
 8012380:	d833      	bhi.n	80123ea <_strtod_l+0xa2>
 8012382:	2a00      	cmp	r2, #0
 8012384:	d03d      	beq.n	8012402 <_strtod_l+0xba>
 8012386:	2300      	movs	r3, #0
 8012388:	930c      	str	r3, [sp, #48]	; 0x30
 801238a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801238c:	782b      	ldrb	r3, [r5, #0]
 801238e:	2b30      	cmp	r3, #48	; 0x30
 8012390:	f040 80af 	bne.w	80124f2 <_strtod_l+0x1aa>
 8012394:	786b      	ldrb	r3, [r5, #1]
 8012396:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801239a:	2b58      	cmp	r3, #88	; 0x58
 801239c:	d16c      	bne.n	8012478 <_strtod_l+0x130>
 801239e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123a0:	4650      	mov	r0, sl
 80123a2:	9301      	str	r3, [sp, #4]
 80123a4:	ab1c      	add	r3, sp, #112	; 0x70
 80123a6:	9300      	str	r3, [sp, #0]
 80123a8:	4a8d      	ldr	r2, [pc, #564]	; (80125e0 <_strtod_l+0x298>)
 80123aa:	f8cd b008 	str.w	fp, [sp, #8]
 80123ae:	ab1d      	add	r3, sp, #116	; 0x74
 80123b0:	a91b      	add	r1, sp, #108	; 0x6c
 80123b2:	f001 fe15 	bl	8013fe0 <__gethex>
 80123b6:	f010 0607 	ands.w	r6, r0, #7
 80123ba:	4604      	mov	r4, r0
 80123bc:	d005      	beq.n	80123ca <_strtod_l+0x82>
 80123be:	2e06      	cmp	r6, #6
 80123c0:	d129      	bne.n	8012416 <_strtod_l+0xce>
 80123c2:	2300      	movs	r3, #0
 80123c4:	3501      	adds	r5, #1
 80123c6:	951b      	str	r5, [sp, #108]	; 0x6c
 80123c8:	930c      	str	r3, [sp, #48]	; 0x30
 80123ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	f040 8596 	bne.w	8012efe <_strtod_l+0xbb6>
 80123d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123d4:	b1d3      	cbz	r3, 801240c <_strtod_l+0xc4>
 80123d6:	4642      	mov	r2, r8
 80123d8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80123dc:	4610      	mov	r0, r2
 80123de:	4619      	mov	r1, r3
 80123e0:	b021      	add	sp, #132	; 0x84
 80123e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e6:	2a20      	cmp	r2, #32
 80123e8:	d1cd      	bne.n	8012386 <_strtod_l+0x3e>
 80123ea:	3301      	adds	r3, #1
 80123ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80123ee:	e7bf      	b.n	8012370 <_strtod_l+0x28>
 80123f0:	2a2d      	cmp	r2, #45	; 0x2d
 80123f2:	d1c8      	bne.n	8012386 <_strtod_l+0x3e>
 80123f4:	2201      	movs	r2, #1
 80123f6:	920c      	str	r2, [sp, #48]	; 0x30
 80123f8:	1c5a      	adds	r2, r3, #1
 80123fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80123fc:	785b      	ldrb	r3, [r3, #1]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d1c3      	bne.n	801238a <_strtod_l+0x42>
 8012402:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012404:	961b      	str	r6, [sp, #108]	; 0x6c
 8012406:	2b00      	cmp	r3, #0
 8012408:	f040 8577 	bne.w	8012efa <_strtod_l+0xbb2>
 801240c:	4642      	mov	r2, r8
 801240e:	464b      	mov	r3, r9
 8012410:	e7e4      	b.n	80123dc <_strtod_l+0x94>
 8012412:	2200      	movs	r2, #0
 8012414:	e7ef      	b.n	80123f6 <_strtod_l+0xae>
 8012416:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012418:	b13a      	cbz	r2, 801242a <_strtod_l+0xe2>
 801241a:	2135      	movs	r1, #53	; 0x35
 801241c:	a81e      	add	r0, sp, #120	; 0x78
 801241e:	f002 fd93 	bl	8014f48 <__copybits>
 8012422:	4650      	mov	r0, sl
 8012424:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012426:	f002 f95b 	bl	80146e0 <_Bfree>
 801242a:	3e01      	subs	r6, #1
 801242c:	2e05      	cmp	r6, #5
 801242e:	d807      	bhi.n	8012440 <_strtod_l+0xf8>
 8012430:	e8df f006 	tbb	[pc, r6]
 8012434:	1d180b0e 	.word	0x1d180b0e
 8012438:	030e      	.short	0x030e
 801243a:	f04f 0900 	mov.w	r9, #0
 801243e:	46c8      	mov	r8, r9
 8012440:	0721      	lsls	r1, r4, #28
 8012442:	d5c2      	bpl.n	80123ca <_strtod_l+0x82>
 8012444:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8012448:	e7bf      	b.n	80123ca <_strtod_l+0x82>
 801244a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 801244e:	e7f7      	b.n	8012440 <_strtod_l+0xf8>
 8012450:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012452:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8012456:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801245a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801245e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8012462:	e7ed      	b.n	8012440 <_strtod_l+0xf8>
 8012464:	f04f 0800 	mov.w	r8, #0
 8012468:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80125e4 <_strtod_l+0x29c>
 801246c:	e7e8      	b.n	8012440 <_strtod_l+0xf8>
 801246e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012472:	f04f 38ff 	mov.w	r8, #4294967295
 8012476:	e7e3      	b.n	8012440 <_strtod_l+0xf8>
 8012478:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801247a:	1c5a      	adds	r2, r3, #1
 801247c:	921b      	str	r2, [sp, #108]	; 0x6c
 801247e:	785b      	ldrb	r3, [r3, #1]
 8012480:	2b30      	cmp	r3, #48	; 0x30
 8012482:	d0f9      	beq.n	8012478 <_strtod_l+0x130>
 8012484:	2b00      	cmp	r3, #0
 8012486:	d0a0      	beq.n	80123ca <_strtod_l+0x82>
 8012488:	2301      	movs	r3, #1
 801248a:	9307      	str	r3, [sp, #28]
 801248c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801248e:	220a      	movs	r2, #10
 8012490:	9308      	str	r3, [sp, #32]
 8012492:	2300      	movs	r3, #0
 8012494:	469b      	mov	fp, r3
 8012496:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801249a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801249c:	7805      	ldrb	r5, [r0, #0]
 801249e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80124a2:	b2d9      	uxtb	r1, r3
 80124a4:	2909      	cmp	r1, #9
 80124a6:	d926      	bls.n	80124f6 <_strtod_l+0x1ae>
 80124a8:	4622      	mov	r2, r4
 80124aa:	4639      	mov	r1, r7
 80124ac:	f002 ff12 	bl	80152d4 <strncmp>
 80124b0:	2800      	cmp	r0, #0
 80124b2:	d032      	beq.n	801251a <_strtod_l+0x1d2>
 80124b4:	2000      	movs	r0, #0
 80124b6:	462b      	mov	r3, r5
 80124b8:	465c      	mov	r4, fp
 80124ba:	4602      	mov	r2, r0
 80124bc:	9004      	str	r0, [sp, #16]
 80124be:	2b65      	cmp	r3, #101	; 0x65
 80124c0:	d001      	beq.n	80124c6 <_strtod_l+0x17e>
 80124c2:	2b45      	cmp	r3, #69	; 0x45
 80124c4:	d113      	bne.n	80124ee <_strtod_l+0x1a6>
 80124c6:	b91c      	cbnz	r4, 80124d0 <_strtod_l+0x188>
 80124c8:	9b07      	ldr	r3, [sp, #28]
 80124ca:	4303      	orrs	r3, r0
 80124cc:	d099      	beq.n	8012402 <_strtod_l+0xba>
 80124ce:	2400      	movs	r4, #0
 80124d0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80124d2:	1c73      	adds	r3, r6, #1
 80124d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80124d6:	7873      	ldrb	r3, [r6, #1]
 80124d8:	2b2b      	cmp	r3, #43	; 0x2b
 80124da:	d078      	beq.n	80125ce <_strtod_l+0x286>
 80124dc:	2b2d      	cmp	r3, #45	; 0x2d
 80124de:	d07b      	beq.n	80125d8 <_strtod_l+0x290>
 80124e0:	2700      	movs	r7, #0
 80124e2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80124e6:	2909      	cmp	r1, #9
 80124e8:	f240 8082 	bls.w	80125f0 <_strtod_l+0x2a8>
 80124ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80124ee:	2500      	movs	r5, #0
 80124f0:	e09e      	b.n	8012630 <_strtod_l+0x2e8>
 80124f2:	2300      	movs	r3, #0
 80124f4:	e7c9      	b.n	801248a <_strtod_l+0x142>
 80124f6:	f1bb 0f08 	cmp.w	fp, #8
 80124fa:	bfd5      	itete	le
 80124fc:	9906      	ldrle	r1, [sp, #24]
 80124fe:	9905      	ldrgt	r1, [sp, #20]
 8012500:	fb02 3301 	mlale	r3, r2, r1, r3
 8012504:	fb02 3301 	mlagt	r3, r2, r1, r3
 8012508:	f100 0001 	add.w	r0, r0, #1
 801250c:	bfd4      	ite	le
 801250e:	9306      	strle	r3, [sp, #24]
 8012510:	9305      	strgt	r3, [sp, #20]
 8012512:	f10b 0b01 	add.w	fp, fp, #1
 8012516:	901b      	str	r0, [sp, #108]	; 0x6c
 8012518:	e7bf      	b.n	801249a <_strtod_l+0x152>
 801251a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801251c:	191a      	adds	r2, r3, r4
 801251e:	921b      	str	r2, [sp, #108]	; 0x6c
 8012520:	5d1b      	ldrb	r3, [r3, r4]
 8012522:	f1bb 0f00 	cmp.w	fp, #0
 8012526:	d036      	beq.n	8012596 <_strtod_l+0x24e>
 8012528:	465c      	mov	r4, fp
 801252a:	9004      	str	r0, [sp, #16]
 801252c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012530:	2a09      	cmp	r2, #9
 8012532:	d912      	bls.n	801255a <_strtod_l+0x212>
 8012534:	2201      	movs	r2, #1
 8012536:	e7c2      	b.n	80124be <_strtod_l+0x176>
 8012538:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801253a:	3001      	adds	r0, #1
 801253c:	1c5a      	adds	r2, r3, #1
 801253e:	921b      	str	r2, [sp, #108]	; 0x6c
 8012540:	785b      	ldrb	r3, [r3, #1]
 8012542:	2b30      	cmp	r3, #48	; 0x30
 8012544:	d0f8      	beq.n	8012538 <_strtod_l+0x1f0>
 8012546:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801254a:	2a08      	cmp	r2, #8
 801254c:	f200 84dc 	bhi.w	8012f08 <_strtod_l+0xbc0>
 8012550:	9004      	str	r0, [sp, #16]
 8012552:	2000      	movs	r0, #0
 8012554:	4604      	mov	r4, r0
 8012556:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012558:	9208      	str	r2, [sp, #32]
 801255a:	3b30      	subs	r3, #48	; 0x30
 801255c:	f100 0201 	add.w	r2, r0, #1
 8012560:	d013      	beq.n	801258a <_strtod_l+0x242>
 8012562:	9904      	ldr	r1, [sp, #16]
 8012564:	1905      	adds	r5, r0, r4
 8012566:	4411      	add	r1, r2
 8012568:	9104      	str	r1, [sp, #16]
 801256a:	4622      	mov	r2, r4
 801256c:	210a      	movs	r1, #10
 801256e:	42aa      	cmp	r2, r5
 8012570:	d113      	bne.n	801259a <_strtod_l+0x252>
 8012572:	1822      	adds	r2, r4, r0
 8012574:	2a08      	cmp	r2, #8
 8012576:	f104 0401 	add.w	r4, r4, #1
 801257a:	4404      	add	r4, r0
 801257c:	dc1b      	bgt.n	80125b6 <_strtod_l+0x26e>
 801257e:	220a      	movs	r2, #10
 8012580:	9906      	ldr	r1, [sp, #24]
 8012582:	fb02 3301 	mla	r3, r2, r1, r3
 8012586:	9306      	str	r3, [sp, #24]
 8012588:	2200      	movs	r2, #0
 801258a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801258c:	4610      	mov	r0, r2
 801258e:	1c59      	adds	r1, r3, #1
 8012590:	911b      	str	r1, [sp, #108]	; 0x6c
 8012592:	785b      	ldrb	r3, [r3, #1]
 8012594:	e7ca      	b.n	801252c <_strtod_l+0x1e4>
 8012596:	4658      	mov	r0, fp
 8012598:	e7d3      	b.n	8012542 <_strtod_l+0x1fa>
 801259a:	2a08      	cmp	r2, #8
 801259c:	dc04      	bgt.n	80125a8 <_strtod_l+0x260>
 801259e:	9f06      	ldr	r7, [sp, #24]
 80125a0:	434f      	muls	r7, r1
 80125a2:	9706      	str	r7, [sp, #24]
 80125a4:	3201      	adds	r2, #1
 80125a6:	e7e2      	b.n	801256e <_strtod_l+0x226>
 80125a8:	1c57      	adds	r7, r2, #1
 80125aa:	2f10      	cmp	r7, #16
 80125ac:	bfde      	ittt	le
 80125ae:	9f05      	ldrle	r7, [sp, #20]
 80125b0:	434f      	mulle	r7, r1
 80125b2:	9705      	strle	r7, [sp, #20]
 80125b4:	e7f6      	b.n	80125a4 <_strtod_l+0x25c>
 80125b6:	2c10      	cmp	r4, #16
 80125b8:	bfdf      	itttt	le
 80125ba:	220a      	movle	r2, #10
 80125bc:	9905      	ldrle	r1, [sp, #20]
 80125be:	fb02 3301 	mlale	r3, r2, r1, r3
 80125c2:	9305      	strle	r3, [sp, #20]
 80125c4:	e7e0      	b.n	8012588 <_strtod_l+0x240>
 80125c6:	2300      	movs	r3, #0
 80125c8:	2201      	movs	r2, #1
 80125ca:	9304      	str	r3, [sp, #16]
 80125cc:	e77c      	b.n	80124c8 <_strtod_l+0x180>
 80125ce:	2700      	movs	r7, #0
 80125d0:	1cb3      	adds	r3, r6, #2
 80125d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80125d4:	78b3      	ldrb	r3, [r6, #2]
 80125d6:	e784      	b.n	80124e2 <_strtod_l+0x19a>
 80125d8:	2701      	movs	r7, #1
 80125da:	e7f9      	b.n	80125d0 <_strtod_l+0x288>
 80125dc:	08015ea0 	.word	0x08015ea0
 80125e0:	08015c4c 	.word	0x08015c4c
 80125e4:	7ff00000 	.word	0x7ff00000
 80125e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80125ea:	1c59      	adds	r1, r3, #1
 80125ec:	911b      	str	r1, [sp, #108]	; 0x6c
 80125ee:	785b      	ldrb	r3, [r3, #1]
 80125f0:	2b30      	cmp	r3, #48	; 0x30
 80125f2:	d0f9      	beq.n	80125e8 <_strtod_l+0x2a0>
 80125f4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80125f8:	2908      	cmp	r1, #8
 80125fa:	f63f af78 	bhi.w	80124ee <_strtod_l+0x1a6>
 80125fe:	f04f 0e0a 	mov.w	lr, #10
 8012602:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8012606:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012608:	9309      	str	r3, [sp, #36]	; 0x24
 801260a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801260c:	1c59      	adds	r1, r3, #1
 801260e:	911b      	str	r1, [sp, #108]	; 0x6c
 8012610:	785b      	ldrb	r3, [r3, #1]
 8012612:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8012616:	2d09      	cmp	r5, #9
 8012618:	d935      	bls.n	8012686 <_strtod_l+0x33e>
 801261a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801261c:	1b49      	subs	r1, r1, r5
 801261e:	2908      	cmp	r1, #8
 8012620:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8012624:	dc02      	bgt.n	801262c <_strtod_l+0x2e4>
 8012626:	4565      	cmp	r5, ip
 8012628:	bfa8      	it	ge
 801262a:	4665      	movge	r5, ip
 801262c:	b107      	cbz	r7, 8012630 <_strtod_l+0x2e8>
 801262e:	426d      	negs	r5, r5
 8012630:	2c00      	cmp	r4, #0
 8012632:	d14c      	bne.n	80126ce <_strtod_l+0x386>
 8012634:	9907      	ldr	r1, [sp, #28]
 8012636:	4301      	orrs	r1, r0
 8012638:	f47f aec7 	bne.w	80123ca <_strtod_l+0x82>
 801263c:	2a00      	cmp	r2, #0
 801263e:	f47f aee0 	bne.w	8012402 <_strtod_l+0xba>
 8012642:	2b69      	cmp	r3, #105	; 0x69
 8012644:	d026      	beq.n	8012694 <_strtod_l+0x34c>
 8012646:	dc23      	bgt.n	8012690 <_strtod_l+0x348>
 8012648:	2b49      	cmp	r3, #73	; 0x49
 801264a:	d023      	beq.n	8012694 <_strtod_l+0x34c>
 801264c:	2b4e      	cmp	r3, #78	; 0x4e
 801264e:	f47f aed8 	bne.w	8012402 <_strtod_l+0xba>
 8012652:	499c      	ldr	r1, [pc, #624]	; (80128c4 <_strtod_l+0x57c>)
 8012654:	a81b      	add	r0, sp, #108	; 0x6c
 8012656:	f001 ff11 	bl	801447c <__match>
 801265a:	2800      	cmp	r0, #0
 801265c:	f43f aed1 	beq.w	8012402 <_strtod_l+0xba>
 8012660:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	2b28      	cmp	r3, #40	; 0x28
 8012666:	d12c      	bne.n	80126c2 <_strtod_l+0x37a>
 8012668:	4997      	ldr	r1, [pc, #604]	; (80128c8 <_strtod_l+0x580>)
 801266a:	aa1e      	add	r2, sp, #120	; 0x78
 801266c:	a81b      	add	r0, sp, #108	; 0x6c
 801266e:	f001 ff19 	bl	80144a4 <__hexnan>
 8012672:	2805      	cmp	r0, #5
 8012674:	d125      	bne.n	80126c2 <_strtod_l+0x37a>
 8012676:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012678:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801267c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012680:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8012684:	e6a1      	b.n	80123ca <_strtod_l+0x82>
 8012686:	fb0e 3c0c 	mla	ip, lr, ip, r3
 801268a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801268e:	e7bc      	b.n	801260a <_strtod_l+0x2c2>
 8012690:	2b6e      	cmp	r3, #110	; 0x6e
 8012692:	e7dc      	b.n	801264e <_strtod_l+0x306>
 8012694:	498d      	ldr	r1, [pc, #564]	; (80128cc <_strtod_l+0x584>)
 8012696:	a81b      	add	r0, sp, #108	; 0x6c
 8012698:	f001 fef0 	bl	801447c <__match>
 801269c:	2800      	cmp	r0, #0
 801269e:	f43f aeb0 	beq.w	8012402 <_strtod_l+0xba>
 80126a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80126a4:	498a      	ldr	r1, [pc, #552]	; (80128d0 <_strtod_l+0x588>)
 80126a6:	3b01      	subs	r3, #1
 80126a8:	a81b      	add	r0, sp, #108	; 0x6c
 80126aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80126ac:	f001 fee6 	bl	801447c <__match>
 80126b0:	b910      	cbnz	r0, 80126b8 <_strtod_l+0x370>
 80126b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80126b4:	3301      	adds	r3, #1
 80126b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80126b8:	f04f 0800 	mov.w	r8, #0
 80126bc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80128e0 <_strtod_l+0x598>
 80126c0:	e683      	b.n	80123ca <_strtod_l+0x82>
 80126c2:	4884      	ldr	r0, [pc, #528]	; (80128d4 <_strtod_l+0x58c>)
 80126c4:	f002 fe00 	bl	80152c8 <nan>
 80126c8:	4680      	mov	r8, r0
 80126ca:	4689      	mov	r9, r1
 80126cc:	e67d      	b.n	80123ca <_strtod_l+0x82>
 80126ce:	9b04      	ldr	r3, [sp, #16]
 80126d0:	f1bb 0f00 	cmp.w	fp, #0
 80126d4:	bf08      	it	eq
 80126d6:	46a3      	moveq	fp, r4
 80126d8:	1aeb      	subs	r3, r5, r3
 80126da:	2c10      	cmp	r4, #16
 80126dc:	9806      	ldr	r0, [sp, #24]
 80126de:	4626      	mov	r6, r4
 80126e0:	9307      	str	r3, [sp, #28]
 80126e2:	bfa8      	it	ge
 80126e4:	2610      	movge	r6, #16
 80126e6:	f7ed fec7 	bl	8000478 <__aeabi_ui2d>
 80126ea:	2c09      	cmp	r4, #9
 80126ec:	4680      	mov	r8, r0
 80126ee:	4689      	mov	r9, r1
 80126f0:	dd13      	ble.n	801271a <_strtod_l+0x3d2>
 80126f2:	4b79      	ldr	r3, [pc, #484]	; (80128d8 <_strtod_l+0x590>)
 80126f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80126f8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80126fc:	f7ed ff36 	bl	800056c <__aeabi_dmul>
 8012700:	4680      	mov	r8, r0
 8012702:	9805      	ldr	r0, [sp, #20]
 8012704:	4689      	mov	r9, r1
 8012706:	f7ed feb7 	bl	8000478 <__aeabi_ui2d>
 801270a:	4602      	mov	r2, r0
 801270c:	460b      	mov	r3, r1
 801270e:	4640      	mov	r0, r8
 8012710:	4649      	mov	r1, r9
 8012712:	f7ed fd75 	bl	8000200 <__adddf3>
 8012716:	4680      	mov	r8, r0
 8012718:	4689      	mov	r9, r1
 801271a:	2c0f      	cmp	r4, #15
 801271c:	dc36      	bgt.n	801278c <_strtod_l+0x444>
 801271e:	9b07      	ldr	r3, [sp, #28]
 8012720:	2b00      	cmp	r3, #0
 8012722:	f43f ae52 	beq.w	80123ca <_strtod_l+0x82>
 8012726:	dd22      	ble.n	801276e <_strtod_l+0x426>
 8012728:	2b16      	cmp	r3, #22
 801272a:	dc09      	bgt.n	8012740 <_strtod_l+0x3f8>
 801272c:	4c6a      	ldr	r4, [pc, #424]	; (80128d8 <_strtod_l+0x590>)
 801272e:	4642      	mov	r2, r8
 8012730:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8012734:	464b      	mov	r3, r9
 8012736:	e9d4 0100 	ldrd	r0, r1, [r4]
 801273a:	f7ed ff17 	bl	800056c <__aeabi_dmul>
 801273e:	e7c3      	b.n	80126c8 <_strtod_l+0x380>
 8012740:	9a07      	ldr	r2, [sp, #28]
 8012742:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8012746:	4293      	cmp	r3, r2
 8012748:	db20      	blt.n	801278c <_strtod_l+0x444>
 801274a:	4d63      	ldr	r5, [pc, #396]	; (80128d8 <_strtod_l+0x590>)
 801274c:	f1c4 040f 	rsb	r4, r4, #15
 8012750:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8012754:	4642      	mov	r2, r8
 8012756:	e9d1 0100 	ldrd	r0, r1, [r1]
 801275a:	464b      	mov	r3, r9
 801275c:	f7ed ff06 	bl	800056c <__aeabi_dmul>
 8012760:	9b07      	ldr	r3, [sp, #28]
 8012762:	1b1c      	subs	r4, r3, r4
 8012764:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012768:	e9d5 2300 	ldrd	r2, r3, [r5]
 801276c:	e7e5      	b.n	801273a <_strtod_l+0x3f2>
 801276e:	9b07      	ldr	r3, [sp, #28]
 8012770:	3316      	adds	r3, #22
 8012772:	db0b      	blt.n	801278c <_strtod_l+0x444>
 8012774:	9b04      	ldr	r3, [sp, #16]
 8012776:	4a58      	ldr	r2, [pc, #352]	; (80128d8 <_strtod_l+0x590>)
 8012778:	1b5d      	subs	r5, r3, r5
 801277a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801277e:	4640      	mov	r0, r8
 8012780:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012784:	4649      	mov	r1, r9
 8012786:	f7ee f81b 	bl	80007c0 <__aeabi_ddiv>
 801278a:	e79d      	b.n	80126c8 <_strtod_l+0x380>
 801278c:	9b07      	ldr	r3, [sp, #28]
 801278e:	1ba6      	subs	r6, r4, r6
 8012790:	441e      	add	r6, r3
 8012792:	2e00      	cmp	r6, #0
 8012794:	dd71      	ble.n	801287a <_strtod_l+0x532>
 8012796:	f016 030f 	ands.w	r3, r6, #15
 801279a:	d00a      	beq.n	80127b2 <_strtod_l+0x46a>
 801279c:	494e      	ldr	r1, [pc, #312]	; (80128d8 <_strtod_l+0x590>)
 801279e:	4642      	mov	r2, r8
 80127a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80127a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127a8:	464b      	mov	r3, r9
 80127aa:	f7ed fedf 	bl	800056c <__aeabi_dmul>
 80127ae:	4680      	mov	r8, r0
 80127b0:	4689      	mov	r9, r1
 80127b2:	f036 060f 	bics.w	r6, r6, #15
 80127b6:	d050      	beq.n	801285a <_strtod_l+0x512>
 80127b8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80127bc:	dd27      	ble.n	801280e <_strtod_l+0x4c6>
 80127be:	f04f 0b00 	mov.w	fp, #0
 80127c2:	f8cd b010 	str.w	fp, [sp, #16]
 80127c6:	f8cd b020 	str.w	fp, [sp, #32]
 80127ca:	f8cd b018 	str.w	fp, [sp, #24]
 80127ce:	2322      	movs	r3, #34	; 0x22
 80127d0:	f04f 0800 	mov.w	r8, #0
 80127d4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80128e0 <_strtod_l+0x598>
 80127d8:	f8ca 3000 	str.w	r3, [sl]
 80127dc:	9b08      	ldr	r3, [sp, #32]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	f43f adf3 	beq.w	80123ca <_strtod_l+0x82>
 80127e4:	4650      	mov	r0, sl
 80127e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80127e8:	f001 ff7a 	bl	80146e0 <_Bfree>
 80127ec:	4650      	mov	r0, sl
 80127ee:	9906      	ldr	r1, [sp, #24]
 80127f0:	f001 ff76 	bl	80146e0 <_Bfree>
 80127f4:	4650      	mov	r0, sl
 80127f6:	9904      	ldr	r1, [sp, #16]
 80127f8:	f001 ff72 	bl	80146e0 <_Bfree>
 80127fc:	4650      	mov	r0, sl
 80127fe:	9908      	ldr	r1, [sp, #32]
 8012800:	f001 ff6e 	bl	80146e0 <_Bfree>
 8012804:	4659      	mov	r1, fp
 8012806:	4650      	mov	r0, sl
 8012808:	f001 ff6a 	bl	80146e0 <_Bfree>
 801280c:	e5dd      	b.n	80123ca <_strtod_l+0x82>
 801280e:	2300      	movs	r3, #0
 8012810:	4640      	mov	r0, r8
 8012812:	4649      	mov	r1, r9
 8012814:	461f      	mov	r7, r3
 8012816:	1136      	asrs	r6, r6, #4
 8012818:	2e01      	cmp	r6, #1
 801281a:	dc21      	bgt.n	8012860 <_strtod_l+0x518>
 801281c:	b10b      	cbz	r3, 8012822 <_strtod_l+0x4da>
 801281e:	4680      	mov	r8, r0
 8012820:	4689      	mov	r9, r1
 8012822:	4b2e      	ldr	r3, [pc, #184]	; (80128dc <_strtod_l+0x594>)
 8012824:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012828:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801282c:	4642      	mov	r2, r8
 801282e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012832:	464b      	mov	r3, r9
 8012834:	f7ed fe9a 	bl	800056c <__aeabi_dmul>
 8012838:	4b29      	ldr	r3, [pc, #164]	; (80128e0 <_strtod_l+0x598>)
 801283a:	460a      	mov	r2, r1
 801283c:	400b      	ands	r3, r1
 801283e:	4929      	ldr	r1, [pc, #164]	; (80128e4 <_strtod_l+0x59c>)
 8012840:	4680      	mov	r8, r0
 8012842:	428b      	cmp	r3, r1
 8012844:	d8bb      	bhi.n	80127be <_strtod_l+0x476>
 8012846:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801284a:	428b      	cmp	r3, r1
 801284c:	bf86      	itte	hi
 801284e:	f04f 38ff 	movhi.w	r8, #4294967295
 8012852:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80128e8 <_strtod_l+0x5a0>
 8012856:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801285a:	2300      	movs	r3, #0
 801285c:	9305      	str	r3, [sp, #20]
 801285e:	e07e      	b.n	801295e <_strtod_l+0x616>
 8012860:	07f2      	lsls	r2, r6, #31
 8012862:	d507      	bpl.n	8012874 <_strtod_l+0x52c>
 8012864:	4b1d      	ldr	r3, [pc, #116]	; (80128dc <_strtod_l+0x594>)
 8012866:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286e:	f7ed fe7d 	bl	800056c <__aeabi_dmul>
 8012872:	2301      	movs	r3, #1
 8012874:	3701      	adds	r7, #1
 8012876:	1076      	asrs	r6, r6, #1
 8012878:	e7ce      	b.n	8012818 <_strtod_l+0x4d0>
 801287a:	d0ee      	beq.n	801285a <_strtod_l+0x512>
 801287c:	4276      	negs	r6, r6
 801287e:	f016 020f 	ands.w	r2, r6, #15
 8012882:	d00a      	beq.n	801289a <_strtod_l+0x552>
 8012884:	4b14      	ldr	r3, [pc, #80]	; (80128d8 <_strtod_l+0x590>)
 8012886:	4640      	mov	r0, r8
 8012888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801288c:	4649      	mov	r1, r9
 801288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012892:	f7ed ff95 	bl	80007c0 <__aeabi_ddiv>
 8012896:	4680      	mov	r8, r0
 8012898:	4689      	mov	r9, r1
 801289a:	1136      	asrs	r6, r6, #4
 801289c:	d0dd      	beq.n	801285a <_strtod_l+0x512>
 801289e:	2e1f      	cmp	r6, #31
 80128a0:	dd24      	ble.n	80128ec <_strtod_l+0x5a4>
 80128a2:	f04f 0b00 	mov.w	fp, #0
 80128a6:	f8cd b010 	str.w	fp, [sp, #16]
 80128aa:	f8cd b020 	str.w	fp, [sp, #32]
 80128ae:	f8cd b018 	str.w	fp, [sp, #24]
 80128b2:	2322      	movs	r3, #34	; 0x22
 80128b4:	f04f 0800 	mov.w	r8, #0
 80128b8:	f04f 0900 	mov.w	r9, #0
 80128bc:	f8ca 3000 	str.w	r3, [sl]
 80128c0:	e78c      	b.n	80127dc <_strtod_l+0x494>
 80128c2:	bf00      	nop
 80128c4:	08015c1d 	.word	0x08015c1d
 80128c8:	08015c60 	.word	0x08015c60
 80128cc:	08015c15 	.word	0x08015c15
 80128d0:	08015da4 	.word	0x08015da4
 80128d4:	08016060 	.word	0x08016060
 80128d8:	08015f40 	.word	0x08015f40
 80128dc:	08015f18 	.word	0x08015f18
 80128e0:	7ff00000 	.word	0x7ff00000
 80128e4:	7ca00000 	.word	0x7ca00000
 80128e8:	7fefffff 	.word	0x7fefffff
 80128ec:	f016 0310 	ands.w	r3, r6, #16
 80128f0:	bf18      	it	ne
 80128f2:	236a      	movne	r3, #106	; 0x6a
 80128f4:	4640      	mov	r0, r8
 80128f6:	9305      	str	r3, [sp, #20]
 80128f8:	4649      	mov	r1, r9
 80128fa:	2300      	movs	r3, #0
 80128fc:	4fb2      	ldr	r7, [pc, #712]	; (8012bc8 <_strtod_l+0x880>)
 80128fe:	07f2      	lsls	r2, r6, #31
 8012900:	d504      	bpl.n	801290c <_strtod_l+0x5c4>
 8012902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012906:	f7ed fe31 	bl	800056c <__aeabi_dmul>
 801290a:	2301      	movs	r3, #1
 801290c:	1076      	asrs	r6, r6, #1
 801290e:	f107 0708 	add.w	r7, r7, #8
 8012912:	d1f4      	bne.n	80128fe <_strtod_l+0x5b6>
 8012914:	b10b      	cbz	r3, 801291a <_strtod_l+0x5d2>
 8012916:	4680      	mov	r8, r0
 8012918:	4689      	mov	r9, r1
 801291a:	9b05      	ldr	r3, [sp, #20]
 801291c:	b1bb      	cbz	r3, 801294e <_strtod_l+0x606>
 801291e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8012922:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012926:	2b00      	cmp	r3, #0
 8012928:	4649      	mov	r1, r9
 801292a:	dd10      	ble.n	801294e <_strtod_l+0x606>
 801292c:	2b1f      	cmp	r3, #31
 801292e:	f340 812b 	ble.w	8012b88 <_strtod_l+0x840>
 8012932:	2b34      	cmp	r3, #52	; 0x34
 8012934:	bfd8      	it	le
 8012936:	f04f 32ff 	movle.w	r2, #4294967295
 801293a:	f04f 0800 	mov.w	r8, #0
 801293e:	bfcf      	iteee	gt
 8012940:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012944:	3b20      	suble	r3, #32
 8012946:	fa02 f303 	lslle.w	r3, r2, r3
 801294a:	ea03 0901 	andle.w	r9, r3, r1
 801294e:	2200      	movs	r2, #0
 8012950:	2300      	movs	r3, #0
 8012952:	4640      	mov	r0, r8
 8012954:	4649      	mov	r1, r9
 8012956:	f7ee f871 	bl	8000a3c <__aeabi_dcmpeq>
 801295a:	2800      	cmp	r0, #0
 801295c:	d1a1      	bne.n	80128a2 <_strtod_l+0x55a>
 801295e:	9b06      	ldr	r3, [sp, #24]
 8012960:	465a      	mov	r2, fp
 8012962:	9300      	str	r3, [sp, #0]
 8012964:	4650      	mov	r0, sl
 8012966:	4623      	mov	r3, r4
 8012968:	9908      	ldr	r1, [sp, #32]
 801296a:	f001 ff25 	bl	80147b8 <__s2b>
 801296e:	9008      	str	r0, [sp, #32]
 8012970:	2800      	cmp	r0, #0
 8012972:	f43f af24 	beq.w	80127be <_strtod_l+0x476>
 8012976:	9b04      	ldr	r3, [sp, #16]
 8012978:	f04f 0b00 	mov.w	fp, #0
 801297c:	1b5d      	subs	r5, r3, r5
 801297e:	9b07      	ldr	r3, [sp, #28]
 8012980:	f8cd b010 	str.w	fp, [sp, #16]
 8012984:	2b00      	cmp	r3, #0
 8012986:	bfb4      	ite	lt
 8012988:	462b      	movlt	r3, r5
 801298a:	2300      	movge	r3, #0
 801298c:	930e      	str	r3, [sp, #56]	; 0x38
 801298e:	9b07      	ldr	r3, [sp, #28]
 8012990:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012994:	9316      	str	r3, [sp, #88]	; 0x58
 8012996:	9b08      	ldr	r3, [sp, #32]
 8012998:	4650      	mov	r0, sl
 801299a:	6859      	ldr	r1, [r3, #4]
 801299c:	f001 fe60 	bl	8014660 <_Balloc>
 80129a0:	9006      	str	r0, [sp, #24]
 80129a2:	2800      	cmp	r0, #0
 80129a4:	f43f af13 	beq.w	80127ce <_strtod_l+0x486>
 80129a8:	9b08      	ldr	r3, [sp, #32]
 80129aa:	300c      	adds	r0, #12
 80129ac:	691a      	ldr	r2, [r3, #16]
 80129ae:	f103 010c 	add.w	r1, r3, #12
 80129b2:	3202      	adds	r2, #2
 80129b4:	0092      	lsls	r2, r2, #2
 80129b6:	f7fe fc95 	bl	80112e4 <memcpy>
 80129ba:	ab1e      	add	r3, sp, #120	; 0x78
 80129bc:	9301      	str	r3, [sp, #4]
 80129be:	ab1d      	add	r3, sp, #116	; 0x74
 80129c0:	9300      	str	r3, [sp, #0]
 80129c2:	4642      	mov	r2, r8
 80129c4:	464b      	mov	r3, r9
 80129c6:	4650      	mov	r0, sl
 80129c8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80129cc:	f002 fa32 	bl	8014e34 <__d2b>
 80129d0:	901c      	str	r0, [sp, #112]	; 0x70
 80129d2:	2800      	cmp	r0, #0
 80129d4:	f43f aefb 	beq.w	80127ce <_strtod_l+0x486>
 80129d8:	2101      	movs	r1, #1
 80129da:	4650      	mov	r0, sl
 80129dc:	f001 ff84 	bl	80148e8 <__i2b>
 80129e0:	4603      	mov	r3, r0
 80129e2:	9004      	str	r0, [sp, #16]
 80129e4:	2800      	cmp	r0, #0
 80129e6:	f43f aef2 	beq.w	80127ce <_strtod_l+0x486>
 80129ea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80129ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80129ee:	2d00      	cmp	r5, #0
 80129f0:	bfab      	itete	ge
 80129f2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80129f4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80129f6:	18ee      	addge	r6, r5, r3
 80129f8:	1b5c      	sublt	r4, r3, r5
 80129fa:	9b05      	ldr	r3, [sp, #20]
 80129fc:	bfa8      	it	ge
 80129fe:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8012a00:	eba5 0503 	sub.w	r5, r5, r3
 8012a04:	4415      	add	r5, r2
 8012a06:	4b71      	ldr	r3, [pc, #452]	; (8012bcc <_strtod_l+0x884>)
 8012a08:	f105 35ff 	add.w	r5, r5, #4294967295
 8012a0c:	bfb8      	it	lt
 8012a0e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8012a10:	429d      	cmp	r5, r3
 8012a12:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012a16:	f280 80c9 	bge.w	8012bac <_strtod_l+0x864>
 8012a1a:	1b5b      	subs	r3, r3, r5
 8012a1c:	2b1f      	cmp	r3, #31
 8012a1e:	f04f 0701 	mov.w	r7, #1
 8012a22:	eba2 0203 	sub.w	r2, r2, r3
 8012a26:	f300 80b6 	bgt.w	8012b96 <_strtod_l+0x84e>
 8012a2a:	2500      	movs	r5, #0
 8012a2c:	fa07 f303 	lsl.w	r3, r7, r3
 8012a30:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a32:	18b7      	adds	r7, r6, r2
 8012a34:	9b05      	ldr	r3, [sp, #20]
 8012a36:	42be      	cmp	r6, r7
 8012a38:	4414      	add	r4, r2
 8012a3a:	441c      	add	r4, r3
 8012a3c:	4633      	mov	r3, r6
 8012a3e:	bfa8      	it	ge
 8012a40:	463b      	movge	r3, r7
 8012a42:	42a3      	cmp	r3, r4
 8012a44:	bfa8      	it	ge
 8012a46:	4623      	movge	r3, r4
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	bfc2      	ittt	gt
 8012a4c:	1aff      	subgt	r7, r7, r3
 8012a4e:	1ae4      	subgt	r4, r4, r3
 8012a50:	1af6      	subgt	r6, r6, r3
 8012a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	dd17      	ble.n	8012a88 <_strtod_l+0x740>
 8012a58:	461a      	mov	r2, r3
 8012a5a:	4650      	mov	r0, sl
 8012a5c:	9904      	ldr	r1, [sp, #16]
 8012a5e:	f001 fffd 	bl	8014a5c <__pow5mult>
 8012a62:	9004      	str	r0, [sp, #16]
 8012a64:	2800      	cmp	r0, #0
 8012a66:	f43f aeb2 	beq.w	80127ce <_strtod_l+0x486>
 8012a6a:	4601      	mov	r1, r0
 8012a6c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012a6e:	4650      	mov	r0, sl
 8012a70:	f001 ff50 	bl	8014914 <__multiply>
 8012a74:	9009      	str	r0, [sp, #36]	; 0x24
 8012a76:	2800      	cmp	r0, #0
 8012a78:	f43f aea9 	beq.w	80127ce <_strtod_l+0x486>
 8012a7c:	4650      	mov	r0, sl
 8012a7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012a80:	f001 fe2e 	bl	80146e0 <_Bfree>
 8012a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a86:	931c      	str	r3, [sp, #112]	; 0x70
 8012a88:	2f00      	cmp	r7, #0
 8012a8a:	f300 8093 	bgt.w	8012bb4 <_strtod_l+0x86c>
 8012a8e:	9b07      	ldr	r3, [sp, #28]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	dd08      	ble.n	8012aa6 <_strtod_l+0x75e>
 8012a94:	4650      	mov	r0, sl
 8012a96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012a98:	9906      	ldr	r1, [sp, #24]
 8012a9a:	f001 ffdf 	bl	8014a5c <__pow5mult>
 8012a9e:	9006      	str	r0, [sp, #24]
 8012aa0:	2800      	cmp	r0, #0
 8012aa2:	f43f ae94 	beq.w	80127ce <_strtod_l+0x486>
 8012aa6:	2c00      	cmp	r4, #0
 8012aa8:	dd08      	ble.n	8012abc <_strtod_l+0x774>
 8012aaa:	4622      	mov	r2, r4
 8012aac:	4650      	mov	r0, sl
 8012aae:	9906      	ldr	r1, [sp, #24]
 8012ab0:	f002 f82e 	bl	8014b10 <__lshift>
 8012ab4:	9006      	str	r0, [sp, #24]
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	f43f ae89 	beq.w	80127ce <_strtod_l+0x486>
 8012abc:	2e00      	cmp	r6, #0
 8012abe:	dd08      	ble.n	8012ad2 <_strtod_l+0x78a>
 8012ac0:	4632      	mov	r2, r6
 8012ac2:	4650      	mov	r0, sl
 8012ac4:	9904      	ldr	r1, [sp, #16]
 8012ac6:	f002 f823 	bl	8014b10 <__lshift>
 8012aca:	9004      	str	r0, [sp, #16]
 8012acc:	2800      	cmp	r0, #0
 8012ace:	f43f ae7e 	beq.w	80127ce <_strtod_l+0x486>
 8012ad2:	4650      	mov	r0, sl
 8012ad4:	9a06      	ldr	r2, [sp, #24]
 8012ad6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012ad8:	f002 f8a2 	bl	8014c20 <__mdiff>
 8012adc:	4683      	mov	fp, r0
 8012ade:	2800      	cmp	r0, #0
 8012ae0:	f43f ae75 	beq.w	80127ce <_strtod_l+0x486>
 8012ae4:	2400      	movs	r4, #0
 8012ae6:	68c3      	ldr	r3, [r0, #12]
 8012ae8:	9904      	ldr	r1, [sp, #16]
 8012aea:	60c4      	str	r4, [r0, #12]
 8012aec:	930d      	str	r3, [sp, #52]	; 0x34
 8012aee:	f002 f87b 	bl	8014be8 <__mcmp>
 8012af2:	42a0      	cmp	r0, r4
 8012af4:	da70      	bge.n	8012bd8 <_strtod_l+0x890>
 8012af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012af8:	ea53 0308 	orrs.w	r3, r3, r8
 8012afc:	f040 8096 	bne.w	8012c2c <_strtod_l+0x8e4>
 8012b00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	f040 8091 	bne.w	8012c2c <_strtod_l+0x8e4>
 8012b0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012b0e:	0d1b      	lsrs	r3, r3, #20
 8012b10:	051b      	lsls	r3, r3, #20
 8012b12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012b16:	f240 8089 	bls.w	8012c2c <_strtod_l+0x8e4>
 8012b1a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8012b1e:	b923      	cbnz	r3, 8012b2a <_strtod_l+0x7e2>
 8012b20:	f8db 3010 	ldr.w	r3, [fp, #16]
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	f340 8081 	ble.w	8012c2c <_strtod_l+0x8e4>
 8012b2a:	4659      	mov	r1, fp
 8012b2c:	2201      	movs	r2, #1
 8012b2e:	4650      	mov	r0, sl
 8012b30:	f001 ffee 	bl	8014b10 <__lshift>
 8012b34:	9904      	ldr	r1, [sp, #16]
 8012b36:	4683      	mov	fp, r0
 8012b38:	f002 f856 	bl	8014be8 <__mcmp>
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	dd75      	ble.n	8012c2c <_strtod_l+0x8e4>
 8012b40:	9905      	ldr	r1, [sp, #20]
 8012b42:	464b      	mov	r3, r9
 8012b44:	4a22      	ldr	r2, [pc, #136]	; (8012bd0 <_strtod_l+0x888>)
 8012b46:	2900      	cmp	r1, #0
 8012b48:	f000 8091 	beq.w	8012c6e <_strtod_l+0x926>
 8012b4c:	ea02 0109 	and.w	r1, r2, r9
 8012b50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012b54:	f300 808b 	bgt.w	8012c6e <_strtod_l+0x926>
 8012b58:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012b5c:	f77f aea9 	ble.w	80128b2 <_strtod_l+0x56a>
 8012b60:	2300      	movs	r3, #0
 8012b62:	4a1c      	ldr	r2, [pc, #112]	; (8012bd4 <_strtod_l+0x88c>)
 8012b64:	4640      	mov	r0, r8
 8012b66:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012b6a:	4649      	mov	r1, r9
 8012b6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012b70:	f7ed fcfc 	bl	800056c <__aeabi_dmul>
 8012b74:	460b      	mov	r3, r1
 8012b76:	4303      	orrs	r3, r0
 8012b78:	bf08      	it	eq
 8012b7a:	2322      	moveq	r3, #34	; 0x22
 8012b7c:	4680      	mov	r8, r0
 8012b7e:	4689      	mov	r9, r1
 8012b80:	bf08      	it	eq
 8012b82:	f8ca 3000 	streq.w	r3, [sl]
 8012b86:	e62d      	b.n	80127e4 <_strtod_l+0x49c>
 8012b88:	f04f 32ff 	mov.w	r2, #4294967295
 8012b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8012b90:	ea03 0808 	and.w	r8, r3, r8
 8012b94:	e6db      	b.n	801294e <_strtod_l+0x606>
 8012b96:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8012b9a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8012b9e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8012ba2:	35e2      	adds	r5, #226	; 0xe2
 8012ba4:	fa07 f505 	lsl.w	r5, r7, r5
 8012ba8:	970f      	str	r7, [sp, #60]	; 0x3c
 8012baa:	e742      	b.n	8012a32 <_strtod_l+0x6ea>
 8012bac:	2301      	movs	r3, #1
 8012bae:	2500      	movs	r5, #0
 8012bb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8012bb2:	e73e      	b.n	8012a32 <_strtod_l+0x6ea>
 8012bb4:	463a      	mov	r2, r7
 8012bb6:	4650      	mov	r0, sl
 8012bb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012bba:	f001 ffa9 	bl	8014b10 <__lshift>
 8012bbe:	901c      	str	r0, [sp, #112]	; 0x70
 8012bc0:	2800      	cmp	r0, #0
 8012bc2:	f47f af64 	bne.w	8012a8e <_strtod_l+0x746>
 8012bc6:	e602      	b.n	80127ce <_strtod_l+0x486>
 8012bc8:	08015c78 	.word	0x08015c78
 8012bcc:	fffffc02 	.word	0xfffffc02
 8012bd0:	7ff00000 	.word	0x7ff00000
 8012bd4:	39500000 	.word	0x39500000
 8012bd8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012bdc:	d166      	bne.n	8012cac <_strtod_l+0x964>
 8012bde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012be0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012be4:	b35a      	cbz	r2, 8012c3e <_strtod_l+0x8f6>
 8012be6:	4a9c      	ldr	r2, [pc, #624]	; (8012e58 <_strtod_l+0xb10>)
 8012be8:	4293      	cmp	r3, r2
 8012bea:	d12c      	bne.n	8012c46 <_strtod_l+0x8fe>
 8012bec:	9b05      	ldr	r3, [sp, #20]
 8012bee:	4640      	mov	r0, r8
 8012bf0:	b303      	cbz	r3, 8012c34 <_strtod_l+0x8ec>
 8012bf2:	464b      	mov	r3, r9
 8012bf4:	4a99      	ldr	r2, [pc, #612]	; (8012e5c <_strtod_l+0xb14>)
 8012bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8012bfa:	401a      	ands	r2, r3
 8012bfc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012c00:	d81b      	bhi.n	8012c3a <_strtod_l+0x8f2>
 8012c02:	0d12      	lsrs	r2, r2, #20
 8012c04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012c08:	fa01 f303 	lsl.w	r3, r1, r3
 8012c0c:	4298      	cmp	r0, r3
 8012c0e:	d11a      	bne.n	8012c46 <_strtod_l+0x8fe>
 8012c10:	4b93      	ldr	r3, [pc, #588]	; (8012e60 <_strtod_l+0xb18>)
 8012c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c14:	429a      	cmp	r2, r3
 8012c16:	d102      	bne.n	8012c1e <_strtod_l+0x8d6>
 8012c18:	3001      	adds	r0, #1
 8012c1a:	f43f add8 	beq.w	80127ce <_strtod_l+0x486>
 8012c1e:	f04f 0800 	mov.w	r8, #0
 8012c22:	4b8e      	ldr	r3, [pc, #568]	; (8012e5c <_strtod_l+0xb14>)
 8012c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c26:	401a      	ands	r2, r3
 8012c28:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8012c2c:	9b05      	ldr	r3, [sp, #20]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d196      	bne.n	8012b60 <_strtod_l+0x818>
 8012c32:	e5d7      	b.n	80127e4 <_strtod_l+0x49c>
 8012c34:	f04f 33ff 	mov.w	r3, #4294967295
 8012c38:	e7e8      	b.n	8012c0c <_strtod_l+0x8c4>
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	e7e6      	b.n	8012c0c <_strtod_l+0x8c4>
 8012c3e:	ea53 0308 	orrs.w	r3, r3, r8
 8012c42:	f43f af7d 	beq.w	8012b40 <_strtod_l+0x7f8>
 8012c46:	b1e5      	cbz	r5, 8012c82 <_strtod_l+0x93a>
 8012c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c4a:	421d      	tst	r5, r3
 8012c4c:	d0ee      	beq.n	8012c2c <_strtod_l+0x8e4>
 8012c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c50:	4640      	mov	r0, r8
 8012c52:	4649      	mov	r1, r9
 8012c54:	9a05      	ldr	r2, [sp, #20]
 8012c56:	b1c3      	cbz	r3, 8012c8a <_strtod_l+0x942>
 8012c58:	f7ff fb53 	bl	8012302 <sulp>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	460b      	mov	r3, r1
 8012c60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012c64:	f7ed facc 	bl	8000200 <__adddf3>
 8012c68:	4680      	mov	r8, r0
 8012c6a:	4689      	mov	r9, r1
 8012c6c:	e7de      	b.n	8012c2c <_strtod_l+0x8e4>
 8012c6e:	4013      	ands	r3, r2
 8012c70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012c74:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012c78:	f04f 38ff 	mov.w	r8, #4294967295
 8012c7c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012c80:	e7d4      	b.n	8012c2c <_strtod_l+0x8e4>
 8012c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c84:	ea13 0f08 	tst.w	r3, r8
 8012c88:	e7e0      	b.n	8012c4c <_strtod_l+0x904>
 8012c8a:	f7ff fb3a 	bl	8012302 <sulp>
 8012c8e:	4602      	mov	r2, r0
 8012c90:	460b      	mov	r3, r1
 8012c92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012c96:	f7ed fab1 	bl	80001fc <__aeabi_dsub>
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	4680      	mov	r8, r0
 8012ca0:	4689      	mov	r9, r1
 8012ca2:	f7ed fecb 	bl	8000a3c <__aeabi_dcmpeq>
 8012ca6:	2800      	cmp	r0, #0
 8012ca8:	d0c0      	beq.n	8012c2c <_strtod_l+0x8e4>
 8012caa:	e602      	b.n	80128b2 <_strtod_l+0x56a>
 8012cac:	4658      	mov	r0, fp
 8012cae:	9904      	ldr	r1, [sp, #16]
 8012cb0:	f002 f91c 	bl	8014eec <__ratio>
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012cba:	4606      	mov	r6, r0
 8012cbc:	460f      	mov	r7, r1
 8012cbe:	f7ed fed1 	bl	8000a64 <__aeabi_dcmple>
 8012cc2:	2800      	cmp	r0, #0
 8012cc4:	d075      	beq.n	8012db2 <_strtod_l+0xa6a>
 8012cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d047      	beq.n	8012d5c <_strtod_l+0xa14>
 8012ccc:	2600      	movs	r6, #0
 8012cce:	4f65      	ldr	r7, [pc, #404]	; (8012e64 <_strtod_l+0xb1c>)
 8012cd0:	4d64      	ldr	r5, [pc, #400]	; (8012e64 <_strtod_l+0xb1c>)
 8012cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012cd8:	0d1b      	lsrs	r3, r3, #20
 8012cda:	051b      	lsls	r3, r3, #20
 8012cdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8012cde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ce0:	4b61      	ldr	r3, [pc, #388]	; (8012e68 <_strtod_l+0xb20>)
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	f040 80c8 	bne.w	8012e78 <_strtod_l+0xb30>
 8012ce8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012cec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8012cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cf2:	4640      	mov	r0, r8
 8012cf4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8012cf8:	4649      	mov	r1, r9
 8012cfa:	f002 f821 	bl	8014d40 <__ulp>
 8012cfe:	4602      	mov	r2, r0
 8012d00:	460b      	mov	r3, r1
 8012d02:	4630      	mov	r0, r6
 8012d04:	4639      	mov	r1, r7
 8012d06:	f7ed fc31 	bl	800056c <__aeabi_dmul>
 8012d0a:	4642      	mov	r2, r8
 8012d0c:	464b      	mov	r3, r9
 8012d0e:	f7ed fa77 	bl	8000200 <__adddf3>
 8012d12:	460b      	mov	r3, r1
 8012d14:	4951      	ldr	r1, [pc, #324]	; (8012e5c <_strtod_l+0xb14>)
 8012d16:	4a55      	ldr	r2, [pc, #340]	; (8012e6c <_strtod_l+0xb24>)
 8012d18:	4019      	ands	r1, r3
 8012d1a:	4291      	cmp	r1, r2
 8012d1c:	4680      	mov	r8, r0
 8012d1e:	d95e      	bls.n	8012dde <_strtod_l+0xa96>
 8012d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d22:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012d26:	4293      	cmp	r3, r2
 8012d28:	d103      	bne.n	8012d32 <_strtod_l+0x9ea>
 8012d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d2c:	3301      	adds	r3, #1
 8012d2e:	f43f ad4e 	beq.w	80127ce <_strtod_l+0x486>
 8012d32:	f04f 38ff 	mov.w	r8, #4294967295
 8012d36:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8012e60 <_strtod_l+0xb18>
 8012d3a:	4650      	mov	r0, sl
 8012d3c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012d3e:	f001 fccf 	bl	80146e0 <_Bfree>
 8012d42:	4650      	mov	r0, sl
 8012d44:	9906      	ldr	r1, [sp, #24]
 8012d46:	f001 fccb 	bl	80146e0 <_Bfree>
 8012d4a:	4650      	mov	r0, sl
 8012d4c:	9904      	ldr	r1, [sp, #16]
 8012d4e:	f001 fcc7 	bl	80146e0 <_Bfree>
 8012d52:	4659      	mov	r1, fp
 8012d54:	4650      	mov	r0, sl
 8012d56:	f001 fcc3 	bl	80146e0 <_Bfree>
 8012d5a:	e61c      	b.n	8012996 <_strtod_l+0x64e>
 8012d5c:	f1b8 0f00 	cmp.w	r8, #0
 8012d60:	d119      	bne.n	8012d96 <_strtod_l+0xa4e>
 8012d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d68:	b9e3      	cbnz	r3, 8012da4 <_strtod_l+0xa5c>
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	4630      	mov	r0, r6
 8012d6e:	4639      	mov	r1, r7
 8012d70:	4b3c      	ldr	r3, [pc, #240]	; (8012e64 <_strtod_l+0xb1c>)
 8012d72:	f7ed fe6d 	bl	8000a50 <__aeabi_dcmplt>
 8012d76:	b9c8      	cbnz	r0, 8012dac <_strtod_l+0xa64>
 8012d78:	2200      	movs	r2, #0
 8012d7a:	4630      	mov	r0, r6
 8012d7c:	4639      	mov	r1, r7
 8012d7e:	4b3c      	ldr	r3, [pc, #240]	; (8012e70 <_strtod_l+0xb28>)
 8012d80:	f7ed fbf4 	bl	800056c <__aeabi_dmul>
 8012d84:	4604      	mov	r4, r0
 8012d86:	460d      	mov	r5, r1
 8012d88:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8012d8c:	9418      	str	r4, [sp, #96]	; 0x60
 8012d8e:	9319      	str	r3, [sp, #100]	; 0x64
 8012d90:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8012d94:	e79d      	b.n	8012cd2 <_strtod_l+0x98a>
 8012d96:	f1b8 0f01 	cmp.w	r8, #1
 8012d9a:	d103      	bne.n	8012da4 <_strtod_l+0xa5c>
 8012d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	f43f ad87 	beq.w	80128b2 <_strtod_l+0x56a>
 8012da4:	2600      	movs	r6, #0
 8012da6:	2400      	movs	r4, #0
 8012da8:	4f32      	ldr	r7, [pc, #200]	; (8012e74 <_strtod_l+0xb2c>)
 8012daa:	e791      	b.n	8012cd0 <_strtod_l+0x988>
 8012dac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8012dae:	4d30      	ldr	r5, [pc, #192]	; (8012e70 <_strtod_l+0xb28>)
 8012db0:	e7ea      	b.n	8012d88 <_strtod_l+0xa40>
 8012db2:	4b2f      	ldr	r3, [pc, #188]	; (8012e70 <_strtod_l+0xb28>)
 8012db4:	2200      	movs	r2, #0
 8012db6:	4630      	mov	r0, r6
 8012db8:	4639      	mov	r1, r7
 8012dba:	f7ed fbd7 	bl	800056c <__aeabi_dmul>
 8012dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012dc0:	4604      	mov	r4, r0
 8012dc2:	460d      	mov	r5, r1
 8012dc4:	b933      	cbnz	r3, 8012dd4 <_strtod_l+0xa8c>
 8012dc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012dca:	9010      	str	r0, [sp, #64]	; 0x40
 8012dcc:	9311      	str	r3, [sp, #68]	; 0x44
 8012dce:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012dd2:	e77e      	b.n	8012cd2 <_strtod_l+0x98a>
 8012dd4:	4602      	mov	r2, r0
 8012dd6:	460b      	mov	r3, r1
 8012dd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8012ddc:	e7f7      	b.n	8012dce <_strtod_l+0xa86>
 8012dde:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8012de2:	9b05      	ldr	r3, [sp, #20]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d1a8      	bne.n	8012d3a <_strtod_l+0x9f2>
 8012de8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012dec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012dee:	0d1b      	lsrs	r3, r3, #20
 8012df0:	051b      	lsls	r3, r3, #20
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d1a1      	bne.n	8012d3a <_strtod_l+0x9f2>
 8012df6:	4620      	mov	r0, r4
 8012df8:	4629      	mov	r1, r5
 8012dfa:	f7ee f995 	bl	8001128 <__aeabi_d2lz>
 8012dfe:	f7ed fb87 	bl	8000510 <__aeabi_l2d>
 8012e02:	4602      	mov	r2, r0
 8012e04:	460b      	mov	r3, r1
 8012e06:	4620      	mov	r0, r4
 8012e08:	4629      	mov	r1, r5
 8012e0a:	f7ed f9f7 	bl	80001fc <__aeabi_dsub>
 8012e0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012e14:	ea43 0308 	orr.w	r3, r3, r8
 8012e18:	4313      	orrs	r3, r2
 8012e1a:	4604      	mov	r4, r0
 8012e1c:	460d      	mov	r5, r1
 8012e1e:	d066      	beq.n	8012eee <_strtod_l+0xba6>
 8012e20:	a309      	add	r3, pc, #36	; (adr r3, 8012e48 <_strtod_l+0xb00>)
 8012e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e26:	f7ed fe13 	bl	8000a50 <__aeabi_dcmplt>
 8012e2a:	2800      	cmp	r0, #0
 8012e2c:	f47f acda 	bne.w	80127e4 <_strtod_l+0x49c>
 8012e30:	a307      	add	r3, pc, #28	; (adr r3, 8012e50 <_strtod_l+0xb08>)
 8012e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e36:	4620      	mov	r0, r4
 8012e38:	4629      	mov	r1, r5
 8012e3a:	f7ed fe27 	bl	8000a8c <__aeabi_dcmpgt>
 8012e3e:	2800      	cmp	r0, #0
 8012e40:	f43f af7b 	beq.w	8012d3a <_strtod_l+0x9f2>
 8012e44:	e4ce      	b.n	80127e4 <_strtod_l+0x49c>
 8012e46:	bf00      	nop
 8012e48:	94a03595 	.word	0x94a03595
 8012e4c:	3fdfffff 	.word	0x3fdfffff
 8012e50:	35afe535 	.word	0x35afe535
 8012e54:	3fe00000 	.word	0x3fe00000
 8012e58:	000fffff 	.word	0x000fffff
 8012e5c:	7ff00000 	.word	0x7ff00000
 8012e60:	7fefffff 	.word	0x7fefffff
 8012e64:	3ff00000 	.word	0x3ff00000
 8012e68:	7fe00000 	.word	0x7fe00000
 8012e6c:	7c9fffff 	.word	0x7c9fffff
 8012e70:	3fe00000 	.word	0x3fe00000
 8012e74:	bff00000 	.word	0xbff00000
 8012e78:	9b05      	ldr	r3, [sp, #20]
 8012e7a:	b313      	cbz	r3, 8012ec2 <_strtod_l+0xb7a>
 8012e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012e82:	d81e      	bhi.n	8012ec2 <_strtod_l+0xb7a>
 8012e84:	a326      	add	r3, pc, #152	; (adr r3, 8012f20 <_strtod_l+0xbd8>)
 8012e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	4629      	mov	r1, r5
 8012e8e:	f7ed fde9 	bl	8000a64 <__aeabi_dcmple>
 8012e92:	b190      	cbz	r0, 8012eba <_strtod_l+0xb72>
 8012e94:	4629      	mov	r1, r5
 8012e96:	4620      	mov	r0, r4
 8012e98:	f7ed fe40 	bl	8000b1c <__aeabi_d2uiz>
 8012e9c:	2801      	cmp	r0, #1
 8012e9e:	bf38      	it	cc
 8012ea0:	2001      	movcc	r0, #1
 8012ea2:	f7ed fae9 	bl	8000478 <__aeabi_ui2d>
 8012ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ea8:	4604      	mov	r4, r0
 8012eaa:	460d      	mov	r5, r1
 8012eac:	b9d3      	cbnz	r3, 8012ee4 <_strtod_l+0xb9c>
 8012eae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012eb2:	9012      	str	r0, [sp, #72]	; 0x48
 8012eb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8012eb6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8012eba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ebc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8012ec0:	1a9f      	subs	r7, r3, r2
 8012ec2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012ec6:	f001 ff3b 	bl	8014d40 <__ulp>
 8012eca:	4602      	mov	r2, r0
 8012ecc:	460b      	mov	r3, r1
 8012ece:	4630      	mov	r0, r6
 8012ed0:	4639      	mov	r1, r7
 8012ed2:	f7ed fb4b 	bl	800056c <__aeabi_dmul>
 8012ed6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012eda:	f7ed f991 	bl	8000200 <__adddf3>
 8012ede:	4680      	mov	r8, r0
 8012ee0:	4689      	mov	r9, r1
 8012ee2:	e77e      	b.n	8012de2 <_strtod_l+0xa9a>
 8012ee4:	4602      	mov	r2, r0
 8012ee6:	460b      	mov	r3, r1
 8012ee8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8012eec:	e7e3      	b.n	8012eb6 <_strtod_l+0xb6e>
 8012eee:	a30e      	add	r3, pc, #56	; (adr r3, 8012f28 <_strtod_l+0xbe0>)
 8012ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef4:	f7ed fdac 	bl	8000a50 <__aeabi_dcmplt>
 8012ef8:	e7a1      	b.n	8012e3e <_strtod_l+0xaf6>
 8012efa:	2300      	movs	r3, #0
 8012efc:	930c      	str	r3, [sp, #48]	; 0x30
 8012efe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012f00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012f02:	6013      	str	r3, [r2, #0]
 8012f04:	f7ff ba65 	b.w	80123d2 <_strtod_l+0x8a>
 8012f08:	2b65      	cmp	r3, #101	; 0x65
 8012f0a:	f43f ab5c 	beq.w	80125c6 <_strtod_l+0x27e>
 8012f0e:	2b45      	cmp	r3, #69	; 0x45
 8012f10:	f43f ab59 	beq.w	80125c6 <_strtod_l+0x27e>
 8012f14:	2201      	movs	r2, #1
 8012f16:	f7ff bb8d 	b.w	8012634 <_strtod_l+0x2ec>
 8012f1a:	bf00      	nop
 8012f1c:	f3af 8000 	nop.w
 8012f20:	ffc00000 	.word	0xffc00000
 8012f24:	41dfffff 	.word	0x41dfffff
 8012f28:	94a03595 	.word	0x94a03595
 8012f2c:	3fcfffff 	.word	0x3fcfffff

08012f30 <_strtod_r>:
 8012f30:	4b01      	ldr	r3, [pc, #4]	; (8012f38 <_strtod_r+0x8>)
 8012f32:	f7ff ba09 	b.w	8012348 <_strtod_l>
 8012f36:	bf00      	nop
 8012f38:	200000bc 	.word	0x200000bc

08012f3c <_strtol_l.isra.0>:
 8012f3c:	2b01      	cmp	r3, #1
 8012f3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f42:	4686      	mov	lr, r0
 8012f44:	d001      	beq.n	8012f4a <_strtol_l.isra.0+0xe>
 8012f46:	2b24      	cmp	r3, #36	; 0x24
 8012f48:	d906      	bls.n	8012f58 <_strtol_l.isra.0+0x1c>
 8012f4a:	f7fe f897 	bl	801107c <__errno>
 8012f4e:	2316      	movs	r3, #22
 8012f50:	6003      	str	r3, [r0, #0]
 8012f52:	2000      	movs	r0, #0
 8012f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f58:	468c      	mov	ip, r1
 8012f5a:	4e3a      	ldr	r6, [pc, #232]	; (8013044 <_strtol_l.isra.0+0x108>)
 8012f5c:	4660      	mov	r0, ip
 8012f5e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012f62:	5da5      	ldrb	r5, [r4, r6]
 8012f64:	f015 0508 	ands.w	r5, r5, #8
 8012f68:	d1f8      	bne.n	8012f5c <_strtol_l.isra.0+0x20>
 8012f6a:	2c2d      	cmp	r4, #45	; 0x2d
 8012f6c:	d133      	bne.n	8012fd6 <_strtol_l.isra.0+0x9a>
 8012f6e:	f04f 0801 	mov.w	r8, #1
 8012f72:	f89c 4000 	ldrb.w	r4, [ip]
 8012f76:	f100 0c02 	add.w	ip, r0, #2
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d05d      	beq.n	801303a <_strtol_l.isra.0+0xfe>
 8012f7e:	2b10      	cmp	r3, #16
 8012f80:	d10c      	bne.n	8012f9c <_strtol_l.isra.0+0x60>
 8012f82:	2c30      	cmp	r4, #48	; 0x30
 8012f84:	d10a      	bne.n	8012f9c <_strtol_l.isra.0+0x60>
 8012f86:	f89c 0000 	ldrb.w	r0, [ip]
 8012f8a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012f8e:	2858      	cmp	r0, #88	; 0x58
 8012f90:	d14e      	bne.n	8013030 <_strtol_l.isra.0+0xf4>
 8012f92:	2310      	movs	r3, #16
 8012f94:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8012f98:	f10c 0c02 	add.w	ip, ip, #2
 8012f9c:	2500      	movs	r5, #0
 8012f9e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8012fa2:	3f01      	subs	r7, #1
 8012fa4:	fbb7 f9f3 	udiv	r9, r7, r3
 8012fa8:	4628      	mov	r0, r5
 8012faa:	fb03 7a19 	mls	sl, r3, r9, r7
 8012fae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8012fb2:	2e09      	cmp	r6, #9
 8012fb4:	d818      	bhi.n	8012fe8 <_strtol_l.isra.0+0xac>
 8012fb6:	4634      	mov	r4, r6
 8012fb8:	42a3      	cmp	r3, r4
 8012fba:	dd24      	ble.n	8013006 <_strtol_l.isra.0+0xca>
 8012fbc:	2d00      	cmp	r5, #0
 8012fbe:	db1f      	blt.n	8013000 <_strtol_l.isra.0+0xc4>
 8012fc0:	4581      	cmp	r9, r0
 8012fc2:	d31d      	bcc.n	8013000 <_strtol_l.isra.0+0xc4>
 8012fc4:	d101      	bne.n	8012fca <_strtol_l.isra.0+0x8e>
 8012fc6:	45a2      	cmp	sl, r4
 8012fc8:	db1a      	blt.n	8013000 <_strtol_l.isra.0+0xc4>
 8012fca:	2501      	movs	r5, #1
 8012fcc:	fb00 4003 	mla	r0, r0, r3, r4
 8012fd0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012fd4:	e7eb      	b.n	8012fae <_strtol_l.isra.0+0x72>
 8012fd6:	2c2b      	cmp	r4, #43	; 0x2b
 8012fd8:	bf08      	it	eq
 8012fda:	f89c 4000 	ldrbeq.w	r4, [ip]
 8012fde:	46a8      	mov	r8, r5
 8012fe0:	bf08      	it	eq
 8012fe2:	f100 0c02 	addeq.w	ip, r0, #2
 8012fe6:	e7c8      	b.n	8012f7a <_strtol_l.isra.0+0x3e>
 8012fe8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8012fec:	2e19      	cmp	r6, #25
 8012fee:	d801      	bhi.n	8012ff4 <_strtol_l.isra.0+0xb8>
 8012ff0:	3c37      	subs	r4, #55	; 0x37
 8012ff2:	e7e1      	b.n	8012fb8 <_strtol_l.isra.0+0x7c>
 8012ff4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8012ff8:	2e19      	cmp	r6, #25
 8012ffa:	d804      	bhi.n	8013006 <_strtol_l.isra.0+0xca>
 8012ffc:	3c57      	subs	r4, #87	; 0x57
 8012ffe:	e7db      	b.n	8012fb8 <_strtol_l.isra.0+0x7c>
 8013000:	f04f 35ff 	mov.w	r5, #4294967295
 8013004:	e7e4      	b.n	8012fd0 <_strtol_l.isra.0+0x94>
 8013006:	2d00      	cmp	r5, #0
 8013008:	da08      	bge.n	801301c <_strtol_l.isra.0+0xe0>
 801300a:	2322      	movs	r3, #34	; 0x22
 801300c:	4638      	mov	r0, r7
 801300e:	f8ce 3000 	str.w	r3, [lr]
 8013012:	2a00      	cmp	r2, #0
 8013014:	d09e      	beq.n	8012f54 <_strtol_l.isra.0+0x18>
 8013016:	f10c 31ff 	add.w	r1, ip, #4294967295
 801301a:	e007      	b.n	801302c <_strtol_l.isra.0+0xf0>
 801301c:	f1b8 0f00 	cmp.w	r8, #0
 8013020:	d000      	beq.n	8013024 <_strtol_l.isra.0+0xe8>
 8013022:	4240      	negs	r0, r0
 8013024:	2a00      	cmp	r2, #0
 8013026:	d095      	beq.n	8012f54 <_strtol_l.isra.0+0x18>
 8013028:	2d00      	cmp	r5, #0
 801302a:	d1f4      	bne.n	8013016 <_strtol_l.isra.0+0xda>
 801302c:	6011      	str	r1, [r2, #0]
 801302e:	e791      	b.n	8012f54 <_strtol_l.isra.0+0x18>
 8013030:	2430      	movs	r4, #48	; 0x30
 8013032:	2b00      	cmp	r3, #0
 8013034:	d1b2      	bne.n	8012f9c <_strtol_l.isra.0+0x60>
 8013036:	2308      	movs	r3, #8
 8013038:	e7b0      	b.n	8012f9c <_strtol_l.isra.0+0x60>
 801303a:	2c30      	cmp	r4, #48	; 0x30
 801303c:	d0a3      	beq.n	8012f86 <_strtol_l.isra.0+0x4a>
 801303e:	230a      	movs	r3, #10
 8013040:	e7ac      	b.n	8012f9c <_strtol_l.isra.0+0x60>
 8013042:	bf00      	nop
 8013044:	08015ca1 	.word	0x08015ca1

08013048 <_strtol_r>:
 8013048:	f7ff bf78 	b.w	8012f3c <_strtol_l.isra.0>

0801304c <_write_r>:
 801304c:	b538      	push	{r3, r4, r5, lr}
 801304e:	4604      	mov	r4, r0
 8013050:	4608      	mov	r0, r1
 8013052:	4611      	mov	r1, r2
 8013054:	2200      	movs	r2, #0
 8013056:	4d05      	ldr	r5, [pc, #20]	; (801306c <_write_r+0x20>)
 8013058:	602a      	str	r2, [r5, #0]
 801305a:	461a      	mov	r2, r3
 801305c:	f7ef fdce 	bl	8002bfc <_write>
 8013060:	1c43      	adds	r3, r0, #1
 8013062:	d102      	bne.n	801306a <_write_r+0x1e>
 8013064:	682b      	ldr	r3, [r5, #0]
 8013066:	b103      	cbz	r3, 801306a <_write_r+0x1e>
 8013068:	6023      	str	r3, [r4, #0]
 801306a:	bd38      	pop	{r3, r4, r5, pc}
 801306c:	2000b5c0 	.word	0x2000b5c0

08013070 <_close_r>:
 8013070:	b538      	push	{r3, r4, r5, lr}
 8013072:	2300      	movs	r3, #0
 8013074:	4d05      	ldr	r5, [pc, #20]	; (801308c <_close_r+0x1c>)
 8013076:	4604      	mov	r4, r0
 8013078:	4608      	mov	r0, r1
 801307a:	602b      	str	r3, [r5, #0]
 801307c:	f7ef fdda 	bl	8002c34 <_close>
 8013080:	1c43      	adds	r3, r0, #1
 8013082:	d102      	bne.n	801308a <_close_r+0x1a>
 8013084:	682b      	ldr	r3, [r5, #0]
 8013086:	b103      	cbz	r3, 801308a <_close_r+0x1a>
 8013088:	6023      	str	r3, [r4, #0]
 801308a:	bd38      	pop	{r3, r4, r5, pc}
 801308c:	2000b5c0 	.word	0x2000b5c0

08013090 <quorem>:
 8013090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013094:	6903      	ldr	r3, [r0, #16]
 8013096:	690c      	ldr	r4, [r1, #16]
 8013098:	4607      	mov	r7, r0
 801309a:	42a3      	cmp	r3, r4
 801309c:	f2c0 8083 	blt.w	80131a6 <quorem+0x116>
 80130a0:	3c01      	subs	r4, #1
 80130a2:	f100 0514 	add.w	r5, r0, #20
 80130a6:	f101 0814 	add.w	r8, r1, #20
 80130aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80130ae:	9301      	str	r3, [sp, #4]
 80130b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80130b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80130b8:	3301      	adds	r3, #1
 80130ba:	429a      	cmp	r2, r3
 80130bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80130c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80130c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80130c8:	d332      	bcc.n	8013130 <quorem+0xa0>
 80130ca:	f04f 0e00 	mov.w	lr, #0
 80130ce:	4640      	mov	r0, r8
 80130d0:	46ac      	mov	ip, r5
 80130d2:	46f2      	mov	sl, lr
 80130d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80130d8:	b293      	uxth	r3, r2
 80130da:	fb06 e303 	mla	r3, r6, r3, lr
 80130de:	0c12      	lsrs	r2, r2, #16
 80130e0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80130e4:	fb06 e202 	mla	r2, r6, r2, lr
 80130e8:	b29b      	uxth	r3, r3
 80130ea:	ebaa 0303 	sub.w	r3, sl, r3
 80130ee:	f8dc a000 	ldr.w	sl, [ip]
 80130f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80130f6:	fa1f fa8a 	uxth.w	sl, sl
 80130fa:	4453      	add	r3, sl
 80130fc:	fa1f fa82 	uxth.w	sl, r2
 8013100:	f8dc 2000 	ldr.w	r2, [ip]
 8013104:	4581      	cmp	r9, r0
 8013106:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801310a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801310e:	b29b      	uxth	r3, r3
 8013110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013114:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013118:	f84c 3b04 	str.w	r3, [ip], #4
 801311c:	d2da      	bcs.n	80130d4 <quorem+0x44>
 801311e:	f855 300b 	ldr.w	r3, [r5, fp]
 8013122:	b92b      	cbnz	r3, 8013130 <quorem+0xa0>
 8013124:	9b01      	ldr	r3, [sp, #4]
 8013126:	3b04      	subs	r3, #4
 8013128:	429d      	cmp	r5, r3
 801312a:	461a      	mov	r2, r3
 801312c:	d32f      	bcc.n	801318e <quorem+0xfe>
 801312e:	613c      	str	r4, [r7, #16]
 8013130:	4638      	mov	r0, r7
 8013132:	f001 fd59 	bl	8014be8 <__mcmp>
 8013136:	2800      	cmp	r0, #0
 8013138:	db25      	blt.n	8013186 <quorem+0xf6>
 801313a:	4628      	mov	r0, r5
 801313c:	f04f 0c00 	mov.w	ip, #0
 8013140:	3601      	adds	r6, #1
 8013142:	f858 1b04 	ldr.w	r1, [r8], #4
 8013146:	f8d0 e000 	ldr.w	lr, [r0]
 801314a:	b28b      	uxth	r3, r1
 801314c:	ebac 0303 	sub.w	r3, ip, r3
 8013150:	fa1f f28e 	uxth.w	r2, lr
 8013154:	4413      	add	r3, r2
 8013156:	0c0a      	lsrs	r2, r1, #16
 8013158:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801315c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013160:	b29b      	uxth	r3, r3
 8013162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013166:	45c1      	cmp	r9, r8
 8013168:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801316c:	f840 3b04 	str.w	r3, [r0], #4
 8013170:	d2e7      	bcs.n	8013142 <quorem+0xb2>
 8013172:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801317a:	b922      	cbnz	r2, 8013186 <quorem+0xf6>
 801317c:	3b04      	subs	r3, #4
 801317e:	429d      	cmp	r5, r3
 8013180:	461a      	mov	r2, r3
 8013182:	d30a      	bcc.n	801319a <quorem+0x10a>
 8013184:	613c      	str	r4, [r7, #16]
 8013186:	4630      	mov	r0, r6
 8013188:	b003      	add	sp, #12
 801318a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801318e:	6812      	ldr	r2, [r2, #0]
 8013190:	3b04      	subs	r3, #4
 8013192:	2a00      	cmp	r2, #0
 8013194:	d1cb      	bne.n	801312e <quorem+0x9e>
 8013196:	3c01      	subs	r4, #1
 8013198:	e7c6      	b.n	8013128 <quorem+0x98>
 801319a:	6812      	ldr	r2, [r2, #0]
 801319c:	3b04      	subs	r3, #4
 801319e:	2a00      	cmp	r2, #0
 80131a0:	d1f0      	bne.n	8013184 <quorem+0xf4>
 80131a2:	3c01      	subs	r4, #1
 80131a4:	e7eb      	b.n	801317e <quorem+0xee>
 80131a6:	2000      	movs	r0, #0
 80131a8:	e7ee      	b.n	8013188 <quorem+0xf8>
 80131aa:	0000      	movs	r0, r0
 80131ac:	0000      	movs	r0, r0
	...

080131b0 <_dtoa_r>:
 80131b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131b4:	4616      	mov	r6, r2
 80131b6:	461f      	mov	r7, r3
 80131b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80131ba:	b099      	sub	sp, #100	; 0x64
 80131bc:	4605      	mov	r5, r0
 80131be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80131c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80131c6:	b974      	cbnz	r4, 80131e6 <_dtoa_r+0x36>
 80131c8:	2010      	movs	r0, #16
 80131ca:	f7fe f87b 	bl	80112c4 <malloc>
 80131ce:	4602      	mov	r2, r0
 80131d0:	6268      	str	r0, [r5, #36]	; 0x24
 80131d2:	b920      	cbnz	r0, 80131de <_dtoa_r+0x2e>
 80131d4:	21ea      	movs	r1, #234	; 0xea
 80131d6:	4bae      	ldr	r3, [pc, #696]	; (8013490 <_dtoa_r+0x2e0>)
 80131d8:	48ae      	ldr	r0, [pc, #696]	; (8013494 <_dtoa_r+0x2e4>)
 80131da:	f002 f89b 	bl	8015314 <__assert_func>
 80131de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80131e2:	6004      	str	r4, [r0, #0]
 80131e4:	60c4      	str	r4, [r0, #12]
 80131e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80131e8:	6819      	ldr	r1, [r3, #0]
 80131ea:	b151      	cbz	r1, 8013202 <_dtoa_r+0x52>
 80131ec:	685a      	ldr	r2, [r3, #4]
 80131ee:	2301      	movs	r3, #1
 80131f0:	4093      	lsls	r3, r2
 80131f2:	604a      	str	r2, [r1, #4]
 80131f4:	608b      	str	r3, [r1, #8]
 80131f6:	4628      	mov	r0, r5
 80131f8:	f001 fa72 	bl	80146e0 <_Bfree>
 80131fc:	2200      	movs	r2, #0
 80131fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013200:	601a      	str	r2, [r3, #0]
 8013202:	1e3b      	subs	r3, r7, #0
 8013204:	bfaf      	iteee	ge
 8013206:	2300      	movge	r3, #0
 8013208:	2201      	movlt	r2, #1
 801320a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801320e:	9305      	strlt	r3, [sp, #20]
 8013210:	bfa8      	it	ge
 8013212:	f8c8 3000 	strge.w	r3, [r8]
 8013216:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801321a:	4b9f      	ldr	r3, [pc, #636]	; (8013498 <_dtoa_r+0x2e8>)
 801321c:	bfb8      	it	lt
 801321e:	f8c8 2000 	strlt.w	r2, [r8]
 8013222:	ea33 0309 	bics.w	r3, r3, r9
 8013226:	d119      	bne.n	801325c <_dtoa_r+0xac>
 8013228:	f242 730f 	movw	r3, #9999	; 0x270f
 801322c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801322e:	6013      	str	r3, [r2, #0]
 8013230:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013234:	4333      	orrs	r3, r6
 8013236:	f000 8580 	beq.w	8013d3a <_dtoa_r+0xb8a>
 801323a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801323c:	b953      	cbnz	r3, 8013254 <_dtoa_r+0xa4>
 801323e:	4b97      	ldr	r3, [pc, #604]	; (801349c <_dtoa_r+0x2ec>)
 8013240:	e022      	b.n	8013288 <_dtoa_r+0xd8>
 8013242:	4b97      	ldr	r3, [pc, #604]	; (80134a0 <_dtoa_r+0x2f0>)
 8013244:	9308      	str	r3, [sp, #32]
 8013246:	3308      	adds	r3, #8
 8013248:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801324a:	6013      	str	r3, [r2, #0]
 801324c:	9808      	ldr	r0, [sp, #32]
 801324e:	b019      	add	sp, #100	; 0x64
 8013250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013254:	4b91      	ldr	r3, [pc, #580]	; (801349c <_dtoa_r+0x2ec>)
 8013256:	9308      	str	r3, [sp, #32]
 8013258:	3303      	adds	r3, #3
 801325a:	e7f5      	b.n	8013248 <_dtoa_r+0x98>
 801325c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013260:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8013264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013268:	2200      	movs	r2, #0
 801326a:	2300      	movs	r3, #0
 801326c:	f7ed fbe6 	bl	8000a3c <__aeabi_dcmpeq>
 8013270:	4680      	mov	r8, r0
 8013272:	b158      	cbz	r0, 801328c <_dtoa_r+0xdc>
 8013274:	2301      	movs	r3, #1
 8013276:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013278:	6013      	str	r3, [r2, #0]
 801327a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801327c:	2b00      	cmp	r3, #0
 801327e:	f000 8559 	beq.w	8013d34 <_dtoa_r+0xb84>
 8013282:	4888      	ldr	r0, [pc, #544]	; (80134a4 <_dtoa_r+0x2f4>)
 8013284:	6018      	str	r0, [r3, #0]
 8013286:	1e43      	subs	r3, r0, #1
 8013288:	9308      	str	r3, [sp, #32]
 801328a:	e7df      	b.n	801324c <_dtoa_r+0x9c>
 801328c:	ab16      	add	r3, sp, #88	; 0x58
 801328e:	9301      	str	r3, [sp, #4]
 8013290:	ab17      	add	r3, sp, #92	; 0x5c
 8013292:	9300      	str	r3, [sp, #0]
 8013294:	4628      	mov	r0, r5
 8013296:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801329a:	f001 fdcb 	bl	8014e34 <__d2b>
 801329e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80132a2:	4682      	mov	sl, r0
 80132a4:	2c00      	cmp	r4, #0
 80132a6:	d07e      	beq.n	80133a6 <_dtoa_r+0x1f6>
 80132a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80132ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80132ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80132b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80132b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80132ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80132be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80132c2:	2200      	movs	r2, #0
 80132c4:	4b78      	ldr	r3, [pc, #480]	; (80134a8 <_dtoa_r+0x2f8>)
 80132c6:	f7ec ff99 	bl	80001fc <__aeabi_dsub>
 80132ca:	a36b      	add	r3, pc, #428	; (adr r3, 8013478 <_dtoa_r+0x2c8>)
 80132cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d0:	f7ed f94c 	bl	800056c <__aeabi_dmul>
 80132d4:	a36a      	add	r3, pc, #424	; (adr r3, 8013480 <_dtoa_r+0x2d0>)
 80132d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132da:	f7ec ff91 	bl	8000200 <__adddf3>
 80132de:	4606      	mov	r6, r0
 80132e0:	4620      	mov	r0, r4
 80132e2:	460f      	mov	r7, r1
 80132e4:	f7ed f8d8 	bl	8000498 <__aeabi_i2d>
 80132e8:	a367      	add	r3, pc, #412	; (adr r3, 8013488 <_dtoa_r+0x2d8>)
 80132ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ee:	f7ed f93d 	bl	800056c <__aeabi_dmul>
 80132f2:	4602      	mov	r2, r0
 80132f4:	460b      	mov	r3, r1
 80132f6:	4630      	mov	r0, r6
 80132f8:	4639      	mov	r1, r7
 80132fa:	f7ec ff81 	bl	8000200 <__adddf3>
 80132fe:	4606      	mov	r6, r0
 8013300:	460f      	mov	r7, r1
 8013302:	f7ed fbe3 	bl	8000acc <__aeabi_d2iz>
 8013306:	2200      	movs	r2, #0
 8013308:	4681      	mov	r9, r0
 801330a:	2300      	movs	r3, #0
 801330c:	4630      	mov	r0, r6
 801330e:	4639      	mov	r1, r7
 8013310:	f7ed fb9e 	bl	8000a50 <__aeabi_dcmplt>
 8013314:	b148      	cbz	r0, 801332a <_dtoa_r+0x17a>
 8013316:	4648      	mov	r0, r9
 8013318:	f7ed f8be 	bl	8000498 <__aeabi_i2d>
 801331c:	4632      	mov	r2, r6
 801331e:	463b      	mov	r3, r7
 8013320:	f7ed fb8c 	bl	8000a3c <__aeabi_dcmpeq>
 8013324:	b908      	cbnz	r0, 801332a <_dtoa_r+0x17a>
 8013326:	f109 39ff 	add.w	r9, r9, #4294967295
 801332a:	f1b9 0f16 	cmp.w	r9, #22
 801332e:	d857      	bhi.n	80133e0 <_dtoa_r+0x230>
 8013330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013334:	4b5d      	ldr	r3, [pc, #372]	; (80134ac <_dtoa_r+0x2fc>)
 8013336:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333e:	f7ed fb87 	bl	8000a50 <__aeabi_dcmplt>
 8013342:	2800      	cmp	r0, #0
 8013344:	d04e      	beq.n	80133e4 <_dtoa_r+0x234>
 8013346:	2300      	movs	r3, #0
 8013348:	f109 39ff 	add.w	r9, r9, #4294967295
 801334c:	930f      	str	r3, [sp, #60]	; 0x3c
 801334e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013350:	1b1c      	subs	r4, r3, r4
 8013352:	1e63      	subs	r3, r4, #1
 8013354:	9309      	str	r3, [sp, #36]	; 0x24
 8013356:	bf49      	itett	mi
 8013358:	f1c4 0301 	rsbmi	r3, r4, #1
 801335c:	2300      	movpl	r3, #0
 801335e:	9306      	strmi	r3, [sp, #24]
 8013360:	2300      	movmi	r3, #0
 8013362:	bf54      	ite	pl
 8013364:	9306      	strpl	r3, [sp, #24]
 8013366:	9309      	strmi	r3, [sp, #36]	; 0x24
 8013368:	f1b9 0f00 	cmp.w	r9, #0
 801336c:	db3c      	blt.n	80133e8 <_dtoa_r+0x238>
 801336e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013370:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8013374:	444b      	add	r3, r9
 8013376:	9309      	str	r3, [sp, #36]	; 0x24
 8013378:	2300      	movs	r3, #0
 801337a:	930a      	str	r3, [sp, #40]	; 0x28
 801337c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801337e:	2b09      	cmp	r3, #9
 8013380:	d86c      	bhi.n	801345c <_dtoa_r+0x2ac>
 8013382:	2b05      	cmp	r3, #5
 8013384:	bfc4      	itt	gt
 8013386:	3b04      	subgt	r3, #4
 8013388:	9322      	strgt	r3, [sp, #136]	; 0x88
 801338a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801338c:	bfc8      	it	gt
 801338e:	2400      	movgt	r4, #0
 8013390:	f1a3 0302 	sub.w	r3, r3, #2
 8013394:	bfd8      	it	le
 8013396:	2401      	movle	r4, #1
 8013398:	2b03      	cmp	r3, #3
 801339a:	f200 808b 	bhi.w	80134b4 <_dtoa_r+0x304>
 801339e:	e8df f003 	tbb	[pc, r3]
 80133a2:	4f2d      	.short	0x4f2d
 80133a4:	5b4d      	.short	0x5b4d
 80133a6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80133aa:	441c      	add	r4, r3
 80133ac:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80133b0:	2b20      	cmp	r3, #32
 80133b2:	bfc3      	ittte	gt
 80133b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80133b8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80133bc:	fa09 f303 	lslgt.w	r3, r9, r3
 80133c0:	f1c3 0320 	rsble	r3, r3, #32
 80133c4:	bfc6      	itte	gt
 80133c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80133ca:	4318      	orrgt	r0, r3
 80133cc:	fa06 f003 	lslle.w	r0, r6, r3
 80133d0:	f7ed f852 	bl	8000478 <__aeabi_ui2d>
 80133d4:	2301      	movs	r3, #1
 80133d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80133da:	3c01      	subs	r4, #1
 80133dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80133de:	e770      	b.n	80132c2 <_dtoa_r+0x112>
 80133e0:	2301      	movs	r3, #1
 80133e2:	e7b3      	b.n	801334c <_dtoa_r+0x19c>
 80133e4:	900f      	str	r0, [sp, #60]	; 0x3c
 80133e6:	e7b2      	b.n	801334e <_dtoa_r+0x19e>
 80133e8:	9b06      	ldr	r3, [sp, #24]
 80133ea:	eba3 0309 	sub.w	r3, r3, r9
 80133ee:	9306      	str	r3, [sp, #24]
 80133f0:	f1c9 0300 	rsb	r3, r9, #0
 80133f4:	930a      	str	r3, [sp, #40]	; 0x28
 80133f6:	2300      	movs	r3, #0
 80133f8:	930e      	str	r3, [sp, #56]	; 0x38
 80133fa:	e7bf      	b.n	801337c <_dtoa_r+0x1cc>
 80133fc:	2300      	movs	r3, #0
 80133fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8013400:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013402:	2b00      	cmp	r3, #0
 8013404:	dc59      	bgt.n	80134ba <_dtoa_r+0x30a>
 8013406:	f04f 0b01 	mov.w	fp, #1
 801340a:	465b      	mov	r3, fp
 801340c:	f8cd b008 	str.w	fp, [sp, #8]
 8013410:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8013414:	2200      	movs	r2, #0
 8013416:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8013418:	6042      	str	r2, [r0, #4]
 801341a:	2204      	movs	r2, #4
 801341c:	f102 0614 	add.w	r6, r2, #20
 8013420:	429e      	cmp	r6, r3
 8013422:	6841      	ldr	r1, [r0, #4]
 8013424:	d94f      	bls.n	80134c6 <_dtoa_r+0x316>
 8013426:	4628      	mov	r0, r5
 8013428:	f001 f91a 	bl	8014660 <_Balloc>
 801342c:	9008      	str	r0, [sp, #32]
 801342e:	2800      	cmp	r0, #0
 8013430:	d14d      	bne.n	80134ce <_dtoa_r+0x31e>
 8013432:	4602      	mov	r2, r0
 8013434:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013438:	4b1d      	ldr	r3, [pc, #116]	; (80134b0 <_dtoa_r+0x300>)
 801343a:	e6cd      	b.n	80131d8 <_dtoa_r+0x28>
 801343c:	2301      	movs	r3, #1
 801343e:	e7de      	b.n	80133fe <_dtoa_r+0x24e>
 8013440:	2300      	movs	r3, #0
 8013442:	930b      	str	r3, [sp, #44]	; 0x2c
 8013444:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013446:	eb09 0b03 	add.w	fp, r9, r3
 801344a:	f10b 0301 	add.w	r3, fp, #1
 801344e:	2b01      	cmp	r3, #1
 8013450:	9302      	str	r3, [sp, #8]
 8013452:	bfb8      	it	lt
 8013454:	2301      	movlt	r3, #1
 8013456:	e7dd      	b.n	8013414 <_dtoa_r+0x264>
 8013458:	2301      	movs	r3, #1
 801345a:	e7f2      	b.n	8013442 <_dtoa_r+0x292>
 801345c:	2401      	movs	r4, #1
 801345e:	2300      	movs	r3, #0
 8013460:	940b      	str	r4, [sp, #44]	; 0x2c
 8013462:	9322      	str	r3, [sp, #136]	; 0x88
 8013464:	f04f 3bff 	mov.w	fp, #4294967295
 8013468:	2200      	movs	r2, #0
 801346a:	2312      	movs	r3, #18
 801346c:	f8cd b008 	str.w	fp, [sp, #8]
 8013470:	9223      	str	r2, [sp, #140]	; 0x8c
 8013472:	e7cf      	b.n	8013414 <_dtoa_r+0x264>
 8013474:	f3af 8000 	nop.w
 8013478:	636f4361 	.word	0x636f4361
 801347c:	3fd287a7 	.word	0x3fd287a7
 8013480:	8b60c8b3 	.word	0x8b60c8b3
 8013484:	3fc68a28 	.word	0x3fc68a28
 8013488:	509f79fb 	.word	0x509f79fb
 801348c:	3fd34413 	.word	0x3fd34413
 8013490:	08015dae 	.word	0x08015dae
 8013494:	08015dc5 	.word	0x08015dc5
 8013498:	7ff00000 	.word	0x7ff00000
 801349c:	08015daa 	.word	0x08015daa
 80134a0:	08015da1 	.word	0x08015da1
 80134a4:	08015c21 	.word	0x08015c21
 80134a8:	3ff80000 	.word	0x3ff80000
 80134ac:	08015f40 	.word	0x08015f40
 80134b0:	08015e24 	.word	0x08015e24
 80134b4:	2301      	movs	r3, #1
 80134b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80134b8:	e7d4      	b.n	8013464 <_dtoa_r+0x2b4>
 80134ba:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80134be:	465b      	mov	r3, fp
 80134c0:	f8cd b008 	str.w	fp, [sp, #8]
 80134c4:	e7a6      	b.n	8013414 <_dtoa_r+0x264>
 80134c6:	3101      	adds	r1, #1
 80134c8:	6041      	str	r1, [r0, #4]
 80134ca:	0052      	lsls	r2, r2, #1
 80134cc:	e7a6      	b.n	801341c <_dtoa_r+0x26c>
 80134ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80134d0:	9a08      	ldr	r2, [sp, #32]
 80134d2:	601a      	str	r2, [r3, #0]
 80134d4:	9b02      	ldr	r3, [sp, #8]
 80134d6:	2b0e      	cmp	r3, #14
 80134d8:	f200 80a8 	bhi.w	801362c <_dtoa_r+0x47c>
 80134dc:	2c00      	cmp	r4, #0
 80134de:	f000 80a5 	beq.w	801362c <_dtoa_r+0x47c>
 80134e2:	f1b9 0f00 	cmp.w	r9, #0
 80134e6:	dd34      	ble.n	8013552 <_dtoa_r+0x3a2>
 80134e8:	4a9a      	ldr	r2, [pc, #616]	; (8013754 <_dtoa_r+0x5a4>)
 80134ea:	f009 030f 	and.w	r3, r9, #15
 80134ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80134f2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80134f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80134fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80134fe:	ea4f 1429 	mov.w	r4, r9, asr #4
 8013502:	d016      	beq.n	8013532 <_dtoa_r+0x382>
 8013504:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013508:	4b93      	ldr	r3, [pc, #588]	; (8013758 <_dtoa_r+0x5a8>)
 801350a:	2703      	movs	r7, #3
 801350c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013510:	f7ed f956 	bl	80007c0 <__aeabi_ddiv>
 8013514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013518:	f004 040f 	and.w	r4, r4, #15
 801351c:	4e8e      	ldr	r6, [pc, #568]	; (8013758 <_dtoa_r+0x5a8>)
 801351e:	b954      	cbnz	r4, 8013536 <_dtoa_r+0x386>
 8013520:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013528:	f7ed f94a 	bl	80007c0 <__aeabi_ddiv>
 801352c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013530:	e029      	b.n	8013586 <_dtoa_r+0x3d6>
 8013532:	2702      	movs	r7, #2
 8013534:	e7f2      	b.n	801351c <_dtoa_r+0x36c>
 8013536:	07e1      	lsls	r1, r4, #31
 8013538:	d508      	bpl.n	801354c <_dtoa_r+0x39c>
 801353a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801353e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013542:	f7ed f813 	bl	800056c <__aeabi_dmul>
 8013546:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801354a:	3701      	adds	r7, #1
 801354c:	1064      	asrs	r4, r4, #1
 801354e:	3608      	adds	r6, #8
 8013550:	e7e5      	b.n	801351e <_dtoa_r+0x36e>
 8013552:	f000 80a5 	beq.w	80136a0 <_dtoa_r+0x4f0>
 8013556:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801355a:	f1c9 0400 	rsb	r4, r9, #0
 801355e:	4b7d      	ldr	r3, [pc, #500]	; (8013754 <_dtoa_r+0x5a4>)
 8013560:	f004 020f 	and.w	r2, r4, #15
 8013564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801356c:	f7ec fffe 	bl	800056c <__aeabi_dmul>
 8013570:	2702      	movs	r7, #2
 8013572:	2300      	movs	r3, #0
 8013574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013578:	4e77      	ldr	r6, [pc, #476]	; (8013758 <_dtoa_r+0x5a8>)
 801357a:	1124      	asrs	r4, r4, #4
 801357c:	2c00      	cmp	r4, #0
 801357e:	f040 8084 	bne.w	801368a <_dtoa_r+0x4da>
 8013582:	2b00      	cmp	r3, #0
 8013584:	d1d2      	bne.n	801352c <_dtoa_r+0x37c>
 8013586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013588:	2b00      	cmp	r3, #0
 801358a:	f000 808b 	beq.w	80136a4 <_dtoa_r+0x4f4>
 801358e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013592:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8013596:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801359a:	2200      	movs	r2, #0
 801359c:	4b6f      	ldr	r3, [pc, #444]	; (801375c <_dtoa_r+0x5ac>)
 801359e:	f7ed fa57 	bl	8000a50 <__aeabi_dcmplt>
 80135a2:	2800      	cmp	r0, #0
 80135a4:	d07e      	beq.n	80136a4 <_dtoa_r+0x4f4>
 80135a6:	9b02      	ldr	r3, [sp, #8]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d07b      	beq.n	80136a4 <_dtoa_r+0x4f4>
 80135ac:	f1bb 0f00 	cmp.w	fp, #0
 80135b0:	dd38      	ble.n	8013624 <_dtoa_r+0x474>
 80135b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80135b6:	2200      	movs	r2, #0
 80135b8:	4b69      	ldr	r3, [pc, #420]	; (8013760 <_dtoa_r+0x5b0>)
 80135ba:	f7ec ffd7 	bl	800056c <__aeabi_dmul>
 80135be:	465c      	mov	r4, fp
 80135c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80135c4:	f109 38ff 	add.w	r8, r9, #4294967295
 80135c8:	3701      	adds	r7, #1
 80135ca:	4638      	mov	r0, r7
 80135cc:	f7ec ff64 	bl	8000498 <__aeabi_i2d>
 80135d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80135d4:	f7ec ffca 	bl	800056c <__aeabi_dmul>
 80135d8:	2200      	movs	r2, #0
 80135da:	4b62      	ldr	r3, [pc, #392]	; (8013764 <_dtoa_r+0x5b4>)
 80135dc:	f7ec fe10 	bl	8000200 <__adddf3>
 80135e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80135e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80135e8:	9611      	str	r6, [sp, #68]	; 0x44
 80135ea:	2c00      	cmp	r4, #0
 80135ec:	d15d      	bne.n	80136aa <_dtoa_r+0x4fa>
 80135ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80135f2:	2200      	movs	r2, #0
 80135f4:	4b5c      	ldr	r3, [pc, #368]	; (8013768 <_dtoa_r+0x5b8>)
 80135f6:	f7ec fe01 	bl	80001fc <__aeabi_dsub>
 80135fa:	4602      	mov	r2, r0
 80135fc:	460b      	mov	r3, r1
 80135fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013602:	4633      	mov	r3, r6
 8013604:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013606:	f7ed fa41 	bl	8000a8c <__aeabi_dcmpgt>
 801360a:	2800      	cmp	r0, #0
 801360c:	f040 829e 	bne.w	8013b4c <_dtoa_r+0x99c>
 8013610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013614:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013616:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801361a:	f7ed fa19 	bl	8000a50 <__aeabi_dcmplt>
 801361e:	2800      	cmp	r0, #0
 8013620:	f040 8292 	bne.w	8013b48 <_dtoa_r+0x998>
 8013624:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8013628:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801362c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801362e:	2b00      	cmp	r3, #0
 8013630:	f2c0 8153 	blt.w	80138da <_dtoa_r+0x72a>
 8013634:	f1b9 0f0e 	cmp.w	r9, #14
 8013638:	f300 814f 	bgt.w	80138da <_dtoa_r+0x72a>
 801363c:	4b45      	ldr	r3, [pc, #276]	; (8013754 <_dtoa_r+0x5a4>)
 801363e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013642:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013646:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801364a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801364c:	2b00      	cmp	r3, #0
 801364e:	f280 80db 	bge.w	8013808 <_dtoa_r+0x658>
 8013652:	9b02      	ldr	r3, [sp, #8]
 8013654:	2b00      	cmp	r3, #0
 8013656:	f300 80d7 	bgt.w	8013808 <_dtoa_r+0x658>
 801365a:	f040 8274 	bne.w	8013b46 <_dtoa_r+0x996>
 801365e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013662:	2200      	movs	r2, #0
 8013664:	4b40      	ldr	r3, [pc, #256]	; (8013768 <_dtoa_r+0x5b8>)
 8013666:	f7ec ff81 	bl	800056c <__aeabi_dmul>
 801366a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801366e:	f7ed fa03 	bl	8000a78 <__aeabi_dcmpge>
 8013672:	9c02      	ldr	r4, [sp, #8]
 8013674:	4626      	mov	r6, r4
 8013676:	2800      	cmp	r0, #0
 8013678:	f040 824a 	bne.w	8013b10 <_dtoa_r+0x960>
 801367c:	2331      	movs	r3, #49	; 0x31
 801367e:	9f08      	ldr	r7, [sp, #32]
 8013680:	f109 0901 	add.w	r9, r9, #1
 8013684:	f807 3b01 	strb.w	r3, [r7], #1
 8013688:	e246      	b.n	8013b18 <_dtoa_r+0x968>
 801368a:	07e2      	lsls	r2, r4, #31
 801368c:	d505      	bpl.n	801369a <_dtoa_r+0x4ea>
 801368e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013692:	f7ec ff6b 	bl	800056c <__aeabi_dmul>
 8013696:	2301      	movs	r3, #1
 8013698:	3701      	adds	r7, #1
 801369a:	1064      	asrs	r4, r4, #1
 801369c:	3608      	adds	r6, #8
 801369e:	e76d      	b.n	801357c <_dtoa_r+0x3cc>
 80136a0:	2702      	movs	r7, #2
 80136a2:	e770      	b.n	8013586 <_dtoa_r+0x3d6>
 80136a4:	46c8      	mov	r8, r9
 80136a6:	9c02      	ldr	r4, [sp, #8]
 80136a8:	e78f      	b.n	80135ca <_dtoa_r+0x41a>
 80136aa:	9908      	ldr	r1, [sp, #32]
 80136ac:	4b29      	ldr	r3, [pc, #164]	; (8013754 <_dtoa_r+0x5a4>)
 80136ae:	4421      	add	r1, r4
 80136b0:	9112      	str	r1, [sp, #72]	; 0x48
 80136b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80136b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80136b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80136bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80136c0:	2900      	cmp	r1, #0
 80136c2:	d055      	beq.n	8013770 <_dtoa_r+0x5c0>
 80136c4:	2000      	movs	r0, #0
 80136c6:	4929      	ldr	r1, [pc, #164]	; (801376c <_dtoa_r+0x5bc>)
 80136c8:	f7ed f87a 	bl	80007c0 <__aeabi_ddiv>
 80136cc:	463b      	mov	r3, r7
 80136ce:	4632      	mov	r2, r6
 80136d0:	f7ec fd94 	bl	80001fc <__aeabi_dsub>
 80136d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80136d8:	9f08      	ldr	r7, [sp, #32]
 80136da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80136de:	f7ed f9f5 	bl	8000acc <__aeabi_d2iz>
 80136e2:	4604      	mov	r4, r0
 80136e4:	f7ec fed8 	bl	8000498 <__aeabi_i2d>
 80136e8:	4602      	mov	r2, r0
 80136ea:	460b      	mov	r3, r1
 80136ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80136f0:	f7ec fd84 	bl	80001fc <__aeabi_dsub>
 80136f4:	4602      	mov	r2, r0
 80136f6:	460b      	mov	r3, r1
 80136f8:	3430      	adds	r4, #48	; 0x30
 80136fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80136fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013702:	f807 4b01 	strb.w	r4, [r7], #1
 8013706:	f7ed f9a3 	bl	8000a50 <__aeabi_dcmplt>
 801370a:	2800      	cmp	r0, #0
 801370c:	d174      	bne.n	80137f8 <_dtoa_r+0x648>
 801370e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013712:	2000      	movs	r0, #0
 8013714:	4911      	ldr	r1, [pc, #68]	; (801375c <_dtoa_r+0x5ac>)
 8013716:	f7ec fd71 	bl	80001fc <__aeabi_dsub>
 801371a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801371e:	f7ed f997 	bl	8000a50 <__aeabi_dcmplt>
 8013722:	2800      	cmp	r0, #0
 8013724:	f040 80b6 	bne.w	8013894 <_dtoa_r+0x6e4>
 8013728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801372a:	429f      	cmp	r7, r3
 801372c:	f43f af7a 	beq.w	8013624 <_dtoa_r+0x474>
 8013730:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013734:	2200      	movs	r2, #0
 8013736:	4b0a      	ldr	r3, [pc, #40]	; (8013760 <_dtoa_r+0x5b0>)
 8013738:	f7ec ff18 	bl	800056c <__aeabi_dmul>
 801373c:	2200      	movs	r2, #0
 801373e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013746:	4b06      	ldr	r3, [pc, #24]	; (8013760 <_dtoa_r+0x5b0>)
 8013748:	f7ec ff10 	bl	800056c <__aeabi_dmul>
 801374c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013750:	e7c3      	b.n	80136da <_dtoa_r+0x52a>
 8013752:	bf00      	nop
 8013754:	08015f40 	.word	0x08015f40
 8013758:	08015f18 	.word	0x08015f18
 801375c:	3ff00000 	.word	0x3ff00000
 8013760:	40240000 	.word	0x40240000
 8013764:	401c0000 	.word	0x401c0000
 8013768:	40140000 	.word	0x40140000
 801376c:	3fe00000 	.word	0x3fe00000
 8013770:	4630      	mov	r0, r6
 8013772:	4639      	mov	r1, r7
 8013774:	f7ec fefa 	bl	800056c <__aeabi_dmul>
 8013778:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801377a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801377e:	9c08      	ldr	r4, [sp, #32]
 8013780:	9314      	str	r3, [sp, #80]	; 0x50
 8013782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013786:	f7ed f9a1 	bl	8000acc <__aeabi_d2iz>
 801378a:	9015      	str	r0, [sp, #84]	; 0x54
 801378c:	f7ec fe84 	bl	8000498 <__aeabi_i2d>
 8013790:	4602      	mov	r2, r0
 8013792:	460b      	mov	r3, r1
 8013794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013798:	f7ec fd30 	bl	80001fc <__aeabi_dsub>
 801379c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801379e:	4606      	mov	r6, r0
 80137a0:	3330      	adds	r3, #48	; 0x30
 80137a2:	f804 3b01 	strb.w	r3, [r4], #1
 80137a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80137a8:	460f      	mov	r7, r1
 80137aa:	429c      	cmp	r4, r3
 80137ac:	f04f 0200 	mov.w	r2, #0
 80137b0:	d124      	bne.n	80137fc <_dtoa_r+0x64c>
 80137b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80137b6:	4bb3      	ldr	r3, [pc, #716]	; (8013a84 <_dtoa_r+0x8d4>)
 80137b8:	f7ec fd22 	bl	8000200 <__adddf3>
 80137bc:	4602      	mov	r2, r0
 80137be:	460b      	mov	r3, r1
 80137c0:	4630      	mov	r0, r6
 80137c2:	4639      	mov	r1, r7
 80137c4:	f7ed f962 	bl	8000a8c <__aeabi_dcmpgt>
 80137c8:	2800      	cmp	r0, #0
 80137ca:	d162      	bne.n	8013892 <_dtoa_r+0x6e2>
 80137cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80137d0:	2000      	movs	r0, #0
 80137d2:	49ac      	ldr	r1, [pc, #688]	; (8013a84 <_dtoa_r+0x8d4>)
 80137d4:	f7ec fd12 	bl	80001fc <__aeabi_dsub>
 80137d8:	4602      	mov	r2, r0
 80137da:	460b      	mov	r3, r1
 80137dc:	4630      	mov	r0, r6
 80137de:	4639      	mov	r1, r7
 80137e0:	f7ed f936 	bl	8000a50 <__aeabi_dcmplt>
 80137e4:	2800      	cmp	r0, #0
 80137e6:	f43f af1d 	beq.w	8013624 <_dtoa_r+0x474>
 80137ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80137ec:	1e7b      	subs	r3, r7, #1
 80137ee:	9314      	str	r3, [sp, #80]	; 0x50
 80137f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80137f4:	2b30      	cmp	r3, #48	; 0x30
 80137f6:	d0f8      	beq.n	80137ea <_dtoa_r+0x63a>
 80137f8:	46c1      	mov	r9, r8
 80137fa:	e03a      	b.n	8013872 <_dtoa_r+0x6c2>
 80137fc:	4ba2      	ldr	r3, [pc, #648]	; (8013a88 <_dtoa_r+0x8d8>)
 80137fe:	f7ec feb5 	bl	800056c <__aeabi_dmul>
 8013802:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013806:	e7bc      	b.n	8013782 <_dtoa_r+0x5d2>
 8013808:	9f08      	ldr	r7, [sp, #32]
 801380a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801380e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013812:	f7ec ffd5 	bl	80007c0 <__aeabi_ddiv>
 8013816:	f7ed f959 	bl	8000acc <__aeabi_d2iz>
 801381a:	4604      	mov	r4, r0
 801381c:	f7ec fe3c 	bl	8000498 <__aeabi_i2d>
 8013820:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013824:	f7ec fea2 	bl	800056c <__aeabi_dmul>
 8013828:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801382c:	460b      	mov	r3, r1
 801382e:	4602      	mov	r2, r0
 8013830:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013834:	f7ec fce2 	bl	80001fc <__aeabi_dsub>
 8013838:	f807 6b01 	strb.w	r6, [r7], #1
 801383c:	9e08      	ldr	r6, [sp, #32]
 801383e:	9b02      	ldr	r3, [sp, #8]
 8013840:	1bbe      	subs	r6, r7, r6
 8013842:	42b3      	cmp	r3, r6
 8013844:	d13a      	bne.n	80138bc <_dtoa_r+0x70c>
 8013846:	4602      	mov	r2, r0
 8013848:	460b      	mov	r3, r1
 801384a:	f7ec fcd9 	bl	8000200 <__adddf3>
 801384e:	4602      	mov	r2, r0
 8013850:	460b      	mov	r3, r1
 8013852:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013856:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801385a:	f7ed f917 	bl	8000a8c <__aeabi_dcmpgt>
 801385e:	bb58      	cbnz	r0, 80138b8 <_dtoa_r+0x708>
 8013860:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013868:	f7ed f8e8 	bl	8000a3c <__aeabi_dcmpeq>
 801386c:	b108      	cbz	r0, 8013872 <_dtoa_r+0x6c2>
 801386e:	07e1      	lsls	r1, r4, #31
 8013870:	d422      	bmi.n	80138b8 <_dtoa_r+0x708>
 8013872:	4628      	mov	r0, r5
 8013874:	4651      	mov	r1, sl
 8013876:	f000 ff33 	bl	80146e0 <_Bfree>
 801387a:	2300      	movs	r3, #0
 801387c:	703b      	strb	r3, [r7, #0]
 801387e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013880:	f109 0001 	add.w	r0, r9, #1
 8013884:	6018      	str	r0, [r3, #0]
 8013886:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013888:	2b00      	cmp	r3, #0
 801388a:	f43f acdf 	beq.w	801324c <_dtoa_r+0x9c>
 801388e:	601f      	str	r7, [r3, #0]
 8013890:	e4dc      	b.n	801324c <_dtoa_r+0x9c>
 8013892:	4627      	mov	r7, r4
 8013894:	463b      	mov	r3, r7
 8013896:	461f      	mov	r7, r3
 8013898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801389c:	2a39      	cmp	r2, #57	; 0x39
 801389e:	d107      	bne.n	80138b0 <_dtoa_r+0x700>
 80138a0:	9a08      	ldr	r2, [sp, #32]
 80138a2:	429a      	cmp	r2, r3
 80138a4:	d1f7      	bne.n	8013896 <_dtoa_r+0x6e6>
 80138a6:	2230      	movs	r2, #48	; 0x30
 80138a8:	9908      	ldr	r1, [sp, #32]
 80138aa:	f108 0801 	add.w	r8, r8, #1
 80138ae:	700a      	strb	r2, [r1, #0]
 80138b0:	781a      	ldrb	r2, [r3, #0]
 80138b2:	3201      	adds	r2, #1
 80138b4:	701a      	strb	r2, [r3, #0]
 80138b6:	e79f      	b.n	80137f8 <_dtoa_r+0x648>
 80138b8:	46c8      	mov	r8, r9
 80138ba:	e7eb      	b.n	8013894 <_dtoa_r+0x6e4>
 80138bc:	2200      	movs	r2, #0
 80138be:	4b72      	ldr	r3, [pc, #456]	; (8013a88 <_dtoa_r+0x8d8>)
 80138c0:	f7ec fe54 	bl	800056c <__aeabi_dmul>
 80138c4:	4602      	mov	r2, r0
 80138c6:	460b      	mov	r3, r1
 80138c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80138cc:	2200      	movs	r2, #0
 80138ce:	2300      	movs	r3, #0
 80138d0:	f7ed f8b4 	bl	8000a3c <__aeabi_dcmpeq>
 80138d4:	2800      	cmp	r0, #0
 80138d6:	d098      	beq.n	801380a <_dtoa_r+0x65a>
 80138d8:	e7cb      	b.n	8013872 <_dtoa_r+0x6c2>
 80138da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80138dc:	2a00      	cmp	r2, #0
 80138de:	f000 80cd 	beq.w	8013a7c <_dtoa_r+0x8cc>
 80138e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80138e4:	2a01      	cmp	r2, #1
 80138e6:	f300 80af 	bgt.w	8013a48 <_dtoa_r+0x898>
 80138ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80138ec:	2a00      	cmp	r2, #0
 80138ee:	f000 80a7 	beq.w	8013a40 <_dtoa_r+0x890>
 80138f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80138f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80138f8:	9f06      	ldr	r7, [sp, #24]
 80138fa:	9a06      	ldr	r2, [sp, #24]
 80138fc:	2101      	movs	r1, #1
 80138fe:	441a      	add	r2, r3
 8013900:	9206      	str	r2, [sp, #24]
 8013902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013904:	4628      	mov	r0, r5
 8013906:	441a      	add	r2, r3
 8013908:	9209      	str	r2, [sp, #36]	; 0x24
 801390a:	f000 ffed 	bl	80148e8 <__i2b>
 801390e:	4606      	mov	r6, r0
 8013910:	2f00      	cmp	r7, #0
 8013912:	dd0c      	ble.n	801392e <_dtoa_r+0x77e>
 8013914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013916:	2b00      	cmp	r3, #0
 8013918:	dd09      	ble.n	801392e <_dtoa_r+0x77e>
 801391a:	42bb      	cmp	r3, r7
 801391c:	bfa8      	it	ge
 801391e:	463b      	movge	r3, r7
 8013920:	9a06      	ldr	r2, [sp, #24]
 8013922:	1aff      	subs	r7, r7, r3
 8013924:	1ad2      	subs	r2, r2, r3
 8013926:	9206      	str	r2, [sp, #24]
 8013928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801392a:	1ad3      	subs	r3, r2, r3
 801392c:	9309      	str	r3, [sp, #36]	; 0x24
 801392e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013930:	b1f3      	cbz	r3, 8013970 <_dtoa_r+0x7c0>
 8013932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013934:	2b00      	cmp	r3, #0
 8013936:	f000 80a9 	beq.w	8013a8c <_dtoa_r+0x8dc>
 801393a:	2c00      	cmp	r4, #0
 801393c:	dd10      	ble.n	8013960 <_dtoa_r+0x7b0>
 801393e:	4631      	mov	r1, r6
 8013940:	4622      	mov	r2, r4
 8013942:	4628      	mov	r0, r5
 8013944:	f001 f88a 	bl	8014a5c <__pow5mult>
 8013948:	4652      	mov	r2, sl
 801394a:	4601      	mov	r1, r0
 801394c:	4606      	mov	r6, r0
 801394e:	4628      	mov	r0, r5
 8013950:	f000 ffe0 	bl	8014914 <__multiply>
 8013954:	4680      	mov	r8, r0
 8013956:	4651      	mov	r1, sl
 8013958:	4628      	mov	r0, r5
 801395a:	f000 fec1 	bl	80146e0 <_Bfree>
 801395e:	46c2      	mov	sl, r8
 8013960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013962:	1b1a      	subs	r2, r3, r4
 8013964:	d004      	beq.n	8013970 <_dtoa_r+0x7c0>
 8013966:	4651      	mov	r1, sl
 8013968:	4628      	mov	r0, r5
 801396a:	f001 f877 	bl	8014a5c <__pow5mult>
 801396e:	4682      	mov	sl, r0
 8013970:	2101      	movs	r1, #1
 8013972:	4628      	mov	r0, r5
 8013974:	f000 ffb8 	bl	80148e8 <__i2b>
 8013978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801397a:	4604      	mov	r4, r0
 801397c:	2b00      	cmp	r3, #0
 801397e:	f340 8087 	ble.w	8013a90 <_dtoa_r+0x8e0>
 8013982:	461a      	mov	r2, r3
 8013984:	4601      	mov	r1, r0
 8013986:	4628      	mov	r0, r5
 8013988:	f001 f868 	bl	8014a5c <__pow5mult>
 801398c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801398e:	4604      	mov	r4, r0
 8013990:	2b01      	cmp	r3, #1
 8013992:	f340 8080 	ble.w	8013a96 <_dtoa_r+0x8e6>
 8013996:	f04f 0800 	mov.w	r8, #0
 801399a:	6923      	ldr	r3, [r4, #16]
 801399c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80139a0:	6918      	ldr	r0, [r3, #16]
 80139a2:	f000 ff53 	bl	801484c <__hi0bits>
 80139a6:	f1c0 0020 	rsb	r0, r0, #32
 80139aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139ac:	4418      	add	r0, r3
 80139ae:	f010 001f 	ands.w	r0, r0, #31
 80139b2:	f000 8092 	beq.w	8013ada <_dtoa_r+0x92a>
 80139b6:	f1c0 0320 	rsb	r3, r0, #32
 80139ba:	2b04      	cmp	r3, #4
 80139bc:	f340 808a 	ble.w	8013ad4 <_dtoa_r+0x924>
 80139c0:	f1c0 001c 	rsb	r0, r0, #28
 80139c4:	9b06      	ldr	r3, [sp, #24]
 80139c6:	4407      	add	r7, r0
 80139c8:	4403      	add	r3, r0
 80139ca:	9306      	str	r3, [sp, #24]
 80139cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139ce:	4403      	add	r3, r0
 80139d0:	9309      	str	r3, [sp, #36]	; 0x24
 80139d2:	9b06      	ldr	r3, [sp, #24]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	dd05      	ble.n	80139e4 <_dtoa_r+0x834>
 80139d8:	4651      	mov	r1, sl
 80139da:	461a      	mov	r2, r3
 80139dc:	4628      	mov	r0, r5
 80139de:	f001 f897 	bl	8014b10 <__lshift>
 80139e2:	4682      	mov	sl, r0
 80139e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	dd05      	ble.n	80139f6 <_dtoa_r+0x846>
 80139ea:	4621      	mov	r1, r4
 80139ec:	461a      	mov	r2, r3
 80139ee:	4628      	mov	r0, r5
 80139f0:	f001 f88e 	bl	8014b10 <__lshift>
 80139f4:	4604      	mov	r4, r0
 80139f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d070      	beq.n	8013ade <_dtoa_r+0x92e>
 80139fc:	4621      	mov	r1, r4
 80139fe:	4650      	mov	r0, sl
 8013a00:	f001 f8f2 	bl	8014be8 <__mcmp>
 8013a04:	2800      	cmp	r0, #0
 8013a06:	da6a      	bge.n	8013ade <_dtoa_r+0x92e>
 8013a08:	2300      	movs	r3, #0
 8013a0a:	4651      	mov	r1, sl
 8013a0c:	220a      	movs	r2, #10
 8013a0e:	4628      	mov	r0, r5
 8013a10:	f000 fe88 	bl	8014724 <__multadd>
 8013a14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a16:	4682      	mov	sl, r0
 8013a18:	f109 39ff 	add.w	r9, r9, #4294967295
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	f000 8193 	beq.w	8013d48 <_dtoa_r+0xb98>
 8013a22:	4631      	mov	r1, r6
 8013a24:	2300      	movs	r3, #0
 8013a26:	220a      	movs	r2, #10
 8013a28:	4628      	mov	r0, r5
 8013a2a:	f000 fe7b 	bl	8014724 <__multadd>
 8013a2e:	f1bb 0f00 	cmp.w	fp, #0
 8013a32:	4606      	mov	r6, r0
 8013a34:	f300 8093 	bgt.w	8013b5e <_dtoa_r+0x9ae>
 8013a38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013a3a:	2b02      	cmp	r3, #2
 8013a3c:	dc57      	bgt.n	8013aee <_dtoa_r+0x93e>
 8013a3e:	e08e      	b.n	8013b5e <_dtoa_r+0x9ae>
 8013a40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013a42:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013a46:	e756      	b.n	80138f6 <_dtoa_r+0x746>
 8013a48:	9b02      	ldr	r3, [sp, #8]
 8013a4a:	1e5c      	subs	r4, r3, #1
 8013a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a4e:	42a3      	cmp	r3, r4
 8013a50:	bfb7      	itett	lt
 8013a52:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013a54:	1b1c      	subge	r4, r3, r4
 8013a56:	1ae2      	sublt	r2, r4, r3
 8013a58:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013a5a:	bfbe      	ittt	lt
 8013a5c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8013a5e:	189b      	addlt	r3, r3, r2
 8013a60:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013a62:	9b02      	ldr	r3, [sp, #8]
 8013a64:	bfb8      	it	lt
 8013a66:	2400      	movlt	r4, #0
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	bfbb      	ittet	lt
 8013a6c:	9b06      	ldrlt	r3, [sp, #24]
 8013a6e:	9a02      	ldrlt	r2, [sp, #8]
 8013a70:	9f06      	ldrge	r7, [sp, #24]
 8013a72:	1a9f      	sublt	r7, r3, r2
 8013a74:	bfac      	ite	ge
 8013a76:	9b02      	ldrge	r3, [sp, #8]
 8013a78:	2300      	movlt	r3, #0
 8013a7a:	e73e      	b.n	80138fa <_dtoa_r+0x74a>
 8013a7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013a7e:	9f06      	ldr	r7, [sp, #24]
 8013a80:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013a82:	e745      	b.n	8013910 <_dtoa_r+0x760>
 8013a84:	3fe00000 	.word	0x3fe00000
 8013a88:	40240000 	.word	0x40240000
 8013a8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a8e:	e76a      	b.n	8013966 <_dtoa_r+0x7b6>
 8013a90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013a92:	2b01      	cmp	r3, #1
 8013a94:	dc19      	bgt.n	8013aca <_dtoa_r+0x91a>
 8013a96:	9b04      	ldr	r3, [sp, #16]
 8013a98:	b9bb      	cbnz	r3, 8013aca <_dtoa_r+0x91a>
 8013a9a:	9b05      	ldr	r3, [sp, #20]
 8013a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013aa0:	b99b      	cbnz	r3, 8013aca <_dtoa_r+0x91a>
 8013aa2:	9b05      	ldr	r3, [sp, #20]
 8013aa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013aa8:	0d1b      	lsrs	r3, r3, #20
 8013aaa:	051b      	lsls	r3, r3, #20
 8013aac:	b183      	cbz	r3, 8013ad0 <_dtoa_r+0x920>
 8013aae:	f04f 0801 	mov.w	r8, #1
 8013ab2:	9b06      	ldr	r3, [sp, #24]
 8013ab4:	3301      	adds	r3, #1
 8013ab6:	9306      	str	r3, [sp, #24]
 8013ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aba:	3301      	adds	r3, #1
 8013abc:	9309      	str	r3, [sp, #36]	; 0x24
 8013abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	f47f af6a 	bne.w	801399a <_dtoa_r+0x7ea>
 8013ac6:	2001      	movs	r0, #1
 8013ac8:	e76f      	b.n	80139aa <_dtoa_r+0x7fa>
 8013aca:	f04f 0800 	mov.w	r8, #0
 8013ace:	e7f6      	b.n	8013abe <_dtoa_r+0x90e>
 8013ad0:	4698      	mov	r8, r3
 8013ad2:	e7f4      	b.n	8013abe <_dtoa_r+0x90e>
 8013ad4:	f43f af7d 	beq.w	80139d2 <_dtoa_r+0x822>
 8013ad8:	4618      	mov	r0, r3
 8013ada:	301c      	adds	r0, #28
 8013adc:	e772      	b.n	80139c4 <_dtoa_r+0x814>
 8013ade:	9b02      	ldr	r3, [sp, #8]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	dc36      	bgt.n	8013b52 <_dtoa_r+0x9a2>
 8013ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ae6:	2b02      	cmp	r3, #2
 8013ae8:	dd33      	ble.n	8013b52 <_dtoa_r+0x9a2>
 8013aea:	f8dd b008 	ldr.w	fp, [sp, #8]
 8013aee:	f1bb 0f00 	cmp.w	fp, #0
 8013af2:	d10d      	bne.n	8013b10 <_dtoa_r+0x960>
 8013af4:	4621      	mov	r1, r4
 8013af6:	465b      	mov	r3, fp
 8013af8:	2205      	movs	r2, #5
 8013afa:	4628      	mov	r0, r5
 8013afc:	f000 fe12 	bl	8014724 <__multadd>
 8013b00:	4601      	mov	r1, r0
 8013b02:	4604      	mov	r4, r0
 8013b04:	4650      	mov	r0, sl
 8013b06:	f001 f86f 	bl	8014be8 <__mcmp>
 8013b0a:	2800      	cmp	r0, #0
 8013b0c:	f73f adb6 	bgt.w	801367c <_dtoa_r+0x4cc>
 8013b10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013b12:	9f08      	ldr	r7, [sp, #32]
 8013b14:	ea6f 0903 	mvn.w	r9, r3
 8013b18:	f04f 0800 	mov.w	r8, #0
 8013b1c:	4621      	mov	r1, r4
 8013b1e:	4628      	mov	r0, r5
 8013b20:	f000 fdde 	bl	80146e0 <_Bfree>
 8013b24:	2e00      	cmp	r6, #0
 8013b26:	f43f aea4 	beq.w	8013872 <_dtoa_r+0x6c2>
 8013b2a:	f1b8 0f00 	cmp.w	r8, #0
 8013b2e:	d005      	beq.n	8013b3c <_dtoa_r+0x98c>
 8013b30:	45b0      	cmp	r8, r6
 8013b32:	d003      	beq.n	8013b3c <_dtoa_r+0x98c>
 8013b34:	4641      	mov	r1, r8
 8013b36:	4628      	mov	r0, r5
 8013b38:	f000 fdd2 	bl	80146e0 <_Bfree>
 8013b3c:	4631      	mov	r1, r6
 8013b3e:	4628      	mov	r0, r5
 8013b40:	f000 fdce 	bl	80146e0 <_Bfree>
 8013b44:	e695      	b.n	8013872 <_dtoa_r+0x6c2>
 8013b46:	2400      	movs	r4, #0
 8013b48:	4626      	mov	r6, r4
 8013b4a:	e7e1      	b.n	8013b10 <_dtoa_r+0x960>
 8013b4c:	46c1      	mov	r9, r8
 8013b4e:	4626      	mov	r6, r4
 8013b50:	e594      	b.n	801367c <_dtoa_r+0x4cc>
 8013b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b54:	f8dd b008 	ldr.w	fp, [sp, #8]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	f000 80fc 	beq.w	8013d56 <_dtoa_r+0xba6>
 8013b5e:	2f00      	cmp	r7, #0
 8013b60:	dd05      	ble.n	8013b6e <_dtoa_r+0x9be>
 8013b62:	4631      	mov	r1, r6
 8013b64:	463a      	mov	r2, r7
 8013b66:	4628      	mov	r0, r5
 8013b68:	f000 ffd2 	bl	8014b10 <__lshift>
 8013b6c:	4606      	mov	r6, r0
 8013b6e:	f1b8 0f00 	cmp.w	r8, #0
 8013b72:	d05c      	beq.n	8013c2e <_dtoa_r+0xa7e>
 8013b74:	4628      	mov	r0, r5
 8013b76:	6871      	ldr	r1, [r6, #4]
 8013b78:	f000 fd72 	bl	8014660 <_Balloc>
 8013b7c:	4607      	mov	r7, r0
 8013b7e:	b928      	cbnz	r0, 8013b8c <_dtoa_r+0x9dc>
 8013b80:	4602      	mov	r2, r0
 8013b82:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013b86:	4b7e      	ldr	r3, [pc, #504]	; (8013d80 <_dtoa_r+0xbd0>)
 8013b88:	f7ff bb26 	b.w	80131d8 <_dtoa_r+0x28>
 8013b8c:	6932      	ldr	r2, [r6, #16]
 8013b8e:	f106 010c 	add.w	r1, r6, #12
 8013b92:	3202      	adds	r2, #2
 8013b94:	0092      	lsls	r2, r2, #2
 8013b96:	300c      	adds	r0, #12
 8013b98:	f7fd fba4 	bl	80112e4 <memcpy>
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	4639      	mov	r1, r7
 8013ba0:	4628      	mov	r0, r5
 8013ba2:	f000 ffb5 	bl	8014b10 <__lshift>
 8013ba6:	46b0      	mov	r8, r6
 8013ba8:	4606      	mov	r6, r0
 8013baa:	9b08      	ldr	r3, [sp, #32]
 8013bac:	3301      	adds	r3, #1
 8013bae:	9302      	str	r3, [sp, #8]
 8013bb0:	9b08      	ldr	r3, [sp, #32]
 8013bb2:	445b      	add	r3, fp
 8013bb4:	930a      	str	r3, [sp, #40]	; 0x28
 8013bb6:	9b04      	ldr	r3, [sp, #16]
 8013bb8:	f003 0301 	and.w	r3, r3, #1
 8013bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8013bbe:	9b02      	ldr	r3, [sp, #8]
 8013bc0:	4621      	mov	r1, r4
 8013bc2:	4650      	mov	r0, sl
 8013bc4:	f103 3bff 	add.w	fp, r3, #4294967295
 8013bc8:	f7ff fa62 	bl	8013090 <quorem>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	4641      	mov	r1, r8
 8013bd0:	3330      	adds	r3, #48	; 0x30
 8013bd2:	9004      	str	r0, [sp, #16]
 8013bd4:	4650      	mov	r0, sl
 8013bd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8013bd8:	f001 f806 	bl	8014be8 <__mcmp>
 8013bdc:	4632      	mov	r2, r6
 8013bde:	9006      	str	r0, [sp, #24]
 8013be0:	4621      	mov	r1, r4
 8013be2:	4628      	mov	r0, r5
 8013be4:	f001 f81c 	bl	8014c20 <__mdiff>
 8013be8:	68c2      	ldr	r2, [r0, #12]
 8013bea:	4607      	mov	r7, r0
 8013bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bee:	bb02      	cbnz	r2, 8013c32 <_dtoa_r+0xa82>
 8013bf0:	4601      	mov	r1, r0
 8013bf2:	4650      	mov	r0, sl
 8013bf4:	f000 fff8 	bl	8014be8 <__mcmp>
 8013bf8:	4602      	mov	r2, r0
 8013bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bfc:	4639      	mov	r1, r7
 8013bfe:	4628      	mov	r0, r5
 8013c00:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8013c04:	f000 fd6c 	bl	80146e0 <_Bfree>
 8013c08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013c0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c0c:	9f02      	ldr	r7, [sp, #8]
 8013c0e:	ea43 0102 	orr.w	r1, r3, r2
 8013c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c14:	430b      	orrs	r3, r1
 8013c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c18:	d10d      	bne.n	8013c36 <_dtoa_r+0xa86>
 8013c1a:	2b39      	cmp	r3, #57	; 0x39
 8013c1c:	d027      	beq.n	8013c6e <_dtoa_r+0xabe>
 8013c1e:	9a06      	ldr	r2, [sp, #24]
 8013c20:	2a00      	cmp	r2, #0
 8013c22:	dd01      	ble.n	8013c28 <_dtoa_r+0xa78>
 8013c24:	9b04      	ldr	r3, [sp, #16]
 8013c26:	3331      	adds	r3, #49	; 0x31
 8013c28:	f88b 3000 	strb.w	r3, [fp]
 8013c2c:	e776      	b.n	8013b1c <_dtoa_r+0x96c>
 8013c2e:	4630      	mov	r0, r6
 8013c30:	e7b9      	b.n	8013ba6 <_dtoa_r+0x9f6>
 8013c32:	2201      	movs	r2, #1
 8013c34:	e7e2      	b.n	8013bfc <_dtoa_r+0xa4c>
 8013c36:	9906      	ldr	r1, [sp, #24]
 8013c38:	2900      	cmp	r1, #0
 8013c3a:	db04      	blt.n	8013c46 <_dtoa_r+0xa96>
 8013c3c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8013c3e:	4301      	orrs	r1, r0
 8013c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c42:	4301      	orrs	r1, r0
 8013c44:	d120      	bne.n	8013c88 <_dtoa_r+0xad8>
 8013c46:	2a00      	cmp	r2, #0
 8013c48:	ddee      	ble.n	8013c28 <_dtoa_r+0xa78>
 8013c4a:	4651      	mov	r1, sl
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	4628      	mov	r0, r5
 8013c50:	9302      	str	r3, [sp, #8]
 8013c52:	f000 ff5d 	bl	8014b10 <__lshift>
 8013c56:	4621      	mov	r1, r4
 8013c58:	4682      	mov	sl, r0
 8013c5a:	f000 ffc5 	bl	8014be8 <__mcmp>
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	9b02      	ldr	r3, [sp, #8]
 8013c62:	dc02      	bgt.n	8013c6a <_dtoa_r+0xaba>
 8013c64:	d1e0      	bne.n	8013c28 <_dtoa_r+0xa78>
 8013c66:	07da      	lsls	r2, r3, #31
 8013c68:	d5de      	bpl.n	8013c28 <_dtoa_r+0xa78>
 8013c6a:	2b39      	cmp	r3, #57	; 0x39
 8013c6c:	d1da      	bne.n	8013c24 <_dtoa_r+0xa74>
 8013c6e:	2339      	movs	r3, #57	; 0x39
 8013c70:	f88b 3000 	strb.w	r3, [fp]
 8013c74:	463b      	mov	r3, r7
 8013c76:	461f      	mov	r7, r3
 8013c78:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8013c7c:	3b01      	subs	r3, #1
 8013c7e:	2a39      	cmp	r2, #57	; 0x39
 8013c80:	d050      	beq.n	8013d24 <_dtoa_r+0xb74>
 8013c82:	3201      	adds	r2, #1
 8013c84:	701a      	strb	r2, [r3, #0]
 8013c86:	e749      	b.n	8013b1c <_dtoa_r+0x96c>
 8013c88:	2a00      	cmp	r2, #0
 8013c8a:	dd03      	ble.n	8013c94 <_dtoa_r+0xae4>
 8013c8c:	2b39      	cmp	r3, #57	; 0x39
 8013c8e:	d0ee      	beq.n	8013c6e <_dtoa_r+0xabe>
 8013c90:	3301      	adds	r3, #1
 8013c92:	e7c9      	b.n	8013c28 <_dtoa_r+0xa78>
 8013c94:	9a02      	ldr	r2, [sp, #8]
 8013c96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c98:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013c9c:	428a      	cmp	r2, r1
 8013c9e:	d02a      	beq.n	8013cf6 <_dtoa_r+0xb46>
 8013ca0:	4651      	mov	r1, sl
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	220a      	movs	r2, #10
 8013ca6:	4628      	mov	r0, r5
 8013ca8:	f000 fd3c 	bl	8014724 <__multadd>
 8013cac:	45b0      	cmp	r8, r6
 8013cae:	4682      	mov	sl, r0
 8013cb0:	f04f 0300 	mov.w	r3, #0
 8013cb4:	f04f 020a 	mov.w	r2, #10
 8013cb8:	4641      	mov	r1, r8
 8013cba:	4628      	mov	r0, r5
 8013cbc:	d107      	bne.n	8013cce <_dtoa_r+0xb1e>
 8013cbe:	f000 fd31 	bl	8014724 <__multadd>
 8013cc2:	4680      	mov	r8, r0
 8013cc4:	4606      	mov	r6, r0
 8013cc6:	9b02      	ldr	r3, [sp, #8]
 8013cc8:	3301      	adds	r3, #1
 8013cca:	9302      	str	r3, [sp, #8]
 8013ccc:	e777      	b.n	8013bbe <_dtoa_r+0xa0e>
 8013cce:	f000 fd29 	bl	8014724 <__multadd>
 8013cd2:	4631      	mov	r1, r6
 8013cd4:	4680      	mov	r8, r0
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	220a      	movs	r2, #10
 8013cda:	4628      	mov	r0, r5
 8013cdc:	f000 fd22 	bl	8014724 <__multadd>
 8013ce0:	4606      	mov	r6, r0
 8013ce2:	e7f0      	b.n	8013cc6 <_dtoa_r+0xb16>
 8013ce4:	f1bb 0f00 	cmp.w	fp, #0
 8013ce8:	bfcc      	ite	gt
 8013cea:	465f      	movgt	r7, fp
 8013cec:	2701      	movle	r7, #1
 8013cee:	f04f 0800 	mov.w	r8, #0
 8013cf2:	9a08      	ldr	r2, [sp, #32]
 8013cf4:	4417      	add	r7, r2
 8013cf6:	4651      	mov	r1, sl
 8013cf8:	2201      	movs	r2, #1
 8013cfa:	4628      	mov	r0, r5
 8013cfc:	9302      	str	r3, [sp, #8]
 8013cfe:	f000 ff07 	bl	8014b10 <__lshift>
 8013d02:	4621      	mov	r1, r4
 8013d04:	4682      	mov	sl, r0
 8013d06:	f000 ff6f 	bl	8014be8 <__mcmp>
 8013d0a:	2800      	cmp	r0, #0
 8013d0c:	dcb2      	bgt.n	8013c74 <_dtoa_r+0xac4>
 8013d0e:	d102      	bne.n	8013d16 <_dtoa_r+0xb66>
 8013d10:	9b02      	ldr	r3, [sp, #8]
 8013d12:	07db      	lsls	r3, r3, #31
 8013d14:	d4ae      	bmi.n	8013c74 <_dtoa_r+0xac4>
 8013d16:	463b      	mov	r3, r7
 8013d18:	461f      	mov	r7, r3
 8013d1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d1e:	2a30      	cmp	r2, #48	; 0x30
 8013d20:	d0fa      	beq.n	8013d18 <_dtoa_r+0xb68>
 8013d22:	e6fb      	b.n	8013b1c <_dtoa_r+0x96c>
 8013d24:	9a08      	ldr	r2, [sp, #32]
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d1a5      	bne.n	8013c76 <_dtoa_r+0xac6>
 8013d2a:	2331      	movs	r3, #49	; 0x31
 8013d2c:	f109 0901 	add.w	r9, r9, #1
 8013d30:	7013      	strb	r3, [r2, #0]
 8013d32:	e6f3      	b.n	8013b1c <_dtoa_r+0x96c>
 8013d34:	4b13      	ldr	r3, [pc, #76]	; (8013d84 <_dtoa_r+0xbd4>)
 8013d36:	f7ff baa7 	b.w	8013288 <_dtoa_r+0xd8>
 8013d3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	f47f aa80 	bne.w	8013242 <_dtoa_r+0x92>
 8013d42:	4b11      	ldr	r3, [pc, #68]	; (8013d88 <_dtoa_r+0xbd8>)
 8013d44:	f7ff baa0 	b.w	8013288 <_dtoa_r+0xd8>
 8013d48:	f1bb 0f00 	cmp.w	fp, #0
 8013d4c:	dc03      	bgt.n	8013d56 <_dtoa_r+0xba6>
 8013d4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013d50:	2b02      	cmp	r3, #2
 8013d52:	f73f aecc 	bgt.w	8013aee <_dtoa_r+0x93e>
 8013d56:	9f08      	ldr	r7, [sp, #32]
 8013d58:	4621      	mov	r1, r4
 8013d5a:	4650      	mov	r0, sl
 8013d5c:	f7ff f998 	bl	8013090 <quorem>
 8013d60:	9a08      	ldr	r2, [sp, #32]
 8013d62:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013d66:	f807 3b01 	strb.w	r3, [r7], #1
 8013d6a:	1aba      	subs	r2, r7, r2
 8013d6c:	4593      	cmp	fp, r2
 8013d6e:	ddb9      	ble.n	8013ce4 <_dtoa_r+0xb34>
 8013d70:	4651      	mov	r1, sl
 8013d72:	2300      	movs	r3, #0
 8013d74:	220a      	movs	r2, #10
 8013d76:	4628      	mov	r0, r5
 8013d78:	f000 fcd4 	bl	8014724 <__multadd>
 8013d7c:	4682      	mov	sl, r0
 8013d7e:	e7eb      	b.n	8013d58 <_dtoa_r+0xba8>
 8013d80:	08015e24 	.word	0x08015e24
 8013d84:	08015c20 	.word	0x08015c20
 8013d88:	08015da1 	.word	0x08015da1

08013d8c <__sflush_r>:
 8013d8c:	898a      	ldrh	r2, [r1, #12]
 8013d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d92:	4605      	mov	r5, r0
 8013d94:	0710      	lsls	r0, r2, #28
 8013d96:	460c      	mov	r4, r1
 8013d98:	d458      	bmi.n	8013e4c <__sflush_r+0xc0>
 8013d9a:	684b      	ldr	r3, [r1, #4]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	dc05      	bgt.n	8013dac <__sflush_r+0x20>
 8013da0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	dc02      	bgt.n	8013dac <__sflush_r+0x20>
 8013da6:	2000      	movs	r0, #0
 8013da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013dae:	2e00      	cmp	r6, #0
 8013db0:	d0f9      	beq.n	8013da6 <__sflush_r+0x1a>
 8013db2:	2300      	movs	r3, #0
 8013db4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013db8:	682f      	ldr	r7, [r5, #0]
 8013dba:	602b      	str	r3, [r5, #0]
 8013dbc:	d032      	beq.n	8013e24 <__sflush_r+0x98>
 8013dbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013dc0:	89a3      	ldrh	r3, [r4, #12]
 8013dc2:	075a      	lsls	r2, r3, #29
 8013dc4:	d505      	bpl.n	8013dd2 <__sflush_r+0x46>
 8013dc6:	6863      	ldr	r3, [r4, #4]
 8013dc8:	1ac0      	subs	r0, r0, r3
 8013dca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013dcc:	b10b      	cbz	r3, 8013dd2 <__sflush_r+0x46>
 8013dce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013dd0:	1ac0      	subs	r0, r0, r3
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	4602      	mov	r2, r0
 8013dd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013dd8:	4628      	mov	r0, r5
 8013dda:	6a21      	ldr	r1, [r4, #32]
 8013ddc:	47b0      	blx	r6
 8013dde:	1c43      	adds	r3, r0, #1
 8013de0:	89a3      	ldrh	r3, [r4, #12]
 8013de2:	d106      	bne.n	8013df2 <__sflush_r+0x66>
 8013de4:	6829      	ldr	r1, [r5, #0]
 8013de6:	291d      	cmp	r1, #29
 8013de8:	d82c      	bhi.n	8013e44 <__sflush_r+0xb8>
 8013dea:	4a2a      	ldr	r2, [pc, #168]	; (8013e94 <__sflush_r+0x108>)
 8013dec:	40ca      	lsrs	r2, r1
 8013dee:	07d6      	lsls	r6, r2, #31
 8013df0:	d528      	bpl.n	8013e44 <__sflush_r+0xb8>
 8013df2:	2200      	movs	r2, #0
 8013df4:	6062      	str	r2, [r4, #4]
 8013df6:	6922      	ldr	r2, [r4, #16]
 8013df8:	04d9      	lsls	r1, r3, #19
 8013dfa:	6022      	str	r2, [r4, #0]
 8013dfc:	d504      	bpl.n	8013e08 <__sflush_r+0x7c>
 8013dfe:	1c42      	adds	r2, r0, #1
 8013e00:	d101      	bne.n	8013e06 <__sflush_r+0x7a>
 8013e02:	682b      	ldr	r3, [r5, #0]
 8013e04:	b903      	cbnz	r3, 8013e08 <__sflush_r+0x7c>
 8013e06:	6560      	str	r0, [r4, #84]	; 0x54
 8013e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e0a:	602f      	str	r7, [r5, #0]
 8013e0c:	2900      	cmp	r1, #0
 8013e0e:	d0ca      	beq.n	8013da6 <__sflush_r+0x1a>
 8013e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e14:	4299      	cmp	r1, r3
 8013e16:	d002      	beq.n	8013e1e <__sflush_r+0x92>
 8013e18:	4628      	mov	r0, r5
 8013e1a:	f7fd fa79 	bl	8011310 <_free_r>
 8013e1e:	2000      	movs	r0, #0
 8013e20:	6360      	str	r0, [r4, #52]	; 0x34
 8013e22:	e7c1      	b.n	8013da8 <__sflush_r+0x1c>
 8013e24:	6a21      	ldr	r1, [r4, #32]
 8013e26:	2301      	movs	r3, #1
 8013e28:	4628      	mov	r0, r5
 8013e2a:	47b0      	blx	r6
 8013e2c:	1c41      	adds	r1, r0, #1
 8013e2e:	d1c7      	bne.n	8013dc0 <__sflush_r+0x34>
 8013e30:	682b      	ldr	r3, [r5, #0]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d0c4      	beq.n	8013dc0 <__sflush_r+0x34>
 8013e36:	2b1d      	cmp	r3, #29
 8013e38:	d001      	beq.n	8013e3e <__sflush_r+0xb2>
 8013e3a:	2b16      	cmp	r3, #22
 8013e3c:	d101      	bne.n	8013e42 <__sflush_r+0xb6>
 8013e3e:	602f      	str	r7, [r5, #0]
 8013e40:	e7b1      	b.n	8013da6 <__sflush_r+0x1a>
 8013e42:	89a3      	ldrh	r3, [r4, #12]
 8013e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e48:	81a3      	strh	r3, [r4, #12]
 8013e4a:	e7ad      	b.n	8013da8 <__sflush_r+0x1c>
 8013e4c:	690f      	ldr	r7, [r1, #16]
 8013e4e:	2f00      	cmp	r7, #0
 8013e50:	d0a9      	beq.n	8013da6 <__sflush_r+0x1a>
 8013e52:	0793      	lsls	r3, r2, #30
 8013e54:	bf18      	it	ne
 8013e56:	2300      	movne	r3, #0
 8013e58:	680e      	ldr	r6, [r1, #0]
 8013e5a:	bf08      	it	eq
 8013e5c:	694b      	ldreq	r3, [r1, #20]
 8013e5e:	eba6 0807 	sub.w	r8, r6, r7
 8013e62:	600f      	str	r7, [r1, #0]
 8013e64:	608b      	str	r3, [r1, #8]
 8013e66:	f1b8 0f00 	cmp.w	r8, #0
 8013e6a:	dd9c      	ble.n	8013da6 <__sflush_r+0x1a>
 8013e6c:	4643      	mov	r3, r8
 8013e6e:	463a      	mov	r2, r7
 8013e70:	4628      	mov	r0, r5
 8013e72:	6a21      	ldr	r1, [r4, #32]
 8013e74:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013e76:	47b0      	blx	r6
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	dc06      	bgt.n	8013e8a <__sflush_r+0xfe>
 8013e7c:	89a3      	ldrh	r3, [r4, #12]
 8013e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8013e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e86:	81a3      	strh	r3, [r4, #12]
 8013e88:	e78e      	b.n	8013da8 <__sflush_r+0x1c>
 8013e8a:	4407      	add	r7, r0
 8013e8c:	eba8 0800 	sub.w	r8, r8, r0
 8013e90:	e7e9      	b.n	8013e66 <__sflush_r+0xda>
 8013e92:	bf00      	nop
 8013e94:	20400001 	.word	0x20400001

08013e98 <_fflush_r>:
 8013e98:	b538      	push	{r3, r4, r5, lr}
 8013e9a:	690b      	ldr	r3, [r1, #16]
 8013e9c:	4605      	mov	r5, r0
 8013e9e:	460c      	mov	r4, r1
 8013ea0:	b913      	cbnz	r3, 8013ea8 <_fflush_r+0x10>
 8013ea2:	2500      	movs	r5, #0
 8013ea4:	4628      	mov	r0, r5
 8013ea6:	bd38      	pop	{r3, r4, r5, pc}
 8013ea8:	b118      	cbz	r0, 8013eb2 <_fflush_r+0x1a>
 8013eaa:	6983      	ldr	r3, [r0, #24]
 8013eac:	b90b      	cbnz	r3, 8013eb2 <_fflush_r+0x1a>
 8013eae:	f7fd f943 	bl	8011138 <__sinit>
 8013eb2:	4b14      	ldr	r3, [pc, #80]	; (8013f04 <_fflush_r+0x6c>)
 8013eb4:	429c      	cmp	r4, r3
 8013eb6:	d11b      	bne.n	8013ef0 <_fflush_r+0x58>
 8013eb8:	686c      	ldr	r4, [r5, #4]
 8013eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d0ef      	beq.n	8013ea2 <_fflush_r+0xa>
 8013ec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013ec4:	07d0      	lsls	r0, r2, #31
 8013ec6:	d404      	bmi.n	8013ed2 <_fflush_r+0x3a>
 8013ec8:	0599      	lsls	r1, r3, #22
 8013eca:	d402      	bmi.n	8013ed2 <_fflush_r+0x3a>
 8013ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ece:	f7fd f9f6 	bl	80112be <__retarget_lock_acquire_recursive>
 8013ed2:	4628      	mov	r0, r5
 8013ed4:	4621      	mov	r1, r4
 8013ed6:	f7ff ff59 	bl	8013d8c <__sflush_r>
 8013eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013edc:	4605      	mov	r5, r0
 8013ede:	07da      	lsls	r2, r3, #31
 8013ee0:	d4e0      	bmi.n	8013ea4 <_fflush_r+0xc>
 8013ee2:	89a3      	ldrh	r3, [r4, #12]
 8013ee4:	059b      	lsls	r3, r3, #22
 8013ee6:	d4dd      	bmi.n	8013ea4 <_fflush_r+0xc>
 8013ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013eea:	f7fd f9e9 	bl	80112c0 <__retarget_lock_release_recursive>
 8013eee:	e7d9      	b.n	8013ea4 <_fflush_r+0xc>
 8013ef0:	4b05      	ldr	r3, [pc, #20]	; (8013f08 <_fflush_r+0x70>)
 8013ef2:	429c      	cmp	r4, r3
 8013ef4:	d101      	bne.n	8013efa <_fflush_r+0x62>
 8013ef6:	68ac      	ldr	r4, [r5, #8]
 8013ef8:	e7df      	b.n	8013eba <_fflush_r+0x22>
 8013efa:	4b04      	ldr	r3, [pc, #16]	; (8013f0c <_fflush_r+0x74>)
 8013efc:	429c      	cmp	r4, r3
 8013efe:	bf08      	it	eq
 8013f00:	68ec      	ldreq	r4, [r5, #12]
 8013f02:	e7da      	b.n	8013eba <_fflush_r+0x22>
 8013f04:	08015bcc 	.word	0x08015bcc
 8013f08:	08015bec 	.word	0x08015bec
 8013f0c:	08015bac 	.word	0x08015bac

08013f10 <rshift>:
 8013f10:	6903      	ldr	r3, [r0, #16]
 8013f12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013f1a:	f100 0414 	add.w	r4, r0, #20
 8013f1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013f22:	dd46      	ble.n	8013fb2 <rshift+0xa2>
 8013f24:	f011 011f 	ands.w	r1, r1, #31
 8013f28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013f2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013f30:	d10c      	bne.n	8013f4c <rshift+0x3c>
 8013f32:	4629      	mov	r1, r5
 8013f34:	f100 0710 	add.w	r7, r0, #16
 8013f38:	42b1      	cmp	r1, r6
 8013f3a:	d335      	bcc.n	8013fa8 <rshift+0x98>
 8013f3c:	1a9b      	subs	r3, r3, r2
 8013f3e:	009b      	lsls	r3, r3, #2
 8013f40:	1eea      	subs	r2, r5, #3
 8013f42:	4296      	cmp	r6, r2
 8013f44:	bf38      	it	cc
 8013f46:	2300      	movcc	r3, #0
 8013f48:	4423      	add	r3, r4
 8013f4a:	e015      	b.n	8013f78 <rshift+0x68>
 8013f4c:	46a1      	mov	r9, r4
 8013f4e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013f52:	f1c1 0820 	rsb	r8, r1, #32
 8013f56:	40cf      	lsrs	r7, r1
 8013f58:	f105 0e04 	add.w	lr, r5, #4
 8013f5c:	4576      	cmp	r6, lr
 8013f5e:	46f4      	mov	ip, lr
 8013f60:	d816      	bhi.n	8013f90 <rshift+0x80>
 8013f62:	1a9b      	subs	r3, r3, r2
 8013f64:	009a      	lsls	r2, r3, #2
 8013f66:	3a04      	subs	r2, #4
 8013f68:	3501      	adds	r5, #1
 8013f6a:	42ae      	cmp	r6, r5
 8013f6c:	bf38      	it	cc
 8013f6e:	2200      	movcc	r2, #0
 8013f70:	18a3      	adds	r3, r4, r2
 8013f72:	50a7      	str	r7, [r4, r2]
 8013f74:	b107      	cbz	r7, 8013f78 <rshift+0x68>
 8013f76:	3304      	adds	r3, #4
 8013f78:	42a3      	cmp	r3, r4
 8013f7a:	eba3 0204 	sub.w	r2, r3, r4
 8013f7e:	bf08      	it	eq
 8013f80:	2300      	moveq	r3, #0
 8013f82:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013f86:	6102      	str	r2, [r0, #16]
 8013f88:	bf08      	it	eq
 8013f8a:	6143      	streq	r3, [r0, #20]
 8013f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f90:	f8dc c000 	ldr.w	ip, [ip]
 8013f94:	fa0c fc08 	lsl.w	ip, ip, r8
 8013f98:	ea4c 0707 	orr.w	r7, ip, r7
 8013f9c:	f849 7b04 	str.w	r7, [r9], #4
 8013fa0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013fa4:	40cf      	lsrs	r7, r1
 8013fa6:	e7d9      	b.n	8013f5c <rshift+0x4c>
 8013fa8:	f851 cb04 	ldr.w	ip, [r1], #4
 8013fac:	f847 cf04 	str.w	ip, [r7, #4]!
 8013fb0:	e7c2      	b.n	8013f38 <rshift+0x28>
 8013fb2:	4623      	mov	r3, r4
 8013fb4:	e7e0      	b.n	8013f78 <rshift+0x68>

08013fb6 <__hexdig_fun>:
 8013fb6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013fba:	2b09      	cmp	r3, #9
 8013fbc:	d802      	bhi.n	8013fc4 <__hexdig_fun+0xe>
 8013fbe:	3820      	subs	r0, #32
 8013fc0:	b2c0      	uxtb	r0, r0
 8013fc2:	4770      	bx	lr
 8013fc4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013fc8:	2b05      	cmp	r3, #5
 8013fca:	d801      	bhi.n	8013fd0 <__hexdig_fun+0x1a>
 8013fcc:	3847      	subs	r0, #71	; 0x47
 8013fce:	e7f7      	b.n	8013fc0 <__hexdig_fun+0xa>
 8013fd0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013fd4:	2b05      	cmp	r3, #5
 8013fd6:	d801      	bhi.n	8013fdc <__hexdig_fun+0x26>
 8013fd8:	3827      	subs	r0, #39	; 0x27
 8013fda:	e7f1      	b.n	8013fc0 <__hexdig_fun+0xa>
 8013fdc:	2000      	movs	r0, #0
 8013fde:	4770      	bx	lr

08013fe0 <__gethex>:
 8013fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe4:	b08b      	sub	sp, #44	; 0x2c
 8013fe6:	9306      	str	r3, [sp, #24]
 8013fe8:	4bb9      	ldr	r3, [pc, #740]	; (80142d0 <__gethex+0x2f0>)
 8013fea:	9002      	str	r0, [sp, #8]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	468b      	mov	fp, r1
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	4690      	mov	r8, r2
 8013ff4:	9303      	str	r3, [sp, #12]
 8013ff6:	f7ec f8f5 	bl	80001e4 <strlen>
 8013ffa:	4682      	mov	sl, r0
 8013ffc:	9b03      	ldr	r3, [sp, #12]
 8013ffe:	f8db 2000 	ldr.w	r2, [fp]
 8014002:	4403      	add	r3, r0
 8014004:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014008:	9307      	str	r3, [sp, #28]
 801400a:	1c93      	adds	r3, r2, #2
 801400c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014010:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014014:	32fe      	adds	r2, #254	; 0xfe
 8014016:	18d1      	adds	r1, r2, r3
 8014018:	461f      	mov	r7, r3
 801401a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801401e:	9101      	str	r1, [sp, #4]
 8014020:	2830      	cmp	r0, #48	; 0x30
 8014022:	d0f8      	beq.n	8014016 <__gethex+0x36>
 8014024:	f7ff ffc7 	bl	8013fb6 <__hexdig_fun>
 8014028:	4604      	mov	r4, r0
 801402a:	2800      	cmp	r0, #0
 801402c:	d13a      	bne.n	80140a4 <__gethex+0xc4>
 801402e:	4652      	mov	r2, sl
 8014030:	4638      	mov	r0, r7
 8014032:	9903      	ldr	r1, [sp, #12]
 8014034:	f001 f94e 	bl	80152d4 <strncmp>
 8014038:	4605      	mov	r5, r0
 801403a:	2800      	cmp	r0, #0
 801403c:	d166      	bne.n	801410c <__gethex+0x12c>
 801403e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014042:	eb07 060a 	add.w	r6, r7, sl
 8014046:	f7ff ffb6 	bl	8013fb6 <__hexdig_fun>
 801404a:	2800      	cmp	r0, #0
 801404c:	d060      	beq.n	8014110 <__gethex+0x130>
 801404e:	4633      	mov	r3, r6
 8014050:	7818      	ldrb	r0, [r3, #0]
 8014052:	461f      	mov	r7, r3
 8014054:	2830      	cmp	r0, #48	; 0x30
 8014056:	f103 0301 	add.w	r3, r3, #1
 801405a:	d0f9      	beq.n	8014050 <__gethex+0x70>
 801405c:	f7ff ffab 	bl	8013fb6 <__hexdig_fun>
 8014060:	2301      	movs	r3, #1
 8014062:	fab0 f480 	clz	r4, r0
 8014066:	4635      	mov	r5, r6
 8014068:	0964      	lsrs	r4, r4, #5
 801406a:	9301      	str	r3, [sp, #4]
 801406c:	463a      	mov	r2, r7
 801406e:	4616      	mov	r6, r2
 8014070:	7830      	ldrb	r0, [r6, #0]
 8014072:	3201      	adds	r2, #1
 8014074:	f7ff ff9f 	bl	8013fb6 <__hexdig_fun>
 8014078:	2800      	cmp	r0, #0
 801407a:	d1f8      	bne.n	801406e <__gethex+0x8e>
 801407c:	4652      	mov	r2, sl
 801407e:	4630      	mov	r0, r6
 8014080:	9903      	ldr	r1, [sp, #12]
 8014082:	f001 f927 	bl	80152d4 <strncmp>
 8014086:	b980      	cbnz	r0, 80140aa <__gethex+0xca>
 8014088:	b94d      	cbnz	r5, 801409e <__gethex+0xbe>
 801408a:	eb06 050a 	add.w	r5, r6, sl
 801408e:	462a      	mov	r2, r5
 8014090:	4616      	mov	r6, r2
 8014092:	7830      	ldrb	r0, [r6, #0]
 8014094:	3201      	adds	r2, #1
 8014096:	f7ff ff8e 	bl	8013fb6 <__hexdig_fun>
 801409a:	2800      	cmp	r0, #0
 801409c:	d1f8      	bne.n	8014090 <__gethex+0xb0>
 801409e:	1bad      	subs	r5, r5, r6
 80140a0:	00ad      	lsls	r5, r5, #2
 80140a2:	e004      	b.n	80140ae <__gethex+0xce>
 80140a4:	2400      	movs	r4, #0
 80140a6:	4625      	mov	r5, r4
 80140a8:	e7e0      	b.n	801406c <__gethex+0x8c>
 80140aa:	2d00      	cmp	r5, #0
 80140ac:	d1f7      	bne.n	801409e <__gethex+0xbe>
 80140ae:	7833      	ldrb	r3, [r6, #0]
 80140b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80140b4:	2b50      	cmp	r3, #80	; 0x50
 80140b6:	d139      	bne.n	801412c <__gethex+0x14c>
 80140b8:	7873      	ldrb	r3, [r6, #1]
 80140ba:	2b2b      	cmp	r3, #43	; 0x2b
 80140bc:	d02a      	beq.n	8014114 <__gethex+0x134>
 80140be:	2b2d      	cmp	r3, #45	; 0x2d
 80140c0:	d02c      	beq.n	801411c <__gethex+0x13c>
 80140c2:	f04f 0900 	mov.w	r9, #0
 80140c6:	1c71      	adds	r1, r6, #1
 80140c8:	7808      	ldrb	r0, [r1, #0]
 80140ca:	f7ff ff74 	bl	8013fb6 <__hexdig_fun>
 80140ce:	1e43      	subs	r3, r0, #1
 80140d0:	b2db      	uxtb	r3, r3
 80140d2:	2b18      	cmp	r3, #24
 80140d4:	d82a      	bhi.n	801412c <__gethex+0x14c>
 80140d6:	f1a0 0210 	sub.w	r2, r0, #16
 80140da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80140de:	f7ff ff6a 	bl	8013fb6 <__hexdig_fun>
 80140e2:	1e43      	subs	r3, r0, #1
 80140e4:	b2db      	uxtb	r3, r3
 80140e6:	2b18      	cmp	r3, #24
 80140e8:	d91b      	bls.n	8014122 <__gethex+0x142>
 80140ea:	f1b9 0f00 	cmp.w	r9, #0
 80140ee:	d000      	beq.n	80140f2 <__gethex+0x112>
 80140f0:	4252      	negs	r2, r2
 80140f2:	4415      	add	r5, r2
 80140f4:	f8cb 1000 	str.w	r1, [fp]
 80140f8:	b1d4      	cbz	r4, 8014130 <__gethex+0x150>
 80140fa:	9b01      	ldr	r3, [sp, #4]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	bf14      	ite	ne
 8014100:	2700      	movne	r7, #0
 8014102:	2706      	moveq	r7, #6
 8014104:	4638      	mov	r0, r7
 8014106:	b00b      	add	sp, #44	; 0x2c
 8014108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801410c:	463e      	mov	r6, r7
 801410e:	4625      	mov	r5, r4
 8014110:	2401      	movs	r4, #1
 8014112:	e7cc      	b.n	80140ae <__gethex+0xce>
 8014114:	f04f 0900 	mov.w	r9, #0
 8014118:	1cb1      	adds	r1, r6, #2
 801411a:	e7d5      	b.n	80140c8 <__gethex+0xe8>
 801411c:	f04f 0901 	mov.w	r9, #1
 8014120:	e7fa      	b.n	8014118 <__gethex+0x138>
 8014122:	230a      	movs	r3, #10
 8014124:	fb03 0202 	mla	r2, r3, r2, r0
 8014128:	3a10      	subs	r2, #16
 801412a:	e7d6      	b.n	80140da <__gethex+0xfa>
 801412c:	4631      	mov	r1, r6
 801412e:	e7e1      	b.n	80140f4 <__gethex+0x114>
 8014130:	4621      	mov	r1, r4
 8014132:	1bf3      	subs	r3, r6, r7
 8014134:	3b01      	subs	r3, #1
 8014136:	2b07      	cmp	r3, #7
 8014138:	dc0a      	bgt.n	8014150 <__gethex+0x170>
 801413a:	9802      	ldr	r0, [sp, #8]
 801413c:	f000 fa90 	bl	8014660 <_Balloc>
 8014140:	4604      	mov	r4, r0
 8014142:	b940      	cbnz	r0, 8014156 <__gethex+0x176>
 8014144:	4602      	mov	r2, r0
 8014146:	21de      	movs	r1, #222	; 0xde
 8014148:	4b62      	ldr	r3, [pc, #392]	; (80142d4 <__gethex+0x2f4>)
 801414a:	4863      	ldr	r0, [pc, #396]	; (80142d8 <__gethex+0x2f8>)
 801414c:	f001 f8e2 	bl	8015314 <__assert_func>
 8014150:	3101      	adds	r1, #1
 8014152:	105b      	asrs	r3, r3, #1
 8014154:	e7ef      	b.n	8014136 <__gethex+0x156>
 8014156:	f04f 0b00 	mov.w	fp, #0
 801415a:	f100 0914 	add.w	r9, r0, #20
 801415e:	f1ca 0301 	rsb	r3, sl, #1
 8014162:	f8cd 9010 	str.w	r9, [sp, #16]
 8014166:	f8cd b004 	str.w	fp, [sp, #4]
 801416a:	9308      	str	r3, [sp, #32]
 801416c:	42b7      	cmp	r7, r6
 801416e:	d33f      	bcc.n	80141f0 <__gethex+0x210>
 8014170:	9f04      	ldr	r7, [sp, #16]
 8014172:	9b01      	ldr	r3, [sp, #4]
 8014174:	f847 3b04 	str.w	r3, [r7], #4
 8014178:	eba7 0709 	sub.w	r7, r7, r9
 801417c:	10bf      	asrs	r7, r7, #2
 801417e:	6127      	str	r7, [r4, #16]
 8014180:	4618      	mov	r0, r3
 8014182:	f000 fb63 	bl	801484c <__hi0bits>
 8014186:	017f      	lsls	r7, r7, #5
 8014188:	f8d8 6000 	ldr.w	r6, [r8]
 801418c:	1a3f      	subs	r7, r7, r0
 801418e:	42b7      	cmp	r7, r6
 8014190:	dd62      	ble.n	8014258 <__gethex+0x278>
 8014192:	1bbf      	subs	r7, r7, r6
 8014194:	4639      	mov	r1, r7
 8014196:	4620      	mov	r0, r4
 8014198:	f000 fef9 	bl	8014f8e <__any_on>
 801419c:	4682      	mov	sl, r0
 801419e:	b1a8      	cbz	r0, 80141cc <__gethex+0x1ec>
 80141a0:	f04f 0a01 	mov.w	sl, #1
 80141a4:	1e7b      	subs	r3, r7, #1
 80141a6:	1159      	asrs	r1, r3, #5
 80141a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80141ac:	f003 021f 	and.w	r2, r3, #31
 80141b0:	fa0a f202 	lsl.w	r2, sl, r2
 80141b4:	420a      	tst	r2, r1
 80141b6:	d009      	beq.n	80141cc <__gethex+0x1ec>
 80141b8:	4553      	cmp	r3, sl
 80141ba:	dd05      	ble.n	80141c8 <__gethex+0x1e8>
 80141bc:	4620      	mov	r0, r4
 80141be:	1eb9      	subs	r1, r7, #2
 80141c0:	f000 fee5 	bl	8014f8e <__any_on>
 80141c4:	2800      	cmp	r0, #0
 80141c6:	d144      	bne.n	8014252 <__gethex+0x272>
 80141c8:	f04f 0a02 	mov.w	sl, #2
 80141cc:	4639      	mov	r1, r7
 80141ce:	4620      	mov	r0, r4
 80141d0:	f7ff fe9e 	bl	8013f10 <rshift>
 80141d4:	443d      	add	r5, r7
 80141d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80141da:	42ab      	cmp	r3, r5
 80141dc:	da4a      	bge.n	8014274 <__gethex+0x294>
 80141de:	4621      	mov	r1, r4
 80141e0:	9802      	ldr	r0, [sp, #8]
 80141e2:	f000 fa7d 	bl	80146e0 <_Bfree>
 80141e6:	2300      	movs	r3, #0
 80141e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80141ea:	27a3      	movs	r7, #163	; 0xa3
 80141ec:	6013      	str	r3, [r2, #0]
 80141ee:	e789      	b.n	8014104 <__gethex+0x124>
 80141f0:	1e73      	subs	r3, r6, #1
 80141f2:	9a07      	ldr	r2, [sp, #28]
 80141f4:	9305      	str	r3, [sp, #20]
 80141f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80141fa:	4293      	cmp	r3, r2
 80141fc:	d019      	beq.n	8014232 <__gethex+0x252>
 80141fe:	f1bb 0f20 	cmp.w	fp, #32
 8014202:	d107      	bne.n	8014214 <__gethex+0x234>
 8014204:	9b04      	ldr	r3, [sp, #16]
 8014206:	9a01      	ldr	r2, [sp, #4]
 8014208:	f843 2b04 	str.w	r2, [r3], #4
 801420c:	9304      	str	r3, [sp, #16]
 801420e:	2300      	movs	r3, #0
 8014210:	469b      	mov	fp, r3
 8014212:	9301      	str	r3, [sp, #4]
 8014214:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014218:	f7ff fecd 	bl	8013fb6 <__hexdig_fun>
 801421c:	9b01      	ldr	r3, [sp, #4]
 801421e:	f000 000f 	and.w	r0, r0, #15
 8014222:	fa00 f00b 	lsl.w	r0, r0, fp
 8014226:	4303      	orrs	r3, r0
 8014228:	9301      	str	r3, [sp, #4]
 801422a:	f10b 0b04 	add.w	fp, fp, #4
 801422e:	9b05      	ldr	r3, [sp, #20]
 8014230:	e00d      	b.n	801424e <__gethex+0x26e>
 8014232:	9b05      	ldr	r3, [sp, #20]
 8014234:	9a08      	ldr	r2, [sp, #32]
 8014236:	4413      	add	r3, r2
 8014238:	42bb      	cmp	r3, r7
 801423a:	d3e0      	bcc.n	80141fe <__gethex+0x21e>
 801423c:	4618      	mov	r0, r3
 801423e:	4652      	mov	r2, sl
 8014240:	9903      	ldr	r1, [sp, #12]
 8014242:	9309      	str	r3, [sp, #36]	; 0x24
 8014244:	f001 f846 	bl	80152d4 <strncmp>
 8014248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801424a:	2800      	cmp	r0, #0
 801424c:	d1d7      	bne.n	80141fe <__gethex+0x21e>
 801424e:	461e      	mov	r6, r3
 8014250:	e78c      	b.n	801416c <__gethex+0x18c>
 8014252:	f04f 0a03 	mov.w	sl, #3
 8014256:	e7b9      	b.n	80141cc <__gethex+0x1ec>
 8014258:	da09      	bge.n	801426e <__gethex+0x28e>
 801425a:	1bf7      	subs	r7, r6, r7
 801425c:	4621      	mov	r1, r4
 801425e:	463a      	mov	r2, r7
 8014260:	9802      	ldr	r0, [sp, #8]
 8014262:	f000 fc55 	bl	8014b10 <__lshift>
 8014266:	4604      	mov	r4, r0
 8014268:	1bed      	subs	r5, r5, r7
 801426a:	f100 0914 	add.w	r9, r0, #20
 801426e:	f04f 0a00 	mov.w	sl, #0
 8014272:	e7b0      	b.n	80141d6 <__gethex+0x1f6>
 8014274:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014278:	42a8      	cmp	r0, r5
 801427a:	dd71      	ble.n	8014360 <__gethex+0x380>
 801427c:	1b45      	subs	r5, r0, r5
 801427e:	42ae      	cmp	r6, r5
 8014280:	dc34      	bgt.n	80142ec <__gethex+0x30c>
 8014282:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014286:	2b02      	cmp	r3, #2
 8014288:	d028      	beq.n	80142dc <__gethex+0x2fc>
 801428a:	2b03      	cmp	r3, #3
 801428c:	d02a      	beq.n	80142e4 <__gethex+0x304>
 801428e:	2b01      	cmp	r3, #1
 8014290:	d115      	bne.n	80142be <__gethex+0x2de>
 8014292:	42ae      	cmp	r6, r5
 8014294:	d113      	bne.n	80142be <__gethex+0x2de>
 8014296:	2e01      	cmp	r6, #1
 8014298:	d10b      	bne.n	80142b2 <__gethex+0x2d2>
 801429a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801429e:	9a06      	ldr	r2, [sp, #24]
 80142a0:	2762      	movs	r7, #98	; 0x62
 80142a2:	6013      	str	r3, [r2, #0]
 80142a4:	2301      	movs	r3, #1
 80142a6:	6123      	str	r3, [r4, #16]
 80142a8:	f8c9 3000 	str.w	r3, [r9]
 80142ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80142ae:	601c      	str	r4, [r3, #0]
 80142b0:	e728      	b.n	8014104 <__gethex+0x124>
 80142b2:	4620      	mov	r0, r4
 80142b4:	1e71      	subs	r1, r6, #1
 80142b6:	f000 fe6a 	bl	8014f8e <__any_on>
 80142ba:	2800      	cmp	r0, #0
 80142bc:	d1ed      	bne.n	801429a <__gethex+0x2ba>
 80142be:	4621      	mov	r1, r4
 80142c0:	9802      	ldr	r0, [sp, #8]
 80142c2:	f000 fa0d 	bl	80146e0 <_Bfree>
 80142c6:	2300      	movs	r3, #0
 80142c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80142ca:	2750      	movs	r7, #80	; 0x50
 80142cc:	6013      	str	r3, [r2, #0]
 80142ce:	e719      	b.n	8014104 <__gethex+0x124>
 80142d0:	08015ea0 	.word	0x08015ea0
 80142d4:	08015e24 	.word	0x08015e24
 80142d8:	08015e35 	.word	0x08015e35
 80142dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d1ed      	bne.n	80142be <__gethex+0x2de>
 80142e2:	e7da      	b.n	801429a <__gethex+0x2ba>
 80142e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d1d7      	bne.n	801429a <__gethex+0x2ba>
 80142ea:	e7e8      	b.n	80142be <__gethex+0x2de>
 80142ec:	1e6f      	subs	r7, r5, #1
 80142ee:	f1ba 0f00 	cmp.w	sl, #0
 80142f2:	d132      	bne.n	801435a <__gethex+0x37a>
 80142f4:	b127      	cbz	r7, 8014300 <__gethex+0x320>
 80142f6:	4639      	mov	r1, r7
 80142f8:	4620      	mov	r0, r4
 80142fa:	f000 fe48 	bl	8014f8e <__any_on>
 80142fe:	4682      	mov	sl, r0
 8014300:	2101      	movs	r1, #1
 8014302:	117b      	asrs	r3, r7, #5
 8014304:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014308:	f007 071f 	and.w	r7, r7, #31
 801430c:	fa01 f707 	lsl.w	r7, r1, r7
 8014310:	421f      	tst	r7, r3
 8014312:	f04f 0702 	mov.w	r7, #2
 8014316:	4629      	mov	r1, r5
 8014318:	4620      	mov	r0, r4
 801431a:	bf18      	it	ne
 801431c:	f04a 0a02 	orrne.w	sl, sl, #2
 8014320:	1b76      	subs	r6, r6, r5
 8014322:	f7ff fdf5 	bl	8013f10 <rshift>
 8014326:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801432a:	f1ba 0f00 	cmp.w	sl, #0
 801432e:	d048      	beq.n	80143c2 <__gethex+0x3e2>
 8014330:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014334:	2b02      	cmp	r3, #2
 8014336:	d015      	beq.n	8014364 <__gethex+0x384>
 8014338:	2b03      	cmp	r3, #3
 801433a:	d017      	beq.n	801436c <__gethex+0x38c>
 801433c:	2b01      	cmp	r3, #1
 801433e:	d109      	bne.n	8014354 <__gethex+0x374>
 8014340:	f01a 0f02 	tst.w	sl, #2
 8014344:	d006      	beq.n	8014354 <__gethex+0x374>
 8014346:	f8d9 0000 	ldr.w	r0, [r9]
 801434a:	ea4a 0a00 	orr.w	sl, sl, r0
 801434e:	f01a 0f01 	tst.w	sl, #1
 8014352:	d10e      	bne.n	8014372 <__gethex+0x392>
 8014354:	f047 0710 	orr.w	r7, r7, #16
 8014358:	e033      	b.n	80143c2 <__gethex+0x3e2>
 801435a:	f04f 0a01 	mov.w	sl, #1
 801435e:	e7cf      	b.n	8014300 <__gethex+0x320>
 8014360:	2701      	movs	r7, #1
 8014362:	e7e2      	b.n	801432a <__gethex+0x34a>
 8014364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014366:	f1c3 0301 	rsb	r3, r3, #1
 801436a:	9315      	str	r3, [sp, #84]	; 0x54
 801436c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801436e:	2b00      	cmp	r3, #0
 8014370:	d0f0      	beq.n	8014354 <__gethex+0x374>
 8014372:	f04f 0c00 	mov.w	ip, #0
 8014376:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801437a:	f104 0314 	add.w	r3, r4, #20
 801437e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014382:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014386:	4618      	mov	r0, r3
 8014388:	f853 2b04 	ldr.w	r2, [r3], #4
 801438c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014390:	d01c      	beq.n	80143cc <__gethex+0x3ec>
 8014392:	3201      	adds	r2, #1
 8014394:	6002      	str	r2, [r0, #0]
 8014396:	2f02      	cmp	r7, #2
 8014398:	f104 0314 	add.w	r3, r4, #20
 801439c:	d13d      	bne.n	801441a <__gethex+0x43a>
 801439e:	f8d8 2000 	ldr.w	r2, [r8]
 80143a2:	3a01      	subs	r2, #1
 80143a4:	42b2      	cmp	r2, r6
 80143a6:	d10a      	bne.n	80143be <__gethex+0x3de>
 80143a8:	2201      	movs	r2, #1
 80143aa:	1171      	asrs	r1, r6, #5
 80143ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80143b0:	f006 061f 	and.w	r6, r6, #31
 80143b4:	fa02 f606 	lsl.w	r6, r2, r6
 80143b8:	421e      	tst	r6, r3
 80143ba:	bf18      	it	ne
 80143bc:	4617      	movne	r7, r2
 80143be:	f047 0720 	orr.w	r7, r7, #32
 80143c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80143c4:	601c      	str	r4, [r3, #0]
 80143c6:	9b06      	ldr	r3, [sp, #24]
 80143c8:	601d      	str	r5, [r3, #0]
 80143ca:	e69b      	b.n	8014104 <__gethex+0x124>
 80143cc:	4299      	cmp	r1, r3
 80143ce:	f843 cc04 	str.w	ip, [r3, #-4]
 80143d2:	d8d8      	bhi.n	8014386 <__gethex+0x3a6>
 80143d4:	68a3      	ldr	r3, [r4, #8]
 80143d6:	459b      	cmp	fp, r3
 80143d8:	db17      	blt.n	801440a <__gethex+0x42a>
 80143da:	6861      	ldr	r1, [r4, #4]
 80143dc:	9802      	ldr	r0, [sp, #8]
 80143de:	3101      	adds	r1, #1
 80143e0:	f000 f93e 	bl	8014660 <_Balloc>
 80143e4:	4681      	mov	r9, r0
 80143e6:	b918      	cbnz	r0, 80143f0 <__gethex+0x410>
 80143e8:	4602      	mov	r2, r0
 80143ea:	2184      	movs	r1, #132	; 0x84
 80143ec:	4b19      	ldr	r3, [pc, #100]	; (8014454 <__gethex+0x474>)
 80143ee:	e6ac      	b.n	801414a <__gethex+0x16a>
 80143f0:	6922      	ldr	r2, [r4, #16]
 80143f2:	f104 010c 	add.w	r1, r4, #12
 80143f6:	3202      	adds	r2, #2
 80143f8:	0092      	lsls	r2, r2, #2
 80143fa:	300c      	adds	r0, #12
 80143fc:	f7fc ff72 	bl	80112e4 <memcpy>
 8014400:	4621      	mov	r1, r4
 8014402:	9802      	ldr	r0, [sp, #8]
 8014404:	f000 f96c 	bl	80146e0 <_Bfree>
 8014408:	464c      	mov	r4, r9
 801440a:	6923      	ldr	r3, [r4, #16]
 801440c:	1c5a      	adds	r2, r3, #1
 801440e:	6122      	str	r2, [r4, #16]
 8014410:	2201      	movs	r2, #1
 8014412:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014416:	615a      	str	r2, [r3, #20]
 8014418:	e7bd      	b.n	8014396 <__gethex+0x3b6>
 801441a:	6922      	ldr	r2, [r4, #16]
 801441c:	455a      	cmp	r2, fp
 801441e:	dd0b      	ble.n	8014438 <__gethex+0x458>
 8014420:	2101      	movs	r1, #1
 8014422:	4620      	mov	r0, r4
 8014424:	f7ff fd74 	bl	8013f10 <rshift>
 8014428:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801442c:	3501      	adds	r5, #1
 801442e:	42ab      	cmp	r3, r5
 8014430:	f6ff aed5 	blt.w	80141de <__gethex+0x1fe>
 8014434:	2701      	movs	r7, #1
 8014436:	e7c2      	b.n	80143be <__gethex+0x3de>
 8014438:	f016 061f 	ands.w	r6, r6, #31
 801443c:	d0fa      	beq.n	8014434 <__gethex+0x454>
 801443e:	449a      	add	sl, r3
 8014440:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014444:	f000 fa02 	bl	801484c <__hi0bits>
 8014448:	f1c6 0620 	rsb	r6, r6, #32
 801444c:	42b0      	cmp	r0, r6
 801444e:	dbe7      	blt.n	8014420 <__gethex+0x440>
 8014450:	e7f0      	b.n	8014434 <__gethex+0x454>
 8014452:	bf00      	nop
 8014454:	08015e24 	.word	0x08015e24

08014458 <L_shift>:
 8014458:	f1c2 0208 	rsb	r2, r2, #8
 801445c:	0092      	lsls	r2, r2, #2
 801445e:	b570      	push	{r4, r5, r6, lr}
 8014460:	f1c2 0620 	rsb	r6, r2, #32
 8014464:	6843      	ldr	r3, [r0, #4]
 8014466:	6804      	ldr	r4, [r0, #0]
 8014468:	fa03 f506 	lsl.w	r5, r3, r6
 801446c:	432c      	orrs	r4, r5
 801446e:	40d3      	lsrs	r3, r2
 8014470:	6004      	str	r4, [r0, #0]
 8014472:	f840 3f04 	str.w	r3, [r0, #4]!
 8014476:	4288      	cmp	r0, r1
 8014478:	d3f4      	bcc.n	8014464 <L_shift+0xc>
 801447a:	bd70      	pop	{r4, r5, r6, pc}

0801447c <__match>:
 801447c:	b530      	push	{r4, r5, lr}
 801447e:	6803      	ldr	r3, [r0, #0]
 8014480:	3301      	adds	r3, #1
 8014482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014486:	b914      	cbnz	r4, 801448e <__match+0x12>
 8014488:	6003      	str	r3, [r0, #0]
 801448a:	2001      	movs	r0, #1
 801448c:	bd30      	pop	{r4, r5, pc}
 801448e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014492:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014496:	2d19      	cmp	r5, #25
 8014498:	bf98      	it	ls
 801449a:	3220      	addls	r2, #32
 801449c:	42a2      	cmp	r2, r4
 801449e:	d0f0      	beq.n	8014482 <__match+0x6>
 80144a0:	2000      	movs	r0, #0
 80144a2:	e7f3      	b.n	801448c <__match+0x10>

080144a4 <__hexnan>:
 80144a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144a8:	2500      	movs	r5, #0
 80144aa:	680b      	ldr	r3, [r1, #0]
 80144ac:	4682      	mov	sl, r0
 80144ae:	115e      	asrs	r6, r3, #5
 80144b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80144b4:	f013 031f 	ands.w	r3, r3, #31
 80144b8:	bf18      	it	ne
 80144ba:	3604      	addne	r6, #4
 80144bc:	1f37      	subs	r7, r6, #4
 80144be:	4690      	mov	r8, r2
 80144c0:	46b9      	mov	r9, r7
 80144c2:	463c      	mov	r4, r7
 80144c4:	46ab      	mov	fp, r5
 80144c6:	b087      	sub	sp, #28
 80144c8:	6801      	ldr	r1, [r0, #0]
 80144ca:	9301      	str	r3, [sp, #4]
 80144cc:	f846 5c04 	str.w	r5, [r6, #-4]
 80144d0:	9502      	str	r5, [sp, #8]
 80144d2:	784a      	ldrb	r2, [r1, #1]
 80144d4:	1c4b      	adds	r3, r1, #1
 80144d6:	9303      	str	r3, [sp, #12]
 80144d8:	b342      	cbz	r2, 801452c <__hexnan+0x88>
 80144da:	4610      	mov	r0, r2
 80144dc:	9105      	str	r1, [sp, #20]
 80144de:	9204      	str	r2, [sp, #16]
 80144e0:	f7ff fd69 	bl	8013fb6 <__hexdig_fun>
 80144e4:	2800      	cmp	r0, #0
 80144e6:	d14f      	bne.n	8014588 <__hexnan+0xe4>
 80144e8:	9a04      	ldr	r2, [sp, #16]
 80144ea:	9905      	ldr	r1, [sp, #20]
 80144ec:	2a20      	cmp	r2, #32
 80144ee:	d818      	bhi.n	8014522 <__hexnan+0x7e>
 80144f0:	9b02      	ldr	r3, [sp, #8]
 80144f2:	459b      	cmp	fp, r3
 80144f4:	dd13      	ble.n	801451e <__hexnan+0x7a>
 80144f6:	454c      	cmp	r4, r9
 80144f8:	d206      	bcs.n	8014508 <__hexnan+0x64>
 80144fa:	2d07      	cmp	r5, #7
 80144fc:	dc04      	bgt.n	8014508 <__hexnan+0x64>
 80144fe:	462a      	mov	r2, r5
 8014500:	4649      	mov	r1, r9
 8014502:	4620      	mov	r0, r4
 8014504:	f7ff ffa8 	bl	8014458 <L_shift>
 8014508:	4544      	cmp	r4, r8
 801450a:	d950      	bls.n	80145ae <__hexnan+0x10a>
 801450c:	2300      	movs	r3, #0
 801450e:	f1a4 0904 	sub.w	r9, r4, #4
 8014512:	f844 3c04 	str.w	r3, [r4, #-4]
 8014516:	461d      	mov	r5, r3
 8014518:	464c      	mov	r4, r9
 801451a:	f8cd b008 	str.w	fp, [sp, #8]
 801451e:	9903      	ldr	r1, [sp, #12]
 8014520:	e7d7      	b.n	80144d2 <__hexnan+0x2e>
 8014522:	2a29      	cmp	r2, #41	; 0x29
 8014524:	d156      	bne.n	80145d4 <__hexnan+0x130>
 8014526:	3102      	adds	r1, #2
 8014528:	f8ca 1000 	str.w	r1, [sl]
 801452c:	f1bb 0f00 	cmp.w	fp, #0
 8014530:	d050      	beq.n	80145d4 <__hexnan+0x130>
 8014532:	454c      	cmp	r4, r9
 8014534:	d206      	bcs.n	8014544 <__hexnan+0xa0>
 8014536:	2d07      	cmp	r5, #7
 8014538:	dc04      	bgt.n	8014544 <__hexnan+0xa0>
 801453a:	462a      	mov	r2, r5
 801453c:	4649      	mov	r1, r9
 801453e:	4620      	mov	r0, r4
 8014540:	f7ff ff8a 	bl	8014458 <L_shift>
 8014544:	4544      	cmp	r4, r8
 8014546:	d934      	bls.n	80145b2 <__hexnan+0x10e>
 8014548:	4623      	mov	r3, r4
 801454a:	f1a8 0204 	sub.w	r2, r8, #4
 801454e:	f853 1b04 	ldr.w	r1, [r3], #4
 8014552:	429f      	cmp	r7, r3
 8014554:	f842 1f04 	str.w	r1, [r2, #4]!
 8014558:	d2f9      	bcs.n	801454e <__hexnan+0xaa>
 801455a:	1b3b      	subs	r3, r7, r4
 801455c:	f023 0303 	bic.w	r3, r3, #3
 8014560:	3304      	adds	r3, #4
 8014562:	3401      	adds	r4, #1
 8014564:	3e03      	subs	r6, #3
 8014566:	42b4      	cmp	r4, r6
 8014568:	bf88      	it	hi
 801456a:	2304      	movhi	r3, #4
 801456c:	2200      	movs	r2, #0
 801456e:	4443      	add	r3, r8
 8014570:	f843 2b04 	str.w	r2, [r3], #4
 8014574:	429f      	cmp	r7, r3
 8014576:	d2fb      	bcs.n	8014570 <__hexnan+0xcc>
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	b91b      	cbnz	r3, 8014584 <__hexnan+0xe0>
 801457c:	4547      	cmp	r7, r8
 801457e:	d127      	bne.n	80145d0 <__hexnan+0x12c>
 8014580:	2301      	movs	r3, #1
 8014582:	603b      	str	r3, [r7, #0]
 8014584:	2005      	movs	r0, #5
 8014586:	e026      	b.n	80145d6 <__hexnan+0x132>
 8014588:	3501      	adds	r5, #1
 801458a:	2d08      	cmp	r5, #8
 801458c:	f10b 0b01 	add.w	fp, fp, #1
 8014590:	dd06      	ble.n	80145a0 <__hexnan+0xfc>
 8014592:	4544      	cmp	r4, r8
 8014594:	d9c3      	bls.n	801451e <__hexnan+0x7a>
 8014596:	2300      	movs	r3, #0
 8014598:	2501      	movs	r5, #1
 801459a:	f844 3c04 	str.w	r3, [r4, #-4]
 801459e:	3c04      	subs	r4, #4
 80145a0:	6822      	ldr	r2, [r4, #0]
 80145a2:	f000 000f 	and.w	r0, r0, #15
 80145a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80145aa:	6022      	str	r2, [r4, #0]
 80145ac:	e7b7      	b.n	801451e <__hexnan+0x7a>
 80145ae:	2508      	movs	r5, #8
 80145b0:	e7b5      	b.n	801451e <__hexnan+0x7a>
 80145b2:	9b01      	ldr	r3, [sp, #4]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d0df      	beq.n	8014578 <__hexnan+0xd4>
 80145b8:	f04f 32ff 	mov.w	r2, #4294967295
 80145bc:	f1c3 0320 	rsb	r3, r3, #32
 80145c0:	fa22 f303 	lsr.w	r3, r2, r3
 80145c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80145c8:	401a      	ands	r2, r3
 80145ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80145ce:	e7d3      	b.n	8014578 <__hexnan+0xd4>
 80145d0:	3f04      	subs	r7, #4
 80145d2:	e7d1      	b.n	8014578 <__hexnan+0xd4>
 80145d4:	2004      	movs	r0, #4
 80145d6:	b007      	add	sp, #28
 80145d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080145dc <_localeconv_r>:
 80145dc:	4800      	ldr	r0, [pc, #0]	; (80145e0 <_localeconv_r+0x4>)
 80145de:	4770      	bx	lr
 80145e0:	200001ac 	.word	0x200001ac

080145e4 <_lseek_r>:
 80145e4:	b538      	push	{r3, r4, r5, lr}
 80145e6:	4604      	mov	r4, r0
 80145e8:	4608      	mov	r0, r1
 80145ea:	4611      	mov	r1, r2
 80145ec:	2200      	movs	r2, #0
 80145ee:	4d05      	ldr	r5, [pc, #20]	; (8014604 <_lseek_r+0x20>)
 80145f0:	602a      	str	r2, [r5, #0]
 80145f2:	461a      	mov	r2, r3
 80145f4:	f7ee fb42 	bl	8002c7c <_lseek>
 80145f8:	1c43      	adds	r3, r0, #1
 80145fa:	d102      	bne.n	8014602 <_lseek_r+0x1e>
 80145fc:	682b      	ldr	r3, [r5, #0]
 80145fe:	b103      	cbz	r3, 8014602 <_lseek_r+0x1e>
 8014600:	6023      	str	r3, [r4, #0]
 8014602:	bd38      	pop	{r3, r4, r5, pc}
 8014604:	2000b5c0 	.word	0x2000b5c0

08014608 <__ascii_mbtowc>:
 8014608:	b082      	sub	sp, #8
 801460a:	b901      	cbnz	r1, 801460e <__ascii_mbtowc+0x6>
 801460c:	a901      	add	r1, sp, #4
 801460e:	b142      	cbz	r2, 8014622 <__ascii_mbtowc+0x1a>
 8014610:	b14b      	cbz	r3, 8014626 <__ascii_mbtowc+0x1e>
 8014612:	7813      	ldrb	r3, [r2, #0]
 8014614:	600b      	str	r3, [r1, #0]
 8014616:	7812      	ldrb	r2, [r2, #0]
 8014618:	1e10      	subs	r0, r2, #0
 801461a:	bf18      	it	ne
 801461c:	2001      	movne	r0, #1
 801461e:	b002      	add	sp, #8
 8014620:	4770      	bx	lr
 8014622:	4610      	mov	r0, r2
 8014624:	e7fb      	b.n	801461e <__ascii_mbtowc+0x16>
 8014626:	f06f 0001 	mvn.w	r0, #1
 801462a:	e7f8      	b.n	801461e <__ascii_mbtowc+0x16>

0801462c <memchr>:
 801462c:	4603      	mov	r3, r0
 801462e:	b510      	push	{r4, lr}
 8014630:	b2c9      	uxtb	r1, r1
 8014632:	4402      	add	r2, r0
 8014634:	4293      	cmp	r3, r2
 8014636:	4618      	mov	r0, r3
 8014638:	d101      	bne.n	801463e <memchr+0x12>
 801463a:	2000      	movs	r0, #0
 801463c:	e003      	b.n	8014646 <memchr+0x1a>
 801463e:	7804      	ldrb	r4, [r0, #0]
 8014640:	3301      	adds	r3, #1
 8014642:	428c      	cmp	r4, r1
 8014644:	d1f6      	bne.n	8014634 <memchr+0x8>
 8014646:	bd10      	pop	{r4, pc}

08014648 <__malloc_lock>:
 8014648:	4801      	ldr	r0, [pc, #4]	; (8014650 <__malloc_lock+0x8>)
 801464a:	f7fc be38 	b.w	80112be <__retarget_lock_acquire_recursive>
 801464e:	bf00      	nop
 8014650:	2000b5b8 	.word	0x2000b5b8

08014654 <__malloc_unlock>:
 8014654:	4801      	ldr	r0, [pc, #4]	; (801465c <__malloc_unlock+0x8>)
 8014656:	f7fc be33 	b.w	80112c0 <__retarget_lock_release_recursive>
 801465a:	bf00      	nop
 801465c:	2000b5b8 	.word	0x2000b5b8

08014660 <_Balloc>:
 8014660:	b570      	push	{r4, r5, r6, lr}
 8014662:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014664:	4604      	mov	r4, r0
 8014666:	460d      	mov	r5, r1
 8014668:	b976      	cbnz	r6, 8014688 <_Balloc+0x28>
 801466a:	2010      	movs	r0, #16
 801466c:	f7fc fe2a 	bl	80112c4 <malloc>
 8014670:	4602      	mov	r2, r0
 8014672:	6260      	str	r0, [r4, #36]	; 0x24
 8014674:	b920      	cbnz	r0, 8014680 <_Balloc+0x20>
 8014676:	2166      	movs	r1, #102	; 0x66
 8014678:	4b17      	ldr	r3, [pc, #92]	; (80146d8 <_Balloc+0x78>)
 801467a:	4818      	ldr	r0, [pc, #96]	; (80146dc <_Balloc+0x7c>)
 801467c:	f000 fe4a 	bl	8015314 <__assert_func>
 8014680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014684:	6006      	str	r6, [r0, #0]
 8014686:	60c6      	str	r6, [r0, #12]
 8014688:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801468a:	68f3      	ldr	r3, [r6, #12]
 801468c:	b183      	cbz	r3, 80146b0 <_Balloc+0x50>
 801468e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014690:	68db      	ldr	r3, [r3, #12]
 8014692:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014696:	b9b8      	cbnz	r0, 80146c8 <_Balloc+0x68>
 8014698:	2101      	movs	r1, #1
 801469a:	fa01 f605 	lsl.w	r6, r1, r5
 801469e:	1d72      	adds	r2, r6, #5
 80146a0:	4620      	mov	r0, r4
 80146a2:	0092      	lsls	r2, r2, #2
 80146a4:	f000 fc94 	bl	8014fd0 <_calloc_r>
 80146a8:	b160      	cbz	r0, 80146c4 <_Balloc+0x64>
 80146aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80146ae:	e00e      	b.n	80146ce <_Balloc+0x6e>
 80146b0:	2221      	movs	r2, #33	; 0x21
 80146b2:	2104      	movs	r1, #4
 80146b4:	4620      	mov	r0, r4
 80146b6:	f000 fc8b 	bl	8014fd0 <_calloc_r>
 80146ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80146bc:	60f0      	str	r0, [r6, #12]
 80146be:	68db      	ldr	r3, [r3, #12]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d1e4      	bne.n	801468e <_Balloc+0x2e>
 80146c4:	2000      	movs	r0, #0
 80146c6:	bd70      	pop	{r4, r5, r6, pc}
 80146c8:	6802      	ldr	r2, [r0, #0]
 80146ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80146ce:	2300      	movs	r3, #0
 80146d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80146d4:	e7f7      	b.n	80146c6 <_Balloc+0x66>
 80146d6:	bf00      	nop
 80146d8:	08015dae 	.word	0x08015dae
 80146dc:	08015eb4 	.word	0x08015eb4

080146e0 <_Bfree>:
 80146e0:	b570      	push	{r4, r5, r6, lr}
 80146e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80146e4:	4605      	mov	r5, r0
 80146e6:	460c      	mov	r4, r1
 80146e8:	b976      	cbnz	r6, 8014708 <_Bfree+0x28>
 80146ea:	2010      	movs	r0, #16
 80146ec:	f7fc fdea 	bl	80112c4 <malloc>
 80146f0:	4602      	mov	r2, r0
 80146f2:	6268      	str	r0, [r5, #36]	; 0x24
 80146f4:	b920      	cbnz	r0, 8014700 <_Bfree+0x20>
 80146f6:	218a      	movs	r1, #138	; 0x8a
 80146f8:	4b08      	ldr	r3, [pc, #32]	; (801471c <_Bfree+0x3c>)
 80146fa:	4809      	ldr	r0, [pc, #36]	; (8014720 <_Bfree+0x40>)
 80146fc:	f000 fe0a 	bl	8015314 <__assert_func>
 8014700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014704:	6006      	str	r6, [r0, #0]
 8014706:	60c6      	str	r6, [r0, #12]
 8014708:	b13c      	cbz	r4, 801471a <_Bfree+0x3a>
 801470a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801470c:	6862      	ldr	r2, [r4, #4]
 801470e:	68db      	ldr	r3, [r3, #12]
 8014710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014714:	6021      	str	r1, [r4, #0]
 8014716:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801471a:	bd70      	pop	{r4, r5, r6, pc}
 801471c:	08015dae 	.word	0x08015dae
 8014720:	08015eb4 	.word	0x08015eb4

08014724 <__multadd>:
 8014724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014728:	4698      	mov	r8, r3
 801472a:	460c      	mov	r4, r1
 801472c:	2300      	movs	r3, #0
 801472e:	690e      	ldr	r6, [r1, #16]
 8014730:	4607      	mov	r7, r0
 8014732:	f101 0014 	add.w	r0, r1, #20
 8014736:	6805      	ldr	r5, [r0, #0]
 8014738:	3301      	adds	r3, #1
 801473a:	b2a9      	uxth	r1, r5
 801473c:	fb02 8101 	mla	r1, r2, r1, r8
 8014740:	0c2d      	lsrs	r5, r5, #16
 8014742:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014746:	fb02 c505 	mla	r5, r2, r5, ip
 801474a:	b289      	uxth	r1, r1
 801474c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014750:	429e      	cmp	r6, r3
 8014752:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014756:	f840 1b04 	str.w	r1, [r0], #4
 801475a:	dcec      	bgt.n	8014736 <__multadd+0x12>
 801475c:	f1b8 0f00 	cmp.w	r8, #0
 8014760:	d022      	beq.n	80147a8 <__multadd+0x84>
 8014762:	68a3      	ldr	r3, [r4, #8]
 8014764:	42b3      	cmp	r3, r6
 8014766:	dc19      	bgt.n	801479c <__multadd+0x78>
 8014768:	6861      	ldr	r1, [r4, #4]
 801476a:	4638      	mov	r0, r7
 801476c:	3101      	adds	r1, #1
 801476e:	f7ff ff77 	bl	8014660 <_Balloc>
 8014772:	4605      	mov	r5, r0
 8014774:	b928      	cbnz	r0, 8014782 <__multadd+0x5e>
 8014776:	4602      	mov	r2, r0
 8014778:	21b5      	movs	r1, #181	; 0xb5
 801477a:	4b0d      	ldr	r3, [pc, #52]	; (80147b0 <__multadd+0x8c>)
 801477c:	480d      	ldr	r0, [pc, #52]	; (80147b4 <__multadd+0x90>)
 801477e:	f000 fdc9 	bl	8015314 <__assert_func>
 8014782:	6922      	ldr	r2, [r4, #16]
 8014784:	f104 010c 	add.w	r1, r4, #12
 8014788:	3202      	adds	r2, #2
 801478a:	0092      	lsls	r2, r2, #2
 801478c:	300c      	adds	r0, #12
 801478e:	f7fc fda9 	bl	80112e4 <memcpy>
 8014792:	4621      	mov	r1, r4
 8014794:	4638      	mov	r0, r7
 8014796:	f7ff ffa3 	bl	80146e0 <_Bfree>
 801479a:	462c      	mov	r4, r5
 801479c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80147a0:	3601      	adds	r6, #1
 80147a2:	f8c3 8014 	str.w	r8, [r3, #20]
 80147a6:	6126      	str	r6, [r4, #16]
 80147a8:	4620      	mov	r0, r4
 80147aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147ae:	bf00      	nop
 80147b0:	08015e24 	.word	0x08015e24
 80147b4:	08015eb4 	.word	0x08015eb4

080147b8 <__s2b>:
 80147b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147bc:	4615      	mov	r5, r2
 80147be:	2209      	movs	r2, #9
 80147c0:	461f      	mov	r7, r3
 80147c2:	3308      	adds	r3, #8
 80147c4:	460c      	mov	r4, r1
 80147c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80147ca:	4606      	mov	r6, r0
 80147cc:	2201      	movs	r2, #1
 80147ce:	2100      	movs	r1, #0
 80147d0:	429a      	cmp	r2, r3
 80147d2:	db09      	blt.n	80147e8 <__s2b+0x30>
 80147d4:	4630      	mov	r0, r6
 80147d6:	f7ff ff43 	bl	8014660 <_Balloc>
 80147da:	b940      	cbnz	r0, 80147ee <__s2b+0x36>
 80147dc:	4602      	mov	r2, r0
 80147de:	21ce      	movs	r1, #206	; 0xce
 80147e0:	4b18      	ldr	r3, [pc, #96]	; (8014844 <__s2b+0x8c>)
 80147e2:	4819      	ldr	r0, [pc, #100]	; (8014848 <__s2b+0x90>)
 80147e4:	f000 fd96 	bl	8015314 <__assert_func>
 80147e8:	0052      	lsls	r2, r2, #1
 80147ea:	3101      	adds	r1, #1
 80147ec:	e7f0      	b.n	80147d0 <__s2b+0x18>
 80147ee:	9b08      	ldr	r3, [sp, #32]
 80147f0:	2d09      	cmp	r5, #9
 80147f2:	6143      	str	r3, [r0, #20]
 80147f4:	f04f 0301 	mov.w	r3, #1
 80147f8:	6103      	str	r3, [r0, #16]
 80147fa:	dd16      	ble.n	801482a <__s2b+0x72>
 80147fc:	f104 0909 	add.w	r9, r4, #9
 8014800:	46c8      	mov	r8, r9
 8014802:	442c      	add	r4, r5
 8014804:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014808:	4601      	mov	r1, r0
 801480a:	220a      	movs	r2, #10
 801480c:	4630      	mov	r0, r6
 801480e:	3b30      	subs	r3, #48	; 0x30
 8014810:	f7ff ff88 	bl	8014724 <__multadd>
 8014814:	45a0      	cmp	r8, r4
 8014816:	d1f5      	bne.n	8014804 <__s2b+0x4c>
 8014818:	f1a5 0408 	sub.w	r4, r5, #8
 801481c:	444c      	add	r4, r9
 801481e:	1b2d      	subs	r5, r5, r4
 8014820:	1963      	adds	r3, r4, r5
 8014822:	42bb      	cmp	r3, r7
 8014824:	db04      	blt.n	8014830 <__s2b+0x78>
 8014826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801482a:	2509      	movs	r5, #9
 801482c:	340a      	adds	r4, #10
 801482e:	e7f6      	b.n	801481e <__s2b+0x66>
 8014830:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014834:	4601      	mov	r1, r0
 8014836:	220a      	movs	r2, #10
 8014838:	4630      	mov	r0, r6
 801483a:	3b30      	subs	r3, #48	; 0x30
 801483c:	f7ff ff72 	bl	8014724 <__multadd>
 8014840:	e7ee      	b.n	8014820 <__s2b+0x68>
 8014842:	bf00      	nop
 8014844:	08015e24 	.word	0x08015e24
 8014848:	08015eb4 	.word	0x08015eb4

0801484c <__hi0bits>:
 801484c:	0c02      	lsrs	r2, r0, #16
 801484e:	0412      	lsls	r2, r2, #16
 8014850:	4603      	mov	r3, r0
 8014852:	b9ca      	cbnz	r2, 8014888 <__hi0bits+0x3c>
 8014854:	0403      	lsls	r3, r0, #16
 8014856:	2010      	movs	r0, #16
 8014858:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801485c:	bf04      	itt	eq
 801485e:	021b      	lsleq	r3, r3, #8
 8014860:	3008      	addeq	r0, #8
 8014862:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014866:	bf04      	itt	eq
 8014868:	011b      	lsleq	r3, r3, #4
 801486a:	3004      	addeq	r0, #4
 801486c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014870:	bf04      	itt	eq
 8014872:	009b      	lsleq	r3, r3, #2
 8014874:	3002      	addeq	r0, #2
 8014876:	2b00      	cmp	r3, #0
 8014878:	db05      	blt.n	8014886 <__hi0bits+0x3a>
 801487a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801487e:	f100 0001 	add.w	r0, r0, #1
 8014882:	bf08      	it	eq
 8014884:	2020      	moveq	r0, #32
 8014886:	4770      	bx	lr
 8014888:	2000      	movs	r0, #0
 801488a:	e7e5      	b.n	8014858 <__hi0bits+0xc>

0801488c <__lo0bits>:
 801488c:	6803      	ldr	r3, [r0, #0]
 801488e:	4602      	mov	r2, r0
 8014890:	f013 0007 	ands.w	r0, r3, #7
 8014894:	d00b      	beq.n	80148ae <__lo0bits+0x22>
 8014896:	07d9      	lsls	r1, r3, #31
 8014898:	d422      	bmi.n	80148e0 <__lo0bits+0x54>
 801489a:	0798      	lsls	r0, r3, #30
 801489c:	bf49      	itett	mi
 801489e:	085b      	lsrmi	r3, r3, #1
 80148a0:	089b      	lsrpl	r3, r3, #2
 80148a2:	2001      	movmi	r0, #1
 80148a4:	6013      	strmi	r3, [r2, #0]
 80148a6:	bf5c      	itt	pl
 80148a8:	2002      	movpl	r0, #2
 80148aa:	6013      	strpl	r3, [r2, #0]
 80148ac:	4770      	bx	lr
 80148ae:	b299      	uxth	r1, r3
 80148b0:	b909      	cbnz	r1, 80148b6 <__lo0bits+0x2a>
 80148b2:	2010      	movs	r0, #16
 80148b4:	0c1b      	lsrs	r3, r3, #16
 80148b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80148ba:	bf04      	itt	eq
 80148bc:	0a1b      	lsreq	r3, r3, #8
 80148be:	3008      	addeq	r0, #8
 80148c0:	0719      	lsls	r1, r3, #28
 80148c2:	bf04      	itt	eq
 80148c4:	091b      	lsreq	r3, r3, #4
 80148c6:	3004      	addeq	r0, #4
 80148c8:	0799      	lsls	r1, r3, #30
 80148ca:	bf04      	itt	eq
 80148cc:	089b      	lsreq	r3, r3, #2
 80148ce:	3002      	addeq	r0, #2
 80148d0:	07d9      	lsls	r1, r3, #31
 80148d2:	d403      	bmi.n	80148dc <__lo0bits+0x50>
 80148d4:	085b      	lsrs	r3, r3, #1
 80148d6:	f100 0001 	add.w	r0, r0, #1
 80148da:	d003      	beq.n	80148e4 <__lo0bits+0x58>
 80148dc:	6013      	str	r3, [r2, #0]
 80148de:	4770      	bx	lr
 80148e0:	2000      	movs	r0, #0
 80148e2:	4770      	bx	lr
 80148e4:	2020      	movs	r0, #32
 80148e6:	4770      	bx	lr

080148e8 <__i2b>:
 80148e8:	b510      	push	{r4, lr}
 80148ea:	460c      	mov	r4, r1
 80148ec:	2101      	movs	r1, #1
 80148ee:	f7ff feb7 	bl	8014660 <_Balloc>
 80148f2:	4602      	mov	r2, r0
 80148f4:	b928      	cbnz	r0, 8014902 <__i2b+0x1a>
 80148f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80148fa:	4b04      	ldr	r3, [pc, #16]	; (801490c <__i2b+0x24>)
 80148fc:	4804      	ldr	r0, [pc, #16]	; (8014910 <__i2b+0x28>)
 80148fe:	f000 fd09 	bl	8015314 <__assert_func>
 8014902:	2301      	movs	r3, #1
 8014904:	6144      	str	r4, [r0, #20]
 8014906:	6103      	str	r3, [r0, #16]
 8014908:	bd10      	pop	{r4, pc}
 801490a:	bf00      	nop
 801490c:	08015e24 	.word	0x08015e24
 8014910:	08015eb4 	.word	0x08015eb4

08014914 <__multiply>:
 8014914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014918:	4614      	mov	r4, r2
 801491a:	690a      	ldr	r2, [r1, #16]
 801491c:	6923      	ldr	r3, [r4, #16]
 801491e:	460d      	mov	r5, r1
 8014920:	429a      	cmp	r2, r3
 8014922:	bfbe      	ittt	lt
 8014924:	460b      	movlt	r3, r1
 8014926:	4625      	movlt	r5, r4
 8014928:	461c      	movlt	r4, r3
 801492a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801492e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014932:	68ab      	ldr	r3, [r5, #8]
 8014934:	6869      	ldr	r1, [r5, #4]
 8014936:	eb0a 0709 	add.w	r7, sl, r9
 801493a:	42bb      	cmp	r3, r7
 801493c:	b085      	sub	sp, #20
 801493e:	bfb8      	it	lt
 8014940:	3101      	addlt	r1, #1
 8014942:	f7ff fe8d 	bl	8014660 <_Balloc>
 8014946:	b930      	cbnz	r0, 8014956 <__multiply+0x42>
 8014948:	4602      	mov	r2, r0
 801494a:	f240 115d 	movw	r1, #349	; 0x15d
 801494e:	4b41      	ldr	r3, [pc, #260]	; (8014a54 <__multiply+0x140>)
 8014950:	4841      	ldr	r0, [pc, #260]	; (8014a58 <__multiply+0x144>)
 8014952:	f000 fcdf 	bl	8015314 <__assert_func>
 8014956:	f100 0614 	add.w	r6, r0, #20
 801495a:	4633      	mov	r3, r6
 801495c:	2200      	movs	r2, #0
 801495e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014962:	4543      	cmp	r3, r8
 8014964:	d31e      	bcc.n	80149a4 <__multiply+0x90>
 8014966:	f105 0c14 	add.w	ip, r5, #20
 801496a:	f104 0314 	add.w	r3, r4, #20
 801496e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014972:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014976:	9202      	str	r2, [sp, #8]
 8014978:	ebac 0205 	sub.w	r2, ip, r5
 801497c:	3a15      	subs	r2, #21
 801497e:	f022 0203 	bic.w	r2, r2, #3
 8014982:	3204      	adds	r2, #4
 8014984:	f105 0115 	add.w	r1, r5, #21
 8014988:	458c      	cmp	ip, r1
 801498a:	bf38      	it	cc
 801498c:	2204      	movcc	r2, #4
 801498e:	9201      	str	r2, [sp, #4]
 8014990:	9a02      	ldr	r2, [sp, #8]
 8014992:	9303      	str	r3, [sp, #12]
 8014994:	429a      	cmp	r2, r3
 8014996:	d808      	bhi.n	80149aa <__multiply+0x96>
 8014998:	2f00      	cmp	r7, #0
 801499a:	dc55      	bgt.n	8014a48 <__multiply+0x134>
 801499c:	6107      	str	r7, [r0, #16]
 801499e:	b005      	add	sp, #20
 80149a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149a4:	f843 2b04 	str.w	r2, [r3], #4
 80149a8:	e7db      	b.n	8014962 <__multiply+0x4e>
 80149aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80149ae:	f1ba 0f00 	cmp.w	sl, #0
 80149b2:	d020      	beq.n	80149f6 <__multiply+0xe2>
 80149b4:	46b1      	mov	r9, r6
 80149b6:	2200      	movs	r2, #0
 80149b8:	f105 0e14 	add.w	lr, r5, #20
 80149bc:	f85e 4b04 	ldr.w	r4, [lr], #4
 80149c0:	f8d9 b000 	ldr.w	fp, [r9]
 80149c4:	b2a1      	uxth	r1, r4
 80149c6:	fa1f fb8b 	uxth.w	fp, fp
 80149ca:	fb0a b101 	mla	r1, sl, r1, fp
 80149ce:	4411      	add	r1, r2
 80149d0:	f8d9 2000 	ldr.w	r2, [r9]
 80149d4:	0c24      	lsrs	r4, r4, #16
 80149d6:	0c12      	lsrs	r2, r2, #16
 80149d8:	fb0a 2404 	mla	r4, sl, r4, r2
 80149dc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80149e0:	b289      	uxth	r1, r1
 80149e2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80149e6:	45f4      	cmp	ip, lr
 80149e8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80149ec:	f849 1b04 	str.w	r1, [r9], #4
 80149f0:	d8e4      	bhi.n	80149bc <__multiply+0xa8>
 80149f2:	9901      	ldr	r1, [sp, #4]
 80149f4:	5072      	str	r2, [r6, r1]
 80149f6:	9a03      	ldr	r2, [sp, #12]
 80149f8:	3304      	adds	r3, #4
 80149fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80149fe:	f1b9 0f00 	cmp.w	r9, #0
 8014a02:	d01f      	beq.n	8014a44 <__multiply+0x130>
 8014a04:	46b6      	mov	lr, r6
 8014a06:	f04f 0a00 	mov.w	sl, #0
 8014a0a:	6834      	ldr	r4, [r6, #0]
 8014a0c:	f105 0114 	add.w	r1, r5, #20
 8014a10:	880a      	ldrh	r2, [r1, #0]
 8014a12:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014a16:	b2a4      	uxth	r4, r4
 8014a18:	fb09 b202 	mla	r2, r9, r2, fp
 8014a1c:	4492      	add	sl, r2
 8014a1e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014a22:	f84e 4b04 	str.w	r4, [lr], #4
 8014a26:	f851 4b04 	ldr.w	r4, [r1], #4
 8014a2a:	f8be 2000 	ldrh.w	r2, [lr]
 8014a2e:	0c24      	lsrs	r4, r4, #16
 8014a30:	fb09 2404 	mla	r4, r9, r4, r2
 8014a34:	458c      	cmp	ip, r1
 8014a36:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014a3a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014a3e:	d8e7      	bhi.n	8014a10 <__multiply+0xfc>
 8014a40:	9a01      	ldr	r2, [sp, #4]
 8014a42:	50b4      	str	r4, [r6, r2]
 8014a44:	3604      	adds	r6, #4
 8014a46:	e7a3      	b.n	8014990 <__multiply+0x7c>
 8014a48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d1a5      	bne.n	801499c <__multiply+0x88>
 8014a50:	3f01      	subs	r7, #1
 8014a52:	e7a1      	b.n	8014998 <__multiply+0x84>
 8014a54:	08015e24 	.word	0x08015e24
 8014a58:	08015eb4 	.word	0x08015eb4

08014a5c <__pow5mult>:
 8014a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a60:	4615      	mov	r5, r2
 8014a62:	f012 0203 	ands.w	r2, r2, #3
 8014a66:	4606      	mov	r6, r0
 8014a68:	460f      	mov	r7, r1
 8014a6a:	d007      	beq.n	8014a7c <__pow5mult+0x20>
 8014a6c:	4c25      	ldr	r4, [pc, #148]	; (8014b04 <__pow5mult+0xa8>)
 8014a6e:	3a01      	subs	r2, #1
 8014a70:	2300      	movs	r3, #0
 8014a72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014a76:	f7ff fe55 	bl	8014724 <__multadd>
 8014a7a:	4607      	mov	r7, r0
 8014a7c:	10ad      	asrs	r5, r5, #2
 8014a7e:	d03d      	beq.n	8014afc <__pow5mult+0xa0>
 8014a80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014a82:	b97c      	cbnz	r4, 8014aa4 <__pow5mult+0x48>
 8014a84:	2010      	movs	r0, #16
 8014a86:	f7fc fc1d 	bl	80112c4 <malloc>
 8014a8a:	4602      	mov	r2, r0
 8014a8c:	6270      	str	r0, [r6, #36]	; 0x24
 8014a8e:	b928      	cbnz	r0, 8014a9c <__pow5mult+0x40>
 8014a90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014a94:	4b1c      	ldr	r3, [pc, #112]	; (8014b08 <__pow5mult+0xac>)
 8014a96:	481d      	ldr	r0, [pc, #116]	; (8014b0c <__pow5mult+0xb0>)
 8014a98:	f000 fc3c 	bl	8015314 <__assert_func>
 8014a9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014aa0:	6004      	str	r4, [r0, #0]
 8014aa2:	60c4      	str	r4, [r0, #12]
 8014aa4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014aa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014aac:	b94c      	cbnz	r4, 8014ac2 <__pow5mult+0x66>
 8014aae:	f240 2171 	movw	r1, #625	; 0x271
 8014ab2:	4630      	mov	r0, r6
 8014ab4:	f7ff ff18 	bl	80148e8 <__i2b>
 8014ab8:	2300      	movs	r3, #0
 8014aba:	4604      	mov	r4, r0
 8014abc:	f8c8 0008 	str.w	r0, [r8, #8]
 8014ac0:	6003      	str	r3, [r0, #0]
 8014ac2:	f04f 0900 	mov.w	r9, #0
 8014ac6:	07eb      	lsls	r3, r5, #31
 8014ac8:	d50a      	bpl.n	8014ae0 <__pow5mult+0x84>
 8014aca:	4639      	mov	r1, r7
 8014acc:	4622      	mov	r2, r4
 8014ace:	4630      	mov	r0, r6
 8014ad0:	f7ff ff20 	bl	8014914 <__multiply>
 8014ad4:	4680      	mov	r8, r0
 8014ad6:	4639      	mov	r1, r7
 8014ad8:	4630      	mov	r0, r6
 8014ada:	f7ff fe01 	bl	80146e0 <_Bfree>
 8014ade:	4647      	mov	r7, r8
 8014ae0:	106d      	asrs	r5, r5, #1
 8014ae2:	d00b      	beq.n	8014afc <__pow5mult+0xa0>
 8014ae4:	6820      	ldr	r0, [r4, #0]
 8014ae6:	b938      	cbnz	r0, 8014af8 <__pow5mult+0x9c>
 8014ae8:	4622      	mov	r2, r4
 8014aea:	4621      	mov	r1, r4
 8014aec:	4630      	mov	r0, r6
 8014aee:	f7ff ff11 	bl	8014914 <__multiply>
 8014af2:	6020      	str	r0, [r4, #0]
 8014af4:	f8c0 9000 	str.w	r9, [r0]
 8014af8:	4604      	mov	r4, r0
 8014afa:	e7e4      	b.n	8014ac6 <__pow5mult+0x6a>
 8014afc:	4638      	mov	r0, r7
 8014afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b02:	bf00      	nop
 8014b04:	08016008 	.word	0x08016008
 8014b08:	08015dae 	.word	0x08015dae
 8014b0c:	08015eb4 	.word	0x08015eb4

08014b10 <__lshift>:
 8014b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b14:	460c      	mov	r4, r1
 8014b16:	4607      	mov	r7, r0
 8014b18:	4691      	mov	r9, r2
 8014b1a:	6923      	ldr	r3, [r4, #16]
 8014b1c:	6849      	ldr	r1, [r1, #4]
 8014b1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014b22:	68a3      	ldr	r3, [r4, #8]
 8014b24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014b28:	f108 0601 	add.w	r6, r8, #1
 8014b2c:	42b3      	cmp	r3, r6
 8014b2e:	db0b      	blt.n	8014b48 <__lshift+0x38>
 8014b30:	4638      	mov	r0, r7
 8014b32:	f7ff fd95 	bl	8014660 <_Balloc>
 8014b36:	4605      	mov	r5, r0
 8014b38:	b948      	cbnz	r0, 8014b4e <__lshift+0x3e>
 8014b3a:	4602      	mov	r2, r0
 8014b3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014b40:	4b27      	ldr	r3, [pc, #156]	; (8014be0 <__lshift+0xd0>)
 8014b42:	4828      	ldr	r0, [pc, #160]	; (8014be4 <__lshift+0xd4>)
 8014b44:	f000 fbe6 	bl	8015314 <__assert_func>
 8014b48:	3101      	adds	r1, #1
 8014b4a:	005b      	lsls	r3, r3, #1
 8014b4c:	e7ee      	b.n	8014b2c <__lshift+0x1c>
 8014b4e:	2300      	movs	r3, #0
 8014b50:	f100 0114 	add.w	r1, r0, #20
 8014b54:	f100 0210 	add.w	r2, r0, #16
 8014b58:	4618      	mov	r0, r3
 8014b5a:	4553      	cmp	r3, sl
 8014b5c:	db33      	blt.n	8014bc6 <__lshift+0xb6>
 8014b5e:	6920      	ldr	r0, [r4, #16]
 8014b60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014b64:	f104 0314 	add.w	r3, r4, #20
 8014b68:	f019 091f 	ands.w	r9, r9, #31
 8014b6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014b70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014b74:	d02b      	beq.n	8014bce <__lshift+0xbe>
 8014b76:	468a      	mov	sl, r1
 8014b78:	2200      	movs	r2, #0
 8014b7a:	f1c9 0e20 	rsb	lr, r9, #32
 8014b7e:	6818      	ldr	r0, [r3, #0]
 8014b80:	fa00 f009 	lsl.w	r0, r0, r9
 8014b84:	4302      	orrs	r2, r0
 8014b86:	f84a 2b04 	str.w	r2, [sl], #4
 8014b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b8e:	459c      	cmp	ip, r3
 8014b90:	fa22 f20e 	lsr.w	r2, r2, lr
 8014b94:	d8f3      	bhi.n	8014b7e <__lshift+0x6e>
 8014b96:	ebac 0304 	sub.w	r3, ip, r4
 8014b9a:	3b15      	subs	r3, #21
 8014b9c:	f023 0303 	bic.w	r3, r3, #3
 8014ba0:	3304      	adds	r3, #4
 8014ba2:	f104 0015 	add.w	r0, r4, #21
 8014ba6:	4584      	cmp	ip, r0
 8014ba8:	bf38      	it	cc
 8014baa:	2304      	movcc	r3, #4
 8014bac:	50ca      	str	r2, [r1, r3]
 8014bae:	b10a      	cbz	r2, 8014bb4 <__lshift+0xa4>
 8014bb0:	f108 0602 	add.w	r6, r8, #2
 8014bb4:	3e01      	subs	r6, #1
 8014bb6:	4638      	mov	r0, r7
 8014bb8:	4621      	mov	r1, r4
 8014bba:	612e      	str	r6, [r5, #16]
 8014bbc:	f7ff fd90 	bl	80146e0 <_Bfree>
 8014bc0:	4628      	mov	r0, r5
 8014bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8014bca:	3301      	adds	r3, #1
 8014bcc:	e7c5      	b.n	8014b5a <__lshift+0x4a>
 8014bce:	3904      	subs	r1, #4
 8014bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bd4:	459c      	cmp	ip, r3
 8014bd6:	f841 2f04 	str.w	r2, [r1, #4]!
 8014bda:	d8f9      	bhi.n	8014bd0 <__lshift+0xc0>
 8014bdc:	e7ea      	b.n	8014bb4 <__lshift+0xa4>
 8014bde:	bf00      	nop
 8014be0:	08015e24 	.word	0x08015e24
 8014be4:	08015eb4 	.word	0x08015eb4

08014be8 <__mcmp>:
 8014be8:	4603      	mov	r3, r0
 8014bea:	690a      	ldr	r2, [r1, #16]
 8014bec:	6900      	ldr	r0, [r0, #16]
 8014bee:	b530      	push	{r4, r5, lr}
 8014bf0:	1a80      	subs	r0, r0, r2
 8014bf2:	d10d      	bne.n	8014c10 <__mcmp+0x28>
 8014bf4:	3314      	adds	r3, #20
 8014bf6:	3114      	adds	r1, #20
 8014bf8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014bfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014c00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014c04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014c08:	4295      	cmp	r5, r2
 8014c0a:	d002      	beq.n	8014c12 <__mcmp+0x2a>
 8014c0c:	d304      	bcc.n	8014c18 <__mcmp+0x30>
 8014c0e:	2001      	movs	r0, #1
 8014c10:	bd30      	pop	{r4, r5, pc}
 8014c12:	42a3      	cmp	r3, r4
 8014c14:	d3f4      	bcc.n	8014c00 <__mcmp+0x18>
 8014c16:	e7fb      	b.n	8014c10 <__mcmp+0x28>
 8014c18:	f04f 30ff 	mov.w	r0, #4294967295
 8014c1c:	e7f8      	b.n	8014c10 <__mcmp+0x28>
	...

08014c20 <__mdiff>:
 8014c20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c24:	460c      	mov	r4, r1
 8014c26:	4606      	mov	r6, r0
 8014c28:	4611      	mov	r1, r2
 8014c2a:	4620      	mov	r0, r4
 8014c2c:	4692      	mov	sl, r2
 8014c2e:	f7ff ffdb 	bl	8014be8 <__mcmp>
 8014c32:	1e05      	subs	r5, r0, #0
 8014c34:	d111      	bne.n	8014c5a <__mdiff+0x3a>
 8014c36:	4629      	mov	r1, r5
 8014c38:	4630      	mov	r0, r6
 8014c3a:	f7ff fd11 	bl	8014660 <_Balloc>
 8014c3e:	4602      	mov	r2, r0
 8014c40:	b928      	cbnz	r0, 8014c4e <__mdiff+0x2e>
 8014c42:	f240 2132 	movw	r1, #562	; 0x232
 8014c46:	4b3c      	ldr	r3, [pc, #240]	; (8014d38 <__mdiff+0x118>)
 8014c48:	483c      	ldr	r0, [pc, #240]	; (8014d3c <__mdiff+0x11c>)
 8014c4a:	f000 fb63 	bl	8015314 <__assert_func>
 8014c4e:	2301      	movs	r3, #1
 8014c50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014c54:	4610      	mov	r0, r2
 8014c56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c5a:	bfa4      	itt	ge
 8014c5c:	4653      	movge	r3, sl
 8014c5e:	46a2      	movge	sl, r4
 8014c60:	4630      	mov	r0, r6
 8014c62:	f8da 1004 	ldr.w	r1, [sl, #4]
 8014c66:	bfa6      	itte	ge
 8014c68:	461c      	movge	r4, r3
 8014c6a:	2500      	movge	r5, #0
 8014c6c:	2501      	movlt	r5, #1
 8014c6e:	f7ff fcf7 	bl	8014660 <_Balloc>
 8014c72:	4602      	mov	r2, r0
 8014c74:	b918      	cbnz	r0, 8014c7e <__mdiff+0x5e>
 8014c76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014c7a:	4b2f      	ldr	r3, [pc, #188]	; (8014d38 <__mdiff+0x118>)
 8014c7c:	e7e4      	b.n	8014c48 <__mdiff+0x28>
 8014c7e:	f100 0814 	add.w	r8, r0, #20
 8014c82:	f8da 7010 	ldr.w	r7, [sl, #16]
 8014c86:	60c5      	str	r5, [r0, #12]
 8014c88:	f04f 0c00 	mov.w	ip, #0
 8014c8c:	f10a 0514 	add.w	r5, sl, #20
 8014c90:	f10a 0010 	add.w	r0, sl, #16
 8014c94:	46c2      	mov	sl, r8
 8014c96:	6926      	ldr	r6, [r4, #16]
 8014c98:	f104 0914 	add.w	r9, r4, #20
 8014c9c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8014ca0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014ca4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8014ca8:	f859 3b04 	ldr.w	r3, [r9], #4
 8014cac:	fa1f f18b 	uxth.w	r1, fp
 8014cb0:	4461      	add	r1, ip
 8014cb2:	fa1f fc83 	uxth.w	ip, r3
 8014cb6:	0c1b      	lsrs	r3, r3, #16
 8014cb8:	eba1 010c 	sub.w	r1, r1, ip
 8014cbc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014cc0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014cc4:	b289      	uxth	r1, r1
 8014cc6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8014cca:	454e      	cmp	r6, r9
 8014ccc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014cd0:	f84a 3b04 	str.w	r3, [sl], #4
 8014cd4:	d8e6      	bhi.n	8014ca4 <__mdiff+0x84>
 8014cd6:	1b33      	subs	r3, r6, r4
 8014cd8:	3b15      	subs	r3, #21
 8014cda:	f023 0303 	bic.w	r3, r3, #3
 8014cde:	3415      	adds	r4, #21
 8014ce0:	3304      	adds	r3, #4
 8014ce2:	42a6      	cmp	r6, r4
 8014ce4:	bf38      	it	cc
 8014ce6:	2304      	movcc	r3, #4
 8014ce8:	441d      	add	r5, r3
 8014cea:	4443      	add	r3, r8
 8014cec:	461e      	mov	r6, r3
 8014cee:	462c      	mov	r4, r5
 8014cf0:	4574      	cmp	r4, lr
 8014cf2:	d30e      	bcc.n	8014d12 <__mdiff+0xf2>
 8014cf4:	f10e 0103 	add.w	r1, lr, #3
 8014cf8:	1b49      	subs	r1, r1, r5
 8014cfa:	f021 0103 	bic.w	r1, r1, #3
 8014cfe:	3d03      	subs	r5, #3
 8014d00:	45ae      	cmp	lr, r5
 8014d02:	bf38      	it	cc
 8014d04:	2100      	movcc	r1, #0
 8014d06:	4419      	add	r1, r3
 8014d08:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8014d0c:	b18b      	cbz	r3, 8014d32 <__mdiff+0x112>
 8014d0e:	6117      	str	r7, [r2, #16]
 8014d10:	e7a0      	b.n	8014c54 <__mdiff+0x34>
 8014d12:	f854 8b04 	ldr.w	r8, [r4], #4
 8014d16:	fa1f f188 	uxth.w	r1, r8
 8014d1a:	4461      	add	r1, ip
 8014d1c:	1408      	asrs	r0, r1, #16
 8014d1e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8014d22:	b289      	uxth	r1, r1
 8014d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014d28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014d2c:	f846 1b04 	str.w	r1, [r6], #4
 8014d30:	e7de      	b.n	8014cf0 <__mdiff+0xd0>
 8014d32:	3f01      	subs	r7, #1
 8014d34:	e7e8      	b.n	8014d08 <__mdiff+0xe8>
 8014d36:	bf00      	nop
 8014d38:	08015e24 	.word	0x08015e24
 8014d3c:	08015eb4 	.word	0x08015eb4

08014d40 <__ulp>:
 8014d40:	4b11      	ldr	r3, [pc, #68]	; (8014d88 <__ulp+0x48>)
 8014d42:	400b      	ands	r3, r1
 8014d44:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	dd02      	ble.n	8014d52 <__ulp+0x12>
 8014d4c:	2000      	movs	r0, #0
 8014d4e:	4619      	mov	r1, r3
 8014d50:	4770      	bx	lr
 8014d52:	425b      	negs	r3, r3
 8014d54:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8014d58:	f04f 0000 	mov.w	r0, #0
 8014d5c:	f04f 0100 	mov.w	r1, #0
 8014d60:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014d64:	da04      	bge.n	8014d70 <__ulp+0x30>
 8014d66:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014d6a:	fa43 f102 	asr.w	r1, r3, r2
 8014d6e:	4770      	bx	lr
 8014d70:	f1a2 0314 	sub.w	r3, r2, #20
 8014d74:	2b1e      	cmp	r3, #30
 8014d76:	bfd6      	itet	le
 8014d78:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8014d7c:	2301      	movgt	r3, #1
 8014d7e:	fa22 f303 	lsrle.w	r3, r2, r3
 8014d82:	4618      	mov	r0, r3
 8014d84:	4770      	bx	lr
 8014d86:	bf00      	nop
 8014d88:	7ff00000 	.word	0x7ff00000

08014d8c <__b2d>:
 8014d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d90:	6907      	ldr	r7, [r0, #16]
 8014d92:	f100 0914 	add.w	r9, r0, #20
 8014d96:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8014d9a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8014d9e:	f1a7 0804 	sub.w	r8, r7, #4
 8014da2:	4630      	mov	r0, r6
 8014da4:	f7ff fd52 	bl	801484c <__hi0bits>
 8014da8:	f1c0 0320 	rsb	r3, r0, #32
 8014dac:	280a      	cmp	r0, #10
 8014dae:	600b      	str	r3, [r1, #0]
 8014db0:	491f      	ldr	r1, [pc, #124]	; (8014e30 <__b2d+0xa4>)
 8014db2:	dc17      	bgt.n	8014de4 <__b2d+0x58>
 8014db4:	45c1      	cmp	r9, r8
 8014db6:	bf28      	it	cs
 8014db8:	2200      	movcs	r2, #0
 8014dba:	f1c0 0c0b 	rsb	ip, r0, #11
 8014dbe:	fa26 f30c 	lsr.w	r3, r6, ip
 8014dc2:	bf38      	it	cc
 8014dc4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8014dc8:	ea43 0501 	orr.w	r5, r3, r1
 8014dcc:	f100 0315 	add.w	r3, r0, #21
 8014dd0:	fa06 f303 	lsl.w	r3, r6, r3
 8014dd4:	fa22 f20c 	lsr.w	r2, r2, ip
 8014dd8:	ea43 0402 	orr.w	r4, r3, r2
 8014ddc:	4620      	mov	r0, r4
 8014dde:	4629      	mov	r1, r5
 8014de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014de4:	45c1      	cmp	r9, r8
 8014de6:	bf2e      	itee	cs
 8014de8:	2200      	movcs	r2, #0
 8014dea:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8014dee:	f1a7 0808 	subcc.w	r8, r7, #8
 8014df2:	f1b0 030b 	subs.w	r3, r0, #11
 8014df6:	d016      	beq.n	8014e26 <__b2d+0x9a>
 8014df8:	f1c3 0720 	rsb	r7, r3, #32
 8014dfc:	fa22 f107 	lsr.w	r1, r2, r7
 8014e00:	45c8      	cmp	r8, r9
 8014e02:	fa06 f603 	lsl.w	r6, r6, r3
 8014e06:	ea46 0601 	orr.w	r6, r6, r1
 8014e0a:	bf94      	ite	ls
 8014e0c:	2100      	movls	r1, #0
 8014e0e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8014e12:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8014e16:	fa02 f003 	lsl.w	r0, r2, r3
 8014e1a:	40f9      	lsrs	r1, r7
 8014e1c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014e20:	ea40 0401 	orr.w	r4, r0, r1
 8014e24:	e7da      	b.n	8014ddc <__b2d+0x50>
 8014e26:	4614      	mov	r4, r2
 8014e28:	ea46 0501 	orr.w	r5, r6, r1
 8014e2c:	e7d6      	b.n	8014ddc <__b2d+0x50>
 8014e2e:	bf00      	nop
 8014e30:	3ff00000 	.word	0x3ff00000

08014e34 <__d2b>:
 8014e34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014e38:	2101      	movs	r1, #1
 8014e3a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8014e3e:	4690      	mov	r8, r2
 8014e40:	461d      	mov	r5, r3
 8014e42:	f7ff fc0d 	bl	8014660 <_Balloc>
 8014e46:	4604      	mov	r4, r0
 8014e48:	b930      	cbnz	r0, 8014e58 <__d2b+0x24>
 8014e4a:	4602      	mov	r2, r0
 8014e4c:	f240 310a 	movw	r1, #778	; 0x30a
 8014e50:	4b24      	ldr	r3, [pc, #144]	; (8014ee4 <__d2b+0xb0>)
 8014e52:	4825      	ldr	r0, [pc, #148]	; (8014ee8 <__d2b+0xb4>)
 8014e54:	f000 fa5e 	bl	8015314 <__assert_func>
 8014e58:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8014e5c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8014e60:	bb2d      	cbnz	r5, 8014eae <__d2b+0x7a>
 8014e62:	9301      	str	r3, [sp, #4]
 8014e64:	f1b8 0300 	subs.w	r3, r8, #0
 8014e68:	d026      	beq.n	8014eb8 <__d2b+0x84>
 8014e6a:	4668      	mov	r0, sp
 8014e6c:	9300      	str	r3, [sp, #0]
 8014e6e:	f7ff fd0d 	bl	801488c <__lo0bits>
 8014e72:	9900      	ldr	r1, [sp, #0]
 8014e74:	b1f0      	cbz	r0, 8014eb4 <__d2b+0x80>
 8014e76:	9a01      	ldr	r2, [sp, #4]
 8014e78:	f1c0 0320 	rsb	r3, r0, #32
 8014e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8014e80:	430b      	orrs	r3, r1
 8014e82:	40c2      	lsrs	r2, r0
 8014e84:	6163      	str	r3, [r4, #20]
 8014e86:	9201      	str	r2, [sp, #4]
 8014e88:	9b01      	ldr	r3, [sp, #4]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	bf14      	ite	ne
 8014e8e:	2102      	movne	r1, #2
 8014e90:	2101      	moveq	r1, #1
 8014e92:	61a3      	str	r3, [r4, #24]
 8014e94:	6121      	str	r1, [r4, #16]
 8014e96:	b1c5      	cbz	r5, 8014eca <__d2b+0x96>
 8014e98:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014e9c:	4405      	add	r5, r0
 8014e9e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014ea2:	603d      	str	r5, [r7, #0]
 8014ea4:	6030      	str	r0, [r6, #0]
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	b002      	add	sp, #8
 8014eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014eb2:	e7d6      	b.n	8014e62 <__d2b+0x2e>
 8014eb4:	6161      	str	r1, [r4, #20]
 8014eb6:	e7e7      	b.n	8014e88 <__d2b+0x54>
 8014eb8:	a801      	add	r0, sp, #4
 8014eba:	f7ff fce7 	bl	801488c <__lo0bits>
 8014ebe:	2101      	movs	r1, #1
 8014ec0:	9b01      	ldr	r3, [sp, #4]
 8014ec2:	6121      	str	r1, [r4, #16]
 8014ec4:	6163      	str	r3, [r4, #20]
 8014ec6:	3020      	adds	r0, #32
 8014ec8:	e7e5      	b.n	8014e96 <__d2b+0x62>
 8014eca:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8014ece:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014ed2:	6038      	str	r0, [r7, #0]
 8014ed4:	6918      	ldr	r0, [r3, #16]
 8014ed6:	f7ff fcb9 	bl	801484c <__hi0bits>
 8014eda:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8014ede:	6031      	str	r1, [r6, #0]
 8014ee0:	e7e1      	b.n	8014ea6 <__d2b+0x72>
 8014ee2:	bf00      	nop
 8014ee4:	08015e24 	.word	0x08015e24
 8014ee8:	08015eb4 	.word	0x08015eb4

08014eec <__ratio>:
 8014eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ef0:	4688      	mov	r8, r1
 8014ef2:	4669      	mov	r1, sp
 8014ef4:	4681      	mov	r9, r0
 8014ef6:	f7ff ff49 	bl	8014d8c <__b2d>
 8014efa:	460f      	mov	r7, r1
 8014efc:	4604      	mov	r4, r0
 8014efe:	460d      	mov	r5, r1
 8014f00:	4640      	mov	r0, r8
 8014f02:	a901      	add	r1, sp, #4
 8014f04:	f7ff ff42 	bl	8014d8c <__b2d>
 8014f08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014f0c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014f10:	468b      	mov	fp, r1
 8014f12:	eba3 0c02 	sub.w	ip, r3, r2
 8014f16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014f1a:	1a9b      	subs	r3, r3, r2
 8014f1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	bfd5      	itete	le
 8014f24:	460a      	movle	r2, r1
 8014f26:	462a      	movgt	r2, r5
 8014f28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014f2c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014f30:	bfd8      	it	le
 8014f32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014f36:	465b      	mov	r3, fp
 8014f38:	4602      	mov	r2, r0
 8014f3a:	4639      	mov	r1, r7
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	f7eb fc3f 	bl	80007c0 <__aeabi_ddiv>
 8014f42:	b003      	add	sp, #12
 8014f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f48 <__copybits>:
 8014f48:	3901      	subs	r1, #1
 8014f4a:	b570      	push	{r4, r5, r6, lr}
 8014f4c:	1149      	asrs	r1, r1, #5
 8014f4e:	6914      	ldr	r4, [r2, #16]
 8014f50:	3101      	adds	r1, #1
 8014f52:	f102 0314 	add.w	r3, r2, #20
 8014f56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014f5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014f5e:	1f05      	subs	r5, r0, #4
 8014f60:	42a3      	cmp	r3, r4
 8014f62:	d30c      	bcc.n	8014f7e <__copybits+0x36>
 8014f64:	1aa3      	subs	r3, r4, r2
 8014f66:	3b11      	subs	r3, #17
 8014f68:	f023 0303 	bic.w	r3, r3, #3
 8014f6c:	3211      	adds	r2, #17
 8014f6e:	42a2      	cmp	r2, r4
 8014f70:	bf88      	it	hi
 8014f72:	2300      	movhi	r3, #0
 8014f74:	4418      	add	r0, r3
 8014f76:	2300      	movs	r3, #0
 8014f78:	4288      	cmp	r0, r1
 8014f7a:	d305      	bcc.n	8014f88 <__copybits+0x40>
 8014f7c:	bd70      	pop	{r4, r5, r6, pc}
 8014f7e:	f853 6b04 	ldr.w	r6, [r3], #4
 8014f82:	f845 6f04 	str.w	r6, [r5, #4]!
 8014f86:	e7eb      	b.n	8014f60 <__copybits+0x18>
 8014f88:	f840 3b04 	str.w	r3, [r0], #4
 8014f8c:	e7f4      	b.n	8014f78 <__copybits+0x30>

08014f8e <__any_on>:
 8014f8e:	f100 0214 	add.w	r2, r0, #20
 8014f92:	6900      	ldr	r0, [r0, #16]
 8014f94:	114b      	asrs	r3, r1, #5
 8014f96:	4298      	cmp	r0, r3
 8014f98:	b510      	push	{r4, lr}
 8014f9a:	db11      	blt.n	8014fc0 <__any_on+0x32>
 8014f9c:	dd0a      	ble.n	8014fb4 <__any_on+0x26>
 8014f9e:	f011 011f 	ands.w	r1, r1, #31
 8014fa2:	d007      	beq.n	8014fb4 <__any_on+0x26>
 8014fa4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014fa8:	fa24 f001 	lsr.w	r0, r4, r1
 8014fac:	fa00 f101 	lsl.w	r1, r0, r1
 8014fb0:	428c      	cmp	r4, r1
 8014fb2:	d10b      	bne.n	8014fcc <__any_on+0x3e>
 8014fb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014fb8:	4293      	cmp	r3, r2
 8014fba:	d803      	bhi.n	8014fc4 <__any_on+0x36>
 8014fbc:	2000      	movs	r0, #0
 8014fbe:	bd10      	pop	{r4, pc}
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	e7f7      	b.n	8014fb4 <__any_on+0x26>
 8014fc4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014fc8:	2900      	cmp	r1, #0
 8014fca:	d0f5      	beq.n	8014fb8 <__any_on+0x2a>
 8014fcc:	2001      	movs	r0, #1
 8014fce:	e7f6      	b.n	8014fbe <__any_on+0x30>

08014fd0 <_calloc_r>:
 8014fd0:	b538      	push	{r3, r4, r5, lr}
 8014fd2:	fb02 f501 	mul.w	r5, r2, r1
 8014fd6:	4629      	mov	r1, r5
 8014fd8:	f7fc f9e6 	bl	80113a8 <_malloc_r>
 8014fdc:	4604      	mov	r4, r0
 8014fde:	b118      	cbz	r0, 8014fe8 <_calloc_r+0x18>
 8014fe0:	462a      	mov	r2, r5
 8014fe2:	2100      	movs	r1, #0
 8014fe4:	f7fc f98c 	bl	8011300 <memset>
 8014fe8:	4620      	mov	r0, r4
 8014fea:	bd38      	pop	{r3, r4, r5, pc}

08014fec <__ssputs_r>:
 8014fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ff0:	688e      	ldr	r6, [r1, #8]
 8014ff2:	4682      	mov	sl, r0
 8014ff4:	429e      	cmp	r6, r3
 8014ff6:	460c      	mov	r4, r1
 8014ff8:	4690      	mov	r8, r2
 8014ffa:	461f      	mov	r7, r3
 8014ffc:	d838      	bhi.n	8015070 <__ssputs_r+0x84>
 8014ffe:	898a      	ldrh	r2, [r1, #12]
 8015000:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015004:	d032      	beq.n	801506c <__ssputs_r+0x80>
 8015006:	6825      	ldr	r5, [r4, #0]
 8015008:	6909      	ldr	r1, [r1, #16]
 801500a:	3301      	adds	r3, #1
 801500c:	eba5 0901 	sub.w	r9, r5, r1
 8015010:	6965      	ldr	r5, [r4, #20]
 8015012:	444b      	add	r3, r9
 8015014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015018:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801501c:	106d      	asrs	r5, r5, #1
 801501e:	429d      	cmp	r5, r3
 8015020:	bf38      	it	cc
 8015022:	461d      	movcc	r5, r3
 8015024:	0553      	lsls	r3, r2, #21
 8015026:	d531      	bpl.n	801508c <__ssputs_r+0xa0>
 8015028:	4629      	mov	r1, r5
 801502a:	f7fc f9bd 	bl	80113a8 <_malloc_r>
 801502e:	4606      	mov	r6, r0
 8015030:	b950      	cbnz	r0, 8015048 <__ssputs_r+0x5c>
 8015032:	230c      	movs	r3, #12
 8015034:	f04f 30ff 	mov.w	r0, #4294967295
 8015038:	f8ca 3000 	str.w	r3, [sl]
 801503c:	89a3      	ldrh	r3, [r4, #12]
 801503e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015042:	81a3      	strh	r3, [r4, #12]
 8015044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015048:	464a      	mov	r2, r9
 801504a:	6921      	ldr	r1, [r4, #16]
 801504c:	f7fc f94a 	bl	80112e4 <memcpy>
 8015050:	89a3      	ldrh	r3, [r4, #12]
 8015052:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801505a:	81a3      	strh	r3, [r4, #12]
 801505c:	6126      	str	r6, [r4, #16]
 801505e:	444e      	add	r6, r9
 8015060:	6026      	str	r6, [r4, #0]
 8015062:	463e      	mov	r6, r7
 8015064:	6165      	str	r5, [r4, #20]
 8015066:	eba5 0509 	sub.w	r5, r5, r9
 801506a:	60a5      	str	r5, [r4, #8]
 801506c:	42be      	cmp	r6, r7
 801506e:	d900      	bls.n	8015072 <__ssputs_r+0x86>
 8015070:	463e      	mov	r6, r7
 8015072:	4632      	mov	r2, r6
 8015074:	4641      	mov	r1, r8
 8015076:	6820      	ldr	r0, [r4, #0]
 8015078:	f000 f97c 	bl	8015374 <memmove>
 801507c:	68a3      	ldr	r3, [r4, #8]
 801507e:	6822      	ldr	r2, [r4, #0]
 8015080:	1b9b      	subs	r3, r3, r6
 8015082:	4432      	add	r2, r6
 8015084:	2000      	movs	r0, #0
 8015086:	60a3      	str	r3, [r4, #8]
 8015088:	6022      	str	r2, [r4, #0]
 801508a:	e7db      	b.n	8015044 <__ssputs_r+0x58>
 801508c:	462a      	mov	r2, r5
 801508e:	f000 f98b 	bl	80153a8 <_realloc_r>
 8015092:	4606      	mov	r6, r0
 8015094:	2800      	cmp	r0, #0
 8015096:	d1e1      	bne.n	801505c <__ssputs_r+0x70>
 8015098:	4650      	mov	r0, sl
 801509a:	6921      	ldr	r1, [r4, #16]
 801509c:	f7fc f938 	bl	8011310 <_free_r>
 80150a0:	e7c7      	b.n	8015032 <__ssputs_r+0x46>
	...

080150a4 <_svfiprintf_r>:
 80150a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150a8:	4698      	mov	r8, r3
 80150aa:	898b      	ldrh	r3, [r1, #12]
 80150ac:	4607      	mov	r7, r0
 80150ae:	061b      	lsls	r3, r3, #24
 80150b0:	460d      	mov	r5, r1
 80150b2:	4614      	mov	r4, r2
 80150b4:	b09d      	sub	sp, #116	; 0x74
 80150b6:	d50e      	bpl.n	80150d6 <_svfiprintf_r+0x32>
 80150b8:	690b      	ldr	r3, [r1, #16]
 80150ba:	b963      	cbnz	r3, 80150d6 <_svfiprintf_r+0x32>
 80150bc:	2140      	movs	r1, #64	; 0x40
 80150be:	f7fc f973 	bl	80113a8 <_malloc_r>
 80150c2:	6028      	str	r0, [r5, #0]
 80150c4:	6128      	str	r0, [r5, #16]
 80150c6:	b920      	cbnz	r0, 80150d2 <_svfiprintf_r+0x2e>
 80150c8:	230c      	movs	r3, #12
 80150ca:	603b      	str	r3, [r7, #0]
 80150cc:	f04f 30ff 	mov.w	r0, #4294967295
 80150d0:	e0d1      	b.n	8015276 <_svfiprintf_r+0x1d2>
 80150d2:	2340      	movs	r3, #64	; 0x40
 80150d4:	616b      	str	r3, [r5, #20]
 80150d6:	2300      	movs	r3, #0
 80150d8:	9309      	str	r3, [sp, #36]	; 0x24
 80150da:	2320      	movs	r3, #32
 80150dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80150e0:	2330      	movs	r3, #48	; 0x30
 80150e2:	f04f 0901 	mov.w	r9, #1
 80150e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80150ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015290 <_svfiprintf_r+0x1ec>
 80150ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80150f2:	4623      	mov	r3, r4
 80150f4:	469a      	mov	sl, r3
 80150f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150fa:	b10a      	cbz	r2, 8015100 <_svfiprintf_r+0x5c>
 80150fc:	2a25      	cmp	r2, #37	; 0x25
 80150fe:	d1f9      	bne.n	80150f4 <_svfiprintf_r+0x50>
 8015100:	ebba 0b04 	subs.w	fp, sl, r4
 8015104:	d00b      	beq.n	801511e <_svfiprintf_r+0x7a>
 8015106:	465b      	mov	r3, fp
 8015108:	4622      	mov	r2, r4
 801510a:	4629      	mov	r1, r5
 801510c:	4638      	mov	r0, r7
 801510e:	f7ff ff6d 	bl	8014fec <__ssputs_r>
 8015112:	3001      	adds	r0, #1
 8015114:	f000 80aa 	beq.w	801526c <_svfiprintf_r+0x1c8>
 8015118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801511a:	445a      	add	r2, fp
 801511c:	9209      	str	r2, [sp, #36]	; 0x24
 801511e:	f89a 3000 	ldrb.w	r3, [sl]
 8015122:	2b00      	cmp	r3, #0
 8015124:	f000 80a2 	beq.w	801526c <_svfiprintf_r+0x1c8>
 8015128:	2300      	movs	r3, #0
 801512a:	f04f 32ff 	mov.w	r2, #4294967295
 801512e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015132:	f10a 0a01 	add.w	sl, sl, #1
 8015136:	9304      	str	r3, [sp, #16]
 8015138:	9307      	str	r3, [sp, #28]
 801513a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801513e:	931a      	str	r3, [sp, #104]	; 0x68
 8015140:	4654      	mov	r4, sl
 8015142:	2205      	movs	r2, #5
 8015144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015148:	4851      	ldr	r0, [pc, #324]	; (8015290 <_svfiprintf_r+0x1ec>)
 801514a:	f7ff fa6f 	bl	801462c <memchr>
 801514e:	9a04      	ldr	r2, [sp, #16]
 8015150:	b9d8      	cbnz	r0, 801518a <_svfiprintf_r+0xe6>
 8015152:	06d0      	lsls	r0, r2, #27
 8015154:	bf44      	itt	mi
 8015156:	2320      	movmi	r3, #32
 8015158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801515c:	0711      	lsls	r1, r2, #28
 801515e:	bf44      	itt	mi
 8015160:	232b      	movmi	r3, #43	; 0x2b
 8015162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015166:	f89a 3000 	ldrb.w	r3, [sl]
 801516a:	2b2a      	cmp	r3, #42	; 0x2a
 801516c:	d015      	beq.n	801519a <_svfiprintf_r+0xf6>
 801516e:	4654      	mov	r4, sl
 8015170:	2000      	movs	r0, #0
 8015172:	f04f 0c0a 	mov.w	ip, #10
 8015176:	9a07      	ldr	r2, [sp, #28]
 8015178:	4621      	mov	r1, r4
 801517a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801517e:	3b30      	subs	r3, #48	; 0x30
 8015180:	2b09      	cmp	r3, #9
 8015182:	d94e      	bls.n	8015222 <_svfiprintf_r+0x17e>
 8015184:	b1b0      	cbz	r0, 80151b4 <_svfiprintf_r+0x110>
 8015186:	9207      	str	r2, [sp, #28]
 8015188:	e014      	b.n	80151b4 <_svfiprintf_r+0x110>
 801518a:	eba0 0308 	sub.w	r3, r0, r8
 801518e:	fa09 f303 	lsl.w	r3, r9, r3
 8015192:	4313      	orrs	r3, r2
 8015194:	46a2      	mov	sl, r4
 8015196:	9304      	str	r3, [sp, #16]
 8015198:	e7d2      	b.n	8015140 <_svfiprintf_r+0x9c>
 801519a:	9b03      	ldr	r3, [sp, #12]
 801519c:	1d19      	adds	r1, r3, #4
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	9103      	str	r1, [sp, #12]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	bfbb      	ittet	lt
 80151a6:	425b      	neglt	r3, r3
 80151a8:	f042 0202 	orrlt.w	r2, r2, #2
 80151ac:	9307      	strge	r3, [sp, #28]
 80151ae:	9307      	strlt	r3, [sp, #28]
 80151b0:	bfb8      	it	lt
 80151b2:	9204      	strlt	r2, [sp, #16]
 80151b4:	7823      	ldrb	r3, [r4, #0]
 80151b6:	2b2e      	cmp	r3, #46	; 0x2e
 80151b8:	d10c      	bne.n	80151d4 <_svfiprintf_r+0x130>
 80151ba:	7863      	ldrb	r3, [r4, #1]
 80151bc:	2b2a      	cmp	r3, #42	; 0x2a
 80151be:	d135      	bne.n	801522c <_svfiprintf_r+0x188>
 80151c0:	9b03      	ldr	r3, [sp, #12]
 80151c2:	3402      	adds	r4, #2
 80151c4:	1d1a      	adds	r2, r3, #4
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	9203      	str	r2, [sp, #12]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	bfb8      	it	lt
 80151ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80151d2:	9305      	str	r3, [sp, #20]
 80151d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80152a0 <_svfiprintf_r+0x1fc>
 80151d8:	2203      	movs	r2, #3
 80151da:	4650      	mov	r0, sl
 80151dc:	7821      	ldrb	r1, [r4, #0]
 80151de:	f7ff fa25 	bl	801462c <memchr>
 80151e2:	b140      	cbz	r0, 80151f6 <_svfiprintf_r+0x152>
 80151e4:	2340      	movs	r3, #64	; 0x40
 80151e6:	eba0 000a 	sub.w	r0, r0, sl
 80151ea:	fa03 f000 	lsl.w	r0, r3, r0
 80151ee:	9b04      	ldr	r3, [sp, #16]
 80151f0:	3401      	adds	r4, #1
 80151f2:	4303      	orrs	r3, r0
 80151f4:	9304      	str	r3, [sp, #16]
 80151f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151fa:	2206      	movs	r2, #6
 80151fc:	4825      	ldr	r0, [pc, #148]	; (8015294 <_svfiprintf_r+0x1f0>)
 80151fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015202:	f7ff fa13 	bl	801462c <memchr>
 8015206:	2800      	cmp	r0, #0
 8015208:	d038      	beq.n	801527c <_svfiprintf_r+0x1d8>
 801520a:	4b23      	ldr	r3, [pc, #140]	; (8015298 <_svfiprintf_r+0x1f4>)
 801520c:	bb1b      	cbnz	r3, 8015256 <_svfiprintf_r+0x1b2>
 801520e:	9b03      	ldr	r3, [sp, #12]
 8015210:	3307      	adds	r3, #7
 8015212:	f023 0307 	bic.w	r3, r3, #7
 8015216:	3308      	adds	r3, #8
 8015218:	9303      	str	r3, [sp, #12]
 801521a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801521c:	4433      	add	r3, r6
 801521e:	9309      	str	r3, [sp, #36]	; 0x24
 8015220:	e767      	b.n	80150f2 <_svfiprintf_r+0x4e>
 8015222:	460c      	mov	r4, r1
 8015224:	2001      	movs	r0, #1
 8015226:	fb0c 3202 	mla	r2, ip, r2, r3
 801522a:	e7a5      	b.n	8015178 <_svfiprintf_r+0xd4>
 801522c:	2300      	movs	r3, #0
 801522e:	f04f 0c0a 	mov.w	ip, #10
 8015232:	4619      	mov	r1, r3
 8015234:	3401      	adds	r4, #1
 8015236:	9305      	str	r3, [sp, #20]
 8015238:	4620      	mov	r0, r4
 801523a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801523e:	3a30      	subs	r2, #48	; 0x30
 8015240:	2a09      	cmp	r2, #9
 8015242:	d903      	bls.n	801524c <_svfiprintf_r+0x1a8>
 8015244:	2b00      	cmp	r3, #0
 8015246:	d0c5      	beq.n	80151d4 <_svfiprintf_r+0x130>
 8015248:	9105      	str	r1, [sp, #20]
 801524a:	e7c3      	b.n	80151d4 <_svfiprintf_r+0x130>
 801524c:	4604      	mov	r4, r0
 801524e:	2301      	movs	r3, #1
 8015250:	fb0c 2101 	mla	r1, ip, r1, r2
 8015254:	e7f0      	b.n	8015238 <_svfiprintf_r+0x194>
 8015256:	ab03      	add	r3, sp, #12
 8015258:	9300      	str	r3, [sp, #0]
 801525a:	462a      	mov	r2, r5
 801525c:	4638      	mov	r0, r7
 801525e:	4b0f      	ldr	r3, [pc, #60]	; (801529c <_svfiprintf_r+0x1f8>)
 8015260:	a904      	add	r1, sp, #16
 8015262:	f7fc f999 	bl	8011598 <_printf_float>
 8015266:	1c42      	adds	r2, r0, #1
 8015268:	4606      	mov	r6, r0
 801526a:	d1d6      	bne.n	801521a <_svfiprintf_r+0x176>
 801526c:	89ab      	ldrh	r3, [r5, #12]
 801526e:	065b      	lsls	r3, r3, #25
 8015270:	f53f af2c 	bmi.w	80150cc <_svfiprintf_r+0x28>
 8015274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015276:	b01d      	add	sp, #116	; 0x74
 8015278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801527c:	ab03      	add	r3, sp, #12
 801527e:	9300      	str	r3, [sp, #0]
 8015280:	462a      	mov	r2, r5
 8015282:	4638      	mov	r0, r7
 8015284:	4b05      	ldr	r3, [pc, #20]	; (801529c <_svfiprintf_r+0x1f8>)
 8015286:	a904      	add	r1, sp, #16
 8015288:	f7fc fc22 	bl	8011ad0 <_printf_i>
 801528c:	e7eb      	b.n	8015266 <_svfiprintf_r+0x1c2>
 801528e:	bf00      	nop
 8015290:	08016014 	.word	0x08016014
 8015294:	0801601e 	.word	0x0801601e
 8015298:	08011599 	.word	0x08011599
 801529c:	08014fed 	.word	0x08014fed
 80152a0:	0801601a 	.word	0x0801601a

080152a4 <_read_r>:
 80152a4:	b538      	push	{r3, r4, r5, lr}
 80152a6:	4604      	mov	r4, r0
 80152a8:	4608      	mov	r0, r1
 80152aa:	4611      	mov	r1, r2
 80152ac:	2200      	movs	r2, #0
 80152ae:	4d05      	ldr	r5, [pc, #20]	; (80152c4 <_read_r+0x20>)
 80152b0:	602a      	str	r2, [r5, #0]
 80152b2:	461a      	mov	r2, r3
 80152b4:	f7ed fc85 	bl	8002bc2 <_read>
 80152b8:	1c43      	adds	r3, r0, #1
 80152ba:	d102      	bne.n	80152c2 <_read_r+0x1e>
 80152bc:	682b      	ldr	r3, [r5, #0]
 80152be:	b103      	cbz	r3, 80152c2 <_read_r+0x1e>
 80152c0:	6023      	str	r3, [r4, #0]
 80152c2:	bd38      	pop	{r3, r4, r5, pc}
 80152c4:	2000b5c0 	.word	0x2000b5c0

080152c8 <nan>:
 80152c8:	2000      	movs	r0, #0
 80152ca:	4901      	ldr	r1, [pc, #4]	; (80152d0 <nan+0x8>)
 80152cc:	4770      	bx	lr
 80152ce:	bf00      	nop
 80152d0:	7ff80000 	.word	0x7ff80000

080152d4 <strncmp>:
 80152d4:	b510      	push	{r4, lr}
 80152d6:	b16a      	cbz	r2, 80152f4 <strncmp+0x20>
 80152d8:	3901      	subs	r1, #1
 80152da:	1884      	adds	r4, r0, r2
 80152dc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80152e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80152e4:	4293      	cmp	r3, r2
 80152e6:	d103      	bne.n	80152f0 <strncmp+0x1c>
 80152e8:	42a0      	cmp	r0, r4
 80152ea:	d001      	beq.n	80152f0 <strncmp+0x1c>
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d1f5      	bne.n	80152dc <strncmp+0x8>
 80152f0:	1a98      	subs	r0, r3, r2
 80152f2:	bd10      	pop	{r4, pc}
 80152f4:	4610      	mov	r0, r2
 80152f6:	e7fc      	b.n	80152f2 <strncmp+0x1e>

080152f8 <__ascii_wctomb>:
 80152f8:	4603      	mov	r3, r0
 80152fa:	4608      	mov	r0, r1
 80152fc:	b141      	cbz	r1, 8015310 <__ascii_wctomb+0x18>
 80152fe:	2aff      	cmp	r2, #255	; 0xff
 8015300:	d904      	bls.n	801530c <__ascii_wctomb+0x14>
 8015302:	228a      	movs	r2, #138	; 0x8a
 8015304:	f04f 30ff 	mov.w	r0, #4294967295
 8015308:	601a      	str	r2, [r3, #0]
 801530a:	4770      	bx	lr
 801530c:	2001      	movs	r0, #1
 801530e:	700a      	strb	r2, [r1, #0]
 8015310:	4770      	bx	lr
	...

08015314 <__assert_func>:
 8015314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015316:	4614      	mov	r4, r2
 8015318:	461a      	mov	r2, r3
 801531a:	4b09      	ldr	r3, [pc, #36]	; (8015340 <__assert_func+0x2c>)
 801531c:	4605      	mov	r5, r0
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	68d8      	ldr	r0, [r3, #12]
 8015322:	b14c      	cbz	r4, 8015338 <__assert_func+0x24>
 8015324:	4b07      	ldr	r3, [pc, #28]	; (8015344 <__assert_func+0x30>)
 8015326:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801532a:	9100      	str	r1, [sp, #0]
 801532c:	462b      	mov	r3, r5
 801532e:	4906      	ldr	r1, [pc, #24]	; (8015348 <__assert_func+0x34>)
 8015330:	f000 f80e 	bl	8015350 <fiprintf>
 8015334:	f000 fa76 	bl	8015824 <abort>
 8015338:	4b04      	ldr	r3, [pc, #16]	; (801534c <__assert_func+0x38>)
 801533a:	461c      	mov	r4, r3
 801533c:	e7f3      	b.n	8015326 <__assert_func+0x12>
 801533e:	bf00      	nop
 8015340:	20000054 	.word	0x20000054
 8015344:	08016025 	.word	0x08016025
 8015348:	08016032 	.word	0x08016032
 801534c:	08016060 	.word	0x08016060

08015350 <fiprintf>:
 8015350:	b40e      	push	{r1, r2, r3}
 8015352:	b503      	push	{r0, r1, lr}
 8015354:	4601      	mov	r1, r0
 8015356:	ab03      	add	r3, sp, #12
 8015358:	4805      	ldr	r0, [pc, #20]	; (8015370 <fiprintf+0x20>)
 801535a:	f853 2b04 	ldr.w	r2, [r3], #4
 801535e:	6800      	ldr	r0, [r0, #0]
 8015360:	9301      	str	r3, [sp, #4]
 8015362:	f000 f86f 	bl	8015444 <_vfiprintf_r>
 8015366:	b002      	add	sp, #8
 8015368:	f85d eb04 	ldr.w	lr, [sp], #4
 801536c:	b003      	add	sp, #12
 801536e:	4770      	bx	lr
 8015370:	20000054 	.word	0x20000054

08015374 <memmove>:
 8015374:	4288      	cmp	r0, r1
 8015376:	b510      	push	{r4, lr}
 8015378:	eb01 0402 	add.w	r4, r1, r2
 801537c:	d902      	bls.n	8015384 <memmove+0x10>
 801537e:	4284      	cmp	r4, r0
 8015380:	4623      	mov	r3, r4
 8015382:	d807      	bhi.n	8015394 <memmove+0x20>
 8015384:	1e43      	subs	r3, r0, #1
 8015386:	42a1      	cmp	r1, r4
 8015388:	d008      	beq.n	801539c <memmove+0x28>
 801538a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801538e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015392:	e7f8      	b.n	8015386 <memmove+0x12>
 8015394:	4601      	mov	r1, r0
 8015396:	4402      	add	r2, r0
 8015398:	428a      	cmp	r2, r1
 801539a:	d100      	bne.n	801539e <memmove+0x2a>
 801539c:	bd10      	pop	{r4, pc}
 801539e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80153a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80153a6:	e7f7      	b.n	8015398 <memmove+0x24>

080153a8 <_realloc_r>:
 80153a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153aa:	4607      	mov	r7, r0
 80153ac:	4614      	mov	r4, r2
 80153ae:	460e      	mov	r6, r1
 80153b0:	b921      	cbnz	r1, 80153bc <_realloc_r+0x14>
 80153b2:	4611      	mov	r1, r2
 80153b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80153b8:	f7fb bff6 	b.w	80113a8 <_malloc_r>
 80153bc:	b922      	cbnz	r2, 80153c8 <_realloc_r+0x20>
 80153be:	f7fb ffa7 	bl	8011310 <_free_r>
 80153c2:	4625      	mov	r5, r4
 80153c4:	4628      	mov	r0, r5
 80153c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153c8:	f000 fa98 	bl	80158fc <_malloc_usable_size_r>
 80153cc:	42a0      	cmp	r0, r4
 80153ce:	d20f      	bcs.n	80153f0 <_realloc_r+0x48>
 80153d0:	4621      	mov	r1, r4
 80153d2:	4638      	mov	r0, r7
 80153d4:	f7fb ffe8 	bl	80113a8 <_malloc_r>
 80153d8:	4605      	mov	r5, r0
 80153da:	2800      	cmp	r0, #0
 80153dc:	d0f2      	beq.n	80153c4 <_realloc_r+0x1c>
 80153de:	4631      	mov	r1, r6
 80153e0:	4622      	mov	r2, r4
 80153e2:	f7fb ff7f 	bl	80112e4 <memcpy>
 80153e6:	4631      	mov	r1, r6
 80153e8:	4638      	mov	r0, r7
 80153ea:	f7fb ff91 	bl	8011310 <_free_r>
 80153ee:	e7e9      	b.n	80153c4 <_realloc_r+0x1c>
 80153f0:	4635      	mov	r5, r6
 80153f2:	e7e7      	b.n	80153c4 <_realloc_r+0x1c>

080153f4 <__sfputc_r>:
 80153f4:	6893      	ldr	r3, [r2, #8]
 80153f6:	b410      	push	{r4}
 80153f8:	3b01      	subs	r3, #1
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	6093      	str	r3, [r2, #8]
 80153fe:	da07      	bge.n	8015410 <__sfputc_r+0x1c>
 8015400:	6994      	ldr	r4, [r2, #24]
 8015402:	42a3      	cmp	r3, r4
 8015404:	db01      	blt.n	801540a <__sfputc_r+0x16>
 8015406:	290a      	cmp	r1, #10
 8015408:	d102      	bne.n	8015410 <__sfputc_r+0x1c>
 801540a:	bc10      	pop	{r4}
 801540c:	f000 b94a 	b.w	80156a4 <__swbuf_r>
 8015410:	6813      	ldr	r3, [r2, #0]
 8015412:	1c58      	adds	r0, r3, #1
 8015414:	6010      	str	r0, [r2, #0]
 8015416:	7019      	strb	r1, [r3, #0]
 8015418:	4608      	mov	r0, r1
 801541a:	bc10      	pop	{r4}
 801541c:	4770      	bx	lr

0801541e <__sfputs_r>:
 801541e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015420:	4606      	mov	r6, r0
 8015422:	460f      	mov	r7, r1
 8015424:	4614      	mov	r4, r2
 8015426:	18d5      	adds	r5, r2, r3
 8015428:	42ac      	cmp	r4, r5
 801542a:	d101      	bne.n	8015430 <__sfputs_r+0x12>
 801542c:	2000      	movs	r0, #0
 801542e:	e007      	b.n	8015440 <__sfputs_r+0x22>
 8015430:	463a      	mov	r2, r7
 8015432:	4630      	mov	r0, r6
 8015434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015438:	f7ff ffdc 	bl	80153f4 <__sfputc_r>
 801543c:	1c43      	adds	r3, r0, #1
 801543e:	d1f3      	bne.n	8015428 <__sfputs_r+0xa>
 8015440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015444 <_vfiprintf_r>:
 8015444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015448:	460d      	mov	r5, r1
 801544a:	4614      	mov	r4, r2
 801544c:	4698      	mov	r8, r3
 801544e:	4606      	mov	r6, r0
 8015450:	b09d      	sub	sp, #116	; 0x74
 8015452:	b118      	cbz	r0, 801545c <_vfiprintf_r+0x18>
 8015454:	6983      	ldr	r3, [r0, #24]
 8015456:	b90b      	cbnz	r3, 801545c <_vfiprintf_r+0x18>
 8015458:	f7fb fe6e 	bl	8011138 <__sinit>
 801545c:	4b89      	ldr	r3, [pc, #548]	; (8015684 <_vfiprintf_r+0x240>)
 801545e:	429d      	cmp	r5, r3
 8015460:	d11b      	bne.n	801549a <_vfiprintf_r+0x56>
 8015462:	6875      	ldr	r5, [r6, #4]
 8015464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015466:	07d9      	lsls	r1, r3, #31
 8015468:	d405      	bmi.n	8015476 <_vfiprintf_r+0x32>
 801546a:	89ab      	ldrh	r3, [r5, #12]
 801546c:	059a      	lsls	r2, r3, #22
 801546e:	d402      	bmi.n	8015476 <_vfiprintf_r+0x32>
 8015470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015472:	f7fb ff24 	bl	80112be <__retarget_lock_acquire_recursive>
 8015476:	89ab      	ldrh	r3, [r5, #12]
 8015478:	071b      	lsls	r3, r3, #28
 801547a:	d501      	bpl.n	8015480 <_vfiprintf_r+0x3c>
 801547c:	692b      	ldr	r3, [r5, #16]
 801547e:	b9eb      	cbnz	r3, 80154bc <_vfiprintf_r+0x78>
 8015480:	4629      	mov	r1, r5
 8015482:	4630      	mov	r0, r6
 8015484:	f000 f960 	bl	8015748 <__swsetup_r>
 8015488:	b1c0      	cbz	r0, 80154bc <_vfiprintf_r+0x78>
 801548a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801548c:	07dc      	lsls	r4, r3, #31
 801548e:	d50e      	bpl.n	80154ae <_vfiprintf_r+0x6a>
 8015490:	f04f 30ff 	mov.w	r0, #4294967295
 8015494:	b01d      	add	sp, #116	; 0x74
 8015496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801549a:	4b7b      	ldr	r3, [pc, #492]	; (8015688 <_vfiprintf_r+0x244>)
 801549c:	429d      	cmp	r5, r3
 801549e:	d101      	bne.n	80154a4 <_vfiprintf_r+0x60>
 80154a0:	68b5      	ldr	r5, [r6, #8]
 80154a2:	e7df      	b.n	8015464 <_vfiprintf_r+0x20>
 80154a4:	4b79      	ldr	r3, [pc, #484]	; (801568c <_vfiprintf_r+0x248>)
 80154a6:	429d      	cmp	r5, r3
 80154a8:	bf08      	it	eq
 80154aa:	68f5      	ldreq	r5, [r6, #12]
 80154ac:	e7da      	b.n	8015464 <_vfiprintf_r+0x20>
 80154ae:	89ab      	ldrh	r3, [r5, #12]
 80154b0:	0598      	lsls	r0, r3, #22
 80154b2:	d4ed      	bmi.n	8015490 <_vfiprintf_r+0x4c>
 80154b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80154b6:	f7fb ff03 	bl	80112c0 <__retarget_lock_release_recursive>
 80154ba:	e7e9      	b.n	8015490 <_vfiprintf_r+0x4c>
 80154bc:	2300      	movs	r3, #0
 80154be:	9309      	str	r3, [sp, #36]	; 0x24
 80154c0:	2320      	movs	r3, #32
 80154c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80154c6:	2330      	movs	r3, #48	; 0x30
 80154c8:	f04f 0901 	mov.w	r9, #1
 80154cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80154d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8015690 <_vfiprintf_r+0x24c>
 80154d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80154d8:	4623      	mov	r3, r4
 80154da:	469a      	mov	sl, r3
 80154dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154e0:	b10a      	cbz	r2, 80154e6 <_vfiprintf_r+0xa2>
 80154e2:	2a25      	cmp	r2, #37	; 0x25
 80154e4:	d1f9      	bne.n	80154da <_vfiprintf_r+0x96>
 80154e6:	ebba 0b04 	subs.w	fp, sl, r4
 80154ea:	d00b      	beq.n	8015504 <_vfiprintf_r+0xc0>
 80154ec:	465b      	mov	r3, fp
 80154ee:	4622      	mov	r2, r4
 80154f0:	4629      	mov	r1, r5
 80154f2:	4630      	mov	r0, r6
 80154f4:	f7ff ff93 	bl	801541e <__sfputs_r>
 80154f8:	3001      	adds	r0, #1
 80154fa:	f000 80aa 	beq.w	8015652 <_vfiprintf_r+0x20e>
 80154fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015500:	445a      	add	r2, fp
 8015502:	9209      	str	r2, [sp, #36]	; 0x24
 8015504:	f89a 3000 	ldrb.w	r3, [sl]
 8015508:	2b00      	cmp	r3, #0
 801550a:	f000 80a2 	beq.w	8015652 <_vfiprintf_r+0x20e>
 801550e:	2300      	movs	r3, #0
 8015510:	f04f 32ff 	mov.w	r2, #4294967295
 8015514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015518:	f10a 0a01 	add.w	sl, sl, #1
 801551c:	9304      	str	r3, [sp, #16]
 801551e:	9307      	str	r3, [sp, #28]
 8015520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015524:	931a      	str	r3, [sp, #104]	; 0x68
 8015526:	4654      	mov	r4, sl
 8015528:	2205      	movs	r2, #5
 801552a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801552e:	4858      	ldr	r0, [pc, #352]	; (8015690 <_vfiprintf_r+0x24c>)
 8015530:	f7ff f87c 	bl	801462c <memchr>
 8015534:	9a04      	ldr	r2, [sp, #16]
 8015536:	b9d8      	cbnz	r0, 8015570 <_vfiprintf_r+0x12c>
 8015538:	06d1      	lsls	r1, r2, #27
 801553a:	bf44      	itt	mi
 801553c:	2320      	movmi	r3, #32
 801553e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015542:	0713      	lsls	r3, r2, #28
 8015544:	bf44      	itt	mi
 8015546:	232b      	movmi	r3, #43	; 0x2b
 8015548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801554c:	f89a 3000 	ldrb.w	r3, [sl]
 8015550:	2b2a      	cmp	r3, #42	; 0x2a
 8015552:	d015      	beq.n	8015580 <_vfiprintf_r+0x13c>
 8015554:	4654      	mov	r4, sl
 8015556:	2000      	movs	r0, #0
 8015558:	f04f 0c0a 	mov.w	ip, #10
 801555c:	9a07      	ldr	r2, [sp, #28]
 801555e:	4621      	mov	r1, r4
 8015560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015564:	3b30      	subs	r3, #48	; 0x30
 8015566:	2b09      	cmp	r3, #9
 8015568:	d94e      	bls.n	8015608 <_vfiprintf_r+0x1c4>
 801556a:	b1b0      	cbz	r0, 801559a <_vfiprintf_r+0x156>
 801556c:	9207      	str	r2, [sp, #28]
 801556e:	e014      	b.n	801559a <_vfiprintf_r+0x156>
 8015570:	eba0 0308 	sub.w	r3, r0, r8
 8015574:	fa09 f303 	lsl.w	r3, r9, r3
 8015578:	4313      	orrs	r3, r2
 801557a:	46a2      	mov	sl, r4
 801557c:	9304      	str	r3, [sp, #16]
 801557e:	e7d2      	b.n	8015526 <_vfiprintf_r+0xe2>
 8015580:	9b03      	ldr	r3, [sp, #12]
 8015582:	1d19      	adds	r1, r3, #4
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	9103      	str	r1, [sp, #12]
 8015588:	2b00      	cmp	r3, #0
 801558a:	bfbb      	ittet	lt
 801558c:	425b      	neglt	r3, r3
 801558e:	f042 0202 	orrlt.w	r2, r2, #2
 8015592:	9307      	strge	r3, [sp, #28]
 8015594:	9307      	strlt	r3, [sp, #28]
 8015596:	bfb8      	it	lt
 8015598:	9204      	strlt	r2, [sp, #16]
 801559a:	7823      	ldrb	r3, [r4, #0]
 801559c:	2b2e      	cmp	r3, #46	; 0x2e
 801559e:	d10c      	bne.n	80155ba <_vfiprintf_r+0x176>
 80155a0:	7863      	ldrb	r3, [r4, #1]
 80155a2:	2b2a      	cmp	r3, #42	; 0x2a
 80155a4:	d135      	bne.n	8015612 <_vfiprintf_r+0x1ce>
 80155a6:	9b03      	ldr	r3, [sp, #12]
 80155a8:	3402      	adds	r4, #2
 80155aa:	1d1a      	adds	r2, r3, #4
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	9203      	str	r2, [sp, #12]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	bfb8      	it	lt
 80155b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80155b8:	9305      	str	r3, [sp, #20]
 80155ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80156a0 <_vfiprintf_r+0x25c>
 80155be:	2203      	movs	r2, #3
 80155c0:	4650      	mov	r0, sl
 80155c2:	7821      	ldrb	r1, [r4, #0]
 80155c4:	f7ff f832 	bl	801462c <memchr>
 80155c8:	b140      	cbz	r0, 80155dc <_vfiprintf_r+0x198>
 80155ca:	2340      	movs	r3, #64	; 0x40
 80155cc:	eba0 000a 	sub.w	r0, r0, sl
 80155d0:	fa03 f000 	lsl.w	r0, r3, r0
 80155d4:	9b04      	ldr	r3, [sp, #16]
 80155d6:	3401      	adds	r4, #1
 80155d8:	4303      	orrs	r3, r0
 80155da:	9304      	str	r3, [sp, #16]
 80155dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155e0:	2206      	movs	r2, #6
 80155e2:	482c      	ldr	r0, [pc, #176]	; (8015694 <_vfiprintf_r+0x250>)
 80155e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80155e8:	f7ff f820 	bl	801462c <memchr>
 80155ec:	2800      	cmp	r0, #0
 80155ee:	d03f      	beq.n	8015670 <_vfiprintf_r+0x22c>
 80155f0:	4b29      	ldr	r3, [pc, #164]	; (8015698 <_vfiprintf_r+0x254>)
 80155f2:	bb1b      	cbnz	r3, 801563c <_vfiprintf_r+0x1f8>
 80155f4:	9b03      	ldr	r3, [sp, #12]
 80155f6:	3307      	adds	r3, #7
 80155f8:	f023 0307 	bic.w	r3, r3, #7
 80155fc:	3308      	adds	r3, #8
 80155fe:	9303      	str	r3, [sp, #12]
 8015600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015602:	443b      	add	r3, r7
 8015604:	9309      	str	r3, [sp, #36]	; 0x24
 8015606:	e767      	b.n	80154d8 <_vfiprintf_r+0x94>
 8015608:	460c      	mov	r4, r1
 801560a:	2001      	movs	r0, #1
 801560c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015610:	e7a5      	b.n	801555e <_vfiprintf_r+0x11a>
 8015612:	2300      	movs	r3, #0
 8015614:	f04f 0c0a 	mov.w	ip, #10
 8015618:	4619      	mov	r1, r3
 801561a:	3401      	adds	r4, #1
 801561c:	9305      	str	r3, [sp, #20]
 801561e:	4620      	mov	r0, r4
 8015620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015624:	3a30      	subs	r2, #48	; 0x30
 8015626:	2a09      	cmp	r2, #9
 8015628:	d903      	bls.n	8015632 <_vfiprintf_r+0x1ee>
 801562a:	2b00      	cmp	r3, #0
 801562c:	d0c5      	beq.n	80155ba <_vfiprintf_r+0x176>
 801562e:	9105      	str	r1, [sp, #20]
 8015630:	e7c3      	b.n	80155ba <_vfiprintf_r+0x176>
 8015632:	4604      	mov	r4, r0
 8015634:	2301      	movs	r3, #1
 8015636:	fb0c 2101 	mla	r1, ip, r1, r2
 801563a:	e7f0      	b.n	801561e <_vfiprintf_r+0x1da>
 801563c:	ab03      	add	r3, sp, #12
 801563e:	9300      	str	r3, [sp, #0]
 8015640:	462a      	mov	r2, r5
 8015642:	4630      	mov	r0, r6
 8015644:	4b15      	ldr	r3, [pc, #84]	; (801569c <_vfiprintf_r+0x258>)
 8015646:	a904      	add	r1, sp, #16
 8015648:	f7fb ffa6 	bl	8011598 <_printf_float>
 801564c:	4607      	mov	r7, r0
 801564e:	1c78      	adds	r0, r7, #1
 8015650:	d1d6      	bne.n	8015600 <_vfiprintf_r+0x1bc>
 8015652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015654:	07d9      	lsls	r1, r3, #31
 8015656:	d405      	bmi.n	8015664 <_vfiprintf_r+0x220>
 8015658:	89ab      	ldrh	r3, [r5, #12]
 801565a:	059a      	lsls	r2, r3, #22
 801565c:	d402      	bmi.n	8015664 <_vfiprintf_r+0x220>
 801565e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015660:	f7fb fe2e 	bl	80112c0 <__retarget_lock_release_recursive>
 8015664:	89ab      	ldrh	r3, [r5, #12]
 8015666:	065b      	lsls	r3, r3, #25
 8015668:	f53f af12 	bmi.w	8015490 <_vfiprintf_r+0x4c>
 801566c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801566e:	e711      	b.n	8015494 <_vfiprintf_r+0x50>
 8015670:	ab03      	add	r3, sp, #12
 8015672:	9300      	str	r3, [sp, #0]
 8015674:	462a      	mov	r2, r5
 8015676:	4630      	mov	r0, r6
 8015678:	4b08      	ldr	r3, [pc, #32]	; (801569c <_vfiprintf_r+0x258>)
 801567a:	a904      	add	r1, sp, #16
 801567c:	f7fc fa28 	bl	8011ad0 <_printf_i>
 8015680:	e7e4      	b.n	801564c <_vfiprintf_r+0x208>
 8015682:	bf00      	nop
 8015684:	08015bcc 	.word	0x08015bcc
 8015688:	08015bec 	.word	0x08015bec
 801568c:	08015bac 	.word	0x08015bac
 8015690:	08016014 	.word	0x08016014
 8015694:	0801601e 	.word	0x0801601e
 8015698:	08011599 	.word	0x08011599
 801569c:	0801541f 	.word	0x0801541f
 80156a0:	0801601a 	.word	0x0801601a

080156a4 <__swbuf_r>:
 80156a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156a6:	460e      	mov	r6, r1
 80156a8:	4614      	mov	r4, r2
 80156aa:	4605      	mov	r5, r0
 80156ac:	b118      	cbz	r0, 80156b6 <__swbuf_r+0x12>
 80156ae:	6983      	ldr	r3, [r0, #24]
 80156b0:	b90b      	cbnz	r3, 80156b6 <__swbuf_r+0x12>
 80156b2:	f7fb fd41 	bl	8011138 <__sinit>
 80156b6:	4b21      	ldr	r3, [pc, #132]	; (801573c <__swbuf_r+0x98>)
 80156b8:	429c      	cmp	r4, r3
 80156ba:	d12b      	bne.n	8015714 <__swbuf_r+0x70>
 80156bc:	686c      	ldr	r4, [r5, #4]
 80156be:	69a3      	ldr	r3, [r4, #24]
 80156c0:	60a3      	str	r3, [r4, #8]
 80156c2:	89a3      	ldrh	r3, [r4, #12]
 80156c4:	071a      	lsls	r2, r3, #28
 80156c6:	d52f      	bpl.n	8015728 <__swbuf_r+0x84>
 80156c8:	6923      	ldr	r3, [r4, #16]
 80156ca:	b36b      	cbz	r3, 8015728 <__swbuf_r+0x84>
 80156cc:	6923      	ldr	r3, [r4, #16]
 80156ce:	6820      	ldr	r0, [r4, #0]
 80156d0:	b2f6      	uxtb	r6, r6
 80156d2:	1ac0      	subs	r0, r0, r3
 80156d4:	6963      	ldr	r3, [r4, #20]
 80156d6:	4637      	mov	r7, r6
 80156d8:	4283      	cmp	r3, r0
 80156da:	dc04      	bgt.n	80156e6 <__swbuf_r+0x42>
 80156dc:	4621      	mov	r1, r4
 80156de:	4628      	mov	r0, r5
 80156e0:	f7fe fbda 	bl	8013e98 <_fflush_r>
 80156e4:	bb30      	cbnz	r0, 8015734 <__swbuf_r+0x90>
 80156e6:	68a3      	ldr	r3, [r4, #8]
 80156e8:	3001      	adds	r0, #1
 80156ea:	3b01      	subs	r3, #1
 80156ec:	60a3      	str	r3, [r4, #8]
 80156ee:	6823      	ldr	r3, [r4, #0]
 80156f0:	1c5a      	adds	r2, r3, #1
 80156f2:	6022      	str	r2, [r4, #0]
 80156f4:	701e      	strb	r6, [r3, #0]
 80156f6:	6963      	ldr	r3, [r4, #20]
 80156f8:	4283      	cmp	r3, r0
 80156fa:	d004      	beq.n	8015706 <__swbuf_r+0x62>
 80156fc:	89a3      	ldrh	r3, [r4, #12]
 80156fe:	07db      	lsls	r3, r3, #31
 8015700:	d506      	bpl.n	8015710 <__swbuf_r+0x6c>
 8015702:	2e0a      	cmp	r6, #10
 8015704:	d104      	bne.n	8015710 <__swbuf_r+0x6c>
 8015706:	4621      	mov	r1, r4
 8015708:	4628      	mov	r0, r5
 801570a:	f7fe fbc5 	bl	8013e98 <_fflush_r>
 801570e:	b988      	cbnz	r0, 8015734 <__swbuf_r+0x90>
 8015710:	4638      	mov	r0, r7
 8015712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015714:	4b0a      	ldr	r3, [pc, #40]	; (8015740 <__swbuf_r+0x9c>)
 8015716:	429c      	cmp	r4, r3
 8015718:	d101      	bne.n	801571e <__swbuf_r+0x7a>
 801571a:	68ac      	ldr	r4, [r5, #8]
 801571c:	e7cf      	b.n	80156be <__swbuf_r+0x1a>
 801571e:	4b09      	ldr	r3, [pc, #36]	; (8015744 <__swbuf_r+0xa0>)
 8015720:	429c      	cmp	r4, r3
 8015722:	bf08      	it	eq
 8015724:	68ec      	ldreq	r4, [r5, #12]
 8015726:	e7ca      	b.n	80156be <__swbuf_r+0x1a>
 8015728:	4621      	mov	r1, r4
 801572a:	4628      	mov	r0, r5
 801572c:	f000 f80c 	bl	8015748 <__swsetup_r>
 8015730:	2800      	cmp	r0, #0
 8015732:	d0cb      	beq.n	80156cc <__swbuf_r+0x28>
 8015734:	f04f 37ff 	mov.w	r7, #4294967295
 8015738:	e7ea      	b.n	8015710 <__swbuf_r+0x6c>
 801573a:	bf00      	nop
 801573c:	08015bcc 	.word	0x08015bcc
 8015740:	08015bec 	.word	0x08015bec
 8015744:	08015bac 	.word	0x08015bac

08015748 <__swsetup_r>:
 8015748:	4b32      	ldr	r3, [pc, #200]	; (8015814 <__swsetup_r+0xcc>)
 801574a:	b570      	push	{r4, r5, r6, lr}
 801574c:	681d      	ldr	r5, [r3, #0]
 801574e:	4606      	mov	r6, r0
 8015750:	460c      	mov	r4, r1
 8015752:	b125      	cbz	r5, 801575e <__swsetup_r+0x16>
 8015754:	69ab      	ldr	r3, [r5, #24]
 8015756:	b913      	cbnz	r3, 801575e <__swsetup_r+0x16>
 8015758:	4628      	mov	r0, r5
 801575a:	f7fb fced 	bl	8011138 <__sinit>
 801575e:	4b2e      	ldr	r3, [pc, #184]	; (8015818 <__swsetup_r+0xd0>)
 8015760:	429c      	cmp	r4, r3
 8015762:	d10f      	bne.n	8015784 <__swsetup_r+0x3c>
 8015764:	686c      	ldr	r4, [r5, #4]
 8015766:	89a3      	ldrh	r3, [r4, #12]
 8015768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801576c:	0719      	lsls	r1, r3, #28
 801576e:	d42c      	bmi.n	80157ca <__swsetup_r+0x82>
 8015770:	06dd      	lsls	r5, r3, #27
 8015772:	d411      	bmi.n	8015798 <__swsetup_r+0x50>
 8015774:	2309      	movs	r3, #9
 8015776:	6033      	str	r3, [r6, #0]
 8015778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801577c:	f04f 30ff 	mov.w	r0, #4294967295
 8015780:	81a3      	strh	r3, [r4, #12]
 8015782:	e03e      	b.n	8015802 <__swsetup_r+0xba>
 8015784:	4b25      	ldr	r3, [pc, #148]	; (801581c <__swsetup_r+0xd4>)
 8015786:	429c      	cmp	r4, r3
 8015788:	d101      	bne.n	801578e <__swsetup_r+0x46>
 801578a:	68ac      	ldr	r4, [r5, #8]
 801578c:	e7eb      	b.n	8015766 <__swsetup_r+0x1e>
 801578e:	4b24      	ldr	r3, [pc, #144]	; (8015820 <__swsetup_r+0xd8>)
 8015790:	429c      	cmp	r4, r3
 8015792:	bf08      	it	eq
 8015794:	68ec      	ldreq	r4, [r5, #12]
 8015796:	e7e6      	b.n	8015766 <__swsetup_r+0x1e>
 8015798:	0758      	lsls	r0, r3, #29
 801579a:	d512      	bpl.n	80157c2 <__swsetup_r+0x7a>
 801579c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801579e:	b141      	cbz	r1, 80157b2 <__swsetup_r+0x6a>
 80157a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157a4:	4299      	cmp	r1, r3
 80157a6:	d002      	beq.n	80157ae <__swsetup_r+0x66>
 80157a8:	4630      	mov	r0, r6
 80157aa:	f7fb fdb1 	bl	8011310 <_free_r>
 80157ae:	2300      	movs	r3, #0
 80157b0:	6363      	str	r3, [r4, #52]	; 0x34
 80157b2:	89a3      	ldrh	r3, [r4, #12]
 80157b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80157b8:	81a3      	strh	r3, [r4, #12]
 80157ba:	2300      	movs	r3, #0
 80157bc:	6063      	str	r3, [r4, #4]
 80157be:	6923      	ldr	r3, [r4, #16]
 80157c0:	6023      	str	r3, [r4, #0]
 80157c2:	89a3      	ldrh	r3, [r4, #12]
 80157c4:	f043 0308 	orr.w	r3, r3, #8
 80157c8:	81a3      	strh	r3, [r4, #12]
 80157ca:	6923      	ldr	r3, [r4, #16]
 80157cc:	b94b      	cbnz	r3, 80157e2 <__swsetup_r+0x9a>
 80157ce:	89a3      	ldrh	r3, [r4, #12]
 80157d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80157d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80157d8:	d003      	beq.n	80157e2 <__swsetup_r+0x9a>
 80157da:	4621      	mov	r1, r4
 80157dc:	4630      	mov	r0, r6
 80157de:	f000 f84d 	bl	801587c <__smakebuf_r>
 80157e2:	89a0      	ldrh	r0, [r4, #12]
 80157e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80157e8:	f010 0301 	ands.w	r3, r0, #1
 80157ec:	d00a      	beq.n	8015804 <__swsetup_r+0xbc>
 80157ee:	2300      	movs	r3, #0
 80157f0:	60a3      	str	r3, [r4, #8]
 80157f2:	6963      	ldr	r3, [r4, #20]
 80157f4:	425b      	negs	r3, r3
 80157f6:	61a3      	str	r3, [r4, #24]
 80157f8:	6923      	ldr	r3, [r4, #16]
 80157fa:	b943      	cbnz	r3, 801580e <__swsetup_r+0xc6>
 80157fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015800:	d1ba      	bne.n	8015778 <__swsetup_r+0x30>
 8015802:	bd70      	pop	{r4, r5, r6, pc}
 8015804:	0781      	lsls	r1, r0, #30
 8015806:	bf58      	it	pl
 8015808:	6963      	ldrpl	r3, [r4, #20]
 801580a:	60a3      	str	r3, [r4, #8]
 801580c:	e7f4      	b.n	80157f8 <__swsetup_r+0xb0>
 801580e:	2000      	movs	r0, #0
 8015810:	e7f7      	b.n	8015802 <__swsetup_r+0xba>
 8015812:	bf00      	nop
 8015814:	20000054 	.word	0x20000054
 8015818:	08015bcc 	.word	0x08015bcc
 801581c:	08015bec 	.word	0x08015bec
 8015820:	08015bac 	.word	0x08015bac

08015824 <abort>:
 8015824:	2006      	movs	r0, #6
 8015826:	b508      	push	{r3, lr}
 8015828:	f000 f898 	bl	801595c <raise>
 801582c:	2001      	movs	r0, #1
 801582e:	f7ed f9be 	bl	8002bae <_exit>

08015832 <__swhatbuf_r>:
 8015832:	b570      	push	{r4, r5, r6, lr}
 8015834:	460e      	mov	r6, r1
 8015836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801583a:	4614      	mov	r4, r2
 801583c:	2900      	cmp	r1, #0
 801583e:	461d      	mov	r5, r3
 8015840:	b096      	sub	sp, #88	; 0x58
 8015842:	da07      	bge.n	8015854 <__swhatbuf_r+0x22>
 8015844:	2300      	movs	r3, #0
 8015846:	602b      	str	r3, [r5, #0]
 8015848:	89b3      	ldrh	r3, [r6, #12]
 801584a:	061a      	lsls	r2, r3, #24
 801584c:	d410      	bmi.n	8015870 <__swhatbuf_r+0x3e>
 801584e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015852:	e00e      	b.n	8015872 <__swhatbuf_r+0x40>
 8015854:	466a      	mov	r2, sp
 8015856:	f000 f89d 	bl	8015994 <_fstat_r>
 801585a:	2800      	cmp	r0, #0
 801585c:	dbf2      	blt.n	8015844 <__swhatbuf_r+0x12>
 801585e:	9a01      	ldr	r2, [sp, #4]
 8015860:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015864:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015868:	425a      	negs	r2, r3
 801586a:	415a      	adcs	r2, r3
 801586c:	602a      	str	r2, [r5, #0]
 801586e:	e7ee      	b.n	801584e <__swhatbuf_r+0x1c>
 8015870:	2340      	movs	r3, #64	; 0x40
 8015872:	2000      	movs	r0, #0
 8015874:	6023      	str	r3, [r4, #0]
 8015876:	b016      	add	sp, #88	; 0x58
 8015878:	bd70      	pop	{r4, r5, r6, pc}
	...

0801587c <__smakebuf_r>:
 801587c:	898b      	ldrh	r3, [r1, #12]
 801587e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015880:	079d      	lsls	r5, r3, #30
 8015882:	4606      	mov	r6, r0
 8015884:	460c      	mov	r4, r1
 8015886:	d507      	bpl.n	8015898 <__smakebuf_r+0x1c>
 8015888:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801588c:	6023      	str	r3, [r4, #0]
 801588e:	6123      	str	r3, [r4, #16]
 8015890:	2301      	movs	r3, #1
 8015892:	6163      	str	r3, [r4, #20]
 8015894:	b002      	add	sp, #8
 8015896:	bd70      	pop	{r4, r5, r6, pc}
 8015898:	466a      	mov	r2, sp
 801589a:	ab01      	add	r3, sp, #4
 801589c:	f7ff ffc9 	bl	8015832 <__swhatbuf_r>
 80158a0:	9900      	ldr	r1, [sp, #0]
 80158a2:	4605      	mov	r5, r0
 80158a4:	4630      	mov	r0, r6
 80158a6:	f7fb fd7f 	bl	80113a8 <_malloc_r>
 80158aa:	b948      	cbnz	r0, 80158c0 <__smakebuf_r+0x44>
 80158ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158b0:	059a      	lsls	r2, r3, #22
 80158b2:	d4ef      	bmi.n	8015894 <__smakebuf_r+0x18>
 80158b4:	f023 0303 	bic.w	r3, r3, #3
 80158b8:	f043 0302 	orr.w	r3, r3, #2
 80158bc:	81a3      	strh	r3, [r4, #12]
 80158be:	e7e3      	b.n	8015888 <__smakebuf_r+0xc>
 80158c0:	4b0d      	ldr	r3, [pc, #52]	; (80158f8 <__smakebuf_r+0x7c>)
 80158c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80158c4:	89a3      	ldrh	r3, [r4, #12]
 80158c6:	6020      	str	r0, [r4, #0]
 80158c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158cc:	81a3      	strh	r3, [r4, #12]
 80158ce:	9b00      	ldr	r3, [sp, #0]
 80158d0:	6120      	str	r0, [r4, #16]
 80158d2:	6163      	str	r3, [r4, #20]
 80158d4:	9b01      	ldr	r3, [sp, #4]
 80158d6:	b15b      	cbz	r3, 80158f0 <__smakebuf_r+0x74>
 80158d8:	4630      	mov	r0, r6
 80158da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158de:	f000 f86b 	bl	80159b8 <_isatty_r>
 80158e2:	b128      	cbz	r0, 80158f0 <__smakebuf_r+0x74>
 80158e4:	89a3      	ldrh	r3, [r4, #12]
 80158e6:	f023 0303 	bic.w	r3, r3, #3
 80158ea:	f043 0301 	orr.w	r3, r3, #1
 80158ee:	81a3      	strh	r3, [r4, #12]
 80158f0:	89a0      	ldrh	r0, [r4, #12]
 80158f2:	4305      	orrs	r5, r0
 80158f4:	81a5      	strh	r5, [r4, #12]
 80158f6:	e7cd      	b.n	8015894 <__smakebuf_r+0x18>
 80158f8:	080110d1 	.word	0x080110d1

080158fc <_malloc_usable_size_r>:
 80158fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015900:	1f18      	subs	r0, r3, #4
 8015902:	2b00      	cmp	r3, #0
 8015904:	bfbc      	itt	lt
 8015906:	580b      	ldrlt	r3, [r1, r0]
 8015908:	18c0      	addlt	r0, r0, r3
 801590a:	4770      	bx	lr

0801590c <_raise_r>:
 801590c:	291f      	cmp	r1, #31
 801590e:	b538      	push	{r3, r4, r5, lr}
 8015910:	4604      	mov	r4, r0
 8015912:	460d      	mov	r5, r1
 8015914:	d904      	bls.n	8015920 <_raise_r+0x14>
 8015916:	2316      	movs	r3, #22
 8015918:	6003      	str	r3, [r0, #0]
 801591a:	f04f 30ff 	mov.w	r0, #4294967295
 801591e:	bd38      	pop	{r3, r4, r5, pc}
 8015920:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015922:	b112      	cbz	r2, 801592a <_raise_r+0x1e>
 8015924:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015928:	b94b      	cbnz	r3, 801593e <_raise_r+0x32>
 801592a:	4620      	mov	r0, r4
 801592c:	f000 f830 	bl	8015990 <_getpid_r>
 8015930:	462a      	mov	r2, r5
 8015932:	4601      	mov	r1, r0
 8015934:	4620      	mov	r0, r4
 8015936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801593a:	f000 b817 	b.w	801596c <_kill_r>
 801593e:	2b01      	cmp	r3, #1
 8015940:	d00a      	beq.n	8015958 <_raise_r+0x4c>
 8015942:	1c59      	adds	r1, r3, #1
 8015944:	d103      	bne.n	801594e <_raise_r+0x42>
 8015946:	2316      	movs	r3, #22
 8015948:	6003      	str	r3, [r0, #0]
 801594a:	2001      	movs	r0, #1
 801594c:	e7e7      	b.n	801591e <_raise_r+0x12>
 801594e:	2400      	movs	r4, #0
 8015950:	4628      	mov	r0, r5
 8015952:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015956:	4798      	blx	r3
 8015958:	2000      	movs	r0, #0
 801595a:	e7e0      	b.n	801591e <_raise_r+0x12>

0801595c <raise>:
 801595c:	4b02      	ldr	r3, [pc, #8]	; (8015968 <raise+0xc>)
 801595e:	4601      	mov	r1, r0
 8015960:	6818      	ldr	r0, [r3, #0]
 8015962:	f7ff bfd3 	b.w	801590c <_raise_r>
 8015966:	bf00      	nop
 8015968:	20000054 	.word	0x20000054

0801596c <_kill_r>:
 801596c:	b538      	push	{r3, r4, r5, lr}
 801596e:	2300      	movs	r3, #0
 8015970:	4d06      	ldr	r5, [pc, #24]	; (801598c <_kill_r+0x20>)
 8015972:	4604      	mov	r4, r0
 8015974:	4608      	mov	r0, r1
 8015976:	4611      	mov	r1, r2
 8015978:	602b      	str	r3, [r5, #0]
 801597a:	f7ed f908 	bl	8002b8e <_kill>
 801597e:	1c43      	adds	r3, r0, #1
 8015980:	d102      	bne.n	8015988 <_kill_r+0x1c>
 8015982:	682b      	ldr	r3, [r5, #0]
 8015984:	b103      	cbz	r3, 8015988 <_kill_r+0x1c>
 8015986:	6023      	str	r3, [r4, #0]
 8015988:	bd38      	pop	{r3, r4, r5, pc}
 801598a:	bf00      	nop
 801598c:	2000b5c0 	.word	0x2000b5c0

08015990 <_getpid_r>:
 8015990:	f7ed b8f6 	b.w	8002b80 <_getpid>

08015994 <_fstat_r>:
 8015994:	b538      	push	{r3, r4, r5, lr}
 8015996:	2300      	movs	r3, #0
 8015998:	4d06      	ldr	r5, [pc, #24]	; (80159b4 <_fstat_r+0x20>)
 801599a:	4604      	mov	r4, r0
 801599c:	4608      	mov	r0, r1
 801599e:	4611      	mov	r1, r2
 80159a0:	602b      	str	r3, [r5, #0]
 80159a2:	f7ed f952 	bl	8002c4a <_fstat>
 80159a6:	1c43      	adds	r3, r0, #1
 80159a8:	d102      	bne.n	80159b0 <_fstat_r+0x1c>
 80159aa:	682b      	ldr	r3, [r5, #0]
 80159ac:	b103      	cbz	r3, 80159b0 <_fstat_r+0x1c>
 80159ae:	6023      	str	r3, [r4, #0]
 80159b0:	bd38      	pop	{r3, r4, r5, pc}
 80159b2:	bf00      	nop
 80159b4:	2000b5c0 	.word	0x2000b5c0

080159b8 <_isatty_r>:
 80159b8:	b538      	push	{r3, r4, r5, lr}
 80159ba:	2300      	movs	r3, #0
 80159bc:	4d05      	ldr	r5, [pc, #20]	; (80159d4 <_isatty_r+0x1c>)
 80159be:	4604      	mov	r4, r0
 80159c0:	4608      	mov	r0, r1
 80159c2:	602b      	str	r3, [r5, #0]
 80159c4:	f7ed f950 	bl	8002c68 <_isatty>
 80159c8:	1c43      	adds	r3, r0, #1
 80159ca:	d102      	bne.n	80159d2 <_isatty_r+0x1a>
 80159cc:	682b      	ldr	r3, [r5, #0]
 80159ce:	b103      	cbz	r3, 80159d2 <_isatty_r+0x1a>
 80159d0:	6023      	str	r3, [r4, #0]
 80159d2:	bd38      	pop	{r3, r4, r5, pc}
 80159d4:	2000b5c0 	.word	0x2000b5c0

080159d8 <_init>:
 80159d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159da:	bf00      	nop
 80159dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159de:	bc08      	pop	{r3}
 80159e0:	469e      	mov	lr, r3
 80159e2:	4770      	bx	lr

080159e4 <_fini>:
 80159e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159e6:	bf00      	nop
 80159e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159ea:	bc08      	pop	{r3}
 80159ec:	469e      	mov	lr, r3
 80159ee:	4770      	bx	lr
