
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aa10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  0801aba0  0801aba0  0002aba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b21c  0801b21c  00030410  2**0
                  CONTENTS
  4 .ARM          00000008  0801b21c  0801b21c  0002b21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b224  0801b224  00030410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b224  0801b224  0002b224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b228  0801b228  0002b228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  0801b22c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011458  20000410  0801b63c  00030410  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20011868  0801b63c  00031868  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005df2d  00000000  00000000  00030439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009488  00000000  00000000  0008e366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002178  00000000  00000000  000977f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e38  00000000  00000000  00099968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d986  00000000  00000000  0009b7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003580f  00000000  00000000  000c9126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db739  00000000  00000000  000fe935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001da06e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ba8  00000000  00000000  001da0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000410 	.word	0x20000410
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ab88 	.word	0x0801ab88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000414 	.word	0x20000414
 80001cc:	0801ab88 	.word	0x0801ab88

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_drsub>:
 80001f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f8:	e002      	b.n	8000200 <__adddf3>
 80001fa:	bf00      	nop

080001fc <__aeabi_dsub>:
 80001fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000200 <__adddf3>:
 8000200:	b530      	push	{r4, r5, lr}
 8000202:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000206:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020a:	ea94 0f05 	teq	r4, r5
 800020e:	bf08      	it	eq
 8000210:	ea90 0f02 	teqeq	r0, r2
 8000214:	bf1f      	itttt	ne
 8000216:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000222:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000226:	f000 80e2 	beq.w	80003ee <__adddf3+0x1ee>
 800022a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000232:	bfb8      	it	lt
 8000234:	426d      	neglt	r5, r5
 8000236:	dd0c      	ble.n	8000252 <__adddf3+0x52>
 8000238:	442c      	add	r4, r5
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	ea82 0000 	eor.w	r0, r2, r0
 8000246:	ea83 0101 	eor.w	r1, r3, r1
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	2d36      	cmp	r5, #54	; 0x36
 8000254:	bf88      	it	hi
 8000256:	bd30      	pophi	{r4, r5, pc}
 8000258:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800025c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000260:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000264:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x70>
 800026a:	4240      	negs	r0, r0
 800026c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000270:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000274:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000278:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x84>
 800027e:	4252      	negs	r2, r2
 8000280:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000284:	ea94 0f05 	teq	r4, r5
 8000288:	f000 80a7 	beq.w	80003da <__adddf3+0x1da>
 800028c:	f1a4 0401 	sub.w	r4, r4, #1
 8000290:	f1d5 0e20 	rsbs	lr, r5, #32
 8000294:	db0d      	blt.n	80002b2 <__adddf3+0xb2>
 8000296:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029a:	fa22 f205 	lsr.w	r2, r2, r5
 800029e:	1880      	adds	r0, r0, r2
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a8:	1880      	adds	r0, r0, r2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	4159      	adcs	r1, r3
 80002b0:	e00e      	b.n	80002d0 <__adddf3+0xd0>
 80002b2:	f1a5 0520 	sub.w	r5, r5, #32
 80002b6:	f10e 0e20 	add.w	lr, lr, #32
 80002ba:	2a01      	cmp	r2, #1
 80002bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c0:	bf28      	it	cs
 80002c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	18c0      	adds	r0, r0, r3
 80002cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d4:	d507      	bpl.n	80002e6 <__adddf3+0xe6>
 80002d6:	f04f 0e00 	mov.w	lr, #0
 80002da:	f1dc 0c00 	rsbs	ip, ip, #0
 80002de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ea:	d31b      	bcc.n	8000324 <__adddf3+0x124>
 80002ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f0:	d30c      	bcc.n	800030c <__adddf3+0x10c>
 80002f2:	0849      	lsrs	r1, r1, #1
 80002f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002fc:	f104 0401 	add.w	r4, r4, #1
 8000300:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000304:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000308:	f080 809a 	bcs.w	8000440 <__adddf3+0x240>
 800030c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000310:	bf08      	it	eq
 8000312:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000316:	f150 0000 	adcs.w	r0, r0, #0
 800031a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031e:	ea41 0105 	orr.w	r1, r1, r5
 8000322:	bd30      	pop	{r4, r5, pc}
 8000324:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000328:	4140      	adcs	r0, r0
 800032a:	eb41 0101 	adc.w	r1, r1, r1
 800032e:	3c01      	subs	r4, #1
 8000330:	bf28      	it	cs
 8000332:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000336:	d2e9      	bcs.n	800030c <__adddf3+0x10c>
 8000338:	f091 0f00 	teq	r1, #0
 800033c:	bf04      	itt	eq
 800033e:	4601      	moveq	r1, r0
 8000340:	2000      	moveq	r0, #0
 8000342:	fab1 f381 	clz	r3, r1
 8000346:	bf08      	it	eq
 8000348:	3320      	addeq	r3, #32
 800034a:	f1a3 030b 	sub.w	r3, r3, #11
 800034e:	f1b3 0220 	subs.w	r2, r3, #32
 8000352:	da0c      	bge.n	800036e <__adddf3+0x16e>
 8000354:	320c      	adds	r2, #12
 8000356:	dd08      	ble.n	800036a <__adddf3+0x16a>
 8000358:	f102 0c14 	add.w	ip, r2, #20
 800035c:	f1c2 020c 	rsb	r2, r2, #12
 8000360:	fa01 f00c 	lsl.w	r0, r1, ip
 8000364:	fa21 f102 	lsr.w	r1, r1, r2
 8000368:	e00c      	b.n	8000384 <__adddf3+0x184>
 800036a:	f102 0214 	add.w	r2, r2, #20
 800036e:	bfd8      	it	le
 8000370:	f1c2 0c20 	rsble	ip, r2, #32
 8000374:	fa01 f102 	lsl.w	r1, r1, r2
 8000378:	fa20 fc0c 	lsr.w	ip, r0, ip
 800037c:	bfdc      	itt	le
 800037e:	ea41 010c 	orrle.w	r1, r1, ip
 8000382:	4090      	lslle	r0, r2
 8000384:	1ae4      	subs	r4, r4, r3
 8000386:	bfa2      	ittt	ge
 8000388:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800038c:	4329      	orrge	r1, r5
 800038e:	bd30      	popge	{r4, r5, pc}
 8000390:	ea6f 0404 	mvn.w	r4, r4
 8000394:	3c1f      	subs	r4, #31
 8000396:	da1c      	bge.n	80003d2 <__adddf3+0x1d2>
 8000398:	340c      	adds	r4, #12
 800039a:	dc0e      	bgt.n	80003ba <__adddf3+0x1ba>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0220 	rsb	r2, r4, #32
 80003a4:	fa20 f004 	lsr.w	r0, r0, r4
 80003a8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ac:	ea40 0003 	orr.w	r0, r0, r3
 80003b0:	fa21 f304 	lsr.w	r3, r1, r4
 80003b4:	ea45 0103 	orr.w	r1, r5, r3
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f1c4 040c 	rsb	r4, r4, #12
 80003be:	f1c4 0220 	rsb	r2, r4, #32
 80003c2:	fa20 f002 	lsr.w	r0, r0, r2
 80003c6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ca:	ea40 0003 	orr.w	r0, r0, r3
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	fa21 f004 	lsr.w	r0, r1, r4
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f094 0f00 	teq	r4, #0
 80003de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003e2:	bf06      	itte	eq
 80003e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e8:	3401      	addeq	r4, #1
 80003ea:	3d01      	subne	r5, #1
 80003ec:	e74e      	b.n	800028c <__adddf3+0x8c>
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf18      	it	ne
 80003f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f8:	d029      	beq.n	800044e <__adddf3+0x24e>
 80003fa:	ea94 0f05 	teq	r4, r5
 80003fe:	bf08      	it	eq
 8000400:	ea90 0f02 	teqeq	r0, r2
 8000404:	d005      	beq.n	8000412 <__adddf3+0x212>
 8000406:	ea54 0c00 	orrs.w	ip, r4, r0
 800040a:	bf04      	itt	eq
 800040c:	4619      	moveq	r1, r3
 800040e:	4610      	moveq	r0, r2
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	ea91 0f03 	teq	r1, r3
 8000416:	bf1e      	ittt	ne
 8000418:	2100      	movne	r1, #0
 800041a:	2000      	movne	r0, #0
 800041c:	bd30      	popne	{r4, r5, pc}
 800041e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000422:	d105      	bne.n	8000430 <__adddf3+0x230>
 8000424:	0040      	lsls	r0, r0, #1
 8000426:	4149      	adcs	r1, r1
 8000428:	bf28      	it	cs
 800042a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000434:	bf3c      	itt	cc
 8000436:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800043a:	bd30      	popcc	{r4, r5, pc}
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf1a      	itte	ne
 8000454:	4619      	movne	r1, r3
 8000456:	4610      	movne	r0, r2
 8000458:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800045c:	bf1c      	itt	ne
 800045e:	460b      	movne	r3, r1
 8000460:	4602      	movne	r2, r0
 8000462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000466:	bf06      	itte	eq
 8000468:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800046c:	ea91 0f03 	teqeq	r1, r3
 8000470:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	bf00      	nop

08000478 <__aeabi_ui2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f04f 0500 	mov.w	r5, #0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e750      	b.n	8000338 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_i2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b0:	bf48      	it	mi
 80004b2:	4240      	negmi	r0, r0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e73e      	b.n	8000338 <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_f2d>:
 80004bc:	0042      	lsls	r2, r0, #1
 80004be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ca:	bf1f      	itttt	ne
 80004cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d8:	4770      	bxne	lr
 80004da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004de:	bf08      	it	eq
 80004e0:	4770      	bxeq	lr
 80004e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e6:	bf04      	itt	eq
 80004e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	e71c      	b.n	8000338 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_ul2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	e00a      	b.n	8000526 <__aeabi_l2d+0x16>

08000510 <__aeabi_l2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051e:	d502      	bpl.n	8000526 <__aeabi_l2d+0x16>
 8000520:	4240      	negs	r0, r0
 8000522:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000526:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000532:	f43f aed8 	beq.w	80002e6 <__adddf3+0xe6>
 8000536:	f04f 0203 	mov.w	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054e:	f1c2 0320 	rsb	r3, r2, #32
 8000552:	fa00 fc03 	lsl.w	ip, r0, r3
 8000556:	fa20 f002 	lsr.w	r0, r0, r2
 800055a:	fa01 fe03 	lsl.w	lr, r1, r3
 800055e:	ea40 000e 	orr.w	r0, r0, lr
 8000562:	fa21 f102 	lsr.w	r1, r1, r2
 8000566:	4414      	add	r4, r2
 8000568:	e6bd      	b.n	80002e6 <__adddf3+0xe6>
 800056a:	bf00      	nop

0800056c <__aeabi_dmul>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000572:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000576:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057a:	bf1d      	ittte	ne
 800057c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000580:	ea94 0f0c 	teqne	r4, ip
 8000584:	ea95 0f0c 	teqne	r5, ip
 8000588:	f000 f8de 	bleq	8000748 <__aeabi_dmul+0x1dc>
 800058c:	442c      	add	r4, r5
 800058e:	ea81 0603 	eor.w	r6, r1, r3
 8000592:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000596:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059e:	bf18      	it	ne
 80005a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ac:	d038      	beq.n	8000620 <__aeabi_dmul+0xb4>
 80005ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c2:	f04f 0600 	mov.w	r6, #0
 80005c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ca:	f09c 0f00 	teq	ip, #0
 80005ce:	bf18      	it	ne
 80005d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e0:	d204      	bcs.n	80005ec <__aeabi_dmul+0x80>
 80005e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e6:	416d      	adcs	r5, r5
 80005e8:	eb46 0606 	adc.w	r6, r6, r6
 80005ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000600:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000604:	bf88      	it	hi
 8000606:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060a:	d81e      	bhi.n	800064a <__aeabi_dmul+0xde>
 800060c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000624:	ea46 0101 	orr.w	r1, r6, r1
 8000628:	ea40 0002 	orr.w	r0, r0, r2
 800062c:	ea81 0103 	eor.w	r1, r1, r3
 8000630:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000634:	bfc2      	ittt	gt
 8000636:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063e:	bd70      	popgt	{r4, r5, r6, pc}
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f04f 0e00 	mov.w	lr, #0
 8000648:	3c01      	subs	r4, #1
 800064a:	f300 80ab 	bgt.w	80007a4 <__aeabi_dmul+0x238>
 800064e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000652:	bfde      	ittt	le
 8000654:	2000      	movle	r0, #0
 8000656:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065a:	bd70      	pople	{r4, r5, r6, pc}
 800065c:	f1c4 0400 	rsb	r4, r4, #0
 8000660:	3c20      	subs	r4, #32
 8000662:	da35      	bge.n	80006d0 <__aeabi_dmul+0x164>
 8000664:	340c      	adds	r4, #12
 8000666:	dc1b      	bgt.n	80006a0 <__aeabi_dmul+0x134>
 8000668:	f104 0414 	add.w	r4, r4, #20
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f305 	lsl.w	r3, r0, r5
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f205 	lsl.w	r2, r1, r5
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	fa21 f604 	lsr.w	r6, r1, r4
 8000690:	eb42 0106 	adc.w	r1, r2, r6
 8000694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000698:	bf08      	it	eq
 800069a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f1c4 040c 	rsb	r4, r4, #12
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ac:	fa20 f005 	lsr.w	r0, r0, r5
 80006b0:	fa01 f204 	lsl.w	r2, r1, r4
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	f141 0100 	adc.w	r1, r1, #0
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f205 	lsl.w	r2, r0, r5
 80006d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006dc:	fa20 f304 	lsr.w	r3, r0, r4
 80006e0:	fa01 f205 	lsl.w	r2, r1, r5
 80006e4:	ea43 0302 	orr.w	r3, r3, r2
 80006e8:	fa21 f004 	lsr.w	r0, r1, r4
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	fa21 f204 	lsr.w	r2, r1, r4
 80006f4:	ea20 0002 	bic.w	r0, r0, r2
 80006f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f094 0f00 	teq	r4, #0
 800070c:	d10f      	bne.n	800072e <__aeabi_dmul+0x1c2>
 800070e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000712:	0040      	lsls	r0, r0, #1
 8000714:	eb41 0101 	adc.w	r1, r1, r1
 8000718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3c01      	subeq	r4, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1a6>
 8000722:	ea41 0106 	orr.w	r1, r1, r6
 8000726:	f095 0f00 	teq	r5, #0
 800072a:	bf18      	it	ne
 800072c:	4770      	bxne	lr
 800072e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	eb43 0303 	adc.w	r3, r3, r3
 8000738:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800073c:	bf08      	it	eq
 800073e:	3d01      	subeq	r5, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1c6>
 8000742:	ea43 0306 	orr.w	r3, r3, r6
 8000746:	4770      	bx	lr
 8000748:	ea94 0f0c 	teq	r4, ip
 800074c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000750:	bf18      	it	ne
 8000752:	ea95 0f0c 	teqne	r5, ip
 8000756:	d00c      	beq.n	8000772 <__aeabi_dmul+0x206>
 8000758:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075c:	bf18      	it	ne
 800075e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000762:	d1d1      	bne.n	8000708 <__aeabi_dmul+0x19c>
 8000764:	ea81 0103 	eor.w	r1, r1, r3
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000776:	bf06      	itte	eq
 8000778:	4610      	moveq	r0, r2
 800077a:	4619      	moveq	r1, r3
 800077c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000780:	d019      	beq.n	80007b6 <__aeabi_dmul+0x24a>
 8000782:	ea94 0f0c 	teq	r4, ip
 8000786:	d102      	bne.n	800078e <__aeabi_dmul+0x222>
 8000788:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800078c:	d113      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 800078e:	ea95 0f0c 	teq	r5, ip
 8000792:	d105      	bne.n	80007a0 <__aeabi_dmul+0x234>
 8000794:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000798:	bf1c      	itt	ne
 800079a:	4610      	movne	r0, r2
 800079c:	4619      	movne	r1, r3
 800079e:	d10a      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007be:	bd70      	pop	{r4, r5, r6, pc}

080007c0 <__aeabi_ddiv>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ce:	bf1d      	ittte	ne
 80007d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d4:	ea94 0f0c 	teqne	r4, ip
 80007d8:	ea95 0f0c 	teqne	r5, ip
 80007dc:	f000 f8a7 	bleq	800092e <__aeabi_ddiv+0x16e>
 80007e0:	eba4 0405 	sub.w	r4, r4, r5
 80007e4:	ea81 0e03 	eor.w	lr, r1, r3
 80007e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f0:	f000 8088 	beq.w	8000904 <__aeabi_ddiv+0x144>
 80007f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000800:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000804:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000808:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800080c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000810:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000814:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000818:	429d      	cmp	r5, r3
 800081a:	bf08      	it	eq
 800081c:	4296      	cmpeq	r6, r2
 800081e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000822:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000826:	d202      	bcs.n	800082e <__aeabi_ddiv+0x6e>
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	1ab6      	subs	r6, r6, r2
 8000830:	eb65 0503 	sbc.w	r5, r5, r3
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 000c 	orrcs.w	r0, r0, ip
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800089c:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a0:	d018      	beq.n	80008d4 <__aeabi_ddiv+0x114>
 80008a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008be:	d1c0      	bne.n	8000842 <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	d10b      	bne.n	80008de <__aeabi_ddiv+0x11e>
 80008c6:	ea41 0100 	orr.w	r1, r1, r0
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d2:	e7b6      	b.n	8000842 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	bf04      	itt	eq
 80008da:	4301      	orreq	r1, r0
 80008dc:	2000      	moveq	r0, #0
 80008de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e2:	bf88      	it	hi
 80008e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e8:	f63f aeaf 	bhi.w	800064a <__aeabi_dmul+0xde>
 80008ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f0:	bf04      	itt	eq
 80008f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fa:	f150 0000 	adcs.w	r0, r0, #0
 80008fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000908:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800090c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000910:	bfc2      	ittt	gt
 8000912:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091a:	bd70      	popgt	{r4, r5, r6, pc}
 800091c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000920:	f04f 0e00 	mov.w	lr, #0
 8000924:	3c01      	subs	r4, #1
 8000926:	e690      	b.n	800064a <__aeabi_dmul+0xde>
 8000928:	ea45 0e06 	orr.w	lr, r5, r6
 800092c:	e68d      	b.n	800064a <__aeabi_dmul+0xde>
 800092e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000932:	ea94 0f0c 	teq	r4, ip
 8000936:	bf08      	it	eq
 8000938:	ea95 0f0c 	teqeq	r5, ip
 800093c:	f43f af3b 	beq.w	80007b6 <__aeabi_dmul+0x24a>
 8000940:	ea94 0f0c 	teq	r4, ip
 8000944:	d10a      	bne.n	800095c <__aeabi_ddiv+0x19c>
 8000946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094a:	f47f af34 	bne.w	80007b6 <__aeabi_dmul+0x24a>
 800094e:	ea95 0f0c 	teq	r5, ip
 8000952:	f47f af25 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e72c      	b.n	80007b6 <__aeabi_dmul+0x24a>
 800095c:	ea95 0f0c 	teq	r5, ip
 8000960:	d106      	bne.n	8000970 <__aeabi_ddiv+0x1b0>
 8000962:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000966:	f43f aefd 	beq.w	8000764 <__aeabi_dmul+0x1f8>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e722      	b.n	80007b6 <__aeabi_dmul+0x24a>
 8000970:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000974:	bf18      	it	ne
 8000976:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097a:	f47f aec5 	bne.w	8000708 <__aeabi_dmul+0x19c>
 800097e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000982:	f47f af0d 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000986:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098a:	f47f aeeb 	bne.w	8000764 <__aeabi_dmul+0x1f8>
 800098e:	e712      	b.n	80007b6 <__aeabi_dmul+0x24a>

08000990 <__gedf2>:
 8000990:	f04f 3cff 	mov.w	ip, #4294967295
 8000994:	e006      	b.n	80009a4 <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__ledf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	e002      	b.n	80009a4 <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__cmpdf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ba:	d01b      	beq.n	80009f4 <__cmpdf2+0x54>
 80009bc:	b001      	add	sp, #4
 80009be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c2:	bf0c      	ite	eq
 80009c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c8:	ea91 0f03 	teqne	r1, r3
 80009cc:	bf02      	ittt	eq
 80009ce:	ea90 0f02 	teqeq	r0, r2
 80009d2:	2000      	moveq	r0, #0
 80009d4:	4770      	bxeq	lr
 80009d6:	f110 0f00 	cmn.w	r0, #0
 80009da:	ea91 0f03 	teq	r1, r3
 80009de:	bf58      	it	pl
 80009e0:	4299      	cmppl	r1, r3
 80009e2:	bf08      	it	eq
 80009e4:	4290      	cmpeq	r0, r2
 80009e6:	bf2c      	ite	cs
 80009e8:	17d8      	asrcs	r0, r3, #31
 80009ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ee:	f040 0001 	orr.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__cmpdf2+0x64>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d107      	bne.n	8000a14 <__cmpdf2+0x74>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d1d6      	bne.n	80009bc <__cmpdf2+0x1c>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d0d3      	beq.n	80009bc <__cmpdf2+0x1c>
 8000a14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdrcmple>:
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4662      	mov	r2, ip
 8000a22:	468c      	mov	ip, r1
 8000a24:	4619      	mov	r1, r3
 8000a26:	4663      	mov	r3, ip
 8000a28:	e000      	b.n	8000a2c <__aeabi_cdcmpeq>
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdcmpeq>:
 8000a2c:	b501      	push	{r0, lr}
 8000a2e:	f7ff ffb7 	bl	80009a0 <__cmpdf2>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	bf48      	it	mi
 8000a36:	f110 0f00 	cmnmi.w	r0, #0
 8000a3a:	bd01      	pop	{r0, pc}

08000a3c <__aeabi_dcmpeq>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff fff4 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a44:	bf0c      	ite	eq
 8000a46:	2001      	moveq	r0, #1
 8000a48:	2000      	movne	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmplt>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffea 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a58:	bf34      	ite	cc
 8000a5a:	2001      	movcc	r0, #1
 8000a5c:	2000      	movcs	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmple>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffe0 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpge>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffce 	bl	8000a1c <__aeabi_cdrcmple>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpgt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffc4 	bl	8000a1c <__aeabi_cdrcmple>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpun>:
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x10>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d10a      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__aeabi_dcmpun+0x20>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0001 	mov.w	r0, #1
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b9a6 	b.w	8000f60 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f83e 	bl	8000c9c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_d2lz>:
 8000c2c:	b538      	push	{r3, r4, r5, lr}
 8000c2e:	460c      	mov	r4, r1
 8000c30:	4605      	mov	r5, r0
 8000c32:	4621      	mov	r1, r4
 8000c34:	4628      	mov	r0, r5
 8000c36:	2200      	movs	r2, #0
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f7ff ff09 	bl	8000a50 <__aeabi_dcmplt>
 8000c3e:	b928      	cbnz	r0, 8000c4c <__aeabi_d2lz+0x20>
 8000c40:	4628      	mov	r0, r5
 8000c42:	4621      	mov	r1, r4
 8000c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c48:	f000 b80a 	b.w	8000c60 <__aeabi_d2ulz>
 8000c4c:	4628      	mov	r0, r5
 8000c4e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c52:	f000 f805 	bl	8000c60 <__aeabi_d2ulz>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	bd38      	pop	{r3, r4, r5, pc}
 8000c5e:	bf00      	nop

08000c60 <__aeabi_d2ulz>:
 8000c60:	b5d0      	push	{r4, r6, r7, lr}
 8000c62:	2200      	movs	r2, #0
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <__aeabi_d2ulz+0x34>)
 8000c66:	4606      	mov	r6, r0
 8000c68:	460f      	mov	r7, r1
 8000c6a:	f7ff fc7f 	bl	800056c <__aeabi_dmul>
 8000c6e:	f7ff ff55 	bl	8000b1c <__aeabi_d2uiz>
 8000c72:	4604      	mov	r4, r0
 8000c74:	f7ff fc00 	bl	8000478 <__aeabi_ui2d>
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <__aeabi_d2ulz+0x38>)
 8000c7c:	f7ff fc76 	bl	800056c <__aeabi_dmul>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4630      	mov	r0, r6
 8000c86:	4639      	mov	r1, r7
 8000c88:	f7ff fab8 	bl	80001fc <__aeabi_dsub>
 8000c8c:	f7ff ff46 	bl	8000b1c <__aeabi_d2uiz>
 8000c90:	4621      	mov	r1, r4
 8000c92:	bdd0      	pop	{r4, r6, r7, pc}
 8000c94:	3df00000 	.word	0x3df00000
 8000c98:	41f00000 	.word	0x41f00000

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9e08      	ldr	r6, [sp, #32]
 8000ca2:	460d      	mov	r5, r1
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	468e      	mov	lr, r1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f040 8083 	bne.w	8000db4 <__udivmoddi4+0x118>
 8000cae:	428a      	cmp	r2, r1
 8000cb0:	4617      	mov	r7, r2
 8000cb2:	d947      	bls.n	8000d44 <__udivmoddi4+0xa8>
 8000cb4:	fab2 f382 	clz	r3, r2
 8000cb8:	b14b      	cbz	r3, 8000cce <__udivmoddi4+0x32>
 8000cba:	f1c3 0120 	rsb	r1, r3, #32
 8000cbe:	fa05 fe03 	lsl.w	lr, r5, r3
 8000cc2:	fa20 f101 	lsr.w	r1, r0, r1
 8000cc6:	409f      	lsls	r7, r3
 8000cc8:	ea41 0e0e 	orr.w	lr, r1, lr
 8000ccc:	409c      	lsls	r4, r3
 8000cce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd2:	fbbe fcf8 	udiv	ip, lr, r8
 8000cd6:	fa1f f987 	uxth.w	r9, r7
 8000cda:	fb08 e21c 	mls	r2, r8, ip, lr
 8000cde:	fb0c f009 	mul.w	r0, ip, r9
 8000ce2:	0c21      	lsrs	r1, r4, #16
 8000ce4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x66>
 8000cec:	18ba      	adds	r2, r7, r2
 8000cee:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000cf2:	f080 8118 	bcs.w	8000f26 <__udivmoddi4+0x28a>
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	f240 8115 	bls.w	8000f26 <__udivmoddi4+0x28a>
 8000cfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d00:	443a      	add	r2, r7
 8000d02:	1a12      	subs	r2, r2, r0
 8000d04:	fbb2 f0f8 	udiv	r0, r2, r8
 8000d08:	fb08 2210 	mls	r2, r8, r0, r2
 8000d0c:	fb00 f109 	mul.w	r1, r0, r9
 8000d10:	b2a4      	uxth	r4, r4
 8000d12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d16:	42a1      	cmp	r1, r4
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0x92>
 8000d1a:	193c      	adds	r4, r7, r4
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	f080 8103 	bcs.w	8000f2a <__udivmoddi4+0x28e>
 8000d24:	42a1      	cmp	r1, r4
 8000d26:	f240 8100 	bls.w	8000f2a <__udivmoddi4+0x28e>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	1a64      	subs	r4, r4, r1
 8000d30:	2100      	movs	r1, #0
 8000d32:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d36:	b11e      	cbz	r6, 8000d40 <__udivmoddi4+0xa4>
 8000d38:	2200      	movs	r2, #0
 8000d3a:	40dc      	lsrs	r4, r3
 8000d3c:	e9c6 4200 	strd	r4, r2, [r6]
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	b902      	cbnz	r2, 8000d48 <__udivmoddi4+0xac>
 8000d46:	deff      	udf	#255	; 0xff
 8000d48:	fab2 f382 	clz	r3, r2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14f      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d50:	1a8d      	subs	r5, r1, r2
 8000d52:	2101      	movs	r1, #1
 8000d54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d58:	fa1f f882 	uxth.w	r8, r2
 8000d5c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000d60:	fb0e 551c 	mls	r5, lr, ip, r5
 8000d64:	fb08 f00c 	mul.w	r0, r8, ip
 8000d68:	0c22      	lsrs	r2, r4, #16
 8000d6a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000d6e:	42a8      	cmp	r0, r5
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0xe6>
 8000d72:	197d      	adds	r5, r7, r5
 8000d74:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000d78:	d202      	bcs.n	8000d80 <__udivmoddi4+0xe4>
 8000d7a:	42a8      	cmp	r0, r5
 8000d7c:	f200 80e9 	bhi.w	8000f52 <__udivmoddi4+0x2b6>
 8000d80:	4694      	mov	ip, r2
 8000d82:	1a2d      	subs	r5, r5, r0
 8000d84:	fbb5 f0fe 	udiv	r0, r5, lr
 8000d88:	fb0e 5510 	mls	r5, lr, r0, r5
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	b2a4      	uxth	r4, r4
 8000d92:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d96:	45a0      	cmp	r8, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x10e>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da0:	d202      	bcs.n	8000da8 <__udivmoddi4+0x10c>
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	f200 80d9 	bhi.w	8000f5a <__udivmoddi4+0x2be>
 8000da8:	4610      	mov	r0, r2
 8000daa:	eba4 0408 	sub.w	r4, r4, r8
 8000dae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db2:	e7c0      	b.n	8000d36 <__udivmoddi4+0x9a>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	f000 80b1 	beq.w	8000f20 <__udivmoddi4+0x284>
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	e9c6 0500 	strd	r0, r5, [r6]
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f183 	clz	r1, r3
 8000dce:	2900      	cmp	r1, #0
 8000dd0:	d14b      	bne.n	8000e6a <__udivmoddi4+0x1ce>
 8000dd2:	42ab      	cmp	r3, r5
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b9 	bhi.w	8000f4e <__udivmoddi4+0x2b2>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb65 0303 	sbc.w	r3, r5, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d0aa      	beq.n	8000d40 <__udivmoddi4+0xa4>
 8000dea:	e9c6 4e00 	strd	r4, lr, [r6]
 8000dee:	e7a7      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000df0:	409f      	lsls	r7, r3
 8000df2:	f1c3 0220 	rsb	r2, r3, #32
 8000df6:	40d1      	lsrs	r1, r2
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e00:	fa1f f887 	uxth.w	r8, r7
 8000e04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e08:	fa24 f202 	lsr.w	r2, r4, r2
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	fb00 fc08 	mul.w	ip, r0, r8
 8000e12:	432a      	orrs	r2, r5
 8000e14:	0c15      	lsrs	r5, r2, #16
 8000e16:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000e1a:	45ac      	cmp	ip, r5
 8000e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x19a>
 8000e22:	197d      	adds	r5, r7, r5
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	f080 808f 	bcs.w	8000f4a <__udivmoddi4+0x2ae>
 8000e2c:	45ac      	cmp	ip, r5
 8000e2e:	f240 808c 	bls.w	8000f4a <__udivmoddi4+0x2ae>
 8000e32:	3802      	subs	r0, #2
 8000e34:	443d      	add	r5, r7
 8000e36:	eba5 050c 	sub.w	r5, r5, ip
 8000e3a:	fbb5 f1fe 	udiv	r1, r5, lr
 8000e3e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000e42:	fb01 f908 	mul.w	r9, r1, r8
 8000e46:	b295      	uxth	r5, r2
 8000e48:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000e4c:	45a9      	cmp	r9, r5
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	197d      	adds	r5, r7, r5
 8000e52:	f101 32ff 	add.w	r2, r1, #4294967295
 8000e56:	d274      	bcs.n	8000f42 <__udivmoddi4+0x2a6>
 8000e58:	45a9      	cmp	r9, r5
 8000e5a:	d972      	bls.n	8000f42 <__udivmoddi4+0x2a6>
 8000e5c:	3902      	subs	r1, #2
 8000e5e:	443d      	add	r5, r7
 8000e60:	eba5 0509 	sub.w	r5, r5, r9
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e778      	b.n	8000d5c <__udivmoddi4+0xc0>
 8000e6a:	f1c1 0720 	rsb	r7, r1, #32
 8000e6e:	408b      	lsls	r3, r1
 8000e70:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e74:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e78:	fa25 f407 	lsr.w	r4, r5, r7
 8000e7c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e80:	fbb4 f9fe 	udiv	r9, r4, lr
 8000e84:	fa1f f88c 	uxth.w	r8, ip
 8000e88:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e8c:	fa20 f307 	lsr.w	r3, r0, r7
 8000e90:	fb09 fa08 	mul.w	sl, r9, r8
 8000e94:	408d      	lsls	r5, r1
 8000e96:	431d      	orrs	r5, r3
 8000e98:	0c2b      	lsrs	r3, r5, #16
 8000e9a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e9e:	45a2      	cmp	sl, r4
 8000ea0:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea4:	fa00 f301 	lsl.w	r3, r0, r1
 8000ea8:	d909      	bls.n	8000ebe <__udivmoddi4+0x222>
 8000eaa:	eb1c 0404 	adds.w	r4, ip, r4
 8000eae:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb2:	d248      	bcs.n	8000f46 <__udivmoddi4+0x2aa>
 8000eb4:	45a2      	cmp	sl, r4
 8000eb6:	d946      	bls.n	8000f46 <__udivmoddi4+0x2aa>
 8000eb8:	f1a9 0902 	sub.w	r9, r9, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	eba4 040a 	sub.w	r4, r4, sl
 8000ec2:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ec6:	fb0e 4410 	mls	r4, lr, r0, r4
 8000eca:	fb00 fa08 	mul.w	sl, r0, r8
 8000ece:	b2ad      	uxth	r5, r5
 8000ed0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed4:	45a2      	cmp	sl, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x24e>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ee0:	d22d      	bcs.n	8000f3e <__udivmoddi4+0x2a2>
 8000ee2:	45a2      	cmp	sl, r4
 8000ee4:	d92b      	bls.n	8000f3e <__udivmoddi4+0x2a2>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4464      	add	r4, ip
 8000eea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	eba4 040a 	sub.w	r4, r4, sl
 8000ef6:	454c      	cmp	r4, r9
 8000ef8:	46c6      	mov	lr, r8
 8000efa:	464d      	mov	r5, r9
 8000efc:	d319      	bcc.n	8000f32 <__udivmoddi4+0x296>
 8000efe:	d016      	beq.n	8000f2e <__udivmoddi4+0x292>
 8000f00:	b15e      	cbz	r6, 8000f1a <__udivmoddi4+0x27e>
 8000f02:	ebb3 020e 	subs.w	r2, r3, lr
 8000f06:	eb64 0405 	sbc.w	r4, r4, r5
 8000f0a:	fa04 f707 	lsl.w	r7, r4, r7
 8000f0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f12:	431f      	orrs	r7, r3
 8000f14:	40cc      	lsrs	r4, r1
 8000f16:	e9c6 7400 	strd	r7, r4, [r6]
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f20:	4631      	mov	r1, r6
 8000f22:	4630      	mov	r0, r6
 8000f24:	e70c      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000f26:	468c      	mov	ip, r1
 8000f28:	e6eb      	b.n	8000d02 <__udivmoddi4+0x66>
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	e6ff      	b.n	8000d2e <__udivmoddi4+0x92>
 8000f2e:	4543      	cmp	r3, r8
 8000f30:	d2e6      	bcs.n	8000f00 <__udivmoddi4+0x264>
 8000f32:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f36:	eb69 050c 	sbc.w	r5, r9, ip
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7e0      	b.n	8000f00 <__udivmoddi4+0x264>
 8000f3e:	4628      	mov	r0, r5
 8000f40:	e7d3      	b.n	8000eea <__udivmoddi4+0x24e>
 8000f42:	4611      	mov	r1, r2
 8000f44:	e78c      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f46:	4681      	mov	r9, r0
 8000f48:	e7b9      	b.n	8000ebe <__udivmoddi4+0x222>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e773      	b.n	8000e36 <__udivmoddi4+0x19a>
 8000f4e:	4608      	mov	r0, r1
 8000f50:	e749      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f52:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f56:	443d      	add	r5, r7
 8000f58:	e713      	b.n	8000d82 <__udivmoddi4+0xe6>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	443c      	add	r4, r7
 8000f5e:	e724      	b.n	8000daa <__udivmoddi4+0x10e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <Mount_USB>:




void Mount_USB (void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4905      	ldr	r1, [pc, #20]	; (8000f80 <Mount_USB+0x1c>)
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <Mount_USB+0x20>)
 8000f6e:	f010 fe8f 	bl	8011c90 <f_mount>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <Mount_USB+0x24>)
 8000f78:	701a      	strb	r2, [r3, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20010cd0 	.word	0x20010cd0
 8000f84:	20010f00 	.word	0x20010f00
 8000f88:	2000b860 	.word	0x2000b860

08000f8c <Unmount_USB>:
void Unmount_USB (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	4905      	ldr	r1, [pc, #20]	; (8000fa8 <Unmount_USB+0x1c>)
 8000f94:	2000      	movs	r0, #0
 8000f96:	f010 fe7b 	bl	8011c90 <f_mount>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b03      	ldr	r3, [pc, #12]	; (8000fac <Unmount_USB+0x20>)
 8000fa0:	701a      	strb	r2, [r3, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20010cd0 	.word	0x20010cd0
 8000fac:	2000b860 	.word	0x2000b860

08000fb0 <Scan_USB>:
char *path[20*8] = {0};
/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	6018      	str	r0, [r3, #0]
    DIR dir;
    UINT i=0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c


    fresult = f_opendir(&dir, *path);                       /* Open the directory */
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <Scan_USB+0xd4>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f011 fbcc 	bl	801276a <f_opendir>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <Scan_USB+0xd8>)
 8000fd8:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <Scan_USB+0xd8>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d143      	bne.n	800106a <Scan_USB+0xba>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4929      	ldr	r1, [pc, #164]	; (800108c <Scan_USB+0xdc>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f011 fc73 	bl	80128d4 <f_readdir>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <Scan_USB+0xd8>)
 8000ff4:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <Scan_USB+0xd8>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d130      	bne.n	8001060 <Scan_USB+0xb0>
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <Scan_USB+0xdc>)
 8001000:	7a5b      	ldrb	r3, [r3, #9]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d02c      	beq.n	8001060 <Scan_USB+0xb0>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <Scan_USB+0xdc>)
 8001008:	7a1b      	ldrb	r3, [r3, #8]
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0e7      	beq.n	8000fe2 <Scan_USB+0x32>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001012:	491f      	ldr	r1, [pc, #124]	; (8001090 <Scan_USB+0xe0>)
 8001014:	481f      	ldr	r0, [pc, #124]	; (8001094 <Scan_USB+0xe4>)
 8001016:	f7ff f8db 	bl	80001d0 <strcmp>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d01a      	beq.n	8001056 <Scan_USB+0xa6>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8001020:	491b      	ldr	r1, [pc, #108]	; (8001090 <Scan_USB+0xe0>)
 8001022:	481d      	ldr	r0, [pc, #116]	; (8001098 <Scan_USB+0xe8>)
 8001024:	f7ff f8d4 	bl	80001d0 <strcmp>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d015      	beq.n	800105a <Scan_USB+0xaa>
                fresult = Scan_USB(*path);                     /* Enter the directory */
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <Scan_USB+0xd4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ffbc 	bl	8000fb0 <Scan_USB>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <Scan_USB+0xd8>)
 800103e:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <Scan_USB+0xd8>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10a      	bne.n	800105e <Scan_USB+0xae>
                path[i] = 0;
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <Scan_USB+0xd4>)
 800104a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800104e:	2100      	movs	r1, #0
 8001050:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001054:	e7c5      	b.n	8000fe2 <Scan_USB+0x32>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001056:	bf00      	nop
 8001058:	e7c3      	b.n	8000fe2 <Scan_USB+0x32>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800105a:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 800105c:	e7c1      	b.n	8000fe2 <Scan_USB+0x32>
                if (fresult != FR_OK) break;
 800105e:	bf00      	nop
            }
            else
            {
            }
        }
        f_closedir(&dir);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4618      	mov	r0, r3
 8001066:	f011 fc08 	bl	801287a <f_closedir>
    }
    free(*path);
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <Scan_USB+0xd4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f015 fa08 	bl	8016484 <free>
    return fresult;
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <Scan_USB+0xd8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000042c 	.word	0x2000042c
 8001088:	2000b860 	.word	0x2000b860
 800108c:	2000b864 	.word	0x2000b864
 8001090:	2000b86d 	.word	0x2000b86d
 8001094:	0801aba0 	.word	0x0801aba0
 8001098:	0801abac 	.word	0x0801abac

0800109c <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 80010a6:	491c      	ldr	r1, [pc, #112]	; (8001118 <Write_File+0x7c>)
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f011 fc61 	bl	8012970 <f_stat>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <Write_File+0x80>)
 80010b4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <Write_File+0x80>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <Write_File+0x28>
	{
	    return fresult;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <Write_File+0x80>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	e025      	b.n	8001110 <Write_File+0x74>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 80010c4:	2202      	movs	r2, #2
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4815      	ldr	r0, [pc, #84]	; (8001120 <Write_File+0x84>)
 80010ca:	f010 fe49 	bl	8011d60 <f_open>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <Write_File+0x80>)
 80010d4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <Write_File+0x80>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <Write_File+0x48>
	    {
	        return fresult;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <Write_File+0x80>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	e015      	b.n	8001110 <Write_File+0x74>
	    }

	    else
	    {

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f7ff f87d 	bl	80001e4 <strlen>
 80010ea:	4602      	mov	r2, r0
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <Write_File+0x88>)
 80010ee:	6839      	ldr	r1, [r7, #0]
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <Write_File+0x84>)
 80010f2:	f011 f84a 	bl	801218a <f_write>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <Write_File+0x80>)
 80010fc:	701a      	strb	r2, [r3, #0]

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <Write_File+0x84>)
 8001100:	f011 fb03 	bl	801270a <f_close>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <Write_File+0x80>)
 800110a:	701a      	strb	r2, [r3, #0]
	    }
	    return fresult;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <Write_File+0x80>)
 800110e:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000b864 	.word	0x2000b864
 800111c:	2000b860 	.word	0x2000b860
 8001120:	20010cd4 	.word	0x20010cd4
 8001124:	2000b85c 	.word	0x2000b85c

08001128 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8001130:	4915      	ldr	r1, [pc, #84]	; (8001188 <Create_File+0x60>)
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f011 fc1c 	bl	8012970 <f_stat>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <Create_File+0x64>)
 800113e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <Create_File+0x64>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <Create_File+0x26>
	{
	    return fresult;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <Create_File+0x64>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	e018      	b.n	8001180 <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 800114e:	220b      	movs	r2, #11
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	480f      	ldr	r0, [pc, #60]	; (8001190 <Create_File+0x68>)
 8001154:	f010 fe04 	bl	8011d60 <f_open>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <Create_File+0x64>)
 800115e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <Create_File+0x64>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <Create_File+0x46>
		{

		    return fresult;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <Create_File+0x64>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	e008      	b.n	8001180 <Create_File+0x58>
		else
		{

		}

		fresult = f_close(&USBHFile);
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <Create_File+0x68>)
 8001170:	f011 facb 	bl	801270a <f_close>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <Create_File+0x64>)
 800117a:	701a      	strb	r2, [r3, #0]

	}
    return fresult;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <Create_File+0x64>)
 800117e:	781b      	ldrb	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000b864 	.word	0x2000b864
 800118c:	2000b860 	.word	0x2000b860
 8001190:	20010cd4 	.word	0x20010cd4

08001194 <Check_USB_Details>:

    return fresult;
}

void Check_USB_Details (void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <Check_USB_Details+0x80>)
 800119a:	491f      	ldr	r1, [pc, #124]	; (8001218 <Check_USB_Details+0x84>)
 800119c:	481f      	ldr	r0, [pc, #124]	; (800121c <Check_USB_Details+0x88>)
 800119e:	f011 fc3a 	bl	8012a16 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <Check_USB_Details+0x80>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80011aa:	3b02      	subs	r3, #2
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <Check_USB_Details+0x80>)
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f95d 	bl	8000478 <__aeabi_ui2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <Check_USB_Details+0x8c>)
 80011c4:	f7ff f9d2 	bl	800056c <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fca4 	bl	8000b1c <__aeabi_d2uiz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a13      	ldr	r2, [pc, #76]	; (8001224 <Check_USB_Details+0x90>)
 80011d8:	6013      	str	r3, [r2, #0]

    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <Check_USB_Details+0x80>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <Check_USB_Details+0x84>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	fb03 f302 	mul.w	r3, r3, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f943 	bl	8000478 <__aeabi_ui2d>
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <Check_USB_Details+0x8c>)
 80011f8:	f7ff f9b8 	bl	800056c <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fc8a 	bl	8000b1c <__aeabi_d2uiz>
 8001208:	4603      	mov	r3, r0
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <Check_USB_Details+0x94>)
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000b854 	.word	0x2000b854
 8001218:	2000b84c 	.word	0x2000b84c
 800121c:	0801abc8 	.word	0x0801abc8
 8001220:	3fe00000 	.word	0x3fe00000
 8001224:	2000b87c 	.word	0x2000b87c
 8001228:	2000b858 	.word	0x2000b858

0800122c <getTime>:
#include "RTC_driver.h"
#include "light_driver.h"


void getTime(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
 8001230:	2200      	movs	r2, #0
 8001232:	4905      	ldr	r1, [pc, #20]	; (8001248 <getTime+0x1c>)
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <getTime+0x20>)
 8001236:	f009 f973 	bl	800a520 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate,RTC_FORMAT_BIN);
 800123a:	2200      	movs	r2, #0
 800123c:	4904      	ldr	r1, [pc, #16]	; (8001250 <getTime+0x24>)
 800123e:	4803      	ldr	r0, [pc, #12]	; (800124c <getTime+0x20>)
 8001240:	f009 fa60 	bl	800a704 <HAL_RTC_GetDate>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20007790 	.word	0x20007790
 800124c:	20010af4 	.word	0x20010af4
 8001250:	2000779c 	.word	0x2000779c

08001254 <setTimeDate>:

void setTimeDate(uint8_t month, uint8_t day, uint8_t year, uint8_t hours, uint8_t min, uint8_t sec)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4604      	mov	r4, r0
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4623      	mov	r3, r4
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	4603      	mov	r3, r0
 8001268:	71bb      	strb	r3, [r7, #6]
 800126a:	460b      	mov	r3, r1
 800126c:	717b      	strb	r3, [r7, #5]
 800126e:	4613      	mov	r3, r2
 8001270:	713b      	strb	r3, [r7, #4]
	sTime.Hours = hours;
 8001272:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <setTimeDate+0x84>)
 8001274:	793b      	ldrb	r3, [r7, #4]
 8001276:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 8001278:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <setTimeDate+0x84>)
 800127a:	7e3b      	ldrb	r3, [r7, #24]
 800127c:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <setTimeDate+0x84>)
 8001280:	7f3b      	ldrb	r3, [r7, #28]
 8001282:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <setTimeDate+0x84>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <setTimeDate+0x84>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
	if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 8001290:	2201      	movs	r2, #1
 8001292:	4911      	ldr	r1, [pc, #68]	; (80012d8 <setTimeDate+0x84>)
 8001294:	4811      	ldr	r0, [pc, #68]	; (80012dc <setTimeDate+0x88>)
 8001296:	f009 f88d 	bl	800a3b4 <HAL_RTC_SetTime>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <setTimeDate+0x50>
 80012a0:	f003 fa86 	bl	80047b0 <Error_Handler>

	sDate.WeekDay = 0x01;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <setTimeDate+0x8c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
	sDate.Month = month;
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <setTimeDate+0x8c>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	7053      	strb	r3, [r2, #1]
	sDate.Date = day;
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <setTimeDate+0x8c>)
 80012b2:	79bb      	ldrb	r3, [r7, #6]
 80012b4:	7093      	strb	r3, [r2, #2]
	sDate.Year = year;
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <setTimeDate+0x8c>)
 80012b8:	797b      	ldrb	r3, [r7, #5]
 80012ba:	70d3      	strb	r3, [r2, #3]
	if(HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 80012bc:	2201      	movs	r2, #1
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <setTimeDate+0x8c>)
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <setTimeDate+0x88>)
 80012c2:	f009 f97f 	bl	800a5c4 <HAL_RTC_SetDate>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <setTimeDate+0x7c>
 80012cc:	f003 fa70 	bl	80047b0 <Error_Handler>
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	20007790 	.word	0x20007790
 80012dc:	20010af4 	.word	0x20010af4
 80012e0:	2000779c 	.word	0x2000779c

080012e4 <getMedianNum>:
#include "TDS_driver.h"
#include "main.h"
#include "sensors.h"

int getMedianNum(int bArray[], int iFilterLen)
{
 80012e4:	b4b0      	push	{r4, r5, r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	466b      	mov	r3, sp
 80012f0:	461d      	mov	r5, r3
      int bTab[iFilterLen];
 80012f2:	683c      	ldr	r4, [r7, #0]
 80012f4:	1e63      	subs	r3, r4, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	4623      	mov	r3, r4
 80012fa:	4618      	mov	r0, r3
 80012fc:	f04f 0100 	mov.w	r1, #0
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	014b      	lsls	r3, r1, #5
 800130a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800130e:	0142      	lsls	r2, r0, #5
 8001310:	4623      	mov	r3, r4
 8001312:	4618      	mov	r0, r3
 8001314:	f04f 0100 	mov.w	r1, #0
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	014b      	lsls	r3, r1, #5
 8001322:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001326:	0142      	lsls	r2, r0, #5
 8001328:	4623      	mov	r3, r4
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	3307      	adds	r3, #7
 800132e:	08db      	lsrs	r3, r3, #3
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	ebad 0d03 	sub.w	sp, sp, r3
 8001336:	466b      	mov	r3, sp
 8001338:	3303      	adds	r3, #3
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	60bb      	str	r3, [r7, #8]
      for (int i = 0; i<iFilterLen; i++)
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	e00b      	b.n	800135e <getMedianNum+0x7a>
      bTab[i] = bArray[i];
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	6819      	ldr	r1, [r3, #0]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (int i = 0; i<iFilterLen; i++)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	3301      	adds	r3, #1
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	dbef      	blt.n	8001346 <getMedianNum+0x62>
      int i, j, bTemp;
      for (j = 0; j < iFilterLen - 1; j++)
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	e02e      	b.n	80013ca <getMedianNum+0xe6>
      {
      for (i = 0; i < iFilterLen - j - 1; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e021      	b.n	80013b6 <getMedianNum+0xd2>
          {
        if (bTab[i] > bTab[i + 1])
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	1c59      	adds	r1, r3, #1
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001384:	429a      	cmp	r2, r3
 8001386:	dd13      	ble.n	80013b0 <getMedianNum+0xcc>
            {
        bTemp = bTab[i];
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	61fb      	str	r3, [r7, #28]
            bTab[i] = bTab[i + 1];
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        bTab[i + 1] = bTemp;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	69f9      	ldr	r1, [r7, #28]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (i = 0; i < iFilterLen - j - 1; i++)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	3b01      	subs	r3, #1
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbd6      	blt.n	8001372 <getMedianNum+0x8e>
      for (j = 0; j < iFilterLen - 1; j++)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	3301      	adds	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbcb      	blt.n	800136c <getMedianNum+0x88>
         }
      }
      }
      if ((iFilterLen & 1) > 0)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dd0a      	ble.n	80013f4 <getMedianNum+0x110>
    bTemp = bTab[(iFilterLen - 1) / 2];
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	0fda      	lsrs	r2, r3, #31
 80013e4:	4413      	add	r3, r2
 80013e6:	105b      	asrs	r3, r3, #1
 80013e8:	461a      	mov	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e014      	b.n	800141e <getMedianNum+0x13a>
      else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	0fda      	lsrs	r2, r3, #31
 80013f8:	4413      	add	r3, r2
 80013fa:	105b      	asrs	r3, r3, #1
 80013fc:	461a      	mov	r2, r3
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	0fd9      	lsrs	r1, r3, #31
 8001408:	440b      	add	r3, r1
 800140a:	105b      	asrs	r3, r3, #1
 800140c:	1e59      	subs	r1, r3, #1
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001414:	4413      	add	r3, r2
 8001416:	0fda      	lsrs	r2, r3, #31
 8001418:	4413      	add	r3, r2
 800141a:	105b      	asrs	r3, r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
      return bTemp;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	46ad      	mov	sp, r5
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	bcb0      	pop	{r4, r5, r7}
 800142a:	4770      	bx	lr

0800142c <fanOn>:

double system_fan_sp = 5.5;
double plant_fan_sp = 3.5;
double heat_cool_fan_sp = 2.5; // set default fan speed values
void fanOn()
{
 800142c:	b598      	push	{r3, r4, r7, lr}
 800142e:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// start heater cooler fan control
 8001430:	2100      	movs	r1, #0
 8001432:	482f      	ldr	r0, [pc, #188]	; (80014f0 <fanOn+0xc4>)
 8001434:	f009 fcf2 	bl	800ae1c <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001438:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <fanOn+0xc8>)
 800143a:	f640 323f 	movw	r2, #2879	; 0xb3f
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;	// sets the fan speed
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <fanOn+0xc8>)
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f817 	bl	8000478 <__aeabi_ui2d>
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <fanOn+0xcc>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f9b6 	bl	80007c0 <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4c26      	ldr	r4, [pc, #152]	; (80014f4 <fanOn+0xc8>)
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fb5d 	bl	8000b1c <__aeabi_d2uiz>
 8001462:	4603      	mov	r3, r0
 8001464:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <fanOn+0xc8>)
 8001468:	f245 0214 	movw	r2, #20500	; 0x5014
 800146c:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// start system fan control
 800146e:	2108      	movs	r1, #8
 8001470:	481f      	ldr	r0, [pc, #124]	; (80014f0 <fanOn+0xc4>)
 8001472:	f009 fcd3 	bl	800ae1c <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <fanOn+0xc8>)
 8001478:	f640 323f 	movw	r2, #2879	; 0xb3f
 800147c:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR3 = (TIM1->ARR)/system_fan_sp;		// sets the fan speed
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <fanOn+0xc8>)
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	4618      	mov	r0, r3
 8001484:	f7fe fff8 	bl	8000478 <__aeabi_ui2d>
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <fanOn+0xd0>)
 800148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148e:	f7ff f997 	bl	80007c0 <__aeabi_ddiv>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4c17      	ldr	r4, [pc, #92]	; (80014f4 <fanOn+0xc8>)
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fb3e 	bl	8000b1c <__aeabi_d2uiz>
 80014a0:	4603      	mov	r3, r0
 80014a2:	63e3      	str	r3, [r4, #60]	; 0x3c
   TIM1->CNT = 20500;
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <fanOn+0xc8>)
 80014a6:	f245 0214 	movw	r2, #20500	; 0x5014
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);	// start plant fan control
 80014ac:	2100      	movs	r1, #0
 80014ae:	4814      	ldr	r0, [pc, #80]	; (8001500 <fanOn+0xd4>)
 80014b0:	f009 fcb4 	bl	800ae1c <HAL_TIM_PWM_Start>
   TIM10->ARR = 2879;							// sets the PWM frequency of 25Mhz
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <fanOn+0xd8>)
 80014b6:	f640 323f 	movw	r2, #2879	; 0xb3f
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM10->CCR1 = (TIM10->ARR)/plant_fan_sp;		// sets the fan speed
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <fanOn+0xd8>)
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ffd9 	bl	8000478 <__aeabi_ui2d>
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <fanOn+0xdc>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f978 	bl	80007c0 <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4c0b      	ldr	r4, [pc, #44]	; (8001504 <fanOn+0xd8>)
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fb1f 	bl	8000b1c <__aeabi_d2uiz>
 80014de:	4603      	mov	r3, r0
 80014e0:	6363      	str	r3, [r4, #52]	; 0x34
   TIM10->CNT = 20500;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <fanOn+0xd8>)
 80014e4:	f245 0214 	movw	r2, #20500	; 0x5014
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014ea:	bf00      	nop
 80014ec:	bd98      	pop	{r3, r4, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20010bdc 	.word	0x20010bdc
 80014f4:	40010000 	.word	0x40010000
 80014f8:	20000010 	.word	0x20000010
 80014fc:	20000000 	.word	0x20000000
 8001500:	2000b990 	.word	0x2000b990
 8001504:	40014400 	.word	0x40014400
 8001508:	20000008 	.word	0x20000008

0800150c <setFanSpeed>:
   TIM10->CCR1 = 0;								// sets the fan speed
   TIM10->CNT = 20500;

}
void setFanSpeed(float sys_fan,float plant_fan,float heat_cool_fan)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	system_fan_sp = sys_fan;
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7fe ffcf 	bl	80004bc <__aeabi_f2d>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	490c      	ldr	r1, [pc, #48]	; (8001554 <setFanSpeed+0x48>)
 8001524:	e9c1 2300 	strd	r2, r3, [r1]
	plant_fan_sp = plant_fan;
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f7fe ffc7 	bl	80004bc <__aeabi_f2d>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4909      	ldr	r1, [pc, #36]	; (8001558 <setFanSpeed+0x4c>)
 8001534:	e9c1 2300 	strd	r2, r3, [r1]
	heat_cool_fan_sp = heat_cool_fan;
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7fe ffbf 	bl	80004bc <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4906      	ldr	r1, [pc, #24]	; (800155c <setFanSpeed+0x50>)
 8001544:	e9c1 2300 	strd	r2, r3, [r1]
	fanOn();
 8001548:	f7ff ff70 	bl	800142c <fanOn>
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000000 	.word	0x20000000
 8001558:	20000008 	.word	0x20000008
 800155c:	20000010 	.word	0x20000010

08001560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <vApplicationGetIdleTaskMemory+0x2c>)
 8001570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <vApplicationGetIdleTaskMemory+0x30>)
 8001576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800157e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200006ac 	.word	0x200006ac
 8001590:	20000760 	.word	0x20000760

08001594 <heatOn>:
#include "stm32f2xx_hal.h"
#include "main.h"
#include "sensors.h"
#include "heater_driver.h"
void heatOn()
{taskENTER_CRITICAL();
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
 8001598:	f014 f830 	bl	80155fc <vPortEnterCritical>
{
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_Pin,GPIO_PIN_RESET);			// set to heat
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <heatOn+0x28>)
 80015a4:	f006 fba1 	bl	8007cea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_enable_Pin,GPIO_PIN_SET);	// enable the heater
 80015a8:	2201      	movs	r2, #1
 80015aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ae:	4803      	ldr	r0, [pc, #12]	; (80015bc <heatOn+0x28>)
 80015b0:	f006 fb9b 	bl	8007cea <HAL_GPIO_WritePin>
}taskEXIT_CRITICAL();
 80015b4:	f014 f852 	bl	801565c <vPortExitCritical>
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000

080015c0 <heatCoolOff>:
void heatCoolOff()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_enable_Pin,GPIO_PIN_RESET);	// disable the heater
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ca:	4802      	ldr	r0, [pc, #8]	; (80015d4 <heatCoolOff+0x14>)
 80015cc:	f006 fb8d 	bl	8007cea <HAL_GPIO_WritePin>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021000 	.word	0x40021000

080015d8 <coolOn>:
void coolOn()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_Pin,GPIO_PIN_SET);		// set to cool
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <coolOn+0x20>)
 80015e4:	f006 fb81 	bl	8007cea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_enable_Pin,GPIO_PIN_SET);	// enable the cooler
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ee:	4802      	ldr	r0, [pc, #8]	; (80015f8 <coolOn+0x20>)
 80015f0:	f006 fb7b 	bl	8007cea <HAL_GPIO_WritePin>
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	00000000 	.word	0x00000000

08001600 <floatToString>:
int header_write = 0;

double fpnumber;
long int befdec, aftdec;
void floatToString(double FP_NUM)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	e9c7 0100 	strd	r0, r1, [r7]
	fpnumber = FP_NUM;					// Fractional part is truncated
 800160a:	4990      	ldr	r1, [pc, #576]	; (800184c <floatToString+0x24c>)
 800160c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001610:	e9c1 2300 	strd	r2, r3, [r1]
	befdec = fpnumber;                  // 12.163456 becomes 12
 8001614:	4b8d      	ldr	r3, [pc, #564]	; (800184c <floatToString+0x24c>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fa55 	bl	8000acc <__aeabi_d2iz>
 8001622:	4603      	mov	r3, r0
 8001624:	4a8a      	ldr	r2, [pc, #552]	; (8001850 <floatToString+0x250>)
 8001626:	6013      	str	r3, [r2, #0]
	aftdec = fpnumber * 100;            // 12.163456 becomes 1216
 8001628:	4b88      	ldr	r3, [pc, #544]	; (800184c <floatToString+0x24c>)
 800162a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	4b88      	ldr	r3, [pc, #544]	; (8001854 <floatToString+0x254>)
 8001634:	f7fe ff9a 	bl	800056c <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff fa44 	bl	8000acc <__aeabi_d2iz>
 8001644:	4603      	mov	r3, r0
 8001646:	4a84      	ldr	r2, [pc, #528]	; (8001858 <floatToString+0x258>)
 8001648:	6013      	str	r3, [r2, #0]
	aftdec = aftdec - (befdec * 100);   // 1216 - 1200 = 16
 800164a:	4b81      	ldr	r3, [pc, #516]	; (8001850 <floatToString+0x250>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001652:	fb02 f203 	mul.w	r2, r2, r3
 8001656:	4b80      	ldr	r3, [pc, #512]	; (8001858 <floatToString+0x258>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a7e      	ldr	r2, [pc, #504]	; (8001858 <floatToString+0x258>)
 800165e:	6013      	str	r3, [r2, #0]
	if (fpnumber < 1)
 8001660:	4b7a      	ldr	r3, [pc, #488]	; (800184c <floatToString+0x24c>)
 8001662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	4b7c      	ldr	r3, [pc, #496]	; (800185c <floatToString+0x25c>)
 800166c:	f7ff f9f0 	bl	8000a50 <__aeabi_dcmplt>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d031      	beq.n	80016da <floatToString+0xda>
	{
		convertedString[0] = '0';
 8001676:	4b7a      	ldr	r3, [pc, #488]	; (8001860 <floatToString+0x260>)
 8001678:	2230      	movs	r2, #48	; 0x30
 800167a:	701a      	strb	r2, [r3, #0]
		convertedString[1] = '.';
 800167c:	4b78      	ldr	r3, [pc, #480]	; (8001860 <floatToString+0x260>)
 800167e:	222e      	movs	r2, #46	; 0x2e
 8001680:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (aftdec/10) + 48;
 8001682:	4b75      	ldr	r3, [pc, #468]	; (8001858 <floatToString+0x258>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a77      	ldr	r2, [pc, #476]	; (8001864 <floatToString+0x264>)
 8001688:	fb82 1203 	smull	r1, r2, r2, r3
 800168c:	1092      	asrs	r2, r2, #2
 800168e:	17db      	asrs	r3, r3, #31
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	3330      	adds	r3, #48	; 0x30
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b71      	ldr	r3, [pc, #452]	; (8001860 <floatToString+0x260>)
 800169a:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (aftdec/1)%10 + 48;
 800169c:	4b6e      	ldr	r3, [pc, #440]	; (8001858 <floatToString+0x258>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b70      	ldr	r3, [pc, #448]	; (8001864 <floatToString+0x264>)
 80016a2:	fb83 1302 	smull	r1, r3, r3, r2
 80016a6:	1099      	asrs	r1, r3, #2
 80016a8:	17d3      	asrs	r3, r2, #31
 80016aa:	1ac9      	subs	r1, r1, r3
 80016ac:	460b      	mov	r3, r1
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	1ad1      	subs	r1, r2, r3
 80016b6:	b2cb      	uxtb	r3, r1
 80016b8:	3330      	adds	r3, #48	; 0x30
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b68      	ldr	r3, [pc, #416]	; (8001860 <floatToString+0x260>)
 80016be:	70da      	strb	r2, [r3, #3]
		convertedString[4] = ' ';
 80016c0:	4b67      	ldr	r3, [pc, #412]	; (8001860 <floatToString+0x260>)
 80016c2:	2220      	movs	r2, #32
 80016c4:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 80016c6:	4b66      	ldr	r3, [pc, #408]	; (8001860 <floatToString+0x260>)
 80016c8:	2220      	movs	r2, #32
 80016ca:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 80016cc:	4b64      	ldr	r3, [pc, #400]	; (8001860 <floatToString+0x260>)
 80016ce:	2220      	movs	r2, #32
 80016d0:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <floatToString+0x260>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	71da      	strb	r2, [r3, #7]
		convertedString[4] = (befdec/1)%10 + 48;
		convertedString[5] = '.';
		convertedString[6] = (aftdec/10) + 48;
		convertedString[7] = '\0';
	}
}
 80016d8:	e25b      	b.n	8001b92 <floatToString+0x592>
	else if ((fpnumber >= 1) && (fpnumber < 10))
 80016da:	4b5c      	ldr	r3, [pc, #368]	; (800184c <floatToString+0x24c>)
 80016dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <floatToString+0x25c>)
 80016e6:	f7ff f9c7 	bl	8000a78 <__aeabi_dcmpge>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d04b      	beq.n	8001788 <floatToString+0x188>
 80016f0:	4b56      	ldr	r3, [pc, #344]	; (800184c <floatToString+0x24c>)
 80016f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	4b5b      	ldr	r3, [pc, #364]	; (8001868 <floatToString+0x268>)
 80016fc:	f7ff f9a8 	bl	8000a50 <__aeabi_dcmplt>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d040      	beq.n	8001788 <floatToString+0x188>
		convertedString[0] = (befdec/1)%10 + 48;
 8001706:	4b52      	ldr	r3, [pc, #328]	; (8001850 <floatToString+0x250>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4b56      	ldr	r3, [pc, #344]	; (8001864 <floatToString+0x264>)
 800170c:	fb83 1302 	smull	r1, r3, r3, r2
 8001710:	1099      	asrs	r1, r3, #2
 8001712:	17d3      	asrs	r3, r2, #31
 8001714:	1ac9      	subs	r1, r1, r3
 8001716:	460b      	mov	r3, r1
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	440b      	add	r3, r1
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	1ad1      	subs	r1, r2, r3
 8001720:	b2cb      	uxtb	r3, r1
 8001722:	3330      	adds	r3, #48	; 0x30
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b4e      	ldr	r3, [pc, #312]	; (8001860 <floatToString+0x260>)
 8001728:	701a      	strb	r2, [r3, #0]
		convertedString[1] = '.';
 800172a:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <floatToString+0x260>)
 800172c:	222e      	movs	r2, #46	; 0x2e
 800172e:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (aftdec/10) + 48;
 8001730:	4b49      	ldr	r3, [pc, #292]	; (8001858 <floatToString+0x258>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a4b      	ldr	r2, [pc, #300]	; (8001864 <floatToString+0x264>)
 8001736:	fb82 1203 	smull	r1, r2, r2, r3
 800173a:	1092      	asrs	r2, r2, #2
 800173c:	17db      	asrs	r3, r3, #31
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	3330      	adds	r3, #48	; 0x30
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4b46      	ldr	r3, [pc, #280]	; (8001860 <floatToString+0x260>)
 8001748:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (aftdec/1)%10 + 48;
 800174a:	4b43      	ldr	r3, [pc, #268]	; (8001858 <floatToString+0x258>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b45      	ldr	r3, [pc, #276]	; (8001864 <floatToString+0x264>)
 8001750:	fb83 1302 	smull	r1, r3, r3, r2
 8001754:	1099      	asrs	r1, r3, #2
 8001756:	17d3      	asrs	r3, r2, #31
 8001758:	1ac9      	subs	r1, r1, r3
 800175a:	460b      	mov	r3, r1
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	1ad1      	subs	r1, r2, r3
 8001764:	b2cb      	uxtb	r3, r1
 8001766:	3330      	adds	r3, #48	; 0x30
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <floatToString+0x260>)
 800176c:	70da      	strb	r2, [r3, #3]
		convertedString[4] = ' ';
 800176e:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <floatToString+0x260>)
 8001770:	2220      	movs	r2, #32
 8001772:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 8001774:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <floatToString+0x260>)
 8001776:	2220      	movs	r2, #32
 8001778:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 800177a:	4b39      	ldr	r3, [pc, #228]	; (8001860 <floatToString+0x260>)
 800177c:	2220      	movs	r2, #32
 800177e:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 8001780:	4b37      	ldr	r3, [pc, #220]	; (8001860 <floatToString+0x260>)
 8001782:	2200      	movs	r2, #0
 8001784:	71da      	strb	r2, [r3, #7]
 8001786:	e204      	b.n	8001b92 <floatToString+0x592>
	else if ((fpnumber >= 10) && (fpnumber < 100))
 8001788:	4b30      	ldr	r3, [pc, #192]	; (800184c <floatToString+0x24c>)
 800178a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b35      	ldr	r3, [pc, #212]	; (8001868 <floatToString+0x268>)
 8001794:	f7ff f970 	bl	8000a78 <__aeabi_dcmpge>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d066      	beq.n	800186c <floatToString+0x26c>
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <floatToString+0x24c>)
 80017a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <floatToString+0x254>)
 80017aa:	f7ff f951 	bl	8000a50 <__aeabi_dcmplt>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d05b      	beq.n	800186c <floatToString+0x26c>
		convertedString[0] = (befdec/10) + 48;
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <floatToString+0x250>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <floatToString+0x264>)
 80017ba:	fb82 1203 	smull	r1, r2, r2, r3
 80017be:	1092      	asrs	r2, r2, #2
 80017c0:	17db      	asrs	r3, r3, #31
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3330      	adds	r3, #48	; 0x30
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b25      	ldr	r3, [pc, #148]	; (8001860 <floatToString+0x260>)
 80017cc:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/1)%10 + 48;
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <floatToString+0x250>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <floatToString+0x264>)
 80017d4:	fb83 1302 	smull	r1, r3, r3, r2
 80017d8:	1099      	asrs	r1, r3, #2
 80017da:	17d3      	asrs	r3, r2, #31
 80017dc:	1ac9      	subs	r1, r1, r3
 80017de:	460b      	mov	r3, r1
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	1ad1      	subs	r1, r2, r3
 80017e8:	b2cb      	uxtb	r3, r1
 80017ea:	3330      	adds	r3, #48	; 0x30
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <floatToString+0x260>)
 80017f0:	705a      	strb	r2, [r3, #1]
		convertedString[2] = '.';
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <floatToString+0x260>)
 80017f4:	222e      	movs	r2, #46	; 0x2e
 80017f6:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (aftdec/10) + 48;
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <floatToString+0x258>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a19      	ldr	r2, [pc, #100]	; (8001864 <floatToString+0x264>)
 80017fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001802:	1092      	asrs	r2, r2, #2
 8001804:	17db      	asrs	r3, r3, #31
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	3330      	adds	r3, #48	; 0x30
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <floatToString+0x260>)
 8001810:	70da      	strb	r2, [r3, #3]
		convertedString[4] = (aftdec/1)%10 + 48;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <floatToString+0x258>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <floatToString+0x264>)
 8001818:	fb83 1302 	smull	r1, r3, r3, r2
 800181c:	1099      	asrs	r1, r3, #2
 800181e:	17d3      	asrs	r3, r2, #31
 8001820:	1ac9      	subs	r1, r1, r3
 8001822:	460b      	mov	r3, r1
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	1ad1      	subs	r1, r2, r3
 800182c:	b2cb      	uxtb	r3, r1
 800182e:	3330      	adds	r3, #48	; 0x30
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <floatToString+0x260>)
 8001834:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <floatToString+0x260>)
 8001838:	2220      	movs	r2, #32
 800183a:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <floatToString+0x260>)
 800183e:	2220      	movs	r2, #32
 8001840:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <floatToString+0x260>)
 8001844:	2200      	movs	r2, #0
 8001846:	71da      	strb	r2, [r3, #7]
 8001848:	e1a3      	b.n	8001b92 <floatToString+0x592>
 800184a:	bf00      	nop
 800184c:	2000b888 	.word	0x2000b888
 8001850:	2000b880 	.word	0x2000b880
 8001854:	40590000 	.word	0x40590000
 8001858:	2000b884 	.word	0x2000b884
 800185c:	3ff00000 	.word	0x3ff00000
 8001860:	20004f14 	.word	0x20004f14
 8001864:	66666667 	.word	0x66666667
 8001868:	40240000 	.word	0x40240000
	else if ((fpnumber >= 100) && (fpnumber < 1000))
 800186c:	4b82      	ldr	r3, [pc, #520]	; (8001a78 <floatToString+0x478>)
 800186e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <floatToString+0x47c>)
 8001878:	f7ff f8fe 	bl	8000a78 <__aeabi_dcmpge>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d05b      	beq.n	800193a <floatToString+0x33a>
 8001882:	4b7d      	ldr	r3, [pc, #500]	; (8001a78 <floatToString+0x478>)
 8001884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b7c      	ldr	r3, [pc, #496]	; (8001a80 <floatToString+0x480>)
 800188e:	f7ff f8df 	bl	8000a50 <__aeabi_dcmplt>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d050      	beq.n	800193a <floatToString+0x33a>
		convertedString[0] = (befdec/100) + 48;
 8001898:	4b7a      	ldr	r3, [pc, #488]	; (8001a84 <floatToString+0x484>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a7a      	ldr	r2, [pc, #488]	; (8001a88 <floatToString+0x488>)
 800189e:	fb82 1203 	smull	r1, r2, r2, r3
 80018a2:	1152      	asrs	r2, r2, #5
 80018a4:	17db      	asrs	r3, r3, #31
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3330      	adds	r3, #48	; 0x30
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b77      	ldr	r3, [pc, #476]	; (8001a8c <floatToString+0x48c>)
 80018b0:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/10)%10 + 48;
 80018b2:	4b74      	ldr	r3, [pc, #464]	; (8001a84 <floatToString+0x484>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a76      	ldr	r2, [pc, #472]	; (8001a90 <floatToString+0x490>)
 80018b8:	fb82 1203 	smull	r1, r2, r2, r3
 80018bc:	1092      	asrs	r2, r2, #2
 80018be:	17db      	asrs	r3, r3, #31
 80018c0:	1ad2      	subs	r2, r2, r3
 80018c2:	4b73      	ldr	r3, [pc, #460]	; (8001a90 <floatToString+0x490>)
 80018c4:	fb83 1302 	smull	r1, r3, r3, r2
 80018c8:	1099      	asrs	r1, r3, #2
 80018ca:	17d3      	asrs	r3, r2, #31
 80018cc:	1ac9      	subs	r1, r1, r3
 80018ce:	460b      	mov	r3, r1
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	1ad1      	subs	r1, r2, r3
 80018d8:	b2cb      	uxtb	r3, r1
 80018da:	3330      	adds	r3, #48	; 0x30
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b6b      	ldr	r3, [pc, #428]	; (8001a8c <floatToString+0x48c>)
 80018e0:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (befdec/1)%10 + 48;
 80018e2:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <floatToString+0x484>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <floatToString+0x490>)
 80018e8:	fb83 1302 	smull	r1, r3, r3, r2
 80018ec:	1099      	asrs	r1, r3, #2
 80018ee:	17d3      	asrs	r3, r2, #31
 80018f0:	1ac9      	subs	r1, r1, r3
 80018f2:	460b      	mov	r3, r1
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	1ad1      	subs	r1, r2, r3
 80018fc:	b2cb      	uxtb	r3, r1
 80018fe:	3330      	adds	r3, #48	; 0x30
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b62      	ldr	r3, [pc, #392]	; (8001a8c <floatToString+0x48c>)
 8001904:	709a      	strb	r2, [r3, #2]
		convertedString[3] = '.';
 8001906:	4b61      	ldr	r3, [pc, #388]	; (8001a8c <floatToString+0x48c>)
 8001908:	222e      	movs	r2, #46	; 0x2e
 800190a:	70da      	strb	r2, [r3, #3]
		convertedString[4] = (aftdec/10) + 48;
 800190c:	4b61      	ldr	r3, [pc, #388]	; (8001a94 <floatToString+0x494>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a5f      	ldr	r2, [pc, #380]	; (8001a90 <floatToString+0x490>)
 8001912:	fb82 1203 	smull	r1, r2, r2, r3
 8001916:	1092      	asrs	r2, r2, #2
 8001918:	17db      	asrs	r3, r3, #31
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	3330      	adds	r3, #48	; 0x30
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b5a      	ldr	r3, [pc, #360]	; (8001a8c <floatToString+0x48c>)
 8001924:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 8001926:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <floatToString+0x48c>)
 8001928:	2220      	movs	r2, #32
 800192a:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 800192c:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <floatToString+0x48c>)
 800192e:	2220      	movs	r2, #32
 8001930:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 8001932:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <floatToString+0x48c>)
 8001934:	2200      	movs	r2, #0
 8001936:	71da      	strb	r2, [r3, #7]
 8001938:	e12b      	b.n	8001b92 <floatToString+0x592>
	else if ((fpnumber >= 1000) && (fpnumber < 10000))
 800193a:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <floatToString+0x478>)
 800193c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4b4e      	ldr	r3, [pc, #312]	; (8001a80 <floatToString+0x480>)
 8001946:	f7ff f897 	bl	8000a78 <__aeabi_dcmpge>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d070      	beq.n	8001a32 <floatToString+0x432>
 8001950:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <floatToString+0x478>)
 8001952:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001956:	a344      	add	r3, pc, #272	; (adr r3, 8001a68 <floatToString+0x468>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7ff f878 	bl	8000a50 <__aeabi_dcmplt>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d065      	beq.n	8001a32 <floatToString+0x432>
		convertedString[0] = (befdec/1000) + 48;
 8001966:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <floatToString+0x484>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a4b      	ldr	r2, [pc, #300]	; (8001a98 <floatToString+0x498>)
 800196c:	fb82 1203 	smull	r1, r2, r2, r3
 8001970:	1192      	asrs	r2, r2, #6
 8001972:	17db      	asrs	r3, r3, #31
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	3330      	adds	r3, #48	; 0x30
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <floatToString+0x48c>)
 800197e:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/100)%10 + 48;
 8001980:	4b40      	ldr	r3, [pc, #256]	; (8001a84 <floatToString+0x484>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a40      	ldr	r2, [pc, #256]	; (8001a88 <floatToString+0x488>)
 8001986:	fb82 1203 	smull	r1, r2, r2, r3
 800198a:	1152      	asrs	r2, r2, #5
 800198c:	17db      	asrs	r3, r3, #31
 800198e:	1ad2      	subs	r2, r2, r3
 8001990:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <floatToString+0x490>)
 8001992:	fb83 1302 	smull	r1, r3, r3, r2
 8001996:	1099      	asrs	r1, r3, #2
 8001998:	17d3      	asrs	r3, r2, #31
 800199a:	1ac9      	subs	r1, r1, r3
 800199c:	460b      	mov	r3, r1
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	1ad1      	subs	r1, r2, r3
 80019a6:	b2cb      	uxtb	r3, r1
 80019a8:	3330      	adds	r3, #48	; 0x30
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <floatToString+0x48c>)
 80019ae:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (befdec/10)%10 + 48;
 80019b0:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <floatToString+0x484>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a36      	ldr	r2, [pc, #216]	; (8001a90 <floatToString+0x490>)
 80019b6:	fb82 1203 	smull	r1, r2, r2, r3
 80019ba:	1092      	asrs	r2, r2, #2
 80019bc:	17db      	asrs	r3, r3, #31
 80019be:	1ad2      	subs	r2, r2, r3
 80019c0:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <floatToString+0x490>)
 80019c2:	fb83 1302 	smull	r1, r3, r3, r2
 80019c6:	1099      	asrs	r1, r3, #2
 80019c8:	17d3      	asrs	r3, r2, #31
 80019ca:	1ac9      	subs	r1, r1, r3
 80019cc:	460b      	mov	r3, r1
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	1ad1      	subs	r1, r2, r3
 80019d6:	b2cb      	uxtb	r3, r1
 80019d8:	3330      	adds	r3, #48	; 0x30
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <floatToString+0x48c>)
 80019de:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (befdec/1)%10 + 48;
 80019e0:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <floatToString+0x484>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <floatToString+0x490>)
 80019e6:	fb83 1302 	smull	r1, r3, r3, r2
 80019ea:	1099      	asrs	r1, r3, #2
 80019ec:	17d3      	asrs	r3, r2, #31
 80019ee:	1ac9      	subs	r1, r1, r3
 80019f0:	460b      	mov	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	1ad1      	subs	r1, r2, r3
 80019fa:	b2cb      	uxtb	r3, r1
 80019fc:	3330      	adds	r3, #48	; 0x30
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <floatToString+0x48c>)
 8001a02:	70da      	strb	r2, [r3, #3]
		convertedString[4] = '.';
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <floatToString+0x48c>)
 8001a06:	222e      	movs	r2, #46	; 0x2e
 8001a08:	711a      	strb	r2, [r3, #4]
		convertedString[5] = (aftdec/10) + 48;
 8001a0a:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <floatToString+0x494>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <floatToString+0x490>)
 8001a10:	fb82 1203 	smull	r1, r2, r2, r3
 8001a14:	1092      	asrs	r2, r2, #2
 8001a16:	17db      	asrs	r3, r3, #31
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3330      	adds	r3, #48	; 0x30
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <floatToString+0x48c>)
 8001a22:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <floatToString+0x48c>)
 8001a26:	2220      	movs	r2, #32
 8001a28:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <floatToString+0x48c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	71da      	strb	r2, [r3, #7]
 8001a30:	e0af      	b.n	8001b92 <floatToString+0x592>
	else if ((fpnumber >= 10000) && (fpnumber < 100000))
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <floatToString+0x478>)
 8001a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a38:	a30b      	add	r3, pc, #44	; (adr r3, 8001a68 <floatToString+0x468>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7ff f81b 	bl	8000a78 <__aeabi_dcmpge>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d100      	bne.n	8001a4a <floatToString+0x44a>
}
 8001a48:	e0a3      	b.n	8001b92 <floatToString+0x592>
	else if ((fpnumber >= 10000) && (fpnumber < 100000))
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <floatToString+0x478>)
 8001a4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a50:	a307      	add	r3, pc, #28	; (adr r3, 8001a70 <floatToString+0x470>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fffb 	bl	8000a50 <__aeabi_dcmplt>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d11d      	bne.n	8001a9c <floatToString+0x49c>
}
 8001a60:	e097      	b.n	8001b92 <floatToString+0x592>
 8001a62:	bf00      	nop
 8001a64:	f3af 8000 	nop.w
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40c38800 	.word	0x40c38800
 8001a70:	00000000 	.word	0x00000000
 8001a74:	40f86a00 	.word	0x40f86a00
 8001a78:	2000b888 	.word	0x2000b888
 8001a7c:	40590000 	.word	0x40590000
 8001a80:	408f4000 	.word	0x408f4000
 8001a84:	2000b880 	.word	0x2000b880
 8001a88:	51eb851f 	.word	0x51eb851f
 8001a8c:	20004f14 	.word	0x20004f14
 8001a90:	66666667 	.word	0x66666667
 8001a94:	2000b884 	.word	0x2000b884
 8001a98:	10624dd3 	.word	0x10624dd3
		convertedString[0] = (befdec/10000) + 48;
 8001a9c:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <floatToString+0x59c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a3f      	ldr	r2, [pc, #252]	; (8001ba0 <floatToString+0x5a0>)
 8001aa2:	fb82 1203 	smull	r1, r2, r2, r3
 8001aa6:	1312      	asrs	r2, r2, #12
 8001aa8:	17db      	asrs	r3, r3, #31
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	3330      	adds	r3, #48	; 0x30
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	; (8001ba4 <floatToString+0x5a4>)
 8001ab4:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/1000)%10 + 48;
 8001ab6:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <floatToString+0x59c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a3b      	ldr	r2, [pc, #236]	; (8001ba8 <floatToString+0x5a8>)
 8001abc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac0:	1192      	asrs	r2, r2, #6
 8001ac2:	17db      	asrs	r3, r3, #31
 8001ac4:	1ad2      	subs	r2, r2, r3
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <floatToString+0x5ac>)
 8001ac8:	fb83 1302 	smull	r1, r3, r3, r2
 8001acc:	1099      	asrs	r1, r3, #2
 8001ace:	17d3      	asrs	r3, r2, #31
 8001ad0:	1ac9      	subs	r1, r1, r3
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	1ad1      	subs	r1, r2, r3
 8001adc:	b2cb      	uxtb	r3, r1
 8001ade:	3330      	adds	r3, #48	; 0x30
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <floatToString+0x5a4>)
 8001ae4:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (befdec/100)%10 + 48;
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <floatToString+0x59c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <floatToString+0x5b0>)
 8001aec:	fb82 1203 	smull	r1, r2, r2, r3
 8001af0:	1152      	asrs	r2, r2, #5
 8001af2:	17db      	asrs	r3, r3, #31
 8001af4:	1ad2      	subs	r2, r2, r3
 8001af6:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <floatToString+0x5ac>)
 8001af8:	fb83 1302 	smull	r1, r3, r3, r2
 8001afc:	1099      	asrs	r1, r3, #2
 8001afe:	17d3      	asrs	r3, r2, #31
 8001b00:	1ac9      	subs	r1, r1, r3
 8001b02:	460b      	mov	r3, r1
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	1ad1      	subs	r1, r2, r3
 8001b0c:	b2cb      	uxtb	r3, r1
 8001b0e:	3330      	adds	r3, #48	; 0x30
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <floatToString+0x5a4>)
 8001b14:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (befdec/10)%10 + 48;
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <floatToString+0x59c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a24      	ldr	r2, [pc, #144]	; (8001bac <floatToString+0x5ac>)
 8001b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b20:	1092      	asrs	r2, r2, #2
 8001b22:	17db      	asrs	r3, r3, #31
 8001b24:	1ad2      	subs	r2, r2, r3
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <floatToString+0x5ac>)
 8001b28:	fb83 1302 	smull	r1, r3, r3, r2
 8001b2c:	1099      	asrs	r1, r3, #2
 8001b2e:	17d3      	asrs	r3, r2, #31
 8001b30:	1ac9      	subs	r1, r1, r3
 8001b32:	460b      	mov	r3, r1
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	1ad1      	subs	r1, r2, r3
 8001b3c:	b2cb      	uxtb	r3, r1
 8001b3e:	3330      	adds	r3, #48	; 0x30
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <floatToString+0x5a4>)
 8001b44:	70da      	strb	r2, [r3, #3]
		convertedString[4] = (befdec/1)%10 + 48;
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <floatToString+0x59c>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <floatToString+0x5ac>)
 8001b4c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b50:	1099      	asrs	r1, r3, #2
 8001b52:	17d3      	asrs	r3, r2, #31
 8001b54:	1ac9      	subs	r1, r1, r3
 8001b56:	460b      	mov	r3, r1
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	1ad1      	subs	r1, r2, r3
 8001b60:	b2cb      	uxtb	r3, r1
 8001b62:	3330      	adds	r3, #48	; 0x30
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <floatToString+0x5a4>)
 8001b68:	711a      	strb	r2, [r3, #4]
		convertedString[5] = '.';
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <floatToString+0x5a4>)
 8001b6c:	222e      	movs	r2, #46	; 0x2e
 8001b6e:	715a      	strb	r2, [r3, #5]
		convertedString[6] = (aftdec/10) + 48;
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <floatToString+0x5b4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <floatToString+0x5ac>)
 8001b76:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7a:	1092      	asrs	r2, r2, #2
 8001b7c:	17db      	asrs	r3, r3, #31
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	3330      	adds	r3, #48	; 0x30
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <floatToString+0x5a4>)
 8001b88:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <floatToString+0x5a4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	71da      	strb	r2, [r3, #7]
}
 8001b90:	e7ff      	b.n	8001b92 <floatToString+0x592>
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2000b880 	.word	0x2000b880
 8001ba0:	68db8bad 	.word	0x68db8bad
 8001ba4:	20004f14 	.word	0x20004f14
 8001ba8:	10624dd3 	.word	0x10624dd3
 8001bac:	66666667 	.word	0x66666667
 8001bb0:	51eb851f 	.word	0x51eb851f
 8001bb4:	2000b884 	.word	0x2000b884

08001bb8 <write_balance_data_file>:

void write_balance_data_file(char buffer_full)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]

	for(file_index = 0; file_index<16 && file_name[file_index] != '\0'; file_index++) buffer[file_index] = file_name[file_index];
 8001bc2:	4b62      	ldr	r3, [pc, #392]	; (8001d4c <write_balance_data_file+0x194>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e00c      	b.n	8001be4 <write_balance_data_file+0x2c>
 8001bca:	4b60      	ldr	r3, [pc, #384]	; (8001d4c <write_balance_data_file+0x194>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b5f      	ldr	r3, [pc, #380]	; (8001d4c <write_balance_data_file+0x194>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	495f      	ldr	r1, [pc, #380]	; (8001d50 <write_balance_data_file+0x198>)
 8001bd4:	5c89      	ldrb	r1, [r1, r2]
 8001bd6:	4a5f      	ldr	r2, [pc, #380]	; (8001d54 <write_balance_data_file+0x19c>)
 8001bd8:	54d1      	strb	r1, [r2, r3]
 8001bda:	4b5c      	ldr	r3, [pc, #368]	; (8001d4c <write_balance_data_file+0x194>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	4a5a      	ldr	r2, [pc, #360]	; (8001d4c <write_balance_data_file+0x194>)
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <write_balance_data_file+0x194>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b0f      	cmp	r3, #15
 8001bea:	dc05      	bgt.n	8001bf8 <write_balance_data_file+0x40>
 8001bec:	4b57      	ldr	r3, [pc, #348]	; (8001d4c <write_balance_data_file+0x194>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a57      	ldr	r2, [pc, #348]	; (8001d50 <write_balance_data_file+0x198>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e8      	bne.n	8001bca <write_balance_data_file+0x12>

	floatToString((int)file_number);
 8001bf8:	4b57      	ldr	r3, [pc, #348]	; (8001d58 <write_balance_data_file+0x1a0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fc4b 	bl	8000498 <__aeabi_i2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7ff fcf9 	bl	8001600 <floatToString>

	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0' && convertedString[i] != '.';i++,file_index++)buffer[file_index] = convertedString[i];
 8001c0e:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e011      	b.n	8001c3a <write_balance_data_file+0x82>
 8001c16:	4b51      	ldr	r3, [pc, #324]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <write_balance_data_file+0x194>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4950      	ldr	r1, [pc, #320]	; (8001d60 <write_balance_data_file+0x1a8>)
 8001c20:	5c89      	ldrb	r1, [r1, r2]
 8001c22:	4a4c      	ldr	r2, [pc, #304]	; (8001d54 <write_balance_data_file+0x19c>)
 8001c24:	54d1      	strb	r1, [r2, r3]
 8001c26:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4a4b      	ldr	r2, [pc, #300]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <write_balance_data_file+0x194>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	4a45      	ldr	r2, [pc, #276]	; (8001d4c <write_balance_data_file+0x194>)
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b48      	ldr	r3, [pc, #288]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b09      	cmp	r3, #9
 8001c40:	d80b      	bhi.n	8001c5a <write_balance_data_file+0xa2>
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a46      	ldr	r2, [pc, #280]	; (8001d60 <write_balance_data_file+0x1a8>)
 8001c48:	5cd3      	ldrb	r3, [r2, r3]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <write_balance_data_file+0xa2>
 8001c4e:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a43      	ldr	r2, [pc, #268]	; (8001d60 <write_balance_data_file+0x1a8>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	2b2e      	cmp	r3, #46	; 0x2e
 8001c58:	d1dd      	bne.n	8001c16 <write_balance_data_file+0x5e>

	if(buffer_full == 'y')
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b79      	cmp	r3, #121	; 0x79
 8001c5e:	d109      	bne.n	8001c74 <write_balance_data_file+0xbc>
	{
		buffer[file_index] = 'B';
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <write_balance_data_file+0x194>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a3b      	ldr	r2, [pc, #236]	; (8001d54 <write_balance_data_file+0x19c>)
 8001c66:	2142      	movs	r1, #66	; 0x42
 8001c68:	54d1      	strb	r1, [r2, r3]
		file_index++;
 8001c6a:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <write_balance_data_file+0x194>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <write_balance_data_file+0x194>)
 8001c72:	6013      	str	r3, [r2, #0]
	}

	for(i=0;i<4 && extention[i]!='\0';i++,file_index++) buffer[file_index]=extention[i];
 8001c74:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e011      	b.n	8001ca0 <write_balance_data_file+0xe8>
 8001c7c:	4b37      	ldr	r3, [pc, #220]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <write_balance_data_file+0x194>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4937      	ldr	r1, [pc, #220]	; (8001d64 <write_balance_data_file+0x1ac>)
 8001c86:	5c89      	ldrb	r1, [r1, r2]
 8001c88:	4a32      	ldr	r2, [pc, #200]	; (8001d54 <write_balance_data_file+0x19c>)
 8001c8a:	54d1      	strb	r1, [r2, r3]
 8001c8c:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <write_balance_data_file+0x194>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4a2b      	ldr	r2, [pc, #172]	; (8001d4c <write_balance_data_file+0x194>)
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	dc05      	bgt.n	8001cb4 <write_balance_data_file+0xfc>
 8001ca8:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a2d      	ldr	r2, [pc, #180]	; (8001d64 <write_balance_data_file+0x1ac>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1e3      	bne.n	8001c7c <write_balance_data_file+0xc4>

	Create_File(buffer);								  // create the file based on the created file name
 8001cb4:	4827      	ldr	r0, [pc, #156]	; (8001d54 <write_balance_data_file+0x19c>)
 8001cb6:	f7ff fa37 	bl	8001128 <Create_File>
	Write_File(buffer,balance_data);	      // write the data to the file.
 8001cba:	492b      	ldr	r1, [pc, #172]	; (8001d68 <write_balance_data_file+0x1b0>)
 8001cbc:	4825      	ldr	r0, [pc, #148]	; (8001d54 <write_balance_data_file+0x19c>)
 8001cbe:	f7ff f9ed 	bl	800109c <Write_File>
	balance_index = 0;
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <write_balance_data_file+0x1b4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
	header_write  = 0;
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <write_balance_data_file+0x1b8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
	get_init_conditions = 0;
 8001cce:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <write_balance_data_file+0x1bc>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
	file_number++;
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <write_balance_data_file+0x1a0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a1f      	ldr	r2, [pc, #124]	; (8001d58 <write_balance_data_file+0x1a0>)
 8001cdc:	6013      	str	r3, [r2, #0]

	for(i=0;i<10000 && balance_data[i]!='\0';i++)balance_data[i] = '\0';
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	e009      	b.n	8001cfa <write_balance_data_file+0x142>
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <write_balance_data_file+0x1b0>)
 8001cec:	2100      	movs	r1, #0
 8001cee:	54d1      	strb	r1, [r2, r3]
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d02:	4293      	cmp	r3, r2
 8001d04:	dc05      	bgt.n	8001d12 <write_balance_data_file+0x15a>
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a17      	ldr	r2, [pc, #92]	; (8001d68 <write_balance_data_file+0x1b0>)
 8001d0c:	5cd3      	ldrb	r3, [r2, r3]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1e9      	bne.n	8001ce6 <write_balance_data_file+0x12e>
	for(i=0;i<11 && buffer[i]!='\0';i++)buffer[i] = '\0';
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e009      	b.n	8001d2e <write_balance_data_file+0x176>
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <write_balance_data_file+0x19c>)
 8001d20:	2100      	movs	r1, #0
 8001d22:	54d1      	strb	r1, [r2, r3]
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b0a      	cmp	r3, #10
 8001d34:	dc05      	bgt.n	8001d42 <write_balance_data_file+0x18a>
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <write_balance_data_file+0x1a4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <write_balance_data_file+0x19c>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1eb      	bne.n	8001d1a <write_balance_data_file+0x162>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20004ef4 	.word	0x20004ef4
 8001d50:	2000007c 	.word	0x2000007c
 8001d54:	20004ef8 	.word	0x20004ef8
 8001d58:	20004ef0 	.word	0x20004ef0
 8001d5c:	20004ed8 	.word	0x20004ed8
 8001d60:	20004f14 	.word	0x20004f14
 8001d64:	20000098 	.word	0x20000098
 8001d68:	200027c0 	.word	0x200027c0
 8001d6c:	20004ed4 	.word	0x20004ed4
 8001d70:	20004f24 	.word	0x20004f24
 8001d74:	2000009e 	.word	0x2000009e

08001d78 <add_data_to_array>:


void add_data_to_array()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	if(header_write == 0)
 8001d7c:	4b7a      	ldr	r3, [pc, #488]	; (8001f68 <add_data_to_array+0x1f0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d122      	bne.n	8001dca <add_data_to_array+0x52>
	{
		for(i = 0;i < (sizeof balance_header) && balance_header[i] != '\0';i++)
 8001d84:	4b79      	ldr	r3, [pc, #484]	; (8001f6c <add_data_to_array+0x1f4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e011      	b.n	8001db0 <add_data_to_array+0x38>
		{
			balance_data[balance_index] = balance_header[i];
 8001d8c:	4b77      	ldr	r3, [pc, #476]	; (8001f6c <add_data_to_array+0x1f4>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b77      	ldr	r3, [pc, #476]	; (8001f70 <add_data_to_array+0x1f8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4977      	ldr	r1, [pc, #476]	; (8001f74 <add_data_to_array+0x1fc>)
 8001d96:	5c89      	ldrb	r1, [r1, r2]
 8001d98:	4a77      	ldr	r2, [pc, #476]	; (8001f78 <add_data_to_array+0x200>)
 8001d9a:	54d1      	strb	r1, [r2, r3]
			balance_index++;
 8001d9c:	4b74      	ldr	r3, [pc, #464]	; (8001f70 <add_data_to_array+0x1f8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	4a73      	ldr	r2, [pc, #460]	; (8001f70 <add_data_to_array+0x1f8>)
 8001da4:	6013      	str	r3, [r2, #0]
		for(i = 0;i < (sizeof balance_header) && balance_header[i] != '\0';i++)
 8001da6:	4b71      	ldr	r3, [pc, #452]	; (8001f6c <add_data_to_array+0x1f4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	4a6f      	ldr	r2, [pc, #444]	; (8001f6c <add_data_to_array+0x1f4>)
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	4b6e      	ldr	r3, [pc, #440]	; (8001f6c <add_data_to_array+0x1f4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2bb9      	cmp	r3, #185	; 0xb9
 8001db6:	d805      	bhi.n	8001dc4 <add_data_to_array+0x4c>
 8001db8:	4b6c      	ldr	r3, [pc, #432]	; (8001f6c <add_data_to_array+0x1f4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a6d      	ldr	r2, [pc, #436]	; (8001f74 <add_data_to_array+0x1fc>)
 8001dbe:	5cd3      	ldrb	r3, [r2, r3]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1e3      	bne.n	8001d8c <add_data_to_array+0x14>
		}
		header_write = 1;
 8001dc4:	4b68      	ldr	r3, [pc, #416]	; (8001f68 <add_data_to_array+0x1f0>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
	}
	// CSV file data format: pH, total_pH_up_ml, total_pH_down_ml, time_to_bal_pH, TDS, total_nutrient_ml, time_to_bal_nutrient, error, water_temp
	floatToString((double)pH);	// convert water temp to char array and write it to the data buffer
 8001dca:	4b6c      	ldr	r3, [pc, #432]	; (8001f7c <add_data_to_array+0x204>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7ff fc14 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001dd8:	4b64      	ldr	r3, [pc, #400]	; (8001f6c <add_data_to_array+0x1f4>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	e011      	b.n	8001e04 <add_data_to_array+0x8c>
	{
		balance_data[balance_index] = convertedString[i];
 8001de0:	4b62      	ldr	r3, [pc, #392]	; (8001f6c <add_data_to_array+0x1f4>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b62      	ldr	r3, [pc, #392]	; (8001f70 <add_data_to_array+0x1f8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4965      	ldr	r1, [pc, #404]	; (8001f80 <add_data_to_array+0x208>)
 8001dea:	5c89      	ldrb	r1, [r1, r2]
 8001dec:	4a62      	ldr	r2, [pc, #392]	; (8001f78 <add_data_to_array+0x200>)
 8001dee:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001df0:	4b5f      	ldr	r3, [pc, #380]	; (8001f70 <add_data_to_array+0x1f8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	4a5e      	ldr	r2, [pc, #376]	; (8001f70 <add_data_to_array+0x1f8>)
 8001df8:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001dfa:	4b5c      	ldr	r3, [pc, #368]	; (8001f6c <add_data_to_array+0x1f4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	4a5a      	ldr	r2, [pc, #360]	; (8001f6c <add_data_to_array+0x1f4>)
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b59      	ldr	r3, [pc, #356]	; (8001f6c <add_data_to_array+0x1f4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b09      	cmp	r3, #9
 8001e0a:	d805      	bhi.n	8001e18 <add_data_to_array+0xa0>
 8001e0c:	4b57      	ldr	r3, [pc, #348]	; (8001f6c <add_data_to_array+0x1f4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a5b      	ldr	r2, [pc, #364]	; (8001f80 <add_data_to_array+0x208>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e3      	bne.n	8001de0 <add_data_to_array+0x68>
	}
	balance_data[balance_index] = ',';
 8001e18:	4b55      	ldr	r3, [pc, #340]	; (8001f70 <add_data_to_array+0x1f8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a56      	ldr	r2, [pc, #344]	; (8001f78 <add_data_to_array+0x200>)
 8001e1e:	212c      	movs	r1, #44	; 0x2c
 8001e20:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001e22:	4b53      	ldr	r3, [pc, #332]	; (8001f70 <add_data_to_array+0x1f8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	4a51      	ldr	r2, [pc, #324]	; (8001f70 <add_data_to_array+0x1f8>)
 8001e2a:	6013      	str	r3, [r2, #0]

	floatToString((double)total_pH_up_ml);	// convert water temp to char array and write it to the data buffer
 8001e2c:	4b55      	ldr	r3, [pc, #340]	; (8001f84 <add_data_to_array+0x20c>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7ff fbe3 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001e3a:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <add_data_to_array+0x1f4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e011      	b.n	8001e66 <add_data_to_array+0xee>
	{
		balance_data[balance_index] = convertedString[i];
 8001e42:	4b4a      	ldr	r3, [pc, #296]	; (8001f6c <add_data_to_array+0x1f4>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <add_data_to_array+0x1f8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	494d      	ldr	r1, [pc, #308]	; (8001f80 <add_data_to_array+0x208>)
 8001e4c:	5c89      	ldrb	r1, [r1, r2]
 8001e4e:	4a4a      	ldr	r2, [pc, #296]	; (8001f78 <add_data_to_array+0x200>)
 8001e50:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001e52:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <add_data_to_array+0x1f8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	4a45      	ldr	r2, [pc, #276]	; (8001f70 <add_data_to_array+0x1f8>)
 8001e5a:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001e5c:	4b43      	ldr	r3, [pc, #268]	; (8001f6c <add_data_to_array+0x1f4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3301      	adds	r3, #1
 8001e62:	4a42      	ldr	r2, [pc, #264]	; (8001f6c <add_data_to_array+0x1f4>)
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <add_data_to_array+0x1f4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b09      	cmp	r3, #9
 8001e6c:	d805      	bhi.n	8001e7a <add_data_to_array+0x102>
 8001e6e:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <add_data_to_array+0x1f4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a43      	ldr	r2, [pc, #268]	; (8001f80 <add_data_to_array+0x208>)
 8001e74:	5cd3      	ldrb	r3, [r2, r3]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1e3      	bne.n	8001e42 <add_data_to_array+0xca>
	}
	balance_data[balance_index] = ',';
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <add_data_to_array+0x1f8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a3e      	ldr	r2, [pc, #248]	; (8001f78 <add_data_to_array+0x200>)
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001e84:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <add_data_to_array+0x1f8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	4a39      	ldr	r2, [pc, #228]	; (8001f70 <add_data_to_array+0x1f8>)
 8001e8c:	6013      	str	r3, [r2, #0]

	floatToString((double)pH_up_dose);	// convert water temp to char array and write it to the data buffer
 8001e8e:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <add_data_to_array+0x210>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7ff fbb2 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001e9c:	4b33      	ldr	r3, [pc, #204]	; (8001f6c <add_data_to_array+0x1f4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e011      	b.n	8001ec8 <add_data_to_array+0x150>
	{
		balance_data[balance_index] = convertedString[i];
 8001ea4:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <add_data_to_array+0x1f4>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <add_data_to_array+0x1f8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4934      	ldr	r1, [pc, #208]	; (8001f80 <add_data_to_array+0x208>)
 8001eae:	5c89      	ldrb	r1, [r1, r2]
 8001eb0:	4a31      	ldr	r2, [pc, #196]	; (8001f78 <add_data_to_array+0x200>)
 8001eb2:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <add_data_to_array+0x1f8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	4a2d      	ldr	r2, [pc, #180]	; (8001f70 <add_data_to_array+0x1f8>)
 8001ebc:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001ebe:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <add_data_to_array+0x1f4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	4a29      	ldr	r2, [pc, #164]	; (8001f6c <add_data_to_array+0x1f4>)
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <add_data_to_array+0x1f4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	d805      	bhi.n	8001edc <add_data_to_array+0x164>
 8001ed0:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <add_data_to_array+0x1f4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2a      	ldr	r2, [pc, #168]	; (8001f80 <add_data_to_array+0x208>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1e3      	bne.n	8001ea4 <add_data_to_array+0x12c>
	}
	balance_data[balance_index] = ',';
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <add_data_to_array+0x1f8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a25      	ldr	r2, [pc, #148]	; (8001f78 <add_data_to_array+0x200>)
 8001ee2:	212c      	movs	r1, #44	; 0x2c
 8001ee4:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <add_data_to_array+0x1f8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	4a20      	ldr	r2, [pc, #128]	; (8001f70 <add_data_to_array+0x1f8>)
 8001eee:	6013      	str	r3, [r2, #0]


	floatToString((double)total_pH_down_ml);	// convert water temp to char array and write it to the data buffer
 8001ef0:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <add_data_to_array+0x214>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7ff fb81 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <add_data_to_array+0x1f4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e011      	b.n	8001f2a <add_data_to_array+0x1b2>
	{
		balance_data[balance_index] = convertedString[i];
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <add_data_to_array+0x1f4>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <add_data_to_array+0x1f8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	491c      	ldr	r1, [pc, #112]	; (8001f80 <add_data_to_array+0x208>)
 8001f10:	5c89      	ldrb	r1, [r1, r2]
 8001f12:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <add_data_to_array+0x200>)
 8001f14:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <add_data_to_array+0x1f8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <add_data_to_array+0x1f8>)
 8001f1e:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <add_data_to_array+0x1f4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3301      	adds	r3, #1
 8001f26:	4a11      	ldr	r2, [pc, #68]	; (8001f6c <add_data_to_array+0x1f4>)
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <add_data_to_array+0x1f4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b09      	cmp	r3, #9
 8001f30:	d805      	bhi.n	8001f3e <add_data_to_array+0x1c6>
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <add_data_to_array+0x1f4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <add_data_to_array+0x208>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1e3      	bne.n	8001f06 <add_data_to_array+0x18e>
	}
	balance_data[balance_index] = ',';
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <add_data_to_array+0x1f8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <add_data_to_array+0x200>)
 8001f44:	212c      	movs	r1, #44	; 0x2c
 8001f46:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <add_data_to_array+0x1f8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <add_data_to_array+0x1f8>)
 8001f50:	6013      	str	r3, [r2, #0]

	floatToString((double)pH_down_dose);	// convert water temp to char array and write it to the data buffer
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <add_data_to_array+0x218>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f7ff fb50 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001f60:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <add_data_to_array+0x1f4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e027      	b.n	8001fb8 <add_data_to_array+0x240>
 8001f68:	20004f24 	.word	0x20004f24
 8001f6c:	20004ed8 	.word	0x20004ed8
 8001f70:	20004ed4 	.word	0x20004ed4
 8001f74:	200000a0 	.word	0x200000a0
 8001f78:	200027c0 	.word	0x200027c0
 8001f7c:	200027b0 	.word	0x200027b0
 8001f80:	20004f14 	.word	0x20004f14
 8001f84:	20002780 	.word	0x20002780
 8001f88:	20002760 	.word	0x20002760
 8001f8c:	20002788 	.word	0x20002788
 8001f90:	20002768 	.word	0x20002768
	{
		balance_data[balance_index] = convertedString[i];
 8001f94:	4b7e      	ldr	r3, [pc, #504]	; (8002190 <add_data_to_array+0x418>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b7e      	ldr	r3, [pc, #504]	; (8002194 <add_data_to_array+0x41c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	497e      	ldr	r1, [pc, #504]	; (8002198 <add_data_to_array+0x420>)
 8001f9e:	5c89      	ldrb	r1, [r1, r2]
 8001fa0:	4a7e      	ldr	r2, [pc, #504]	; (800219c <add_data_to_array+0x424>)
 8001fa2:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001fa4:	4b7b      	ldr	r3, [pc, #492]	; (8002194 <add_data_to_array+0x41c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4a7a      	ldr	r2, [pc, #488]	; (8002194 <add_data_to_array+0x41c>)
 8001fac:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001fae:	4b78      	ldr	r3, [pc, #480]	; (8002190 <add_data_to_array+0x418>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	4a76      	ldr	r2, [pc, #472]	; (8002190 <add_data_to_array+0x418>)
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b75      	ldr	r3, [pc, #468]	; (8002190 <add_data_to_array+0x418>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b09      	cmp	r3, #9
 8001fbe:	d805      	bhi.n	8001fcc <add_data_to_array+0x254>
 8001fc0:	4b73      	ldr	r3, [pc, #460]	; (8002190 <add_data_to_array+0x418>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a74      	ldr	r2, [pc, #464]	; (8002198 <add_data_to_array+0x420>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e3      	bne.n	8001f94 <add_data_to_array+0x21c>
	}
	balance_data[balance_index] = ',';
 8001fcc:	4b71      	ldr	r3, [pc, #452]	; (8002194 <add_data_to_array+0x41c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a72      	ldr	r2, [pc, #456]	; (800219c <add_data_to_array+0x424>)
 8001fd2:	212c      	movs	r1, #44	; 0x2c
 8001fd4:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001fd6:	4b6f      	ldr	r3, [pc, #444]	; (8002194 <add_data_to_array+0x41c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	4a6d      	ldr	r2, [pc, #436]	; (8002194 <add_data_to_array+0x41c>)
 8001fde:	6013      	str	r3, [r2, #0]


	floatToString(time_to_bal_pH);	// convert water temp to char array and write it to the data buffer
 8001fe0:	4b6f      	ldr	r3, [pc, #444]	; (80021a0 <add_data_to_array+0x428>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fa57 	bl	8000498 <__aeabi_i2d>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f7ff fb05 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001ff6:	4b66      	ldr	r3, [pc, #408]	; (8002190 <add_data_to_array+0x418>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e011      	b.n	8002022 <add_data_to_array+0x2aa>
	{
		balance_data[balance_index] = convertedString[i];
 8001ffe:	4b64      	ldr	r3, [pc, #400]	; (8002190 <add_data_to_array+0x418>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4b64      	ldr	r3, [pc, #400]	; (8002194 <add_data_to_array+0x41c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4964      	ldr	r1, [pc, #400]	; (8002198 <add_data_to_array+0x420>)
 8002008:	5c89      	ldrb	r1, [r1, r2]
 800200a:	4a64      	ldr	r2, [pc, #400]	; (800219c <add_data_to_array+0x424>)
 800200c:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 800200e:	4b61      	ldr	r3, [pc, #388]	; (8002194 <add_data_to_array+0x41c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	4a5f      	ldr	r2, [pc, #380]	; (8002194 <add_data_to_array+0x41c>)
 8002016:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002018:	4b5d      	ldr	r3, [pc, #372]	; (8002190 <add_data_to_array+0x418>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	4a5c      	ldr	r2, [pc, #368]	; (8002190 <add_data_to_array+0x418>)
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b5b      	ldr	r3, [pc, #364]	; (8002190 <add_data_to_array+0x418>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b09      	cmp	r3, #9
 8002028:	d805      	bhi.n	8002036 <add_data_to_array+0x2be>
 800202a:	4b59      	ldr	r3, [pc, #356]	; (8002190 <add_data_to_array+0x418>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a5a      	ldr	r2, [pc, #360]	; (8002198 <add_data_to_array+0x420>)
 8002030:	5cd3      	ldrb	r3, [r2, r3]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1e3      	bne.n	8001ffe <add_data_to_array+0x286>
	}
	balance_data[balance_index] = ',';
 8002036:	4b57      	ldr	r3, [pc, #348]	; (8002194 <add_data_to_array+0x41c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a58      	ldr	r2, [pc, #352]	; (800219c <add_data_to_array+0x424>)
 800203c:	212c      	movs	r1, #44	; 0x2c
 800203e:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002040:	4b54      	ldr	r3, [pc, #336]	; (8002194 <add_data_to_array+0x41c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	4a53      	ldr	r2, [pc, #332]	; (8002194 <add_data_to_array+0x41c>)
 8002048:	6013      	str	r3, [r2, #0]

	floatToString( (double)TDS);	// convert water temp to char array and write it to the data buffer
 800204a:	4b56      	ldr	r3, [pc, #344]	; (80021a4 <add_data_to_array+0x42c>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f7ff fad4 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002058:	4b4d      	ldr	r3, [pc, #308]	; (8002190 <add_data_to_array+0x418>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e011      	b.n	8002084 <add_data_to_array+0x30c>
	{
		balance_data[balance_index] = convertedString[i];
 8002060:	4b4b      	ldr	r3, [pc, #300]	; (8002190 <add_data_to_array+0x418>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b4b      	ldr	r3, [pc, #300]	; (8002194 <add_data_to_array+0x41c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	494b      	ldr	r1, [pc, #300]	; (8002198 <add_data_to_array+0x420>)
 800206a:	5c89      	ldrb	r1, [r1, r2]
 800206c:	4a4b      	ldr	r2, [pc, #300]	; (800219c <add_data_to_array+0x424>)
 800206e:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002070:	4b48      	ldr	r3, [pc, #288]	; (8002194 <add_data_to_array+0x41c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	4a47      	ldr	r2, [pc, #284]	; (8002194 <add_data_to_array+0x41c>)
 8002078:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800207a:	4b45      	ldr	r3, [pc, #276]	; (8002190 <add_data_to_array+0x418>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a43      	ldr	r2, [pc, #268]	; (8002190 <add_data_to_array+0x418>)
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b42      	ldr	r3, [pc, #264]	; (8002190 <add_data_to_array+0x418>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b09      	cmp	r3, #9
 800208a:	d805      	bhi.n	8002098 <add_data_to_array+0x320>
 800208c:	4b40      	ldr	r3, [pc, #256]	; (8002190 <add_data_to_array+0x418>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a41      	ldr	r2, [pc, #260]	; (8002198 <add_data_to_array+0x420>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1e3      	bne.n	8002060 <add_data_to_array+0x2e8>
	}
	balance_data[balance_index] = ',';
 8002098:	4b3e      	ldr	r3, [pc, #248]	; (8002194 <add_data_to_array+0x41c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a3f      	ldr	r2, [pc, #252]	; (800219c <add_data_to_array+0x424>)
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80020a2:	4b3c      	ldr	r3, [pc, #240]	; (8002194 <add_data_to_array+0x41c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	4a3a      	ldr	r2, [pc, #232]	; (8002194 <add_data_to_array+0x41c>)
 80020aa:	6013      	str	r3, [r2, #0]

	floatToString((double)total_nutrient_ml);	// convert water temp to char array and write it to the data buffer
 80020ac:	4b3e      	ldr	r3, [pc, #248]	; (80021a8 <add_data_to_array+0x430>)
 80020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7ff faa3 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80020ba:	4b35      	ldr	r3, [pc, #212]	; (8002190 <add_data_to_array+0x418>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e011      	b.n	80020e6 <add_data_to_array+0x36e>
	{
		balance_data[balance_index] = convertedString[i];
 80020c2:	4b33      	ldr	r3, [pc, #204]	; (8002190 <add_data_to_array+0x418>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b33      	ldr	r3, [pc, #204]	; (8002194 <add_data_to_array+0x41c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4933      	ldr	r1, [pc, #204]	; (8002198 <add_data_to_array+0x420>)
 80020cc:	5c89      	ldrb	r1, [r1, r2]
 80020ce:	4a33      	ldr	r2, [pc, #204]	; (800219c <add_data_to_array+0x424>)
 80020d0:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80020d2:	4b30      	ldr	r3, [pc, #192]	; (8002194 <add_data_to_array+0x41c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	4a2e      	ldr	r2, [pc, #184]	; (8002194 <add_data_to_array+0x41c>)
 80020da:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80020dc:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <add_data_to_array+0x418>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	4a2b      	ldr	r2, [pc, #172]	; (8002190 <add_data_to_array+0x418>)
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <add_data_to_array+0x418>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b09      	cmp	r3, #9
 80020ec:	d805      	bhi.n	80020fa <add_data_to_array+0x382>
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <add_data_to_array+0x418>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a29      	ldr	r2, [pc, #164]	; (8002198 <add_data_to_array+0x420>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1e3      	bne.n	80020c2 <add_data_to_array+0x34a>
	}
	balance_data[balance_index] = ',';
 80020fa:	4b26      	ldr	r3, [pc, #152]	; (8002194 <add_data_to_array+0x41c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a27      	ldr	r2, [pc, #156]	; (800219c <add_data_to_array+0x424>)
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002104:	4b23      	ldr	r3, [pc, #140]	; (8002194 <add_data_to_array+0x41c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	4a22      	ldr	r2, [pc, #136]	; (8002194 <add_data_to_array+0x41c>)
 800210c:	6013      	str	r3, [r2, #0]


	floatToString( (double)nutrient_dose);	// convert water temp to char array and write it to the data buffer
 800210e:	4b27      	ldr	r3, [pc, #156]	; (80021ac <add_data_to_array+0x434>)
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f7ff fa72 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <add_data_to_array+0x418>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e011      	b.n	8002148 <add_data_to_array+0x3d0>
	{
		balance_data[balance_index] = convertedString[i];
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <add_data_to_array+0x418>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <add_data_to_array+0x41c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	491a      	ldr	r1, [pc, #104]	; (8002198 <add_data_to_array+0x420>)
 800212e:	5c89      	ldrb	r1, [r1, r2]
 8002130:	4a1a      	ldr	r2, [pc, #104]	; (800219c <add_data_to_array+0x424>)
 8002132:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <add_data_to_array+0x41c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	4a16      	ldr	r2, [pc, #88]	; (8002194 <add_data_to_array+0x41c>)
 800213c:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800213e:	4b14      	ldr	r3, [pc, #80]	; (8002190 <add_data_to_array+0x418>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	4a12      	ldr	r2, [pc, #72]	; (8002190 <add_data_to_array+0x418>)
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <add_data_to_array+0x418>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b09      	cmp	r3, #9
 800214e:	d805      	bhi.n	800215c <add_data_to_array+0x3e4>
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <add_data_to_array+0x418>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a10      	ldr	r2, [pc, #64]	; (8002198 <add_data_to_array+0x420>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1e3      	bne.n	8002124 <add_data_to_array+0x3ac>
	}
	balance_data[balance_index] = ',';
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <add_data_to_array+0x41c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0e      	ldr	r2, [pc, #56]	; (800219c <add_data_to_array+0x424>)
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <add_data_to_array+0x41c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	4a09      	ldr	r2, [pc, #36]	; (8002194 <add_data_to_array+0x41c>)
 800216e:	6013      	str	r3, [r2, #0]



	floatToString(time_to_bal_nutrient);	// convert water temp to char array and write it to the data buffer
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <add_data_to_array+0x438>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe f98f 	bl	8000498 <__aeabi_i2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4610      	mov	r0, r2
 8002180:	4619      	mov	r1, r3
 8002182:	f7ff fa3d 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002186:	4b02      	ldr	r3, [pc, #8]	; (8002190 <add_data_to_array+0x418>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e024      	b.n	80021d8 <add_data_to_array+0x460>
 800218e:	bf00      	nop
 8002190:	20004ed8 	.word	0x20004ed8
 8002194:	20004ed4 	.word	0x20004ed4
 8002198:	20004f14 	.word	0x20004f14
 800219c:	200027c0 	.word	0x200027c0
 80021a0:	20004ee0 	.word	0x20004ee0
 80021a4:	200027a8 	.word	0x200027a8
 80021a8:	20002778 	.word	0x20002778
 80021ac:	20002770 	.word	0x20002770
 80021b0:	20004edc 	.word	0x20004edc
	{
		balance_data[balance_index] = convertedString[i];
 80021b4:	4b4b      	ldr	r3, [pc, #300]	; (80022e4 <add_data_to_array+0x56c>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <add_data_to_array+0x570>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	494b      	ldr	r1, [pc, #300]	; (80022ec <add_data_to_array+0x574>)
 80021be:	5c89      	ldrb	r1, [r1, r2]
 80021c0:	4a4b      	ldr	r2, [pc, #300]	; (80022f0 <add_data_to_array+0x578>)
 80021c2:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80021c4:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <add_data_to_array+0x570>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a47      	ldr	r2, [pc, #284]	; (80022e8 <add_data_to_array+0x570>)
 80021cc:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80021ce:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <add_data_to_array+0x56c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	4a43      	ldr	r2, [pc, #268]	; (80022e4 <add_data_to_array+0x56c>)
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b42      	ldr	r3, [pc, #264]	; (80022e4 <add_data_to_array+0x56c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b09      	cmp	r3, #9
 80021de:	d805      	bhi.n	80021ec <add_data_to_array+0x474>
 80021e0:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <add_data_to_array+0x56c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a41      	ldr	r2, [pc, #260]	; (80022ec <add_data_to_array+0x574>)
 80021e6:	5cd3      	ldrb	r3, [r2, r3]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e3      	bne.n	80021b4 <add_data_to_array+0x43c>
	}
	balance_data[balance_index] = ',';
 80021ec:	4b3e      	ldr	r3, [pc, #248]	; (80022e8 <add_data_to_array+0x570>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a3f      	ldr	r2, [pc, #252]	; (80022f0 <add_data_to_array+0x578>)
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80021f6:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <add_data_to_array+0x570>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3301      	adds	r3, #1
 80021fc:	4a3a      	ldr	r2, [pc, #232]	; (80022e8 <add_data_to_array+0x570>)
 80021fe:	6013      	str	r3, [r2, #0]

	floatToString( error);	// convert water temp to char array and write it to the data buffer
 8002200:	4b3c      	ldr	r3, [pc, #240]	; (80022f4 <add_data_to_array+0x57c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe f947 	bl	8000498 <__aeabi_i2d>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	f7ff f9f5 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002216:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <add_data_to_array+0x56c>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e011      	b.n	8002242 <add_data_to_array+0x4ca>
	{
		balance_data[balance_index] = convertedString[i];
 800221e:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <add_data_to_array+0x56c>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <add_data_to_array+0x570>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4931      	ldr	r1, [pc, #196]	; (80022ec <add_data_to_array+0x574>)
 8002228:	5c89      	ldrb	r1, [r1, r2]
 800222a:	4a31      	ldr	r2, [pc, #196]	; (80022f0 <add_data_to_array+0x578>)
 800222c:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 800222e:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <add_data_to_array+0x570>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3301      	adds	r3, #1
 8002234:	4a2c      	ldr	r2, [pc, #176]	; (80022e8 <add_data_to_array+0x570>)
 8002236:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002238:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <add_data_to_array+0x56c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	4a29      	ldr	r2, [pc, #164]	; (80022e4 <add_data_to_array+0x56c>)
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <add_data_to_array+0x56c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b09      	cmp	r3, #9
 8002248:	d805      	bhi.n	8002256 <add_data_to_array+0x4de>
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <add_data_to_array+0x56c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a27      	ldr	r2, [pc, #156]	; (80022ec <add_data_to_array+0x574>)
 8002250:	5cd3      	ldrb	r3, [r2, r3]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1e3      	bne.n	800221e <add_data_to_array+0x4a6>
	}
	balance_data[balance_index] = ',';
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <add_data_to_array+0x570>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a25      	ldr	r2, [pc, #148]	; (80022f0 <add_data_to_array+0x578>)
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <add_data_to_array+0x570>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	4a20      	ldr	r2, [pc, #128]	; (80022e8 <add_data_to_array+0x570>)
 8002268:	6013      	str	r3, [r2, #0]
	floatToString((double)water_temp);	// convert water temp to char array and write it to the data buffer
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <add_data_to_array+0x580>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7ff f9c4 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <add_data_to_array+0x56c>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e011      	b.n	80022a4 <add_data_to_array+0x52c>
	{
		balance_data[balance_index] = convertedString[i];
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <add_data_to_array+0x56c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <add_data_to_array+0x570>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4918      	ldr	r1, [pc, #96]	; (80022ec <add_data_to_array+0x574>)
 800228a:	5c89      	ldrb	r1, [r1, r2]
 800228c:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <add_data_to_array+0x578>)
 800228e:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002290:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <add_data_to_array+0x570>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <add_data_to_array+0x570>)
 8002298:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <add_data_to_array+0x56c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <add_data_to_array+0x56c>)
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <add_data_to_array+0x56c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b09      	cmp	r3, #9
 80022aa:	d805      	bhi.n	80022b8 <add_data_to_array+0x540>
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <add_data_to_array+0x56c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <add_data_to_array+0x574>)
 80022b2:	5cd3      	ldrb	r3, [r2, r3]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e3      	bne.n	8002280 <add_data_to_array+0x508>
	}
	balance_data[balance_index] = ',';
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <add_data_to_array+0x570>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <add_data_to_array+0x578>)
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <add_data_to_array+0x570>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <add_data_to_array+0x570>)
 80022ca:	6013      	str	r3, [r2, #0]
	balance_data[balance_index] = '\n';
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <add_data_to_array+0x570>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <add_data_to_array+0x578>)
 80022d2:	210a      	movs	r1, #10
 80022d4:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <add_data_to_array+0x570>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	4a02      	ldr	r2, [pc, #8]	; (80022e8 <add_data_to_array+0x570>)
 80022de:	6013      	str	r3, [r2, #0]

}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20004ed8 	.word	0x20004ed8
 80022e8:	20004ed4 	.word	0x20004ed4
 80022ec:	20004f14 	.word	0x20004f14
 80022f0:	200027c0 	.word	0x200027c0
 80022f4:	20004ed0 	.word	0x20004ed0
 80022f8:	200027b8 	.word	0x200027b8

080022fc <appendInitialConditions>:

void appendInitialConditions()
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	for(i = 0; i < 17 && pH_init_title[i] != '\0';i++)						// append init pH title to the data array
 8002300:	4b8a      	ldr	r3, [pc, #552]	; (800252c <appendInitialConditions+0x230>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	e011      	b.n	800232c <appendInitialConditions+0x30>
	{
		balance_data[balance_index] = pH_init_title[i];
 8002308:	4b88      	ldr	r3, [pc, #544]	; (800252c <appendInitialConditions+0x230>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b88      	ldr	r3, [pc, #544]	; (8002530 <appendInitialConditions+0x234>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4988      	ldr	r1, [pc, #544]	; (8002534 <appendInitialConditions+0x238>)
 8002312:	5c89      	ldrb	r1, [r1, r2]
 8002314:	4a88      	ldr	r2, [pc, #544]	; (8002538 <appendInitialConditions+0x23c>)
 8002316:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002318:	4b85      	ldr	r3, [pc, #532]	; (8002530 <appendInitialConditions+0x234>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	3301      	adds	r3, #1
 800231e:	4a84      	ldr	r2, [pc, #528]	; (8002530 <appendInitialConditions+0x234>)
 8002320:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && pH_init_title[i] != '\0';i++)						// append init pH title to the data array
 8002322:	4b82      	ldr	r3, [pc, #520]	; (800252c <appendInitialConditions+0x230>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3301      	adds	r3, #1
 8002328:	4a80      	ldr	r2, [pc, #512]	; (800252c <appendInitialConditions+0x230>)
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b7f      	ldr	r3, [pc, #508]	; (800252c <appendInitialConditions+0x230>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b10      	cmp	r3, #16
 8002332:	dc05      	bgt.n	8002340 <appendInitialConditions+0x44>
 8002334:	4b7d      	ldr	r3, [pc, #500]	; (800252c <appendInitialConditions+0x230>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a7e      	ldr	r2, [pc, #504]	; (8002534 <appendInitialConditions+0x238>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e3      	bne.n	8002308 <appendInitialConditions+0xc>
	}
	balance_data[balance_index] = ',';
 8002340:	4b7b      	ldr	r3, [pc, #492]	; (8002530 <appendInitialConditions+0x234>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a7c      	ldr	r2, [pc, #496]	; (8002538 <appendInitialConditions+0x23c>)
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 800234a:	4b79      	ldr	r3, [pc, #484]	; (8002530 <appendInitialConditions+0x234>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	4a77      	ldr	r2, [pc, #476]	; (8002530 <appendInitialConditions+0x234>)
 8002352:	6013      	str	r3, [r2, #0]
	floatToString( pH);									// convert pH to char array and write it to the data buffer
 8002354:	4b79      	ldr	r3, [pc, #484]	; (800253c <appendInitialConditions+0x240>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	f7ff f94f 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 8002362:	4b72      	ldr	r3, [pc, #456]	; (800252c <appendInitialConditions+0x230>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e011      	b.n	800238e <appendInitialConditions+0x92>
	{
		balance_data[balance_index] = convertedString[i];
 800236a:	4b70      	ldr	r3, [pc, #448]	; (800252c <appendInitialConditions+0x230>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	4b70      	ldr	r3, [pc, #448]	; (8002530 <appendInitialConditions+0x234>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4973      	ldr	r1, [pc, #460]	; (8002540 <appendInitialConditions+0x244>)
 8002374:	5c89      	ldrb	r1, [r1, r2]
 8002376:	4a70      	ldr	r2, [pc, #448]	; (8002538 <appendInitialConditions+0x23c>)
 8002378:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 800237a:	4b6d      	ldr	r3, [pc, #436]	; (8002530 <appendInitialConditions+0x234>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	4a6b      	ldr	r2, [pc, #428]	; (8002530 <appendInitialConditions+0x234>)
 8002382:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 8002384:	4b69      	ldr	r3, [pc, #420]	; (800252c <appendInitialConditions+0x230>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	4a68      	ldr	r2, [pc, #416]	; (800252c <appendInitialConditions+0x230>)
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b67      	ldr	r3, [pc, #412]	; (800252c <appendInitialConditions+0x230>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b09      	cmp	r3, #9
 8002394:	d805      	bhi.n	80023a2 <appendInitialConditions+0xa6>
 8002396:	4b65      	ldr	r3, [pc, #404]	; (800252c <appendInitialConditions+0x230>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a69      	ldr	r2, [pc, #420]	; (8002540 <appendInitialConditions+0x244>)
 800239c:	5cd3      	ldrb	r3, [r2, r3]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1e3      	bne.n	800236a <appendInitialConditions+0x6e>
	}
	balance_data[balance_index] = ',';
 80023a2:	4b63      	ldr	r3, [pc, #396]	; (8002530 <appendInitialConditions+0x234>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a64      	ldr	r2, [pc, #400]	; (8002538 <appendInitialConditions+0x23c>)
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80023ac:	4b60      	ldr	r3, [pc, #384]	; (8002530 <appendInitialConditions+0x234>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	4a5f      	ldr	r2, [pc, #380]	; (8002530 <appendInitialConditions+0x234>)
 80023b4:	6013      	str	r3, [r2, #0]

	for(i = 0; i < 17 && pH_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 80023b6:	4b5d      	ldr	r3, [pc, #372]	; (800252c <appendInitialConditions+0x230>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e011      	b.n	80023e2 <appendInitialConditions+0xe6>
	{
		balance_data[balance_index] = pH_set_point_title[i];
 80023be:	4b5b      	ldr	r3, [pc, #364]	; (800252c <appendInitialConditions+0x230>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <appendInitialConditions+0x234>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	495f      	ldr	r1, [pc, #380]	; (8002544 <appendInitialConditions+0x248>)
 80023c8:	5c89      	ldrb	r1, [r1, r2]
 80023ca:	4a5b      	ldr	r2, [pc, #364]	; (8002538 <appendInitialConditions+0x23c>)
 80023cc:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80023ce:	4b58      	ldr	r3, [pc, #352]	; (8002530 <appendInitialConditions+0x234>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	4a56      	ldr	r2, [pc, #344]	; (8002530 <appendInitialConditions+0x234>)
 80023d6:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && pH_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 80023d8:	4b54      	ldr	r3, [pc, #336]	; (800252c <appendInitialConditions+0x230>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	4a53      	ldr	r2, [pc, #332]	; (800252c <appendInitialConditions+0x230>)
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b52      	ldr	r3, [pc, #328]	; (800252c <appendInitialConditions+0x230>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	dc05      	bgt.n	80023f6 <appendInitialConditions+0xfa>
 80023ea:	4b50      	ldr	r3, [pc, #320]	; (800252c <appendInitialConditions+0x230>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a55      	ldr	r2, [pc, #340]	; (8002544 <appendInitialConditions+0x248>)
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1e3      	bne.n	80023be <appendInitialConditions+0xc2>
	}
	balance_data[balance_index] = ',';
 80023f6:	4b4e      	ldr	r3, [pc, #312]	; (8002530 <appendInitialConditions+0x234>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a4f      	ldr	r2, [pc, #316]	; (8002538 <appendInitialConditions+0x23c>)
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002400:	4b4b      	ldr	r3, [pc, #300]	; (8002530 <appendInitialConditions+0x234>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	4a4a      	ldr	r2, [pc, #296]	; (8002530 <appendInitialConditions+0x234>)
 8002408:	6013      	str	r3, [r2, #0]
	floatToString( pH_set_point);									// convert pH set point to char array and write it to the data buffer
 800240a:	4b4f      	ldr	r3, [pc, #316]	; (8002548 <appendInitialConditions+0x24c>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7ff f8f4 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 8002418:	4b44      	ldr	r3, [pc, #272]	; (800252c <appendInitialConditions+0x230>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e011      	b.n	8002444 <appendInitialConditions+0x148>
	{
		balance_data[balance_index] = convertedString[i];
 8002420:	4b42      	ldr	r3, [pc, #264]	; (800252c <appendInitialConditions+0x230>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b42      	ldr	r3, [pc, #264]	; (8002530 <appendInitialConditions+0x234>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4945      	ldr	r1, [pc, #276]	; (8002540 <appendInitialConditions+0x244>)
 800242a:	5c89      	ldrb	r1, [r1, r2]
 800242c:	4a42      	ldr	r2, [pc, #264]	; (8002538 <appendInitialConditions+0x23c>)
 800242e:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002430:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <appendInitialConditions+0x234>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3301      	adds	r3, #1
 8002436:	4a3e      	ldr	r2, [pc, #248]	; (8002530 <appendInitialConditions+0x234>)
 8002438:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 800243a:	4b3c      	ldr	r3, [pc, #240]	; (800252c <appendInitialConditions+0x230>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	4a3a      	ldr	r2, [pc, #232]	; (800252c <appendInitialConditions+0x230>)
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b39      	ldr	r3, [pc, #228]	; (800252c <appendInitialConditions+0x230>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b09      	cmp	r3, #9
 800244a:	d805      	bhi.n	8002458 <appendInitialConditions+0x15c>
 800244c:	4b37      	ldr	r3, [pc, #220]	; (800252c <appendInitialConditions+0x230>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a3b      	ldr	r2, [pc, #236]	; (8002540 <appendInitialConditions+0x244>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e3      	bne.n	8002420 <appendInitialConditions+0x124>
	}
	balance_data[balance_index] = '\n';
 8002458:	4b35      	ldr	r3, [pc, #212]	; (8002530 <appendInitialConditions+0x234>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a36      	ldr	r2, [pc, #216]	; (8002538 <appendInitialConditions+0x23c>)
 800245e:	210a      	movs	r1, #10
 8002460:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002462:	4b33      	ldr	r3, [pc, #204]	; (8002530 <appendInitialConditions+0x234>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	4a31      	ldr	r2, [pc, #196]	; (8002530 <appendInitialConditions+0x234>)
 800246a:	6013      	str	r3, [r2, #0]

	for(i = 0; i < 17 && TDS_init_title[i] != '\0';i++)						// append init pH title to the data array
 800246c:	4b2f      	ldr	r3, [pc, #188]	; (800252c <appendInitialConditions+0x230>)
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e011      	b.n	8002498 <appendInitialConditions+0x19c>
	{
		balance_data[balance_index] = TDS_init_title[i];
 8002474:	4b2d      	ldr	r3, [pc, #180]	; (800252c <appendInitialConditions+0x230>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <appendInitialConditions+0x234>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4933      	ldr	r1, [pc, #204]	; (800254c <appendInitialConditions+0x250>)
 800247e:	5c89      	ldrb	r1, [r1, r2]
 8002480:	4a2d      	ldr	r2, [pc, #180]	; (8002538 <appendInitialConditions+0x23c>)
 8002482:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002484:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <appendInitialConditions+0x234>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	3301      	adds	r3, #1
 800248a:	4a29      	ldr	r2, [pc, #164]	; (8002530 <appendInitialConditions+0x234>)
 800248c:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && TDS_init_title[i] != '\0';i++)						// append init pH title to the data array
 800248e:	4b27      	ldr	r3, [pc, #156]	; (800252c <appendInitialConditions+0x230>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	4a25      	ldr	r2, [pc, #148]	; (800252c <appendInitialConditions+0x230>)
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b24      	ldr	r3, [pc, #144]	; (800252c <appendInitialConditions+0x230>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b10      	cmp	r3, #16
 800249e:	dc05      	bgt.n	80024ac <appendInitialConditions+0x1b0>
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <appendInitialConditions+0x230>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a29      	ldr	r2, [pc, #164]	; (800254c <appendInitialConditions+0x250>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e3      	bne.n	8002474 <appendInitialConditions+0x178>
	}
	balance_data[balance_index] = ',';
 80024ac:	4b20      	ldr	r3, [pc, #128]	; (8002530 <appendInitialConditions+0x234>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a21      	ldr	r2, [pc, #132]	; (8002538 <appendInitialConditions+0x23c>)
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <appendInitialConditions+0x234>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <appendInitialConditions+0x234>)
 80024be:	6013      	str	r3, [r2, #0]
	floatToString( TDS);									// convert pH to char array and write it to the data buffer
 80024c0:	4b23      	ldr	r3, [pc, #140]	; (8002550 <appendInitialConditions+0x254>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	f7ff f899 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <appendInitialConditions+0x230>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e011      	b.n	80024fa <appendInitialConditions+0x1fe>
	{
		balance_data[balance_index] = convertedString[i];
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <appendInitialConditions+0x230>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <appendInitialConditions+0x234>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4918      	ldr	r1, [pc, #96]	; (8002540 <appendInitialConditions+0x244>)
 80024e0:	5c89      	ldrb	r1, [r1, r2]
 80024e2:	4a15      	ldr	r2, [pc, #84]	; (8002538 <appendInitialConditions+0x23c>)
 80024e4:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <appendInitialConditions+0x234>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	4a10      	ldr	r2, [pc, #64]	; (8002530 <appendInitialConditions+0x234>)
 80024ee:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <appendInitialConditions+0x230>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	4a0d      	ldr	r2, [pc, #52]	; (800252c <appendInitialConditions+0x230>)
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <appendInitialConditions+0x230>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b09      	cmp	r3, #9
 8002500:	d805      	bhi.n	800250e <appendInitialConditions+0x212>
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <appendInitialConditions+0x230>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <appendInitialConditions+0x244>)
 8002508:	5cd3      	ldrb	r3, [r2, r3]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1e3      	bne.n	80024d6 <appendInitialConditions+0x1da>
	}
	balance_data[balance_index] = ',';
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <appendInitialConditions+0x234>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <appendInitialConditions+0x23c>)
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <appendInitialConditions+0x234>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	4a04      	ldr	r2, [pc, #16]	; (8002530 <appendInitialConditions+0x234>)
 8002520:	6013      	str	r3, [r2, #0]

	for(i = 0; i < 17 && TDS_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 8002522:	4b02      	ldr	r3, [pc, #8]	; (800252c <appendInitialConditions+0x230>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e026      	b.n	8002578 <appendInitialConditions+0x27c>
 800252a:	bf00      	nop
 800252c:	20004ed8 	.word	0x20004ed8
 8002530:	20004ed4 	.word	0x20004ed4
 8002534:	2000015c 	.word	0x2000015c
 8002538:	200027c0 	.word	0x200027c0
 800253c:	200027b0 	.word	0x200027b0
 8002540:	20004f14 	.word	0x20004f14
 8002544:	2000016c 	.word	0x2000016c
 8002548:	20000038 	.word	0x20000038
 800254c:	2000017c 	.word	0x2000017c
 8002550:	200027a8 	.word	0x200027a8
	{
		balance_data[balance_index] = TDS_set_point_title[i];
 8002554:	4b2d      	ldr	r3, [pc, #180]	; (800260c <appendInitialConditions+0x310>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <appendInitialConditions+0x314>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	492d      	ldr	r1, [pc, #180]	; (8002614 <appendInitialConditions+0x318>)
 800255e:	5c89      	ldrb	r1, [r1, r2]
 8002560:	4a2d      	ldr	r2, [pc, #180]	; (8002618 <appendInitialConditions+0x31c>)
 8002562:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002564:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <appendInitialConditions+0x314>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	4a29      	ldr	r2, [pc, #164]	; (8002610 <appendInitialConditions+0x314>)
 800256c:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && TDS_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 800256e:	4b27      	ldr	r3, [pc, #156]	; (800260c <appendInitialConditions+0x310>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3301      	adds	r3, #1
 8002574:	4a25      	ldr	r2, [pc, #148]	; (800260c <appendInitialConditions+0x310>)
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <appendInitialConditions+0x310>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b10      	cmp	r3, #16
 800257e:	dc05      	bgt.n	800258c <appendInitialConditions+0x290>
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <appendInitialConditions+0x310>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a23      	ldr	r2, [pc, #140]	; (8002614 <appendInitialConditions+0x318>)
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e3      	bne.n	8002554 <appendInitialConditions+0x258>
	}
	balance_data[balance_index] = ',';
 800258c:	4b20      	ldr	r3, [pc, #128]	; (8002610 <appendInitialConditions+0x314>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a21      	ldr	r2, [pc, #132]	; (8002618 <appendInitialConditions+0x31c>)
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002596:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <appendInitialConditions+0x314>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	4a1c      	ldr	r2, [pc, #112]	; (8002610 <appendInitialConditions+0x314>)
 800259e:	6013      	str	r3, [r2, #0]
	floatToString( nutrient_set_point);									// convert pH set point to char array and write it to the data buffer
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <appendInitialConditions+0x320>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f7ff f829 	bl	8001600 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <appendInitialConditions+0x310>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e011      	b.n	80025da <appendInitialConditions+0x2de>
	{
		balance_data[balance_index] = convertedString[i];
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <appendInitialConditions+0x310>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <appendInitialConditions+0x314>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4918      	ldr	r1, [pc, #96]	; (8002620 <appendInitialConditions+0x324>)
 80025c0:	5c89      	ldrb	r1, [r1, r2]
 80025c2:	4a15      	ldr	r2, [pc, #84]	; (8002618 <appendInitialConditions+0x31c>)
 80025c4:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <appendInitialConditions+0x314>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	4a10      	ldr	r2, [pc, #64]	; (8002610 <appendInitialConditions+0x314>)
 80025ce:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <appendInitialConditions+0x310>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	4a0d      	ldr	r2, [pc, #52]	; (800260c <appendInitialConditions+0x310>)
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <appendInitialConditions+0x310>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b09      	cmp	r3, #9
 80025e0:	d805      	bhi.n	80025ee <appendInitialConditions+0x2f2>
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <appendInitialConditions+0x310>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <appendInitialConditions+0x324>)
 80025e8:	5cd3      	ldrb	r3, [r2, r3]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1e3      	bne.n	80025b6 <appendInitialConditions+0x2ba>
	}
	balance_data[balance_index] = '\n';
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <appendInitialConditions+0x314>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <appendInitialConditions+0x31c>)
 80025f4:	210a      	movs	r1, #10
 80025f6:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <appendInitialConditions+0x314>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3301      	adds	r3, #1
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <appendInitialConditions+0x314>)
 8002600:	6013      	str	r3, [r2, #0]
    get_init_conditions = 'y';
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <appendInitialConditions+0x328>)
 8002604:	2279      	movs	r2, #121	; 0x79
 8002606:	701a      	strb	r2, [r3, #0]
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20004ed8 	.word	0x20004ed8
 8002610:	20004ed4 	.word	0x20004ed4
 8002614:	2000018c 	.word	0x2000018c
 8002618:	200027c0 	.word	0x200027c0
 800261c:	20000030 	.word	0x20000030
 8002620:	20004f14 	.word	0x20004f14
 8002624:	2000009e 	.word	0x2000009e

08002628 <balancePhAndNutrient>:

char setting_pH = 'n';
char setting_nutrient = 'n';
double TDS_avg_check = 0, pH_avg_check = 0;
void balancePhAndNutrient()
{
 8002628:	b5b0      	push	{r4, r5, r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
	// osThreadSuspend(WaterTempControHandle);
	TDS_avg_check = 0;
 800262e:	4994      	ldr	r1, [pc, #592]	; (8002880 <balancePhAndNutrient+0x258>)
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9c1 2300 	strd	r2, r3, [r1]
	pH_avg_check = 0;
 800263c:	4991      	ldr	r1, [pc, #580]	; (8002884 <balancePhAndNutrient+0x25c>)
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9c1 2300 	strd	r2, r3, [r1]
	// osDelay(5000);
	done_sampling = 'n';
 800264a:	4b8f      	ldr	r3, [pc, #572]	; (8002888 <balancePhAndNutrient+0x260>)
 800264c:	226e      	movs	r2, #110	; 0x6e
 800264e:	701a      	strb	r2, [r3, #0]
	if(waiting_to_write == 'n')
 8002650:	4b8e      	ldr	r3, [pc, #568]	; (800288c <balancePhAndNutrient+0x264>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b6e      	cmp	r3, #110	; 0x6e
 8002656:	d150      	bne.n	80026fa <balancePhAndNutrient+0xd2>
	{
		for(int checkSamples = 0; checkSamples<num_sensor_samples; checkSamples++)			   // sample TDS and PH every half second for 30 times
 8002658:	2300      	movs	r3, #0
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	e022      	b.n	80026a4 <balancePhAndNutrient+0x7c>
			{
				getSensorValues(1);
 800265e:	2001      	movs	r0, #1
 8002660:	f003 fb30 	bl	8005cc4 <getSensorValues>

				TDS_avg_check += TDS;
 8002664:	4b86      	ldr	r3, [pc, #536]	; (8002880 <balancePhAndNutrient+0x258>)
 8002666:	e9d3 0100 	ldrd	r0, r1, [r3]
 800266a:	4b89      	ldr	r3, [pc, #548]	; (8002890 <balancePhAndNutrient+0x268>)
 800266c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002670:	f7fd fdc6 	bl	8000200 <__adddf3>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4981      	ldr	r1, [pc, #516]	; (8002880 <balancePhAndNutrient+0x258>)
 800267a:	e9c1 2300 	strd	r2, r3, [r1]
				pH_avg_check += pH;
 800267e:	4b81      	ldr	r3, [pc, #516]	; (8002884 <balancePhAndNutrient+0x25c>)
 8002680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002684:	4b83      	ldr	r3, [pc, #524]	; (8002894 <balancePhAndNutrient+0x26c>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	f7fd fdb9 	bl	8000200 <__adddf3>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	497c      	ldr	r1, [pc, #496]	; (8002884 <balancePhAndNutrient+0x25c>)
 8002694:	e9c1 2300 	strd	r2, r3, [r1]
				osDelay(100);
 8002698:	2064      	movs	r0, #100	; 0x64
 800269a:	f010 fcdc 	bl	8013056 <osDelay>
		for(int checkSamples = 0; checkSamples<num_sensor_samples; checkSamples++)			   // sample TDS and PH every half second for 30 times
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3301      	adds	r3, #1
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	4b7c      	ldr	r3, [pc, #496]	; (8002898 <balancePhAndNutrient+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	dbd7      	blt.n	800265e <balancePhAndNutrient+0x36>

			}
		TDS = TDS_avg_check/num_sensor_samples;
 80026ae:	4b74      	ldr	r3, [pc, #464]	; (8002880 <balancePhAndNutrient+0x258>)
 80026b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026b4:	4b78      	ldr	r3, [pc, #480]	; (8002898 <balancePhAndNutrient+0x270>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd feed 	bl	8000498 <__aeabi_i2d>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4620      	mov	r0, r4
 80026c4:	4629      	mov	r1, r5
 80026c6:	f7fe f87b 	bl	80007c0 <__aeabi_ddiv>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4970      	ldr	r1, [pc, #448]	; (8002890 <balancePhAndNutrient+0x268>)
 80026d0:	e9c1 2300 	strd	r2, r3, [r1]
		pH  = pH_avg_check/num_sensor_samples;
 80026d4:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <balancePhAndNutrient+0x25c>)
 80026d6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026da:	4b6f      	ldr	r3, [pc, #444]	; (8002898 <balancePhAndNutrient+0x270>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd feda 	bl	8000498 <__aeabi_i2d>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4620      	mov	r0, r4
 80026ea:	4629      	mov	r1, r5
 80026ec:	f7fe f868 	bl	80007c0 <__aeabi_ddiv>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4967      	ldr	r1, [pc, #412]	; (8002894 <balancePhAndNutrient+0x26c>)
 80026f6:	e9c1 2300 	strd	r2, r3, [r1]
	}
	//osThreadResume(WaterTempControHandle);

	done_sampling = 'y';
 80026fa:	4b63      	ldr	r3, [pc, #396]	; (8002888 <balancePhAndNutrient+0x260>)
 80026fc:	2279      	movs	r2, #121	; 0x79
 80026fe:	701a      	strb	r2, [r3, #0]
	pH_up = 0;
 8002700:	4b66      	ldr	r3, [pc, #408]	; (800289c <balancePhAndNutrient+0x274>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
	pH_down = 0;
 8002706:	4b66      	ldr	r3, [pc, #408]	; (80028a0 <balancePhAndNutrient+0x278>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
	nutrient_up = 0;	// check twice to see if we need to add nutrient
 800270c:	4b65      	ldr	r3, [pc, #404]	; (80028a4 <balancePhAndNutrient+0x27c>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]

	if(setting_pH == 'n')	// if we are not changing the pH or nutrient level, check to see if we are out of bounds
 8002712:	4b65      	ldr	r3, [pc, #404]	; (80028a8 <balancePhAndNutrient+0x280>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b6e      	cmp	r3, #110	; 0x6e
 8002718:	d145      	bne.n	80027a6 <balancePhAndNutrient+0x17e>
	{
		if(     pH  > pH_set_point     &&     (pH - pH_bounds_check) > pH_set_point)   				pH_down = 1; 			// if we are over our set point dose the water with pH-down
 800271a:	4b5e      	ldr	r3, [pc, #376]	; (8002894 <balancePhAndNutrient+0x26c>)
 800271c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002720:	4b62      	ldr	r3, [pc, #392]	; (80028ac <balancePhAndNutrient+0x284>)
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	f7fe f9b1 	bl	8000a8c <__aeabi_dcmpgt>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d017      	beq.n	8002760 <balancePhAndNutrient+0x138>
 8002730:	4b58      	ldr	r3, [pc, #352]	; (8002894 <balancePhAndNutrient+0x26c>)
 8002732:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002736:	4b5e      	ldr	r3, [pc, #376]	; (80028b0 <balancePhAndNutrient+0x288>)
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	f7fd fd5e 	bl	80001fc <__aeabi_dsub>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	4b58      	ldr	r3, [pc, #352]	; (80028ac <balancePhAndNutrient+0x284>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f7fe f99d 	bl	8000a8c <__aeabi_dcmpgt>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <balancePhAndNutrient+0x138>
 8002758:	4b51      	ldr	r3, [pc, #324]	; (80028a0 <balancePhAndNutrient+0x278>)
 800275a:	2201      	movs	r2, #1
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e067      	b.n	8002830 <balancePhAndNutrient+0x208>
		else if(pH  < pH_set_point 	   &&     (pH + pH_bounds_check) < pH_set_point)  				pH_up = 1; 				// if we are under our set point dose the water with pH-up
 8002760:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <balancePhAndNutrient+0x26c>)
 8002762:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002766:	4b51      	ldr	r3, [pc, #324]	; (80028ac <balancePhAndNutrient+0x284>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	f7fe f970 	bl	8000a50 <__aeabi_dcmplt>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d05c      	beq.n	8002830 <balancePhAndNutrient+0x208>
 8002776:	4b47      	ldr	r3, [pc, #284]	; (8002894 <balancePhAndNutrient+0x26c>)
 8002778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800277c:	4b4c      	ldr	r3, [pc, #304]	; (80028b0 <balancePhAndNutrient+0x288>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	f7fd fd3d 	bl	8000200 <__adddf3>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <balancePhAndNutrient+0x284>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fe f95c 	bl	8000a50 <__aeabi_dcmplt>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d048      	beq.n	8002830 <balancePhAndNutrient+0x208>
 800279e:	4b3f      	ldr	r3, [pc, #252]	; (800289c <balancePhAndNutrient+0x274>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e044      	b.n	8002830 <balancePhAndNutrient+0x208>
	}
	else	// else we are setting the pH so reduce the pH bounds to accurately set the value
	{
		if(     pH  > pH_set_point     &&     (pH - pH_bounds_set) > pH_set_point)   				pH_down = 1; 			// if we are over our set point dose the water with pH-down
 80027a6:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <balancePhAndNutrient+0x26c>)
 80027a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <balancePhAndNutrient+0x284>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fe f96b 	bl	8000a8c <__aeabi_dcmpgt>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d017      	beq.n	80027ec <balancePhAndNutrient+0x1c4>
 80027bc:	4b35      	ldr	r3, [pc, #212]	; (8002894 <balancePhAndNutrient+0x26c>)
 80027be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c2:	4b3c      	ldr	r3, [pc, #240]	; (80028b4 <balancePhAndNutrient+0x28c>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f7fd fd18 	bl	80001fc <__aeabi_dsub>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	4b35      	ldr	r3, [pc, #212]	; (80028ac <balancePhAndNutrient+0x284>)
 80027d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027da:	f7fe f957 	bl	8000a8c <__aeabi_dcmpgt>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <balancePhAndNutrient+0x1c4>
 80027e4:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <balancePhAndNutrient+0x278>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e021      	b.n	8002830 <balancePhAndNutrient+0x208>
		else if(pH  < pH_set_point 	   &&     (pH + pH_bounds_set) < pH_set_point)  				pH_up = 1; 				// if we are under our set point dose the water with pH-up
 80027ec:	4b29      	ldr	r3, [pc, #164]	; (8002894 <balancePhAndNutrient+0x26c>)
 80027ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027f2:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <balancePhAndNutrient+0x284>)
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	f7fe f92a 	bl	8000a50 <__aeabi_dcmplt>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d016      	beq.n	8002830 <balancePhAndNutrient+0x208>
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <balancePhAndNutrient+0x26c>)
 8002804:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002808:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <balancePhAndNutrient+0x28c>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	f7fd fcf7 	bl	8000200 <__adddf3>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	4b24      	ldr	r3, [pc, #144]	; (80028ac <balancePhAndNutrient+0x284>)
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	f7fe f916 	bl	8000a50 <__aeabi_dcmplt>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <balancePhAndNutrient+0x208>
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <balancePhAndNutrient+0x274>)
 800282c:	2201      	movs	r2, #1
 800282e:	601a      	str	r2, [r3, #0]
	}
	if(setting_nutrient == 'n')	// if we are not changing the pH or nutrient level, check to see if we are out of bounds
 8002830:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <balancePhAndNutrient+0x290>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b6e      	cmp	r3, #110	; 0x6e
 8002836:	d16a      	bne.n	800290e <balancePhAndNutrient+0x2e6>
	{
		if(     TDS > nutrient_set_point && (TDS - nutrient_bounds_check) > nutrient_set_point) 	error = 1; 				 // if we are over our TDS set point ERROR
 8002838:	4b15      	ldr	r3, [pc, #84]	; (8002890 <balancePhAndNutrient+0x268>)
 800283a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <balancePhAndNutrient+0x294>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	f7fe f922 	bl	8000a8c <__aeabi_dcmpgt>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d03c      	beq.n	80028c8 <balancePhAndNutrient+0x2a0>
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <balancePhAndNutrient+0x268>)
 8002850:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002854:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <balancePhAndNutrient+0x298>)
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	f7fd fccf 	bl	80001fc <__aeabi_dsub>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <balancePhAndNutrient+0x294>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fe f90e 	bl	8000a8c <__aeabi_dcmpgt>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d028      	beq.n	80028c8 <balancePhAndNutrient+0x2a0>
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <balancePhAndNutrient+0x29c>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e069      	b.n	8002952 <balancePhAndNutrient+0x32a>
 800287e:	bf00      	nop
 8002880:	20004f28 	.word	0x20004f28
 8002884:	20004f30 	.word	0x20004f30
 8002888:	20000209 	.word	0x20000209
 800288c:	2000009d 	.word	0x2000009d
 8002890:	200027a8 	.word	0x200027a8
 8002894:	200027b0 	.word	0x200027b0
 8002898:	2000019c 	.word	0x2000019c
 800289c:	20004ee4 	.word	0x20004ee4
 80028a0:	20004ee8 	.word	0x20004ee8
 80028a4:	20004eec 	.word	0x20004eec
 80028a8:	200001a0 	.word	0x200001a0
 80028ac:	20000038 	.word	0x20000038
 80028b0:	20000058 	.word	0x20000058
 80028b4:	20000060 	.word	0x20000060
 80028b8:	200001a1 	.word	0x200001a1
 80028bc:	20000030 	.word	0x20000030
 80028c0:	20000068 	.word	0x20000068
 80028c4:	20004ed0 	.word	0x20004ed0
		else if(TDS < nutrient_set_point && (TDS + nutrient_bounds_check) < nutrient_set_point )
 80028c8:	4b8b      	ldr	r3, [pc, #556]	; (8002af8 <balancePhAndNutrient+0x4d0>)
 80028ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ce:	4b8b      	ldr	r3, [pc, #556]	; (8002afc <balancePhAndNutrient+0x4d4>)
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	f7fe f8bc 	bl	8000a50 <__aeabi_dcmplt>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d039      	beq.n	8002952 <balancePhAndNutrient+0x32a>
 80028de:	4b86      	ldr	r3, [pc, #536]	; (8002af8 <balancePhAndNutrient+0x4d0>)
 80028e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028e4:	4b86      	ldr	r3, [pc, #536]	; (8002b00 <balancePhAndNutrient+0x4d8>)
 80028e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ea:	f7fd fc89 	bl	8000200 <__adddf3>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	4b81      	ldr	r3, [pc, #516]	; (8002afc <balancePhAndNutrient+0x4d4>)
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	f7fe f8a8 	bl	8000a50 <__aeabi_dcmplt>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d025      	beq.n	8002952 <balancePhAndNutrient+0x32a>
		{
			nutrient_up = 1;// if we checked twice and we still need to dose nutrients then go for it.
 8002906:	4b7f      	ldr	r3, [pc, #508]	; (8002b04 <balancePhAndNutrient+0x4dc>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	e021      	b.n	8002952 <balancePhAndNutrient+0x32a>
		}

	}
	else if(TDS < nutrient_set_point && (TDS + nutrient_bounds_set) < nutrient_set_point) nutrient_up = 1;		 // if we are under our set point dose the water with pH-down
 800290e:	4b7a      	ldr	r3, [pc, #488]	; (8002af8 <balancePhAndNutrient+0x4d0>)
 8002910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002914:	4b79      	ldr	r3, [pc, #484]	; (8002afc <balancePhAndNutrient+0x4d4>)
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	f7fe f899 	bl	8000a50 <__aeabi_dcmplt>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d016      	beq.n	8002952 <balancePhAndNutrient+0x32a>
 8002924:	4b74      	ldr	r3, [pc, #464]	; (8002af8 <balancePhAndNutrient+0x4d0>)
 8002926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800292a:	4b77      	ldr	r3, [pc, #476]	; (8002b08 <balancePhAndNutrient+0x4e0>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	f7fd fc66 	bl	8000200 <__adddf3>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <balancePhAndNutrient+0x4d4>)
 800293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002942:	f7fe f885 	bl	8000a50 <__aeabi_dcmplt>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <balancePhAndNutrient+0x32a>
 800294c:	4b6d      	ldr	r3, [pc, #436]	; (8002b04 <balancePhAndNutrient+0x4dc>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]


	if(get_init_conditions == 'n') appendInitialConditions();  // {RPOBNBBSGDLIBJH
 8002952:	4b6e      	ldr	r3, [pc, #440]	; (8002b0c <balancePhAndNutrient+0x4e4>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b6e      	cmp	r3, #110	; 0x6e
 8002958:	d101      	bne.n	800295e <balancePhAndNutrient+0x336>
 800295a:	f7ff fccf 	bl	80022fc <appendInitialConditions>

	if((pH_down == 1 || pH_up == 1 || nutrient_up == 1))				// if we are adding pH-up/down or nutrient, signify what we are setting so we can change the accuracy range
 800295e:	4b6c      	ldr	r3, [pc, #432]	; (8002b10 <balancePhAndNutrient+0x4e8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d007      	beq.n	8002976 <balancePhAndNutrient+0x34e>
 8002966:	4b6b      	ldr	r3, [pc, #428]	; (8002b14 <balancePhAndNutrient+0x4ec>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d003      	beq.n	8002976 <balancePhAndNutrient+0x34e>
 800296e:	4b65      	ldr	r3, [pc, #404]	; (8002b04 <balancePhAndNutrient+0x4dc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d11d      	bne.n	80029b2 <balancePhAndNutrient+0x38a>
	{
		if(nutrient_up == 1) 			setting_nutrient = 'y';
 8002976:	4b63      	ldr	r3, [pc, #396]	; (8002b04 <balancePhAndNutrient+0x4dc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d103      	bne.n	8002986 <balancePhAndNutrient+0x35e>
 800297e:	4b66      	ldr	r3, [pc, #408]	; (8002b18 <balancePhAndNutrient+0x4f0>)
 8002980:	2279      	movs	r2, #121	; 0x79
 8002982:	701a      	strb	r2, [r3, #0]
 8002984:	e002      	b.n	800298c <balancePhAndNutrient+0x364>
		else setting_nutrient = 'n';
 8002986:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <balancePhAndNutrient+0x4f0>)
 8002988:	226e      	movs	r2, #110	; 0x6e
 800298a:	701a      	strb	r2, [r3, #0]

		if(pH_down == 1 || pH_up == 1)  setting_pH = 'y';
 800298c:	4b60      	ldr	r3, [pc, #384]	; (8002b10 <balancePhAndNutrient+0x4e8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d003      	beq.n	800299c <balancePhAndNutrient+0x374>
 8002994:	4b5f      	ldr	r3, [pc, #380]	; (8002b14 <balancePhAndNutrient+0x4ec>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d103      	bne.n	80029a4 <balancePhAndNutrient+0x37c>
 800299c:	4b5f      	ldr	r3, [pc, #380]	; (8002b1c <balancePhAndNutrient+0x4f4>)
 800299e:	2279      	movs	r2, #121	; 0x79
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e002      	b.n	80029aa <balancePhAndNutrient+0x382>
		else setting_pH = 'n';
 80029a4:	4b5d      	ldr	r3, [pc, #372]	; (8002b1c <balancePhAndNutrient+0x4f4>)
 80029a6:	226e      	movs	r2, #110	; 0x6e
 80029a8:	701a      	strb	r2, [r3, #0]
		num_of_stable_runs = 0;
 80029aa:	4b5d      	ldr	r3, [pc, #372]	; (8002b20 <balancePhAndNutrient+0x4f8>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e011      	b.n	80029d6 <balancePhAndNutrient+0x3ae>
	}
	else if(pH_down == 0 && pH_up == 0 && nutrient_up == 0)				// else if we are not setting anything, signify that
 80029b2:	4b57      	ldr	r3, [pc, #348]	; (8002b10 <balancePhAndNutrient+0x4e8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10d      	bne.n	80029d6 <balancePhAndNutrient+0x3ae>
 80029ba:	4b56      	ldr	r3, [pc, #344]	; (8002b14 <balancePhAndNutrient+0x4ec>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <balancePhAndNutrient+0x3ae>
 80029c2:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <balancePhAndNutrient+0x4dc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <balancePhAndNutrient+0x3ae>
	{
		setting_nutrient = 'n';
 80029ca:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <balancePhAndNutrient+0x4f0>)
 80029cc:	226e      	movs	r2, #110	; 0x6e
 80029ce:	701a      	strb	r2, [r3, #0]
		setting_pH = 'n';
 80029d0:	4b52      	ldr	r3, [pc, #328]	; (8002b1c <balancePhAndNutrient+0x4f4>)
 80029d2:	226e      	movs	r2, #110	; 0x6e
 80029d4:	701a      	strb	r2, [r3, #0]
	}

	if(num_of_stable_runs >= 0 && num_of_stable_runs < 7 && ((10000 - balance_index) >= 500) && waiting_to_write == 'n' ) // consider changing to 10
 80029d6:	4b52      	ldr	r3, [pc, #328]	; (8002b20 <balancePhAndNutrient+0x4f8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f2c0 8221 	blt.w	8002e22 <balancePhAndNutrient+0x7fa>
 80029e0:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <balancePhAndNutrient+0x4f8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b06      	cmp	r3, #6
 80029e6:	f300 821c 	bgt.w	8002e22 <balancePhAndNutrient+0x7fa>
 80029ea:	4b4e      	ldr	r3, [pc, #312]	; (8002b24 <balancePhAndNutrient+0x4fc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80029f2:	3310      	adds	r3, #16
 80029f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029f8:	f2c0 8213 	blt.w	8002e22 <balancePhAndNutrient+0x7fa>
 80029fc:	4b4a      	ldr	r3, [pc, #296]	; (8002b28 <balancePhAndNutrient+0x500>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b6e      	cmp	r3, #110	; 0x6e
 8002a02:	f040 820e 	bne.w	8002e22 <balancePhAndNutrient+0x7fa>
	{
		time_to_bal_pH = 0;
 8002a06:	4b49      	ldr	r3, [pc, #292]	; (8002b2c <balancePhAndNutrient+0x504>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
		time_to_bal_nutrient = 0;
 8002a0c:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <balancePhAndNutrient+0x508>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]

		if(nutrient_up == 1)	// if we need to add nutrients and we also need to adjust the pH, add the nutrients first and wait to stabilize then add pH-up/down
 8002a12:	4b3c      	ldr	r3, [pc, #240]	; (8002b04 <balancePhAndNutrient+0x4dc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	f040 8143 	bne.w	8002ca2 <balancePhAndNutrient+0x67a>
		{
			nutrient_dose = calcNutrientDose(pH_set_point, nutrient_set_point);
 8002a1c:	4b45      	ldr	r3, [pc, #276]	; (8002b34 <balancePhAndNutrient+0x50c>)
 8002a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a22:	4b36      	ldr	r3, [pc, #216]	; (8002afc <balancePhAndNutrient+0x4d4>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f002 fa4c 	bl	8004ec4 <calcNutrientDose>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4941      	ldr	r1, [pc, #260]	; (8002b38 <balancePhAndNutrient+0x510>)
 8002a32:	e9c1 2300 	strd	r2, r3, [r1]
			doseWater(0,0,nutrient_dose);
 8002a36:	4b40      	ldr	r3, [pc, #256]	; (8002b38 <balancePhAndNutrient+0x510>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f7fe f88c 	bl	8000b5c <__aeabi_d2f>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	f04f 0100 	mov.w	r1, #0
 8002a4c:	f04f 0000 	mov.w	r0, #0
 8002a50:	f001 feb3 	bl	80047ba <doseWater>
			total_nutrient_ml += nutrient_dose;
 8002a54:	4b39      	ldr	r3, [pc, #228]	; (8002b3c <balancePhAndNutrient+0x514>)
 8002a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a5a:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <balancePhAndNutrient+0x510>)
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	f7fd fbce 	bl	8000200 <__adddf3>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4934      	ldr	r1, [pc, #208]	; (8002b3c <balancePhAndNutrient+0x514>)
 8002a6a:	e9c1 2300 	strd	r2, r3, [r1]
			total_nutrient_ml_per_file += nutrient_dose;
 8002a6e:	4b34      	ldr	r3, [pc, #208]	; (8002b40 <balancePhAndNutrient+0x518>)
 8002a70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a74:	4b30      	ldr	r3, [pc, #192]	; (8002b38 <balancePhAndNutrient+0x510>)
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f7fd fbc1 	bl	8000200 <__adddf3>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	492f      	ldr	r1, [pc, #188]	; (8002b40 <balancePhAndNutrient+0x518>)
 8002a84:	e9c1 2300 	strd	r2, r3, [r1]
			time_to_bal_nutrient = waitForWaterToStabilize();
 8002a88:	f001 f888 	bl	8003b9c <waitForWaterToStabilize>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4a28      	ldr	r2, [pc, #160]	; (8002b30 <balancePhAndNutrient+0x508>)
 8002a90:	6013      	str	r3, [r2, #0]
			nutrient_up = 0;
 8002a92:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <balancePhAndNutrient+0x4dc>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

			getSensorValues(1);	// after adding nutrient check the pH again to see if it needs to be adjustedgetSensorValues
 8002a98:	2001      	movs	r0, #1
 8002a9a:	f003 f913 	bl	8005cc4 <getSensorValues>

			pH_down = 0;
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <balancePhAndNutrient+0x4e8>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
			pH_up 	= 0;
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <balancePhAndNutrient+0x4ec>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
			done_sampling = 'y';
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <balancePhAndNutrient+0x51c>)
 8002aac:	2279      	movs	r2, #121	; 0x79
 8002aae:	701a      	strb	r2, [r3, #0]
			if(     pH  > pH_set_point     &&     (pH - pH_bounds_check) > pH_set_point)   		pH_down = 1;  // if we are over our set point dose the water with pH-down
 8002ab0:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <balancePhAndNutrient+0x520>)
 8002ab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ab6:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <balancePhAndNutrient+0x50c>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd ffe6 	bl	8000a8c <__aeabi_dcmpgt>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d044      	beq.n	8002b50 <balancePhAndNutrient+0x528>
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <balancePhAndNutrient+0x520>)
 8002ac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002acc:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <balancePhAndNutrient+0x524>)
 8002ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad2:	f7fd fb93 	bl	80001fc <__aeabi_dsub>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <balancePhAndNutrient+0x50c>)
 8002ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae4:	f7fd ffd2 	bl	8000a8c <__aeabi_dcmpgt>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d030      	beq.n	8002b50 <balancePhAndNutrient+0x528>
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <balancePhAndNutrient+0x4e8>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e04e      	b.n	8002b94 <balancePhAndNutrient+0x56c>
 8002af6:	bf00      	nop
 8002af8:	200027a8 	.word	0x200027a8
 8002afc:	20000030 	.word	0x20000030
 8002b00:	20000068 	.word	0x20000068
 8002b04:	20004eec 	.word	0x20004eec
 8002b08:	20000070 	.word	0x20000070
 8002b0c:	2000009e 	.word	0x2000009e
 8002b10:	20004ee8 	.word	0x20004ee8
 8002b14:	20004ee4 	.word	0x20004ee4
 8002b18:	200001a1 	.word	0x200001a1
 8002b1c:	200001a0 	.word	0x200001a0
 8002b20:	20004f20 	.word	0x20004f20
 8002b24:	20004ed4 	.word	0x20004ed4
 8002b28:	2000009d 	.word	0x2000009d
 8002b2c:	20004ee0 	.word	0x20004ee0
 8002b30:	20004edc 	.word	0x20004edc
 8002b34:	20000038 	.word	0x20000038
 8002b38:	20002770 	.word	0x20002770
 8002b3c:	20002778 	.word	0x20002778
 8002b40:	20002790 	.word	0x20002790
 8002b44:	20000209 	.word	0x20000209
 8002b48:	200027b0 	.word	0x200027b0
 8002b4c:	20000058 	.word	0x20000058
			else if(pH  < pH_set_point 	   &&     (pH + pH_bounds_check) < pH_set_point)  		pH_up   = 1;  // if we are under our set point dose the water with pH-up
 8002b50:	4b75      	ldr	r3, [pc, #468]	; (8002d28 <balancePhAndNutrient+0x700>)
 8002b52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b56:	4b75      	ldr	r3, [pc, #468]	; (8002d2c <balancePhAndNutrient+0x704>)
 8002b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5c:	f7fd ff78 	bl	8000a50 <__aeabi_dcmplt>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <balancePhAndNutrient+0x56c>
 8002b66:	4b70      	ldr	r3, [pc, #448]	; (8002d28 <balancePhAndNutrient+0x700>)
 8002b68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b6c:	4b70      	ldr	r3, [pc, #448]	; (8002d30 <balancePhAndNutrient+0x708>)
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	f7fd fb45 	bl	8000200 <__adddf3>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4b6b      	ldr	r3, [pc, #428]	; (8002d2c <balancePhAndNutrient+0x704>)
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f7fd ff64 	bl	8000a50 <__aeabi_dcmplt>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <balancePhAndNutrient+0x56c>
 8002b8e:	4b69      	ldr	r3, [pc, #420]	; (8002d34 <balancePhAndNutrient+0x70c>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

			if(pH_down == 1)
 8002b94:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <balancePhAndNutrient+0x710>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d13e      	bne.n	8002c1a <balancePhAndNutrient+0x5f2>
			{
				pH_down_dose = calcPhDownDose(pH_set_point, nutrient_set_point);
 8002b9c:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <balancePhAndNutrient+0x704>)
 8002b9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba2:	4b66      	ldr	r3, [pc, #408]	; (8002d3c <balancePhAndNutrient+0x714>)
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f001 ffe2 	bl	8004b70 <calcPhDownDose>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4963      	ldr	r1, [pc, #396]	; (8002d40 <balancePhAndNutrient+0x718>)
 8002bb2:	e9c1 2300 	strd	r2, r3, [r1]
				doseWater(pH_down_dose,0,0);
 8002bb6:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <balancePhAndNutrient+0x718>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f7fd ffcc 	bl	8000b5c <__aeabi_d2f>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 fdf3 	bl	80047ba <doseWater>
				total_pH_down_ml += pH_down_dose;
 8002bd4:	4b5b      	ldr	r3, [pc, #364]	; (8002d44 <balancePhAndNutrient+0x71c>)
 8002bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bda:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <balancePhAndNutrient+0x718>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd fb0e 	bl	8000200 <__adddf3>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4956      	ldr	r1, [pc, #344]	; (8002d44 <balancePhAndNutrient+0x71c>)
 8002bea:	e9c1 2300 	strd	r2, r3, [r1]
				total_pH_down_ml_per_file += pH_down_dose;
 8002bee:	4b56      	ldr	r3, [pc, #344]	; (8002d48 <balancePhAndNutrient+0x720>)
 8002bf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bf4:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <balancePhAndNutrient+0x718>)
 8002bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfa:	f7fd fb01 	bl	8000200 <__adddf3>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4951      	ldr	r1, [pc, #324]	; (8002d48 <balancePhAndNutrient+0x720>)
 8002c04:	e9c1 2300 	strd	r2, r3, [r1]
				pH_down = 0;
 8002c08:	4b4b      	ldr	r3, [pc, #300]	; (8002d38 <balancePhAndNutrient+0x710>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
				time_to_bal_pH = waitForWaterToStabilize();
 8002c0e:	f000 ffc5 	bl	8003b9c <waitForWaterToStabilize>
 8002c12:	4603      	mov	r3, r0
 8002c14:	4a4d      	ldr	r2, [pc, #308]	; (8002d4c <balancePhAndNutrient+0x724>)
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	e0e2      	b.n	8002de0 <balancePhAndNutrient+0x7b8>
			}
			else if(pH_up == 1)
 8002c1a:	4b46      	ldr	r3, [pc, #280]	; (8002d34 <balancePhAndNutrient+0x70c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	f040 80de 	bne.w	8002de0 <balancePhAndNutrient+0x7b8>
			{
				pH_up_dose = calcPhUpDose(pH_set_point, nutrient_set_point);
 8002c24:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <balancePhAndNutrient+0x704>)
 8002c26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c2a:	4b44      	ldr	r3, [pc, #272]	; (8002d3c <balancePhAndNutrient+0x714>)
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f001 fdf2 	bl	8004818 <calcPhUpDose>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4945      	ldr	r1, [pc, #276]	; (8002d50 <balancePhAndNutrient+0x728>)
 8002c3a:	e9c1 2300 	strd	r2, r3, [r1]
				doseWater(0,pH_up_dose,0);
 8002c3e:	4b44      	ldr	r3, [pc, #272]	; (8002d50 <balancePhAndNutrient+0x728>)
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	f7fd ff88 	bl	8000b5c <__aeabi_d2f>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	4619      	mov	r1, r3
 8002c54:	f04f 0000 	mov.w	r0, #0
 8002c58:	f001 fdaf 	bl	80047ba <doseWater>
				total_pH_up_ml += pH_up_dose;
 8002c5c:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <balancePhAndNutrient+0x72c>)
 8002c5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c62:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <balancePhAndNutrient+0x728>)
 8002c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c68:	f7fd faca 	bl	8000200 <__adddf3>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4938      	ldr	r1, [pc, #224]	; (8002d54 <balancePhAndNutrient+0x72c>)
 8002c72:	e9c1 2300 	strd	r2, r3, [r1]
				total_pH_up_ml_per_file+= pH_up_dose;
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <balancePhAndNutrient+0x730>)
 8002c78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c7c:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <balancePhAndNutrient+0x728>)
 8002c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c82:	f7fd fabd 	bl	8000200 <__adddf3>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4933      	ldr	r1, [pc, #204]	; (8002d58 <balancePhAndNutrient+0x730>)
 8002c8c:	e9c1 2300 	strd	r2, r3, [r1]
				pH_up = 0;
 8002c90:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <balancePhAndNutrient+0x70c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
				time_to_bal_pH = waitForWaterToStabilize();
 8002c96:	f000 ff81 	bl	8003b9c <waitForWaterToStabilize>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4a2b      	ldr	r2, [pc, #172]	; (8002d4c <balancePhAndNutrient+0x724>)
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	e09e      	b.n	8002de0 <balancePhAndNutrient+0x7b8>
			}
		}
		else if(pH_down == 1)
 8002ca2:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <balancePhAndNutrient+0x710>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d158      	bne.n	8002d5c <balancePhAndNutrient+0x734>
		{
			pH_down_dose = calcPhDownDose(pH_set_point, nutrient_set_point);
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <balancePhAndNutrient+0x704>)
 8002cac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <balancePhAndNutrient+0x714>)
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	f001 ff5b 	bl	8004b70 <calcPhDownDose>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4920      	ldr	r1, [pc, #128]	; (8002d40 <balancePhAndNutrient+0x718>)
 8002cc0:	e9c1 2300 	strd	r2, r3, [r1]
			doseWater(pH_down_dose,0,0);
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <balancePhAndNutrient+0x718>)
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f7fd ff45 	bl	8000b5c <__aeabi_d2f>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0100 	mov.w	r1, #0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 fd6c 	bl	80047ba <doseWater>
			total_pH_down_ml += pH_down_dose;
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <balancePhAndNutrient+0x71c>)
 8002ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce8:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <balancePhAndNutrient+0x718>)
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	f7fd fa87 	bl	8000200 <__adddf3>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4913      	ldr	r1, [pc, #76]	; (8002d44 <balancePhAndNutrient+0x71c>)
 8002cf8:	e9c1 2300 	strd	r2, r3, [r1]
			total_pH_down_ml_per_file += pH_down_dose;
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <balancePhAndNutrient+0x720>)
 8002cfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <balancePhAndNutrient+0x718>)
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	f7fd fa7a 	bl	8000200 <__adddf3>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	490d      	ldr	r1, [pc, #52]	; (8002d48 <balancePhAndNutrient+0x720>)
 8002d12:	e9c1 2300 	strd	r2, r3, [r1]
			pH_down = 0;
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <balancePhAndNutrient+0x710>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
			time_to_bal_pH = waitForWaterToStabilize();
 8002d1c:	f000 ff3e 	bl	8003b9c <waitForWaterToStabilize>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <balancePhAndNutrient+0x724>)
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e05b      	b.n	8002de0 <balancePhAndNutrient+0x7b8>
 8002d28:	200027b0 	.word	0x200027b0
 8002d2c:	20000038 	.word	0x20000038
 8002d30:	20000058 	.word	0x20000058
 8002d34:	20004ee4 	.word	0x20004ee4
 8002d38:	20004ee8 	.word	0x20004ee8
 8002d3c:	20000030 	.word	0x20000030
 8002d40:	20002768 	.word	0x20002768
 8002d44:	20002788 	.word	0x20002788
 8002d48:	200027a0 	.word	0x200027a0
 8002d4c:	20004ee0 	.word	0x20004ee0
 8002d50:	20002760 	.word	0x20002760
 8002d54:	20002780 	.word	0x20002780
 8002d58:	20002798 	.word	0x20002798
		}
		else if(pH_up == 1)
 8002d5c:	4b7c      	ldr	r3, [pc, #496]	; (8002f50 <balancePhAndNutrient+0x928>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d13d      	bne.n	8002de0 <balancePhAndNutrient+0x7b8>
		{
			pH_up_dose = calcPhUpDose(pH_set_point, nutrient_set_point);
 8002d64:	4b7b      	ldr	r3, [pc, #492]	; (8002f54 <balancePhAndNutrient+0x92c>)
 8002d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d6a:	4b7b      	ldr	r3, [pc, #492]	; (8002f58 <balancePhAndNutrient+0x930>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f001 fd52 	bl	8004818 <calcPhUpDose>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4978      	ldr	r1, [pc, #480]	; (8002f5c <balancePhAndNutrient+0x934>)
 8002d7a:	e9c1 2300 	strd	r2, r3, [r1]
			doseWater(0,pH_up_dose,0);
 8002d7e:	4b77      	ldr	r3, [pc, #476]	; (8002f5c <balancePhAndNutrient+0x934>)
 8002d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f7fd fee8 	bl	8000b5c <__aeabi_d2f>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	4619      	mov	r1, r3
 8002d94:	f04f 0000 	mov.w	r0, #0
 8002d98:	f001 fd0f 	bl	80047ba <doseWater>
			total_pH_up_ml += pH_up_dose;
 8002d9c:	4b70      	ldr	r3, [pc, #448]	; (8002f60 <balancePhAndNutrient+0x938>)
 8002d9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002da2:	4b6e      	ldr	r3, [pc, #440]	; (8002f5c <balancePhAndNutrient+0x934>)
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	f7fd fa2a 	bl	8000200 <__adddf3>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	496b      	ldr	r1, [pc, #428]	; (8002f60 <balancePhAndNutrient+0x938>)
 8002db2:	e9c1 2300 	strd	r2, r3, [r1]
			total_pH_up_ml_per_file += pH_up_dose;
 8002db6:	4b6b      	ldr	r3, [pc, #428]	; (8002f64 <balancePhAndNutrient+0x93c>)
 8002db8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dbc:	4b67      	ldr	r3, [pc, #412]	; (8002f5c <balancePhAndNutrient+0x934>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f7fd fa1d 	bl	8000200 <__adddf3>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4966      	ldr	r1, [pc, #408]	; (8002f64 <balancePhAndNutrient+0x93c>)
 8002dcc:	e9c1 2300 	strd	r2, r3, [r1]
			pH_up = 0;
 8002dd0:	4b5f      	ldr	r3, [pc, #380]	; (8002f50 <balancePhAndNutrient+0x928>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
			time_to_bal_pH = waitForWaterToStabilize();
 8002dd6:	f000 fee1 	bl	8003b9c <waitForWaterToStabilize>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4a62      	ldr	r2, [pc, #392]	; (8002f68 <balancePhAndNutrient+0x940>)
 8002dde:	6013      	str	r3, [r2, #0]
		}
		osDelay(500);
 8002de0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002de4:	f010 f937 	bl	8013056 <osDelay>
		num_of_stable_runs++;
 8002de8:	4b60      	ldr	r3, [pc, #384]	; (8002f6c <balancePhAndNutrient+0x944>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	4a5f      	ldr	r2, [pc, #380]	; (8002f6c <balancePhAndNutrient+0x944>)
 8002df0:	6013      	str	r3, [r2, #0]
		add_data_to_array();
 8002df2:	f7fe ffc1 	bl	8001d78 <add_data_to_array>
		pH_up_dose = 0;
 8002df6:	4959      	ldr	r1, [pc, #356]	; (8002f5c <balancePhAndNutrient+0x934>)
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	e9c1 2300 	strd	r2, r3, [r1]
		pH_down_dose = 0;
 8002e04:	495a      	ldr	r1, [pc, #360]	; (8002f70 <balancePhAndNutrient+0x948>)
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9c1 2300 	strd	r2, r3, [r1]
		nutrient_dose = 0;
 8002e12:	4958      	ldr	r1, [pc, #352]	; (8002f74 <balancePhAndNutrient+0x94c>)
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9c1 2300 	strd	r2, r3, [r1]
 8002e20:	e04b      	b.n	8002eba <balancePhAndNutrient+0x892>
	}
	else if(num_of_stable_runs>=7 && waiting_to_write == 'n' && (total_pH_up_ml_per_file > 0 || total_pH_down_ml_per_file > 0 || total_nutrient_ml_per_file > 0) && setting_nutrient =='n' && setting_pH == 'n')
 8002e22:	4b52      	ldr	r3, [pc, #328]	; (8002f6c <balancePhAndNutrient+0x944>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	dd47      	ble.n	8002eba <balancePhAndNutrient+0x892>
 8002e2a:	4b53      	ldr	r3, [pc, #332]	; (8002f78 <balancePhAndNutrient+0x950>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b6e      	cmp	r3, #110	; 0x6e
 8002e30:	d143      	bne.n	8002eba <balancePhAndNutrient+0x892>
 8002e32:	4b4c      	ldr	r3, [pc, #304]	; (8002f64 <balancePhAndNutrient+0x93c>)
 8002e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	f7fd fe24 	bl	8000a8c <__aeabi_dcmpgt>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d117      	bne.n	8002e7a <balancePhAndNutrient+0x852>
 8002e4a:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <balancePhAndNutrient+0x954>)
 8002e4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	f7fd fe18 	bl	8000a8c <__aeabi_dcmpgt>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10b      	bne.n	8002e7a <balancePhAndNutrient+0x852>
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <balancePhAndNutrient+0x958>)
 8002e64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	f7fd fe0c 	bl	8000a8c <__aeabi_dcmpgt>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01f      	beq.n	8002eba <balancePhAndNutrient+0x892>
 8002e7a:	4b42      	ldr	r3, [pc, #264]	; (8002f84 <balancePhAndNutrient+0x95c>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b6e      	cmp	r3, #110	; 0x6e
 8002e80:	d11b      	bne.n	8002eba <balancePhAndNutrient+0x892>
 8002e82:	4b41      	ldr	r3, [pc, #260]	; (8002f88 <balancePhAndNutrient+0x960>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b6e      	cmp	r3, #110	; 0x6e
 8002e88:	d117      	bne.n	8002eba <balancePhAndNutrient+0x892>
	{
		waiting_to_write = 'y';
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <balancePhAndNutrient+0x950>)
 8002e8c:	2279      	movs	r2, #121	; 0x79
 8002e8e:	701a      	strb	r2, [r3, #0]
		total_pH_down_ml_per_file = 0;
 8002e90:	493a      	ldr	r1, [pc, #232]	; (8002f7c <balancePhAndNutrient+0x954>)
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	e9c1 2300 	strd	r2, r3, [r1]
		total_pH_up_ml_per_file = 0;
 8002e9e:	4931      	ldr	r1, [pc, #196]	; (8002f64 <balancePhAndNutrient+0x93c>)
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9c1 2300 	strd	r2, r3, [r1]
		total_nutrient_ml_per_file = 0;
 8002eac:	4934      	ldr	r1, [pc, #208]	; (8002f80 <balancePhAndNutrient+0x958>)
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if(usb_good == 1 && num_of_stable_runs >= 7 && waiting_to_write == 'y')//if(usb_good == 1 && (what_to_save < 3) && (what_to_save != 0))
 8002eba:	4b34      	ldr	r3, [pc, #208]	; (8002f8c <balancePhAndNutrient+0x964>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d131      	bne.n	8002f26 <balancePhAndNutrient+0x8fe>
 8002ec2:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <balancePhAndNutrient+0x944>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	dd2d      	ble.n	8002f26 <balancePhAndNutrient+0x8fe>
 8002eca:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <balancePhAndNutrient+0x950>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b79      	cmp	r3, #121	; 0x79
 8002ed0:	d129      	bne.n	8002f26 <balancePhAndNutrient+0x8fe>
	{
		write_balance_data_file('n');
 8002ed2:	206e      	movs	r0, #110	; 0x6e
 8002ed4:	f7fe fe70 	bl	8001bb8 <write_balance_data_file>
		num_of_stable_runs = 0;
 8002ed8:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <balancePhAndNutrient+0x944>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
		balance_index = 0;
 8002ede:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <balancePhAndNutrient+0x968>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
		get_init_conditions  = 'n';
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <balancePhAndNutrient+0x96c>)
 8002ee6:	226e      	movs	r2, #110	; 0x6e
 8002ee8:	701a      	strb	r2, [r3, #0]
		waiting_to_write = 'n';
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <balancePhAndNutrient+0x950>)
 8002eec:	226e      	movs	r2, #110	; 0x6e
 8002eee:	701a      	strb	r2, [r3, #0]
		resetStabilityVars();
 8002ef0:	f000 f856 	bl	8002fa0 <resetStabilityVars>
		for(int a = 0; a < (sizeof balance_data); a++)	// reset the data buffer since we just wrote the data
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	e00f      	b.n	8002f1a <balancePhAndNutrient+0x8f2>
		{
			balance_data[a]   = '\0';
 8002efa:	4a27      	ldr	r2, [pc, #156]	; (8002f98 <balancePhAndNutrient+0x970>)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4413      	add	r3, r2
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
			if(a<25)buffer[a] = '\0';
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b18      	cmp	r3, #24
 8002f08:	dc04      	bgt.n	8002f14 <balancePhAndNutrient+0x8ec>
 8002f0a:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <balancePhAndNutrient+0x974>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
		for(int a = 0; a < (sizeof balance_data); a++)	// reset the data buffer since we just wrote the data
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	3301      	adds	r3, #1
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d9ea      	bls.n	8002efa <balancePhAndNutrient+0x8d2>
 8002f24:	e00f      	b.n	8002f46 <balancePhAndNutrient+0x91e>
		}
	}
	else if(usb_good == 1 && ((10000 - balance_index) < 500)) write_balance_data_file('y'); // if the buffer is full write the file
 8002f26:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <balancePhAndNutrient+0x964>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d10b      	bne.n	8002f46 <balancePhAndNutrient+0x91e>
 8002f2e:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <balancePhAndNutrient+0x968>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8002f36:	3310      	adds	r3, #16
 8002f38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f3c:	da03      	bge.n	8002f46 <balancePhAndNutrient+0x91e>
 8002f3e:	2079      	movs	r0, #121	; 0x79
 8002f40:	f7fe fe3a 	bl	8001bb8 <write_balance_data_file>
}
 8002f44:	e7ff      	b.n	8002f46 <balancePhAndNutrient+0x91e>
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20004ee4 	.word	0x20004ee4
 8002f54:	20000038 	.word	0x20000038
 8002f58:	20000030 	.word	0x20000030
 8002f5c:	20002760 	.word	0x20002760
 8002f60:	20002780 	.word	0x20002780
 8002f64:	20002798 	.word	0x20002798
 8002f68:	20004ee0 	.word	0x20004ee0
 8002f6c:	20004f20 	.word	0x20004f20
 8002f70:	20002768 	.word	0x20002768
 8002f74:	20002770 	.word	0x20002770
 8002f78:	2000009d 	.word	0x2000009d
 8002f7c:	200027a0 	.word	0x200027a0
 8002f80:	20002790 	.word	0x20002790
 8002f84:	200001a1 	.word	0x200001a1
 8002f88:	200001a0 	.word	0x200001a0
 8002f8c:	2000b840 	.word	0x2000b840
 8002f90:	20004ed4 	.word	0x20004ed4
 8002f94:	2000009e 	.word	0x2000009e
 8002f98:	200027c0 	.word	0x200027c0
 8002f9c:	20004ef8 	.word	0x20004ef8

08002fa0 <resetStabilityVars>:
int valid = 0;
double sample_array_TDS[30] = {0}, sample_array_pH[30] = {0}, smallest_value_TDS = 100000, largest_value_TDS = 0, smallest_value_pH = 100, largest_value_pH = 0, prev_largest_pH = 0, prev_largest_TDS = 0, TDS_range = 0,
		pH_range = 0, minimum_sec_duration = 36;

void resetStabilityVars()
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
		average_pH = 0;
 8002fa6:	492e      	ldr	r1, [pc, #184]	; (8003060 <resetStabilityVars+0xc0>)
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	e9c1 2300 	strd	r2, r3, [r1]
		average_TDS = 0;
 8002fb4:	492b      	ldr	r1, [pc, #172]	; (8003064 <resetStabilityVars+0xc4>)
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	e9c1 2300 	strd	r2, r3, [r1]
		run_again = 1; 		// set to one its the first run 2 is multiple 0 is do not run again
 8002fc2:	4b29      	ldr	r3, [pc, #164]	; (8003068 <resetStabilityVars+0xc8>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
		valid = 0;
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <resetStabilityVars+0xcc>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
		historic_sample_index = 0;
 8002fce:	4b28      	ldr	r3, [pc, #160]	; (8003070 <resetStabilityVars+0xd0>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
		slope_factor_average_TDS = 0;
 8002fd4:	4927      	ldr	r1, [pc, #156]	; (8003074 <resetStabilityVars+0xd4>)
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	e9c1 2300 	strd	r2, r3, [r1]
		slope_factor_average_ph = 0;
 8002fe2:	4925      	ldr	r1, [pc, #148]	; (8003078 <resetStabilityVars+0xd8>)
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9c1 2300 	strd	r2, r3, [r1]

		for(int h = 0; h<200; h++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	e02a      	b.n	800304c <resetStabilityVars+0xac>
		{
			historic_largest_pH[h] = 0;
 8002ff6:	4a21      	ldr	r2, [pc, #132]	; (800307c <resetStabilityVars+0xdc>)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	18d1      	adds	r1, r2, r3
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9c1 2300 	strd	r2, r3, [r1]
			historic_smallest_pH[h] = 0;
 800300a:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <resetStabilityVars+0xe0>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	18d1      	adds	r1, r2, r3
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e9c1 2300 	strd	r2, r3, [r1]
			historic_largest_TDS[h] = 0;
 800301e:	4a19      	ldr	r2, [pc, #100]	; (8003084 <resetStabilityVars+0xe4>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	18d1      	adds	r1, r2, r3
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9c1 2300 	strd	r2, r3, [r1]
			historic_smallest_TDS[h] = 0;
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <resetStabilityVars+0xe8>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	18d1      	adds	r1, r2, r3
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9c1 2300 	strd	r2, r3, [r1]
		for(int h = 0; h<200; h++)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3301      	adds	r3, #1
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2bc7      	cmp	r3, #199	; 0xc7
 8003050:	ddd1      	ble.n	8002ff6 <resetStabilityVars+0x56>
		}
}
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	200074e0 	.word	0x200074e0
 8003064:	200074e8 	.word	0x200074e8
 8003068:	200001b8 	.word	0x200001b8
 800306c:	20007534 	.word	0x20007534
 8003070:	200074b8 	.word	0x200074b8
 8003074:	20007520 	.word	0x20007520
 8003078:	20007528 	.word	0x20007528
 800307c:	20004f38 	.word	0x20004f38
 8003080:	20005578 	.word	0x20005578
 8003084:	20005bb8 	.word	0x20005bb8
 8003088:	200061f8 	.word	0x200061f8
 800308c:	00000000 	.word	0x00000000

08003090 <isStabalized>:
double prev_smallest_ph = 0;
double prev_smallest_TDS = 0;

int sample_index1 = 0;
void isStabalized()  // will take a few samples of the waters pH and TDS to determine if the solution has stabilized. If stabilized returns one else 0
{		// get the current system time sets global variables sTime and sDate in RTC_driver.c
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0

	end_time_seconds = 0;
 8003096:	4b40      	ldr	r3, [pc, #256]	; (8003198 <isStabalized+0x108>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
	prev_smallest_ph = smallest_value_pH;
 800309c:	4b3f      	ldr	r3, [pc, #252]	; (800319c <isStabalized+0x10c>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	493f      	ldr	r1, [pc, #252]	; (80031a0 <isStabalized+0x110>)
 80030a4:	e9c1 2300 	strd	r2, r3, [r1]
	prev_smallest_TDS = smallest_value_TDS;
 80030a8:	4b3e      	ldr	r3, [pc, #248]	; (80031a4 <isStabalized+0x114>)
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	493e      	ldr	r1, [pc, #248]	; (80031a8 <isStabalized+0x118>)
 80030b0:	e9c1 2300 	strd	r2, r3, [r1]
	prev_largest_TDS = largest_value_TDS;
 80030b4:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <isStabalized+0x11c>)
 80030b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ba:	493d      	ldr	r1, [pc, #244]	; (80031b0 <isStabalized+0x120>)
 80030bc:	e9c1 2300 	strd	r2, r3, [r1]
	prev_largest_pH = largest_value_pH;
 80030c0:	4b3c      	ldr	r3, [pc, #240]	; (80031b4 <isStabalized+0x124>)
 80030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c6:	493c      	ldr	r1, [pc, #240]	; (80031b8 <isStabalized+0x128>)
 80030c8:	e9c1 2300 	strd	r2, r3, [r1]

	done_sampling = 'n';
 80030cc:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <isStabalized+0x12c>)
 80030ce:	226e      	movs	r2, #110	; 0x6e
 80030d0:	701a      	strb	r2, [r3, #0]


	for(int samples = 0; samples<num_sensor_samples; samples++)			   // sample TDS and PH every half second for 30 times
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	e01a      	b.n	800310e <isStabalized+0x7e>
	{
		getSensorValues(0);
 80030d8:	2000      	movs	r0, #0
 80030da:	f002 fdf3 	bl	8005cc4 <getSensorValues>
		sample_array_TDS[samples] = TDS;
 80030de:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <isStabalized+0x130>)
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	4837      	ldr	r0, [pc, #220]	; (80031c4 <isStabalized+0x134>)
 80030e6:	69f9      	ldr	r1, [r7, #28]
 80030e8:	00c9      	lsls	r1, r1, #3
 80030ea:	4401      	add	r1, r0
 80030ec:	e9c1 2300 	strd	r2, r3, [r1]
		sample_array_pH[samples] = pH;
 80030f0:	4b35      	ldr	r3, [pc, #212]	; (80031c8 <isStabalized+0x138>)
 80030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f6:	4835      	ldr	r0, [pc, #212]	; (80031cc <isStabalized+0x13c>)
 80030f8:	69f9      	ldr	r1, [r7, #28]
 80030fa:	00c9      	lsls	r1, r1, #3
 80030fc:	4401      	add	r1, r0
 80030fe:	e9c1 2300 	strd	r2, r3, [r1]
		osDelay(10);
 8003102:	200a      	movs	r0, #10
 8003104:	f00f ffa7 	bl	8013056 <osDelay>
	for(int samples = 0; samples<num_sensor_samples; samples++)			   // sample TDS and PH every half second for 30 times
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	3301      	adds	r3, #1
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <isStabalized+0x140>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	429a      	cmp	r2, r3
 8003116:	dbdf      	blt.n	80030d8 <isStabalized+0x48>
	}
	done_sampling = 'y';
 8003118:	4b28      	ldr	r3, [pc, #160]	; (80031bc <isStabalized+0x12c>)
 800311a:	2279      	movs	r2, #121	; 0x79
 800311c:	701a      	strb	r2, [r3, #0]
	smallest_value_TDS = 10000;							   // set smallest values to value much higher than expected
 800311e:	4921      	ldr	r1, [pc, #132]	; (80031a4 <isStabalized+0x114>)
 8003120:	a31b      	add	r3, pc, #108	; (adr r3, 8003190 <isStabalized+0x100>)
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	e9c1 2300 	strd	r2, r3, [r1]
	largest_value_TDS = 0;	  							   // set largest to the smallest possible value these steps ensure we catch error cases
 800312a:	4920      	ldr	r1, [pc, #128]	; (80031ac <isStabalized+0x11c>)
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	e9c1 2300 	strd	r2, r3, [r1]
	smallest_value_pH = 100;
 8003138:	4918      	ldr	r1, [pc, #96]	; (800319c <isStabalized+0x10c>)
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <isStabalized+0x144>)
 8003140:	e9c1 2300 	strd	r2, r3, [r1]
    largest_value_pH = 0;
 8003144:	491b      	ldr	r1, [pc, #108]	; (80031b4 <isStabalized+0x124>)
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9c1 2300 	strd	r2, r3, [r1]

    double slope_factor_ph = 0;							   // if positive we are increasing, negative decreasing
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double slope_factor_TDS = 0;
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9c7 2302 	strd	r2, r3, [r7, #8]
    average_pH = 0;
 800316a:	491b      	ldr	r1, [pc, #108]	; (80031d8 <isStabalized+0x148>)
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	e9c1 2300 	strd	r2, r3, [r1]
    average_TDS = 0;
 8003178:	4918      	ldr	r1, [pc, #96]	; (80031dc <isStabalized+0x14c>)
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i<num_sensor_samples;i++)
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	e13c      	b.n	8003406 <isStabalized+0x376>
 800318c:	f3af 8000 	nop.w
 8003190:	00000000 	.word	0x00000000
 8003194:	40c38800 	.word	0x40c38800
 8003198:	20007750 	.word	0x20007750
 800319c:	200001c8 	.word	0x200001c8
 80031a0:	20007758 	.word	0x20007758
 80031a4:	200001c0 	.word	0x200001c0
 80031a8:	20007760 	.word	0x20007760
 80031ac:	20007718 	.word	0x20007718
 80031b0:	20007730 	.word	0x20007730
 80031b4:	20007720 	.word	0x20007720
 80031b8:	20007728 	.word	0x20007728
 80031bc:	20000209 	.word	0x20000209
 80031c0:	200027a8 	.word	0x200027a8
 80031c4:	20007538 	.word	0x20007538
 80031c8:	200027b0 	.word	0x200027b0
 80031cc:	20007628 	.word	0x20007628
 80031d0:	2000019c 	.word	0x2000019c
 80031d4:	40590000 	.word	0x40590000
 80031d8:	200074e0 	.word	0x200074e0
 80031dc:	200074e8 	.word	0x200074e8
	{
		if(sample_array_TDS[i] > largest_value_TDS  && sample_array_TDS[i] != 0)  largest_value_TDS  = sample_array_TDS[i];	// find largest and smallest values in our data
 80031e0:	4aa5      	ldr	r2, [pc, #660]	; (8003478 <isStabalized+0x3e8>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ec:	4ba3      	ldr	r3, [pc, #652]	; (800347c <isStabalized+0x3ec>)
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	f7fd fc4b 	bl	8000a8c <__aeabi_dcmpgt>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d017      	beq.n	800322c <isStabalized+0x19c>
 80031fc:	4a9e      	ldr	r2, [pc, #632]	; (8003478 <isStabalized+0x3e8>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	f7fd fc14 	bl	8000a3c <__aeabi_dcmpeq>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d108      	bne.n	800322c <isStabalized+0x19c>
 800321a:	4a97      	ldr	r2, [pc, #604]	; (8003478 <isStabalized+0x3e8>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	4995      	ldr	r1, [pc, #596]	; (800347c <isStabalized+0x3ec>)
 8003228:	e9c1 2300 	strd	r2, r3, [r1]
		if(sample_array_TDS[i] < smallest_value_TDS && sample_array_TDS[i] != 0) smallest_value_TDS = sample_array_TDS[i];
 800322c:	4a92      	ldr	r2, [pc, #584]	; (8003478 <isStabalized+0x3e8>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003238:	4b91      	ldr	r3, [pc, #580]	; (8003480 <isStabalized+0x3f0>)
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	f7fd fc07 	bl	8000a50 <__aeabi_dcmplt>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d017      	beq.n	8003278 <isStabalized+0x1e8>
 8003248:	4a8b      	ldr	r2, [pc, #556]	; (8003478 <isStabalized+0x3e8>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	f7fd fbee 	bl	8000a3c <__aeabi_dcmpeq>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d108      	bne.n	8003278 <isStabalized+0x1e8>
 8003266:	4a84      	ldr	r2, [pc, #528]	; (8003478 <isStabalized+0x3e8>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003272:	4983      	ldr	r1, [pc, #524]	; (8003480 <isStabalized+0x3f0>)
 8003274:	e9c1 2300 	strd	r2, r3, [r1]
		if(sample_array_pH[i]  > largest_value_pH && sample_array_pH[i] != 0) 	 largest_value_pH   = sample_array_pH[i];
 8003278:	4a82      	ldr	r2, [pc, #520]	; (8003484 <isStabalized+0x3f4>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4413      	add	r3, r2
 8003280:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003284:	4b80      	ldr	r3, [pc, #512]	; (8003488 <isStabalized+0x3f8>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	f7fd fbff 	bl	8000a8c <__aeabi_dcmpgt>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d017      	beq.n	80032c4 <isStabalized+0x234>
 8003294:	4a7b      	ldr	r2, [pc, #492]	; (8003484 <isStabalized+0x3f4>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	f7fd fbc8 	bl	8000a3c <__aeabi_dcmpeq>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d108      	bne.n	80032c4 <isStabalized+0x234>
 80032b2:	4a74      	ldr	r2, [pc, #464]	; (8003484 <isStabalized+0x3f4>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032be:	4972      	ldr	r1, [pc, #456]	; (8003488 <isStabalized+0x3f8>)
 80032c0:	e9c1 2300 	strd	r2, r3, [r1]
		if(sample_array_pH[i]  < smallest_value_pH && sample_array_pH[i] != 0)   smallest_value_pH  = sample_array_pH[i];
 80032c4:	4a6f      	ldr	r2, [pc, #444]	; (8003484 <isStabalized+0x3f4>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032d0:	4b6e      	ldr	r3, [pc, #440]	; (800348c <isStabalized+0x3fc>)
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f7fd fbbb 	bl	8000a50 <__aeabi_dcmplt>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d017      	beq.n	8003310 <isStabalized+0x280>
 80032e0:	4a68      	ldr	r2, [pc, #416]	; (8003484 <isStabalized+0x3f4>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	f7fd fba2 	bl	8000a3c <__aeabi_dcmpeq>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d108      	bne.n	8003310 <isStabalized+0x280>
 80032fe:	4a61      	ldr	r2, [pc, #388]	; (8003484 <isStabalized+0x3f4>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	4960      	ldr	r1, [pc, #384]	; (800348c <isStabalized+0x3fc>)
 800330c:	e9c1 2300 	strd	r2, r3, [r1]
		if( sample_array_TDS[i] != 0 && sample_array_pH[i] != 0)
 8003310:	4a59      	ldr	r2, [pc, #356]	; (8003478 <isStabalized+0x3e8>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	f7fd fb8a 	bl	8000a3c <__aeabi_dcmpeq>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d168      	bne.n	8003400 <isStabalized+0x370>
 800332e:	4a55      	ldr	r2, [pc, #340]	; (8003484 <isStabalized+0x3f4>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	e9d3 0100 	ldrd	r0, r1, [r3]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	f7fd fb7b 	bl	8000a3c <__aeabi_dcmpeq>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d159      	bne.n	8003400 <isStabalized+0x370>
		{
			average_pH  += sample_array_pH[i];
 800334c:	4a4d      	ldr	r2, [pc, #308]	; (8003484 <isStabalized+0x3f4>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4413      	add	r3, r2
 8003354:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003358:	4b4d      	ldr	r3, [pc, #308]	; (8003490 <isStabalized+0x400>)
 800335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335e:	f7fc ff4f 	bl	8000200 <__adddf3>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	494a      	ldr	r1, [pc, #296]	; (8003490 <isStabalized+0x400>)
 8003368:	e9c1 2300 	strd	r2, r3, [r1]
			average_TDS += sample_array_TDS[i];
 800336c:	4a42      	ldr	r2, [pc, #264]	; (8003478 <isStabalized+0x3e8>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003378:	4b46      	ldr	r3, [pc, #280]	; (8003494 <isStabalized+0x404>)
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f7fc ff3f 	bl	8000200 <__adddf3>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4943      	ldr	r1, [pc, #268]	; (8003494 <isStabalized+0x404>)
 8003388:	e9c1 2300 	strd	r2, r3, [r1]
			sample_index1++;
 800338c:	4b42      	ldr	r3, [pc, #264]	; (8003498 <isStabalized+0x408>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3301      	adds	r3, #1
 8003392:	4a41      	ldr	r2, [pc, #260]	; (8003498 <isStabalized+0x408>)
 8003394:	6013      	str	r3, [r2, #0]
			// find the slope of the data
			if(i>1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b01      	cmp	r3, #1
 800339a:	dd31      	ble.n	8003400 <isStabalized+0x370>
			{
				slope_factor_TDS += (sample_array_TDS[i] - sample_array_TDS[i-1]);
 800339c:	4a36      	ldr	r2, [pc, #216]	; (8003478 <isStabalized+0x3e8>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	4a32      	ldr	r2, [pc, #200]	; (8003478 <isStabalized+0x3e8>)
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f7fc ff21 	bl	80001fc <__aeabi_dsub>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033c2:	f7fc ff1d 	bl	8000200 <__adddf3>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
				slope_factor_ph  += (sample_array_pH[i]  - sample_array_pH[i-1]);
 80033ce:	4a2d      	ldr	r2, [pc, #180]	; (8003484 <isStabalized+0x3f4>)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3b01      	subs	r3, #1
 80033de:	4a29      	ldr	r2, [pc, #164]	; (8003484 <isStabalized+0x3f4>)
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f7fc ff08 	bl	80001fc <__aeabi_dsub>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033f4:	f7fc ff04 	bl	8000200 <__adddf3>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i = 0; i<num_sensor_samples;i++)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3301      	adds	r3, #1
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	4b25      	ldr	r3, [pc, #148]	; (800349c <isStabalized+0x40c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	429a      	cmp	r2, r3
 800340e:	f6ff aee7 	blt.w	80031e0 <isStabalized+0x150>
			}
		}
	}

	TDS_range = largest_value_TDS - smallest_value_TDS; // calculate the range in the samples i.e. (largest valve)-(smallest value)
 8003412:	4b1a      	ldr	r3, [pc, #104]	; (800347c <isStabalized+0x3ec>)
 8003414:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <isStabalized+0x3f0>)
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	f7fc feed 	bl	80001fc <__aeabi_dsub>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	491e      	ldr	r1, [pc, #120]	; (80034a0 <isStabalized+0x410>)
 8003428:	e9c1 2300 	strd	r2, r3, [r1]
	pH_range  = largest_value_pH  - smallest_value_pH;
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <isStabalized+0x3f8>)
 800342e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003432:	4b16      	ldr	r3, [pc, #88]	; (800348c <isStabalized+0x3fc>)
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f7fc fee0 	bl	80001fc <__aeabi_dsub>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4918      	ldr	r1, [pc, #96]	; (80034a4 <isStabalized+0x414>)
 8003442:	e9c1 2300 	strd	r2, r3, [r1]

	historic_TDS_max = 0;
 8003446:	4918      	ldr	r1, [pc, #96]	; (80034a8 <isStabalized+0x418>)
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9c1 2300 	strd	r2, r3, [r1]
	historic_TDS_min = 100000;
 8003454:	4915      	ldr	r1, [pc, #84]	; (80034ac <isStabalized+0x41c>)
 8003456:	a306      	add	r3, pc, #24	; (adr r3, 8003470 <isStabalized+0x3e0>)
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	e9c1 2300 	strd	r2, r3, [r1]
	historic_pH_max  = 0;
 8003460:	4913      	ldr	r1, [pc, #76]	; (80034b0 <isStabalized+0x420>)
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	e9c1 2300 	strd	r2, r3, [r1]
 800346e:	e021      	b.n	80034b4 <isStabalized+0x424>
 8003470:	00000000 	.word	0x00000000
 8003474:	40f86a00 	.word	0x40f86a00
 8003478:	20007538 	.word	0x20007538
 800347c:	20007718 	.word	0x20007718
 8003480:	200001c0 	.word	0x200001c0
 8003484:	20007628 	.word	0x20007628
 8003488:	20007720 	.word	0x20007720
 800348c:	200001c8 	.word	0x200001c8
 8003490:	200074e0 	.word	0x200074e0
 8003494:	200074e8 	.word	0x200074e8
 8003498:	20007768 	.word	0x20007768
 800349c:	2000019c 	.word	0x2000019c
 80034a0:	20007738 	.word	0x20007738
 80034a4:	20007740 	.word	0x20007740
 80034a8:	20007500 	.word	0x20007500
 80034ac:	20007518 	.word	0x20007518
 80034b0:	20007508 	.word	0x20007508
	historic_pH_min  = 100000;
 80034b4:	4966      	ldr	r1, [pc, #408]	; (8003650 <isStabalized+0x5c0>)
 80034b6:	a364      	add	r3, pc, #400	; (adr r3, 8003648 <isStabalized+0x5b8>)
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	e9c1 2300 	strd	r2, r3, [r1]

	average_pH  = average_pH/(sample_index1);
 80034c0:	4b64      	ldr	r3, [pc, #400]	; (8003654 <isStabalized+0x5c4>)
 80034c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80034c6:	4b64      	ldr	r3, [pc, #400]	; (8003658 <isStabalized+0x5c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fc ffe4 	bl	8000498 <__aeabi_i2d>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4620      	mov	r0, r4
 80034d6:	4629      	mov	r1, r5
 80034d8:	f7fd f972 	bl	80007c0 <__aeabi_ddiv>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	495c      	ldr	r1, [pc, #368]	; (8003654 <isStabalized+0x5c4>)
 80034e2:	e9c1 2300 	strd	r2, r3, [r1]
	average_TDS = average_TDS/(sample_index1);
 80034e6:	4b5d      	ldr	r3, [pc, #372]	; (800365c <isStabalized+0x5cc>)
 80034e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80034ec:	4b5a      	ldr	r3, [pc, #360]	; (8003658 <isStabalized+0x5c8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fc ffd1 	bl	8000498 <__aeabi_i2d>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4620      	mov	r0, r4
 80034fc:	4629      	mov	r1, r5
 80034fe:	f7fd f95f 	bl	80007c0 <__aeabi_ddiv>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4955      	ldr	r1, [pc, #340]	; (800365c <isStabalized+0x5cc>)
 8003508:	e9c1 2300 	strd	r2, r3, [r1]
	sample_index1 = 0;
 800350c:	4b52      	ldr	r3, [pc, #328]	; (8003658 <isStabalized+0x5c8>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
	if(historic_sample_index < number_historic_samples)
 8003512:	4b53      	ldr	r3, [pc, #332]	; (8003660 <isStabalized+0x5d0>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b53      	ldr	r3, [pc, #332]	; (8003664 <isStabalized+0x5d4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	da41      	bge.n	80035a2 <isStabalized+0x512>
	{
		historic_largest_pH[historic_sample_index]   = largest_value_pH;
 800351e:	4b50      	ldr	r3, [pc, #320]	; (8003660 <isStabalized+0x5d0>)
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	4b51      	ldr	r3, [pc, #324]	; (8003668 <isStabalized+0x5d8>)
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	4850      	ldr	r0, [pc, #320]	; (800366c <isStabalized+0x5dc>)
 800352a:	00c9      	lsls	r1, r1, #3
 800352c:	4401      	add	r1, r0
 800352e:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_pH[historic_sample_index]  = smallest_value_pH;
 8003532:	4b4b      	ldr	r3, [pc, #300]	; (8003660 <isStabalized+0x5d0>)
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	4b4e      	ldr	r3, [pc, #312]	; (8003670 <isStabalized+0x5e0>)
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	484d      	ldr	r0, [pc, #308]	; (8003674 <isStabalized+0x5e4>)
 800353e:	00c9      	lsls	r1, r1, #3
 8003540:	4401      	add	r1, r0
 8003542:	e9c1 2300 	strd	r2, r3, [r1]
		historic_largest_TDS[historic_sample_index]  = largest_value_TDS;
 8003546:	4b46      	ldr	r3, [pc, #280]	; (8003660 <isStabalized+0x5d0>)
 8003548:	6819      	ldr	r1, [r3, #0]
 800354a:	4b4b      	ldr	r3, [pc, #300]	; (8003678 <isStabalized+0x5e8>)
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	484a      	ldr	r0, [pc, #296]	; (800367c <isStabalized+0x5ec>)
 8003552:	00c9      	lsls	r1, r1, #3
 8003554:	4401      	add	r1, r0
 8003556:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_TDS[historic_sample_index] = smallest_value_TDS;
 800355a:	4b41      	ldr	r3, [pc, #260]	; (8003660 <isStabalized+0x5d0>)
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	4b48      	ldr	r3, [pc, #288]	; (8003680 <isStabalized+0x5f0>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	4847      	ldr	r0, [pc, #284]	; (8003684 <isStabalized+0x5f4>)
 8003566:	00c9      	lsls	r1, r1, #3
 8003568:	4401      	add	r1, r0
 800356a:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_pH[historic_sample_index]   = average_pH;
 800356e:	4b3c      	ldr	r3, [pc, #240]	; (8003660 <isStabalized+0x5d0>)
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	4b38      	ldr	r3, [pc, #224]	; (8003654 <isStabalized+0x5c4>)
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	4843      	ldr	r0, [pc, #268]	; (8003688 <isStabalized+0x5f8>)
 800357a:	00c9      	lsls	r1, r1, #3
 800357c:	4401      	add	r1, r0
 800357e:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS[historic_sample_index]  = average_TDS;
 8003582:	4b37      	ldr	r3, [pc, #220]	; (8003660 <isStabalized+0x5d0>)
 8003584:	6819      	ldr	r1, [r3, #0]
 8003586:	4b35      	ldr	r3, [pc, #212]	; (800365c <isStabalized+0x5cc>)
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	483f      	ldr	r0, [pc, #252]	; (800368c <isStabalized+0x5fc>)
 800358e:	00c9      	lsls	r1, r1, #3
 8003590:	4401      	add	r1, r0
 8003592:	e9c1 2300 	strd	r2, r3, [r1]
		historic_sample_index++;
 8003596:	4b32      	ldr	r3, [pc, #200]	; (8003660 <isStabalized+0x5d0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3301      	adds	r3, #1
 800359c:	4a30      	ldr	r2, [pc, #192]	; (8003660 <isStabalized+0x5d0>)
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	e004      	b.n	80035ac <isStabalized+0x51c>
	}
	else
	{
		resetStabilityVars();
 80035a2:	f7ff fcfd 	bl	8002fa0 <resetStabilityVars>
		run_again = 2;
 80035a6:	4b3a      	ldr	r3, [pc, #232]	; (8003690 <isStabalized+0x600>)
 80035a8:	2202      	movs	r2, #2
 80035aa:	601a      	str	r2, [r3, #0]
	}
	if(historic_sample_index > 20)
 80035ac:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <isStabalized+0x5d0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b14      	cmp	r3, #20
 80035b2:	f340 81ae 	ble.w	8003912 <isStabalized+0x882>
	{
		historic_average_pH_min = 1000;
 80035b6:	4937      	ldr	r1, [pc, #220]	; (8003694 <isStabalized+0x604>)
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	4b36      	ldr	r3, [pc, #216]	; (8003698 <isStabalized+0x608>)
 80035be:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_pH_max = 0;
 80035c2:	4936      	ldr	r1, [pc, #216]	; (800369c <isStabalized+0x60c>)
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS_min = 100000;
 80035d0:	4933      	ldr	r1, [pc, #204]	; (80036a0 <isStabalized+0x610>)
 80035d2:	a31d      	add	r3, pc, #116	; (adr r3, 8003648 <isStabalized+0x5b8>)
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS_max = 0;
 80035dc:	4931      	ldr	r1, [pc, #196]	; (80036a4 <isStabalized+0x614>)
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	e9c1 2300 	strd	r2, r3, [r1]
		smallest_value_TDS = 100000;							   // set smallest values to value much higher than expected
 80035ea:	4925      	ldr	r1, [pc, #148]	; (8003680 <isStabalized+0x5f0>)
 80035ec:	a316      	add	r3, pc, #88	; (adr r3, 8003648 <isStabalized+0x5b8>)
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	e9c1 2300 	strd	r2, r3, [r1]
		largest_value_TDS = 0;	  							   // set largest to the smallest possible value these steps ensure we catch error cases
 80035f6:	4920      	ldr	r1, [pc, #128]	; (8003678 <isStabalized+0x5e8>)
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9c1 2300 	strd	r2, r3, [r1]
		smallest_value_pH = 100;
 8003604:	491a      	ldr	r1, [pc, #104]	; (8003670 <isStabalized+0x5e0>)
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <isStabalized+0x618>)
 800360c:	e9c1 2300 	strd	r2, r3, [r1]
		largest_value_pH = 0;
 8003610:	4915      	ldr	r1, [pc, #84]	; (8003668 <isStabalized+0x5d8>)
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9c1 2300 	strd	r2, r3, [r1]
		slope_factor_average_TDS = 0;
 800361e:	4923      	ldr	r1, [pc, #140]	; (80036ac <isStabalized+0x61c>)
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9c1 2300 	strd	r2, r3, [r1]
		slope_factor_average_ph = 0;
 800362c:	4920      	ldr	r1, [pc, #128]	; (80036b0 <isStabalized+0x620>)
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	e9c1 2300 	strd	r2, r3, [r1]
		for(int k = historic_sample_index-20; k<historic_sample_index; k++) 								// if we have at-least 5 samples find the max and min to calculate range of the last 5 runs
 800363a:	4b09      	ldr	r3, [pc, #36]	; (8003660 <isStabalized+0x5d0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3b14      	subs	r3, #20
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	e12c      	b.n	800389e <isStabalized+0x80e>
 8003644:	f3af 8000 	nop.w
 8003648:	00000000 	.word	0x00000000
 800364c:	40f86a00 	.word	0x40f86a00
 8003650:	20007510 	.word	0x20007510
 8003654:	200074e0 	.word	0x200074e0
 8003658:	20007768 	.word	0x20007768
 800365c:	200074e8 	.word	0x200074e8
 8003660:	200074b8 	.word	0x200074b8
 8003664:	200001a4 	.word	0x200001a4
 8003668:	20007720 	.word	0x20007720
 800366c:	20004f38 	.word	0x20004f38
 8003670:	200001c8 	.word	0x200001c8
 8003674:	20005578 	.word	0x20005578
 8003678:	20007718 	.word	0x20007718
 800367c:	20005bb8 	.word	0x20005bb8
 8003680:	200001c0 	.word	0x200001c0
 8003684:	200061f8 	.word	0x200061f8
 8003688:	20006838 	.word	0x20006838
 800368c:	20006e78 	.word	0x20006e78
 8003690:	200001b8 	.word	0x200001b8
 8003694:	200001a8 	.word	0x200001a8
 8003698:	408f4000 	.word	0x408f4000
 800369c:	200074f0 	.word	0x200074f0
 80036a0:	200001b0 	.word	0x200001b0
 80036a4:	200074f8 	.word	0x200074f8
 80036a8:	40590000 	.word	0x40590000
 80036ac:	20007520 	.word	0x20007520
 80036b0:	20007528 	.word	0x20007528
		{
			if(historic_largest_TDS[k]  > historic_TDS_max)   		historic_TDS_max 		  = historic_largest_TDS[k];	// find largest and smallest valuesin our data
 80036b4:	4a9b      	ldr	r2, [pc, #620]	; (8003924 <isStabalized+0x894>)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036c0:	4b99      	ldr	r3, [pc, #612]	; (8003928 <isStabalized+0x898>)
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	f7fd f9e1 	bl	8000a8c <__aeabi_dcmpgt>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <isStabalized+0x652>
 80036d0:	4a94      	ldr	r2, [pc, #592]	; (8003924 <isStabalized+0x894>)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4413      	add	r3, r2
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	4992      	ldr	r1, [pc, #584]	; (8003928 <isStabalized+0x898>)
 80036de:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_smallest_TDS[k] < historic_TDS_min)  		historic_TDS_min		  = historic_smallest_TDS[k];
 80036e2:	4a92      	ldr	r2, [pc, #584]	; (800392c <isStabalized+0x89c>)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4413      	add	r3, r2
 80036ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ee:	4b90      	ldr	r3, [pc, #576]	; (8003930 <isStabalized+0x8a0>)
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f7fd f9ac 	bl	8000a50 <__aeabi_dcmplt>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <isStabalized+0x680>
 80036fe:	4a8b      	ldr	r2, [pc, #556]	; (800392c <isStabalized+0x89c>)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	4989      	ldr	r1, [pc, #548]	; (8003930 <isStabalized+0x8a0>)
 800370c:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_largest_pH[k]   > historic_pH_max )     	historic_pH_max  		  = historic_largest_pH[k];
 8003710:	4a88      	ldr	r2, [pc, #544]	; (8003934 <isStabalized+0x8a4>)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800371c:	4b86      	ldr	r3, [pc, #536]	; (8003938 <isStabalized+0x8a8>)
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f7fd f9b3 	bl	8000a8c <__aeabi_dcmpgt>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <isStabalized+0x6ae>
 800372c:	4a81      	ldr	r2, [pc, #516]	; (8003934 <isStabalized+0x8a4>)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	497f      	ldr	r1, [pc, #508]	; (8003938 <isStabalized+0x8a8>)
 800373a:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_smallest_pH[k]  < historic_pH_min )    		historic_pH_min  		  = historic_smallest_pH[k];
 800373e:	4a7f      	ldr	r2, [pc, #508]	; (800393c <isStabalized+0x8ac>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800374a:	4b7d      	ldr	r3, [pc, #500]	; (8003940 <isStabalized+0x8b0>)
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f7fd f97e 	bl	8000a50 <__aeabi_dcmplt>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <isStabalized+0x6dc>
 800375a:	4a78      	ldr	r2, [pc, #480]	; (800393c <isStabalized+0x8ac>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	4976      	ldr	r1, [pc, #472]	; (8003940 <isStabalized+0x8b0>)
 8003768:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_pH[k]   < historic_average_pH_min)  historic_average_pH_min   = historic_average_pH[k];
 800376c:	4a75      	ldr	r2, [pc, #468]	; (8003944 <isStabalized+0x8b4>)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003778:	4b73      	ldr	r3, [pc, #460]	; (8003948 <isStabalized+0x8b8>)
 800377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377e:	f7fd f967 	bl	8000a50 <__aeabi_dcmplt>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <isStabalized+0x70a>
 8003788:	4a6e      	ldr	r2, [pc, #440]	; (8003944 <isStabalized+0x8b4>)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	496c      	ldr	r1, [pc, #432]	; (8003948 <isStabalized+0x8b8>)
 8003796:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_pH[k]   > historic_average_pH_max)  historic_average_pH_max   = historic_average_pH[k];
 800379a:	4a6a      	ldr	r2, [pc, #424]	; (8003944 <isStabalized+0x8b4>)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037a6:	4b69      	ldr	r3, [pc, #420]	; (800394c <isStabalized+0x8bc>)
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	f7fd f96e 	bl	8000a8c <__aeabi_dcmpgt>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <isStabalized+0x738>
 80037b6:	4a63      	ldr	r2, [pc, #396]	; (8003944 <isStabalized+0x8b4>)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	4962      	ldr	r1, [pc, #392]	; (800394c <isStabalized+0x8bc>)
 80037c4:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_TDS[k]  < historic_average_TDS_min) historic_average_TDS_min  = historic_average_TDS[k];
 80037c8:	4a61      	ldr	r2, [pc, #388]	; (8003950 <isStabalized+0x8c0>)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037d4:	4b5f      	ldr	r3, [pc, #380]	; (8003954 <isStabalized+0x8c4>)
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f7fd f939 	bl	8000a50 <__aeabi_dcmplt>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <isStabalized+0x766>
 80037e4:	4a5a      	ldr	r2, [pc, #360]	; (8003950 <isStabalized+0x8c0>)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	4958      	ldr	r1, [pc, #352]	; (8003954 <isStabalized+0x8c4>)
 80037f2:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_TDS[k]  > historic_average_TDS_max) historic_average_TDS_max  = historic_average_TDS[k];
 80037f6:	4a56      	ldr	r2, [pc, #344]	; (8003950 <isStabalized+0x8c0>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003802:	4b55      	ldr	r3, [pc, #340]	; (8003958 <isStabalized+0x8c8>)
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f7fd f940 	bl	8000a8c <__aeabi_dcmpgt>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d008      	beq.n	8003824 <isStabalized+0x794>
 8003812:	4a4f      	ldr	r2, [pc, #316]	; (8003950 <isStabalized+0x8c0>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4413      	add	r3, r2
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	494e      	ldr	r1, [pc, #312]	; (8003958 <isStabalized+0x8c8>)
 8003820:	e9c1 2300 	strd	r2, r3, [r1]

			slope_factor_average_TDS += (historic_average_TDS[k]-historic_average_TDS[k-1]);
 8003824:	4a4a      	ldr	r2, [pc, #296]	; (8003950 <isStabalized+0x8c0>)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	3b01      	subs	r3, #1
 8003834:	4a46      	ldr	r2, [pc, #280]	; (8003950 <isStabalized+0x8c0>)
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383e:	f7fc fcdd 	bl	80001fc <__aeabi_dsub>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	4b44      	ldr	r3, [pc, #272]	; (800395c <isStabalized+0x8cc>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	f7fc fcd6 	bl	8000200 <__adddf3>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4940      	ldr	r1, [pc, #256]	; (800395c <isStabalized+0x8cc>)
 800385a:	e9c1 2300 	strd	r2, r3, [r1]
			slope_factor_average_ph  += (historic_average_pH[k]-historic_average_pH[k-1]);
 800385e:	4a39      	ldr	r2, [pc, #228]	; (8003944 <isStabalized+0x8b4>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4413      	add	r3, r2
 8003866:	e9d3 0100 	ldrd	r0, r1, [r3]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	3b01      	subs	r3, #1
 800386e:	4a35      	ldr	r2, [pc, #212]	; (8003944 <isStabalized+0x8b4>)
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f7fc fcc0 	bl	80001fc <__aeabi_dsub>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4610      	mov	r0, r2
 8003882:	4619      	mov	r1, r3
 8003884:	4b36      	ldr	r3, [pc, #216]	; (8003960 <isStabalized+0x8d0>)
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f7fc fcb9 	bl	8000200 <__adddf3>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4933      	ldr	r1, [pc, #204]	; (8003960 <isStabalized+0x8d0>)
 8003894:	e9c1 2300 	strd	r2, r3, [r1]
		for(int k = historic_sample_index-20; k<historic_sample_index; k++) 								// if we have at-least 5 samples find the max and min to calculate range of the last 5 runs
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	3301      	adds	r3, #1
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	4b31      	ldr	r3, [pc, #196]	; (8003964 <isStabalized+0x8d4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	f6ff af05 	blt.w	80036b4 <isStabalized+0x624>
		}
		historic_range_pH  = historic_pH_max  - historic_pH_min;
 80038aa:	4b23      	ldr	r3, [pc, #140]	; (8003938 <isStabalized+0x8a8>)
 80038ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038b0:	4b23      	ldr	r3, [pc, #140]	; (8003940 <isStabalized+0x8b0>)
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	f7fc fca1 	bl	80001fc <__aeabi_dsub>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	492a      	ldr	r1, [pc, #168]	; (8003968 <isStabalized+0x8d8>)
 80038c0:	e9c1 2300 	strd	r2, r3, [r1]
		historic_range_TDS = historic_TDS_max - historic_TDS_min;
 80038c4:	4b18      	ldr	r3, [pc, #96]	; (8003928 <isStabalized+0x898>)
 80038c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038ca:	4b19      	ldr	r3, [pc, #100]	; (8003930 <isStabalized+0x8a0>)
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f7fc fc94 	bl	80001fc <__aeabi_dsub>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4924      	ldr	r1, [pc, #144]	; (800396c <isStabalized+0x8dc>)
 80038da:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_pH_range  = historic_average_pH_max  - historic_average_pH_min;
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <isStabalized+0x8bc>)
 80038e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038e4:	4b18      	ldr	r3, [pc, #96]	; (8003948 <isStabalized+0x8b8>)
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	f7fc fc87 	bl	80001fc <__aeabi_dsub>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	491f      	ldr	r1, [pc, #124]	; (8003970 <isStabalized+0x8e0>)
 80038f4:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS_range = historic_average_TDS_max - historic_average_TDS_min;
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <isStabalized+0x8c8>)
 80038fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <isStabalized+0x8c4>)
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f7fc fc7a 	bl	80001fc <__aeabi_dsub>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4919      	ldr	r1, [pc, #100]	; (8003974 <isStabalized+0x8e4>)
 800390e:	e9c1 2300 	strd	r2, r3, [r1]
	}


	if(run_again != 2 && ( slope_factor_average_TDS > 1.5 ||  slope_factor_average_TDS < -1.5 || slope_factor_average_ph > 0.01 || slope_factor_average_ph < -0.01 || historic_sample_index <= 20 || TDS_range > 10.5 || pH_range > 0.1 || historic_average_pH_range > 0.05 || historic_average_pH_range < -0.05  || historic_range_pH > 0.1 || historic_range_pH < -0.1 || historic_range_TDS > 25 || historic_range_TDS < -25 || historic_average_TDS_range > 4.0 || historic_average_TDS_range < -4.0))
 8003912:	4b19      	ldr	r3, [pc, #100]	; (8003978 <isStabalized+0x8e8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b02      	cmp	r3, #2
 8003918:	f000 80d9 	beq.w	8003ace <isStabalized+0xa3e>
 800391c:	4b0f      	ldr	r3, [pc, #60]	; (800395c <isStabalized+0x8cc>)
 800391e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003922:	e02b      	b.n	800397c <isStabalized+0x8ec>
 8003924:	20005bb8 	.word	0x20005bb8
 8003928:	20007500 	.word	0x20007500
 800392c:	200061f8 	.word	0x200061f8
 8003930:	20007518 	.word	0x20007518
 8003934:	20004f38 	.word	0x20004f38
 8003938:	20007508 	.word	0x20007508
 800393c:	20005578 	.word	0x20005578
 8003940:	20007510 	.word	0x20007510
 8003944:	20006838 	.word	0x20006838
 8003948:	200001a8 	.word	0x200001a8
 800394c:	200074f0 	.word	0x200074f0
 8003950:	20006e78 	.word	0x20006e78
 8003954:	200001b0 	.word	0x200001b0
 8003958:	200074f8 	.word	0x200074f8
 800395c:	20007520 	.word	0x20007520
 8003960:	20007528 	.word	0x20007528
 8003964:	200074b8 	.word	0x200074b8
 8003968:	200074d0 	.word	0x200074d0
 800396c:	200074d8 	.word	0x200074d8
 8003970:	200074c0 	.word	0x200074c0
 8003974:	200074c8 	.word	0x200074c8
 8003978:	200001b8 	.word	0x200001b8
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	4b73      	ldr	r3, [pc, #460]	; (8003b50 <isStabalized+0xac0>)
 8003982:	f7fd f883 	bl	8000a8c <__aeabi_dcmpgt>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	f040 8094 	bne.w	8003ab6 <isStabalized+0xa26>
 800398e:	4b71      	ldr	r3, [pc, #452]	; (8003b54 <isStabalized+0xac4>)
 8003990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <isStabalized+0xac8>)
 800399a:	f7fd f859 	bl	8000a50 <__aeabi_dcmplt>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f040 8088 	bne.w	8003ab6 <isStabalized+0xa26>
 80039a6:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <isStabalized+0xacc>)
 80039a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039ac:	a35c      	add	r3, pc, #368	; (adr r3, 8003b20 <isStabalized+0xa90>)
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	f7fd f86b 	bl	8000a8c <__aeabi_dcmpgt>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d17c      	bne.n	8003ab6 <isStabalized+0xa26>
 80039bc:	4b67      	ldr	r3, [pc, #412]	; (8003b5c <isStabalized+0xacc>)
 80039be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039c2:	a359      	add	r3, pc, #356	; (adr r3, 8003b28 <isStabalized+0xa98>)
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f7fd f842 	bl	8000a50 <__aeabi_dcmplt>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d171      	bne.n	8003ab6 <isStabalized+0xa26>
 80039d2:	4b63      	ldr	r3, [pc, #396]	; (8003b60 <isStabalized+0xad0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b14      	cmp	r3, #20
 80039d8:	dd6d      	ble.n	8003ab6 <isStabalized+0xa26>
 80039da:	4b62      	ldr	r3, [pc, #392]	; (8003b64 <isStabalized+0xad4>)
 80039dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	4b60      	ldr	r3, [pc, #384]	; (8003b68 <isStabalized+0xad8>)
 80039e6:	f7fd f851 	bl	8000a8c <__aeabi_dcmpgt>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d162      	bne.n	8003ab6 <isStabalized+0xa26>
 80039f0:	4b5e      	ldr	r3, [pc, #376]	; (8003b6c <isStabalized+0xadc>)
 80039f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039f6:	a34e      	add	r3, pc, #312	; (adr r3, 8003b30 <isStabalized+0xaa0>)
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f7fd f846 	bl	8000a8c <__aeabi_dcmpgt>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d157      	bne.n	8003ab6 <isStabalized+0xa26>
 8003a06:	4b5a      	ldr	r3, [pc, #360]	; (8003b70 <isStabalized+0xae0>)
 8003a08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a0c:	a34a      	add	r3, pc, #296	; (adr r3, 8003b38 <isStabalized+0xaa8>)
 8003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a12:	f7fd f83b 	bl	8000a8c <__aeabi_dcmpgt>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d14c      	bne.n	8003ab6 <isStabalized+0xa26>
 8003a1c:	4b54      	ldr	r3, [pc, #336]	; (8003b70 <isStabalized+0xae0>)
 8003a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a22:	a347      	add	r3, pc, #284	; (adr r3, 8003b40 <isStabalized+0xab0>)
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f7fd f812 	bl	8000a50 <__aeabi_dcmplt>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d141      	bne.n	8003ab6 <isStabalized+0xa26>
 8003a32:	4b50      	ldr	r3, [pc, #320]	; (8003b74 <isStabalized+0xae4>)
 8003a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a38:	a33d      	add	r3, pc, #244	; (adr r3, 8003b30 <isStabalized+0xaa0>)
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f7fd f825 	bl	8000a8c <__aeabi_dcmpgt>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d136      	bne.n	8003ab6 <isStabalized+0xa26>
 8003a48:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <isStabalized+0xae4>)
 8003a4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a4e:	a33e      	add	r3, pc, #248	; (adr r3, 8003b48 <isStabalized+0xab8>)
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f7fc fffc 	bl	8000a50 <__aeabi_dcmplt>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d12b      	bne.n	8003ab6 <isStabalized+0xa26>
 8003a5e:	4b46      	ldr	r3, [pc, #280]	; (8003b78 <isStabalized+0xae8>)
 8003a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	4b44      	ldr	r3, [pc, #272]	; (8003b7c <isStabalized+0xaec>)
 8003a6a:	f7fd f80f 	bl	8000a8c <__aeabi_dcmpgt>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d120      	bne.n	8003ab6 <isStabalized+0xa26>
 8003a74:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <isStabalized+0xae8>)
 8003a76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	4b40      	ldr	r3, [pc, #256]	; (8003b80 <isStabalized+0xaf0>)
 8003a80:	f7fc ffe6 	bl	8000a50 <__aeabi_dcmplt>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d115      	bne.n	8003ab6 <isStabalized+0xa26>
 8003a8a:	4b3e      	ldr	r3, [pc, #248]	; (8003b84 <isStabalized+0xaf4>)
 8003a8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	4b3c      	ldr	r3, [pc, #240]	; (8003b88 <isStabalized+0xaf8>)
 8003a96:	f7fc fff9 	bl	8000a8c <__aeabi_dcmpgt>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <isStabalized+0xa26>
 8003aa0:	4b38      	ldr	r3, [pc, #224]	; (8003b84 <isStabalized+0xaf4>)
 8003aa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	4b38      	ldr	r3, [pc, #224]	; (8003b8c <isStabalized+0xafc>)
 8003aac:	f7fc ffd0 	bl	8000a50 <__aeabi_dcmplt>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <isStabalized+0xa3e>
	{
 		valid = 0;
 8003ab6:	4b36      	ldr	r3, [pc, #216]	; (8003b90 <isStabalized+0xb00>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 		recheck_count++;
 8003abc:	4b35      	ldr	r3, [pc, #212]	; (8003b94 <isStabalized+0xb04>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	4a34      	ldr	r2, [pc, #208]	; (8003b94 <isStabalized+0xb04>)
 8003ac4:	6013      	str	r3, [r2, #0]
 		run_again = 2; 				// if the ph or TDS values are still changing check again, or the smallest value is at the beginning of the array, or the largest value is at the end of the array
 8003ac6:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <isStabalized+0xb08>)
 8003ac8:	2202      	movs	r2, #2
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e012      	b.n	8003af4 <isStabalized+0xa64>
	}
	else if(run_again == 1)		    // we are stabilized however, the system could still be changing so we need to check how many times we re-sampled the water if its > 1 check until its 1
 8003ace:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <isStabalized+0xb08>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d10e      	bne.n	8003af4 <isStabalized+0xa64>
	{
		run_again = 0; 				// set run again to 0(no) however, if our validity is not high enough we will set run_again to 2(yes)
 8003ad6:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <isStabalized+0xb08>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
		valid++;
 8003adc:	4b2c      	ldr	r3, [pc, #176]	; (8003b90 <isStabalized+0xb00>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	4a2b      	ldr	r2, [pc, #172]	; (8003b90 <isStabalized+0xb00>)
 8003ae4:	6013      	str	r3, [r2, #0]
		if(valid < 10) run_again = 2;			// if we have not completed three valid runs in a row re-run
 8003ae6:	4b2a      	ldr	r3, [pc, #168]	; (8003b90 <isStabalized+0xb00>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b09      	cmp	r3, #9
 8003aec:	dc02      	bgt.n	8003af4 <isStabalized+0xa64>
 8003aee:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <isStabalized+0xb08>)
 8003af0:	2202      	movs	r2, #2
 8003af2:	601a      	str	r2, [r3, #0]
	}
	if(run_again == 1) run_again = 0;
 8003af4:	4b28      	ldr	r3, [pc, #160]	; (8003b98 <isStabalized+0xb08>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d103      	bne.n	8003b04 <isStabalized+0xa74>
 8003afc:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <isStabalized+0xb08>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
	else if (run_again == 2) run_again = 1;
}
 8003b02:	e006      	b.n	8003b12 <isStabalized+0xa82>
	else if (run_again == 2) run_again = 1;
 8003b04:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <isStabalized+0xb08>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d102      	bne.n	8003b12 <isStabalized+0xa82>
 8003b0c:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <isStabalized+0xb08>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
}
 8003b12:	bf00      	nop
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bdb0      	pop	{r4, r5, r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	f3af 8000 	nop.w
 8003b20:	47ae147b 	.word	0x47ae147b
 8003b24:	3f847ae1 	.word	0x3f847ae1
 8003b28:	47ae147b 	.word	0x47ae147b
 8003b2c:	bf847ae1 	.word	0xbf847ae1
 8003b30:	9999999a 	.word	0x9999999a
 8003b34:	3fb99999 	.word	0x3fb99999
 8003b38:	9999999a 	.word	0x9999999a
 8003b3c:	3fa99999 	.word	0x3fa99999
 8003b40:	9999999a 	.word	0x9999999a
 8003b44:	bfa99999 	.word	0xbfa99999
 8003b48:	9999999a 	.word	0x9999999a
 8003b4c:	bfb99999 	.word	0xbfb99999
 8003b50:	3ff80000 	.word	0x3ff80000
 8003b54:	20007520 	.word	0x20007520
 8003b58:	bff80000 	.word	0xbff80000
 8003b5c:	20007528 	.word	0x20007528
 8003b60:	200074b8 	.word	0x200074b8
 8003b64:	20007738 	.word	0x20007738
 8003b68:	40250000 	.word	0x40250000
 8003b6c:	20007740 	.word	0x20007740
 8003b70:	200074c0 	.word	0x200074c0
 8003b74:	200074d0 	.word	0x200074d0
 8003b78:	200074d8 	.word	0x200074d8
 8003b7c:	40390000 	.word	0x40390000
 8003b80:	c0390000 	.word	0xc0390000
 8003b84:	200074c8 	.word	0x200074c8
 8003b88:	40100000 	.word	0x40100000
 8003b8c:	c0100000 	.word	0xc0100000
 8003b90:	20007534 	.word	0x20007534
 8003b94:	20007530 	.word	0x20007530
 8003b98:	200001b8 	.word	0x200001b8

08003b9c <waitForWaterToStabilize>:

int waitForWaterToStabilize() // Returns the total time in seconds
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
	getTime();
 8003ba0:	f7fd fb44 	bl	800122c <getTime>
	eq_start_time_sec = sTime.Seconds + sTime.Minutes*60;
 8003ba4:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <waitForWaterToStabilize+0x9c>)
 8003ba6:	789b      	ldrb	r3, [r3, #2]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <waitForWaterToStabilize+0x9c>)
 8003bac:	785b      	ldrb	r3, [r3, #1]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <waitForWaterToStabilize+0xa0>)
 8003bbc:	6013      	str	r3, [r2, #0]

	while(run_again > 0)
 8003bbe:	e005      	b.n	8003bcc <waitForWaterToStabilize+0x30>
	{
		isStabalized();// if we are not stabilized wait until we are
 8003bc0:	f7ff fa66 	bl	8003090 <isStabalized>
		osDelay(2000);
 8003bc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003bc8:	f00f fa45 	bl	8013056 <osDelay>
	while(run_again > 0)
 8003bcc:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <waitForWaterToStabilize+0xa4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	dcf5      	bgt.n	8003bc0 <waitForWaterToStabilize+0x24>
	}
	getTime();
 8003bd4:	f7fd fb2a 	bl	800122c <getTime>
	eq_end_time_sec = sTime.Seconds + sTime.Minutes*60;
 8003bd8:	4b17      	ldr	r3, [pc, #92]	; (8003c38 <waitForWaterToStabilize+0x9c>)
 8003bda:	789b      	ldrb	r3, [r3, #2]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4b16      	ldr	r3, [pc, #88]	; (8003c38 <waitForWaterToStabilize+0x9c>)
 8003be0:	785b      	ldrb	r3, [r3, #1]
 8003be2:	461a      	mov	r2, r3
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <waitForWaterToStabilize+0xa8>)
 8003bf0:	6013      	str	r3, [r2, #0]
	if(eq_start_time_sec > eq_end_time_sec) total_time_seconds = (3600-eq_start_time_sec)+eq_end_time_sec;	// if seconds rolled over we cannot just subtract since we will get a negative
 8003bf2:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <waitForWaterToStabilize+0xa0>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <waitForWaterToStabilize+0xa8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	dd09      	ble.n	8003c12 <waitForWaterToStabilize+0x76>
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <waitForWaterToStabilize+0xa0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f5c3 6261 	rsb	r2, r3, #3600	; 0xe10
 8003c06:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <waitForWaterToStabilize+0xa8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <waitForWaterToStabilize+0xac>)
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e006      	b.n	8003c20 <waitForWaterToStabilize+0x84>
	else total_time_seconds = eq_end_time_sec-eq_start_time_sec;	// else we did not roll over so total seconds is end time - start time
 8003c12:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <waitForWaterToStabilize+0xa8>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <waitForWaterToStabilize+0xa0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <waitForWaterToStabilize+0xac>)
 8003c1e:	6013      	str	r3, [r2, #0]

	stability_value = 0;
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <waitForWaterToStabilize+0xb0>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
	recheck_count = 0;
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <waitForWaterToStabilize+0xb4>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
	resetStabilityVars();
 8003c2c:	f7ff f9b8 	bl	8002fa0 <resetStabilityVars>
	return (total_time_seconds);
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <waitForWaterToStabilize+0xac>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20007790 	.word	0x20007790
 8003c3c:	2000774c 	.word	0x2000774c
 8003c40:	200001b8 	.word	0x200001b8
 8003c44:	20007748 	.word	0x20007748
 8003c48:	20007754 	.word	0x20007754
 8003c4c:	200001d0 	.word	0x200001d0
 8003c50:	20007530 	.word	0x20007530

08003c54 <waterTempControl>:
int water_temp_index = 0;
int temp_up = 0, temp_down = 0;
int number_of_stable_temp_runs = 0;
char heat_on = 'n', cool_on = 'n';
void waterTempControl()
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
	temp_up = 0;
 8003c58:	4b78      	ldr	r3, [pc, #480]	; (8003e3c <waterTempControl+0x1e8>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
	temp_down = 0;
 8003c5e:	4b78      	ldr	r3, [pc, #480]	; (8003e40 <waterTempControl+0x1ec>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
	if(new_sample == 'y')
 8003c64:	4b77      	ldr	r3, [pc, #476]	; (8003e44 <waterTempControl+0x1f0>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b79      	cmp	r3, #121	; 0x79
 8003c6a:	f040 80e1 	bne.w	8003e30 <waterTempControl+0x1dc>
	{
		new_sample = 'n';
 8003c6e:	4b75      	ldr	r3, [pc, #468]	; (8003e44 <waterTempControl+0x1f0>)
 8003c70:	226e      	movs	r2, #110	; 0x6e
 8003c72:	701a      	strb	r2, [r3, #0]
		if(setting_water_temp == 'n')	// if we are not changing the pH or nutrient level, check to see if we are out of bounds
 8003c74:	4b74      	ldr	r3, [pc, #464]	; (8003e48 <waterTempControl+0x1f4>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b6e      	cmp	r3, #110	; 0x6e
 8003c7a:	d145      	bne.n	8003d08 <waterTempControl+0xb4>
		{
			if(     water_temp  > water_temp_set_point     &&     (water_temp - water_temp_bounds_check) > water_temp_set_point)   				temp_down = 1; 			// if we are over our set point dose the water with pH-down
 8003c7c:	4b73      	ldr	r3, [pc, #460]	; (8003e4c <waterTempControl+0x1f8>)
 8003c7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c82:	4b73      	ldr	r3, [pc, #460]	; (8003e50 <waterTempControl+0x1fc>)
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f7fc ff00 	bl	8000a8c <__aeabi_dcmpgt>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d017      	beq.n	8003cc2 <waterTempControl+0x6e>
 8003c92:	4b6e      	ldr	r3, [pc, #440]	; (8003e4c <waterTempControl+0x1f8>)
 8003c94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c98:	4b6e      	ldr	r3, [pc, #440]	; (8003e54 <waterTempControl+0x200>)
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	f7fc faad 	bl	80001fc <__aeabi_dsub>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4b69      	ldr	r3, [pc, #420]	; (8003e50 <waterTempControl+0x1fc>)
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	f7fc feec 	bl	8000a8c <__aeabi_dcmpgt>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <waterTempControl+0x6e>
 8003cba:	4b61      	ldr	r3, [pc, #388]	; (8003e40 <waterTempControl+0x1ec>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e067      	b.n	8003d92 <waterTempControl+0x13e>
			else if(water_temp  < water_temp_set_point 	   &&     (water_temp + water_temp_bounds_check) < water_temp_set_point)  				temp_up = 1; 				// if we are under our set point dose the water with pH-up
 8003cc2:	4b62      	ldr	r3, [pc, #392]	; (8003e4c <waterTempControl+0x1f8>)
 8003cc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cc8:	4b61      	ldr	r3, [pc, #388]	; (8003e50 <waterTempControl+0x1fc>)
 8003cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cce:	f7fc febf 	bl	8000a50 <__aeabi_dcmplt>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d05c      	beq.n	8003d92 <waterTempControl+0x13e>
 8003cd8:	4b5c      	ldr	r3, [pc, #368]	; (8003e4c <waterTempControl+0x1f8>)
 8003cda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cde:	4b5d      	ldr	r3, [pc, #372]	; (8003e54 <waterTempControl+0x200>)
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	f7fc fa8c 	bl	8000200 <__adddf3>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4610      	mov	r0, r2
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4b57      	ldr	r3, [pc, #348]	; (8003e50 <waterTempControl+0x1fc>)
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f7fc feab 	bl	8000a50 <__aeabi_dcmplt>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d048      	beq.n	8003d92 <waterTempControl+0x13e>
 8003d00:	4b4e      	ldr	r3, [pc, #312]	; (8003e3c <waterTempControl+0x1e8>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e044      	b.n	8003d92 <waterTempControl+0x13e>
		}
		else	// else we are setting the pH so reduce the pH bounds to accurately set the value
		{
			if(     water_temp  > water_temp_set_point     &&     (water_temp - water_temp_bounds_set) > water_temp_set_point)   				temp_down = 1; 			// if we are over our set point dose the water with pH-down
 8003d08:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <waterTempControl+0x1f8>)
 8003d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d0e:	4b50      	ldr	r3, [pc, #320]	; (8003e50 <waterTempControl+0x1fc>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f7fc feba 	bl	8000a8c <__aeabi_dcmpgt>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d017      	beq.n	8003d4e <waterTempControl+0xfa>
 8003d1e:	4b4b      	ldr	r3, [pc, #300]	; (8003e4c <waterTempControl+0x1f8>)
 8003d20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d24:	4b4c      	ldr	r3, [pc, #304]	; (8003e58 <waterTempControl+0x204>)
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	f7fc fa67 	bl	80001fc <__aeabi_dsub>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	4b46      	ldr	r3, [pc, #280]	; (8003e50 <waterTempControl+0x1fc>)
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f7fc fea6 	bl	8000a8c <__aeabi_dcmpgt>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <waterTempControl+0xfa>
 8003d46:	4b3e      	ldr	r3, [pc, #248]	; (8003e40 <waterTempControl+0x1ec>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	e021      	b.n	8003d92 <waterTempControl+0x13e>
			else if(water_temp  < water_temp_set_point 	   &&     (water_temp + water_temp_bounds_set) < water_temp_set_point)  				temp_up = 1; 				// if we are under our set point dose the water with pH-up
 8003d4e:	4b3f      	ldr	r3, [pc, #252]	; (8003e4c <waterTempControl+0x1f8>)
 8003d50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d54:	4b3e      	ldr	r3, [pc, #248]	; (8003e50 <waterTempControl+0x1fc>)
 8003d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5a:	f7fc fe79 	bl	8000a50 <__aeabi_dcmplt>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d016      	beq.n	8003d92 <waterTempControl+0x13e>
 8003d64:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <waterTempControl+0x1f8>)
 8003d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <waterTempControl+0x204>)
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f7fc fa46 	bl	8000200 <__adddf3>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4b34      	ldr	r3, [pc, #208]	; (8003e50 <waterTempControl+0x1fc>)
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	f7fc fe65 	bl	8000a50 <__aeabi_dcmplt>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <waterTempControl+0x13e>
 8003d8c:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <waterTempControl+0x1e8>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
		}

		if((temp_up == 1 || temp_down == 1))				// if we are adding pH-up/down or nutrient, signify what we are setting so we can change the accuracy range
 8003d92:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <waterTempControl+0x1e8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d003      	beq.n	8003da2 <waterTempControl+0x14e>
 8003d9a:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <waterTempControl+0x1ec>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d106      	bne.n	8003db0 <waterTempControl+0x15c>
		{
			setting_water_temp = 'y';
 8003da2:	4b29      	ldr	r3, [pc, #164]	; (8003e48 <waterTempControl+0x1f4>)
 8003da4:	2279      	movs	r2, #121	; 0x79
 8003da6:	701a      	strb	r2, [r3, #0]
			number_of_stable_temp_runs = 0;
 8003da8:	4b2c      	ldr	r3, [pc, #176]	; (8003e5c <waterTempControl+0x208>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	e002      	b.n	8003db6 <waterTempControl+0x162>
		}
		else setting_water_temp = 'n';
 8003db0:	4b25      	ldr	r3, [pc, #148]	; (8003e48 <waterTempControl+0x1f4>)
 8003db2:	226e      	movs	r2, #110	; 0x6e
 8003db4:	701a      	strb	r2, [r3, #0]

		if(number_of_stable_temp_runs >= 0 && number_of_stable_temp_runs <= 5) // consider changing to 10
 8003db6:	4b29      	ldr	r3, [pc, #164]	; (8003e5c <waterTempControl+0x208>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	db29      	blt.n	8003e12 <waterTempControl+0x1be>
 8003dbe:	4b27      	ldr	r3, [pc, #156]	; (8003e5c <waterTempControl+0x208>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b05      	cmp	r3, #5
 8003dc4:	dc25      	bgt.n	8003e12 <waterTempControl+0x1be>
		{

			if(temp_up == 1 && heat_on == 'n')
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <waterTempControl+0x1e8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d10c      	bne.n	8003de8 <waterTempControl+0x194>
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <waterTempControl+0x20c>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b6e      	cmp	r3, #110	; 0x6e
 8003dd4:	d108      	bne.n	8003de8 <waterTempControl+0x194>
			{
				heatOn();	// if we need heat the water turn on the heater
 8003dd6:	f7fd fbdd 	bl	8001594 <heatOn>
				heat_on = 'y';
 8003dda:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <waterTempControl+0x20c>)
 8003ddc:	2279      	movs	r2, #121	; 0x79
 8003dde:	701a      	strb	r2, [r3, #0]
				cool_on = 'n';
 8003de0:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <waterTempControl+0x210>)
 8003de2:	226e      	movs	r2, #110	; 0x6e
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	e00f      	b.n	8003e08 <waterTempControl+0x1b4>
			}
			else if(temp_down == 1 && cool_on == 'n')
 8003de8:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <waterTempControl+0x1ec>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d10b      	bne.n	8003e08 <waterTempControl+0x1b4>
 8003df0:	4b1c      	ldr	r3, [pc, #112]	; (8003e64 <waterTempControl+0x210>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b6e      	cmp	r3, #110	; 0x6e
 8003df6:	d107      	bne.n	8003e08 <waterTempControl+0x1b4>
			{
				coolOn();	// if we need cool the water turn on the cooler
 8003df8:	f7fd fbee 	bl	80015d8 <coolOn>
				cool_on = 'y';
 8003dfc:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <waterTempControl+0x210>)
 8003dfe:	2279      	movs	r2, #121	; 0x79
 8003e00:	701a      	strb	r2, [r3, #0]
				heat_on = 'n';
 8003e02:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <waterTempControl+0x20c>)
 8003e04:	226e      	movs	r2, #110	; 0x6e
 8003e06:	701a      	strb	r2, [r3, #0]
			}
		    number_of_stable_temp_runs++;
 8003e08:	4b14      	ldr	r3, [pc, #80]	; (8003e5c <waterTempControl+0x208>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <waterTempControl+0x208>)
 8003e10:	6013      	str	r3, [r2, #0]
		}
		if(number_of_stable_temp_runs > 5)
 8003e12:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <waterTempControl+0x208>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	dd0a      	ble.n	8003e30 <waterTempControl+0x1dc>
		{
			heat_on = 'n';
 8003e1a:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <waterTempControl+0x20c>)
 8003e1c:	226e      	movs	r2, #110	; 0x6e
 8003e1e:	701a      	strb	r2, [r3, #0]
			cool_on = 'n';
 8003e20:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <waterTempControl+0x210>)
 8003e22:	226e      	movs	r2, #110	; 0x6e
 8003e24:	701a      	strb	r2, [r3, #0]
			heatCoolOff();
 8003e26:	f7fd fbcb 	bl	80015c0 <heatCoolOff>
			number_of_stable_temp_runs = 0;
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <waterTempControl+0x208>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
		}
	}
	osDelay(5000);
 8003e30:	f241 3088 	movw	r0, #5000	; 0x1388
 8003e34:	f00f f90f 	bl	8013056 <osDelay>
}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	2000776c 	.word	0x2000776c
 8003e40:	20007770 	.word	0x20007770
 8003e44:	20000208 	.word	0x20000208
 8003e48:	200001d4 	.word	0x200001d4
 8003e4c:	200027b8 	.word	0x200027b8
 8003e50:	20000040 	.word	0x20000040
 8003e54:	20000050 	.word	0x20000050
 8003e58:	20000048 	.word	0x20000048
 8003e5c:	20007774 	.word	0x20007774
 8003e60:	200001d5 	.word	0x200001d5
 8003e64:	200001d6 	.word	0x200001d6

08003e68 <systemControl>:
void systemControl()
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af02      	add	r7, sp, #8

	getSensorValues(0);
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f001 ff28 	bl	8005cc4 <getSensorValues>
	if(run_once == 1)
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <systemControl+0x54>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d119      	bne.n	8003eb0 <systemControl+0x48>
	{
		//doseWater(50,50,50);
		run_once = 0;
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <systemControl+0x54>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
		fanOn();
 8003e82:	f7fd fad3 	bl	800142c <fanOn>
		setFanSpeed(3.5,3.5,3.5);
 8003e86:	4a0e      	ldr	r2, [pc, #56]	; (8003ec0 <systemControl+0x58>)
 8003e88:	490d      	ldr	r1, [pc, #52]	; (8003ec0 <systemControl+0x58>)
 8003e8a:	480d      	ldr	r0, [pc, #52]	; (8003ec0 <systemControl+0x58>)
 8003e8c:	f7fd fb3e 	bl	800150c <setFanSpeed>
		setTimeDate(0x01, 0x08, 0x22, 0x19, 0x09, 0x00); // MUST BE HEX BUT NOT CONVERTED i,e,(the 22 day of the month is represented as 0x22 NOT 0x16) (month, day, year, hours, min, sec)
 8003e90:	2300      	movs	r3, #0
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	2309      	movs	r3, #9
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	2319      	movs	r3, #25
 8003e9a:	2222      	movs	r2, #34	; 0x22
 8003e9c:	2108      	movs	r1, #8
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	f7fd f9d8 	bl	8001254 <setTimeDate>
		setLightCyle(19, 9, 19, 10); 			   		 // MUST BE INT (start hour, start min, start sec, end hour, end min)
 8003ea4:	230a      	movs	r3, #10
 8003ea6:	2213      	movs	r2, #19
 8003ea8:	2109      	movs	r1, #9
 8003eaa:	2013      	movs	r0, #19
 8003eac:	f000 f80a 	bl	8003ec4 <setLightCyle>
	}

	balancePhAndNutrient();
 8003eb0:	f7fe fbba 	bl	8002628 <balancePhAndNutrient>
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000078 	.word	0x20000078
 8003ec0:	40600000 	.word	0x40600000

08003ec4 <setLightCyle>:
	HAL_GPIO_WritePin(GPIOE,grow_light_Pin,GPIO_PIN_RESET);		// turn off grow light
	day_or_night = 0;											// it just turned to night time so set night status
}

void setLightCyle(uint8_t start_hour, uint8_t start_min, uint8_t end_hours, uint8_t end_min)
{
 8003ec4:	b490      	push	{r4, r7}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4604      	mov	r4, r0
 8003ecc:	4608      	mov	r0, r1
 8003ece:	4611      	mov	r1, r2
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	71fb      	strb	r3, [r7, #7]
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	71bb      	strb	r3, [r7, #6]
 8003eda:	460b      	mov	r3, r1
 8003edc:	717b      	strb	r3, [r7, #5]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	713b      	strb	r3, [r7, #4]
	light_on_time.Hours = start_hour;
 8003ee2:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <setLightCyle+0x40>)
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	7013      	strb	r3, [r2, #0]
	light_on_time.Minutes = start_min;
 8003ee8:	4a06      	ldr	r2, [pc, #24]	; (8003f04 <setLightCyle+0x40>)
 8003eea:	79bb      	ldrb	r3, [r7, #6]
 8003eec:	7053      	strb	r3, [r2, #1]

	light_off_time.Hours = end_hours;
 8003eee:	4a06      	ldr	r2, [pc, #24]	; (8003f08 <setLightCyle+0x44>)
 8003ef0:	797b      	ldrb	r3, [r7, #5]
 8003ef2:	7013      	strb	r3, [r2, #0]
	light_off_time.Minutes = end_min;
 8003ef4:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <setLightCyle+0x44>)
 8003ef6:	793b      	ldrb	r3, [r7, #4]
 8003ef8:	7053      	strb	r3, [r2, #1]
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc90      	pop	{r4, r7}
 8003f02:	4770      	bx	lr
 8003f04:	20007778 	.word	0x20007778
 8003f08:	20007784 	.word	0x20007784

08003f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f0c:	b5b0      	push	{r4, r5, r7, lr}
 8003f0e:	b08e      	sub	sp, #56	; 0x38
 8003f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 8003f12:	f002 fb57 	bl	80065c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f16:	f000 f84b 	bl	8003fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f1a:	f000 fb3d 	bl	8004598 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003f1e:	f000 f999 	bl	8004254 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003f22:	f000 fa43 	bl	80043ac <MX_TIM4_Init>
  MX_TIM10_Init();
 8003f26:	f000 fa8f 	bl	8004448 <MX_TIM10_Init>
  MX_RTC_Init();
 8003f2a:	f000 f901 	bl	8004130 <MX_RTC_Init>
  MX_TIM12_Init();
 8003f2e:	f000 fad9 	bl	80044e4 <MX_TIM12_Init>
  MX_FATFS_Init();
 8003f32:	f008 fe67 	bl	800cc04 <MX_FATFS_Init>
  MX_DMA_Init();
 8003f36:	f000 fb0f 	bl	8004558 <MX_DMA_Init>
  MX_ADC1_Init();
 8003f3a:	f000 f899 	bl	8004070 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
 // (DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
//HAL_DMA_RegisterCallback(&hdma_adc2,HAL_DMA_XFER_CPLT_CB_ID,&DMATransferComplete);
HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&nutrient_ph_values, 80);
 8003f3e:	2250      	movs	r2, #80	; 0x50
 8003f40:	4915      	ldr	r1, [pc, #84]	; (8003f98 <main+0x8c>)
 8003f42:	4816      	ldr	r0, [pc, #88]	; (8003f9c <main+0x90>)
 8003f44:	f002 fd24 	bl	8006990 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BalanceWater */
  osThreadStaticDef(BalanceWater, StartBalanceWater, osPriorityRealtime, 0, 3100, BalanceWaterBuffer, &BalanceWaterControlBlock);
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <main+0x94>)
 8003f4a:	f107 041c 	add.w	r4, r7, #28
 8003f4e:	461d      	mov	r5, r3
 8003f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BalanceWaterHandle = osThreadCreate(osThread(BalanceWater), NULL);
 8003f5c:	f107 031c 	add.w	r3, r7, #28
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f00f f82b 	bl	8012fbe <osThreadCreate>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <main+0x98>)
 8003f6c:	6013      	str	r3, [r2, #0]

  /* definition and creation of WaterTempContro */
  osThreadStaticDef(WaterTempContro, StartWaterTempControl, osPriorityNormal, 0, 2048, WaterTempControBuffer, &WaterTempControControlBlock);
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <main+0x9c>)
 8003f70:	463c      	mov	r4, r7
 8003f72:	461d      	mov	r5, r3
 8003f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WaterTempControHandle = osThreadCreate(osThread(WaterTempContro), NULL);
 8003f80:	463b      	mov	r3, r7
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f00f f81a 	bl	8012fbe <osThreadCreate>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4a07      	ldr	r2, [pc, #28]	; (8003fac <main+0xa0>)
 8003f8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003f90:	f00f f80e 	bl	8012fb0 <osKernelStart>
  GPIO_InitStruct.Pull = GPIO_NOPULL;


  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);*/

  while (1)
 8003f94:	e7fe      	b.n	8003f94 <main+0x88>
 8003f96:	bf00      	nop
 8003f98:	200077a0 	.word	0x200077a0
 8003f9c:	2000d9d8 	.word	0x2000d9d8
 8003fa0:	0801abec 	.word	0x0801abec
 8003fa4:	2000b890 	.word	0x2000b890
 8003fa8:	0801ac08 	.word	0x0801ac08
 8003fac:	20010a90 	.word	0x20010a90

08003fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b096      	sub	sp, #88	; 0x58
 8003fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fba:	2230      	movs	r2, #48	; 0x30
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f012 fa76 	bl	80164b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fc4:	f107 0314 	add.w	r3, r7, #20
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fd4:	463b      	mov	r3, r7
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	609a      	str	r2, [r3, #8]
 8003fde:	60da      	str	r2, [r3, #12]
 8003fe0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003fe2:	230a      	movs	r3, #10
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fea:	2310      	movs	r3, #16
 8003fec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003ffe:	23d8      	movs	r3, #216	; 0xd8
 8004000:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8004002:	2306      	movs	r3, #6
 8004004:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004006:	2309      	movs	r3, #9
 8004008:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800400a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800400e:	4618      	mov	r0, r3
 8004010:	f005 fc02 	bl	8009818 <HAL_RCC_OscConfig>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800401a:	f000 fbc9 	bl	80047b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800401e:	230f      	movs	r3, #15
 8004020:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004022:	2302      	movs	r3, #2
 8004024:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800402a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800402e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004034:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004036:	f107 0314 	add.w	r3, r7, #20
 800403a:	2102      	movs	r1, #2
 800403c:	4618      	mov	r0, r3
 800403e:	f005 fe3b 	bl	8009cb8 <HAL_RCC_ClockConfig>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004048:	f000 fbb2 	bl	80047b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800404c:	2304      	movs	r3, #4
 800404e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004054:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004056:	463b      	mov	r3, r7
 8004058:	4618      	mov	r0, r3
 800405a:	f006 f82b 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8004064:	f000 fba4 	bl	80047b0 <Error_Handler>
  }
}
 8004068:	bf00      	nop
 800406a:	3758      	adds	r7, #88	; 0x58
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004076:	463b      	mov	r3, r7
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004082:	4b28      	ldr	r3, [pc, #160]	; (8004124 <MX_ADC1_Init+0xb4>)
 8004084:	4a28      	ldr	r2, [pc, #160]	; (8004128 <MX_ADC1_Init+0xb8>)
 8004086:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004088:	4b26      	ldr	r3, [pc, #152]	; (8004124 <MX_ADC1_Init+0xb4>)
 800408a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800408e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004090:	4b24      	ldr	r3, [pc, #144]	; (8004124 <MX_ADC1_Init+0xb4>)
 8004092:	2200      	movs	r2, #0
 8004094:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004096:	4b23      	ldr	r3, [pc, #140]	; (8004124 <MX_ADC1_Init+0xb4>)
 8004098:	2201      	movs	r2, #1
 800409a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800409c:	4b21      	ldr	r3, [pc, #132]	; (8004124 <MX_ADC1_Init+0xb4>)
 800409e:	2201      	movs	r2, #1
 80040a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040a2:	4b20      	ldr	r3, [pc, #128]	; (8004124 <MX_ADC1_Init+0xb4>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040aa:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <MX_ADC1_Init+0xb4>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040b0:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <MX_ADC1_Init+0xb4>)
 80040b2:	4a1e      	ldr	r2, [pc, #120]	; (800412c <MX_ADC1_Init+0xbc>)
 80040b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040b6:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <MX_ADC1_Init+0xb4>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <MX_ADC1_Init+0xb4>)
 80040be:	2202      	movs	r2, #2
 80040c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80040c2:	4b18      	ldr	r3, [pc, #96]	; (8004124 <MX_ADC1_Init+0xb4>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040ca:	4b16      	ldr	r3, [pc, #88]	; (8004124 <MX_ADC1_Init+0xb4>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80040d0:	4814      	ldr	r0, [pc, #80]	; (8004124 <MX_ADC1_Init+0xb4>)
 80040d2:	f002 fad9 	bl	8006688 <HAL_ADC_Init>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80040dc:	f000 fb68 	bl	80047b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80040e0:	2305      	movs	r3, #5
 80040e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80040e4:	2301      	movs	r3, #1
 80040e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80040e8:	2307      	movs	r3, #7
 80040ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040ec:	463b      	mov	r3, r7
 80040ee:	4619      	mov	r1, r3
 80040f0:	480c      	ldr	r0, [pc, #48]	; (8004124 <MX_ADC1_Init+0xb4>)
 80040f2:	f002 fd47 	bl	8006b84 <HAL_ADC_ConfigChannel>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80040fc:	f000 fb58 	bl	80047b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004100:	2304      	movs	r3, #4
 8004102:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004104:	2302      	movs	r3, #2
 8004106:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004108:	463b      	mov	r3, r7
 800410a:	4619      	mov	r1, r3
 800410c:	4805      	ldr	r0, [pc, #20]	; (8004124 <MX_ADC1_Init+0xb4>)
 800410e:	f002 fd39 	bl	8006b84 <HAL_ADC_ConfigChannel>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004118:	f000 fb4a 	bl	80047b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800411c:	bf00      	nop
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	2000d9d8 	.word	0x2000d9d8
 8004128:	40012000 	.word	0x40012000
 800412c:	0f000001 	.word	0x0f000001

08004130 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08c      	sub	sp, #48	; 0x30
 8004134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	605a      	str	r2, [r3, #4]
 8004140:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8004142:	2300      	movs	r3, #0
 8004144:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8004146:	1d3b      	adds	r3, r7, #4
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	611a      	str	r2, [r3, #16]
 8004154:	615a      	str	r2, [r3, #20]
 8004156:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004158:	4b3c      	ldr	r3, [pc, #240]	; (800424c <MX_RTC_Init+0x11c>)
 800415a:	4a3d      	ldr	r2, [pc, #244]	; (8004250 <MX_RTC_Init+0x120>)
 800415c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800415e:	4b3b      	ldr	r3, [pc, #236]	; (800424c <MX_RTC_Init+0x11c>)
 8004160:	2200      	movs	r2, #0
 8004162:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004164:	4b39      	ldr	r3, [pc, #228]	; (800424c <MX_RTC_Init+0x11c>)
 8004166:	227f      	movs	r2, #127	; 0x7f
 8004168:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800416a:	4b38      	ldr	r3, [pc, #224]	; (800424c <MX_RTC_Init+0x11c>)
 800416c:	22ff      	movs	r2, #255	; 0xff
 800416e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004170:	4b36      	ldr	r3, [pc, #216]	; (800424c <MX_RTC_Init+0x11c>)
 8004172:	2200      	movs	r2, #0
 8004174:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004176:	4b35      	ldr	r3, [pc, #212]	; (800424c <MX_RTC_Init+0x11c>)
 8004178:	2200      	movs	r2, #0
 800417a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800417c:	4b33      	ldr	r3, [pc, #204]	; (800424c <MX_RTC_Init+0x11c>)
 800417e:	2200      	movs	r2, #0
 8004180:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004182:	4832      	ldr	r0, [pc, #200]	; (800424c <MX_RTC_Init+0x11c>)
 8004184:	f006 f88c 	bl	800a2a0 <HAL_RTC_Init>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800418e:	f000 fb0f 	bl	80047b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004192:	2300      	movs	r3, #0
 8004194:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0x0;
 8004198:	2300      	movs	r3, #0
 800419a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0x0;
 800419e:	2300      	movs	r3, #0
 80041a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80041a8:	2300      	movs	r3, #0
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80041ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041b0:	2201      	movs	r2, #1
 80041b2:	4619      	mov	r1, r3
 80041b4:	4825      	ldr	r0, [pc, #148]	; (800424c <MX_RTC_Init+0x11c>)
 80041b6:	f006 f8fd 	bl	800a3b4 <HAL_RTC_SetTime>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80041c0:	f000 faf6 	bl	80047b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 0x1;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 0x0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80041dc:	f107 0320 	add.w	r3, r7, #32
 80041e0:	2201      	movs	r2, #1
 80041e2:	4619      	mov	r1, r3
 80041e4:	4819      	ldr	r0, [pc, #100]	; (800424c <MX_RTC_Init+0x11c>)
 80041e6:	f006 f9ed 	bl	800a5c4 <HAL_RTC_SetDate>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80041f0:	f000 fade 	bl	80047b0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004200:	2300      	movs	r3, #0
 8004202:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004208:	2300      	movs	r3, #0
 800420a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 8004210:	2301      	movs	r3, #1
 8004212:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8004214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004218:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800421a:	1d3b      	adds	r3, r7, #4
 800421c:	2201      	movs	r2, #1
 800421e:	4619      	mov	r1, r3
 8004220:	480a      	ldr	r0, [pc, #40]	; (800424c <MX_RTC_Init+0x11c>)
 8004222:	f006 fabe 	bl	800a7a2 <HAL_RTC_SetAlarm>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 800422c:	f000 fac0 	bl	80047b0 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004230:	2200      	movs	r2, #0
 8004232:	2100      	movs	r1, #0
 8004234:	4805      	ldr	r0, [pc, #20]	; (800424c <MX_RTC_Init+0x11c>)
 8004236:	f006 fc48 	bl	800aaca <HAL_RTCEx_SetWakeUpTimer>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8004240:	f000 fab6 	bl	80047b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004244:	bf00      	nop
 8004246:	3730      	adds	r7, #48	; 0x30
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20010af4 	.word	0x20010af4
 8004250:	40002800 	.word	0x40002800

08004254 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b096      	sub	sp, #88	; 0x58
 8004258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800425a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	605a      	str	r2, [r3, #4]
 8004264:	609a      	str	r2, [r3, #8]
 8004266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004268:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	609a      	str	r2, [r3, #8]
 800427e:	60da      	str	r2, [r3, #12]
 8004280:	611a      	str	r2, [r3, #16]
 8004282:	615a      	str	r2, [r3, #20]
 8004284:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004286:	1d3b      	adds	r3, r7, #4
 8004288:	2220      	movs	r2, #32
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f012 f90f 	bl	80164b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004292:	4b44      	ldr	r3, [pc, #272]	; (80043a4 <MX_TIM1_Init+0x150>)
 8004294:	4a44      	ldr	r2, [pc, #272]	; (80043a8 <MX_TIM1_Init+0x154>)
 8004296:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004298:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <MX_TIM1_Init+0x150>)
 800429a:	2200      	movs	r2, #0
 800429c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800429e:	4b41      	ldr	r3, [pc, #260]	; (80043a4 <MX_TIM1_Init+0x150>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80042a4:	4b3f      	ldr	r3, [pc, #252]	; (80043a4 <MX_TIM1_Init+0x150>)
 80042a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ac:	4b3d      	ldr	r3, [pc, #244]	; (80043a4 <MX_TIM1_Init+0x150>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80042b2:	4b3c      	ldr	r3, [pc, #240]	; (80043a4 <MX_TIM1_Init+0x150>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042b8:	4b3a      	ldr	r3, [pc, #232]	; (80043a4 <MX_TIM1_Init+0x150>)
 80042ba:	2280      	movs	r2, #128	; 0x80
 80042bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80042be:	4839      	ldr	r0, [pc, #228]	; (80043a4 <MX_TIM1_Init+0x150>)
 80042c0:	f006 fc97 	bl	800abf2 <HAL_TIM_Base_Init>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80042ca:	f000 fa71 	bl	80047b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80042d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042d8:	4619      	mov	r1, r3
 80042da:	4832      	ldr	r0, [pc, #200]	; (80043a4 <MX_TIM1_Init+0x150>)
 80042dc:	f007 f82c 	bl	800b338 <HAL_TIM_ConfigClockSource>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80042e6:	f000 fa63 	bl	80047b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80042ea:	482e      	ldr	r0, [pc, #184]	; (80043a4 <MX_TIM1_Init+0x150>)
 80042ec:	f006 fd3e 	bl	800ad6c <HAL_TIM_PWM_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80042f6:	f000 fa5b 	bl	80047b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042fa:	2300      	movs	r3, #0
 80042fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042fe:	2300      	movs	r3, #0
 8004300:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004302:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004306:	4619      	mov	r1, r3
 8004308:	4826      	ldr	r0, [pc, #152]	; (80043a4 <MX_TIM1_Init+0x150>)
 800430a:	f007 fc01 	bl	800bb10 <HAL_TIMEx_MasterConfigSynchronization>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004314:	f000 fa4c 	bl	80047b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004318:	2360      	movs	r3, #96	; 0x60
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004320:	2300      	movs	r3, #0
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004324:	2300      	movs	r3, #0
 8004326:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004328:	2304      	movs	r3, #4
 800432a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800432c:	2300      	movs	r3, #0
 800432e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004330:	2300      	movs	r3, #0
 8004332:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004338:	2200      	movs	r2, #0
 800433a:	4619      	mov	r1, r3
 800433c:	4819      	ldr	r0, [pc, #100]	; (80043a4 <MX_TIM1_Init+0x150>)
 800433e:	f006 ff3d 	bl	800b1bc <HAL_TIM_PWM_ConfigChannel>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004348:	f000 fa32 	bl	80047b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800434c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004350:	2208      	movs	r2, #8
 8004352:	4619      	mov	r1, r3
 8004354:	4813      	ldr	r0, [pc, #76]	; (80043a4 <MX_TIM1_Init+0x150>)
 8004356:	f006 ff31 	bl	800b1bc <HAL_TIM_PWM_ConfigChannel>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004360:	f000 fa26 	bl	80047b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004364:	2300      	movs	r3, #0
 8004366:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004368:	2300      	movs	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800437c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800437e:	2300      	movs	r3, #0
 8004380:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004382:	1d3b      	adds	r3, r7, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4807      	ldr	r0, [pc, #28]	; (80043a4 <MX_TIM1_Init+0x150>)
 8004388:	f007 fc3c 	bl	800bc04 <HAL_TIMEx_ConfigBreakDeadTime>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8004392:	f000 fa0d 	bl	80047b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004396:	4803      	ldr	r0, [pc, #12]	; (80043a4 <MX_TIM1_Init+0x150>)
 8004398:	f001 fde2 	bl	8005f60 <HAL_TIM_MspPostInit>

}
 800439c:	bf00      	nop
 800439e:	3758      	adds	r7, #88	; 0x58
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20010bdc 	.word	0x20010bdc
 80043a8:	40010000 	.word	0x40010000

080043ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043b2:	f107 0308 	add.w	r3, r7, #8
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	609a      	str	r2, [r3, #8]
 80043be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043c0:	463b      	mov	r3, r7
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80043c8:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <MX_TIM4_Init+0x94>)
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <MX_TIM4_Init+0x98>)
 80043cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 80043ce:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <MX_TIM4_Init+0x94>)
 80043d0:	2223      	movs	r2, #35	; 0x23
 80043d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043d4:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <MX_TIM4_Init+0x94>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80043da:	4b19      	ldr	r3, [pc, #100]	; (8004440 <MX_TIM4_Init+0x94>)
 80043dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80043e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043e2:	4b17      	ldr	r3, [pc, #92]	; (8004440 <MX_TIM4_Init+0x94>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e8:	4b15      	ldr	r3, [pc, #84]	; (8004440 <MX_TIM4_Init+0x94>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80043ee:	4814      	ldr	r0, [pc, #80]	; (8004440 <MX_TIM4_Init+0x94>)
 80043f0:	f006 fbff 	bl	800abf2 <HAL_TIM_Base_Init>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80043fa:	f000 f9d9 	bl	80047b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004402:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004404:	f107 0308 	add.w	r3, r7, #8
 8004408:	4619      	mov	r1, r3
 800440a:	480d      	ldr	r0, [pc, #52]	; (8004440 <MX_TIM4_Init+0x94>)
 800440c:	f006 ff94 	bl	800b338 <HAL_TIM_ConfigClockSource>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004416:	f000 f9cb 	bl	80047b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004422:	463b      	mov	r3, r7
 8004424:	4619      	mov	r1, r3
 8004426:	4806      	ldr	r0, [pc, #24]	; (8004440 <MX_TIM4_Init+0x94>)
 8004428:	f007 fb72 	bl	800bb10 <HAL_TIMEx_MasterConfigSynchronization>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004432:	f000 f9bd 	bl	80047b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004436:	bf00      	nop
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	2000b948 	.word	0x2000b948
 8004444:	40000800 	.word	0x40000800

08004448 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800444e:	1d3b      	adds	r3, r7, #4
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	611a      	str	r2, [r3, #16]
 800445c:	615a      	str	r2, [r3, #20]
 800445e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004460:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <MX_TIM10_Init+0x94>)
 8004462:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <MX_TIM10_Init+0x98>)
 8004464:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004466:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <MX_TIM10_Init+0x94>)
 8004468:	2200      	movs	r2, #0
 800446a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800446c:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <MX_TIM10_Init+0x94>)
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004472:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <MX_TIM10_Init+0x94>)
 8004474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004478:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800447a:	4b18      	ldr	r3, [pc, #96]	; (80044dc <MX_TIM10_Init+0x94>)
 800447c:	2200      	movs	r2, #0
 800447e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004480:	4b16      	ldr	r3, [pc, #88]	; (80044dc <MX_TIM10_Init+0x94>)
 8004482:	2280      	movs	r2, #128	; 0x80
 8004484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004486:	4815      	ldr	r0, [pc, #84]	; (80044dc <MX_TIM10_Init+0x94>)
 8004488:	f006 fbb3 	bl	800abf2 <HAL_TIM_Base_Init>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8004492:	f000 f98d 	bl	80047b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004496:	4811      	ldr	r0, [pc, #68]	; (80044dc <MX_TIM10_Init+0x94>)
 8004498:	f006 fc68 	bl	800ad6c <HAL_TIM_PWM_Init>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80044a2:	f000 f985 	bl	80047b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044a6:	2360      	movs	r3, #96	; 0x60
 80044a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	2200      	movs	r2, #0
 80044ba:	4619      	mov	r1, r3
 80044bc:	4807      	ldr	r0, [pc, #28]	; (80044dc <MX_TIM10_Init+0x94>)
 80044be:	f006 fe7d 	bl	800b1bc <HAL_TIM_PWM_ConfigChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80044c8:	f000 f972 	bl	80047b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80044cc:	4803      	ldr	r0, [pc, #12]	; (80044dc <MX_TIM10_Init+0x94>)
 80044ce:	f001 fd47 	bl	8005f60 <HAL_TIM_MspPostInit>

}
 80044d2:	bf00      	nop
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	2000b990 	.word	0x2000b990
 80044e0:	40014400 	.word	0x40014400

080044e4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044ea:	463b      	mov	r3, r7
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80044f6:	4b16      	ldr	r3, [pc, #88]	; (8004550 <MX_TIM12_Init+0x6c>)
 80044f8:	4a16      	ldr	r2, [pc, #88]	; (8004554 <MX_TIM12_Init+0x70>)
 80044fa:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1000;
 80044fc:	4b14      	ldr	r3, [pc, #80]	; (8004550 <MX_TIM12_Init+0x6c>)
 80044fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004502:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004504:	4b12      	ldr	r3, [pc, #72]	; (8004550 <MX_TIM12_Init+0x6c>)
 8004506:	2200      	movs	r2, #0
 8004508:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 36000;
 800450a:	4b11      	ldr	r3, [pc, #68]	; (8004550 <MX_TIM12_Init+0x6c>)
 800450c:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8004510:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004512:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <MX_TIM12_Init+0x6c>)
 8004514:	2200      	movs	r2, #0
 8004516:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004518:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <MX_TIM12_Init+0x6c>)
 800451a:	2200      	movs	r2, #0
 800451c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800451e:	480c      	ldr	r0, [pc, #48]	; (8004550 <MX_TIM12_Init+0x6c>)
 8004520:	f006 fb67 	bl	800abf2 <HAL_TIM_Base_Init>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800452a:	f000 f941 	bl	80047b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800452e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004532:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004534:	463b      	mov	r3, r7
 8004536:	4619      	mov	r1, r3
 8004538:	4805      	ldr	r0, [pc, #20]	; (8004550 <MX_TIM12_Init+0x6c>)
 800453a:	f006 fefd 	bl	800b338 <HAL_TIM_ConfigClockSource>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8004544:	f000 f934 	bl	80047b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8004548:	bf00      	nop
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20010c24 	.word	0x20010c24
 8004554:	40001800 	.word	0x40001800

08004558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <MX_DMA_Init+0x3c>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <MX_DMA_Init+0x3c>)
 8004568:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800456c:	6313      	str	r3, [r2, #48]	; 0x30
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <MX_DMA_Init+0x3c>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800457a:	2200      	movs	r2, #0
 800457c:	2105      	movs	r1, #5
 800457e:	2038      	movs	r0, #56	; 0x38
 8004580:	f002 fe67 	bl	8007252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004584:	2038      	movs	r0, #56	; 0x38
 8004586:	f002 fe80 	bl	800728a <HAL_NVIC_EnableIRQ>

}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40023800 	.word	0x40023800

08004598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08c      	sub	sp, #48	; 0x30
 800459c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800459e:	f107 031c 	add.w	r3, r7, #28
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	605a      	str	r2, [r3, #4]
 80045a8:	609a      	str	r2, [r3, #8]
 80045aa:	60da      	str	r2, [r3, #12]
 80045ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	4b5f      	ldr	r3, [pc, #380]	; (8004730 <MX_GPIO_Init+0x198>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	4a5e      	ldr	r2, [pc, #376]	; (8004730 <MX_GPIO_Init+0x198>)
 80045b8:	f043 0310 	orr.w	r3, r3, #16
 80045bc:	6313      	str	r3, [r2, #48]	; 0x30
 80045be:	4b5c      	ldr	r3, [pc, #368]	; (8004730 <MX_GPIO_Init+0x198>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	4b58      	ldr	r3, [pc, #352]	; (8004730 <MX_GPIO_Init+0x198>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4a57      	ldr	r2, [pc, #348]	; (8004730 <MX_GPIO_Init+0x198>)
 80045d4:	f043 0320 	orr.w	r3, r3, #32
 80045d8:	6313      	str	r3, [r2, #48]	; 0x30
 80045da:	4b55      	ldr	r3, [pc, #340]	; (8004730 <MX_GPIO_Init+0x198>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	4b51      	ldr	r3, [pc, #324]	; (8004730 <MX_GPIO_Init+0x198>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	4a50      	ldr	r2, [pc, #320]	; (8004730 <MX_GPIO_Init+0x198>)
 80045f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f4:	6313      	str	r3, [r2, #48]	; 0x30
 80045f6:	4b4e      	ldr	r3, [pc, #312]	; (8004730 <MX_GPIO_Init+0x198>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	4b4a      	ldr	r3, [pc, #296]	; (8004730 <MX_GPIO_Init+0x198>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	4a49      	ldr	r2, [pc, #292]	; (8004730 <MX_GPIO_Init+0x198>)
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	6313      	str	r3, [r2, #48]	; 0x30
 8004612:	4b47      	ldr	r3, [pc, #284]	; (8004730 <MX_GPIO_Init+0x198>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	4b43      	ldr	r3, [pc, #268]	; (8004730 <MX_GPIO_Init+0x198>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	4a42      	ldr	r2, [pc, #264]	; (8004730 <MX_GPIO_Init+0x198>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6313      	str	r3, [r2, #48]	; 0x30
 800462e:	4b40      	ldr	r3, [pc, #256]	; (8004730 <MX_GPIO_Init+0x198>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	4b3c      	ldr	r3, [pc, #240]	; (8004730 <MX_GPIO_Init+0x198>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	4a3b      	ldr	r2, [pc, #236]	; (8004730 <MX_GPIO_Init+0x198>)
 8004644:	f043 0302 	orr.w	r3, r3, #2
 8004648:	6313      	str	r3, [r2, #48]	; 0x30
 800464a:	4b39      	ldr	r3, [pc, #228]	; (8004730 <MX_GPIO_Init+0x198>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	607b      	str	r3, [r7, #4]
 8004654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 8004656:	2201      	movs	r2, #1
 8004658:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800465c:	4835      	ldr	r0, [pc, #212]	; (8004734 <MX_GPIO_Init+0x19c>)
 800465e:	f003 fb44 	bl	8007cea <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8004662:	2200      	movs	r2, #0
 8004664:	2104      	movs	r1, #4
 8004666:	4834      	ldr	r0, [pc, #208]	; (8004738 <MX_GPIO_Init+0x1a0>)
 8004668:	f003 fb3f 	bl	8007cea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 800466c:	2200      	movs	r2, #0
 800466e:	2104      	movs	r1, #4
 8004670:	4832      	ldr	r0, [pc, #200]	; (800473c <MX_GPIO_Init+0x1a4>)
 8004672:	f003 fb3a 	bl	8007cea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin, GPIO_PIN_RESET);
 8004676:	2200      	movs	r2, #0
 8004678:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800467c:	482d      	ldr	r0, [pc, #180]	; (8004734 <MX_GPIO_Init+0x19c>)
 800467e:	f003 fb34 	bl	8007cea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 8004682:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8004686:	61fb      	str	r3, [r7, #28]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004688:	2301      	movs	r3, #1
 800468a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468c:	2300      	movs	r3, #0
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004690:	2303      	movs	r3, #3
 8004692:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004694:	f107 031c 	add.w	r3, r7, #28
 8004698:	4619      	mov	r1, r3
 800469a:	4826      	ldr	r0, [pc, #152]	; (8004734 <MX_GPIO_Init+0x19c>)
 800469c:	f003 f970 	bl	8007980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80046a0:	2304      	movs	r3, #4
 80046a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046a4:	2301      	movs	r3, #1
 80046a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ac:	2300      	movs	r3, #0
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046b0:	f107 031c 	add.w	r3, r7, #28
 80046b4:	4619      	mov	r1, r3
 80046b6:	4820      	ldr	r0, [pc, #128]	; (8004738 <MX_GPIO_Init+0x1a0>)
 80046b8:	f003 f962 	bl	8007980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80046bc:	2320      	movs	r3, #32
 80046be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046c0:	2303      	movs	r3, #3
 80046c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c8:	f107 031c 	add.w	r3, r7, #28
 80046cc:	4619      	mov	r1, r3
 80046ce:	481c      	ldr	r0, [pc, #112]	; (8004740 <MX_GPIO_Init+0x1a8>)
 80046d0:	f003 f956 	bl	8007980 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 80046d4:	2304      	movs	r3, #4
 80046d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046d8:	2301      	movs	r3, #1
 80046da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e0:	2300      	movs	r3, #0
 80046e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 80046e4:	f107 031c 	add.w	r3, r7, #28
 80046e8:	4619      	mov	r1, r3
 80046ea:	4814      	ldr	r0, [pc, #80]	; (800473c <MX_GPIO_Init+0x1a4>)
 80046ec:	f003 f948 	bl	8007980 <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin water_heat_cool_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin;
 80046f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80046f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046f6:	2301      	movs	r3, #1
 80046f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046fe:	2300      	movs	r3, #0
 8004700:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004702:	f107 031c 	add.w	r3, r7, #28
 8004706:	4619      	mov	r1, r3
 8004708:	480a      	ldr	r0, [pc, #40]	; (8004734 <MX_GPIO_Init+0x19c>)
 800470a:	f003 f939 	bl	8007980 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 800470e:	2302      	movs	r3, #2
 8004710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004712:	2300      	movs	r3, #0
 8004714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004716:	2300      	movs	r3, #0
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 800471a:	f107 031c 	add.w	r3, r7, #28
 800471e:	4619      	mov	r1, r3
 8004720:	4804      	ldr	r0, [pc, #16]	; (8004734 <MX_GPIO_Init+0x19c>)
 8004722:	f003 f92d 	bl	8007980 <HAL_GPIO_Init>

}
 8004726:	bf00      	nop
 8004728:	3730      	adds	r7, #48	; 0x30
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40023800 	.word	0x40023800
 8004734:	40021000 	.word	0x40021000
 8004738:	40020800 	.word	0x40020800
 800473c:	40020400 	.word	0x40020400
 8004740:	40020000 	.word	0x40020000

08004744 <HAL_ADC_ConvCpltCallback>:



char retrieved_ADC_values = 'n';
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	retrieved_ADC_values = 'y';
 800474c:	4b03      	ldr	r3, [pc, #12]	; (800475c <HAL_ADC_ConvCpltCallback+0x18>)
 800474e:	2279      	movs	r2, #121	; 0x79
 8004750:	701a      	strb	r2, [r3, #0]
	//water_temp = readWaterTemp();

}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	200001d7 	.word	0x200001d7

08004760 <StartBalanceWater>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBalanceWater */
void StartBalanceWater(void const * argument)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8004768:	f011 fa20 	bl	8015bac <MX_USB_HOST_Init>
  /* Infinite loop */
  for(;;)
  {

	 // MX_USB_HOST_Process();
	systemControl();
 800476c:	f7ff fb7c 	bl	8003e68 <systemControl>
    osDelay(1);
 8004770:	2001      	movs	r0, #1
 8004772:	f00e fc70 	bl	8013056 <osDelay>
	systemControl();
 8004776:	e7f9      	b.n	800476c <StartBalanceWater+0xc>

08004778 <StartWaterTempControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWaterTempControl */
void StartWaterTempControl(void const * argument)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWaterTempControl */
  /* Infinite loop */
  for(;;)
  {
	waterTempControl();
 8004780:	f7ff fa68 	bl	8003c54 <waterTempControl>
    osDelay(1);
 8004784:	2001      	movs	r0, #1
 8004786:	f00e fc66 	bl	8013056 <osDelay>
	waterTempControl();
 800478a:	e7f9      	b.n	8004780 <StartWaterTempControl+0x8>

0800478c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a04      	ldr	r2, [pc, #16]	; (80047ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800479e:	f001 ff33 	bl	8006608 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40001000 	.word	0x40001000

080047b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047b4:	b672      	cpsid	i
}
 80047b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047b8:	e7fe      	b.n	80047b8 <Error_Handler+0x8>

080047ba <doseWater>:
#include "hydro_control_loop.h"
double pH_up_volume = 0;
double pH_down_volume = 0;
double nutrient_volume = 0;
void doseWater(float acid_ml, float base_ml, float nutrient_ml)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b088      	sub	sp, #32
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
	int ph_down_steps = calc_dose_steps(acid_ml);
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7fb fe78 	bl	80004bc <__aeabi_f2d>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4610      	mov	r0, r2
 80047d2:	4619      	mov	r1, r3
 80047d4:	f000 fe24 	bl	8005420 <calc_dose_steps>
 80047d8:	61f8      	str	r0, [r7, #28]
	int ph_up_steps = calc_dose_steps(base_ml);
 80047da:	68b8      	ldr	r0, [r7, #8]
 80047dc:	f7fb fe6e 	bl	80004bc <__aeabi_f2d>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4610      	mov	r0, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	f000 fe1a 	bl	8005420 <calc_dose_steps>
 80047ec:	61b8      	str	r0, [r7, #24]
	int nutrient_steps = calc_dose_steps(nutrient_ml);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fb fe64 	bl	80004bc <__aeabi_f2d>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	f000 fe10 	bl	8005420 <calc_dose_steps>
 8004800:	6178      	str	r0, [r7, #20]
	step(nutrient_steps,ph_up_steps, ph_down_steps);
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	69b9      	ldr	r1, [r7, #24]
 8004806:	6978      	ldr	r0, [r7, #20]
 8004808:	f000 ffe0 	bl	80057cc <step>
}
 800480c:	bf00      	nop
 800480e:	3720      	adds	r7, #32
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	0000      	movs	r0, r0
	...

08004818 <calcPhUpDose>:
//max_pH_up_dose = 1.0, max_pH_down_dose = 1.0, max_nutrient_dose = 50
double d  = 0;
double calcPhUpDose(double pH_set_val, double TDS_set_val)      // following dose methods return a double in milliliters.
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004822:	e9c7 2300 	strd	r2, r3, [r7]
	pH_up_volume =  0; // set dose to the minimum
 8004826:	4998      	ldr	r1, [pc, #608]	; (8004a88 <calcPhUpDose+0x270>)
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	e9c1 2300 	strd	r2, r3, [r1]

	for(d = 0; (d < pH_set_val-pH) && (pH_up_volume < max_pH_up_dose) && (TDS < 150); d += 0.01)			     	  pH_up_volume += (double) max_pH_up_dose/1300.0;
 8004834:	4995      	ldr	r1, [pc, #596]	; (8004a8c <calcPhUpDose+0x274>)
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	e9c1 2300 	strd	r2, r3, [r1]
 8004842:	e022      	b.n	800488a <calcPhUpDose+0x72>
 8004844:	4b92      	ldr	r3, [pc, #584]	; (8004a90 <calcPhUpDose+0x278>)
 8004846:	e9d3 0100 	ldrd	r0, r1, [r3]
 800484a:	a387      	add	r3, pc, #540	; (adr r3, 8004a68 <calcPhUpDose+0x250>)
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f7fb ffb6 	bl	80007c0 <__aeabi_ddiv>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4610      	mov	r0, r2
 800485a:	4619      	mov	r1, r3
 800485c:	4b8a      	ldr	r3, [pc, #552]	; (8004a88 <calcPhUpDose+0x270>)
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	f7fb fccd 	bl	8000200 <__adddf3>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4987      	ldr	r1, [pc, #540]	; (8004a88 <calcPhUpDose+0x270>)
 800486c:	e9c1 2300 	strd	r2, r3, [r1]
 8004870:	4b86      	ldr	r3, [pc, #536]	; (8004a8c <calcPhUpDose+0x274>)
 8004872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004876:	a37e      	add	r3, pc, #504	; (adr r3, 8004a70 <calcPhUpDose+0x258>)
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	f7fb fcc0 	bl	8000200 <__adddf3>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4981      	ldr	r1, [pc, #516]	; (8004a8c <calcPhUpDose+0x274>)
 8004886:	e9c1 2300 	strd	r2, r3, [r1]
 800488a:	4b82      	ldr	r3, [pc, #520]	; (8004a94 <calcPhUpDose+0x27c>)
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004894:	f7fb fcb2 	bl	80001fc <__aeabi_dsub>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	4b7a      	ldr	r3, [pc, #488]	; (8004a8c <calcPhUpDose+0x274>)
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	f7fc f8f1 	bl	8000a8c <__aeabi_dcmpgt>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d015      	beq.n	80048dc <calcPhUpDose+0xc4>
 80048b0:	4b75      	ldr	r3, [pc, #468]	; (8004a88 <calcPhUpDose+0x270>)
 80048b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048b6:	4b76      	ldr	r3, [pc, #472]	; (8004a90 <calcPhUpDose+0x278>)
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	f7fc f8c8 	bl	8000a50 <__aeabi_dcmplt>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <calcPhUpDose+0xc4>
 80048c6:	4b74      	ldr	r3, [pc, #464]	; (8004a98 <calcPhUpDose+0x280>)
 80048c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048cc:	a36a      	add	r3, pc, #424	; (adr r3, 8004a78 <calcPhUpDose+0x260>)
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	f7fc f8bd 	bl	8000a50 <__aeabi_dcmplt>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1b3      	bne.n	8004844 <calcPhUpDose+0x2c>
	for(d = 0; (d < pH_set_val-pH) && (pH_up_volume < max_pH_up_dose) && (TDS >= 150) && (TDS < 300); d += 0.01) 	  pH_up_volume += (double) max_pH_up_dose/600.0;
 80048dc:	496b      	ldr	r1, [pc, #428]	; (8004a8c <calcPhUpDose+0x274>)
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	e9c1 2300 	strd	r2, r3, [r1]
 80048ea:	e022      	b.n	8004932 <calcPhUpDose+0x11a>
 80048ec:	4b68      	ldr	r3, [pc, #416]	; (8004a90 <calcPhUpDose+0x278>)
 80048ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	4b69      	ldr	r3, [pc, #420]	; (8004a9c <calcPhUpDose+0x284>)
 80048f8:	f7fb ff62 	bl	80007c0 <__aeabi_ddiv>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4610      	mov	r0, r2
 8004902:	4619      	mov	r1, r3
 8004904:	4b60      	ldr	r3, [pc, #384]	; (8004a88 <calcPhUpDose+0x270>)
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	f7fb fc79 	bl	8000200 <__adddf3>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	495d      	ldr	r1, [pc, #372]	; (8004a88 <calcPhUpDose+0x270>)
 8004914:	e9c1 2300 	strd	r2, r3, [r1]
 8004918:	4b5c      	ldr	r3, [pc, #368]	; (8004a8c <calcPhUpDose+0x274>)
 800491a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800491e:	a354      	add	r3, pc, #336	; (adr r3, 8004a70 <calcPhUpDose+0x258>)
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	f7fb fc6c 	bl	8000200 <__adddf3>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4957      	ldr	r1, [pc, #348]	; (8004a8c <calcPhUpDose+0x274>)
 800492e:	e9c1 2300 	strd	r2, r3, [r1]
 8004932:	4b58      	ldr	r3, [pc, #352]	; (8004a94 <calcPhUpDose+0x27c>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800493c:	f7fb fc5e 	bl	80001fc <__aeabi_dsub>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4610      	mov	r0, r2
 8004946:	4619      	mov	r1, r3
 8004948:	4b50      	ldr	r3, [pc, #320]	; (8004a8c <calcPhUpDose+0x274>)
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f7fc f89d 	bl	8000a8c <__aeabi_dcmpgt>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d020      	beq.n	800499a <calcPhUpDose+0x182>
 8004958:	4b4b      	ldr	r3, [pc, #300]	; (8004a88 <calcPhUpDose+0x270>)
 800495a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800495e:	4b4c      	ldr	r3, [pc, #304]	; (8004a90 <calcPhUpDose+0x278>)
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f7fc f874 	bl	8000a50 <__aeabi_dcmplt>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d015      	beq.n	800499a <calcPhUpDose+0x182>
 800496e:	4b4a      	ldr	r3, [pc, #296]	; (8004a98 <calcPhUpDose+0x280>)
 8004970:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004974:	a340      	add	r3, pc, #256	; (adr r3, 8004a78 <calcPhUpDose+0x260>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f7fc f87d 	bl	8000a78 <__aeabi_dcmpge>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <calcPhUpDose+0x182>
 8004984:	4b44      	ldr	r3, [pc, #272]	; (8004a98 <calcPhUpDose+0x280>)
 8004986:	e9d3 0100 	ldrd	r0, r1, [r3]
 800498a:	a33d      	add	r3, pc, #244	; (adr r3, 8004a80 <calcPhUpDose+0x268>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f7fc f85e 	bl	8000a50 <__aeabi_dcmplt>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1a8      	bne.n	80048ec <calcPhUpDose+0xd4>
	for(d = 0; (d < pH_set_val-pH) && (pH_up_volume < max_pH_up_dose) && (TDS >= 300) && (TDS < 600); d += 0.01) 	  pH_up_volume += (double) max_pH_up_dose/150.0;
 800499a:	493c      	ldr	r1, [pc, #240]	; (8004a8c <calcPhUpDose+0x274>)
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9c1 2300 	strd	r2, r3, [r1]
 80049a8:	e022      	b.n	80049f0 <calcPhUpDose+0x1d8>
 80049aa:	4b39      	ldr	r3, [pc, #228]	; (8004a90 <calcPhUpDose+0x278>)
 80049ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049b0:	a331      	add	r3, pc, #196	; (adr r3, 8004a78 <calcPhUpDose+0x260>)
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f7fb ff03 	bl	80007c0 <__aeabi_ddiv>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4610      	mov	r0, r2
 80049c0:	4619      	mov	r1, r3
 80049c2:	4b31      	ldr	r3, [pc, #196]	; (8004a88 <calcPhUpDose+0x270>)
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f7fb fc1a 	bl	8000200 <__adddf3>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	492d      	ldr	r1, [pc, #180]	; (8004a88 <calcPhUpDose+0x270>)
 80049d2:	e9c1 2300 	strd	r2, r3, [r1]
 80049d6:	4b2d      	ldr	r3, [pc, #180]	; (8004a8c <calcPhUpDose+0x274>)
 80049d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049dc:	a324      	add	r3, pc, #144	; (adr r3, 8004a70 <calcPhUpDose+0x258>)
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f7fb fc0d 	bl	8000200 <__adddf3>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4928      	ldr	r1, [pc, #160]	; (8004a8c <calcPhUpDose+0x274>)
 80049ec:	e9c1 2300 	strd	r2, r3, [r1]
 80049f0:	4b28      	ldr	r3, [pc, #160]	; (8004a94 <calcPhUpDose+0x27c>)
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049fa:	f7fb fbff 	bl	80001fc <__aeabi_dsub>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <calcPhUpDose+0x274>)
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f7fc f83e 	bl	8000a8c <__aeabi_dcmpgt>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d020      	beq.n	8004a58 <calcPhUpDose+0x240>
 8004a16:	4b1c      	ldr	r3, [pc, #112]	; (8004a88 <calcPhUpDose+0x270>)
 8004a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a1c:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <calcPhUpDose+0x278>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f7fc f815 	bl	8000a50 <__aeabi_dcmplt>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d015      	beq.n	8004a58 <calcPhUpDose+0x240>
 8004a2c:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <calcPhUpDose+0x280>)
 8004a2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a32:	a313      	add	r3, pc, #76	; (adr r3, 8004a80 <calcPhUpDose+0x268>)
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f7fc f81e 	bl	8000a78 <__aeabi_dcmpge>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <calcPhUpDose+0x240>
 8004a42:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <calcPhUpDose+0x280>)
 8004a44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <calcPhUpDose+0x284>)
 8004a4e:	f7fb ffff 	bl	8000a50 <__aeabi_dcmplt>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1a8      	bne.n	80049aa <calcPhUpDose+0x192>
	for(d = 0; (d < pH_set_val-pH) && (pH_up_volume < max_pH_up_dose) && (TDS >= 600); d += 0.01) 				 	  pH_up_volume += (double) max_pH_up_dose/50.0;
 8004a58:	490c      	ldr	r1, [pc, #48]	; (8004a8c <calcPhUpDose+0x274>)
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	e9c1 2300 	strd	r2, r3, [r1]
 8004a66:	e03e      	b.n	8004ae6 <calcPhUpDose+0x2ce>
 8004a68:	00000000 	.word	0x00000000
 8004a6c:	40945000 	.word	0x40945000
 8004a70:	47ae147b 	.word	0x47ae147b
 8004a74:	3f847ae1 	.word	0x3f847ae1
 8004a78:	00000000 	.word	0x00000000
 8004a7c:	4062c000 	.word	0x4062c000
 8004a80:	00000000 	.word	0x00000000
 8004a84:	4072c000 	.word	0x4072c000
 8004a88:	200078f8 	.word	0x200078f8
 8004a8c:	20007910 	.word	0x20007910
 8004a90:	20000018 	.word	0x20000018
 8004a94:	200027b0 	.word	0x200027b0
 8004a98:	200027a8 	.word	0x200027a8
 8004a9c:	4082c000 	.word	0x4082c000
 8004aa0:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <calcPhUpDose+0x338>)
 8004aa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	4b2a      	ldr	r3, [pc, #168]	; (8004b54 <calcPhUpDose+0x33c>)
 8004aac:	f7fb fe88 	bl	80007c0 <__aeabi_ddiv>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4b27      	ldr	r3, [pc, #156]	; (8004b58 <calcPhUpDose+0x340>)
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f7fb fb9f 	bl	8000200 <__adddf3>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4924      	ldr	r1, [pc, #144]	; (8004b58 <calcPhUpDose+0x340>)
 8004ac8:	e9c1 2300 	strd	r2, r3, [r1]
 8004acc:	4b23      	ldr	r3, [pc, #140]	; (8004b5c <calcPhUpDose+0x344>)
 8004ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ad2:	a31d      	add	r3, pc, #116	; (adr r3, 8004b48 <calcPhUpDose+0x330>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f7fb fb92 	bl	8000200 <__adddf3>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	491e      	ldr	r1, [pc, #120]	; (8004b5c <calcPhUpDose+0x344>)
 8004ae2:	e9c1 2300 	strd	r2, r3, [r1]
 8004ae6:	4b1e      	ldr	r3, [pc, #120]	; (8004b60 <calcPhUpDose+0x348>)
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004af0:	f7fb fb84 	bl	80001fc <__aeabi_dsub>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	4b17      	ldr	r3, [pc, #92]	; (8004b5c <calcPhUpDose+0x344>)
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	f7fb ffc3 	bl	8000a8c <__aeabi_dcmpgt>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d015      	beq.n	8004b38 <calcPhUpDose+0x320>
 8004b0c:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <calcPhUpDose+0x340>)
 8004b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <calcPhUpDose+0x338>)
 8004b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b18:	f7fb ff9a 	bl	8000a50 <__aeabi_dcmplt>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <calcPhUpDose+0x320>
 8004b22:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <calcPhUpDose+0x34c>)
 8004b24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <calcPhUpDose+0x350>)
 8004b2e:	f7fb ffa3 	bl	8000a78 <__aeabi_dcmpge>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1b3      	bne.n	8004aa0 <calcPhUpDose+0x288>
	return pH_up_volume;
 8004b38:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <calcPhUpDose+0x340>)
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	47ae147b 	.word	0x47ae147b
 8004b4c:	3f847ae1 	.word	0x3f847ae1
 8004b50:	20000018 	.word	0x20000018
 8004b54:	40490000 	.word	0x40490000
 8004b58:	200078f8 	.word	0x200078f8
 8004b5c:	20007910 	.word	0x20007910
 8004b60:	200027b0 	.word	0x200027b0
 8004b64:	200027a8 	.word	0x200027a8
 8004b68:	4082c000 	.word	0x4082c000
 8004b6c:	00000000 	.word	0x00000000

08004b70 <calcPhDownDose>:

double calcPhDownDose(double pH_set_val, double TDS_set_val)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004b7a:	e9c7 2300 	strd	r2, r3, [r7]
	pH_down_volume =  0;
 8004b7e:	4998      	ldr	r1, [pc, #608]	; (8004de0 <calcPhDownDose+0x270>)
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	e9c1 2300 	strd	r2, r3, [r1]

	for(d = 0; (d < pH-pH_set_val) && (pH_down_volume < max_pH_down_dose) && (TDS < 150); d += 0.01)			      pH_down_volume += (double) max_pH_down_dose/1300.0;
 8004b8c:	4995      	ldr	r1, [pc, #596]	; (8004de4 <calcPhDownDose+0x274>)
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	e9c1 2300 	strd	r2, r3, [r1]
 8004b9a:	e022      	b.n	8004be2 <calcPhDownDose+0x72>
 8004b9c:	4b92      	ldr	r3, [pc, #584]	; (8004de8 <calcPhDownDose+0x278>)
 8004b9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ba2:	a387      	add	r3, pc, #540	; (adr r3, 8004dc0 <calcPhDownDose+0x250>)
 8004ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba8:	f7fb fe0a 	bl	80007c0 <__aeabi_ddiv>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4b8a      	ldr	r3, [pc, #552]	; (8004de0 <calcPhDownDose+0x270>)
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	f7fb fb21 	bl	8000200 <__adddf3>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4987      	ldr	r1, [pc, #540]	; (8004de0 <calcPhDownDose+0x270>)
 8004bc4:	e9c1 2300 	strd	r2, r3, [r1]
 8004bc8:	4b86      	ldr	r3, [pc, #536]	; (8004de4 <calcPhDownDose+0x274>)
 8004bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bce:	a37e      	add	r3, pc, #504	; (adr r3, 8004dc8 <calcPhDownDose+0x258>)
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f7fb fb14 	bl	8000200 <__adddf3>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4981      	ldr	r1, [pc, #516]	; (8004de4 <calcPhDownDose+0x274>)
 8004bde:	e9c1 2300 	strd	r2, r3, [r1]
 8004be2:	4b82      	ldr	r3, [pc, #520]	; (8004dec <calcPhDownDose+0x27c>)
 8004be4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bec:	f7fb fb06 	bl	80001fc <__aeabi_dsub>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4b7a      	ldr	r3, [pc, #488]	; (8004de4 <calcPhDownDose+0x274>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb ff45 	bl	8000a8c <__aeabi_dcmpgt>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d015      	beq.n	8004c34 <calcPhDownDose+0xc4>
 8004c08:	4b75      	ldr	r3, [pc, #468]	; (8004de0 <calcPhDownDose+0x270>)
 8004c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c0e:	4b76      	ldr	r3, [pc, #472]	; (8004de8 <calcPhDownDose+0x278>)
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f7fb ff1c 	bl	8000a50 <__aeabi_dcmplt>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <calcPhDownDose+0xc4>
 8004c1e:	4b74      	ldr	r3, [pc, #464]	; (8004df0 <calcPhDownDose+0x280>)
 8004c20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c24:	a36a      	add	r3, pc, #424	; (adr r3, 8004dd0 <calcPhDownDose+0x260>)
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f7fb ff11 	bl	8000a50 <__aeabi_dcmplt>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1b3      	bne.n	8004b9c <calcPhDownDose+0x2c>
	for(d = 0; (d < pH-pH_set_val) && (pH_down_volume < max_pH_down_dose) && (TDS >= 150) && (TDS < 300); d += 0.01)  pH_down_volume += (double) max_pH_down_dose/600.0;
 8004c34:	496b      	ldr	r1, [pc, #428]	; (8004de4 <calcPhDownDose+0x274>)
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	e9c1 2300 	strd	r2, r3, [r1]
 8004c42:	e022      	b.n	8004c8a <calcPhDownDose+0x11a>
 8004c44:	4b68      	ldr	r3, [pc, #416]	; (8004de8 <calcPhDownDose+0x278>)
 8004c46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	4b69      	ldr	r3, [pc, #420]	; (8004df4 <calcPhDownDose+0x284>)
 8004c50:	f7fb fdb6 	bl	80007c0 <__aeabi_ddiv>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4b60      	ldr	r3, [pc, #384]	; (8004de0 <calcPhDownDose+0x270>)
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f7fb facd 	bl	8000200 <__adddf3>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	495d      	ldr	r1, [pc, #372]	; (8004de0 <calcPhDownDose+0x270>)
 8004c6c:	e9c1 2300 	strd	r2, r3, [r1]
 8004c70:	4b5c      	ldr	r3, [pc, #368]	; (8004de4 <calcPhDownDose+0x274>)
 8004c72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c76:	a354      	add	r3, pc, #336	; (adr r3, 8004dc8 <calcPhDownDose+0x258>)
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	f7fb fac0 	bl	8000200 <__adddf3>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4957      	ldr	r1, [pc, #348]	; (8004de4 <calcPhDownDose+0x274>)
 8004c86:	e9c1 2300 	strd	r2, r3, [r1]
 8004c8a:	4b58      	ldr	r3, [pc, #352]	; (8004dec <calcPhDownDose+0x27c>)
 8004c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c94:	f7fb fab2 	bl	80001fc <__aeabi_dsub>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4b50      	ldr	r3, [pc, #320]	; (8004de4 <calcPhDownDose+0x274>)
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	f7fb fef1 	bl	8000a8c <__aeabi_dcmpgt>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <calcPhDownDose+0x182>
 8004cb0:	4b4b      	ldr	r3, [pc, #300]	; (8004de0 <calcPhDownDose+0x270>)
 8004cb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cb6:	4b4c      	ldr	r3, [pc, #304]	; (8004de8 <calcPhDownDose+0x278>)
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f7fb fec8 	bl	8000a50 <__aeabi_dcmplt>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d015      	beq.n	8004cf2 <calcPhDownDose+0x182>
 8004cc6:	4b4a      	ldr	r3, [pc, #296]	; (8004df0 <calcPhDownDose+0x280>)
 8004cc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ccc:	a340      	add	r3, pc, #256	; (adr r3, 8004dd0 <calcPhDownDose+0x260>)
 8004cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd2:	f7fb fed1 	bl	8000a78 <__aeabi_dcmpge>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <calcPhDownDose+0x182>
 8004cdc:	4b44      	ldr	r3, [pc, #272]	; (8004df0 <calcPhDownDose+0x280>)
 8004cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ce2:	a33d      	add	r3, pc, #244	; (adr r3, 8004dd8 <calcPhDownDose+0x268>)
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f7fb feb2 	bl	8000a50 <__aeabi_dcmplt>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1a8      	bne.n	8004c44 <calcPhDownDose+0xd4>
	for(d = 0; (d < pH-pH_set_val) && (pH_down_volume < max_pH_down_dose) && (TDS >= 300) && (TDS < 600); d += 0.01)  pH_down_volume += (double) max_pH_down_dose/150.0;
 8004cf2:	493c      	ldr	r1, [pc, #240]	; (8004de4 <calcPhDownDose+0x274>)
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9c1 2300 	strd	r2, r3, [r1]
 8004d00:	e022      	b.n	8004d48 <calcPhDownDose+0x1d8>
 8004d02:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <calcPhDownDose+0x278>)
 8004d04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d08:	a331      	add	r3, pc, #196	; (adr r3, 8004dd0 <calcPhDownDose+0x260>)
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f7fb fd57 	bl	80007c0 <__aeabi_ddiv>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4610      	mov	r0, r2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <calcPhDownDose+0x270>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f7fb fa6e 	bl	8000200 <__adddf3>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	492d      	ldr	r1, [pc, #180]	; (8004de0 <calcPhDownDose+0x270>)
 8004d2a:	e9c1 2300 	strd	r2, r3, [r1]
 8004d2e:	4b2d      	ldr	r3, [pc, #180]	; (8004de4 <calcPhDownDose+0x274>)
 8004d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d34:	a324      	add	r3, pc, #144	; (adr r3, 8004dc8 <calcPhDownDose+0x258>)
 8004d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3a:	f7fb fa61 	bl	8000200 <__adddf3>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4928      	ldr	r1, [pc, #160]	; (8004de4 <calcPhDownDose+0x274>)
 8004d44:	e9c1 2300 	strd	r2, r3, [r1]
 8004d48:	4b28      	ldr	r3, [pc, #160]	; (8004dec <calcPhDownDose+0x27c>)
 8004d4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d52:	f7fb fa53 	bl	80001fc <__aeabi_dsub>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <calcPhDownDose+0x274>)
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f7fb fe92 	bl	8000a8c <__aeabi_dcmpgt>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d020      	beq.n	8004db0 <calcPhDownDose+0x240>
 8004d6e:	4b1c      	ldr	r3, [pc, #112]	; (8004de0 <calcPhDownDose+0x270>)
 8004d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d74:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <calcPhDownDose+0x278>)
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	f7fb fe69 	bl	8000a50 <__aeabi_dcmplt>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d015      	beq.n	8004db0 <calcPhDownDose+0x240>
 8004d84:	4b1a      	ldr	r3, [pc, #104]	; (8004df0 <calcPhDownDose+0x280>)
 8004d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d8a:	a313      	add	r3, pc, #76	; (adr r3, 8004dd8 <calcPhDownDose+0x268>)
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	f7fb fe72 	bl	8000a78 <__aeabi_dcmpge>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <calcPhDownDose+0x240>
 8004d9a:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <calcPhDownDose+0x280>)
 8004d9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	4b13      	ldr	r3, [pc, #76]	; (8004df4 <calcPhDownDose+0x284>)
 8004da6:	f7fb fe53 	bl	8000a50 <__aeabi_dcmplt>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1a8      	bne.n	8004d02 <calcPhDownDose+0x192>
	for(d = 0; (d < pH-pH_set_val) && (pH_down_volume < max_pH_down_dose) && (TDS >= 600); d += 0.01)		  		  pH_down_volume += (double) max_pH_down_dose/50.0;
 8004db0:	490c      	ldr	r1, [pc, #48]	; (8004de4 <calcPhDownDose+0x274>)
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	e9c1 2300 	strd	r2, r3, [r1]
 8004dbe:	e03e      	b.n	8004e3e <calcPhDownDose+0x2ce>
 8004dc0:	00000000 	.word	0x00000000
 8004dc4:	40945000 	.word	0x40945000
 8004dc8:	47ae147b 	.word	0x47ae147b
 8004dcc:	3f847ae1 	.word	0x3f847ae1
 8004dd0:	00000000 	.word	0x00000000
 8004dd4:	4062c000 	.word	0x4062c000
 8004dd8:	00000000 	.word	0x00000000
 8004ddc:	4072c000 	.word	0x4072c000
 8004de0:	20007900 	.word	0x20007900
 8004de4:	20007910 	.word	0x20007910
 8004de8:	20000020 	.word	0x20000020
 8004dec:	200027b0 	.word	0x200027b0
 8004df0:	200027a8 	.word	0x200027a8
 8004df4:	4082c000 	.word	0x4082c000
 8004df8:	4b2b      	ldr	r3, [pc, #172]	; (8004ea8 <calcPhDownDose+0x338>)
 8004dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	4b2a      	ldr	r3, [pc, #168]	; (8004eac <calcPhDownDose+0x33c>)
 8004e04:	f7fb fcdc 	bl	80007c0 <__aeabi_ddiv>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4b27      	ldr	r3, [pc, #156]	; (8004eb0 <calcPhDownDose+0x340>)
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f7fb f9f3 	bl	8000200 <__adddf3>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4924      	ldr	r1, [pc, #144]	; (8004eb0 <calcPhDownDose+0x340>)
 8004e20:	e9c1 2300 	strd	r2, r3, [r1]
 8004e24:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <calcPhDownDose+0x344>)
 8004e26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e2a:	a31d      	add	r3, pc, #116	; (adr r3, 8004ea0 <calcPhDownDose+0x330>)
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f7fb f9e6 	bl	8000200 <__adddf3>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	491e      	ldr	r1, [pc, #120]	; (8004eb4 <calcPhDownDose+0x344>)
 8004e3a:	e9c1 2300 	strd	r2, r3, [r1]
 8004e3e:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <calcPhDownDose+0x348>)
 8004e40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e48:	f7fb f9d8 	bl	80001fc <__aeabi_dsub>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4610      	mov	r0, r2
 8004e52:	4619      	mov	r1, r3
 8004e54:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <calcPhDownDose+0x344>)
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	f7fb fe17 	bl	8000a8c <__aeabi_dcmpgt>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d015      	beq.n	8004e90 <calcPhDownDose+0x320>
 8004e64:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <calcPhDownDose+0x340>)
 8004e66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <calcPhDownDose+0x338>)
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f7fb fdee 	bl	8000a50 <__aeabi_dcmplt>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <calcPhDownDose+0x320>
 8004e7a:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <calcPhDownDose+0x34c>)
 8004e7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <calcPhDownDose+0x350>)
 8004e86:	f7fb fdf7 	bl	8000a78 <__aeabi_dcmpge>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1b3      	bne.n	8004df8 <calcPhDownDose+0x288>
	return pH_down_volume;
 8004e90:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <calcPhDownDose+0x340>)
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8004e96:	4610      	mov	r0, r2
 8004e98:	4619      	mov	r1, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	47ae147b 	.word	0x47ae147b
 8004ea4:	3f847ae1 	.word	0x3f847ae1
 8004ea8:	20000020 	.word	0x20000020
 8004eac:	40490000 	.word	0x40490000
 8004eb0:	20007900 	.word	0x20007900
 8004eb4:	20007910 	.word	0x20007910
 8004eb8:	200027b0 	.word	0x200027b0
 8004ebc:	200027a8 	.word	0x200027a8
 8004ec0:	4082c000 	.word	0x4082c000

08004ec4 <calcNutrientDose>:

double calcNutrientDose(double pH_set_val, double TDS_set_val)	// calculates nutrient dosage based on how far we are away from the set-point
{
 8004ec4:	b5b0      	push	{r4, r5, r7, lr}
 8004ec6:	b08a      	sub	sp, #40	; 0x28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004ece:	e9c7 2300 	strd	r2, r3, [r7]
	nutrient_volume =  0;
 8004ed2:	49a4      	ldr	r1, [pc, #656]	; (8005164 <calcNutrientDose+0x2a0>)
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9c1 2300 	strd	r2, r3, [r1]
	if(		(TDS_set_val - TDS)  > 30)								 for(int i = 0; (i < TDS_set_val - TDS) && (nutrient_volume < max_nutrient_dose); i++)     nutrient_volume += (double) max_nutrient_dose/45.0;
 8004ee0:	4ba1      	ldr	r3, [pc, #644]	; (8005168 <calcNutrientDose+0x2a4>)
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eea:	f7fb f987 	bl	80001fc <__aeabi_dsub>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	4b9c      	ldr	r3, [pc, #624]	; (800516c <calcNutrientDose+0x2a8>)
 8004efc:	f7fb fdc6 	bl	8000a8c <__aeabi_dcmpgt>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d03d      	beq.n	8004f82 <calcNutrientDose+0xbe>
 8004f06:	2300      	movs	r3, #0
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0a:	e018      	b.n	8004f3e <calcNutrientDose+0x7a>
 8004f0c:	4b98      	ldr	r3, [pc, #608]	; (8005170 <calcNutrientDose+0x2ac>)
 8004f0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	4b97      	ldr	r3, [pc, #604]	; (8005174 <calcNutrientDose+0x2b0>)
 8004f18:	f7fb fc52 	bl	80007c0 <__aeabi_ddiv>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4610      	mov	r0, r2
 8004f22:	4619      	mov	r1, r3
 8004f24:	4b8f      	ldr	r3, [pc, #572]	; (8005164 <calcNutrientDose+0x2a0>)
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f7fb f969 	bl	8000200 <__adddf3>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	498c      	ldr	r1, [pc, #560]	; (8005164 <calcNutrientDose+0x2a0>)
 8004f34:	e9c1 2300 	strd	r2, r3, [r1]
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f40:	f7fb faaa 	bl	8000498 <__aeabi_i2d>
 8004f44:	4604      	mov	r4, r0
 8004f46:	460d      	mov	r5, r1
 8004f48:	4b87      	ldr	r3, [pc, #540]	; (8005168 <calcNutrientDose+0x2a4>)
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f52:	f7fb f953 	bl	80001fc <__aeabi_dsub>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	f7fb fd77 	bl	8000a50 <__aeabi_dcmplt>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 819b 	beq.w	80052a0 <calcNutrientDose+0x3dc>
 8004f6a:	4b7e      	ldr	r3, [pc, #504]	; (8005164 <calcNutrientDose+0x2a0>)
 8004f6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f70:	4b7f      	ldr	r3, [pc, #508]	; (8005170 <calcNutrientDose+0x2ac>)
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	f7fb fd6b 	bl	8000a50 <__aeabi_dcmplt>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1c5      	bne.n	8004f0c <calcNutrientDose+0x48>
 8004f80:	e18e      	b.n	80052a0 <calcNutrientDose+0x3dc>
	else if((TDS_set_val - TDS) <= 30 && (TDS_set_val - TDS) > 15 )  for(int i = 0; (i < TDS_set_val - TDS) && (nutrient_volume < max_nutrient_dose); i++)	  nutrient_volume += (double) max_nutrient_dose/50.0;
 8004f82:	4b79      	ldr	r3, [pc, #484]	; (8005168 <calcNutrientDose+0x2a4>)
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f8c:	f7fb f936 	bl	80001fc <__aeabi_dsub>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4610      	mov	r0, r2
 8004f96:	4619      	mov	r1, r3
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	4b73      	ldr	r3, [pc, #460]	; (800516c <calcNutrientDose+0x2a8>)
 8004f9e:	f7fb fd61 	bl	8000a64 <__aeabi_dcmple>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d050      	beq.n	800504a <calcNutrientDose+0x186>
 8004fa8:	4b6f      	ldr	r3, [pc, #444]	; (8005168 <calcNutrientDose+0x2a4>)
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fb2:	f7fb f923 	bl	80001fc <__aeabi_dsub>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f04f 0200 	mov.w	r2, #0
 8004fc2:	4b6d      	ldr	r3, [pc, #436]	; (8005178 <calcNutrientDose+0x2b4>)
 8004fc4:	f7fb fd62 	bl	8000a8c <__aeabi_dcmpgt>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d03d      	beq.n	800504a <calcNutrientDose+0x186>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	e018      	b.n	8005006 <calcNutrientDose+0x142>
 8004fd4:	4b66      	ldr	r3, [pc, #408]	; (8005170 <calcNutrientDose+0x2ac>)
 8004fd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	4b67      	ldr	r3, [pc, #412]	; (800517c <calcNutrientDose+0x2b8>)
 8004fe0:	f7fb fbee 	bl	80007c0 <__aeabi_ddiv>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4619      	mov	r1, r3
 8004fec:	4b5d      	ldr	r3, [pc, #372]	; (8005164 <calcNutrientDose+0x2a0>)
 8004fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff2:	f7fb f905 	bl	8000200 <__adddf3>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	495a      	ldr	r1, [pc, #360]	; (8005164 <calcNutrientDose+0x2a0>)
 8004ffc:	e9c1 2300 	strd	r2, r3, [r1]
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	3301      	adds	r3, #1
 8005004:	623b      	str	r3, [r7, #32]
 8005006:	6a38      	ldr	r0, [r7, #32]
 8005008:	f7fb fa46 	bl	8000498 <__aeabi_i2d>
 800500c:	4604      	mov	r4, r0
 800500e:	460d      	mov	r5, r1
 8005010:	4b55      	ldr	r3, [pc, #340]	; (8005168 <calcNutrientDose+0x2a4>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800501a:	f7fb f8ef 	bl	80001fc <__aeabi_dsub>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4620      	mov	r0, r4
 8005024:	4629      	mov	r1, r5
 8005026:	f7fb fd13 	bl	8000a50 <__aeabi_dcmplt>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d100      	bne.n	8005032 <calcNutrientDose+0x16e>
 8005030:	e136      	b.n	80052a0 <calcNutrientDose+0x3dc>
 8005032:	4b4c      	ldr	r3, [pc, #304]	; (8005164 <calcNutrientDose+0x2a0>)
 8005034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005038:	4b4d      	ldr	r3, [pc, #308]	; (8005170 <calcNutrientDose+0x2ac>)
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f7fb fd07 	bl	8000a50 <__aeabi_dcmplt>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1c5      	bne.n	8004fd4 <calcNutrientDose+0x110>
 8005048:	e12a      	b.n	80052a0 <calcNutrientDose+0x3dc>
	else if((TDS_set_val - TDS) <= 15 && (TDS_set_val - TDS) > 7.5 ) for(int i = 0; (i < TDS_set_val - TDS) && (nutrient_volume < max_nutrient_dose); i++)	  nutrient_volume += (double) max_nutrient_dose/55.0;
 800504a:	4b47      	ldr	r3, [pc, #284]	; (8005168 <calcNutrientDose+0x2a4>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005054:	f7fb f8d2 	bl	80001fc <__aeabi_dsub>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	4b44      	ldr	r3, [pc, #272]	; (8005178 <calcNutrientDose+0x2b4>)
 8005066:	f7fb fcfd 	bl	8000a64 <__aeabi_dcmple>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d050      	beq.n	8005112 <calcNutrientDose+0x24e>
 8005070:	4b3d      	ldr	r3, [pc, #244]	; (8005168 <calcNutrientDose+0x2a4>)
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800507a:	f7fb f8bf 	bl	80001fc <__aeabi_dsub>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4610      	mov	r0, r2
 8005084:	4619      	mov	r1, r3
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	4b3d      	ldr	r3, [pc, #244]	; (8005180 <calcNutrientDose+0x2bc>)
 800508c:	f7fb fcfe 	bl	8000a8c <__aeabi_dcmpgt>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d03d      	beq.n	8005112 <calcNutrientDose+0x24e>
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	e018      	b.n	80050ce <calcNutrientDose+0x20a>
 800509c:	4b34      	ldr	r3, [pc, #208]	; (8005170 <calcNutrientDose+0x2ac>)
 800509e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	4b37      	ldr	r3, [pc, #220]	; (8005184 <calcNutrientDose+0x2c0>)
 80050a8:	f7fb fb8a 	bl	80007c0 <__aeabi_ddiv>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4610      	mov	r0, r2
 80050b2:	4619      	mov	r1, r3
 80050b4:	4b2b      	ldr	r3, [pc, #172]	; (8005164 <calcNutrientDose+0x2a0>)
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	f7fb f8a1 	bl	8000200 <__adddf3>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4928      	ldr	r1, [pc, #160]	; (8005164 <calcNutrientDose+0x2a0>)
 80050c4:	e9c1 2300 	strd	r2, r3, [r1]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	3301      	adds	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
 80050ce:	69f8      	ldr	r0, [r7, #28]
 80050d0:	f7fb f9e2 	bl	8000498 <__aeabi_i2d>
 80050d4:	4604      	mov	r4, r0
 80050d6:	460d      	mov	r5, r1
 80050d8:	4b23      	ldr	r3, [pc, #140]	; (8005168 <calcNutrientDose+0x2a4>)
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050e2:	f7fb f88b 	bl	80001fc <__aeabi_dsub>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4620      	mov	r0, r4
 80050ec:	4629      	mov	r1, r5
 80050ee:	f7fb fcaf 	bl	8000a50 <__aeabi_dcmplt>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d100      	bne.n	80050fa <calcNutrientDose+0x236>
 80050f8:	e0d2      	b.n	80052a0 <calcNutrientDose+0x3dc>
 80050fa:	4b1a      	ldr	r3, [pc, #104]	; (8005164 <calcNutrientDose+0x2a0>)
 80050fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005100:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <calcNutrientDose+0x2ac>)
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	f7fb fca3 	bl	8000a50 <__aeabi_dcmplt>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1c5      	bne.n	800509c <calcNutrientDose+0x1d8>
 8005110:	e0c6      	b.n	80052a0 <calcNutrientDose+0x3dc>
	else if((TDS_set_val - TDS) <= 7.5 && (TDS_set_val - TDS) > 2.5 )for(int i = 0; (i < TDS_set_val - TDS) && (nutrient_volume < max_nutrient_dose); i++)	  nutrient_volume += (double) max_nutrient_dose/60.0;
 8005112:	4b15      	ldr	r3, [pc, #84]	; (8005168 <calcNutrientDose+0x2a4>)
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800511c:	f7fb f86e 	bl	80001fc <__aeabi_dsub>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4610      	mov	r0, r2
 8005126:	4619      	mov	r1, r3
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	4b14      	ldr	r3, [pc, #80]	; (8005180 <calcNutrientDose+0x2bc>)
 800512e:	f7fb fc99 	bl	8000a64 <__aeabi_dcmple>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d064      	beq.n	8005202 <calcNutrientDose+0x33e>
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <calcNutrientDose+0x2a4>)
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005142:	f7fb f85b 	bl	80001fc <__aeabi_dsub>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4610      	mov	r0, r2
 800514c:	4619      	mov	r1, r3
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <calcNutrientDose+0x2c4>)
 8005154:	f7fb fc9a 	bl	8000a8c <__aeabi_dcmpgt>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d051      	beq.n	8005202 <calcNutrientDose+0x33e>
 800515e:	2300      	movs	r3, #0
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	e02c      	b.n	80051be <calcNutrientDose+0x2fa>
 8005164:	20007908 	.word	0x20007908
 8005168:	200027a8 	.word	0x200027a8
 800516c:	403e0000 	.word	0x403e0000
 8005170:	20000028 	.word	0x20000028
 8005174:	40468000 	.word	0x40468000
 8005178:	402e0000 	.word	0x402e0000
 800517c:	40490000 	.word	0x40490000
 8005180:	401e0000 	.word	0x401e0000
 8005184:	404b8000 	.word	0x404b8000
 8005188:	40040000 	.word	0x40040000
 800518c:	4b48      	ldr	r3, [pc, #288]	; (80052b0 <calcNutrientDose+0x3ec>)
 800518e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	4b47      	ldr	r3, [pc, #284]	; (80052b4 <calcNutrientDose+0x3f0>)
 8005198:	f7fb fb12 	bl	80007c0 <__aeabi_ddiv>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4610      	mov	r0, r2
 80051a2:	4619      	mov	r1, r3
 80051a4:	4b44      	ldr	r3, [pc, #272]	; (80052b8 <calcNutrientDose+0x3f4>)
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	f7fb f829 	bl	8000200 <__adddf3>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4941      	ldr	r1, [pc, #260]	; (80052b8 <calcNutrientDose+0x3f4>)
 80051b4:	e9c1 2300 	strd	r2, r3, [r1]
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	3301      	adds	r3, #1
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	69b8      	ldr	r0, [r7, #24]
 80051c0:	f7fb f96a 	bl	8000498 <__aeabi_i2d>
 80051c4:	4604      	mov	r4, r0
 80051c6:	460d      	mov	r5, r1
 80051c8:	4b3c      	ldr	r3, [pc, #240]	; (80052bc <calcNutrientDose+0x3f8>)
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051d2:	f7fb f813 	bl	80001fc <__aeabi_dsub>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4620      	mov	r0, r4
 80051dc:	4629      	mov	r1, r5
 80051de:	f7fb fc37 	bl	8000a50 <__aeabi_dcmplt>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d100      	bne.n	80051ea <calcNutrientDose+0x326>
 80051e8:	e05a      	b.n	80052a0 <calcNutrientDose+0x3dc>
 80051ea:	4b33      	ldr	r3, [pc, #204]	; (80052b8 <calcNutrientDose+0x3f4>)
 80051ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051f0:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <calcNutrientDose+0x3ec>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7fb fc2b 	bl	8000a50 <__aeabi_dcmplt>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1c5      	bne.n	800518c <calcNutrientDose+0x2c8>
 8005200:	e04e      	b.n	80052a0 <calcNutrientDose+0x3dc>
	else if((TDS_set_val - TDS) <= 2.5) 						     for(int i = 0; (i < TDS_set_val - TDS) && (nutrient_volume < max_nutrient_dose); i++)	  nutrient_volume += (double) max_nutrient_dose/65.0;
 8005202:	4b2e      	ldr	r3, [pc, #184]	; (80052bc <calcNutrientDose+0x3f8>)
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	e9d7 0100 	ldrd	r0, r1, [r7]
 800520c:	f7fa fff6 	bl	80001fc <__aeabi_dsub>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4610      	mov	r0, r2
 8005216:	4619      	mov	r1, r3
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	4b28      	ldr	r3, [pc, #160]	; (80052c0 <calcNutrientDose+0x3fc>)
 800521e:	f7fb fc21 	bl	8000a64 <__aeabi_dcmple>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d03b      	beq.n	80052a0 <calcNutrientDose+0x3dc>
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e018      	b.n	8005260 <calcNutrientDose+0x39c>
 800522e:	4b20      	ldr	r3, [pc, #128]	; (80052b0 <calcNutrientDose+0x3ec>)
 8005230:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	4b22      	ldr	r3, [pc, #136]	; (80052c4 <calcNutrientDose+0x400>)
 800523a:	f7fb fac1 	bl	80007c0 <__aeabi_ddiv>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <calcNutrientDose+0x3f4>)
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f7fa ffd8 	bl	8000200 <__adddf3>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4918      	ldr	r1, [pc, #96]	; (80052b8 <calcNutrientDose+0x3f4>)
 8005256:	e9c1 2300 	strd	r2, r3, [r1]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	3301      	adds	r3, #1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	6978      	ldr	r0, [r7, #20]
 8005262:	f7fb f919 	bl	8000498 <__aeabi_i2d>
 8005266:	4604      	mov	r4, r0
 8005268:	460d      	mov	r5, r1
 800526a:	4b14      	ldr	r3, [pc, #80]	; (80052bc <calcNutrientDose+0x3f8>)
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005274:	f7fa ffc2 	bl	80001fc <__aeabi_dsub>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4620      	mov	r0, r4
 800527e:	4629      	mov	r1, r5
 8005280:	f7fb fbe6 	bl	8000a50 <__aeabi_dcmplt>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <calcNutrientDose+0x3dc>
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <calcNutrientDose+0x3f4>)
 800528c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <calcNutrientDose+0x3ec>)
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f7fb fbdb 	bl	8000a50 <__aeabi_dcmplt>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1c6      	bne.n	800522e <calcNutrientDose+0x36a>

	return nutrient_volume;
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <calcNutrientDose+0x3f4>)
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80052a6:	4610      	mov	r0, r2
 80052a8:	4619      	mov	r1, r3
 80052aa:	3728      	adds	r7, #40	; 0x28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bdb0      	pop	{r4, r5, r7, pc}
 80052b0:	20000028 	.word	0x20000028
 80052b4:	404e0000 	.word	0x404e0000
 80052b8:	20007908 	.word	0x20007908
 80052bc:	200027a8 	.word	0x200027a8
 80052c0:	40040000 	.word	0x40040000
 80052c4:	40504000 	.word	0x40504000

080052c8 <convert_ph>:
double ph_voltage_buffer[30] = {0};
double pH_low_cal = 2021.0, pH_mid_cal = 1523.0, pH_high_cal= 1135.0, low_ph_solution = 4.0, mid_ph_solution = 6.86, High_ph_solution = 9.18;
double slope = 0, ph_Value_Buf = 0;

double convert_ph(float voltage_mV)	// converts voltage to pH value based on three point calibration
{
 80052c8:	b5b0      	push	{r4, r5, r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	if(voltage_mV>pH_mid_cal)
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7fb f8f3 	bl	80004bc <__aeabi_f2d>
 80052d6:	4b4a      	ldr	r3, [pc, #296]	; (8005400 <convert_ph+0x138>)
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	f7fb fbd6 	bl	8000a8c <__aeabi_dcmpgt>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d03b      	beq.n	800535e <convert_ph+0x96>
	{
		slope = (mid_ph_solution-low_ph_solution)/(pH_mid_cal-pH_low_cal);	// if the solution is Acidic calculate the slope of the (calibration_ph_Value_Buf vs calibration_milimvoltage) line  bases on calibration parameters
 80052e6:	4b47      	ldr	r3, [pc, #284]	; (8005404 <convert_ph+0x13c>)
 80052e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052ec:	4b46      	ldr	r3, [pc, #280]	; (8005408 <convert_ph+0x140>)
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	f7fa ff83 	bl	80001fc <__aeabi_dsub>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4614      	mov	r4, r2
 80052fc:	461d      	mov	r5, r3
 80052fe:	4b40      	ldr	r3, [pc, #256]	; (8005400 <convert_ph+0x138>)
 8005300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005304:	4b41      	ldr	r3, [pc, #260]	; (800540c <convert_ph+0x144>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f7fa ff77 	bl	80001fc <__aeabi_dsub>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4620      	mov	r0, r4
 8005314:	4629      	mov	r1, r5
 8005316:	f7fb fa53 	bl	80007c0 <__aeabi_ddiv>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	493c      	ldr	r1, [pc, #240]	; (8005410 <convert_ph+0x148>)
 8005320:	e9c1 2300 	strd	r2, r3, [r1]
		return (slope*(voltage_mV - pH_low_cal)+low_ph_solution);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fb f8c9 	bl	80004bc <__aeabi_f2d>
 800532a:	4b38      	ldr	r3, [pc, #224]	; (800540c <convert_ph+0x144>)
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f7fa ff64 	bl	80001fc <__aeabi_dsub>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4610      	mov	r0, r2
 800533a:	4619      	mov	r1, r3
 800533c:	4b34      	ldr	r3, [pc, #208]	; (8005410 <convert_ph+0x148>)
 800533e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005342:	f7fb f913 	bl	800056c <__aeabi_dmul>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4610      	mov	r0, r2
 800534c:	4619      	mov	r1, r3
 800534e:	4b2e      	ldr	r3, [pc, #184]	; (8005408 <convert_ph+0x140>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f7fa ff54 	bl	8000200 <__adddf3>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	e04a      	b.n	80053f4 <convert_ph+0x12c>
	}
	else if(voltage_mV<=pH_mid_cal)
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fb f8ac 	bl	80004bc <__aeabi_f2d>
 8005364:	4b26      	ldr	r3, [pc, #152]	; (8005400 <convert_ph+0x138>)
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	f7fb fb7b 	bl	8000a64 <__aeabi_dcmple>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d03b      	beq.n	80053ec <convert_ph+0x124>
	{
		slope = (High_ph_solution-mid_ph_solution)/(pH_high_cal-pH_mid_cal);// if the solution is Basic calculate the slope bases just like we did above but for the higher range
 8005374:	4b27      	ldr	r3, [pc, #156]	; (8005414 <convert_ph+0x14c>)
 8005376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800537a:	4b22      	ldr	r3, [pc, #136]	; (8005404 <convert_ph+0x13c>)
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f7fa ff3c 	bl	80001fc <__aeabi_dsub>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4614      	mov	r4, r2
 800538a:	461d      	mov	r5, r3
 800538c:	4b22      	ldr	r3, [pc, #136]	; (8005418 <convert_ph+0x150>)
 800538e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005392:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <convert_ph+0x138>)
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f7fa ff30 	bl	80001fc <__aeabi_dsub>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4620      	mov	r0, r4
 80053a2:	4629      	mov	r1, r5
 80053a4:	f7fb fa0c 	bl	80007c0 <__aeabi_ddiv>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4918      	ldr	r1, [pc, #96]	; (8005410 <convert_ph+0x148>)
 80053ae:	e9c1 2300 	strd	r2, r3, [r1]
		return (slope*(voltage_mV - pH_mid_cal)+mid_ph_solution);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fb f882 	bl	80004bc <__aeabi_f2d>
 80053b8:	4b11      	ldr	r3, [pc, #68]	; (8005400 <convert_ph+0x138>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fa ff1d 	bl	80001fc <__aeabi_dsub>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4610      	mov	r0, r2
 80053c8:	4619      	mov	r1, r3
 80053ca:	4b11      	ldr	r3, [pc, #68]	; (8005410 <convert_ph+0x148>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fb f8cc 	bl	800056c <__aeabi_dmul>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4610      	mov	r0, r2
 80053da:	4619      	mov	r1, r3
 80053dc:	4b09      	ldr	r3, [pc, #36]	; (8005404 <convert_ph+0x13c>)
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	f7fa ff0d 	bl	8000200 <__adddf3>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	e003      	b.n	80053f4 <convert_ph+0x12c>
	}
	return 0;
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
}
 80053f4:	4610      	mov	r0, r2
 80053f6:	4619      	mov	r1, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bdb0      	pop	{r4, r5, r7, pc}
 80053fe:	bf00      	nop
 8005400:	200001e0 	.word	0x200001e0
 8005404:	200001f8 	.word	0x200001f8
 8005408:	200001f0 	.word	0x200001f0
 800540c:	200001d8 	.word	0x200001d8
 8005410:	20007918 	.word	0x20007918
 8005414:	20000200 	.word	0x20000200
 8005418:	200001e8 	.word	0x200001e8
 800541c:	00000000 	.word	0x00000000

08005420 <calc_dose_steps>:
//extern TIM_HandleTypeDef step_timer;


double steps = 0;
int calc_dose_steps(double miliLiters)	// takes a dose in mls and returns the number of steps for that volume
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	e9c7 0100 	strd	r0, r1, [r7]
	if	   (miliLiters > 0 && miliLiters <= 1)	steps = (1/0.221)*(miliLiters+0.2012)*(1745);
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005436:	f7fb fb29 	bl	8000a8c <__aeabi_dcmpgt>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d028      	beq.n	8005492 <calc_dose_steps+0x72>
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	4bbe      	ldr	r3, [pc, #760]	; (8005740 <calc_dose_steps+0x320>)
 8005446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800544a:	f7fb fb0b 	bl	8000a64 <__aeabi_dcmple>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01e      	beq.n	8005492 <calc_dose_steps+0x72>
 8005454:	a3ae      	add	r3, pc, #696	; (adr r3, 8005710 <calc_dose_steps+0x2f0>)
 8005456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800545e:	f7fa fecf 	bl	8000200 <__adddf3>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4610      	mov	r0, r2
 8005468:	4619      	mov	r1, r3
 800546a:	a3ab      	add	r3, pc, #684	; (adr r3, 8005718 <calc_dose_steps+0x2f8>)
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f7fb f87c 	bl	800056c <__aeabi_dmul>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4610      	mov	r0, r2
 800547a:	4619      	mov	r1, r3
 800547c:	a3a8      	add	r3, pc, #672	; (adr r3, 8005720 <calc_dose_steps+0x300>)
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	f7fb f873 	bl	800056c <__aeabi_dmul>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	49ae      	ldr	r1, [pc, #696]	; (8005744 <calc_dose_steps+0x324>)
 800548c:	e9c1 2300 	strd	r2, r3, [r1]
 8005490:	e131      	b.n	80056f6 <calc_dose_steps+0x2d6>
	else if(miliLiters > 1 && miliLiters <= 2)	steps = (1/0.221)*(miliLiters+0.2012)*(1790);
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	4baa      	ldr	r3, [pc, #680]	; (8005740 <calc_dose_steps+0x320>)
 8005498:	e9d7 0100 	ldrd	r0, r1, [r7]
 800549c:	f7fb faf6 	bl	8000a8c <__aeabi_dcmpgt>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d029      	beq.n	80054fa <calc_dose_steps+0xda>
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054b2:	f7fb fad7 	bl	8000a64 <__aeabi_dcmple>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01e      	beq.n	80054fa <calc_dose_steps+0xda>
 80054bc:	a394      	add	r3, pc, #592	; (adr r3, 8005710 <calc_dose_steps+0x2f0>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054c6:	f7fa fe9b 	bl	8000200 <__adddf3>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	a391      	add	r3, pc, #580	; (adr r3, 8005718 <calc_dose_steps+0x2f8>)
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f7fb f848 	bl	800056c <__aeabi_dmul>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4610      	mov	r0, r2
 80054e2:	4619      	mov	r1, r3
 80054e4:	a390      	add	r3, pc, #576	; (adr r3, 8005728 <calc_dose_steps+0x308>)
 80054e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ea:	f7fb f83f 	bl	800056c <__aeabi_dmul>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4994      	ldr	r1, [pc, #592]	; (8005744 <calc_dose_steps+0x324>)
 80054f4:	e9c1 2300 	strd	r2, r3, [r1]
 80054f8:	e0fd      	b.n	80056f6 <calc_dose_steps+0x2d6>
	else if(miliLiters > 2 && miliLiters <= 3)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005502:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005506:	f7fb fac1 	bl	8000a8c <__aeabi_dcmpgt>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d028      	beq.n	8005562 <calc_dose_steps+0x142>
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	4b8c      	ldr	r3, [pc, #560]	; (8005748 <calc_dose_steps+0x328>)
 8005516:	e9d7 0100 	ldrd	r0, r1, [r7]
 800551a:	f7fb faa3 	bl	8000a64 <__aeabi_dcmple>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01e      	beq.n	8005562 <calc_dose_steps+0x142>
 8005524:	a37a      	add	r3, pc, #488	; (adr r3, 8005710 <calc_dose_steps+0x2f0>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800552e:	f7fa fe67 	bl	8000200 <__adddf3>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4610      	mov	r0, r2
 8005538:	4619      	mov	r1, r3
 800553a:	a377      	add	r3, pc, #476	; (adr r3, 8005718 <calc_dose_steps+0x2f8>)
 800553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005540:	f7fb f814 	bl	800056c <__aeabi_dmul>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4610      	mov	r0, r2
 800554a:	4619      	mov	r1, r3
 800554c:	a378      	add	r3, pc, #480	; (adr r3, 8005730 <calc_dose_steps+0x310>)
 800554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005552:	f7fb f80b 	bl	800056c <__aeabi_dmul>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	497a      	ldr	r1, [pc, #488]	; (8005744 <calc_dose_steps+0x324>)
 800555c:	e9c1 2300 	strd	r2, r3, [r1]
 8005560:	e0c9      	b.n	80056f6 <calc_dose_steps+0x2d6>
	else if(miliLiters > 3 && miliLiters <= 4)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	4b78      	ldr	r3, [pc, #480]	; (8005748 <calc_dose_steps+0x328>)
 8005568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800556c:	f7fb fa8e 	bl	8000a8c <__aeabi_dcmpgt>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d028      	beq.n	80055c8 <calc_dose_steps+0x1a8>
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	4b74      	ldr	r3, [pc, #464]	; (800574c <calc_dose_steps+0x32c>)
 800557c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005580:	f7fb fa70 	bl	8000a64 <__aeabi_dcmple>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01e      	beq.n	80055c8 <calc_dose_steps+0x1a8>
 800558a:	a361      	add	r3, pc, #388	; (adr r3, 8005710 <calc_dose_steps+0x2f0>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005594:	f7fa fe34 	bl	8000200 <__adddf3>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4610      	mov	r0, r2
 800559e:	4619      	mov	r1, r3
 80055a0:	a35d      	add	r3, pc, #372	; (adr r3, 8005718 <calc_dose_steps+0x2f8>)
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f7fa ffe1 	bl	800056c <__aeabi_dmul>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4610      	mov	r0, r2
 80055b0:	4619      	mov	r1, r3
 80055b2:	a35f      	add	r3, pc, #380	; (adr r3, 8005730 <calc_dose_steps+0x310>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f7fa ffd8 	bl	800056c <__aeabi_dmul>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4960      	ldr	r1, [pc, #384]	; (8005744 <calc_dose_steps+0x324>)
 80055c2:	e9c1 2300 	strd	r2, r3, [r1]
 80055c6:	e096      	b.n	80056f6 <calc_dose_steps+0x2d6>
	else if(miliLiters > 4 && miliLiters <= 5)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	4b5f      	ldr	r3, [pc, #380]	; (800574c <calc_dose_steps+0x32c>)
 80055ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055d2:	f7fb fa5b 	bl	8000a8c <__aeabi_dcmpgt>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d028      	beq.n	800562e <calc_dose_steps+0x20e>
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	4b5b      	ldr	r3, [pc, #364]	; (8005750 <calc_dose_steps+0x330>)
 80055e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055e6:	f7fb fa3d 	bl	8000a64 <__aeabi_dcmple>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01e      	beq.n	800562e <calc_dose_steps+0x20e>
 80055f0:	a347      	add	r3, pc, #284	; (adr r3, 8005710 <calc_dose_steps+0x2f0>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055fa:	f7fa fe01 	bl	8000200 <__adddf3>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4610      	mov	r0, r2
 8005604:	4619      	mov	r1, r3
 8005606:	a344      	add	r3, pc, #272	; (adr r3, 8005718 <calc_dose_steps+0x2f8>)
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f7fa ffae 	bl	800056c <__aeabi_dmul>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4610      	mov	r0, r2
 8005616:	4619      	mov	r1, r3
 8005618:	a345      	add	r3, pc, #276	; (adr r3, 8005730 <calc_dose_steps+0x310>)
 800561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561e:	f7fa ffa5 	bl	800056c <__aeabi_dmul>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4947      	ldr	r1, [pc, #284]	; (8005744 <calc_dose_steps+0x324>)
 8005628:	e9c1 2300 	strd	r2, r3, [r1]
 800562c:	e063      	b.n	80056f6 <calc_dose_steps+0x2d6>
	else if(miliLiters > 5 && miliLiters <= 30) steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	4b47      	ldr	r3, [pc, #284]	; (8005750 <calc_dose_steps+0x330>)
 8005634:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005638:	f7fb fa28 	bl	8000a8c <__aeabi_dcmpgt>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d028      	beq.n	8005694 <calc_dose_steps+0x274>
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	4b43      	ldr	r3, [pc, #268]	; (8005754 <calc_dose_steps+0x334>)
 8005648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800564c:	f7fb fa0a 	bl	8000a64 <__aeabi_dcmple>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d01e      	beq.n	8005694 <calc_dose_steps+0x274>
 8005656:	a32e      	add	r3, pc, #184	; (adr r3, 8005710 <calc_dose_steps+0x2f0>)
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005660:	f7fa fdce 	bl	8000200 <__adddf3>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4610      	mov	r0, r2
 800566a:	4619      	mov	r1, r3
 800566c:	a32a      	add	r3, pc, #168	; (adr r3, 8005718 <calc_dose_steps+0x2f8>)
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	f7fa ff7b 	bl	800056c <__aeabi_dmul>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4610      	mov	r0, r2
 800567c:	4619      	mov	r1, r3
 800567e:	a32c      	add	r3, pc, #176	; (adr r3, 8005730 <calc_dose_steps+0x310>)
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f7fa ff72 	bl	800056c <__aeabi_dmul>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	492d      	ldr	r1, [pc, #180]	; (8005744 <calc_dose_steps+0x324>)
 800568e:	e9c1 2300 	strd	r2, r3, [r1]
 8005692:	e030      	b.n	80056f6 <calc_dose_steps+0x2d6>
	else if(miliLiters == 0) steps = 0;
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056a0:	f7fb f9cc 	bl	8000a3c <__aeabi_dcmpeq>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <calc_dose_steps+0x29a>
 80056aa:	4926      	ldr	r1, [pc, #152]	; (8005744 <calc_dose_steps+0x324>)
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	e9c1 2300 	strd	r2, r3, [r1]
 80056b8:	e01d      	b.n	80056f6 <calc_dose_steps+0x2d6>
	else steps = (1/0.221)*(miliLiters+0.2012)*(1915);
 80056ba:	a315      	add	r3, pc, #84	; (adr r3, 8005710 <calc_dose_steps+0x2f0>)
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056c4:	f7fa fd9c 	bl	8000200 <__adddf3>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4610      	mov	r0, r2
 80056ce:	4619      	mov	r1, r3
 80056d0:	a311      	add	r3, pc, #68	; (adr r3, 8005718 <calc_dose_steps+0x2f8>)
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f7fa ff49 	bl	800056c <__aeabi_dmul>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4610      	mov	r0, r2
 80056e0:	4619      	mov	r1, r3
 80056e2:	a315      	add	r3, pc, #84	; (adr r3, 8005738 <calc_dose_steps+0x318>)
 80056e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e8:	f7fa ff40 	bl	800056c <__aeabi_dmul>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4914      	ldr	r1, [pc, #80]	; (8005744 <calc_dose_steps+0x324>)
 80056f2:	e9c1 2300 	strd	r2, r3, [r1]
	return (int)steps;
 80056f6:	4b13      	ldr	r3, [pc, #76]	; (8005744 <calc_dose_steps+0x324>)
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	4610      	mov	r0, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	f7fb f9e4 	bl	8000acc <__aeabi_d2iz>
 8005704:	4603      	mov	r3, r0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	edfa43fe 	.word	0xedfa43fe
 8005714:	3fc9c0eb 	.word	0x3fc9c0eb
 8005718:	f2197bf2 	.word	0xf2197bf2
 800571c:	4012197b 	.word	0x4012197b
 8005720:	00000000 	.word	0x00000000
 8005724:	409b4400 	.word	0x409b4400
 8005728:	00000000 	.word	0x00000000
 800572c:	409bf800 	.word	0x409bf800
 8005730:	00000000 	.word	0x00000000
 8005734:	409ef000 	.word	0x409ef000
 8005738:	00000000 	.word	0x00000000
 800573c:	409dec00 	.word	0x409dec00
 8005740:	3ff00000 	.word	0x3ff00000
 8005744:	20007920 	.word	0x20007920
 8005748:	40080000 	.word	0x40080000
 800574c:	40100000 	.word	0x40100000
 8005750:	40140000 	.word	0x40140000
 8005754:	403e0000 	.word	0x403e0000

08005758 <disablePumps>:

void disablePumps()	// disable all pumps
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_SET);
 800575c:	2201      	movs	r2, #1
 800575e:	2180      	movs	r1, #128	; 0x80
 8005760:	4807      	ldr	r0, [pc, #28]	; (8005780 <disablePumps+0x28>)
 8005762:	f002 fac2 	bl	8007cea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_SET);
 8005766:	2201      	movs	r2, #1
 8005768:	2140      	movs	r1, #64	; 0x40
 800576a:	4805      	ldr	r0, [pc, #20]	; (8005780 <disablePumps+0x28>)
 800576c:	f002 fabd 	bl	8007cea <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_SET);
 8005770:	2201      	movs	r2, #1
 8005772:	2120      	movs	r1, #32
 8005774:	4802      	ldr	r0, [pc, #8]	; (8005780 <disablePumps+0x28>)
 8005776:	f002 fab8 	bl	8007cea <HAL_GPIO_WritePin>

}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000

08005784 <enablePumps>:

void enablePumps(int nutrient_steps, int ph_up_steps, int ph_down_steps)	// enable only the pumps that are going to dose
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
	if(nutrient_steps>0)HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_RESET);		// enable nutrient pump
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	dd04      	ble.n	80057a0 <enablePumps+0x1c>
 8005796:	2200      	movs	r2, #0
 8005798:	2180      	movs	r1, #128	; 0x80
 800579a:	480b      	ldr	r0, [pc, #44]	; (80057c8 <enablePumps+0x44>)
 800579c:	f002 faa5 	bl	8007cea <HAL_GPIO_WritePin>
	if(ph_down_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_RESET);			// enable ph down pump
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	dd04      	ble.n	80057b0 <enablePumps+0x2c>
 80057a6:	2200      	movs	r2, #0
 80057a8:	2140      	movs	r1, #64	; 0x40
 80057aa:	4807      	ldr	r0, [pc, #28]	; (80057c8 <enablePumps+0x44>)
 80057ac:	f002 fa9d 	bl	8007cea <HAL_GPIO_WritePin>
	if(ph_up_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_RESET);			// enable ph up pump
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	dd04      	ble.n	80057c0 <enablePumps+0x3c>
 80057b6:	2200      	movs	r2, #0
 80057b8:	2120      	movs	r1, #32
 80057ba:	4803      	ldr	r0, [pc, #12]	; (80057c8 <enablePumps+0x44>)
 80057bc:	f002 fa95 	bl	8007cea <HAL_GPIO_WritePin>
}
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40021000 	.word	0x40021000

080057cc <step>:

void step(int nutrient_steps, int ph_up_steps, int ph_down_steps)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
	 DWT_Delay_Init();
 80057d8:	f000 fd82 	bl	80062e0 <DWT_Delay_Init>

	int most_steps = nutrient_steps;										// find the largest dose in steps. Will be used in step loop
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	617b      	str	r3, [r7, #20]
	if(ph_up_steps>most_steps) most_steps 	= ph_up_steps;
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	dd01      	ble.n	80057ec <step+0x20>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	617b      	str	r3, [r7, #20]
	if(ph_down_steps>most_steps) most_steps = ph_down_steps;
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	dd01      	ble.n	80057f8 <step+0x2c>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	617b      	str	r3, [r7, #20]
	enablePumps(nutrient_steps,ph_up_steps,ph_down_steps);					// enable only the pumps that are going to dose
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7ff ffc1 	bl	8005784 <enablePumps>

	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8005802:	2300      	movs	r3, #0
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	e038      	b.n	800587a <step+0xae>
	{
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	429a      	cmp	r2, r3
 800580e:	da03      	bge.n	8005818 <step+0x4c>
 8005810:	2110      	movs	r1, #16
 8005812:	481f      	ldr	r0, [pc, #124]	; (8005890 <step+0xc4>)
 8005814:	f002 fa81 	bl	8007d1a <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	429a      	cmp	r2, r3
 800581e:	da03      	bge.n	8005828 <step+0x5c>
 8005820:	2104      	movs	r1, #4
 8005822:	481b      	ldr	r0, [pc, #108]	; (8005890 <step+0xc4>)
 8005824:	f002 fa79 	bl	8007d1a <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	da03      	bge.n	8005838 <step+0x6c>
 8005830:	2108      	movs	r1, #8
 8005832:	4817      	ldr	r0, [pc, #92]	; (8005890 <step+0xc4>)
 8005834:	f002 fa71 	bl	8007d1a <HAL_GPIO_TogglePin>
		 DWT_Delay_us(40);
 8005838:	2028      	movs	r0, #40	; 0x28
 800583a:	f000 fd81 	bl	8006340 <DWT_Delay_us>
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	429a      	cmp	r2, r3
 8005844:	da03      	bge.n	800584e <step+0x82>
 8005846:	2110      	movs	r1, #16
 8005848:	4811      	ldr	r0, [pc, #68]	; (8005890 <step+0xc4>)
 800584a:	f002 fa66 	bl	8007d1a <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	429a      	cmp	r2, r3
 8005854:	da03      	bge.n	800585e <step+0x92>
 8005856:	2104      	movs	r1, #4
 8005858:	480d      	ldr	r0, [pc, #52]	; (8005890 <step+0xc4>)
 800585a:	f002 fa5e 	bl	8007d1a <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	429a      	cmp	r2, r3
 8005864:	da03      	bge.n	800586e <step+0xa2>
 8005866:	2108      	movs	r1, #8
 8005868:	4809      	ldr	r0, [pc, #36]	; (8005890 <step+0xc4>)
 800586a:	f002 fa56 	bl	8007d1a <HAL_GPIO_TogglePin>
		 DWT_Delay_us(40);
 800586e:	2028      	movs	r0, #40	; 0x28
 8005870:	f000 fd66 	bl	8006340 <DWT_Delay_us>
	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	3301      	adds	r3, #1
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	429a      	cmp	r2, r3
 8005880:	dbc2      	blt.n	8005808 <step+0x3c>
	}
	disablePumps();
 8005882:	f7ff ff69 	bl	8005758 <disablePumps>
}
 8005886:	bf00      	nop
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40021000 	.word	0x40021000

08005894 <readWaterTemp>:
uint16_t TEMP;
double Temperature = 0;
double Humidity = 0;

double readWaterTemp(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0

	taskENTER_CRITICAL();
 8005898:	f00f feb0 	bl	80155fc <vPortEnterCritical>
	{

	 DWT_Delay_Init();
 800589c:	f000 fd20 	bl	80062e0 <DWT_Delay_Init>

	 //Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
	 HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 1);
 80058a0:	2201      	movs	r2, #1
 80058a2:	2104      	movs	r1, #4
 80058a4:	482a      	ldr	r0, [pc, #168]	; (8005950 <readWaterTemp+0xbc>)
 80058a6:	f002 fa20 	bl	8007cea <HAL_GPIO_WritePin>
	 DWT_Delay_us(100);
 80058aa:	2064      	movs	r0, #100	; 0x64
 80058ac:	f000 fd48 	bl	8006340 <DWT_Delay_us>
	 Presence = DS18B20_Start();
 80058b0:	f000 fd6e 	bl	8006390 <DS18B20_Start>
 80058b4:	4603      	mov	r3, r0
 80058b6:	461a      	mov	r2, r3
 80058b8:	4b26      	ldr	r3, [pc, #152]	; (8005954 <readWaterTemp+0xc0>)
 80058ba:	701a      	strb	r2, [r3, #0]

	 DWT_Delay_us (300);
 80058bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80058c0:	f000 fd3e 	bl	8006340 <DWT_Delay_us>
	 DS18B20_Write (0xCC);  // skip ROM
 80058c4:	20cc      	movs	r0, #204	; 0xcc
 80058c6:	f000 fd93 	bl	80063f0 <DS18B20_Write>
	 DS18B20_Write (0x44);  // convert t
 80058ca:	2044      	movs	r0, #68	; 0x44
 80058cc:	f000 fd90 	bl	80063f0 <DS18B20_Write>

	 Presence = DS18B20_Start();
 80058d0:	f000 fd5e 	bl	8006390 <DS18B20_Start>
 80058d4:	4603      	mov	r3, r0
 80058d6:	461a      	mov	r2, r3
 80058d8:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <readWaterTemp+0xc0>)
 80058da:	701a      	strb	r2, [r3, #0]
	 DWT_Delay_us (300);
 80058dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80058e0:	f000 fd2e 	bl	8006340 <DWT_Delay_us>
	 DS18B20_Write (0xCC);  // skip ROM
 80058e4:	20cc      	movs	r0, #204	; 0xcc
 80058e6:	f000 fd83 	bl	80063f0 <DS18B20_Write>
	 DS18B20_Write (0xBE);  // Read Scratch-pad
 80058ea:	20be      	movs	r0, #190	; 0xbe
 80058ec:	f000 fd80 	bl	80063f0 <DS18B20_Write>

	 Temp_byte1 = DS18B20_Read();
 80058f0:	f000 fdc4 	bl	800647c <DS18B20_Read>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	4b17      	ldr	r3, [pc, #92]	; (8005958 <readWaterTemp+0xc4>)
 80058fa:	701a      	strb	r2, [r3, #0]
	 Temp_byte2 = DS18B20_Read();
 80058fc:	f000 fdbe 	bl	800647c <DS18B20_Read>
 8005900:	4603      	mov	r3, r0
 8005902:	461a      	mov	r2, r3
 8005904:	4b15      	ldr	r3, [pc, #84]	; (800595c <readWaterTemp+0xc8>)
 8005906:	701a      	strb	r2, [r3, #0]
	 TEMP = (Temp_byte2<<8)|Temp_byte1;
 8005908:	4b14      	ldr	r3, [pc, #80]	; (800595c <readWaterTemp+0xc8>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	b21a      	sxth	r2, r3
 8005910:	4b11      	ldr	r3, [pc, #68]	; (8005958 <readWaterTemp+0xc4>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	b21b      	sxth	r3, r3
 8005916:	4313      	orrs	r3, r2
 8005918:	b21b      	sxth	r3, r3
 800591a:	b29a      	uxth	r2, r3
 800591c:	4b10      	ldr	r3, [pc, #64]	; (8005960 <readWaterTemp+0xcc>)
 800591e:	801a      	strh	r2, [r3, #0]
	 Temperature = (double)TEMP/16;
 8005920:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <readWaterTemp+0xcc>)
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f7fa fda7 	bl	8000478 <__aeabi_ui2d>
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <readWaterTemp+0xd0>)
 8005930:	f7fa ff46 	bl	80007c0 <__aeabi_ddiv>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	490b      	ldr	r1, [pc, #44]	; (8005968 <readWaterTemp+0xd4>)
 800593a:	e9c1 2300 	strd	r2, r3, [r1]
	}
	taskEXIT_CRITICAL();
 800593e:	f00f fe8d 	bl	801565c <vPortExitCritical>

	 return Temperature;
 8005942:	4b09      	ldr	r3, [pc, #36]	; (8005968 <readWaterTemp+0xd4>)
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8005948:	4610      	mov	r0, r2
 800594a:	4619      	mov	r1, r3
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40020400 	.word	0x40020400
 8005954:	20007928 	.word	0x20007928
 8005958:	20010c72 	.word	0x20010c72
 800595c:	20010c80 	.word	0x20010c80
 8005960:	20010c70 	.word	0x20010c70
 8005964:	40300000 	.word	0x40300000
 8005968:	20007930 	.word	0x20007930
 800596c:	00000000 	.word	0x00000000

08005970 <readWaterTDS>:
double TDS_voltage = 0,TDS_value = 0,temperature = 25,compensationCoefficient = 0,compensationVolatge = 0;
int TDS_index = 0;
char nutrient_buffer_ready = 'n';

double readWaterTDS() // Get nutrient level
{
 8005970:	b5b0      	push	{r4, r5, r7, lr}
 8005972:	af00      	add	r7, sp, #0

	TDS_voltage = getMedianNum(TDS_computation_buffer,80)*(double)0.000805664; 																					 // read the analog value more stable by averaging and convert to voltage value
 8005974:	2150      	movs	r1, #80	; 0x50
 8005976:	4856      	ldr	r0, [pc, #344]	; (8005ad0 <readWaterTDS+0x160>)
 8005978:	f7fb fcb4 	bl	80012e4 <getMedianNum>
 800597c:	4603      	mov	r3, r0
 800597e:	4618      	mov	r0, r3
 8005980:	f7fa fd8a 	bl	8000498 <__aeabi_i2d>
 8005984:	a348      	add	r3, pc, #288	; (adr r3, 8005aa8 <readWaterTDS+0x138>)
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f7fa fdef 	bl	800056c <__aeabi_dmul>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4950      	ldr	r1, [pc, #320]	; (8005ad4 <readWaterTDS+0x164>)
 8005994:	e9c1 2300 	strd	r2, r3, [r1]
	compensationCoefficient=1.0+0.02*(water_temp-25.0);   																								    		 //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 8005998:	4b4f      	ldr	r3, [pc, #316]	; (8005ad8 <readWaterTDS+0x168>)
 800599a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	4b4e      	ldr	r3, [pc, #312]	; (8005adc <readWaterTDS+0x16c>)
 80059a4:	f7fa fc2a 	bl	80001fc <__aeabi_dsub>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4610      	mov	r0, r2
 80059ae:	4619      	mov	r1, r3
 80059b0:	a33f      	add	r3, pc, #252	; (adr r3, 8005ab0 <readWaterTDS+0x140>)
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f7fa fdd9 	bl	800056c <__aeabi_dmul>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4610      	mov	r0, r2
 80059c0:	4619      	mov	r1, r3
 80059c2:	f04f 0200 	mov.w	r2, #0
 80059c6:	4b46      	ldr	r3, [pc, #280]	; (8005ae0 <readWaterTDS+0x170>)
 80059c8:	f7fa fc1a 	bl	8000200 <__adddf3>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4944      	ldr	r1, [pc, #272]	; (8005ae4 <readWaterTDS+0x174>)
 80059d2:	e9c1 2300 	strd	r2, r3, [r1]
	compensationVolatge=TDS_voltage/compensationCoefficient;  																									 //temperature compensation
 80059d6:	4b3f      	ldr	r3, [pc, #252]	; (8005ad4 <readWaterTDS+0x164>)
 80059d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059dc:	4b41      	ldr	r3, [pc, #260]	; (8005ae4 <readWaterTDS+0x174>)
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	f7fa feed 	bl	80007c0 <__aeabi_ddiv>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	493f      	ldr	r1, [pc, #252]	; (8005ae8 <readWaterTDS+0x178>)
 80059ec:	e9c1 2300 	strd	r2, r3, [r1]
	TDS_value=(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds
 80059f0:	4b3d      	ldr	r3, [pc, #244]	; (8005ae8 <readWaterTDS+0x178>)
 80059f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059f6:	a330      	add	r3, pc, #192	; (adr r3, 8005ab8 <readWaterTDS+0x148>)
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	f7fa fdb6 	bl	800056c <__aeabi_dmul>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4610      	mov	r0, r2
 8005a06:	4619      	mov	r1, r3
 8005a08:	4b37      	ldr	r3, [pc, #220]	; (8005ae8 <readWaterTDS+0x178>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f7fa fdad 	bl	800056c <__aeabi_dmul>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4610      	mov	r0, r2
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4b33      	ldr	r3, [pc, #204]	; (8005ae8 <readWaterTDS+0x178>)
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	f7fa fda4 	bl	800056c <__aeabi_dmul>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4614      	mov	r4, r2
 8005a2a:	461d      	mov	r5, r3
 8005a2c:	4b2e      	ldr	r3, [pc, #184]	; (8005ae8 <readWaterTDS+0x178>)
 8005a2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a32:	a323      	add	r3, pc, #140	; (adr r3, 8005ac0 <readWaterTDS+0x150>)
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f7fa fd98 	bl	800056c <__aeabi_dmul>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4610      	mov	r0, r2
 8005a42:	4619      	mov	r1, r3
 8005a44:	4b28      	ldr	r3, [pc, #160]	; (8005ae8 <readWaterTDS+0x178>)
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f7fa fd8f 	bl	800056c <__aeabi_dmul>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4620      	mov	r0, r4
 8005a54:	4629      	mov	r1, r5
 8005a56:	f7fa fbd1 	bl	80001fc <__aeabi_dsub>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4614      	mov	r4, r2
 8005a60:	461d      	mov	r5, r3
 8005a62:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <readWaterTDS+0x178>)
 8005a64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a68:	a317      	add	r3, pc, #92	; (adr r3, 8005ac8 <readWaterTDS+0x158>)
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f7fa fd7d 	bl	800056c <__aeabi_dmul>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4620      	mov	r0, r4
 8005a78:	4629      	mov	r1, r5
 8005a7a:	f7fa fbc1 	bl	8000200 <__adddf3>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4610      	mov	r0, r2
 8005a84:	4619      	mov	r1, r3
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	4b18      	ldr	r3, [pc, #96]	; (8005aec <readWaterTDS+0x17c>)
 8005a8c:	f7fa fd6e 	bl	800056c <__aeabi_dmul>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4916      	ldr	r1, [pc, #88]	; (8005af0 <readWaterTDS+0x180>)
 8005a96:	e9c1 2300 	strd	r2, r3, [r1]
	return TDS_value;
 8005a9a:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <readWaterTDS+0x180>)
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
	return -10; // else if we make it here there is no new sample ready so return -10 to signify we need to check again

}
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	440a4e96 	.word	0x440a4e96
 8005aac:	3f4a6666 	.word	0x3f4a6666
 8005ab0:	47ae147b 	.word	0x47ae147b
 8005ab4:	3f947ae1 	.word	0x3f947ae1
 8005ab8:	a3d70a3d 	.word	0xa3d70a3d
 8005abc:	4060ad70 	.word	0x4060ad70
 8005ac0:	1eb851ec 	.word	0x1eb851ec
 8005ac4:	406ffb85 	.word	0x406ffb85
 8005ac8:	b851eb85 	.word	0xb851eb85
 8005acc:	408acb1e 	.word	0x408acb1e
 8005ad0:	20007948 	.word	0x20007948
 8005ad4:	20007a88 	.word	0x20007a88
 8005ad8:	200027b8 	.word	0x200027b8
 8005adc:	40390000 	.word	0x40390000
 8005ae0:	3ff00000 	.word	0x3ff00000
 8005ae4:	20007a98 	.word	0x20007a98
 8005ae8:	20007aa0 	.word	0x20007aa0
 8005aec:	3fe00000 	.word	0x3fe00000
 8005af0:	20007a90 	.word	0x20007a90

08005af4 <get_nutrient_ph_value>:
int valid_value_pH  = 0;
int valid_value_TDS  = 0;
int j = 0;
void get_nutrient_ph_value()	// gets nutrient and ph values from the ADC and places it in a buffer
{
 8005af4:	b5b0      	push	{r4, r5, r7, lr}
 8005af6:	af00      	add	r7, sp, #0
	valid_value_pH = 0;
 8005af8:	4b48      	ldr	r3, [pc, #288]	; (8005c1c <get_nutrient_ph_value+0x128>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
	valid_value_TDS = 0;
 8005afe:	4b48      	ldr	r3, [pc, #288]	; (8005c20 <get_nutrient_ph_value+0x12c>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
	DMA_TDS_sample_avg = 0;
 8005b04:	4947      	ldr	r1, [pc, #284]	; (8005c24 <get_nutrient_ph_value+0x130>)
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	e9c1 2300 	strd	r2, r3, [r1]
	DMA_pH_sample_avg = 0;
 8005b12:	4945      	ldr	r1, [pc, #276]	; (8005c28 <get_nutrient_ph_value+0x134>)
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	e9c1 2300 	strd	r2, r3, [r1]
	taskENTER_CRITICAL();
 8005b20:	f00f fd6c 	bl	80155fc <vPortEnterCritical>
	{
		for(j = 0; j<80; j++ )
 8005b24:	4b41      	ldr	r3, [pc, #260]	; (8005c2c <get_nutrient_ph_value+0x138>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e049      	b.n	8005bc0 <get_nutrient_ph_value+0xcc>
		{
			if(j%2 == 0 )//&& nutrient_ph_values[j] < 80)
 8005b2c:	4b3f      	ldr	r3, [pc, #252]	; (8005c2c <get_nutrient_ph_value+0x138>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d121      	bne.n	8005b7c <get_nutrient_ph_value+0x88>
			{
				TDS_computation_buffer[valid_value_TDS] = nutrient_ph_values[j];
 8005b38:	4b3c      	ldr	r3, [pc, #240]	; (8005c2c <get_nutrient_ph_value+0x138>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a3c      	ldr	r2, [pc, #240]	; (8005c30 <get_nutrient_ph_value+0x13c>)
 8005b3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b42:	4b37      	ldr	r3, [pc, #220]	; (8005c20 <get_nutrient_ph_value+0x12c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4611      	mov	r1, r2
 8005b48:	4a3a      	ldr	r2, [pc, #232]	; (8005c34 <get_nutrient_ph_value+0x140>)
 8005b4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				DMA_TDS_sample_avg += nutrient_ph_values[j]; // even so get pH
 8005b4e:	4b37      	ldr	r3, [pc, #220]	; (8005c2c <get_nutrient_ph_value+0x138>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a37      	ldr	r2, [pc, #220]	; (8005c30 <get_nutrient_ph_value+0x13c>)
 8005b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fa fc8d 	bl	8000478 <__aeabi_ui2d>
 8005b5e:	4b31      	ldr	r3, [pc, #196]	; (8005c24 <get_nutrient_ph_value+0x130>)
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	f7fa fb4c 	bl	8000200 <__adddf3>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	492d      	ldr	r1, [pc, #180]	; (8005c24 <get_nutrient_ph_value+0x130>)
 8005b6e:	e9c1 2300 	strd	r2, r3, [r1]
				valid_value_TDS++;
 8005b72:	4b2b      	ldr	r3, [pc, #172]	; (8005c20 <get_nutrient_ph_value+0x12c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3301      	adds	r3, #1
 8005b78:	4a29      	ldr	r2, [pc, #164]	; (8005c20 <get_nutrient_ph_value+0x12c>)
 8005b7a:	6013      	str	r3, [r2, #0]
			}
			if(j%2 != 0)
 8005b7c:	4b2b      	ldr	r3, [pc, #172]	; (8005c2c <get_nutrient_ph_value+0x138>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d016      	beq.n	8005bb6 <get_nutrient_ph_value+0xc2>
			{
				DMA_pH_sample_avg += nutrient_ph_values[j];
 8005b88:	4b28      	ldr	r3, [pc, #160]	; (8005c2c <get_nutrient_ph_value+0x138>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a28      	ldr	r2, [pc, #160]	; (8005c30 <get_nutrient_ph_value+0x13c>)
 8005b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fa fc70 	bl	8000478 <__aeabi_ui2d>
 8005b98:	4b23      	ldr	r3, [pc, #140]	; (8005c28 <get_nutrient_ph_value+0x134>)
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	f7fa fb2f 	bl	8000200 <__adddf3>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4920      	ldr	r1, [pc, #128]	; (8005c28 <get_nutrient_ph_value+0x134>)
 8005ba8:	e9c1 2300 	strd	r2, r3, [r1]
				valid_value_pH++;
 8005bac:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <get_nutrient_ph_value+0x128>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	4a1a      	ldr	r2, [pc, #104]	; (8005c1c <get_nutrient_ph_value+0x128>)
 8005bb4:	6013      	str	r3, [r2, #0]
		for(j = 0; j<80; j++ )
 8005bb6:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <get_nutrient_ph_value+0x138>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	4a1b      	ldr	r2, [pc, #108]	; (8005c2c <get_nutrient_ph_value+0x138>)
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <get_nutrient_ph_value+0x138>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b4f      	cmp	r3, #79	; 0x4f
 8005bc6:	ddb1      	ble.n	8005b2c <get_nutrient_ph_value+0x38>
			}

		}

	}
	taskEXIT_CRITICAL();
 8005bc8:	f00f fd48 	bl	801565c <vPortExitCritical>

	DMA_pH_sample_avg = DMA_pH_sample_avg/valid_value_pH;
 8005bcc:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <get_nutrient_ph_value+0x134>)
 8005bce:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <get_nutrient_ph_value+0x128>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fa fc5e 	bl	8000498 <__aeabi_i2d>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4620      	mov	r0, r4
 8005be2:	4629      	mov	r1, r5
 8005be4:	f7fa fdec 	bl	80007c0 <__aeabi_ddiv>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	490e      	ldr	r1, [pc, #56]	; (8005c28 <get_nutrient_ph_value+0x134>)
 8005bee:	e9c1 2300 	strd	r2, r3, [r1]
	DMA_TDS_sample_avg =  DMA_TDS_sample_avg/valid_value_TDS;
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <get_nutrient_ph_value+0x130>)
 8005bf4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005bf8:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <get_nutrient_ph_value+0x12c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fa fc4b 	bl	8000498 <__aeabi_i2d>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4620      	mov	r0, r4
 8005c08:	4629      	mov	r1, r5
 8005c0a:	f7fa fdd9 	bl	80007c0 <__aeabi_ddiv>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	4904      	ldr	r1, [pc, #16]	; (8005c24 <get_nutrient_ph_value+0x130>)
 8005c14:	e9c1 2300 	strd	r2, r3, [r1]

	//nutrient_ph_values[0] = get_ADC_values(1);
//	nutrient_ph_values[1] = get_ADC_values(0);

}
 8005c18:	bf00      	nop
 8005c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c1c:	20007aa8 	.word	0x20007aa8
 8005c20:	20007aac 	.word	0x20007aac
 8005c24:	20007938 	.word	0x20007938
 8005c28:	20007940 	.word	0x20007940
 8005c2c:	20007ab0 	.word	0x20007ab0
 8005c30:	200077a0 	.word	0x200077a0
 8005c34:	20007948 	.word	0x20007948

08005c38 <readPH>:
{

}
double mili_voltage,ph_value = 0;
double readPH()
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0

	mili_voltage = ((DMA_pH_sample_avg/4096.0)*3.3)*1000;
 8005c3c:	4b1c      	ldr	r3, [pc, #112]	; (8005cb0 <readPH+0x78>)
 8005c3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	4b1b      	ldr	r3, [pc, #108]	; (8005cb4 <readPH+0x7c>)
 8005c48:	f7fa fdba 	bl	80007c0 <__aeabi_ddiv>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4610      	mov	r0, r2
 8005c52:	4619      	mov	r1, r3
 8005c54:	a314      	add	r3, pc, #80	; (adr r3, 8005ca8 <readPH+0x70>)
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	f7fa fc87 	bl	800056c <__aeabi_dmul>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4610      	mov	r0, r2
 8005c64:	4619      	mov	r1, r3
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	4b13      	ldr	r3, [pc, #76]	; (8005cb8 <readPH+0x80>)
 8005c6c:	f7fa fc7e 	bl	800056c <__aeabi_dmul>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4911      	ldr	r1, [pc, #68]	; (8005cbc <readPH+0x84>)
 8005c76:	e9c1 2300 	strd	r2, r3, [r1]
	ph_value = convert_ph(mili_voltage);
 8005c7a:	4b10      	ldr	r3, [pc, #64]	; (8005cbc <readPH+0x84>)
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	4610      	mov	r0, r2
 8005c82:	4619      	mov	r1, r3
 8005c84:	f7fa ff6a 	bl	8000b5c <__aeabi_d2f>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff fb1c 	bl	80052c8 <convert_ph>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	490a      	ldr	r1, [pc, #40]	; (8005cc0 <readPH+0x88>)
 8005c96:	e9c1 2300 	strd	r2, r3, [r1]
	return ph_value;
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <readPH+0x88>)
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	66666666 	.word	0x66666666
 8005cac:	400a6666 	.word	0x400a6666
 8005cb0:	20007940 	.word	0x20007940
 8005cb4:	40b00000 	.word	0x40b00000
 8005cb8:	408f4000 	.word	0x408f4000
 8005cbc:	20010c78 	.word	0x20010c78
 8005cc0:	20007ab8 	.word	0x20007ab8

08005cc4 <getSensorValues>:

double TDS_check = 0, pH_check = 0;
int fiveSamples = 0;

void getSensorValues(int delay_enable)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]


	//osThreadSuspend(WaterTempControHandle);

	//done_sampling = 'n';
	get_nutrient_ph_value();
 8005ccc:	f7ff ff12 	bl	8005af4 <get_nutrient_ph_value>


	TDS = readWaterTDS();
 8005cd0:	f7ff fe4e 	bl	8005970 <readWaterTDS>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	490b      	ldr	r1, [pc, #44]	; (8005d08 <getSensorValues+0x44>)
 8005cda:	e9c1 2300 	strd	r2, r3, [r1]
	pH =  readPH();
 8005cde:	f7ff ffab 	bl	8005c38 <readPH>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4909      	ldr	r1, [pc, #36]	; (8005d0c <getSensorValues+0x48>)
 8005ce8:	e9c1 2300 	strd	r2, r3, [r1]
	water_temp = readWaterTemp();
 8005cec:	f7ff fdd2 	bl	8005894 <readWaterTemp>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4906      	ldr	r1, [pc, #24]	; (8005d10 <getSensorValues+0x4c>)
 8005cf6:	e9c1 2300 	strd	r2, r3, [r1]


	new_sample = 'y';
 8005cfa:	4b06      	ldr	r3, [pc, #24]	; (8005d14 <getSensorValues+0x50>)
 8005cfc:	2279      	movs	r2, #121	; 0x79
 8005cfe:	701a      	strb	r2, [r3, #0]
	}*/

	 //osDelay(1000);
	//new_sample = 'y';
	//osThreadResume(WaterTempControHandle);
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	200027a8 	.word	0x200027a8
 8005d0c:	200027b0 	.word	0x200027b0
 8005d10:	200027b8 	.word	0x200027b8
 8005d14:	20000208 	.word	0x20000208

08005d18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d1e:	2300      	movs	r3, #0
 8005d20:	607b      	str	r3, [r7, #4]
 8005d22:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <HAL_MspInit+0x54>)
 8005d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d26:	4a11      	ldr	r2, [pc, #68]	; (8005d6c <HAL_MspInit+0x54>)
 8005d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d2e:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <HAL_MspInit+0x54>)
 8005d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d36:	607b      	str	r3, [r7, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	603b      	str	r3, [r7, #0]
 8005d3e:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <HAL_MspInit+0x54>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	4a0a      	ldr	r2, [pc, #40]	; (8005d6c <HAL_MspInit+0x54>)
 8005d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d48:	6413      	str	r3, [r2, #64]	; 0x40
 8005d4a:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <HAL_MspInit+0x54>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005d56:	2200      	movs	r2, #0
 8005d58:	210f      	movs	r1, #15
 8005d5a:	f06f 0001 	mvn.w	r0, #1
 8005d5e:	f001 fa78 	bl	8007252 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40023800 	.word	0x40023800

08005d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	; 0x28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d78:	f107 0314 	add.w	r3, r7, #20
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	609a      	str	r2, [r3, #8]
 8005d84:	60da      	str	r2, [r3, #12]
 8005d86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a33      	ldr	r2, [pc, #204]	; (8005e5c <HAL_ADC_MspInit+0xec>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d15f      	bne.n	8005e52 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d92:	2300      	movs	r3, #0
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	4b32      	ldr	r3, [pc, #200]	; (8005e60 <HAL_ADC_MspInit+0xf0>)
 8005d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9a:	4a31      	ldr	r2, [pc, #196]	; (8005e60 <HAL_ADC_MspInit+0xf0>)
 8005d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da0:	6453      	str	r3, [r2, #68]	; 0x44
 8005da2:	4b2f      	ldr	r3, [pc, #188]	; (8005e60 <HAL_ADC_MspInit+0xf0>)
 8005da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005daa:	613b      	str	r3, [r7, #16]
 8005dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	4b2b      	ldr	r3, [pc, #172]	; (8005e60 <HAL_ADC_MspInit+0xf0>)
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	4a2a      	ldr	r2, [pc, #168]	; (8005e60 <HAL_ADC_MspInit+0xf0>)
 8005db8:	f043 0301 	orr.w	r3, r3, #1
 8005dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8005dbe:	4b28      	ldr	r3, [pc, #160]	; (8005e60 <HAL_ADC_MspInit+0xf0>)
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005dca:	2330      	movs	r3, #48	; 0x30
 8005dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dd6:	f107 0314 	add.w	r3, r7, #20
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4821      	ldr	r0, [pc, #132]	; (8005e64 <HAL_ADC_MspInit+0xf4>)
 8005dde:	f001 fdcf 	bl	8007980 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005de2:	4b21      	ldr	r3, [pc, #132]	; (8005e68 <HAL_ADC_MspInit+0xf8>)
 8005de4:	4a21      	ldr	r2, [pc, #132]	; (8005e6c <HAL_ADC_MspInit+0xfc>)
 8005de6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005de8:	4b1f      	ldr	r3, [pc, #124]	; (8005e68 <HAL_ADC_MspInit+0xf8>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dee:	4b1e      	ldr	r3, [pc, #120]	; (8005e68 <HAL_ADC_MspInit+0xf8>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005df4:	4b1c      	ldr	r3, [pc, #112]	; (8005e68 <HAL_ADC_MspInit+0xf8>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <HAL_ADC_MspInit+0xf8>)
 8005dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e02:	4b19      	ldr	r3, [pc, #100]	; (8005e68 <HAL_ADC_MspInit+0xf8>)
 8005e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005e0a:	4b17      	ldr	r3, [pc, #92]	; (8005e68 <HAL_ADC_MspInit+0xf8>)
 8005e0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005e12:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <HAL_ADC_MspInit+0xf8>)
 8005e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005e1a:	4b13      	ldr	r3, [pc, #76]	; (8005e68 <HAL_ADC_MspInit+0xf8>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e20:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <HAL_ADC_MspInit+0xf8>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e26:	4810      	ldr	r0, [pc, #64]	; (8005e68 <HAL_ADC_MspInit+0xf8>)
 8005e28:	f001 fa3e 	bl	80072a8 <HAL_DMA_Init>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005e32:	f7fe fcbd 	bl	80047b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a0b      	ldr	r2, [pc, #44]	; (8005e68 <HAL_ADC_MspInit+0xf8>)
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e3c:	4a0a      	ldr	r2, [pc, #40]	; (8005e68 <HAL_ADC_MspInit+0xf8>)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8005e42:	2200      	movs	r2, #0
 8005e44:	2105      	movs	r1, #5
 8005e46:	2012      	movs	r0, #18
 8005e48:	f001 fa03 	bl	8007252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005e4c:	2012      	movs	r0, #18
 8005e4e:	f001 fa1c 	bl	800728a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005e52:	bf00      	nop
 8005e54:	3728      	adds	r7, #40	; 0x28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40012000 	.word	0x40012000
 8005e60:	40023800 	.word	0x40023800
 8005e64:	40020000 	.word	0x40020000
 8005e68:	20010a94 	.word	0x20010a94
 8005e6c:	40026410 	.word	0x40026410

08005e70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a05      	ldr	r2, [pc, #20]	; (8005e94 <HAL_RTC_MspInit+0x24>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d102      	bne.n	8005e88 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <HAL_RTC_MspInit+0x28>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc80      	pop	{r7}
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40002800 	.word	0x40002800
 8005e98:	42470e3c 	.word	0x42470e3c

08005e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a28      	ldr	r2, [pc, #160]	; (8005f4c <HAL_TIM_Base_MspInit+0xb0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10e      	bne.n	8005ecc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <HAL_TIM_Base_MspInit+0xb4>)
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	4a26      	ldr	r2, [pc, #152]	; (8005f50 <HAL_TIM_Base_MspInit+0xb4>)
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ebe:	4b24      	ldr	r3, [pc, #144]	; (8005f50 <HAL_TIM_Base_MspInit+0xb4>)
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8005eca:	e03a      	b.n	8005f42 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a20      	ldr	r2, [pc, #128]	; (8005f54 <HAL_TIM_Base_MspInit+0xb8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d10e      	bne.n	8005ef4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	4b1d      	ldr	r3, [pc, #116]	; (8005f50 <HAL_TIM_Base_MspInit+0xb4>)
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	4a1c      	ldr	r2, [pc, #112]	; (8005f50 <HAL_TIM_Base_MspInit+0xb4>)
 8005ee0:	f043 0304 	orr.w	r3, r3, #4
 8005ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ee6:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <HAL_TIM_Base_MspInit+0xb4>)
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	693b      	ldr	r3, [r7, #16]
}
 8005ef2:	e026      	b.n	8005f42 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <HAL_TIM_Base_MspInit+0xbc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d10e      	bne.n	8005f1c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <HAL_TIM_Base_MspInit+0xb4>)
 8005f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f06:	4a12      	ldr	r2, [pc, #72]	; (8005f50 <HAL_TIM_Base_MspInit+0xb4>)
 8005f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f0e:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <HAL_TIM_Base_MspInit+0xb4>)
 8005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
}
 8005f1a:	e012      	b.n	8005f42 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM12)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0e      	ldr	r2, [pc, #56]	; (8005f5c <HAL_TIM_Base_MspInit+0xc0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d10d      	bne.n	8005f42 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005f26:	2300      	movs	r3, #0
 8005f28:	60bb      	str	r3, [r7, #8]
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <HAL_TIM_Base_MspInit+0xb4>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	4a08      	ldr	r2, [pc, #32]	; (8005f50 <HAL_TIM_Base_MspInit+0xb4>)
 8005f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f34:	6413      	str	r3, [r2, #64]	; 0x40
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <HAL_TIM_Base_MspInit+0xb4>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3e:	60bb      	str	r3, [r7, #8]
 8005f40:	68bb      	ldr	r3, [r7, #8]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40023800 	.word	0x40023800
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40014400 	.word	0x40014400
 8005f5c:	40001800 	.word	0x40001800

08005f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08a      	sub	sp, #40	; 0x28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f68:	f107 0314 	add.w	r3, r7, #20
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	605a      	str	r2, [r3, #4]
 8005f72:	609a      	str	r2, [r3, #8]
 8005f74:	60da      	str	r2, [r3, #12]
 8005f76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a24      	ldr	r2, [pc, #144]	; (8006010 <HAL_TIM_MspPostInit+0xb0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d11f      	bne.n	8005fc2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	4b23      	ldr	r3, [pc, #140]	; (8006014 <HAL_TIM_MspPostInit+0xb4>)
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	4a22      	ldr	r2, [pc, #136]	; (8006014 <HAL_TIM_MspPostInit+0xb4>)
 8005f8c:	f043 0310 	orr.w	r3, r3, #16
 8005f90:	6313      	str	r3, [r2, #48]	; 0x30
 8005f92:	4b20      	ldr	r3, [pc, #128]	; (8006014 <HAL_TIM_MspPostInit+0xb4>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin|system_fan_speed_Pin;
 8005f9e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8005fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fac:	2300      	movs	r3, #0
 8005fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005fb4:	f107 0314 	add.w	r3, r7, #20
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4817      	ldr	r0, [pc, #92]	; (8006018 <HAL_TIM_MspPostInit+0xb8>)
 8005fbc:	f001 fce0 	bl	8007980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8005fc0:	e022      	b.n	8006008 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a15      	ldr	r2, [pc, #84]	; (800601c <HAL_TIM_MspPostInit+0xbc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d11d      	bne.n	8006008 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	4b10      	ldr	r3, [pc, #64]	; (8006014 <HAL_TIM_MspPostInit+0xb4>)
 8005fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd4:	4a0f      	ldr	r2, [pc, #60]	; (8006014 <HAL_TIM_MspPostInit+0xb4>)
 8005fd6:	f043 0320 	orr.w	r3, r3, #32
 8005fda:	6313      	str	r3, [r2, #48]	; 0x30
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	; (8006014 <HAL_TIM_MspPostInit+0xb4>)
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 8005fe8:	2340      	movs	r3, #64	; 0x40
 8005fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fec:	2302      	movs	r3, #2
 8005fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8005ffc:	f107 0314 	add.w	r3, r7, #20
 8006000:	4619      	mov	r1, r3
 8006002:	4807      	ldr	r0, [pc, #28]	; (8006020 <HAL_TIM_MspPostInit+0xc0>)
 8006004:	f001 fcbc 	bl	8007980 <HAL_GPIO_Init>
}
 8006008:	bf00      	nop
 800600a:	3728      	adds	r7, #40	; 0x28
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40010000 	.word	0x40010000
 8006014:	40023800 	.word	0x40023800
 8006018:	40021000 	.word	0x40021000
 800601c:	40014400 	.word	0x40014400
 8006020:	40021400 	.word	0x40021400

08006024 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08c      	sub	sp, #48	; 0x30
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800602c:	2300      	movs	r3, #0
 800602e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006034:	2200      	movs	r2, #0
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	2036      	movs	r0, #54	; 0x36
 800603a:	f001 f90a 	bl	8007252 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800603e:	2036      	movs	r0, #54	; 0x36
 8006040:	f001 f923 	bl	800728a <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	4b1f      	ldr	r3, [pc, #124]	; (80060c8 <HAL_InitTick+0xa4>)
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	4a1e      	ldr	r2, [pc, #120]	; (80060c8 <HAL_InitTick+0xa4>)
 800604e:	f043 0310 	orr.w	r3, r3, #16
 8006052:	6413      	str	r3, [r2, #64]	; 0x40
 8006054:	4b1c      	ldr	r3, [pc, #112]	; (80060c8 <HAL_InitTick+0xa4>)
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006060:	f107 0210 	add.w	r2, r7, #16
 8006064:	f107 0314 	add.w	r3, r7, #20
 8006068:	4611      	mov	r1, r2
 800606a:	4618      	mov	r0, r3
 800606c:	f003 fff2 	bl	800a054 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006070:	f003 ffce 	bl	800a010 <HAL_RCC_GetPCLK1Freq>
 8006074:	4603      	mov	r3, r0
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	4a13      	ldr	r2, [pc, #76]	; (80060cc <HAL_InitTick+0xa8>)
 800607e:	fba2 2303 	umull	r2, r3, r2, r3
 8006082:	0c9b      	lsrs	r3, r3, #18
 8006084:	3b01      	subs	r3, #1
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006088:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <HAL_InitTick+0xac>)
 800608a:	4a12      	ldr	r2, [pc, #72]	; (80060d4 <HAL_InitTick+0xb0>)
 800608c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800608e:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <HAL_InitTick+0xac>)
 8006090:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006094:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006096:	4a0e      	ldr	r2, [pc, #56]	; (80060d0 <HAL_InitTick+0xac>)
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800609c:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <HAL_InitTick+0xac>)
 800609e:	2200      	movs	r2, #0
 80060a0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <HAL_InitTick+0xac>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80060a8:	4809      	ldr	r0, [pc, #36]	; (80060d0 <HAL_InitTick+0xac>)
 80060aa:	f004 fda2 	bl	800abf2 <HAL_TIM_Base_Init>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d104      	bne.n	80060be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80060b4:	4806      	ldr	r0, [pc, #24]	; (80060d0 <HAL_InitTick+0xac>)
 80060b6:	f004 fdeb 	bl	800ac90 <HAL_TIM_Base_Start_IT>
 80060ba:	4603      	mov	r3, r0
 80060bc:	e000      	b.n	80060c0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3730      	adds	r7, #48	; 0x30
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40023800 	.word	0x40023800
 80060cc:	431bde83 	.word	0x431bde83
 80060d0:	20010c84 	.word	0x20010c84
 80060d4:	40001000 	.word	0x40001000

080060d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80060dc:	e7fe      	b.n	80060dc <NMI_Handler+0x4>

080060de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060de:	b480      	push	{r7}
 80060e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060e2:	e7fe      	b.n	80060e2 <HardFault_Handler+0x4>

080060e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060e8:	e7fe      	b.n	80060e8 <MemManage_Handler+0x4>

080060ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060ea:	b480      	push	{r7}
 80060ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80060ee:	e7fe      	b.n	80060ee <BusFault_Handler+0x4>

080060f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060f0:	b480      	push	{r7}
 80060f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060f4:	e7fe      	b.n	80060f4 <UsageFault_Handler+0x4>

080060f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060f6:	b480      	push	{r7}
 80060f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060fa:	bf00      	nop
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bc80      	pop	{r7}
 8006100:	4770      	bx	lr
	...

08006104 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006108:	4802      	ldr	r0, [pc, #8]	; (8006114 <ADC_IRQHandler+0x10>)
 800610a:	f000 fb00 	bl	800670e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800610e:	bf00      	nop
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	2000d9d8 	.word	0x2000d9d8

08006118 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800611c:	4802      	ldr	r0, [pc, #8]	; (8006128 <TIM6_DAC_IRQHandler+0x10>)
 800611e:	f004 ff45 	bl	800afac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006122:	bf00      	nop
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20010c84 	.word	0x20010c84

0800612c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006130:	4802      	ldr	r0, [pc, #8]	; (800613c <DMA2_Stream0_IRQHandler+0x10>)
 8006132:	f001 f9bf 	bl	80074b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006136:	bf00      	nop
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20010a94 	.word	0x20010a94

08006140 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8006144:	4802      	ldr	r0, [pc, #8]	; (8006150 <OTG_FS_IRQHandler+0x10>)
 8006146:	f002 f86b 	bl	8008220 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800614a:	bf00      	nop
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20011554 	.word	0x20011554

08006154 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
	return 1;
 8006158:	2301      	movs	r3, #1
}
 800615a:	4618      	mov	r0, r3
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr

08006162 <_kill>:

int _kill(int pid, int sig)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800616c:	f010 f85e 	bl	801622c <__errno>
 8006170:	4603      	mov	r3, r0
 8006172:	2216      	movs	r2, #22
 8006174:	601a      	str	r2, [r3, #0]
	return -1;
 8006176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <_exit>:

void _exit (int status)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800618a:	f04f 31ff 	mov.w	r1, #4294967295
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff ffe7 	bl	8006162 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006194:	e7fe      	b.n	8006194 <_exit+0x12>

08006196 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b086      	sub	sp, #24
 800619a:	af00      	add	r7, sp, #0
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061a2:	2300      	movs	r3, #0
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	e00a      	b.n	80061be <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80061a8:	f3af 8000 	nop.w
 80061ac:	4601      	mov	r1, r0
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	60ba      	str	r2, [r7, #8]
 80061b4:	b2ca      	uxtb	r2, r1
 80061b6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	3301      	adds	r3, #1
 80061bc:	617b      	str	r3, [r7, #20]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	dbf0      	blt.n	80061a8 <_read+0x12>
	}

return len;
 80061c6:	687b      	ldr	r3, [r7, #4]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061dc:	2300      	movs	r3, #0
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	e009      	b.n	80061f6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	60ba      	str	r2, [r7, #8]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	3301      	adds	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	dbf1      	blt.n	80061e2 <_write+0x12>
	}
	return len;
 80061fe:	687b      	ldr	r3, [r7, #4]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <_close>:

int _close(int file)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
	return -1;
 8006210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006214:	4618      	mov	r0, r3
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr

0800621e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800622e:	605a      	str	r2, [r3, #4]
	return 0;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr

0800623c <_isatty>:

int _isatty(int file)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
	return 1;
 8006244:	2301      	movs	r3, #1
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
	return 0;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	bc80      	pop	{r7}
 8006266:	4770      	bx	lr

08006268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006270:	4a14      	ldr	r2, [pc, #80]	; (80062c4 <_sbrk+0x5c>)
 8006272:	4b15      	ldr	r3, [pc, #84]	; (80062c8 <_sbrk+0x60>)
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800627c:	4b13      	ldr	r3, [pc, #76]	; (80062cc <_sbrk+0x64>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d102      	bne.n	800628a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006284:	4b11      	ldr	r3, [pc, #68]	; (80062cc <_sbrk+0x64>)
 8006286:	4a12      	ldr	r2, [pc, #72]	; (80062d0 <_sbrk+0x68>)
 8006288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800628a:	4b10      	ldr	r3, [pc, #64]	; (80062cc <_sbrk+0x64>)
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	429a      	cmp	r2, r3
 8006296:	d207      	bcs.n	80062a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006298:	f00f ffc8 	bl	801622c <__errno>
 800629c:	4603      	mov	r3, r0
 800629e:	220c      	movs	r2, #12
 80062a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80062a2:	f04f 33ff 	mov.w	r3, #4294967295
 80062a6:	e009      	b.n	80062bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062a8:	4b08      	ldr	r3, [pc, #32]	; (80062cc <_sbrk+0x64>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062ae:	4b07      	ldr	r3, [pc, #28]	; (80062cc <_sbrk+0x64>)
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4413      	add	r3, r2
 80062b6:	4a05      	ldr	r2, [pc, #20]	; (80062cc <_sbrk+0x64>)
 80062b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062ba:	68fb      	ldr	r3, [r7, #12]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	2001c000 	.word	0x2001c000
 80062c8:	00000800 	.word	0x00000800
 80062cc:	20007ac0 	.word	0x20007ac0
 80062d0:	20011868 	.word	0x20011868

080062d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80062d8:	bf00      	nop
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr

080062e0 <DWT_Delay_Init>:
#include "main.h"
#include "sensors.h"
#include "water_temp_driver.h"

uint32_t DWT_Delay_Init(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80062e4:	4b14      	ldr	r3, [pc, #80]	; (8006338 <DWT_Delay_Init+0x58>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4a13      	ldr	r2, [pc, #76]	; (8006338 <DWT_Delay_Init+0x58>)
 80062ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062ee:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80062f0:	4b11      	ldr	r3, [pc, #68]	; (8006338 <DWT_Delay_Init+0x58>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	4a10      	ldr	r2, [pc, #64]	; (8006338 <DWT_Delay_Init+0x58>)
 80062f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062fa:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80062fc:	4b0f      	ldr	r3, [pc, #60]	; (800633c <DWT_Delay_Init+0x5c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0e      	ldr	r2, [pc, #56]	; (800633c <DWT_Delay_Init+0x5c>)
 8006302:	f023 0301 	bic.w	r3, r3, #1
 8006306:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8006308:	4b0c      	ldr	r3, [pc, #48]	; (800633c <DWT_Delay_Init+0x5c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a0b      	ldr	r2, [pc, #44]	; (800633c <DWT_Delay_Init+0x5c>)
 800630e:	f043 0301 	orr.w	r3, r3, #1
 8006312:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8006314:	4b09      	ldr	r3, [pc, #36]	; (800633c <DWT_Delay_Init+0x5c>)
 8006316:	2200      	movs	r2, #0
 8006318:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800631a:	bf00      	nop
    __ASM volatile ("NOP");
 800631c:	bf00      	nop
    __ASM volatile ("NOP");
 800631e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <DWT_Delay_Init+0x5c>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8006328:	2300      	movs	r3, #0
 800632a:	e000      	b.n	800632e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800632c:	2301      	movs	r3, #1
    }
}
 800632e:	4618      	mov	r0, r3
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	e000edf0 	.word	0xe000edf0
 800633c:	e0001000 	.word	0xe0001000

08006340 <DWT_Delay_us>:

 void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8006348:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <DWT_Delay_us+0x48>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 800634e:	f003 fe55 	bl	8009ffc <HAL_RCC_GetHCLKFreq>
 8006352:	4603      	mov	r3, r0
 8006354:	4a0d      	ldr	r2, [pc, #52]	; (800638c <DWT_Delay_us+0x4c>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	0c9b      	lsrs	r3, r3, #18
 800635c:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	fb02 f303 	mul.w	r3, r2, r3
 8006366:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8006368:	bf00      	nop
 800636a:	4b07      	ldr	r3, [pc, #28]	; (8006388 <DWT_Delay_us+0x48>)
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	1ad2      	subs	r2, r2, r3
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	1acb      	subs	r3, r1, r3
 8006378:	429a      	cmp	r2, r3
 800637a:	d3f6      	bcc.n	800636a <DWT_Delay_us+0x2a>
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	e0001000 	.word	0xe0001000
 800638c:	431bde83 	.word	0x431bde83

08006390 <DS18B20_Start>:


uint8_t DS18B20_Start (void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
 800639a:	2104      	movs	r1, #4
 800639c:	4813      	ldr	r0, [pc, #76]	; (80063ec <DS18B20_Start+0x5c>)
 800639e:	f000 f8ab 	bl	80064f8 <Set_Pin_Output>
	HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin low
 80063a2:	2200      	movs	r2, #0
 80063a4:	2104      	movs	r1, #4
 80063a6:	4811      	ldr	r0, [pc, #68]	; (80063ec <DS18B20_Start+0x5c>)
 80063a8:	f001 fc9f 	bl	8007cea <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 80063ac:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80063b0:	f7ff ffc6 	bl	8006340 <DWT_Delay_us>

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);    // set the pin as input
 80063b4:	2104      	movs	r1, #4
 80063b6:	480d      	ldr	r0, [pc, #52]	; (80063ec <DS18B20_Start+0x5c>)
 80063b8:	f000 f8bc 	bl	8006534 <Set_Pin_Input>
	DWT_Delay_us (80);    // delay according to datasheet
 80063bc:	2050      	movs	r0, #80	; 0x50
 80063be:	f7ff ffbf 	bl	8006340 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 80063c2:	2104      	movs	r1, #4
 80063c4:	4809      	ldr	r0, [pc, #36]	; (80063ec <DS18B20_Start+0x5c>)
 80063c6:	f001 fc79 	bl	8007cbc <HAL_GPIO_ReadPin>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d102      	bne.n	80063d6 <DS18B20_Start+0x46>
 80063d0:	2301      	movs	r3, #1
 80063d2:	71fb      	strb	r3, [r7, #7]
 80063d4:	e001      	b.n	80063da <DS18B20_Start+0x4a>
	else Response = -1;
 80063d6:	23ff      	movs	r3, #255	; 0xff
 80063d8:	71fb      	strb	r3, [r7, #7]

	DWT_Delay_us (400); // 480 us delay totally.
 80063da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80063de:	f7ff ffaf 	bl	8006340 <DWT_Delay_us>

	return Response;
 80063e2:	79fb      	ldrb	r3, [r7, #7]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40020400 	.word	0x40020400

080063f0 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4603      	mov	r3, r0
 80063f8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 80063fa:	2104      	movs	r1, #4
 80063fc:	481e      	ldr	r0, [pc, #120]	; (8006478 <DS18B20_Write+0x88>)
 80063fe:	f000 f87b 	bl	80064f8 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	e02e      	b.n	8006466 <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8006408:	79fa      	ldrb	r2, [r7, #7]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	fa42 f303 	asr.w	r3, r2, r3
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d013      	beq.n	8006440 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 8006418:	2104      	movs	r1, #4
 800641a:	4817      	ldr	r0, [pc, #92]	; (8006478 <DS18B20_Write+0x88>)
 800641c:	f000 f86c 	bl	80064f8 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 8006420:	2200      	movs	r2, #0
 8006422:	2104      	movs	r1, #4
 8006424:	4814      	ldr	r0, [pc, #80]	; (8006478 <DS18B20_Write+0x88>)
 8006426:	f001 fc60 	bl	8007cea <HAL_GPIO_WritePin>
			DWT_Delay_us (5);  // wait for 1 us
 800642a:	2005      	movs	r0, #5
 800642c:	f7ff ff88 	bl	8006340 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 8006430:	2104      	movs	r1, #4
 8006432:	4811      	ldr	r0, [pc, #68]	; (8006478 <DS18B20_Write+0x88>)
 8006434:	f000 f87e 	bl	8006534 <Set_Pin_Input>
			DWT_Delay_us (65);  // wait for 60 us
 8006438:	2041      	movs	r0, #65	; 0x41
 800643a:	f7ff ff81 	bl	8006340 <DWT_Delay_us>
 800643e:	e00f      	b.n	8006460 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);
 8006440:	2104      	movs	r1, #4
 8006442:	480d      	ldr	r0, [pc, #52]	; (8006478 <DS18B20_Write+0x88>)
 8006444:	f000 f858 	bl	80064f8 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 8006448:	2200      	movs	r2, #0
 800644a:	2104      	movs	r1, #4
 800644c:	480a      	ldr	r0, [pc, #40]	; (8006478 <DS18B20_Write+0x88>)
 800644e:	f001 fc4c 	bl	8007cea <HAL_GPIO_WritePin>
			DWT_Delay_us (65);  // wait for 60 us
 8006452:	2041      	movs	r0, #65	; 0x41
 8006454:	f7ff ff74 	bl	8006340 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 8006458:	2104      	movs	r1, #4
 800645a:	4807      	ldr	r0, [pc, #28]	; (8006478 <DS18B20_Write+0x88>)
 800645c:	f000 f86a 	bl	8006534 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3301      	adds	r3, #1
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b07      	cmp	r3, #7
 800646a:	ddcd      	ble.n	8006408 <DS18B20_Write+0x18>
		}
	}
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	40020400 	.word	0x40020400

0800647c <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8006482:	2300      	movs	r3, #0
 8006484:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 8006486:	2104      	movs	r1, #4
 8006488:	481a      	ldr	r0, [pc, #104]	; (80064f4 <DS18B20_Read+0x78>)
 800648a:	f000 f853 	bl	8006534 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 800648e:	2300      	movs	r3, #0
 8006490:	603b      	str	r3, [r7, #0]
 8006492:	e026      	b.n	80064e2 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set as output
 8006494:	2104      	movs	r1, #4
 8006496:	4817      	ldr	r0, [pc, #92]	; (80064f4 <DS18B20_Read+0x78>)
 8006498:	f000 f82e 	bl	80064f8 <Set_Pin_Output>

		HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the data pin LOW
 800649c:	2200      	movs	r2, #0
 800649e:	2104      	movs	r1, #4
 80064a0:	4814      	ldr	r0, [pc, #80]	; (80064f4 <DS18B20_Read+0x78>)
 80064a2:	f001 fc22 	bl	8007cea <HAL_GPIO_WritePin>
		DWT_Delay_us (5);  // wait for > 1us
 80064a6:	2005      	movs	r0, #5
 80064a8:	f7ff ff4a 	bl	8006340 <DWT_Delay_us>

		Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 80064ac:	2104      	movs	r1, #4
 80064ae:	4811      	ldr	r0, [pc, #68]	; (80064f4 <DS18B20_Read+0x78>)
 80064b0:	f000 f840 	bl	8006534 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))  // if the pin is HIGH
 80064b4:	2104      	movs	r1, #4
 80064b6:	480f      	ldr	r0, [pc, #60]	; (80064f4 <DS18B20_Read+0x78>)
 80064b8:	f001 fc00 	bl	8007cbc <HAL_GPIO_ReadPin>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d009      	beq.n	80064d6 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 80064c2:	2201      	movs	r2, #1
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	b25a      	sxtb	r2, r3
 80064cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	b25b      	sxtb	r3, r3
 80064d4:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (50);  // wait for 60 us
 80064d6:	2032      	movs	r0, #50	; 0x32
 80064d8:	f7ff ff32 	bl	8006340 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	3301      	adds	r3, #1
 80064e0:	603b      	str	r3, [r7, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b07      	cmp	r3, #7
 80064e6:	ddd5      	ble.n	8006494 <DS18B20_Read+0x18>
	}
	return value;
 80064e8:	79fb      	ldrb	r3, [r7, #7]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	40020400 	.word	0x40020400

080064f8 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006504:	f107 030c 	add.w	r3, r7, #12
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	605a      	str	r2, [r3, #4]
 800650e:	609a      	str	r2, [r3, #8]
 8006510:	60da      	str	r2, [r3, #12]
 8006512:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8006514:	887b      	ldrh	r3, [r7, #2]
 8006516:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006518:	2301      	movs	r3, #1
 800651a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800651c:	2300      	movs	r3, #0
 800651e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8006520:	f107 030c 	add.w	r3, r7, #12
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 fa2a 	bl	8007980 <HAL_GPIO_Init>
}
 800652c:	bf00      	nop
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006540:	f107 030c 	add.w	r3, r7, #12
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	605a      	str	r2, [r3, #4]
 800654a:	609a      	str	r2, [r3, #8]
 800654c:	60da      	str	r2, [r3, #12]
 800654e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8006550:	887b      	ldrh	r3, [r7, #2]
 8006552:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006554:	2300      	movs	r3, #0
 8006556:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006558:	2301      	movs	r3, #1
 800655a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800655c:	f107 030c 	add.w	r3, r7, #12
 8006560:	4619      	mov	r1, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f001 fa0c 	bl	8007980 <HAL_GPIO_Init>
}
 8006568:	bf00      	nop
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006574:	480d      	ldr	r0, [pc, #52]	; (80065ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006576:	490e      	ldr	r1, [pc, #56]	; (80065b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006578:	4a0e      	ldr	r2, [pc, #56]	; (80065b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800657a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800657c:	e002      	b.n	8006584 <LoopCopyDataInit>

0800657e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800657e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006582:	3304      	adds	r3, #4

08006584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006588:	d3f9      	bcc.n	800657e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800658a:	4a0b      	ldr	r2, [pc, #44]	; (80065b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800658c:	4c0b      	ldr	r4, [pc, #44]	; (80065bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800658e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006590:	e001      	b.n	8006596 <LoopFillZerobss>

08006592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006594:	3204      	adds	r2, #4

08006596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006598:	d3fb      	bcc.n	8006592 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800659a:	f7ff fe9b 	bl	80062d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800659e:	f00f ff41 	bl	8016424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065a2:	f7fd fcb3 	bl	8003f0c <main>
  bx  lr
 80065a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80065a8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80065ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80065b0:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 80065b4:	0801b22c 	.word	0x0801b22c
  ldr r2, =_sbss
 80065b8:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 80065bc:	20011868 	.word	0x20011868

080065c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065c0:	e7fe      	b.n	80065c0 <CAN1_RX0_IRQHandler>
	...

080065c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80065c8:	4b0e      	ldr	r3, [pc, #56]	; (8006604 <HAL_Init+0x40>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a0d      	ldr	r2, [pc, #52]	; (8006604 <HAL_Init+0x40>)
 80065ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80065d4:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <HAL_Init+0x40>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a0a      	ldr	r2, [pc, #40]	; (8006604 <HAL_Init+0x40>)
 80065da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065e0:	4b08      	ldr	r3, [pc, #32]	; (8006604 <HAL_Init+0x40>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a07      	ldr	r2, [pc, #28]	; (8006604 <HAL_Init+0x40>)
 80065e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065ec:	2003      	movs	r0, #3
 80065ee:	f000 fe25 	bl	800723c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80065f2:	200f      	movs	r0, #15
 80065f4:	f7ff fd16 	bl	8006024 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80065f8:	f7ff fb8e 	bl	8005d18 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	40023c00 	.word	0x40023c00

08006608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800660c:	4b05      	ldr	r3, [pc, #20]	; (8006624 <HAL_IncTick+0x1c>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	4b05      	ldr	r3, [pc, #20]	; (8006628 <HAL_IncTick+0x20>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4413      	add	r3, r2
 8006618:	4a03      	ldr	r2, [pc, #12]	; (8006628 <HAL_IncTick+0x20>)
 800661a:	6013      	str	r3, [r2, #0]
}
 800661c:	bf00      	nop
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr
 8006624:	20000214 	.word	0x20000214
 8006628:	20010ccc 	.word	0x20010ccc

0800662c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  return uwTick;
 8006630:	4b02      	ldr	r3, [pc, #8]	; (800663c <HAL_GetTick+0x10>)
 8006632:	681b      	ldr	r3, [r3, #0]
}
 8006634:	4618      	mov	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr
 800663c:	20010ccc 	.word	0x20010ccc

08006640 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006648:	f7ff fff0 	bl	800662c <HAL_GetTick>
 800664c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006658:	d005      	beq.n	8006666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800665a:	4b0a      	ldr	r3, [pc, #40]	; (8006684 <HAL_Delay+0x44>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006666:	bf00      	nop
 8006668:	f7ff ffe0 	bl	800662c <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	429a      	cmp	r2, r3
 8006676:	d8f7      	bhi.n	8006668 <HAL_Delay+0x28>
  {
  }
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000214 	.word	0x20000214

08006688 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e033      	b.n	8006706 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff fb62 	bl	8005d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f003 0310 	and.w	r3, r3, #16
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d118      	bne.n	80066f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80066ce:	f023 0302 	bic.w	r3, r3, #2
 80066d2:	f043 0202 	orr.w	r2, r3, #2
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fb72 	bl	8006dc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	f043 0201 	orr.w	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	641a      	str	r2, [r3, #64]	; 0x40
 80066f6:	e001      	b.n	80066fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	2300      	movs	r3, #0
 800671c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b02      	cmp	r3, #2
 800672a:	bf0c      	ite	eq
 800672c:	2301      	moveq	r3, #1
 800672e:	2300      	movne	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b20      	cmp	r3, #32
 8006740:	bf0c      	ite	eq
 8006742:	2301      	moveq	r3, #1
 8006744:	2300      	movne	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d049      	beq.n	80067e4 <HAL_ADC_IRQHandler+0xd6>
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d046      	beq.n	80067e4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b00      	cmp	r3, #0
 8006760:	d105      	bne.n	800676e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d12b      	bne.n	80067d4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006780:	2b00      	cmp	r3, #0
 8006782:	d127      	bne.n	80067d4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800678e:	2b00      	cmp	r3, #0
 8006790:	d006      	beq.n	80067a0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800679c:	2b00      	cmp	r3, #0
 800679e:	d119      	bne.n	80067d4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0220 	bic.w	r2, r2, #32
 80067ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d105      	bne.n	80067d4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067cc:	f043 0201 	orr.w	r2, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7fd ffb5 	bl	8004744 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f06f 0212 	mvn.w	r2, #18
 80067e2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	bf0c      	ite	eq
 80067f2:	2301      	moveq	r3, #1
 80067f4:	2300      	movne	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006804:	2b80      	cmp	r3, #128	; 0x80
 8006806:	bf0c      	ite	eq
 8006808:	2301      	moveq	r3, #1
 800680a:	2300      	movne	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d057      	beq.n	80068c6 <HAL_ADC_IRQHandler+0x1b8>
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d054      	beq.n	80068c6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b00      	cmp	r3, #0
 8006826:	d105      	bne.n	8006834 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d139      	bne.n	80068b6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800684c:	2b00      	cmp	r3, #0
 800684e:	d006      	beq.n	800685e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800685a:	2b00      	cmp	r3, #0
 800685c:	d12b      	bne.n	80068b6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006868:	2b00      	cmp	r3, #0
 800686a:	d124      	bne.n	80068b6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006876:	2b00      	cmp	r3, #0
 8006878:	d11d      	bne.n	80068b6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800687e:	2b00      	cmp	r3, #0
 8006880:	d119      	bne.n	80068b6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006890:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d105      	bne.n	80068b6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	f043 0201 	orr.w	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fc0c 	bl	80070d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 020c 	mvn.w	r2, #12
 80068c4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	bf0c      	ite	eq
 80068d4:	2301      	moveq	r3, #1
 80068d6:	2300      	movne	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b40      	cmp	r3, #64	; 0x40
 80068e8:	bf0c      	ite	eq
 80068ea:	2301      	moveq	r3, #1
 80068ec:	2300      	movne	r3, #0
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d017      	beq.n	8006928 <HAL_ADC_IRQHandler+0x21a>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d014      	beq.n	8006928 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b01      	cmp	r3, #1
 800690a:	d10d      	bne.n	8006928 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f920 	bl	8006b5e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f06f 0201 	mvn.w	r2, #1
 8006926:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b20      	cmp	r3, #32
 8006934:	bf0c      	ite	eq
 8006936:	2301      	moveq	r3, #1
 8006938:	2300      	movne	r3, #0
 800693a:	b2db      	uxtb	r3, r3
 800693c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800694c:	bf0c      	ite	eq
 800694e:	2301      	moveq	r3, #1
 8006950:	2300      	movne	r3, #0
 8006952:	b2db      	uxtb	r3, r3
 8006954:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d015      	beq.n	8006988 <HAL_ADC_IRQHandler+0x27a>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d012      	beq.n	8006988 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006966:	f043 0202 	orr.w	r2, r3, #2
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f06f 0220 	mvn.w	r2, #32
 8006976:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f8f9 	bl	8006b70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f06f 0220 	mvn.w	r2, #32
 8006986:	601a      	str	r2, [r3, #0]
  }
}
 8006988:	bf00      	nop
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d101      	bne.n	80069ae <HAL_ADC_Start_DMA+0x1e>
 80069aa:	2302      	movs	r3, #2
 80069ac:	e0bc      	b.n	8006b28 <HAL_ADC_Start_DMA+0x198>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d018      	beq.n	80069f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0201 	orr.w	r2, r2, #1
 80069d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80069d4:	4b56      	ldr	r3, [pc, #344]	; (8006b30 <HAL_ADC_Start_DMA+0x1a0>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a56      	ldr	r2, [pc, #344]	; (8006b34 <HAL_ADC_Start_DMA+0x1a4>)
 80069da:	fba2 2303 	umull	r2, r3, r2, r3
 80069de:	0c9a      	lsrs	r2, r3, #18
 80069e0:	4613      	mov	r3, r2
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	4413      	add	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 80069e8:	e002      	b.n	80069f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f9      	bne.n	80069ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	f040 8084 	bne.w	8006b0e <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006a0e:	f023 0301 	bic.w	r3, r3, #1
 8006a12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a44:	d106      	bne.n	8006a54 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4a:	f023 0206 	bic.w	r2, r3, #6
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	645a      	str	r2, [r3, #68]	; 0x44
 8006a52:	e002      	b.n	8006a5a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	4a34      	ldr	r2, [pc, #208]	; (8006b38 <HAL_ADC_Start_DMA+0x1a8>)
 8006a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6e:	4a33      	ldr	r2, [pc, #204]	; (8006b3c <HAL_ADC_Start_DMA+0x1ac>)
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a76:	4a32      	ldr	r2, [pc, #200]	; (8006b40 <HAL_ADC_Start_DMA+0x1b0>)
 8006a78:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006a82:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006a92:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aa2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	334c      	adds	r3, #76	; 0x4c
 8006aae:	4619      	mov	r1, r3
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f000 fca6 	bl	8007404 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006ab8:	4b22      	ldr	r3, [pc, #136]	; (8006b44 <HAL_ADC_Start_DMA+0x1b4>)
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f003 031f 	and.w	r3, r3, #31
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10f      	bne.n	8006ae4 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d129      	bne.n	8006b26 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ae0:	609a      	str	r2, [r3, #8]
 8006ae2:	e020      	b.n	8006b26 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a17      	ldr	r2, [pc, #92]	; (8006b48 <HAL_ADC_Start_DMA+0x1b8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d11b      	bne.n	8006b26 <HAL_ADC_Start_DMA+0x196>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d114      	bne.n	8006b26 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006b0a:	609a      	str	r2, [r3, #8]
 8006b0c:	e00b      	b.n	8006b26 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	f043 0210 	orr.w	r2, r3, #16
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1e:	f043 0201 	orr.w	r2, r3, #1
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	2000020c 	.word	0x2000020c
 8006b34:	431bde83 	.word	0x431bde83
 8006b38:	08006fd1 	.word	0x08006fd1
 8006b3c:	0800708b 	.word	0x0800708b
 8006b40:	080070a7 	.word	0x080070a7
 8006b44:	40012300 	.word	0x40012300
 8006b48:	40012000 	.word	0x40012000

08006b4c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr

08006b70 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr
	...

08006b84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_ADC_ConfigChannel+0x1c>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e103      	b.n	8006da8 <HAL_ADC_ConfigChannel+0x224>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b09      	cmp	r3, #9
 8006bae:	d925      	bls.n	8006bfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68d9      	ldr	r1, [r3, #12]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3b1e      	subs	r3, #30
 8006bc6:	2207      	movs	r2, #7
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	43da      	mvns	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	400a      	ands	r2, r1
 8006bd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68d9      	ldr	r1, [r3, #12]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	4618      	mov	r0, r3
 8006be8:	4603      	mov	r3, r0
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	4403      	add	r3, r0
 8006bee:	3b1e      	subs	r3, #30
 8006bf0:	409a      	lsls	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	e022      	b.n	8006c42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6919      	ldr	r1, [r3, #16]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	4413      	add	r3, r2
 8006c10:	2207      	movs	r2, #7
 8006c12:	fa02 f303 	lsl.w	r3, r2, r3
 8006c16:	43da      	mvns	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	400a      	ands	r2, r1
 8006c1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6919      	ldr	r1, [r3, #16]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	4618      	mov	r0, r3
 8006c32:	4603      	mov	r3, r0
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	4403      	add	r3, r0
 8006c38:	409a      	lsls	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b06      	cmp	r3, #6
 8006c48:	d824      	bhi.n	8006c94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	3b05      	subs	r3, #5
 8006c5c:	221f      	movs	r2, #31
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	43da      	mvns	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	400a      	ands	r2, r1
 8006c6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	4618      	mov	r0, r3
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	3b05      	subs	r3, #5
 8006c86:	fa00 f203 	lsl.w	r2, r0, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	635a      	str	r2, [r3, #52]	; 0x34
 8006c92:	e04c      	b.n	8006d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2b0c      	cmp	r3, #12
 8006c9a:	d824      	bhi.n	8006ce6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	3b23      	subs	r3, #35	; 0x23
 8006cae:	221f      	movs	r2, #31
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	43da      	mvns	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	400a      	ands	r2, r1
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	4618      	mov	r0, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	3b23      	subs	r3, #35	; 0x23
 8006cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ce4:	e023      	b.n	8006d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	3b41      	subs	r3, #65	; 0x41
 8006cf8:	221f      	movs	r2, #31
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	43da      	mvns	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	400a      	ands	r2, r1
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	4618      	mov	r0, r3
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	3b41      	subs	r3, #65	; 0x41
 8006d22:	fa00 f203 	lsl.w	r2, r0, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a20      	ldr	r2, [pc, #128]	; (8006db4 <HAL_ADC_ConfigChannel+0x230>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d109      	bne.n	8006d4c <HAL_ADC_ConfigChannel+0x1c8>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b12      	cmp	r3, #18
 8006d3e:	d105      	bne.n	8006d4c <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006d40:	4b1d      	ldr	r3, [pc, #116]	; (8006db8 <HAL_ADC_ConfigChannel+0x234>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	4a1c      	ldr	r2, [pc, #112]	; (8006db8 <HAL_ADC_ConfigChannel+0x234>)
 8006d46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d4a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a18      	ldr	r2, [pc, #96]	; (8006db4 <HAL_ADC_ConfigChannel+0x230>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d123      	bne.n	8006d9e <HAL_ADC_ConfigChannel+0x21a>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b10      	cmp	r3, #16
 8006d5c:	d003      	beq.n	8006d66 <HAL_ADC_ConfigChannel+0x1e2>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b11      	cmp	r3, #17
 8006d64:	d11b      	bne.n	8006d9e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006d66:	4b14      	ldr	r3, [pc, #80]	; (8006db8 <HAL_ADC_ConfigChannel+0x234>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <HAL_ADC_ConfigChannel+0x234>)
 8006d6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d70:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b10      	cmp	r3, #16
 8006d78:	d111      	bne.n	8006d9e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006d7a:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <HAL_ADC_ConfigChannel+0x238>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a10      	ldr	r2, [pc, #64]	; (8006dc0 <HAL_ADC_ConfigChannel+0x23c>)
 8006d80:	fba2 2303 	umull	r2, r3, r2, r3
 8006d84:	0c9a      	lsrs	r2, r3, #18
 8006d86:	4613      	mov	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006d90:	e002      	b.n	8006d98 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1f9      	bne.n	8006d92 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc80      	pop	{r7}
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40012000 	.word	0x40012000
 8006db8:	40012300 	.word	0x40012300
 8006dbc:	2000020c 	.word	0x2000020c
 8006dc0:	431bde83 	.word	0x431bde83

08006dc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006dcc:	4b7e      	ldr	r3, [pc, #504]	; (8006fc8 <ADC_Init+0x204>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	4a7d      	ldr	r2, [pc, #500]	; (8006fc8 <ADC_Init+0x204>)
 8006dd2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006dd6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006dd8:	4b7b      	ldr	r3, [pc, #492]	; (8006fc8 <ADC_Init+0x204>)
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	4979      	ldr	r1, [pc, #484]	; (8006fc8 <ADC_Init+0x204>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006df4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6859      	ldr	r1, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	021a      	lsls	r2, r3, #8
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006e18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6859      	ldr	r1, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6899      	ldr	r1, [r3, #8]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e52:	4a5e      	ldr	r2, [pc, #376]	; (8006fcc <ADC_Init+0x208>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d022      	beq.n	8006e9e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6899      	ldr	r1, [r3, #8]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6899      	ldr	r1, [r3, #8]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	609a      	str	r2, [r3, #8]
 8006e9c:	e00f      	b.n	8006ebe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006eac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ebc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0202 	bic.w	r2, r2, #2
 8006ecc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6899      	ldr	r1, [r3, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	7e1b      	ldrb	r3, [r3, #24]
 8006ed8:	005a      	lsls	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d027      	beq.n	8006f3c <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006efa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006f0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	3b01      	subs	r3, #1
 8006f12:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8006f16:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	fa92 f2a2 	rbit	r2, r2
 8006f1e:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	fab2 f282 	clz	r2, r2
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	fa03 f102 	lsl.w	r1, r3, r2
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	605a      	str	r2, [r3, #4]
 8006f3a:	e007      	b.n	8006f4c <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	051a      	lsls	r2, r3, #20
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006f80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6899      	ldr	r1, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f8e:	025a      	lsls	r2, r3, #9
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6899      	ldr	r1, [r3, #8]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	029a      	lsls	r2, r3, #10
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	609a      	str	r2, [r3, #8]
}
 8006fbc:	bf00      	nop
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40012300 	.word	0x40012300
 8006fcc:	0f000001 	.word	0x0f000001

08006fd0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d13c      	bne.n	8007064 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d12b      	bne.n	800705c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007008:	2b00      	cmp	r3, #0
 800700a:	d127      	bne.n	800705c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007016:	2b00      	cmp	r3, #0
 8007018:	d006      	beq.n	8007028 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007024:	2b00      	cmp	r3, #0
 8007026:	d119      	bne.n	800705c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0220 	bic.w	r2, r2, #32
 8007036:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d105      	bne.n	800705c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	f043 0201 	orr.w	r2, r3, #1
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7fd fb71 	bl	8004744 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007062:	e00e      	b.n	8007082 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	f003 0310 	and.w	r3, r3, #16
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff fd7d 	bl	8006b70 <HAL_ADC_ErrorCallback>
}
 8007076:	e004      	b.n	8007082 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7ff fd57 	bl	8006b4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2240      	movs	r2, #64	; 0x40
 80070b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070be:	f043 0204 	orr.w	r2, r3, #4
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fd52 	bl	8006b70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr
	...

080070e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070f8:	4b0c      	ldr	r3, [pc, #48]	; (800712c <__NVIC_SetPriorityGrouping+0x44>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007104:	4013      	ands	r3, r2
 8007106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800711a:	4a04      	ldr	r2, [pc, #16]	; (800712c <__NVIC_SetPriorityGrouping+0x44>)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	60d3      	str	r3, [r2, #12]
}
 8007120:	bf00      	nop
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	e000ed00 	.word	0xe000ed00

08007130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007134:	4b04      	ldr	r3, [pc, #16]	; (8007148 <__NVIC_GetPriorityGrouping+0x18>)
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	0a1b      	lsrs	r3, r3, #8
 800713a:	f003 0307 	and.w	r3, r3, #7
}
 800713e:	4618      	mov	r0, r3
 8007140:	46bd      	mov	sp, r7
 8007142:	bc80      	pop	{r7}
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	e000ed00 	.word	0xe000ed00

0800714c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715a:	2b00      	cmp	r3, #0
 800715c:	db0b      	blt.n	8007176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	f003 021f 	and.w	r2, r3, #31
 8007164:	4906      	ldr	r1, [pc, #24]	; (8007180 <__NVIC_EnableIRQ+0x34>)
 8007166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	2001      	movs	r0, #1
 800716e:	fa00 f202 	lsl.w	r2, r0, r2
 8007172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	bc80      	pop	{r7}
 800717e:	4770      	bx	lr
 8007180:	e000e100 	.word	0xe000e100

08007184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	6039      	str	r1, [r7, #0]
 800718e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007194:	2b00      	cmp	r3, #0
 8007196:	db0a      	blt.n	80071ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	b2da      	uxtb	r2, r3
 800719c:	490c      	ldr	r1, [pc, #48]	; (80071d0 <__NVIC_SetPriority+0x4c>)
 800719e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071a2:	0112      	lsls	r2, r2, #4
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	440b      	add	r3, r1
 80071a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80071ac:	e00a      	b.n	80071c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	4908      	ldr	r1, [pc, #32]	; (80071d4 <__NVIC_SetPriority+0x50>)
 80071b4:	79fb      	ldrb	r3, [r7, #7]
 80071b6:	f003 030f 	and.w	r3, r3, #15
 80071ba:	3b04      	subs	r3, #4
 80071bc:	0112      	lsls	r2, r2, #4
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	440b      	add	r3, r1
 80071c2:	761a      	strb	r2, [r3, #24]
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bc80      	pop	{r7}
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	e000e100 	.word	0xe000e100
 80071d4:	e000ed00 	.word	0xe000ed00

080071d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071d8:	b480      	push	{r7}
 80071da:	b089      	sub	sp, #36	; 0x24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	f1c3 0307 	rsb	r3, r3, #7
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	bf28      	it	cs
 80071f6:	2304      	movcs	r3, #4
 80071f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	3304      	adds	r3, #4
 80071fe:	2b06      	cmp	r3, #6
 8007200:	d902      	bls.n	8007208 <NVIC_EncodePriority+0x30>
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	3b03      	subs	r3, #3
 8007206:	e000      	b.n	800720a <NVIC_EncodePriority+0x32>
 8007208:	2300      	movs	r3, #0
 800720a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800720c:	f04f 32ff 	mov.w	r2, #4294967295
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	fa02 f303 	lsl.w	r3, r2, r3
 8007216:	43da      	mvns	r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	401a      	ands	r2, r3
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007220:	f04f 31ff 	mov.w	r1, #4294967295
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	fa01 f303 	lsl.w	r3, r1, r3
 800722a:	43d9      	mvns	r1, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007230:	4313      	orrs	r3, r2
         );
}
 8007232:	4618      	mov	r0, r3
 8007234:	3724      	adds	r7, #36	; 0x24
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr

0800723c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff ff4f 	bl	80070e8 <__NVIC_SetPriorityGrouping>
}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007252:	b580      	push	{r7, lr}
 8007254:	b086      	sub	sp, #24
 8007256:	af00      	add	r7, sp, #0
 8007258:	4603      	mov	r3, r0
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
 800725e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007260:	2300      	movs	r3, #0
 8007262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007264:	f7ff ff64 	bl	8007130 <__NVIC_GetPriorityGrouping>
 8007268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	68b9      	ldr	r1, [r7, #8]
 800726e:	6978      	ldr	r0, [r7, #20]
 8007270:	f7ff ffb2 	bl	80071d8 <NVIC_EncodePriority>
 8007274:	4602      	mov	r2, r0
 8007276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800727a:	4611      	mov	r1, r2
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff ff81 	bl	8007184 <__NVIC_SetPriority>
}
 8007282:	bf00      	nop
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	4603      	mov	r3, r0
 8007292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff ff57 	bl	800714c <__NVIC_EnableIRQ>
}
 800729e:	bf00      	nop
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80072b4:	f7ff f9ba 	bl	800662c <HAL_GetTick>
 80072b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e099      	b.n	80073f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0201 	bic.w	r2, r2, #1
 80072e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072e4:	e00f      	b.n	8007306 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072e6:	f7ff f9a1 	bl	800662c <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b05      	cmp	r3, #5
 80072f2:	d908      	bls.n	8007306 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2220      	movs	r2, #32
 80072f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2203      	movs	r2, #3
 80072fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e078      	b.n	80073f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e8      	bne.n	80072e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	4b38      	ldr	r3, [pc, #224]	; (8007400 <HAL_DMA_Init+0x158>)
 8007320:	4013      	ands	r3, r2
 8007322:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007332:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800733e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800734a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	2b04      	cmp	r3, #4
 800735e:	d107      	bne.n	8007370 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007368:	4313      	orrs	r3, r2
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f023 0307 	bic.w	r3, r3, #7
 8007386:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	2b04      	cmp	r3, #4
 8007398:	d117      	bne.n	80073ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00e      	beq.n	80073ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fa6d 	bl	800788c <DMA_CheckFifoParam>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2240      	movs	r2, #64	; 0x40
 80073bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80073c6:	2301      	movs	r3, #1
 80073c8:	e016      	b.n	80073f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa26 	bl	8007824 <DMA_CalcBaseAndBitshift>
 80073d8:	4603      	mov	r3, r0
 80073da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e0:	223f      	movs	r2, #63	; 0x3f
 80073e2:	409a      	lsls	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	f010803f 	.word	0xf010803f

08007404 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <HAL_DMA_Start_IT+0x26>
 8007426:	2302      	movs	r3, #2
 8007428:	e040      	b.n	80074ac <HAL_DMA_Start_IT+0xa8>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b01      	cmp	r3, #1
 800743c:	d12f      	bne.n	800749e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2202      	movs	r2, #2
 8007442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 f9b8 	bl	80077c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800745c:	223f      	movs	r2, #63	; 0x3f
 800745e:	409a      	lsls	r2, r3
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0216 	orr.w	r2, r2, #22
 8007472:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007478:	2b00      	cmp	r3, #0
 800747a:	d007      	beq.n	800748c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0208 	orr.w	r2, r2, #8
 800748a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	e005      	b.n	80074aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80074a6:	2302      	movs	r3, #2
 80074a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80074c0:	4b92      	ldr	r3, [pc, #584]	; (800770c <HAL_DMA_IRQHandler+0x258>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a92      	ldr	r2, [pc, #584]	; (8007710 <HAL_DMA_IRQHandler+0x25c>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	0a9b      	lsrs	r3, r3, #10
 80074cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074de:	2208      	movs	r2, #8
 80074e0:	409a      	lsls	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4013      	ands	r3, r2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01a      	beq.n	8007520 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d013      	beq.n	8007520 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0204 	bic.w	r2, r2, #4
 8007506:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750c:	2208      	movs	r2, #8
 800750e:	409a      	lsls	r2, r3
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007518:	f043 0201 	orr.w	r2, r3, #1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007524:	2201      	movs	r2, #1
 8007526:	409a      	lsls	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4013      	ands	r3, r2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d012      	beq.n	8007556 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007542:	2201      	movs	r2, #1
 8007544:	409a      	lsls	r2, r3
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754e:	f043 0202 	orr.w	r2, r3, #2
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800755a:	2204      	movs	r2, #4
 800755c:	409a      	lsls	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4013      	ands	r3, r2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d012      	beq.n	800758c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007578:	2204      	movs	r2, #4
 800757a:	409a      	lsls	r2, r3
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007584:	f043 0204 	orr.w	r2, r3, #4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007590:	2210      	movs	r2, #16
 8007592:	409a      	lsls	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4013      	ands	r3, r2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d043      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d03c      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ae:	2210      	movs	r2, #16
 80075b0:	409a      	lsls	r2, r3
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d018      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d108      	bne.n	80075e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d024      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
 80075e2:	e01f      	b.n	8007624 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01b      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4798      	blx	r3
 80075f4:	e016      	b.n	8007624 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007600:	2b00      	cmp	r3, #0
 8007602:	d107      	bne.n	8007614 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0208 	bic.w	r2, r2, #8
 8007612:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007628:	2220      	movs	r2, #32
 800762a:	409a      	lsls	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4013      	ands	r3, r2
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 808e 	beq.w	8007752 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0310 	and.w	r3, r3, #16
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 8086 	beq.w	8007752 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764a:	2220      	movs	r2, #32
 800764c:	409a      	lsls	r2, r3
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b05      	cmp	r3, #5
 800765c:	d136      	bne.n	80076cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0216 	bic.w	r2, r2, #22
 800766c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	695a      	ldr	r2, [r3, #20]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800767c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d103      	bne.n	800768e <HAL_DMA_IRQHandler+0x1da>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800768a:	2b00      	cmp	r3, #0
 800768c:	d007      	beq.n	800769e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0208 	bic.w	r2, r2, #8
 800769c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a2:	223f      	movs	r2, #63	; 0x3f
 80076a4:	409a      	lsls	r2, r3
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d07d      	beq.n	80077be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
        }
        return;
 80076ca:	e078      	b.n	80077be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d01c      	beq.n	8007714 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d108      	bne.n	80076fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d030      	beq.n	8007752 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	4798      	blx	r3
 80076f8:	e02b      	b.n	8007752 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d027      	beq.n	8007752 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	4798      	blx	r3
 800770a:	e022      	b.n	8007752 <HAL_DMA_IRQHandler+0x29e>
 800770c:	2000020c 	.word	0x2000020c
 8007710:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10f      	bne.n	8007742 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0210 	bic.w	r2, r2, #16
 8007730:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007756:	2b00      	cmp	r3, #0
 8007758:	d032      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d022      	beq.n	80077ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2205      	movs	r2, #5
 800776a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0201 	bic.w	r2, r2, #1
 800777c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	3301      	adds	r3, #1
 8007782:	60bb      	str	r3, [r7, #8]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	429a      	cmp	r2, r3
 8007788:	d307      	bcc.n	800779a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1f2      	bne.n	800777e <HAL_DMA_IRQHandler+0x2ca>
 8007798:	e000      	b.n	800779c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800779a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	4798      	blx	r3
 80077bc:	e000      	b.n	80077c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80077be:	bf00      	nop
    }
  }
}
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop

080077c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	2b40      	cmp	r3, #64	; 0x40
 80077f4:	d108      	bne.n	8007808 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007806:	e007      	b.n	8007818 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	60da      	str	r2, [r3, #12]
}
 8007818:	bf00      	nop
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr
	...

08007824 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	3b10      	subs	r3, #16
 8007834:	4a13      	ldr	r2, [pc, #76]	; (8007884 <DMA_CalcBaseAndBitshift+0x60>)
 8007836:	fba2 2303 	umull	r2, r3, r2, r3
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800783e:	4a12      	ldr	r2, [pc, #72]	; (8007888 <DMA_CalcBaseAndBitshift+0x64>)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4413      	add	r3, r2
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b03      	cmp	r3, #3
 8007850:	d909      	bls.n	8007866 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800785a:	f023 0303 	bic.w	r3, r3, #3
 800785e:	1d1a      	adds	r2, r3, #4
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	659a      	str	r2, [r3, #88]	; 0x58
 8007864:	e007      	b.n	8007876 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800786e:	f023 0303 	bic.w	r3, r3, #3
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	bc80      	pop	{r7}
 8007882:	4770      	bx	lr
 8007884:	aaaaaaab 	.word	0xaaaaaaab
 8007888:	0801acc8 	.word	0x0801acc8

0800788c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d11f      	bne.n	80078e6 <DMA_CheckFifoParam+0x5a>
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d856      	bhi.n	800795a <DMA_CheckFifoParam+0xce>
 80078ac:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <DMA_CheckFifoParam+0x28>)
 80078ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b2:	bf00      	nop
 80078b4:	080078c5 	.word	0x080078c5
 80078b8:	080078d7 	.word	0x080078d7
 80078bc:	080078c5 	.word	0x080078c5
 80078c0:	0800795b 	.word	0x0800795b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d046      	beq.n	800795e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078d4:	e043      	b.n	800795e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078de:	d140      	bne.n	8007962 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078e4:	e03d      	b.n	8007962 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ee:	d121      	bne.n	8007934 <DMA_CheckFifoParam+0xa8>
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	d837      	bhi.n	8007966 <DMA_CheckFifoParam+0xda>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <DMA_CheckFifoParam+0x70>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	0800790d 	.word	0x0800790d
 8007900:	08007913 	.word	0x08007913
 8007904:	0800790d 	.word	0x0800790d
 8007908:	08007925 	.word	0x08007925
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	73fb      	strb	r3, [r7, #15]
      break;
 8007910:	e030      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d025      	beq.n	800796a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007922:	e022      	b.n	800796a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800792c:	d11f      	bne.n	800796e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007932:	e01c      	b.n	800796e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d903      	bls.n	8007942 <DMA_CheckFifoParam+0xb6>
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b03      	cmp	r3, #3
 800793e:	d003      	beq.n	8007948 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007940:	e018      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	73fb      	strb	r3, [r7, #15]
      break;
 8007946:	e015      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00e      	beq.n	8007972 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	73fb      	strb	r3, [r7, #15]
      break;
 8007958:	e00b      	b.n	8007972 <DMA_CheckFifoParam+0xe6>
      break;
 800795a:	bf00      	nop
 800795c:	e00a      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
      break;
 800795e:	bf00      	nop
 8007960:	e008      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
      break;
 8007962:	bf00      	nop
 8007964:	e006      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
      break;
 8007966:	bf00      	nop
 8007968:	e004      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
      break;
 800796a:	bf00      	nop
 800796c:	e002      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
      break;   
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
      break;
 8007972:	bf00      	nop
    }
  } 
  
  return status; 
 8007974:	7bfb      	ldrb	r3, [r7, #15]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr

08007980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800798a:	2300      	movs	r3, #0
 800798c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800798e:	e16f      	b.n	8007c70 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	2101      	movs	r1, #1
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	fa01 f303 	lsl.w	r3, r1, r3
 800799c:	4013      	ands	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 8161 	beq.w	8007c6a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d005      	beq.n	80079c0 <HAL_GPIO_Init+0x40>
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f003 0303 	and.w	r3, r3, #3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d130      	bne.n	8007a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	2203      	movs	r2, #3
 80079cc:	fa02 f303 	lsl.w	r3, r2, r3
 80079d0:	43db      	mvns	r3, r3
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	4013      	ands	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	fa02 f303 	lsl.w	r3, r2, r3
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079f6:	2201      	movs	r2, #1
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	fa02 f303 	lsl.w	r3, r2, r3
 80079fe:	43db      	mvns	r3, r3
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	4013      	ands	r3, r2
 8007a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	091b      	lsrs	r3, r3, #4
 8007a0c:	f003 0201 	and.w	r2, r3, #1
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d017      	beq.n	8007a5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	2203      	movs	r2, #3
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	43db      	mvns	r3, r3
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4013      	ands	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d123      	bne.n	8007ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	08da      	lsrs	r2, r3, #3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3208      	adds	r2, #8
 8007a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f003 0307 	and.w	r3, r3, #7
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	220f      	movs	r2, #15
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	43db      	mvns	r3, r3
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	691a      	ldr	r2, [r3, #16]
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	08da      	lsrs	r2, r3, #3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3208      	adds	r2, #8
 8007aac:	6939      	ldr	r1, [r7, #16]
 8007aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	2203      	movs	r2, #3
 8007abe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac2:	43db      	mvns	r3, r3
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f003 0203 	and.w	r2, r3, #3
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 80bb 	beq.w	8007c6a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007af4:	2300      	movs	r3, #0
 8007af6:	60bb      	str	r3, [r7, #8]
 8007af8:	4b64      	ldr	r3, [pc, #400]	; (8007c8c <HAL_GPIO_Init+0x30c>)
 8007afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afc:	4a63      	ldr	r2, [pc, #396]	; (8007c8c <HAL_GPIO_Init+0x30c>)
 8007afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b02:	6453      	str	r3, [r2, #68]	; 0x44
 8007b04:	4b61      	ldr	r3, [pc, #388]	; (8007c8c <HAL_GPIO_Init+0x30c>)
 8007b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b0c:	60bb      	str	r3, [r7, #8]
 8007b0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007b10:	4a5f      	ldr	r2, [pc, #380]	; (8007c90 <HAL_GPIO_Init+0x310>)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	089b      	lsrs	r3, r3, #2
 8007b16:	3302      	adds	r3, #2
 8007b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f003 0303 	and.w	r3, r3, #3
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	220f      	movs	r2, #15
 8007b28:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2c:	43db      	mvns	r3, r3
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4013      	ands	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a57      	ldr	r2, [pc, #348]	; (8007c94 <HAL_GPIO_Init+0x314>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d031      	beq.n	8007ba0 <HAL_GPIO_Init+0x220>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a56      	ldr	r2, [pc, #344]	; (8007c98 <HAL_GPIO_Init+0x318>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d02b      	beq.n	8007b9c <HAL_GPIO_Init+0x21c>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a55      	ldr	r2, [pc, #340]	; (8007c9c <HAL_GPIO_Init+0x31c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d025      	beq.n	8007b98 <HAL_GPIO_Init+0x218>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a54      	ldr	r2, [pc, #336]	; (8007ca0 <HAL_GPIO_Init+0x320>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d01f      	beq.n	8007b94 <HAL_GPIO_Init+0x214>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a53      	ldr	r2, [pc, #332]	; (8007ca4 <HAL_GPIO_Init+0x324>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d019      	beq.n	8007b90 <HAL_GPIO_Init+0x210>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a52      	ldr	r2, [pc, #328]	; (8007ca8 <HAL_GPIO_Init+0x328>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d013      	beq.n	8007b8c <HAL_GPIO_Init+0x20c>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a51      	ldr	r2, [pc, #324]	; (8007cac <HAL_GPIO_Init+0x32c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d00d      	beq.n	8007b88 <HAL_GPIO_Init+0x208>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a50      	ldr	r2, [pc, #320]	; (8007cb0 <HAL_GPIO_Init+0x330>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d007      	beq.n	8007b84 <HAL_GPIO_Init+0x204>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a4f      	ldr	r2, [pc, #316]	; (8007cb4 <HAL_GPIO_Init+0x334>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d101      	bne.n	8007b80 <HAL_GPIO_Init+0x200>
 8007b7c:	2308      	movs	r3, #8
 8007b7e:	e010      	b.n	8007ba2 <HAL_GPIO_Init+0x222>
 8007b80:	2309      	movs	r3, #9
 8007b82:	e00e      	b.n	8007ba2 <HAL_GPIO_Init+0x222>
 8007b84:	2307      	movs	r3, #7
 8007b86:	e00c      	b.n	8007ba2 <HAL_GPIO_Init+0x222>
 8007b88:	2306      	movs	r3, #6
 8007b8a:	e00a      	b.n	8007ba2 <HAL_GPIO_Init+0x222>
 8007b8c:	2305      	movs	r3, #5
 8007b8e:	e008      	b.n	8007ba2 <HAL_GPIO_Init+0x222>
 8007b90:	2304      	movs	r3, #4
 8007b92:	e006      	b.n	8007ba2 <HAL_GPIO_Init+0x222>
 8007b94:	2303      	movs	r3, #3
 8007b96:	e004      	b.n	8007ba2 <HAL_GPIO_Init+0x222>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e002      	b.n	8007ba2 <HAL_GPIO_Init+0x222>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e000      	b.n	8007ba2 <HAL_GPIO_Init+0x222>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	f002 0203 	and.w	r2, r2, #3
 8007ba8:	0092      	lsls	r2, r2, #2
 8007baa:	4093      	lsls	r3, r2
 8007bac:	461a      	mov	r2, r3
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007bb4:	4936      	ldr	r1, [pc, #216]	; (8007c90 <HAL_GPIO_Init+0x310>)
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	089b      	lsrs	r3, r3, #2
 8007bba:	3302      	adds	r3, #2
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007bc2:	4b3d      	ldr	r3, [pc, #244]	; (8007cb8 <HAL_GPIO_Init+0x338>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	43db      	mvns	r3, r3
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007be6:	4a34      	ldr	r2, [pc, #208]	; (8007cb8 <HAL_GPIO_Init+0x338>)
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007bec:	4b32      	ldr	r3, [pc, #200]	; (8007cb8 <HAL_GPIO_Init+0x338>)
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	43db      	mvns	r3, r3
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007c10:	4a29      	ldr	r2, [pc, #164]	; (8007cb8 <HAL_GPIO_Init+0x338>)
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007c16:	4b28      	ldr	r3, [pc, #160]	; (8007cb8 <HAL_GPIO_Init+0x338>)
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	43db      	mvns	r3, r3
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4013      	ands	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007c3a:	4a1f      	ldr	r2, [pc, #124]	; (8007cb8 <HAL_GPIO_Init+0x338>)
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007c40:	4b1d      	ldr	r3, [pc, #116]	; (8007cb8 <HAL_GPIO_Init+0x338>)
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	43db      	mvns	r3, r3
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007c64:	4a14      	ldr	r2, [pc, #80]	; (8007cb8 <HAL_GPIO_Init+0x338>)
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f47f ae88 	bne.w	8007990 <HAL_GPIO_Init+0x10>
  }
}
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	371c      	adds	r7, #28
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bc80      	pop	{r7}
 8007c8a:	4770      	bx	lr
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	40013800 	.word	0x40013800
 8007c94:	40020000 	.word	0x40020000
 8007c98:	40020400 	.word	0x40020400
 8007c9c:	40020800 	.word	0x40020800
 8007ca0:	40020c00 	.word	0x40020c00
 8007ca4:	40021000 	.word	0x40021000
 8007ca8:	40021400 	.word	0x40021400
 8007cac:	40021800 	.word	0x40021800
 8007cb0:	40021c00 	.word	0x40021c00
 8007cb4:	40022000 	.word	0x40022000
 8007cb8:	40013c00 	.word	0x40013c00

08007cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691a      	ldr	r2, [r3, #16]
 8007ccc:	887b      	ldrh	r3, [r7, #2]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	73fb      	strb	r3, [r7, #15]
 8007cd8:	e001      	b.n	8007cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr

08007cea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	807b      	strh	r3, [r7, #2]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007cfa:	787b      	ldrb	r3, [r7, #1]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d00:	887a      	ldrh	r2, [r7, #2]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007d06:	e003      	b.n	8007d10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007d08:	887b      	ldrh	r3, [r7, #2]
 8007d0a:	041a      	lsls	r2, r3, #16
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	619a      	str	r2, [r3, #24]
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bc80      	pop	{r7}
 8007d18:	4770      	bx	lr

08007d1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d2c:	887a      	ldrh	r2, [r7, #2]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4013      	ands	r3, r2
 8007d32:	041a      	lsls	r2, r3, #16
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	43d9      	mvns	r1, r3
 8007d38:	887b      	ldrh	r3, [r7, #2]
 8007d3a:	400b      	ands	r3, r1
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	619a      	str	r2, [r3, #24]
}
 8007d42:	bf00      	nop
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	4770      	bx	lr

08007d4c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d4e:	b08f      	sub	sp, #60	; 0x3c
 8007d50:	af0a      	add	r7, sp, #40	; 0x28
 8007d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e054      	b.n	8007e08 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f00d ff7b 	bl	8015c74 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2203      	movs	r2, #3
 8007d82:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d102      	bne.n	8007d98 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f003 fffb 	bl	800bd98 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	687e      	ldr	r6, [r7, #4]
 8007daa:	466d      	mov	r5, sp
 8007dac:	f106 0410 	add.w	r4, r6, #16
 8007db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007db8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007dbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8007dc0:	1d33      	adds	r3, r6, #4
 8007dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dc4:	6838      	ldr	r0, [r7, #0]
 8007dc6:	f003 ff80 	bl	800bcca <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2101      	movs	r1, #1
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f003 fff1 	bl	800bdb8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	687e      	ldr	r6, [r7, #4]
 8007dde:	466d      	mov	r5, sp
 8007de0:	f106 0410 	add.w	r4, r6, #16
 8007de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007dec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007df0:	e885 0003 	stmia.w	r5, {r0, r1}
 8007df4:	1d33      	adds	r3, r6, #4
 8007df6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007df8:	6838      	ldr	r0, [r7, #0]
 8007dfa:	f004 f953 	bl	800c0a4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e10 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8007e10:	b590      	push	{r4, r7, lr}
 8007e12:	b089      	sub	sp, #36	; 0x24
 8007e14:	af04      	add	r7, sp, #16
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	4608      	mov	r0, r1
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	4603      	mov	r3, r0
 8007e20:	70fb      	strb	r3, [r7, #3]
 8007e22:	460b      	mov	r3, r1
 8007e24:	70bb      	strb	r3, [r7, #2]
 8007e26:	4613      	mov	r3, r2
 8007e28:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <HAL_HCD_HC_Init+0x28>
 8007e34:	2302      	movs	r3, #2
 8007e36:	e076      	b.n	8007f26 <HAL_HCD_HC_Init+0x116>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	212c      	movs	r1, #44	; 0x2c
 8007e46:	fb01 f303 	mul.w	r3, r1, r3
 8007e4a:	4413      	add	r3, r2
 8007e4c:	333d      	adds	r3, #61	; 0x3d
 8007e4e:	2200      	movs	r2, #0
 8007e50:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	212c      	movs	r1, #44	; 0x2c
 8007e58:	fb01 f303 	mul.w	r3, r1, r3
 8007e5c:	4413      	add	r3, r2
 8007e5e:	3338      	adds	r3, #56	; 0x38
 8007e60:	787a      	ldrb	r2, [r7, #1]
 8007e62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	212c      	movs	r1, #44	; 0x2c
 8007e6a:	fb01 f303 	mul.w	r3, r1, r3
 8007e6e:	4413      	add	r3, r2
 8007e70:	3340      	adds	r3, #64	; 0x40
 8007e72:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007e74:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007e76:	78fb      	ldrb	r3, [r7, #3]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	212c      	movs	r1, #44	; 0x2c
 8007e7c:	fb01 f303 	mul.w	r3, r1, r3
 8007e80:	4413      	add	r3, r2
 8007e82:	3339      	adds	r3, #57	; 0x39
 8007e84:	78fa      	ldrb	r2, [r7, #3]
 8007e86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	212c      	movs	r1, #44	; 0x2c
 8007e8e:	fb01 f303 	mul.w	r3, r1, r3
 8007e92:	4413      	add	r3, r2
 8007e94:	333f      	adds	r3, #63	; 0x3f
 8007e96:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007e9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	78ba      	ldrb	r2, [r7, #2]
 8007ea0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ea4:	b2d0      	uxtb	r0, r2
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	212c      	movs	r1, #44	; 0x2c
 8007eaa:	fb01 f303 	mul.w	r3, r1, r3
 8007eae:	4413      	add	r3, r2
 8007eb0:	333a      	adds	r3, #58	; 0x3a
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8007eb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	da09      	bge.n	8007ed2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007ebe:	78fb      	ldrb	r3, [r7, #3]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	212c      	movs	r1, #44	; 0x2c
 8007ec4:	fb01 f303 	mul.w	r3, r1, r3
 8007ec8:	4413      	add	r3, r2
 8007eca:	333b      	adds	r3, #59	; 0x3b
 8007ecc:	2201      	movs	r2, #1
 8007ece:	701a      	strb	r2, [r3, #0]
 8007ed0:	e008      	b.n	8007ee4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8007ed2:	78fb      	ldrb	r3, [r7, #3]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	212c      	movs	r1, #44	; 0x2c
 8007ed8:	fb01 f303 	mul.w	r3, r1, r3
 8007edc:	4413      	add	r3, r2
 8007ede:	333b      	adds	r3, #59	; 0x3b
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	212c      	movs	r1, #44	; 0x2c
 8007eea:	fb01 f303 	mul.w	r3, r1, r3
 8007eee:	4413      	add	r3, r2
 8007ef0:	333c      	adds	r3, #60	; 0x3c
 8007ef2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007ef6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6818      	ldr	r0, [r3, #0]
 8007efc:	787c      	ldrb	r4, [r7, #1]
 8007efe:	78ba      	ldrb	r2, [r7, #2]
 8007f00:	78f9      	ldrb	r1, [r7, #3]
 8007f02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f04:	9302      	str	r3, [sp, #8]
 8007f06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007f0a:	9301      	str	r3, [sp, #4]
 8007f0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	4623      	mov	r3, r4
 8007f14:	f004 fa3c 	bl	800c390 <USB_HC_Init>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd90      	pop	{r4, r7, pc}

08007f2e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b084      	sub	sp, #16
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	460b      	mov	r3, r1
 8007f38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d101      	bne.n	8007f4c <HAL_HCD_HC_Halt+0x1e>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e00f      	b.n	8007f6c <HAL_HCD_HC_Halt+0x3e>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	78fa      	ldrb	r2, [r7, #3]
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f004 fc77 	bl	800c850 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	4608      	mov	r0, r1
 8007f7e:	4611      	mov	r1, r2
 8007f80:	461a      	mov	r2, r3
 8007f82:	4603      	mov	r3, r0
 8007f84:	70fb      	strb	r3, [r7, #3]
 8007f86:	460b      	mov	r3, r1
 8007f88:	70bb      	strb	r3, [r7, #2]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	212c      	movs	r1, #44	; 0x2c
 8007f94:	fb01 f303 	mul.w	r3, r1, r3
 8007f98:	4413      	add	r3, r2
 8007f9a:	333b      	adds	r3, #59	; 0x3b
 8007f9c:	78ba      	ldrb	r2, [r7, #2]
 8007f9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	212c      	movs	r1, #44	; 0x2c
 8007fa6:	fb01 f303 	mul.w	r3, r1, r3
 8007faa:	4413      	add	r3, r2
 8007fac:	333f      	adds	r3, #63	; 0x3f
 8007fae:	787a      	ldrb	r2, [r7, #1]
 8007fb0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8007fb2:	7c3b      	ldrb	r3, [r7, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d112      	bne.n	8007fde <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	212c      	movs	r1, #44	; 0x2c
 8007fbe:	fb01 f303 	mul.w	r3, r1, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3342      	adds	r3, #66	; 0x42
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	212c      	movs	r1, #44	; 0x2c
 8007fd0:	fb01 f303 	mul.w	r3, r1, r3
 8007fd4:	4413      	add	r3, r2
 8007fd6:	333d      	adds	r3, #61	; 0x3d
 8007fd8:	7f3a      	ldrb	r2, [r7, #28]
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	e008      	b.n	8007ff0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007fde:	78fb      	ldrb	r3, [r7, #3]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	212c      	movs	r1, #44	; 0x2c
 8007fe4:	fb01 f303 	mul.w	r3, r1, r3
 8007fe8:	4413      	add	r3, r2
 8007fea:	3342      	adds	r3, #66	; 0x42
 8007fec:	2202      	movs	r2, #2
 8007fee:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8007ff0:	787b      	ldrb	r3, [r7, #1]
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	f200 80c6 	bhi.w	8008184 <HAL_HCD_HC_SubmitRequest+0x210>
 8007ff8:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8007ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffe:	bf00      	nop
 8008000:	08008011 	.word	0x08008011
 8008004:	08008171 	.word	0x08008171
 8008008:	08008075 	.word	0x08008075
 800800c:	080080f3 	.word	0x080080f3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8008010:	7c3b      	ldrb	r3, [r7, #16]
 8008012:	2b01      	cmp	r3, #1
 8008014:	f040 80b8 	bne.w	8008188 <HAL_HCD_HC_SubmitRequest+0x214>
 8008018:	78bb      	ldrb	r3, [r7, #2]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f040 80b4 	bne.w	8008188 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8008020:	8b3b      	ldrh	r3, [r7, #24]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d108      	bne.n	8008038 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	212c      	movs	r1, #44	; 0x2c
 800802c:	fb01 f303 	mul.w	r3, r1, r3
 8008030:	4413      	add	r3, r2
 8008032:	3355      	adds	r3, #85	; 0x55
 8008034:	2201      	movs	r2, #1
 8008036:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008038:	78fb      	ldrb	r3, [r7, #3]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	212c      	movs	r1, #44	; 0x2c
 800803e:	fb01 f303 	mul.w	r3, r1, r3
 8008042:	4413      	add	r3, r2
 8008044:	3355      	adds	r3, #85	; 0x55
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d109      	bne.n	8008060 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	212c      	movs	r1, #44	; 0x2c
 8008052:	fb01 f303 	mul.w	r3, r1, r3
 8008056:	4413      	add	r3, r2
 8008058:	3342      	adds	r3, #66	; 0x42
 800805a:	2200      	movs	r2, #0
 800805c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800805e:	e093      	b.n	8008188 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	212c      	movs	r1, #44	; 0x2c
 8008066:	fb01 f303 	mul.w	r3, r1, r3
 800806a:	4413      	add	r3, r2
 800806c:	3342      	adds	r3, #66	; 0x42
 800806e:	2202      	movs	r2, #2
 8008070:	701a      	strb	r2, [r3, #0]
      break;
 8008072:	e089      	b.n	8008188 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8008074:	78bb      	ldrb	r3, [r7, #2]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d11d      	bne.n	80080b6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800807a:	78fb      	ldrb	r3, [r7, #3]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	212c      	movs	r1, #44	; 0x2c
 8008080:	fb01 f303 	mul.w	r3, r1, r3
 8008084:	4413      	add	r3, r2
 8008086:	3355      	adds	r3, #85	; 0x55
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d109      	bne.n	80080a2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800808e:	78fb      	ldrb	r3, [r7, #3]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	212c      	movs	r1, #44	; 0x2c
 8008094:	fb01 f303 	mul.w	r3, r1, r3
 8008098:	4413      	add	r3, r2
 800809a:	3342      	adds	r3, #66	; 0x42
 800809c:	2200      	movs	r2, #0
 800809e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80080a0:	e073      	b.n	800818a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80080a2:	78fb      	ldrb	r3, [r7, #3]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	212c      	movs	r1, #44	; 0x2c
 80080a8:	fb01 f303 	mul.w	r3, r1, r3
 80080ac:	4413      	add	r3, r2
 80080ae:	3342      	adds	r3, #66	; 0x42
 80080b0:	2202      	movs	r2, #2
 80080b2:	701a      	strb	r2, [r3, #0]
      break;
 80080b4:	e069      	b.n	800818a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80080b6:	78fb      	ldrb	r3, [r7, #3]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	212c      	movs	r1, #44	; 0x2c
 80080bc:	fb01 f303 	mul.w	r3, r1, r3
 80080c0:	4413      	add	r3, r2
 80080c2:	3354      	adds	r3, #84	; 0x54
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d109      	bne.n	80080de <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	212c      	movs	r1, #44	; 0x2c
 80080d0:	fb01 f303 	mul.w	r3, r1, r3
 80080d4:	4413      	add	r3, r2
 80080d6:	3342      	adds	r3, #66	; 0x42
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
      break;
 80080dc:	e055      	b.n	800818a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80080de:	78fb      	ldrb	r3, [r7, #3]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	212c      	movs	r1, #44	; 0x2c
 80080e4:	fb01 f303 	mul.w	r3, r1, r3
 80080e8:	4413      	add	r3, r2
 80080ea:	3342      	adds	r3, #66	; 0x42
 80080ec:	2202      	movs	r2, #2
 80080ee:	701a      	strb	r2, [r3, #0]
      break;
 80080f0:	e04b      	b.n	800818a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80080f2:	78bb      	ldrb	r3, [r7, #2]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d11d      	bne.n	8008134 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80080f8:	78fb      	ldrb	r3, [r7, #3]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	212c      	movs	r1, #44	; 0x2c
 80080fe:	fb01 f303 	mul.w	r3, r1, r3
 8008102:	4413      	add	r3, r2
 8008104:	3355      	adds	r3, #85	; 0x55
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d109      	bne.n	8008120 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800810c:	78fb      	ldrb	r3, [r7, #3]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	212c      	movs	r1, #44	; 0x2c
 8008112:	fb01 f303 	mul.w	r3, r1, r3
 8008116:	4413      	add	r3, r2
 8008118:	3342      	adds	r3, #66	; 0x42
 800811a:	2200      	movs	r2, #0
 800811c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800811e:	e034      	b.n	800818a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008120:	78fb      	ldrb	r3, [r7, #3]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	212c      	movs	r1, #44	; 0x2c
 8008126:	fb01 f303 	mul.w	r3, r1, r3
 800812a:	4413      	add	r3, r2
 800812c:	3342      	adds	r3, #66	; 0x42
 800812e:	2202      	movs	r2, #2
 8008130:	701a      	strb	r2, [r3, #0]
      break;
 8008132:	e02a      	b.n	800818a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008134:	78fb      	ldrb	r3, [r7, #3]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	212c      	movs	r1, #44	; 0x2c
 800813a:	fb01 f303 	mul.w	r3, r1, r3
 800813e:	4413      	add	r3, r2
 8008140:	3354      	adds	r3, #84	; 0x54
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d109      	bne.n	800815c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	212c      	movs	r1, #44	; 0x2c
 800814e:	fb01 f303 	mul.w	r3, r1, r3
 8008152:	4413      	add	r3, r2
 8008154:	3342      	adds	r3, #66	; 0x42
 8008156:	2200      	movs	r2, #0
 8008158:	701a      	strb	r2, [r3, #0]
      break;
 800815a:	e016      	b.n	800818a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800815c:	78fb      	ldrb	r3, [r7, #3]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	212c      	movs	r1, #44	; 0x2c
 8008162:	fb01 f303 	mul.w	r3, r1, r3
 8008166:	4413      	add	r3, r2
 8008168:	3342      	adds	r3, #66	; 0x42
 800816a:	2202      	movs	r2, #2
 800816c:	701a      	strb	r2, [r3, #0]
      break;
 800816e:	e00c      	b.n	800818a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	212c      	movs	r1, #44	; 0x2c
 8008176:	fb01 f303 	mul.w	r3, r1, r3
 800817a:	4413      	add	r3, r2
 800817c:	3342      	adds	r3, #66	; 0x42
 800817e:	2200      	movs	r2, #0
 8008180:	701a      	strb	r2, [r3, #0]
      break;
 8008182:	e002      	b.n	800818a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8008184:	bf00      	nop
 8008186:	e000      	b.n	800818a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8008188:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	212c      	movs	r1, #44	; 0x2c
 8008190:	fb01 f303 	mul.w	r3, r1, r3
 8008194:	4413      	add	r3, r2
 8008196:	3344      	adds	r3, #68	; 0x44
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	8b3a      	ldrh	r2, [r7, #24]
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	202c      	movs	r0, #44	; 0x2c
 80081a4:	fb00 f303 	mul.w	r3, r0, r3
 80081a8:	440b      	add	r3, r1
 80081aa:	334c      	adds	r3, #76	; 0x4c
 80081ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	212c      	movs	r1, #44	; 0x2c
 80081b4:	fb01 f303 	mul.w	r3, r1, r3
 80081b8:	4413      	add	r3, r2
 80081ba:	3360      	adds	r3, #96	; 0x60
 80081bc:	2200      	movs	r2, #0
 80081be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	212c      	movs	r1, #44	; 0x2c
 80081c6:	fb01 f303 	mul.w	r3, r1, r3
 80081ca:	4413      	add	r3, r2
 80081cc:	3350      	adds	r3, #80	; 0x50
 80081ce:	2200      	movs	r2, #0
 80081d0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	212c      	movs	r1, #44	; 0x2c
 80081d8:	fb01 f303 	mul.w	r3, r1, r3
 80081dc:	4413      	add	r3, r2
 80081de:	3339      	adds	r3, #57	; 0x39
 80081e0:	78fa      	ldrb	r2, [r7, #3]
 80081e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80081e4:	78fb      	ldrb	r3, [r7, #3]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	212c      	movs	r1, #44	; 0x2c
 80081ea:	fb01 f303 	mul.w	r3, r1, r3
 80081ee:	4413      	add	r3, r2
 80081f0:	3361      	adds	r3, #97	; 0x61
 80081f2:	2200      	movs	r2, #0
 80081f4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	78fb      	ldrb	r3, [r7, #3]
 80081fc:	222c      	movs	r2, #44	; 0x2c
 80081fe:	fb02 f303 	mul.w	r3, r2, r3
 8008202:	3338      	adds	r3, #56	; 0x38
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	18d1      	adds	r1, r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	b2db      	uxtb	r3, r3
 800820e:	461a      	mov	r2, r3
 8008210:	f004 f9cc 	bl	800c5ac <USB_HC_StartXfer>
 8008214:	4603      	mov	r3, r0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop

08008220 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f003 fef4 	bl	800c024 <USB_GetMode>
 800823c:	4603      	mov	r3, r0
 800823e:	2b01      	cmp	r3, #1
 8008240:	f040 80ef 	bne.w	8008422 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4618      	mov	r0, r3
 800824a:	f003 fed9 	bl	800c000 <USB_ReadInterrupts>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80e5 	beq.w	8008420 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4618      	mov	r0, r3
 800825c:	f003 fed0 	bl	800c000 <USB_ReadInterrupts>
 8008260:	4603      	mov	r3, r0
 8008262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800826a:	d104      	bne.n	8008276 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008274:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4618      	mov	r0, r3
 800827c:	f003 fec0 	bl	800c000 <USB_ReadInterrupts>
 8008280:	4603      	mov	r3, r0
 8008282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800828a:	d104      	bne.n	8008296 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008294:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4618      	mov	r0, r3
 800829c:	f003 feb0 	bl	800c000 <USB_ReadInterrupts>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082aa:	d104      	bne.n	80082b6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80082b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f003 fea0 	bl	800c000 <USB_ReadInterrupts>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f003 0302 	and.w	r3, r3, #2
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d103      	bne.n	80082d2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2202      	movs	r2, #2
 80082d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f003 fe92 	bl	800c000 <USB_ReadInterrupts>
 80082dc:	4603      	mov	r3, r0
 80082de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082e6:	d115      	bne.n	8008314 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80082f0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d108      	bne.n	8008314 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f00d fd34 	bl	8015d70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2101      	movs	r1, #1
 800830e:	4618      	mov	r0, r3
 8008310:	f003 ff7c 	bl	800c20c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4618      	mov	r0, r3
 800831a:	f003 fe71 	bl	800c000 <USB_ReadInterrupts>
 800831e:	4603      	mov	r3, r0
 8008320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008328:	d102      	bne.n	8008330 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f001 fa01 	bl	8009732 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4618      	mov	r0, r3
 8008336:	f003 fe63 	bl	800c000 <USB_ReadInterrupts>
 800833a:	4603      	mov	r3, r0
 800833c:	f003 0308 	and.w	r3, r3, #8
 8008340:	2b08      	cmp	r3, #8
 8008342:	d106      	bne.n	8008352 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f00d fcf7 	bl	8015d38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2208      	movs	r2, #8
 8008350:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4618      	mov	r0, r3
 8008358:	f003 fe52 	bl	800c000 <USB_ReadInterrupts>
 800835c:	4603      	mov	r3, r0
 800835e:	f003 0310 	and.w	r3, r3, #16
 8008362:	2b10      	cmp	r3, #16
 8008364:	d101      	bne.n	800836a <HAL_HCD_IRQHandler+0x14a>
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <HAL_HCD_IRQHandler+0x14c>
 800836a:	2300      	movs	r3, #0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d012      	beq.n	8008396 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	699a      	ldr	r2, [r3, #24]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0210 	bic.w	r2, r2, #16
 800837e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f001 f904 	bl	800958e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	699a      	ldr	r2, [r3, #24]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0210 	orr.w	r2, r2, #16
 8008394:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f003 fe30 	bl	800c000 <USB_ReadInterrupts>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083aa:	d13a      	bne.n	8008422 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f004 fa3d 	bl	800c830 <USB_HC_ReadInterrupt>
 80083b6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80083b8:	2300      	movs	r3, #0
 80083ba:	617b      	str	r3, [r7, #20]
 80083bc:	e025      	b.n	800840a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f003 030f 	and.w	r3, r3, #15
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d018      	beq.n	8008404 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083e8:	d106      	bne.n	80083f8 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f8a9 	bl	8008548 <HCD_HC_IN_IRQHandler>
 80083f6:	e005      	b.n	8008404 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fcc4 	bl	8008d8c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	3301      	adds	r3, #1
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	429a      	cmp	r2, r3
 8008412:	d3d4      	bcc.n	80083be <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800841c:	615a      	str	r2, [r3, #20]
 800841e:	e000      	b.n	8008422 <HAL_HCD_IRQHandler+0x202>
      return;
 8008420:	bf00      	nop
    }
  }
}
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <HAL_HCD_Start+0x16>
 800843a:	2302      	movs	r3, #2
 800843c:	e013      	b.n	8008466 <HAL_HCD_Start+0x3e>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2101      	movs	r1, #1
 800844c:	4618      	mov	r0, r3
 800844e:	f003 ff40 	bl	800c2d2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f003 fc8e 	bl	800bd78 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_HCD_Stop+0x16>
 8008480:	2302      	movs	r3, #2
 8008482:	e00d      	b.n	80084a0 <HAL_HCD_Stop+0x32>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4618      	mov	r0, r3
 8008492:	f004 fb33 	bl	800cafc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f003 fee2 	bl	800c27e <USB_ResetPort>
 80084ba:	4603      	mov	r3, r0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80084d0:	78fb      	ldrb	r3, [r7, #3]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	212c      	movs	r1, #44	; 0x2c
 80084d6:	fb01 f303 	mul.w	r3, r1, r3
 80084da:	4413      	add	r3, r2
 80084dc:	3360      	adds	r3, #96	; 0x60
 80084de:	781b      	ldrb	r3, [r3, #0]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bc80      	pop	{r7}
 80084e8:	4770      	bx	lr

080084ea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b083      	sub	sp, #12
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	460b      	mov	r3, r1
 80084f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	212c      	movs	r1, #44	; 0x2c
 80084fc:	fb01 f303 	mul.w	r3, r1, r3
 8008500:	4413      	add	r3, r2
 8008502:	3350      	adds	r3, #80	; 0x50
 8008504:	681b      	ldr	r3, [r3, #0]
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr

08008510 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f003 ff26 	bl	800c36e <USB_GetCurrentFrame>
 8008522:	4603      	mov	r3, r0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4618      	mov	r0, r3
 800853a:	f003 ff02 	bl	800c342 <USB_GetHostSpeed>
 800853e:	4603      	mov	r3, r0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800855e:	78fb      	ldrb	r3, [r7, #3]
 8008560:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	4413      	add	r3, r2
 800856a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b04      	cmp	r3, #4
 8008576:	d119      	bne.n	80085ac <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	4413      	add	r3, r2
 8008580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008584:	461a      	mov	r2, r3
 8008586:	2304      	movs	r3, #4
 8008588:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	4413      	add	r3, r2
 8008592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	0151      	lsls	r1, r2, #5
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	440a      	add	r2, r1
 80085a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085a4:	f043 0302 	orr.w	r3, r3, #2
 80085a8:	60d3      	str	r3, [r2, #12]
 80085aa:	e101      	b.n	80087b0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c2:	d12b      	bne.n	800861c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d0:	461a      	mov	r2, r3
 80085d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	212c      	movs	r1, #44	; 0x2c
 80085de:	fb01 f303 	mul.w	r3, r1, r3
 80085e2:	4413      	add	r3, r2
 80085e4:	3361      	adds	r3, #97	; 0x61
 80085e6:	2207      	movs	r2, #7
 80085e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008604:	f043 0302 	orr.w	r3, r3, #2
 8008608:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	b2d2      	uxtb	r2, r2
 8008612:	4611      	mov	r1, r2
 8008614:	4618      	mov	r0, r3
 8008616:	f004 f91b 	bl	800c850 <USB_HC_Halt>
 800861a:	e0c9      	b.n	80087b0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	4413      	add	r3, r2
 8008624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b20      	cmp	r3, #32
 8008630:	d109      	bne.n	8008646 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	4413      	add	r3, r2
 800863a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863e:	461a      	mov	r2, r3
 8008640:	2320      	movs	r3, #32
 8008642:	6093      	str	r3, [r2, #8]
 8008644:	e0b4      	b.n	80087b0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	4413      	add	r3, r2
 800864e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f003 0308 	and.w	r3, r3, #8
 8008658:	2b08      	cmp	r3, #8
 800865a:	d133      	bne.n	80086c4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	4413      	add	r3, r2
 8008664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	0151      	lsls	r1, r2, #5
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	440a      	add	r2, r1
 8008672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008676:	f043 0302 	orr.w	r3, r3, #2
 800867a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	212c      	movs	r1, #44	; 0x2c
 8008682:	fb01 f303 	mul.w	r3, r1, r3
 8008686:	4413      	add	r3, r2
 8008688:	3361      	adds	r3, #97	; 0x61
 800868a:	2205      	movs	r2, #5
 800868c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	4413      	add	r3, r2
 8008696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869a:	461a      	mov	r2, r3
 800869c:	2310      	movs	r3, #16
 800869e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ac:	461a      	mov	r2, r3
 80086ae:	2308      	movs	r3, #8
 80086b0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	4611      	mov	r1, r2
 80086bc:	4618      	mov	r0, r3
 80086be:	f004 f8c7 	bl	800c850 <USB_HC_Halt>
 80086c2:	e075      	b.n	80087b0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086da:	d134      	bne.n	8008746 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	0151      	lsls	r1, r2, #5
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	440a      	add	r2, r1
 80086f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086f6:	f043 0302 	orr.w	r3, r3, #2
 80086fa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	212c      	movs	r1, #44	; 0x2c
 8008702:	fb01 f303 	mul.w	r3, r1, r3
 8008706:	4413      	add	r3, r2
 8008708:	3361      	adds	r3, #97	; 0x61
 800870a:	2208      	movs	r2, #8
 800870c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	015a      	lsls	r2, r3, #5
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	4413      	add	r3, r2
 8008716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871a:	461a      	mov	r2, r3
 800871c:	2310      	movs	r3, #16
 800871e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	4413      	add	r3, r2
 8008728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800872c:	461a      	mov	r2, r3
 800872e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008732:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	b2d2      	uxtb	r2, r2
 800873c:	4611      	mov	r1, r2
 800873e:	4618      	mov	r0, r3
 8008740:	f004 f886 	bl	800c850 <USB_HC_Halt>
 8008744:	e034      	b.n	80087b0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	4413      	add	r3, r2
 800874e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008758:	2b80      	cmp	r3, #128	; 0x80
 800875a:	d129      	bne.n	80087b0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	4413      	add	r3, r2
 8008764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	0151      	lsls	r1, r2, #5
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	440a      	add	r2, r1
 8008772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008776:	f043 0302 	orr.w	r3, r3, #2
 800877a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	212c      	movs	r1, #44	; 0x2c
 8008782:	fb01 f303 	mul.w	r3, r1, r3
 8008786:	4413      	add	r3, r2
 8008788:	3361      	adds	r3, #97	; 0x61
 800878a:	2206      	movs	r2, #6
 800878c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	b2d2      	uxtb	r2, r2
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f004 f859 	bl	800c850 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087aa:	461a      	mov	r2, r3
 80087ac:	2380      	movs	r3, #128	; 0x80
 80087ae:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087c6:	d122      	bne.n	800880e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	0151      	lsls	r1, r2, #5
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	440a      	add	r2, r1
 80087de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087e2:	f043 0302 	orr.w	r3, r3, #2
 80087e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	b2d2      	uxtb	r2, r2
 80087f0:	4611      	mov	r1, r2
 80087f2:	4618      	mov	r0, r3
 80087f4:	f004 f82c 	bl	800c850 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008804:	461a      	mov	r2, r3
 8008806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800880a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800880c:	e2ba      	b.n	8008d84 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	4413      	add	r3, r2
 8008816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b01      	cmp	r3, #1
 8008822:	f040 811b 	bne.w	8008a5c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d019      	beq.n	8008862 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	212c      	movs	r1, #44	; 0x2c
 8008834:	fb01 f303 	mul.w	r3, r1, r3
 8008838:	4413      	add	r3, r2
 800883a:	3348      	adds	r3, #72	; 0x48
 800883c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	0159      	lsls	r1, r3, #5
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	440b      	add	r3, r1
 8008846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008850:	1ad2      	subs	r2, r2, r3
 8008852:	6879      	ldr	r1, [r7, #4]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	202c      	movs	r0, #44	; 0x2c
 8008858:	fb00 f303 	mul.w	r3, r0, r3
 800885c:	440b      	add	r3, r1
 800885e:	3350      	adds	r3, #80	; 0x50
 8008860:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	212c      	movs	r1, #44	; 0x2c
 8008868:	fb01 f303 	mul.w	r3, r1, r3
 800886c:	4413      	add	r3, r2
 800886e:	3361      	adds	r3, #97	; 0x61
 8008870:	2201      	movs	r2, #1
 8008872:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	212c      	movs	r1, #44	; 0x2c
 800887a:	fb01 f303 	mul.w	r3, r1, r3
 800887e:	4413      	add	r3, r2
 8008880:	335c      	adds	r3, #92	; 0x5c
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	4413      	add	r3, r2
 800888e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008892:	461a      	mov	r2, r3
 8008894:	2301      	movs	r3, #1
 8008896:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	212c      	movs	r1, #44	; 0x2c
 800889e:	fb01 f303 	mul.w	r3, r1, r3
 80088a2:	4413      	add	r3, r2
 80088a4:	333f      	adds	r3, #63	; 0x3f
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d009      	beq.n	80088c0 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	212c      	movs	r1, #44	; 0x2c
 80088b2:	fb01 f303 	mul.w	r3, r1, r3
 80088b6:	4413      	add	r3, r2
 80088b8:	333f      	adds	r3, #63	; 0x3f
 80088ba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d121      	bne.n	8008904 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	0151      	lsls	r1, r2, #5
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	440a      	add	r2, r1
 80088d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088da:	f043 0302 	orr.w	r3, r3, #2
 80088de:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	b2d2      	uxtb	r2, r2
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f003 ffb0 	bl	800c850 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088fc:	461a      	mov	r2, r3
 80088fe:	2310      	movs	r3, #16
 8008900:	6093      	str	r3, [r2, #8]
 8008902:	e066      	b.n	80089d2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	212c      	movs	r1, #44	; 0x2c
 800890a:	fb01 f303 	mul.w	r3, r1, r3
 800890e:	4413      	add	r3, r2
 8008910:	333f      	adds	r3, #63	; 0x3f
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	2b03      	cmp	r3, #3
 8008916:	d127      	bne.n	8008968 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	4413      	add	r3, r2
 8008920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	0151      	lsls	r1, r2, #5
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	440a      	add	r2, r1
 800892e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008932:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008936:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	212c      	movs	r1, #44	; 0x2c
 800893e:	fb01 f303 	mul.w	r3, r1, r3
 8008942:	4413      	add	r3, r2
 8008944:	3360      	adds	r3, #96	; 0x60
 8008946:	2201      	movs	r2, #1
 8008948:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	b2d9      	uxtb	r1, r3
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	202c      	movs	r0, #44	; 0x2c
 8008954:	fb00 f303 	mul.w	r3, r0, r3
 8008958:	4413      	add	r3, r2
 800895a:	3360      	adds	r3, #96	; 0x60
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f00d fa13 	bl	8015d8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8008966:	e034      	b.n	80089d2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	212c      	movs	r1, #44	; 0x2c
 800896e:	fb01 f303 	mul.w	r3, r1, r3
 8008972:	4413      	add	r3, r2
 8008974:	333f      	adds	r3, #63	; 0x3f
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d12a      	bne.n	80089d2 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	212c      	movs	r1, #44	; 0x2c
 8008982:	fb01 f303 	mul.w	r3, r1, r3
 8008986:	4413      	add	r3, r2
 8008988:	3360      	adds	r3, #96	; 0x60
 800898a:	2201      	movs	r2, #1
 800898c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	212c      	movs	r1, #44	; 0x2c
 8008994:	fb01 f303 	mul.w	r3, r1, r3
 8008998:	4413      	add	r3, r2
 800899a:	3354      	adds	r3, #84	; 0x54
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	f083 0301 	eor.w	r3, r3, #1
 80089a2:	b2d8      	uxtb	r0, r3
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	212c      	movs	r1, #44	; 0x2c
 80089aa:	fb01 f303 	mul.w	r3, r1, r3
 80089ae:	4413      	add	r3, r2
 80089b0:	3354      	adds	r3, #84	; 0x54
 80089b2:	4602      	mov	r2, r0
 80089b4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	b2d9      	uxtb	r1, r3
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	202c      	movs	r0, #44	; 0x2c
 80089c0:	fb00 f303 	mul.w	r3, r0, r3
 80089c4:	4413      	add	r3, r2
 80089c6:	3360      	adds	r3, #96	; 0x60
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f00d f9dd 	bl	8015d8c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d12b      	bne.n	8008a32 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	212c      	movs	r1, #44	; 0x2c
 80089e0:	fb01 f303 	mul.w	r3, r1, r3
 80089e4:	4413      	add	r3, r2
 80089e6:	3348      	adds	r3, #72	; 0x48
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6879      	ldr	r1, [r7, #4]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	202c      	movs	r0, #44	; 0x2c
 80089f0:	fb00 f202 	mul.w	r2, r0, r2
 80089f4:	440a      	add	r2, r1
 80089f6:	3240      	adds	r2, #64	; 0x40
 80089f8:	8812      	ldrh	r2, [r2, #0]
 80089fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 81be 	beq.w	8008d84 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	212c      	movs	r1, #44	; 0x2c
 8008a0e:	fb01 f303 	mul.w	r3, r1, r3
 8008a12:	4413      	add	r3, r2
 8008a14:	3354      	adds	r3, #84	; 0x54
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	f083 0301 	eor.w	r3, r3, #1
 8008a1c:	b2d8      	uxtb	r0, r3
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	212c      	movs	r1, #44	; 0x2c
 8008a24:	fb01 f303 	mul.w	r3, r1, r3
 8008a28:	4413      	add	r3, r2
 8008a2a:	3354      	adds	r3, #84	; 0x54
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	701a      	strb	r2, [r3, #0]
}
 8008a30:	e1a8      	b.n	8008d84 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	212c      	movs	r1, #44	; 0x2c
 8008a38:	fb01 f303 	mul.w	r3, r1, r3
 8008a3c:	4413      	add	r3, r2
 8008a3e:	3354      	adds	r3, #84	; 0x54
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	f083 0301 	eor.w	r3, r3, #1
 8008a46:	b2d8      	uxtb	r0, r3
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	212c      	movs	r1, #44	; 0x2c
 8008a4e:	fb01 f303 	mul.w	r3, r1, r3
 8008a52:	4413      	add	r3, r2
 8008a54:	3354      	adds	r3, #84	; 0x54
 8008a56:	4602      	mov	r2, r0
 8008a58:	701a      	strb	r2, [r3, #0]
}
 8008a5a:	e193      	b.n	8008d84 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	f040 8106 	bne.w	8008c80 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	0151      	lsls	r1, r2, #5
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	440a      	add	r2, r1
 8008a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a8e:	f023 0302 	bic.w	r3, r3, #2
 8008a92:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	212c      	movs	r1, #44	; 0x2c
 8008a9a:	fb01 f303 	mul.w	r3, r1, r3
 8008a9e:	4413      	add	r3, r2
 8008aa0:	3361      	adds	r3, #97	; 0x61
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d109      	bne.n	8008abc <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	212c      	movs	r1, #44	; 0x2c
 8008aae:	fb01 f303 	mul.w	r3, r1, r3
 8008ab2:	4413      	add	r3, r2
 8008ab4:	3360      	adds	r3, #96	; 0x60
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	701a      	strb	r2, [r3, #0]
 8008aba:	e0c9      	b.n	8008c50 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	212c      	movs	r1, #44	; 0x2c
 8008ac2:	fb01 f303 	mul.w	r3, r1, r3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	3361      	adds	r3, #97	; 0x61
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b05      	cmp	r3, #5
 8008ace:	d109      	bne.n	8008ae4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	212c      	movs	r1, #44	; 0x2c
 8008ad6:	fb01 f303 	mul.w	r3, r1, r3
 8008ada:	4413      	add	r3, r2
 8008adc:	3360      	adds	r3, #96	; 0x60
 8008ade:	2205      	movs	r2, #5
 8008ae0:	701a      	strb	r2, [r3, #0]
 8008ae2:	e0b5      	b.n	8008c50 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	212c      	movs	r1, #44	; 0x2c
 8008aea:	fb01 f303 	mul.w	r3, r1, r3
 8008aee:	4413      	add	r3, r2
 8008af0:	3361      	adds	r3, #97	; 0x61
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b06      	cmp	r3, #6
 8008af6:	d009      	beq.n	8008b0c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	212c      	movs	r1, #44	; 0x2c
 8008afe:	fb01 f303 	mul.w	r3, r1, r3
 8008b02:	4413      	add	r3, r2
 8008b04:	3361      	adds	r3, #97	; 0x61
 8008b06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008b08:	2b08      	cmp	r3, #8
 8008b0a:	d150      	bne.n	8008bae <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	212c      	movs	r1, #44	; 0x2c
 8008b12:	fb01 f303 	mul.w	r3, r1, r3
 8008b16:	4413      	add	r3, r2
 8008b18:	335c      	adds	r3, #92	; 0x5c
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	1c5a      	adds	r2, r3, #1
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	202c      	movs	r0, #44	; 0x2c
 8008b24:	fb00 f303 	mul.w	r3, r0, r3
 8008b28:	440b      	add	r3, r1
 8008b2a:	335c      	adds	r3, #92	; 0x5c
 8008b2c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	212c      	movs	r1, #44	; 0x2c
 8008b34:	fb01 f303 	mul.w	r3, r1, r3
 8008b38:	4413      	add	r3, r2
 8008b3a:	335c      	adds	r3, #92	; 0x5c
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d912      	bls.n	8008b68 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	212c      	movs	r1, #44	; 0x2c
 8008b48:	fb01 f303 	mul.w	r3, r1, r3
 8008b4c:	4413      	add	r3, r2
 8008b4e:	335c      	adds	r3, #92	; 0x5c
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	212c      	movs	r1, #44	; 0x2c
 8008b5a:	fb01 f303 	mul.w	r3, r1, r3
 8008b5e:	4413      	add	r3, r2
 8008b60:	3360      	adds	r3, #96	; 0x60
 8008b62:	2204      	movs	r2, #4
 8008b64:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008b66:	e073      	b.n	8008c50 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	212c      	movs	r1, #44	; 0x2c
 8008b6e:	fb01 f303 	mul.w	r3, r1, r3
 8008b72:	4413      	add	r3, r2
 8008b74:	3360      	adds	r3, #96	; 0x60
 8008b76:	2202      	movs	r2, #2
 8008b78:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b90:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b98:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008bac:	e050      	b.n	8008c50 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	212c      	movs	r1, #44	; 0x2c
 8008bb4:	fb01 f303 	mul.w	r3, r1, r3
 8008bb8:	4413      	add	r3, r2
 8008bba:	3361      	adds	r3, #97	; 0x61
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d122      	bne.n	8008c08 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	212c      	movs	r1, #44	; 0x2c
 8008bc8:	fb01 f303 	mul.w	r3, r1, r3
 8008bcc:	4413      	add	r3, r2
 8008bce:	3360      	adds	r3, #96	; 0x60
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008bea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bf2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c00:	461a      	mov	r2, r3
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	e023      	b.n	8008c50 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	212c      	movs	r1, #44	; 0x2c
 8008c0e:	fb01 f303 	mul.w	r3, r1, r3
 8008c12:	4413      	add	r3, r2
 8008c14:	3361      	adds	r3, #97	; 0x61
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b07      	cmp	r3, #7
 8008c1a:	d119      	bne.n	8008c50 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	212c      	movs	r1, #44	; 0x2c
 8008c22:	fb01 f303 	mul.w	r3, r1, r3
 8008c26:	4413      	add	r3, r2
 8008c28:	335c      	adds	r3, #92	; 0x5c
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	202c      	movs	r0, #44	; 0x2c
 8008c34:	fb00 f303 	mul.w	r3, r0, r3
 8008c38:	440b      	add	r3, r1
 8008c3a:	335c      	adds	r3, #92	; 0x5c
 8008c3c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	212c      	movs	r1, #44	; 0x2c
 8008c44:	fb01 f303 	mul.w	r3, r1, r3
 8008c48:	4413      	add	r3, r2
 8008c4a:	3360      	adds	r3, #96	; 0x60
 8008c4c:	2204      	movs	r2, #4
 8008c4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	2302      	movs	r3, #2
 8008c60:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	b2d9      	uxtb	r1, r3
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	202c      	movs	r0, #44	; 0x2c
 8008c6c:	fb00 f303 	mul.w	r3, r0, r3
 8008c70:	4413      	add	r3, r2
 8008c72:	3360      	adds	r3, #96	; 0x60
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f00d f887 	bl	8015d8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008c7e:	e081      	b.n	8008d84 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f003 0310 	and.w	r3, r3, #16
 8008c92:	2b10      	cmp	r3, #16
 8008c94:	d176      	bne.n	8008d84 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	212c      	movs	r1, #44	; 0x2c
 8008c9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	333f      	adds	r3, #63	; 0x3f
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d121      	bne.n	8008cee <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	212c      	movs	r1, #44	; 0x2c
 8008cb0:	fb01 f303 	mul.w	r3, r1, r3
 8008cb4:	4413      	add	r3, r2
 8008cb6:	335c      	adds	r3, #92	; 0x5c
 8008cb8:	2200      	movs	r2, #0
 8008cba:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	0151      	lsls	r1, r2, #5
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	440a      	add	r2, r1
 8008cd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cd6:	f043 0302 	orr.w	r3, r3, #2
 8008cda:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f003 fdb2 	bl	800c850 <USB_HC_Halt>
 8008cec:	e041      	b.n	8008d72 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	212c      	movs	r1, #44	; 0x2c
 8008cf4:	fb01 f303 	mul.w	r3, r1, r3
 8008cf8:	4413      	add	r3, r2
 8008cfa:	333f      	adds	r3, #63	; 0x3f
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d009      	beq.n	8008d16 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	212c      	movs	r1, #44	; 0x2c
 8008d08:	fb01 f303 	mul.w	r3, r1, r3
 8008d0c:	4413      	add	r3, r2
 8008d0e:	333f      	adds	r3, #63	; 0x3f
 8008d10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d12d      	bne.n	8008d72 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	212c      	movs	r1, #44	; 0x2c
 8008d1c:	fb01 f303 	mul.w	r3, r1, r3
 8008d20:	4413      	add	r3, r2
 8008d22:	335c      	adds	r3, #92	; 0x5c
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d120      	bne.n	8008d72 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	212c      	movs	r1, #44	; 0x2c
 8008d36:	fb01 f303 	mul.w	r3, r1, r3
 8008d3a:	4413      	add	r3, r2
 8008d3c:	3361      	adds	r3, #97	; 0x61
 8008d3e:	2203      	movs	r2, #3
 8008d40:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	015a      	lsls	r2, r3, #5
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	4413      	add	r3, r2
 8008d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	0151      	lsls	r1, r2, #5
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	440a      	add	r2, r1
 8008d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d5c:	f043 0302 	orr.w	r3, r3, #2
 8008d60:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	b2d2      	uxtb	r2, r2
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f003 fd6f 	bl	800c850 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d7e:	461a      	mov	r2, r3
 8008d80:	2310      	movs	r3, #16
 8008d82:	6093      	str	r3, [r2, #8]
}
 8008d84:	bf00      	nop
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8008da2:	78fb      	ldrb	r3, [r7, #3]
 8008da4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	015a      	lsls	r2, r3, #5
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	4413      	add	r3, r2
 8008dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	d119      	bne.n	8008df0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dc8:	461a      	mov	r2, r3
 8008dca:	2304      	movs	r3, #4
 8008dcc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	015a      	lsls	r2, r3, #5
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	0151      	lsls	r1, r2, #5
 8008de0:	69ba      	ldr	r2, [r7, #24]
 8008de2:	440a      	add	r2, r1
 8008de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008de8:	f043 0302 	orr.w	r3, r3, #2
 8008dec:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8008dee:	e3ca      	b.n	8009586 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f003 0320 	and.w	r3, r3, #32
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d13e      	bne.n	8008e84 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e12:	461a      	mov	r2, r3
 8008e14:	2320      	movs	r3, #32
 8008e16:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	212c      	movs	r1, #44	; 0x2c
 8008e1e:	fb01 f303 	mul.w	r3, r1, r3
 8008e22:	4413      	add	r3, r2
 8008e24:	333d      	adds	r3, #61	; 0x3d
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	f040 83ac 	bne.w	8009586 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	212c      	movs	r1, #44	; 0x2c
 8008e34:	fb01 f303 	mul.w	r3, r1, r3
 8008e38:	4413      	add	r3, r2
 8008e3a:	333d      	adds	r3, #61	; 0x3d
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	212c      	movs	r1, #44	; 0x2c
 8008e46:	fb01 f303 	mul.w	r3, r1, r3
 8008e4a:	4413      	add	r3, r2
 8008e4c:	3360      	adds	r3, #96	; 0x60
 8008e4e:	2202      	movs	r2, #2
 8008e50:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	0151      	lsls	r1, r2, #5
 8008e64:	69ba      	ldr	r2, [r7, #24]
 8008e66:	440a      	add	r2, r1
 8008e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e6c:	f043 0302 	orr.w	r3, r3, #2
 8008e70:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	b2d2      	uxtb	r2, r2
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f003 fce7 	bl	800c850 <USB_HC_Halt>
}
 8008e82:	e380      	b.n	8009586 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	015a      	lsls	r2, r3, #5
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e9a:	d122      	bne.n	8008ee2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	0151      	lsls	r1, r2, #5
 8008eae:	69ba      	ldr	r2, [r7, #24]
 8008eb0:	440a      	add	r2, r1
 8008eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eb6:	f043 0302 	orr.w	r3, r3, #2
 8008eba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	b2d2      	uxtb	r2, r2
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f003 fcc2 	bl	800c850 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ed8:	461a      	mov	r2, r3
 8008eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ede:	6093      	str	r3, [r2, #8]
}
 8008ee0:	e351      	b.n	8009586 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d150      	bne.n	8008f9a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	212c      	movs	r1, #44	; 0x2c
 8008efe:	fb01 f303 	mul.w	r3, r1, r3
 8008f02:	4413      	add	r3, r2
 8008f04:	335c      	adds	r3, #92	; 0x5c
 8008f06:	2200      	movs	r2, #0
 8008f08:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1c:	2b40      	cmp	r3, #64	; 0x40
 8008f1e:	d111      	bne.n	8008f44 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	212c      	movs	r1, #44	; 0x2c
 8008f26:	fb01 f303 	mul.w	r3, r1, r3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	333d      	adds	r3, #61	; 0x3d
 8008f2e:	2201      	movs	r2, #1
 8008f30:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f3e:	461a      	mov	r2, r3
 8008f40:	2340      	movs	r3, #64	; 0x40
 8008f42:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	0151      	lsls	r1, r2, #5
 8008f56:	69ba      	ldr	r2, [r7, #24]
 8008f58:	440a      	add	r2, r1
 8008f5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f5e:	f043 0302 	orr.w	r3, r3, #2
 8008f62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	b2d2      	uxtb	r2, r2
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f003 fc6e 	bl	800c850 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	015a      	lsls	r2, r3, #5
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f80:	461a      	mov	r2, r3
 8008f82:	2301      	movs	r3, #1
 8008f84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	212c      	movs	r1, #44	; 0x2c
 8008f8c:	fb01 f303 	mul.w	r3, r1, r3
 8008f90:	4413      	add	r3, r2
 8008f92:	3361      	adds	r3, #97	; 0x61
 8008f94:	2201      	movs	r2, #1
 8008f96:	701a      	strb	r2, [r3, #0]
}
 8008f98:	e2f5      	b.n	8009586 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fac:	2b40      	cmp	r3, #64	; 0x40
 8008fae:	d13c      	bne.n	800902a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	212c      	movs	r1, #44	; 0x2c
 8008fb6:	fb01 f303 	mul.w	r3, r1, r3
 8008fba:	4413      	add	r3, r2
 8008fbc:	3361      	adds	r3, #97	; 0x61
 8008fbe:	2204      	movs	r2, #4
 8008fc0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	212c      	movs	r1, #44	; 0x2c
 8008fc8:	fb01 f303 	mul.w	r3, r1, r3
 8008fcc:	4413      	add	r3, r2
 8008fce:	333d      	adds	r3, #61	; 0x3d
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	212c      	movs	r1, #44	; 0x2c
 8008fda:	fb01 f303 	mul.w	r3, r1, r3
 8008fde:	4413      	add	r3, r2
 8008fe0:	335c      	adds	r3, #92	; 0x5c
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	0151      	lsls	r1, r2, #5
 8008ff8:	69ba      	ldr	r2, [r7, #24]
 8008ffa:	440a      	add	r2, r1
 8008ffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009000:	f043 0302 	orr.w	r3, r3, #2
 8009004:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	b2d2      	uxtb	r2, r2
 800900e:	4611      	mov	r1, r2
 8009010:	4618      	mov	r0, r3
 8009012:	f003 fc1d 	bl	800c850 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	4413      	add	r3, r2
 800901e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009022:	461a      	mov	r2, r3
 8009024:	2340      	movs	r3, #64	; 0x40
 8009026:	6093      	str	r3, [r2, #8]
}
 8009028:	e2ad      	b.n	8009586 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	4413      	add	r3, r2
 8009032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f003 0308 	and.w	r3, r3, #8
 800903c:	2b08      	cmp	r3, #8
 800903e:	d12a      	bne.n	8009096 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	4413      	add	r3, r2
 8009048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800904c:	461a      	mov	r2, r3
 800904e:	2308      	movs	r3, #8
 8009050:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	015a      	lsls	r2, r3, #5
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	4413      	add	r3, r2
 800905a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	0151      	lsls	r1, r2, #5
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	440a      	add	r2, r1
 8009068:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800906c:	f043 0302 	orr.w	r3, r3, #2
 8009070:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	b2d2      	uxtb	r2, r2
 800907a:	4611      	mov	r1, r2
 800907c:	4618      	mov	r0, r3
 800907e:	f003 fbe7 	bl	800c850 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	212c      	movs	r1, #44	; 0x2c
 8009088:	fb01 f303 	mul.w	r3, r1, r3
 800908c:	4413      	add	r3, r2
 800908e:	3361      	adds	r3, #97	; 0x61
 8009090:	2205      	movs	r2, #5
 8009092:	701a      	strb	r2, [r3, #0]
}
 8009094:	e277      	b.n	8009586 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	4413      	add	r3, r2
 800909e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f003 0310 	and.w	r3, r3, #16
 80090a8:	2b10      	cmp	r3, #16
 80090aa:	d150      	bne.n	800914e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	212c      	movs	r1, #44	; 0x2c
 80090b2:	fb01 f303 	mul.w	r3, r1, r3
 80090b6:	4413      	add	r3, r2
 80090b8:	335c      	adds	r3, #92	; 0x5c
 80090ba:	2200      	movs	r2, #0
 80090bc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	212c      	movs	r1, #44	; 0x2c
 80090c4:	fb01 f303 	mul.w	r3, r1, r3
 80090c8:	4413      	add	r3, r2
 80090ca:	3361      	adds	r3, #97	; 0x61
 80090cc:	2203      	movs	r2, #3
 80090ce:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	212c      	movs	r1, #44	; 0x2c
 80090d6:	fb01 f303 	mul.w	r3, r1, r3
 80090da:	4413      	add	r3, r2
 80090dc:	333d      	adds	r3, #61	; 0x3d
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d112      	bne.n	800910a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	212c      	movs	r1, #44	; 0x2c
 80090ea:	fb01 f303 	mul.w	r3, r1, r3
 80090ee:	4413      	add	r3, r2
 80090f0:	333c      	adds	r3, #60	; 0x3c
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d108      	bne.n	800910a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	212c      	movs	r1, #44	; 0x2c
 80090fe:	fb01 f303 	mul.w	r3, r1, r3
 8009102:	4413      	add	r3, r2
 8009104:	333d      	adds	r3, #61	; 0x3d
 8009106:	2201      	movs	r2, #1
 8009108:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	4413      	add	r3, r2
 8009112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	0151      	lsls	r1, r2, #5
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	440a      	add	r2, r1
 8009120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009124:	f043 0302 	orr.w	r3, r3, #2
 8009128:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	b2d2      	uxtb	r2, r2
 8009132:	4611      	mov	r1, r2
 8009134:	4618      	mov	r0, r3
 8009136:	f003 fb8b 	bl	800c850 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	4413      	add	r3, r2
 8009142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009146:	461a      	mov	r2, r3
 8009148:	2310      	movs	r3, #16
 800914a:	6093      	str	r3, [r2, #8]
}
 800914c:	e21b      	b.n	8009586 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	4413      	add	r3, r2
 8009156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009160:	2b80      	cmp	r3, #128	; 0x80
 8009162:	d174      	bne.n	800924e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d121      	bne.n	80091b0 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	212c      	movs	r1, #44	; 0x2c
 8009172:	fb01 f303 	mul.w	r3, r1, r3
 8009176:	4413      	add	r3, r2
 8009178:	3361      	adds	r3, #97	; 0x61
 800917a:	2206      	movs	r2, #6
 800917c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	4413      	add	r3, r2
 8009186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	0151      	lsls	r1, r2, #5
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	440a      	add	r2, r1
 8009194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009198:	f043 0302 	orr.w	r3, r3, #2
 800919c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	b2d2      	uxtb	r2, r2
 80091a6:	4611      	mov	r1, r2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f003 fb51 	bl	800c850 <USB_HC_Halt>
 80091ae:	e044      	b.n	800923a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	212c      	movs	r1, #44	; 0x2c
 80091b6:	fb01 f303 	mul.w	r3, r1, r3
 80091ba:	4413      	add	r3, r2
 80091bc:	335c      	adds	r3, #92	; 0x5c
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	202c      	movs	r0, #44	; 0x2c
 80091c8:	fb00 f303 	mul.w	r3, r0, r3
 80091cc:	440b      	add	r3, r1
 80091ce:	335c      	adds	r3, #92	; 0x5c
 80091d0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	212c      	movs	r1, #44	; 0x2c
 80091d8:	fb01 f303 	mul.w	r3, r1, r3
 80091dc:	4413      	add	r3, r2
 80091de:	335c      	adds	r3, #92	; 0x5c
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d920      	bls.n	8009228 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	212c      	movs	r1, #44	; 0x2c
 80091ec:	fb01 f303 	mul.w	r3, r1, r3
 80091f0:	4413      	add	r3, r2
 80091f2:	335c      	adds	r3, #92	; 0x5c
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	212c      	movs	r1, #44	; 0x2c
 80091fe:	fb01 f303 	mul.w	r3, r1, r3
 8009202:	4413      	add	r3, r2
 8009204:	3360      	adds	r3, #96	; 0x60
 8009206:	2204      	movs	r2, #4
 8009208:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	b2d9      	uxtb	r1, r3
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	202c      	movs	r0, #44	; 0x2c
 8009214:	fb00 f303 	mul.w	r3, r0, r3
 8009218:	4413      	add	r3, r2
 800921a:	3360      	adds	r3, #96	; 0x60
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f00c fdb3 	bl	8015d8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8009226:	e008      	b.n	800923a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	212c      	movs	r1, #44	; 0x2c
 800922e:	fb01 f303 	mul.w	r3, r1, r3
 8009232:	4413      	add	r3, r2
 8009234:	3360      	adds	r3, #96	; 0x60
 8009236:	2202      	movs	r2, #2
 8009238:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	4413      	add	r3, r2
 8009242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009246:	461a      	mov	r2, r3
 8009248:	2380      	movs	r3, #128	; 0x80
 800924a:	6093      	str	r3, [r2, #8]
}
 800924c:	e19b      	b.n	8009586 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	4413      	add	r3, r2
 8009256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009264:	d134      	bne.n	80092d0 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	4413      	add	r3, r2
 800926e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	0151      	lsls	r1, r2, #5
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	440a      	add	r2, r1
 800927c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009280:	f043 0302 	orr.w	r3, r3, #2
 8009284:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	b2d2      	uxtb	r2, r2
 800928e:	4611      	mov	r1, r2
 8009290:	4618      	mov	r0, r3
 8009292:	f003 fadd 	bl	800c850 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	4413      	add	r3, r2
 800929e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092a2:	461a      	mov	r2, r3
 80092a4:	2310      	movs	r3, #16
 80092a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092b4:	461a      	mov	r2, r3
 80092b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	212c      	movs	r1, #44	; 0x2c
 80092c2:	fb01 f303 	mul.w	r3, r1, r3
 80092c6:	4413      	add	r3, r2
 80092c8:	3361      	adds	r3, #97	; 0x61
 80092ca:	2208      	movs	r2, #8
 80092cc:	701a      	strb	r2, [r3, #0]
}
 80092ce:	e15a      	b.n	8009586 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f003 0302 	and.w	r3, r3, #2
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	f040 814f 	bne.w	8009586 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	0151      	lsls	r1, r2, #5
 80092fa:	69ba      	ldr	r2, [r7, #24]
 80092fc:	440a      	add	r2, r1
 80092fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009302:	f023 0302 	bic.w	r3, r3, #2
 8009306:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	212c      	movs	r1, #44	; 0x2c
 800930e:	fb01 f303 	mul.w	r3, r1, r3
 8009312:	4413      	add	r3, r2
 8009314:	3361      	adds	r3, #97	; 0x61
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d17d      	bne.n	8009418 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	212c      	movs	r1, #44	; 0x2c
 8009322:	fb01 f303 	mul.w	r3, r1, r3
 8009326:	4413      	add	r3, r2
 8009328:	3360      	adds	r3, #96	; 0x60
 800932a:	2201      	movs	r2, #1
 800932c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	212c      	movs	r1, #44	; 0x2c
 8009334:	fb01 f303 	mul.w	r3, r1, r3
 8009338:	4413      	add	r3, r2
 800933a:	333f      	adds	r3, #63	; 0x3f
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b02      	cmp	r3, #2
 8009340:	d00a      	beq.n	8009358 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	212c      	movs	r1, #44	; 0x2c
 8009348:	fb01 f303 	mul.w	r3, r1, r3
 800934c:	4413      	add	r3, r2
 800934e:	333f      	adds	r3, #63	; 0x3f
 8009350:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009352:	2b03      	cmp	r3, #3
 8009354:	f040 8100 	bne.w	8009558 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d113      	bne.n	8009388 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	212c      	movs	r1, #44	; 0x2c
 8009366:	fb01 f303 	mul.w	r3, r1, r3
 800936a:	4413      	add	r3, r2
 800936c:	3355      	adds	r3, #85	; 0x55
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	f083 0301 	eor.w	r3, r3, #1
 8009374:	b2d8      	uxtb	r0, r3
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	212c      	movs	r1, #44	; 0x2c
 800937c:	fb01 f303 	mul.w	r3, r1, r3
 8009380:	4413      	add	r3, r2
 8009382:	3355      	adds	r3, #85	; 0x55
 8009384:	4602      	mov	r2, r0
 8009386:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	2b01      	cmp	r3, #1
 800938e:	f040 80e3 	bne.w	8009558 <HCD_HC_OUT_IRQHandler+0x7cc>
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	212c      	movs	r1, #44	; 0x2c
 8009398:	fb01 f303 	mul.w	r3, r1, r3
 800939c:	4413      	add	r3, r2
 800939e:	334c      	adds	r3, #76	; 0x4c
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 80d8 	beq.w	8009558 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	212c      	movs	r1, #44	; 0x2c
 80093ae:	fb01 f303 	mul.w	r3, r1, r3
 80093b2:	4413      	add	r3, r2
 80093b4:	334c      	adds	r3, #76	; 0x4c
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6879      	ldr	r1, [r7, #4]
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	202c      	movs	r0, #44	; 0x2c
 80093be:	fb00 f202 	mul.w	r2, r0, r2
 80093c2:	440a      	add	r2, r1
 80093c4:	3240      	adds	r2, #64	; 0x40
 80093c6:	8812      	ldrh	r2, [r2, #0]
 80093c8:	4413      	add	r3, r2
 80093ca:	3b01      	subs	r3, #1
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	202c      	movs	r0, #44	; 0x2c
 80093d2:	fb00 f202 	mul.w	r2, r0, r2
 80093d6:	440a      	add	r2, r1
 80093d8:	3240      	adds	r2, #64	; 0x40
 80093da:	8812      	ldrh	r2, [r2, #0]
 80093dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 80b5 	beq.w	8009558 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	212c      	movs	r1, #44	; 0x2c
 80093f4:	fb01 f303 	mul.w	r3, r1, r3
 80093f8:	4413      	add	r3, r2
 80093fa:	3355      	adds	r3, #85	; 0x55
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	f083 0301 	eor.w	r3, r3, #1
 8009402:	b2d8      	uxtb	r0, r3
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	212c      	movs	r1, #44	; 0x2c
 800940a:	fb01 f303 	mul.w	r3, r1, r3
 800940e:	4413      	add	r3, r2
 8009410:	3355      	adds	r3, #85	; 0x55
 8009412:	4602      	mov	r2, r0
 8009414:	701a      	strb	r2, [r3, #0]
 8009416:	e09f      	b.n	8009558 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	212c      	movs	r1, #44	; 0x2c
 800941e:	fb01 f303 	mul.w	r3, r1, r3
 8009422:	4413      	add	r3, r2
 8009424:	3361      	adds	r3, #97	; 0x61
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b03      	cmp	r3, #3
 800942a:	d109      	bne.n	8009440 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	212c      	movs	r1, #44	; 0x2c
 8009432:	fb01 f303 	mul.w	r3, r1, r3
 8009436:	4413      	add	r3, r2
 8009438:	3360      	adds	r3, #96	; 0x60
 800943a:	2202      	movs	r2, #2
 800943c:	701a      	strb	r2, [r3, #0]
 800943e:	e08b      	b.n	8009558 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	212c      	movs	r1, #44	; 0x2c
 8009446:	fb01 f303 	mul.w	r3, r1, r3
 800944a:	4413      	add	r3, r2
 800944c:	3361      	adds	r3, #97	; 0x61
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b04      	cmp	r3, #4
 8009452:	d109      	bne.n	8009468 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	212c      	movs	r1, #44	; 0x2c
 800945a:	fb01 f303 	mul.w	r3, r1, r3
 800945e:	4413      	add	r3, r2
 8009460:	3360      	adds	r3, #96	; 0x60
 8009462:	2202      	movs	r2, #2
 8009464:	701a      	strb	r2, [r3, #0]
 8009466:	e077      	b.n	8009558 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	212c      	movs	r1, #44	; 0x2c
 800946e:	fb01 f303 	mul.w	r3, r1, r3
 8009472:	4413      	add	r3, r2
 8009474:	3361      	adds	r3, #97	; 0x61
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	2b05      	cmp	r3, #5
 800947a:	d109      	bne.n	8009490 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	212c      	movs	r1, #44	; 0x2c
 8009482:	fb01 f303 	mul.w	r3, r1, r3
 8009486:	4413      	add	r3, r2
 8009488:	3360      	adds	r3, #96	; 0x60
 800948a:	2205      	movs	r2, #5
 800948c:	701a      	strb	r2, [r3, #0]
 800948e:	e063      	b.n	8009558 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	212c      	movs	r1, #44	; 0x2c
 8009496:	fb01 f303 	mul.w	r3, r1, r3
 800949a:	4413      	add	r3, r2
 800949c:	3361      	adds	r3, #97	; 0x61
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	2b06      	cmp	r3, #6
 80094a2:	d009      	beq.n	80094b8 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	212c      	movs	r1, #44	; 0x2c
 80094aa:	fb01 f303 	mul.w	r3, r1, r3
 80094ae:	4413      	add	r3, r2
 80094b0:	3361      	adds	r3, #97	; 0x61
 80094b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80094b4:	2b08      	cmp	r3, #8
 80094b6:	d14f      	bne.n	8009558 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	212c      	movs	r1, #44	; 0x2c
 80094be:	fb01 f303 	mul.w	r3, r1, r3
 80094c2:	4413      	add	r3, r2
 80094c4:	335c      	adds	r3, #92	; 0x5c
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	1c5a      	adds	r2, r3, #1
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	202c      	movs	r0, #44	; 0x2c
 80094d0:	fb00 f303 	mul.w	r3, r0, r3
 80094d4:	440b      	add	r3, r1
 80094d6:	335c      	adds	r3, #92	; 0x5c
 80094d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	212c      	movs	r1, #44	; 0x2c
 80094e0:	fb01 f303 	mul.w	r3, r1, r3
 80094e4:	4413      	add	r3, r2
 80094e6:	335c      	adds	r3, #92	; 0x5c
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d912      	bls.n	8009514 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	212c      	movs	r1, #44	; 0x2c
 80094f4:	fb01 f303 	mul.w	r3, r1, r3
 80094f8:	4413      	add	r3, r2
 80094fa:	335c      	adds	r3, #92	; 0x5c
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	212c      	movs	r1, #44	; 0x2c
 8009506:	fb01 f303 	mul.w	r3, r1, r3
 800950a:	4413      	add	r3, r2
 800950c:	3360      	adds	r3, #96	; 0x60
 800950e:	2204      	movs	r2, #4
 8009510:	701a      	strb	r2, [r3, #0]
 8009512:	e021      	b.n	8009558 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	212c      	movs	r1, #44	; 0x2c
 800951a:	fb01 f303 	mul.w	r3, r1, r3
 800951e:	4413      	add	r3, r2
 8009520:	3360      	adds	r3, #96	; 0x60
 8009522:	2202      	movs	r2, #2
 8009524:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	4413      	add	r3, r2
 800952e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800953c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009544:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	4413      	add	r3, r2
 800954e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009552:	461a      	mov	r2, r3
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	4413      	add	r3, r2
 8009560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009564:	461a      	mov	r2, r3
 8009566:	2302      	movs	r3, #2
 8009568:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	b2d9      	uxtb	r1, r3
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	202c      	movs	r0, #44	; 0x2c
 8009574:	fb00 f303 	mul.w	r3, r0, r3
 8009578:	4413      	add	r3, r2
 800957a:	3360      	adds	r3, #96	; 0x60
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f00c fc03 	bl	8015d8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8009586:	bf00      	nop
 8009588:	3720      	adds	r7, #32
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b08a      	sub	sp, #40	; 0x28
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	f003 030f 	and.w	r3, r3, #15
 80095ae:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	0c5b      	lsrs	r3, r3, #17
 80095b4:	f003 030f 	and.w	r3, r3, #15
 80095b8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	091b      	lsrs	r3, r3, #4
 80095be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095c2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d004      	beq.n	80095d4 <HCD_RXQLVL_IRQHandler+0x46>
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	2b05      	cmp	r3, #5
 80095ce:	f000 80a9 	beq.w	8009724 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80095d2:	e0aa      	b.n	800972a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 80a6 	beq.w	8009728 <HCD_RXQLVL_IRQHandler+0x19a>
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	212c      	movs	r1, #44	; 0x2c
 80095e2:	fb01 f303 	mul.w	r3, r1, r3
 80095e6:	4413      	add	r3, r2
 80095e8:	3344      	adds	r3, #68	; 0x44
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 809b 	beq.w	8009728 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	212c      	movs	r1, #44	; 0x2c
 80095f8:	fb01 f303 	mul.w	r3, r1, r3
 80095fc:	4413      	add	r3, r2
 80095fe:	3350      	adds	r3, #80	; 0x50
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	441a      	add	r2, r3
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	202c      	movs	r0, #44	; 0x2c
 800960c:	fb00 f303 	mul.w	r3, r0, r3
 8009610:	440b      	add	r3, r1
 8009612:	334c      	adds	r3, #76	; 0x4c
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	429a      	cmp	r2, r3
 8009618:	d87a      	bhi.n	8009710 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	212c      	movs	r1, #44	; 0x2c
 8009624:	fb01 f303 	mul.w	r3, r1, r3
 8009628:	4413      	add	r3, r2
 800962a:	3344      	adds	r3, #68	; 0x44
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	b292      	uxth	r2, r2
 8009632:	4619      	mov	r1, r3
 8009634:	f002 fc8d 	bl	800bf52 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	212c      	movs	r1, #44	; 0x2c
 800963e:	fb01 f303 	mul.w	r3, r1, r3
 8009642:	4413      	add	r3, r2
 8009644:	3344      	adds	r3, #68	; 0x44
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	441a      	add	r2, r3
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	202c      	movs	r0, #44	; 0x2c
 8009652:	fb00 f303 	mul.w	r3, r0, r3
 8009656:	440b      	add	r3, r1
 8009658:	3344      	adds	r3, #68	; 0x44
 800965a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	212c      	movs	r1, #44	; 0x2c
 8009662:	fb01 f303 	mul.w	r3, r1, r3
 8009666:	4413      	add	r3, r2
 8009668:	3350      	adds	r3, #80	; 0x50
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	441a      	add	r2, r3
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	202c      	movs	r0, #44	; 0x2c
 8009676:	fb00 f303 	mul.w	r3, r0, r3
 800967a:	440b      	add	r3, r1
 800967c:	3350      	adds	r3, #80	; 0x50
 800967e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	4413      	add	r3, r2
 8009688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	0cdb      	lsrs	r3, r3, #19
 8009690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009694:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	212c      	movs	r1, #44	; 0x2c
 800969c:	fb01 f303 	mul.w	r3, r1, r3
 80096a0:	4413      	add	r3, r2
 80096a2:	3340      	adds	r3, #64	; 0x40
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d13c      	bne.n	8009728 <HCD_RXQLVL_IRQHandler+0x19a>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d039      	beq.n	8009728 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096ca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096d2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	6a3b      	ldr	r3, [r7, #32]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096e0:	461a      	mov	r2, r3
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	212c      	movs	r1, #44	; 0x2c
 80096ec:	fb01 f303 	mul.w	r3, r1, r3
 80096f0:	4413      	add	r3, r2
 80096f2:	3354      	adds	r3, #84	; 0x54
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	f083 0301 	eor.w	r3, r3, #1
 80096fa:	b2d8      	uxtb	r0, r3
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	212c      	movs	r1, #44	; 0x2c
 8009702:	fb01 f303 	mul.w	r3, r1, r3
 8009706:	4413      	add	r3, r2
 8009708:	3354      	adds	r3, #84	; 0x54
 800970a:	4602      	mov	r2, r0
 800970c:	701a      	strb	r2, [r3, #0]
      break;
 800970e:	e00b      	b.n	8009728 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	212c      	movs	r1, #44	; 0x2c
 8009716:	fb01 f303 	mul.w	r3, r1, r3
 800971a:	4413      	add	r3, r2
 800971c:	3360      	adds	r3, #96	; 0x60
 800971e:	2204      	movs	r2, #4
 8009720:	701a      	strb	r2, [r3, #0]
      break;
 8009722:	e001      	b.n	8009728 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8009724:	bf00      	nop
 8009726:	e000      	b.n	800972a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8009728:	bf00      	nop
  }
}
 800972a:	bf00      	nop
 800972c:	3728      	adds	r7, #40	; 0x28
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b086      	sub	sp, #24
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800975e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f003 0302 	and.w	r3, r3, #2
 8009766:	2b02      	cmp	r3, #2
 8009768:	d10b      	bne.n	8009782 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f003 0301 	and.w	r3, r3, #1
 8009770:	2b01      	cmp	r3, #1
 8009772:	d102      	bne.n	800977a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f00c faed 	bl	8015d54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	f043 0302 	orr.w	r3, r3, #2
 8009780:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f003 0308 	and.w	r3, r3, #8
 8009788:	2b08      	cmp	r3, #8
 800978a:	d132      	bne.n	80097f2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	f043 0308 	orr.w	r3, r3, #8
 8009792:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f003 0304 	and.w	r3, r3, #4
 800979a:	2b04      	cmp	r3, #4
 800979c:	d126      	bne.n	80097ec <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d113      	bne.n	80097ce <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80097ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80097b0:	d106      	bne.n	80097c0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2102      	movs	r1, #2
 80097b8:	4618      	mov	r0, r3
 80097ba:	f002 fd27 	bl	800c20c <USB_InitFSLSPClkSel>
 80097be:	e011      	b.n	80097e4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2101      	movs	r1, #1
 80097c6:	4618      	mov	r0, r3
 80097c8:	f002 fd20 	bl	800c20c <USB_InitFSLSPClkSel>
 80097cc:	e00a      	b.n	80097e4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d106      	bne.n	80097e4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097dc:	461a      	mov	r2, r3
 80097de:	f64e 2360 	movw	r3, #60000	; 0xea60
 80097e2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f00c fae3 	bl	8015db0 <HAL_HCD_PortEnabled_Callback>
 80097ea:	e002      	b.n	80097f2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f00c faed 	bl	8015dcc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f003 0320 	and.w	r3, r3, #32
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	d103      	bne.n	8009804 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	f043 0320 	orr.w	r3, r3, #32
 8009802:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800980a:	461a      	mov	r2, r3
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	6013      	str	r3, [r2, #0]
}
 8009810:	bf00      	nop
 8009812:	3718      	adds	r7, #24
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b08a      	sub	sp, #40	; 0x28
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e237      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b00      	cmp	r3, #0
 8009834:	d050      	beq.n	80098d8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009836:	4ba3      	ldr	r3, [pc, #652]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f003 030c 	and.w	r3, r3, #12
 800983e:	2b04      	cmp	r3, #4
 8009840:	d00c      	beq.n	800985c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009842:	4ba0      	ldr	r3, [pc, #640]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800984a:	2b08      	cmp	r3, #8
 800984c:	d112      	bne.n	8009874 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800984e:	4b9d      	ldr	r3, [pc, #628]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800985a:	d10b      	bne.n	8009874 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800985c:	4b99      	ldr	r3, [pc, #612]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d036      	beq.n	80098d6 <HAL_RCC_OscConfig+0xbe>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d132      	bne.n	80098d6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e212      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	4b93      	ldr	r3, [pc, #588]	; (8009ac8 <HAL_RCC_OscConfig+0x2b0>)
 800987a:	b2d2      	uxtb	r2, r2
 800987c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d013      	beq.n	80098ae <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009886:	f7fc fed1 	bl	800662c <HAL_GetTick>
 800988a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800988c:	e008      	b.n	80098a0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800988e:	f7fc fecd 	bl	800662c <HAL_GetTick>
 8009892:	4602      	mov	r2, r0
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	2b64      	cmp	r3, #100	; 0x64
 800989a:	d901      	bls.n	80098a0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800989c:	2303      	movs	r3, #3
 800989e:	e1fc      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098a0:	4b88      	ldr	r3, [pc, #544]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d0f0      	beq.n	800988e <HAL_RCC_OscConfig+0x76>
 80098ac:	e014      	b.n	80098d8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098ae:	f7fc febd 	bl	800662c <HAL_GetTick>
 80098b2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098b4:	e008      	b.n	80098c8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098b6:	f7fc feb9 	bl	800662c <HAL_GetTick>
 80098ba:	4602      	mov	r2, r0
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	2b64      	cmp	r3, #100	; 0x64
 80098c2:	d901      	bls.n	80098c8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80098c4:	2303      	movs	r3, #3
 80098c6:	e1e8      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098c8:	4b7e      	ldr	r3, [pc, #504]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1f0      	bne.n	80098b6 <HAL_RCC_OscConfig+0x9e>
 80098d4:	e000      	b.n	80098d8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0302 	and.w	r3, r3, #2
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d077      	beq.n	80099d4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098e4:	4b77      	ldr	r3, [pc, #476]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	f003 030c 	and.w	r3, r3, #12
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00b      	beq.n	8009908 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098f0:	4b74      	ldr	r3, [pc, #464]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098f8:	2b08      	cmp	r3, #8
 80098fa:	d126      	bne.n	800994a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098fc:	4b71      	ldr	r3, [pc, #452]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d120      	bne.n	800994a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009908:	4b6e      	ldr	r3, [pc, #440]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0302 	and.w	r3, r3, #2
 8009910:	2b00      	cmp	r3, #0
 8009912:	d005      	beq.n	8009920 <HAL_RCC_OscConfig+0x108>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d001      	beq.n	8009920 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e1bc      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009920:	4b68      	ldr	r3, [pc, #416]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	21f8      	movs	r1, #248	; 0xf8
 800992e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009930:	69b9      	ldr	r1, [r7, #24]
 8009932:	fa91 f1a1 	rbit	r1, r1
 8009936:	6179      	str	r1, [r7, #20]
  return result;
 8009938:	6979      	ldr	r1, [r7, #20]
 800993a:	fab1 f181 	clz	r1, r1
 800993e:	b2c9      	uxtb	r1, r1
 8009940:	408b      	lsls	r3, r1
 8009942:	4960      	ldr	r1, [pc, #384]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 8009944:	4313      	orrs	r3, r2
 8009946:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009948:	e044      	b.n	80099d4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d02a      	beq.n	80099a8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009952:	4b5e      	ldr	r3, [pc, #376]	; (8009acc <HAL_RCC_OscConfig+0x2b4>)
 8009954:	2201      	movs	r2, #1
 8009956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009958:	f7fc fe68 	bl	800662c <HAL_GetTick>
 800995c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800995e:	e008      	b.n	8009972 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009960:	f7fc fe64 	bl	800662c <HAL_GetTick>
 8009964:	4602      	mov	r2, r0
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	2b02      	cmp	r3, #2
 800996c:	d901      	bls.n	8009972 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e193      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009972:	4b54      	ldr	r3, [pc, #336]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0f0      	beq.n	8009960 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800997e:	4b51      	ldr	r3, [pc, #324]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	21f8      	movs	r1, #248	; 0xf8
 800998c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800998e:	6939      	ldr	r1, [r7, #16]
 8009990:	fa91 f1a1 	rbit	r1, r1
 8009994:	60f9      	str	r1, [r7, #12]
  return result;
 8009996:	68f9      	ldr	r1, [r7, #12]
 8009998:	fab1 f181 	clz	r1, r1
 800999c:	b2c9      	uxtb	r1, r1
 800999e:	408b      	lsls	r3, r1
 80099a0:	4948      	ldr	r1, [pc, #288]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	600b      	str	r3, [r1, #0]
 80099a6:	e015      	b.n	80099d4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099a8:	4b48      	ldr	r3, [pc, #288]	; (8009acc <HAL_RCC_OscConfig+0x2b4>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099ae:	f7fc fe3d 	bl	800662c <HAL_GetTick>
 80099b2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099b4:	e008      	b.n	80099c8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099b6:	f7fc fe39 	bl	800662c <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d901      	bls.n	80099c8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e168      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099c8:	4b3e      	ldr	r3, [pc, #248]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1f0      	bne.n	80099b6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 0308 	and.w	r3, r3, #8
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d030      	beq.n	8009a42 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	695b      	ldr	r3, [r3, #20]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d016      	beq.n	8009a16 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099e8:	4b39      	ldr	r3, [pc, #228]	; (8009ad0 <HAL_RCC_OscConfig+0x2b8>)
 80099ea:	2201      	movs	r2, #1
 80099ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099ee:	f7fc fe1d 	bl	800662c <HAL_GetTick>
 80099f2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099f4:	e008      	b.n	8009a08 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099f6:	f7fc fe19 	bl	800662c <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d901      	bls.n	8009a08 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e148      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a08:	4b2e      	ldr	r3, [pc, #184]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 8009a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a0c:	f003 0302 	and.w	r3, r3, #2
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d0f0      	beq.n	80099f6 <HAL_RCC_OscConfig+0x1de>
 8009a14:	e015      	b.n	8009a42 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a16:	4b2e      	ldr	r3, [pc, #184]	; (8009ad0 <HAL_RCC_OscConfig+0x2b8>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a1c:	f7fc fe06 	bl	800662c <HAL_GetTick>
 8009a20:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a22:	e008      	b.n	8009a36 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a24:	f7fc fe02 	bl	800662c <HAL_GetTick>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d901      	bls.n	8009a36 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8009a32:	2303      	movs	r3, #3
 8009a34:	e131      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a36:	4b23      	ldr	r3, [pc, #140]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 8009a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a3a:	f003 0302 	and.w	r3, r3, #2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1f0      	bne.n	8009a24 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0304 	and.w	r3, r3, #4
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 8088 	beq.w	8009b60 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a50:	2300      	movs	r3, #0
 8009a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a56:	4b1b      	ldr	r3, [pc, #108]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d110      	bne.n	8009a84 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a62:	2300      	movs	r3, #0
 8009a64:	60bb      	str	r3, [r7, #8]
 8009a66:	4b17      	ldr	r3, [pc, #92]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 8009a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6a:	4a16      	ldr	r2, [pc, #88]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 8009a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a70:	6413      	str	r3, [r2, #64]	; 0x40
 8009a72:	4b14      	ldr	r3, [pc, #80]	; (8009ac4 <HAL_RCC_OscConfig+0x2ac>)
 8009a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a7a:	60bb      	str	r3, [r7, #8]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009a84:	4b13      	ldr	r3, [pc, #76]	; (8009ad4 <HAL_RCC_OscConfig+0x2bc>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a12      	ldr	r2, [pc, #72]	; (8009ad4 <HAL_RCC_OscConfig+0x2bc>)
 8009a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a8e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a90:	4b10      	ldr	r3, [pc, #64]	; (8009ad4 <HAL_RCC_OscConfig+0x2bc>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d123      	bne.n	8009ae4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a9c:	4b0d      	ldr	r3, [pc, #52]	; (8009ad4 <HAL_RCC_OscConfig+0x2bc>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a0c      	ldr	r2, [pc, #48]	; (8009ad4 <HAL_RCC_OscConfig+0x2bc>)
 8009aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009aa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009aa8:	f7fc fdc0 	bl	800662c <HAL_GetTick>
 8009aac:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009aae:	e013      	b.n	8009ad8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ab0:	f7fc fdbc 	bl	800662c <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d90c      	bls.n	8009ad8 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e0eb      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
 8009ac2:	bf00      	nop
 8009ac4:	40023800 	.word	0x40023800
 8009ac8:	40023802 	.word	0x40023802
 8009acc:	42470000 	.word	0x42470000
 8009ad0:	42470e80 	.word	0x42470e80
 8009ad4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ad8:	4b72      	ldr	r3, [pc, #456]	; (8009ca4 <HAL_RCC_OscConfig+0x48c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0e5      	beq.n	8009ab0 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	689a      	ldr	r2, [r3, #8]
 8009ae8:	4b6f      	ldr	r3, [pc, #444]	; (8009ca8 <HAL_RCC_OscConfig+0x490>)
 8009aea:	b2d2      	uxtb	r2, r2
 8009aec:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d015      	beq.n	8009b22 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009af6:	f7fc fd99 	bl	800662c <HAL_GetTick>
 8009afa:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009afc:	e00a      	b.n	8009b14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009afe:	f7fc fd95 	bl	800662c <HAL_GetTick>
 8009b02:	4602      	mov	r2, r0
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d901      	bls.n	8009b14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e0c2      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b14:	4b65      	ldr	r3, [pc, #404]	; (8009cac <HAL_RCC_OscConfig+0x494>)
 8009b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b18:	f003 0302 	and.w	r3, r3, #2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d0ee      	beq.n	8009afe <HAL_RCC_OscConfig+0x2e6>
 8009b20:	e014      	b.n	8009b4c <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b22:	f7fc fd83 	bl	800662c <HAL_GetTick>
 8009b26:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b28:	e00a      	b.n	8009b40 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b2a:	f7fc fd7f 	bl	800662c <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d901      	bls.n	8009b40 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e0ac      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b40:	4b5a      	ldr	r3, [pc, #360]	; (8009cac <HAL_RCC_OscConfig+0x494>)
 8009b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b44:	f003 0302 	and.w	r3, r3, #2
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1ee      	bne.n	8009b2a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d105      	bne.n	8009b60 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b54:	4b55      	ldr	r3, [pc, #340]	; (8009cac <HAL_RCC_OscConfig+0x494>)
 8009b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b58:	4a54      	ldr	r2, [pc, #336]	; (8009cac <HAL_RCC_OscConfig+0x494>)
 8009b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f000 8097 	beq.w	8009c98 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b6a:	4b50      	ldr	r3, [pc, #320]	; (8009cac <HAL_RCC_OscConfig+0x494>)
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	f003 030c 	and.w	r3, r3, #12
 8009b72:	2b08      	cmp	r3, #8
 8009b74:	d061      	beq.n	8009c3a <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d146      	bne.n	8009c0c <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b7e:	4b4c      	ldr	r3, [pc, #304]	; (8009cb0 <HAL_RCC_OscConfig+0x498>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b84:	f7fc fd52 	bl	800662c <HAL_GetTick>
 8009b88:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b8a:	e008      	b.n	8009b9e <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b8c:	f7fc fd4e 	bl	800662c <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	2b64      	cmp	r3, #100	; 0x64
 8009b98:	d901      	bls.n	8009b9e <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e07d      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b9e:	4b43      	ldr	r3, [pc, #268]	; (8009cac <HAL_RCC_OscConfig+0x494>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1f0      	bne.n	8009b8c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009baa:	4b40      	ldr	r3, [pc, #256]	; (8009cac <HAL_RCC_OscConfig+0x494>)
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	4b41      	ldr	r3, [pc, #260]	; (8009cb4 <HAL_RCC_OscConfig+0x49c>)
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	69d1      	ldr	r1, [r2, #28]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	6a12      	ldr	r2, [r2, #32]
 8009bba:	4311      	orrs	r1, r2
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009bc0:	0192      	lsls	r2, r2, #6
 8009bc2:	4311      	orrs	r1, r2
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009bc8:	0612      	lsls	r2, r2, #24
 8009bca:	4311      	orrs	r1, r2
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009bd0:	0852      	lsrs	r2, r2, #1
 8009bd2:	3a01      	subs	r2, #1
 8009bd4:	0412      	lsls	r2, r2, #16
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	4934      	ldr	r1, [pc, #208]	; (8009cac <HAL_RCC_OscConfig+0x494>)
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009bde:	4b34      	ldr	r3, [pc, #208]	; (8009cb0 <HAL_RCC_OscConfig+0x498>)
 8009be0:	2201      	movs	r2, #1
 8009be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009be4:	f7fc fd22 	bl	800662c <HAL_GetTick>
 8009be8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bea:	e008      	b.n	8009bfe <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bec:	f7fc fd1e 	bl	800662c <HAL_GetTick>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	2b64      	cmp	r3, #100	; 0x64
 8009bf8:	d901      	bls.n	8009bfe <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e04d      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bfe:	4b2b      	ldr	r3, [pc, #172]	; (8009cac <HAL_RCC_OscConfig+0x494>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0f0      	beq.n	8009bec <HAL_RCC_OscConfig+0x3d4>
 8009c0a:	e045      	b.n	8009c98 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c0c:	4b28      	ldr	r3, [pc, #160]	; (8009cb0 <HAL_RCC_OscConfig+0x498>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c12:	f7fc fd0b 	bl	800662c <HAL_GetTick>
 8009c16:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c18:	e008      	b.n	8009c2c <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c1a:	f7fc fd07 	bl	800662c <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	2b64      	cmp	r3, #100	; 0x64
 8009c26:	d901      	bls.n	8009c2c <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e036      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c2c:	4b1f      	ldr	r3, [pc, #124]	; (8009cac <HAL_RCC_OscConfig+0x494>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1f0      	bne.n	8009c1a <HAL_RCC_OscConfig+0x402>
 8009c38:	e02e      	b.n	8009c98 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d101      	bne.n	8009c46 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e029      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8009c46:	4b19      	ldr	r3, [pc, #100]	; (8009cac <HAL_RCC_OscConfig+0x494>)
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	69db      	ldr	r3, [r3, #28]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d11c      	bne.n	8009c94 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d115      	bne.n	8009c94 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	099b      	lsrs	r3, r3, #6
 8009c6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d10d      	bne.n	8009c94 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d106      	bne.n	8009c94 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d001      	beq.n	8009c98 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e000      	b.n	8009c9a <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3728      	adds	r7, #40	; 0x28
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	40007000 	.word	0x40007000
 8009ca8:	40023870 	.word	0x40023870
 8009cac:	40023800 	.word	0x40023800
 8009cb0:	42470060 	.word	0x42470060
 8009cb4:	f0bc8000 	.word	0xf0bc8000

08009cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d101      	bne.n	8009ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e0d2      	b.n	8009e72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ccc:	4b6b      	ldr	r3, [pc, #428]	; (8009e7c <HAL_RCC_ClockConfig+0x1c4>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 030f 	and.w	r3, r3, #15
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d90c      	bls.n	8009cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cda:	4b68      	ldr	r3, [pc, #416]	; (8009e7c <HAL_RCC_ClockConfig+0x1c4>)
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	b2d2      	uxtb	r2, r2
 8009ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ce2:	4b66      	ldr	r3, [pc, #408]	; (8009e7c <HAL_RCC_ClockConfig+0x1c4>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 030f 	and.w	r3, r3, #15
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d001      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e0be      	b.n	8009e72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d020      	beq.n	8009d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 0304 	and.w	r3, r3, #4
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d005      	beq.n	8009d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d0c:	4b5c      	ldr	r3, [pc, #368]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	4a5b      	ldr	r2, [pc, #364]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009d16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0308 	and.w	r3, r3, #8
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d005      	beq.n	8009d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8009d24:	4b56      	ldr	r3, [pc, #344]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	4a55      	ldr	r2, [pc, #340]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009d2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d30:	4b53      	ldr	r3, [pc, #332]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	4950      	ldr	r1, [pc, #320]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 0301 	and.w	r3, r3, #1
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d040      	beq.n	8009dd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d107      	bne.n	8009d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d56:	4b4a      	ldr	r3, [pc, #296]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d115      	bne.n	8009d8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e085      	b.n	8009e72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d107      	bne.n	8009d7e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d6e:	4b44      	ldr	r3, [pc, #272]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d109      	bne.n	8009d8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e079      	b.n	8009e72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d7e:	4b40      	ldr	r3, [pc, #256]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e071      	b.n	8009e72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d8e:	4b3c      	ldr	r3, [pc, #240]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	f023 0203 	bic.w	r2, r3, #3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	4939      	ldr	r1, [pc, #228]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009da0:	f7fc fc44 	bl	800662c <HAL_GetTick>
 8009da4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009da6:	e00a      	b.n	8009dbe <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009da8:	f7fc fc40 	bl	800662c <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d901      	bls.n	8009dbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e059      	b.n	8009e72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dbe:	4b30      	ldr	r3, [pc, #192]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f003 020c 	and.w	r2, r3, #12
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d1eb      	bne.n	8009da8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009dd0:	4b2a      	ldr	r3, [pc, #168]	; (8009e7c <HAL_RCC_ClockConfig+0x1c4>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 030f 	and.w	r3, r3, #15
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d20c      	bcs.n	8009df8 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dde:	4b27      	ldr	r3, [pc, #156]	; (8009e7c <HAL_RCC_ClockConfig+0x1c4>)
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	b2d2      	uxtb	r2, r2
 8009de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009de6:	4b25      	ldr	r3, [pc, #148]	; (8009e7c <HAL_RCC_ClockConfig+0x1c4>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d001      	beq.n	8009df8 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e03c      	b.n	8009e72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0304 	and.w	r3, r3, #4
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d008      	beq.n	8009e16 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e04:	4b1e      	ldr	r3, [pc, #120]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	491b      	ldr	r1, [pc, #108]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009e12:	4313      	orrs	r3, r2
 8009e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 0308 	and.w	r3, r3, #8
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d009      	beq.n	8009e36 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e22:	4b17      	ldr	r3, [pc, #92]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	00db      	lsls	r3, r3, #3
 8009e30:	4913      	ldr	r1, [pc, #76]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8009e36:	f000 f82b 	bl	8009e90 <HAL_RCC_GetSysClockFreq>
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	4b10      	ldr	r3, [pc, #64]	; (8009e80 <HAL_RCC_ClockConfig+0x1c8>)
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e44:	22f0      	movs	r2, #240	; 0xf0
 8009e46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	fa92 f2a2 	rbit	r2, r2
 8009e4e:	60fa      	str	r2, [r7, #12]
  return result;
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	fab2 f282 	clz	r2, r2
 8009e56:	b2d2      	uxtb	r2, r2
 8009e58:	40d3      	lsrs	r3, r2
 8009e5a:	4a0a      	ldr	r2, [pc, #40]	; (8009e84 <HAL_RCC_ClockConfig+0x1cc>)
 8009e5c:	5cd3      	ldrb	r3, [r2, r3]
 8009e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8009e62:	4a09      	ldr	r2, [pc, #36]	; (8009e88 <HAL_RCC_ClockConfig+0x1d0>)
 8009e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009e66:	4b09      	ldr	r3, [pc, #36]	; (8009e8c <HAL_RCC_ClockConfig+0x1d4>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fc f8da 	bl	8006024 <HAL_InitTick>

  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	40023c00 	.word	0x40023c00
 8009e80:	40023800 	.word	0x40023800
 8009e84:	0801acb0 	.word	0x0801acb0
 8009e88:	2000020c 	.word	0x2000020c
 8009e8c:	20000210 	.word	0x20000210

08009e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e90:	b5b0      	push	{r4, r5, r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e96:	2100      	movs	r1, #0
 8009e98:	6079      	str	r1, [r7, #4]
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	60f9      	str	r1, [r7, #12]
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ea6:	4952      	ldr	r1, [pc, #328]	; (8009ff0 <HAL_RCC_GetSysClockFreq+0x160>)
 8009ea8:	6889      	ldr	r1, [r1, #8]
 8009eaa:	f001 010c 	and.w	r1, r1, #12
 8009eae:	2908      	cmp	r1, #8
 8009eb0:	d00d      	beq.n	8009ece <HAL_RCC_GetSysClockFreq+0x3e>
 8009eb2:	2908      	cmp	r1, #8
 8009eb4:	f200 8094 	bhi.w	8009fe0 <HAL_RCC_GetSysClockFreq+0x150>
 8009eb8:	2900      	cmp	r1, #0
 8009eba:	d002      	beq.n	8009ec2 <HAL_RCC_GetSysClockFreq+0x32>
 8009ebc:	2904      	cmp	r1, #4
 8009ebe:	d003      	beq.n	8009ec8 <HAL_RCC_GetSysClockFreq+0x38>
 8009ec0:	e08e      	b.n	8009fe0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009ec2:	4b4c      	ldr	r3, [pc, #304]	; (8009ff4 <HAL_RCC_GetSysClockFreq+0x164>)
 8009ec4:	60bb      	str	r3, [r7, #8]
       break;
 8009ec6:	e08e      	b.n	8009fe6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009ec8:	4b4b      	ldr	r3, [pc, #300]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x168>)
 8009eca:	60bb      	str	r3, [r7, #8]
      break;
 8009ecc:	e08b      	b.n	8009fe6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ece:	4948      	ldr	r1, [pc, #288]	; (8009ff0 <HAL_RCC_GetSysClockFreq+0x160>)
 8009ed0:	6849      	ldr	r1, [r1, #4]
 8009ed2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009ed6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009ed8:	4945      	ldr	r1, [pc, #276]	; (8009ff0 <HAL_RCC_GetSysClockFreq+0x160>)
 8009eda:	6849      	ldr	r1, [r1, #4]
 8009edc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009ee0:	2900      	cmp	r1, #0
 8009ee2:	d024      	beq.n	8009f2e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ee4:	4942      	ldr	r1, [pc, #264]	; (8009ff0 <HAL_RCC_GetSysClockFreq+0x160>)
 8009ee6:	6849      	ldr	r1, [r1, #4]
 8009ee8:	0989      	lsrs	r1, r1, #6
 8009eea:	4608      	mov	r0, r1
 8009eec:	f04f 0100 	mov.w	r1, #0
 8009ef0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009ef4:	f04f 0500 	mov.w	r5, #0
 8009ef8:	ea00 0204 	and.w	r2, r0, r4
 8009efc:	ea01 0305 	and.w	r3, r1, r5
 8009f00:	493d      	ldr	r1, [pc, #244]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x168>)
 8009f02:	fb01 f003 	mul.w	r0, r1, r3
 8009f06:	2100      	movs	r1, #0
 8009f08:	fb01 f102 	mul.w	r1, r1, r2
 8009f0c:	1844      	adds	r4, r0, r1
 8009f0e:	493a      	ldr	r1, [pc, #232]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x168>)
 8009f10:	fba2 0101 	umull	r0, r1, r2, r1
 8009f14:	1863      	adds	r3, r4, r1
 8009f16:	4619      	mov	r1, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f04f 0300 	mov.w	r3, #0
 8009f20:	f7f6 fe6c 	bl	8000bfc <__aeabi_uldivmod>
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	4613      	mov	r3, r2
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	e04a      	b.n	8009fc4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f2e:	4b30      	ldr	r3, [pc, #192]	; (8009ff0 <HAL_RCC_GetSysClockFreq+0x160>)
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	099b      	lsrs	r3, r3, #6
 8009f34:	461a      	mov	r2, r3
 8009f36:	f04f 0300 	mov.w	r3, #0
 8009f3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009f3e:	f04f 0100 	mov.w	r1, #0
 8009f42:	ea02 0400 	and.w	r4, r2, r0
 8009f46:	ea03 0501 	and.w	r5, r3, r1
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	f04f 0200 	mov.w	r2, #0
 8009f52:	f04f 0300 	mov.w	r3, #0
 8009f56:	014b      	lsls	r3, r1, #5
 8009f58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009f5c:	0142      	lsls	r2, r0, #5
 8009f5e:	4610      	mov	r0, r2
 8009f60:	4619      	mov	r1, r3
 8009f62:	1b00      	subs	r0, r0, r4
 8009f64:	eb61 0105 	sbc.w	r1, r1, r5
 8009f68:	f04f 0200 	mov.w	r2, #0
 8009f6c:	f04f 0300 	mov.w	r3, #0
 8009f70:	018b      	lsls	r3, r1, #6
 8009f72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009f76:	0182      	lsls	r2, r0, #6
 8009f78:	1a12      	subs	r2, r2, r0
 8009f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8009f7e:	f04f 0000 	mov.w	r0, #0
 8009f82:	f04f 0100 	mov.w	r1, #0
 8009f86:	00d9      	lsls	r1, r3, #3
 8009f88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009f8c:	00d0      	lsls	r0, r2, #3
 8009f8e:	4602      	mov	r2, r0
 8009f90:	460b      	mov	r3, r1
 8009f92:	1912      	adds	r2, r2, r4
 8009f94:	eb45 0303 	adc.w	r3, r5, r3
 8009f98:	f04f 0000 	mov.w	r0, #0
 8009f9c:	f04f 0100 	mov.w	r1, #0
 8009fa0:	0299      	lsls	r1, r3, #10
 8009fa2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009fa6:	0290      	lsls	r0, r2, #10
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	4610      	mov	r0, r2
 8009fae:	4619      	mov	r1, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f04f 0300 	mov.w	r3, #0
 8009fb8:	f7f6 fe20 	bl	8000bfc <__aeabi_uldivmod>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009fc4:	4b0a      	ldr	r3, [pc, #40]	; (8009ff0 <HAL_RCC_GetSysClockFreq+0x160>)
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	0c1b      	lsrs	r3, r3, #16
 8009fca:	f003 0303 	and.w	r3, r3, #3
 8009fce:	3301      	adds	r3, #1
 8009fd0:	005b      	lsls	r3, r3, #1
 8009fd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fdc:	60bb      	str	r3, [r7, #8]
      break;
 8009fde:	e002      	b.n	8009fe6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fe0:	4b04      	ldr	r3, [pc, #16]	; (8009ff4 <HAL_RCC_GetSysClockFreq+0x164>)
 8009fe2:	60bb      	str	r3, [r7, #8]
      break;
 8009fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009fe6:	68bb      	ldr	r3, [r7, #8]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bdb0      	pop	{r4, r5, r7, pc}
 8009ff0:	40023800 	.word	0x40023800
 8009ff4:	00f42400 	.word	0x00f42400
 8009ff8:	017d7840 	.word	0x017d7840

08009ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a000:	4b02      	ldr	r3, [pc, #8]	; (800a00c <HAL_RCC_GetHCLKFreq+0x10>)
 800a002:	681b      	ldr	r3, [r3, #0]
}
 800a004:	4618      	mov	r0, r3
 800a006:	46bd      	mov	sp, r7
 800a008:	bc80      	pop	{r7}
 800a00a:	4770      	bx	lr
 800a00c:	2000020c 	.word	0x2000020c

0800a010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800a016:	f7ff fff1 	bl	8009ffc <HAL_RCC_GetHCLKFreq>
 800a01a:	4601      	mov	r1, r0
 800a01c:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800a024:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800a028:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	fa92 f2a2 	rbit	r2, r2
 800a030:	603a      	str	r2, [r7, #0]
  return result;
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	fab2 f282 	clz	r2, r2
 800a038:	b2d2      	uxtb	r2, r2
 800a03a:	40d3      	lsrs	r3, r2
 800a03c:	4a04      	ldr	r2, [pc, #16]	; (800a050 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a03e:	5cd3      	ldrb	r3, [r2, r3]
 800a040:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a044:	4618      	mov	r0, r3
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	40023800 	.word	0x40023800
 800a050:	0801acc0 	.word	0x0801acc0

0800a054 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	220f      	movs	r2, #15
 800a062:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a064:	4b11      	ldr	r3, [pc, #68]	; (800a0ac <HAL_RCC_GetClockConfig+0x58>)
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	f003 0203 	and.w	r2, r3, #3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a070:	4b0e      	ldr	r3, [pc, #56]	; (800a0ac <HAL_RCC_GetClockConfig+0x58>)
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a07c:	4b0b      	ldr	r3, [pc, #44]	; (800a0ac <HAL_RCC_GetClockConfig+0x58>)
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a088:	4b08      	ldr	r3, [pc, #32]	; (800a0ac <HAL_RCC_GetClockConfig+0x58>)
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	08db      	lsrs	r3, r3, #3
 800a08e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a096:	4b06      	ldr	r3, [pc, #24]	; (800a0b0 <HAL_RCC_GetClockConfig+0x5c>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 020f 	and.w	r2, r3, #15
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	601a      	str	r2, [r3, #0]
}
 800a0a2:	bf00      	nop
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bc80      	pop	{r7}
 800a0aa:	4770      	bx	lr
 800a0ac:	40023800 	.word	0x40023800
 800a0b0:	40023c00 	.word	0x40023c00

0800a0b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08a      	sub	sp, #40	; 0x28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0301 	and.w	r3, r3, #1
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d103      	bne.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 800a0d4:	2b08      	cmp	r3, #8
 800a0d6:	d14c      	bne.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a0d8:	4b6d      	ldr	r3, [pc, #436]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a0de:	f7fc faa5 	bl	800662c <HAL_GetTick>
 800a0e2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a0e4:	e008      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a0e6:	f7fc faa1 	bl	800662c <HAL_GetTick>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d901      	bls.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	e0c7      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a0f8:	4b66      	ldr	r3, [pc, #408]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1f0      	bne.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800a10c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a10e:	697a      	ldr	r2, [r7, #20]
 800a110:	fa92 f2a2 	rbit	r2, r2
 800a114:	613a      	str	r2, [r7, #16]
  return result;
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	fab2 f282 	clz	r2, r2
 800a11c:	b2d2      	uxtb	r2, r2
 800a11e:	fa03 f202 	lsl.w	r2, r3, r2
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800a12a:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a12c:	69f9      	ldr	r1, [r7, #28]
 800a12e:	fa91 f1a1 	rbit	r1, r1
 800a132:	61b9      	str	r1, [r7, #24]
  return result;
 800a134:	69b9      	ldr	r1, [r7, #24]
 800a136:	fab1 f181 	clz	r1, r1
 800a13a:	b2c9      	uxtb	r1, r1
 800a13c:	408b      	lsls	r3, r1
 800a13e:	4955      	ldr	r1, [pc, #340]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a140:	4313      	orrs	r3, r2
 800a142:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a146:	4b52      	ldr	r3, [pc, #328]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800a148:	2201      	movs	r2, #1
 800a14a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a14c:	f7fc fa6e 	bl	800662c <HAL_GetTick>
 800a150:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a152:	e008      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a154:	f7fc fa6a 	bl	800662c <HAL_GetTick>
 800a158:	4602      	mov	r2, r0
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d901      	bls.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e090      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a166:	4b4b      	ldr	r3, [pc, #300]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0f0      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 0304 	and.w	r3, r3, #4
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f000 8083 	beq.w	800a286 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	4b43      	ldr	r3, [pc, #268]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a188:	4a42      	ldr	r2, [pc, #264]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a18a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a18e:	6413      	str	r3, [r2, #64]	; 0x40
 800a190:	4b40      	ldr	r3, [pc, #256]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a198:	60fb      	str	r3, [r7, #12]
 800a19a:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a19c:	4b3e      	ldr	r3, [pc, #248]	; (800a298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a3d      	ldr	r2, [pc, #244]	; (800a298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a1a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1a6:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800a1a8:	f7fc fa40 	bl	800662c <HAL_GetTick>
 800a1ac:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a1ae:	e008      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a1b0:	f7fc fa3c 	bl	800662c <HAL_GetTick>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d901      	bls.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e062      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a1c2:	4b35      	ldr	r3, [pc, #212]	; (800a298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0f0      	beq.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a1ce:	4b31      	ldr	r3, [pc, #196]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1d6:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d02f      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1e6:	6a3a      	ldr	r2, [r7, #32]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d028      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a1ec:	4b29      	ldr	r3, [pc, #164]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a1ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1f4:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a1f6:	4b29      	ldr	r3, [pc, #164]	; (800a29c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a1fc:	4b27      	ldr	r3, [pc, #156]	; (800a29c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a202:	4a24      	ldr	r2, [pc, #144]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a208:	4b22      	ldr	r3, [pc, #136]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20c:	f003 0301 	and.w	r3, r3, #1
 800a210:	2b01      	cmp	r3, #1
 800a212:	d114      	bne.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a214:	f7fc fa0a 	bl	800662c <HAL_GetTick>
 800a218:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a21a:	e00a      	b.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a21c:	f7fc fa06 	bl	800662c <HAL_GetTick>
 800a220:	4602      	mov	r2, r0
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	f241 3288 	movw	r2, #5000	; 0x1388
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d901      	bls.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e02a      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a232:	4b18      	ldr	r3, [pc, #96]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0ee      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a24a:	d10d      	bne.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a24c:	4b11      	ldr	r3, [pc, #68]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a25c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a260:	490c      	ldr	r1, [pc, #48]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a262:	4313      	orrs	r3, r2
 800a264:	608b      	str	r3, [r1, #8]
 800a266:	e005      	b.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a268:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	4a09      	ldr	r2, [pc, #36]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a26e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a272:	6093      	str	r3, [r2, #8]
 800a274:	4b07      	ldr	r3, [pc, #28]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a276:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a280:	4904      	ldr	r1, [pc, #16]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a282:	4313      	orrs	r3, r2
 800a284:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3728      	adds	r7, #40	; 0x28
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	42470068 	.word	0x42470068
 800a294:	40023800 	.word	0x40023800
 800a298:	40007000 	.word	0x40007000
 800a29c:	42470e40 	.word	0x42470e40

0800a2a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e07c      	b.n	800a3ac <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	7f5b      	ldrb	r3, [r3, #29]
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d105      	bne.n	800a2c8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f7fb fdd4 	bl	8005e70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	22ca      	movs	r2, #202	; 0xca
 800a2d4:	625a      	str	r2, [r3, #36]	; 0x24
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2253      	movs	r2, #83	; 0x53
 800a2dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fb8d 	bl	800a9fe <RTC_EnterInitMode>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d008      	beq.n	800a2fc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	22ff      	movs	r2, #255	; 0xff
 800a2f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2204      	movs	r2, #4
 800a2f6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e057      	b.n	800a3ac <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	6812      	ldr	r2, [r2, #0]
 800a306:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a30a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a30e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	6899      	ldr	r1, [r3, #8]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	431a      	orrs	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	695b      	ldr	r3, [r3, #20]
 800a324:	431a      	orrs	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	430a      	orrs	r2, r1
 800a32c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	68d2      	ldr	r2, [r2, #12]
 800a336:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6919      	ldr	r1, [r3, #16]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	041a      	lsls	r2, r3, #16
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	430a      	orrs	r2, r1
 800a34a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68da      	ldr	r2, [r3, #12]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a35a:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fb26 	bl	800a9ae <HAL_RTC_WaitForSynchro>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d008      	beq.n	800a37a <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	22ff      	movs	r2, #255	; 0xff
 800a36e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2204      	movs	r2, #4
 800a374:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e018      	b.n	800a3ac <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a388:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	699a      	ldr	r2, [r3, #24]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	430a      	orrs	r2, r1
 800a39a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	22ff      	movs	r2, #255	; 0xff
 800a3a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
  }
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a3b4:	b590      	push	{r4, r7, lr}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	7f1b      	ldrb	r3, [r3, #28]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d101      	bne.n	800a3d0 <HAL_RTC_SetTime+0x1c>
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	e0a3      	b.n	800a518 <HAL_RTC_SetTime+0x164>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2202      	movs	r2, #2
 800a3da:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d126      	bne.n	800a430 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d102      	bne.n	800a3f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 fb2b 	bl	800aa56 <RTC_ByteToBcd2>
 800a400:	4603      	mov	r3, r0
 800a402:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	785b      	ldrb	r3, [r3, #1]
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 fb24 	bl	800aa56 <RTC_ByteToBcd2>
 800a40e:	4603      	mov	r3, r0
 800a410:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a412:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	789b      	ldrb	r3, [r3, #2]
 800a418:	4618      	mov	r0, r3
 800a41a:	f000 fb1c 	bl	800aa56 <RTC_ByteToBcd2>
 800a41e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a420:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	78db      	ldrb	r3, [r3, #3]
 800a428:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a42a:	4313      	orrs	r3, r2
 800a42c:	617b      	str	r3, [r7, #20]
 800a42e:	e018      	b.n	800a462 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d102      	bne.n	800a444 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2200      	movs	r2, #0
 800a442:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	785b      	ldrb	r3, [r3, #1]
 800a44e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a450:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a456:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	78db      	ldrb	r3, [r3, #3]
 800a45c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a45e:	4313      	orrs	r3, r2
 800a460:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	22ca      	movs	r2, #202	; 0xca
 800a468:	625a      	str	r2, [r3, #36]	; 0x24
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2253      	movs	r2, #83	; 0x53
 800a470:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f000 fac3 	bl	800a9fe <RTC_EnterInitMode>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00b      	beq.n	800a496 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	22ff      	movs	r2, #255	; 0xff
 800a484:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2204      	movs	r2, #4
 800a48a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e040      	b.n	800a518 <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a4a0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a4a4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689a      	ldr	r2, [r3, #8]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a4b4:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6899      	ldr	r1, [r3, #8]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68da      	ldr	r2, [r3, #12]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4dc:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 fa65 	bl	800a9ae <HAL_RTC_WaitForSynchro>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00b      	beq.n	800a502 <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	22ff      	movs	r2, #255	; 0xff
 800a4f0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2204      	movs	r2, #4
 800a4f6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e00a      	b.n	800a518 <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	22ff      	movs	r2, #255	; 0xff
 800a508:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2201      	movs	r2, #1
 800a50e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a516:	2300      	movs	r3, #0
  }
}
 800a518:	4618      	mov	r0, r3
 800a51a:	371c      	adds	r7, #28
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd90      	pop	{r4, r7, pc}

0800a520 <HAL_RTC_GetTime>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a52c:	2300      	movs	r3, #0
 800a52e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a53a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a53e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	0c1b      	lsrs	r3, r3, #16
 800a544:	b2db      	uxtb	r3, r3
 800a546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	0a1b      	lsrs	r3, r3, #8
 800a554:	b2db      	uxtb	r3, r3
 800a556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	0c1b      	lsrs	r3, r3, #16
 800a572:	b2db      	uxtb	r3, r3
 800a574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d11a      	bne.n	800a5ba <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	4618      	mov	r0, r3
 800a58a:	f000 fa81 	bl	800aa90 <RTC_Bcd2ToByte>
 800a58e:	4603      	mov	r3, r0
 800a590:	461a      	mov	r2, r3
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	785b      	ldrb	r3, [r3, #1]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 fa78 	bl	800aa90 <RTC_Bcd2ToByte>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	789b      	ldrb	r3, [r3, #2]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 fa6f 	bl	800aa90 <RTC_Bcd2ToByte>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a5c4:	b590      	push	{r4, r7, lr}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	7f1b      	ldrb	r3, [r3, #28]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d101      	bne.n	800a5e0 <HAL_RTC_SetDate+0x1c>
 800a5dc:	2302      	movs	r3, #2
 800a5de:	e08d      	b.n	800a6fc <HAL_RTC_SetDate+0x138>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2202      	movs	r2, #2
 800a5ea:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10e      	bne.n	800a610 <HAL_RTC_SetDate+0x4c>
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	785b      	ldrb	r3, [r3, #1]
 800a5f6:	f003 0310 	and.w	r3, r3, #16
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d008      	beq.n	800a610 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	785b      	ldrb	r3, [r3, #1]
 800a602:	f023 0310 	bic.w	r3, r3, #16
 800a606:	b2db      	uxtb	r3, r3
 800a608:	330a      	adds	r3, #10
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d11c      	bne.n	800a650 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	78db      	ldrb	r3, [r3, #3]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 fa1b 	bl	800aa56 <RTC_ByteToBcd2>
 800a620:	4603      	mov	r3, r0
 800a622:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	785b      	ldrb	r3, [r3, #1]
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 fa14 	bl	800aa56 <RTC_ByteToBcd2>
 800a62e:	4603      	mov	r3, r0
 800a630:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a632:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	789b      	ldrb	r3, [r3, #2]
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fa0c 	bl	800aa56 <RTC_ByteToBcd2>
 800a63e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a640:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a64a:	4313      	orrs	r3, r2
 800a64c:	617b      	str	r3, [r7, #20]
 800a64e:	e00e      	b.n	800a66e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	78db      	ldrb	r3, [r3, #3]
 800a654:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	785b      	ldrb	r3, [r3, #1]
 800a65a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a65c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a662:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a66a:	4313      	orrs	r3, r2
 800a66c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	22ca      	movs	r2, #202	; 0xca
 800a674:	625a      	str	r2, [r3, #36]	; 0x24
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2253      	movs	r2, #83	; 0x53
 800a67c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 f9bd 	bl	800a9fe <RTC_EnterInitMode>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00b      	beq.n	800a6a2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	22ff      	movs	r2, #255	; 0xff
 800a690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2204      	movs	r2, #4
 800a696:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e02c      	b.n	800a6fc <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a6ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a6b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68da      	ldr	r2, [r3, #12]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6c0:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f000 f973 	bl	800a9ae <HAL_RTC_WaitForSynchro>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00b      	beq.n	800a6e6 <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	22ff      	movs	r2, #255	; 0xff
 800a6d4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2204      	movs	r2, #4
 800a6da:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e00a      	b.n	800a6fc <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	22ff      	movs	r2, #255	; 0xff
 800a6ec:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a6fa:	2300      	movs	r3, #0
  }
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	371c      	adds	r7, #28
 800a700:	46bd      	mov	sp, r7
 800a702:	bd90      	pop	{r4, r7, pc}

0800a704 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a710:	2300      	movs	r3, #0
 800a712:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a71e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a722:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	0c1b      	lsrs	r3, r3, #16
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	0a1b      	lsrs	r3, r3, #8
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 031f 	and.w	r3, r3, #31
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	b2db      	uxtb	r3, r3
 800a742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a746:	b2da      	uxtb	r2, r3
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	0b5b      	lsrs	r3, r3, #13
 800a750:	b2db      	uxtb	r3, r3
 800a752:	f003 0307 	and.w	r3, r3, #7
 800a756:	b2da      	uxtb	r2, r3
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d11a      	bne.n	800a798 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	78db      	ldrb	r3, [r3, #3]
 800a766:	4618      	mov	r0, r3
 800a768:	f000 f992 	bl	800aa90 <RTC_Bcd2ToByte>
 800a76c:	4603      	mov	r3, r0
 800a76e:	461a      	mov	r2, r3
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	785b      	ldrb	r3, [r3, #1]
 800a778:	4618      	mov	r0, r3
 800a77a:	f000 f989 	bl	800aa90 <RTC_Bcd2ToByte>
 800a77e:	4603      	mov	r3, r0
 800a780:	461a      	mov	r2, r3
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	789b      	ldrb	r3, [r3, #2]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 f980 	bl	800aa90 <RTC_Bcd2ToByte>
 800a790:	4603      	mov	r3, r0
 800a792:	461a      	mov	r2, r3
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a7a2:	b590      	push	{r4, r7, lr}
 800a7a4:	b087      	sub	sp, #28
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	60f8      	str	r0, [r7, #12]
 800a7aa:	60b9      	str	r1, [r7, #8]
 800a7ac:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0U;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	7f1b      	ldrb	r3, [r3, #28]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d101      	bne.n	800a7c2 <HAL_RTC_SetAlarm+0x20>
 800a7be:	2302      	movs	r3, #2
 800a7c0:	e0f1      	b.n	800a9a6 <HAL_RTC_SetAlarm+0x204>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2202      	movs	r2, #2
 800a7cc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d136      	bne.n	800a842 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d102      	bne.n	800a7e8 <HAL_RTC_SetAlarm+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f000 f932 	bl	800aa56 <RTC_ByteToBcd2>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	785b      	ldrb	r3, [r3, #1]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 f92b 	bl	800aa56 <RTC_ByteToBcd2>
 800a800:	4603      	mov	r3, r0
 800a802:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a804:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	789b      	ldrb	r3, [r3, #2]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 f923 	bl	800aa56 <RTC_ByteToBcd2>
 800a810:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a812:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	78db      	ldrb	r3, [r3, #3]
 800a81a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a81c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	7d1b      	ldrb	r3, [r3, #20]
 800a824:	4618      	mov	r0, r3
 800a826:	f000 f916 	bl	800aa56 <RTC_ByteToBcd2>
 800a82a:	4603      	mov	r3, r0
 800a82c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a82e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a836:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a83c:	4313      	orrs	r3, r2
 800a83e:	617b      	str	r3, [r7, #20]
 800a840:	e022      	b.n	800a888 <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d102      	bne.n	800a856 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2200      	movs	r2, #0
 800a854:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	785b      	ldrb	r3, [r3, #1]
 800a860:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a862:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a868:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	78db      	ldrb	r3, [r3, #3]
 800a86e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a870:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	7d1b      	ldrb	r3, [r3, #20]
 800a876:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a878:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a87e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a884:	4313      	orrs	r3, r2
 800a886:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	22ca      	movs	r2, #202	; 0xca
 800a88e:	625a      	str	r2, [r3, #36]	; 0x24
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2253      	movs	r2, #83	; 0x53
 800a896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8a0:	d13b      	bne.n	800a91a <HAL_RTC_SetAlarm+0x178>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	689a      	ldr	r2, [r3, #8]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8b0:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	689a      	ldr	r2, [r3, #8]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a8c0:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a8c2:	f7fb feb3 	bl	800662c <HAL_GetTick>
 800a8c6:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a8c8:	e013      	b.n	800a8f2 <HAL_RTC_SetAlarm+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a8ca:	f7fb feaf 	bl	800662c <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8d8:	d90b      	bls.n	800a8f2 <HAL_RTC_SetAlarm+0x150>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	22ff      	movs	r2, #255	; 0xff
 800a8e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2203      	movs	r2, #3
 800a8e6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e059      	b.n	800a9a6 <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d0e4      	beq.n	800a8ca <HAL_RTC_SetAlarm+0x128>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	689a      	ldr	r2, [r3, #8]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a916:	609a      	str	r2, [r3, #8]
 800a918:	e03a      	b.n	800a990 <HAL_RTC_SetAlarm+0x1ee>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	689a      	ldr	r2, [r3, #8]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a928:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	689a      	ldr	r2, [r3, #8]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a938:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a93a:	f7fb fe77 	bl	800662c <HAL_GetTick>
 800a93e:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a940:	e013      	b.n	800a96a <HAL_RTC_SetAlarm+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a942:	f7fb fe73 	bl	800662c <HAL_GetTick>
 800a946:	4602      	mov	r2, r0
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a950:	d90b      	bls.n	800a96a <HAL_RTC_SetAlarm+0x1c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	22ff      	movs	r2, #255	; 0xff
 800a958:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2203      	movs	r2, #3
 800a95e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	e01d      	b.n	800a9a6 <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	f003 0302 	and.w	r3, r3, #2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0e4      	beq.n	800a942 <HAL_RTC_SetAlarm+0x1a0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	697a      	ldr	r2, [r7, #20]
 800a97e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	689a      	ldr	r2, [r3, #8]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a98e:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	22ff      	movs	r2, #255	; 0xff
 800a996:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2201      	movs	r2, #1
 800a99c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	371c      	adds	r7, #28
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd90      	pop	{r4, r7, pc}

0800a9ae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68da      	ldr	r2, [r3, #12]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a9c8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a9ca:	f7fb fe2f 	bl	800662c <HAL_GetTick>
 800a9ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a9d0:	e009      	b.n	800a9e6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a9d2:	f7fb fe2b 	bl	800662c <HAL_GetTick>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9e0:	d901      	bls.n	800a9e6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	e007      	b.n	800a9f6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	f003 0320 	and.w	r3, r3, #32
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0ee      	beq.n	800a9d2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa06:	2300      	movs	r3, #0
 800aa08:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d119      	bne.n	800aa4c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aa22:	f7fb fe03 	bl	800662c <HAL_GetTick>
 800aa26:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800aa28:	e009      	b.n	800aa3e <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aa2a:	f7fb fdff 	bl	800662c <HAL_GetTick>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa38:	d901      	bls.n	800aa3e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e007      	b.n	800aa4e <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d0ee      	beq.n	800aa2a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b085      	sub	sp, #20
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800aa60:	2300      	movs	r3, #0
 800aa62:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 800aa64:	e005      	b.n	800aa72 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	3b0a      	subs	r3, #10
 800aa70:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 800aa72:	79fb      	ldrb	r3, [r7, #7]
 800aa74:	2b09      	cmp	r3, #9
 800aa76:	d8f6      	bhi.n	800aa66 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	011b      	lsls	r3, r3, #4
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	79fb      	ldrb	r3, [r7, #7]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	b2db      	uxtb	r3, r3
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bc80      	pop	{r7}
 800aa8e:	4770      	bx	lr

0800aa90 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	4603      	mov	r3, r0
 800aa98:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800aa9e:	79fb      	ldrb	r3, [r7, #7]
 800aaa0:	091b      	lsrs	r3, r3, #4
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	005b      	lsls	r3, r3, #1
 800aaae:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800aab0:	79fb      	ldrb	r3, [r7, #7]
 800aab2:	f003 030f 	and.w	r3, r3, #15
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	4413      	add	r3, r2
 800aabe:	b2db      	uxtb	r3, r3
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bc80      	pop	{r7}
 800aac8:	4770      	bx	lr

0800aaca <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b086      	sub	sp, #24
 800aace:	af00      	add	r7, sp, #0
 800aad0:	60f8      	str	r0, [r7, #12]
 800aad2:	60b9      	str	r1, [r7, #8]
 800aad4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800aad6:	2300      	movs	r3, #0
 800aad8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	7f1b      	ldrb	r3, [r3, #28]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d101      	bne.n	800aae6 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 800aae2:	2302      	movs	r3, #2
 800aae4:	e081      	b.n	800abea <HAL_RTCEx_SetWakeUpTimer+0x120>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2201      	movs	r2, #1
 800aaea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2202      	movs	r2, #2
 800aaf0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	22ca      	movs	r2, #202	; 0xca
 800aaf8:	625a      	str	r2, [r3, #36]	; 0x24
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2253      	movs	r2, #83	; 0x53
 800ab00:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d01e      	beq.n	800ab4e <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 800ab10:	f7fb fd8c 	bl	800662c <HAL_GetTick>
 800ab14:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 800ab16:	e013      	b.n	800ab40 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ab18:	f7fb fd88 	bl	800662c <HAL_GetTick>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab26:	d90b      	bls.n	800ab40 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	22ff      	movs	r2, #255	; 0xff
 800ab2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2203      	movs	r2, #3
 800ab34:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e054      	b.n	800abea <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	f003 0304 	and.w	r3, r3, #4
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1e4      	bne.n	800ab18 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	689a      	ldr	r2, [r3, #8]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab5c:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ab5e:	f7fb fd65 	bl	800662c <HAL_GetTick>
 800ab62:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800ab64:	e013      	b.n	800ab8e <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ab66:	f7fb fd61 	bl	800662c <HAL_GetTick>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab74:	d90b      	bls.n	800ab8e <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	22ff      	movs	r2, #255	; 0xff
 800ab7c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2203      	movs	r2, #3
 800ab82:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	e02d      	b.n	800abea <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	f003 0304 	and.w	r3, r3, #4
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d0e4      	beq.n	800ab66 <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	689a      	ldr	r2, [r3, #8]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f022 0207 	bic.w	r2, r2, #7
 800abaa:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6899      	ldr	r1, [r3, #8]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	430a      	orrs	r2, r1
 800abba:	609a      	str	r2, [r3, #8]

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	615a      	str	r2, [r3, #20]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689a      	ldr	r2, [r3, #8]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800abd2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	22ff      	movs	r2, #255	; 0xff
 800abda:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2201      	movs	r2, #1
 800abe0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3718      	adds	r7, #24
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b082      	sub	sp, #8
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d101      	bne.n	800ac04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac00:	2301      	movs	r3, #1
 800ac02:	e041      	b.n	800ac88 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d106      	bne.n	800ac1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f7fb f93f 	bl	8005e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2202      	movs	r2, #2
 800ac22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	4619      	mov	r1, r3
 800ac30:	4610      	mov	r0, r2
 800ac32:	f000 fc69 	bl	800b508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2201      	movs	r2, #1
 800ac62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2201      	movs	r2, #1
 800ac72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2201      	movs	r2, #1
 800ac82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d001      	beq.n	800aca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	e04e      	b.n	800ad46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2202      	movs	r2, #2
 800acac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68da      	ldr	r2, [r3, #12]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f042 0201 	orr.w	r2, r2, #1
 800acbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a22      	ldr	r2, [pc, #136]	; (800ad50 <HAL_TIM_Base_Start_IT+0xc0>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d022      	beq.n	800ad10 <HAL_TIM_Base_Start_IT+0x80>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acd2:	d01d      	beq.n	800ad10 <HAL_TIM_Base_Start_IT+0x80>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a1e      	ldr	r2, [pc, #120]	; (800ad54 <HAL_TIM_Base_Start_IT+0xc4>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d018      	beq.n	800ad10 <HAL_TIM_Base_Start_IT+0x80>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a1d      	ldr	r2, [pc, #116]	; (800ad58 <HAL_TIM_Base_Start_IT+0xc8>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d013      	beq.n	800ad10 <HAL_TIM_Base_Start_IT+0x80>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a1b      	ldr	r2, [pc, #108]	; (800ad5c <HAL_TIM_Base_Start_IT+0xcc>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d00e      	beq.n	800ad10 <HAL_TIM_Base_Start_IT+0x80>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a1a      	ldr	r2, [pc, #104]	; (800ad60 <HAL_TIM_Base_Start_IT+0xd0>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d009      	beq.n	800ad10 <HAL_TIM_Base_Start_IT+0x80>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a18      	ldr	r2, [pc, #96]	; (800ad64 <HAL_TIM_Base_Start_IT+0xd4>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d004      	beq.n	800ad10 <HAL_TIM_Base_Start_IT+0x80>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a17      	ldr	r2, [pc, #92]	; (800ad68 <HAL_TIM_Base_Start_IT+0xd8>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d111      	bne.n	800ad34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	f003 0307 	and.w	r3, r3, #7
 800ad1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2b06      	cmp	r3, #6
 800ad20:	d010      	beq.n	800ad44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f042 0201 	orr.w	r2, r2, #1
 800ad30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad32:	e007      	b.n	800ad44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f042 0201 	orr.w	r2, r2, #1
 800ad42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bc80      	pop	{r7}
 800ad4e:	4770      	bx	lr
 800ad50:	40010000 	.word	0x40010000
 800ad54:	40000400 	.word	0x40000400
 800ad58:	40000800 	.word	0x40000800
 800ad5c:	40000c00 	.word	0x40000c00
 800ad60:	40010400 	.word	0x40010400
 800ad64:	40014000 	.word	0x40014000
 800ad68:	40001800 	.word	0x40001800

0800ad6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e041      	b.n	800ae02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d106      	bne.n	800ad98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 f839 	bl	800ae0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2202      	movs	r2, #2
 800ad9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	3304      	adds	r3, #4
 800ada8:	4619      	mov	r1, r3
 800adaa:	4610      	mov	r0, r2
 800adac:	f000 fbac 	bl	800b508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2201      	movs	r2, #1
 800ade4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ae12:	bf00      	nop
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bc80      	pop	{r7}
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d109      	bne.n	800ae40 <HAL_TIM_PWM_Start+0x24>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	bf14      	ite	ne
 800ae38:	2301      	movne	r3, #1
 800ae3a:	2300      	moveq	r3, #0
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	e022      	b.n	800ae86 <HAL_TIM_PWM_Start+0x6a>
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	2b04      	cmp	r3, #4
 800ae44:	d109      	bne.n	800ae5a <HAL_TIM_PWM_Start+0x3e>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	bf14      	ite	ne
 800ae52:	2301      	movne	r3, #1
 800ae54:	2300      	moveq	r3, #0
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	e015      	b.n	800ae86 <HAL_TIM_PWM_Start+0x6a>
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b08      	cmp	r3, #8
 800ae5e:	d109      	bne.n	800ae74 <HAL_TIM_PWM_Start+0x58>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	bf14      	ite	ne
 800ae6c:	2301      	movne	r3, #1
 800ae6e:	2300      	moveq	r3, #0
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	e008      	b.n	800ae86 <HAL_TIM_PWM_Start+0x6a>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	bf14      	ite	ne
 800ae80:	2301      	movne	r3, #1
 800ae82:	2300      	moveq	r3, #0
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e07c      	b.n	800af88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d104      	bne.n	800ae9e <HAL_TIM_PWM_Start+0x82>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2202      	movs	r2, #2
 800ae98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae9c:	e013      	b.n	800aec6 <HAL_TIM_PWM_Start+0xaa>
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	2b04      	cmp	r3, #4
 800aea2:	d104      	bne.n	800aeae <HAL_TIM_PWM_Start+0x92>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2202      	movs	r2, #2
 800aea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aeac:	e00b      	b.n	800aec6 <HAL_TIM_PWM_Start+0xaa>
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	2b08      	cmp	r3, #8
 800aeb2:	d104      	bne.n	800aebe <HAL_TIM_PWM_Start+0xa2>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aebc:	e003      	b.n	800aec6 <HAL_TIM_PWM_Start+0xaa>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2202      	movs	r2, #2
 800aec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2201      	movs	r2, #1
 800aecc:	6839      	ldr	r1, [r7, #0]
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 fdfa 	bl	800bac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a2d      	ldr	r2, [pc, #180]	; (800af90 <HAL_TIM_PWM_Start+0x174>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d004      	beq.n	800aee8 <HAL_TIM_PWM_Start+0xcc>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a2c      	ldr	r2, [pc, #176]	; (800af94 <HAL_TIM_PWM_Start+0x178>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d101      	bne.n	800aeec <HAL_TIM_PWM_Start+0xd0>
 800aee8:	2301      	movs	r3, #1
 800aeea:	e000      	b.n	800aeee <HAL_TIM_PWM_Start+0xd2>
 800aeec:	2300      	movs	r3, #0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d007      	beq.n	800af02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a22      	ldr	r2, [pc, #136]	; (800af90 <HAL_TIM_PWM_Start+0x174>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d022      	beq.n	800af52 <HAL_TIM_PWM_Start+0x136>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af14:	d01d      	beq.n	800af52 <HAL_TIM_PWM_Start+0x136>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a1f      	ldr	r2, [pc, #124]	; (800af98 <HAL_TIM_PWM_Start+0x17c>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d018      	beq.n	800af52 <HAL_TIM_PWM_Start+0x136>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a1d      	ldr	r2, [pc, #116]	; (800af9c <HAL_TIM_PWM_Start+0x180>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d013      	beq.n	800af52 <HAL_TIM_PWM_Start+0x136>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a1c      	ldr	r2, [pc, #112]	; (800afa0 <HAL_TIM_PWM_Start+0x184>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d00e      	beq.n	800af52 <HAL_TIM_PWM_Start+0x136>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a16      	ldr	r2, [pc, #88]	; (800af94 <HAL_TIM_PWM_Start+0x178>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d009      	beq.n	800af52 <HAL_TIM_PWM_Start+0x136>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a18      	ldr	r2, [pc, #96]	; (800afa4 <HAL_TIM_PWM_Start+0x188>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d004      	beq.n	800af52 <HAL_TIM_PWM_Start+0x136>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a16      	ldr	r2, [pc, #88]	; (800afa8 <HAL_TIM_PWM_Start+0x18c>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d111      	bne.n	800af76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	f003 0307 	and.w	r3, r3, #7
 800af5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2b06      	cmp	r3, #6
 800af62:	d010      	beq.n	800af86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f042 0201 	orr.w	r2, r2, #1
 800af72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af74:	e007      	b.n	800af86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f042 0201 	orr.w	r2, r2, #1
 800af84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	40010000 	.word	0x40010000
 800af94:	40010400 	.word	0x40010400
 800af98:	40000400 	.word	0x40000400
 800af9c:	40000800 	.word	0x40000800
 800afa0:	40000c00 	.word	0x40000c00
 800afa4:	40014000 	.word	0x40014000
 800afa8:	40001800 	.word	0x40001800

0800afac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	f003 0302 	and.w	r3, r3, #2
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d122      	bne.n	800b008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d11b      	bne.n	800b008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f06f 0202 	mvn.w	r2, #2
 800afd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	f003 0303 	and.w	r3, r3, #3
 800afea:	2b00      	cmp	r3, #0
 800afec:	d003      	beq.n	800aff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fa6f 	bl	800b4d2 <HAL_TIM_IC_CaptureCallback>
 800aff4:	e005      	b.n	800b002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fa62 	bl	800b4c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fa71 	bl	800b4e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	f003 0304 	and.w	r3, r3, #4
 800b012:	2b04      	cmp	r3, #4
 800b014:	d122      	bne.n	800b05c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	f003 0304 	and.w	r3, r3, #4
 800b020:	2b04      	cmp	r3, #4
 800b022:	d11b      	bne.n	800b05c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f06f 0204 	mvn.w	r2, #4
 800b02c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2202      	movs	r2, #2
 800b032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d003      	beq.n	800b04a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fa45 	bl	800b4d2 <HAL_TIM_IC_CaptureCallback>
 800b048:	e005      	b.n	800b056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fa38 	bl	800b4c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fa47 	bl	800b4e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	f003 0308 	and.w	r3, r3, #8
 800b066:	2b08      	cmp	r3, #8
 800b068:	d122      	bne.n	800b0b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	f003 0308 	and.w	r3, r3, #8
 800b074:	2b08      	cmp	r3, #8
 800b076:	d11b      	bne.n	800b0b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f06f 0208 	mvn.w	r2, #8
 800b080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2204      	movs	r2, #4
 800b086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	f003 0303 	and.w	r3, r3, #3
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fa1b 	bl	800b4d2 <HAL_TIM_IC_CaptureCallback>
 800b09c:	e005      	b.n	800b0aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fa0e 	bl	800b4c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fa1d 	bl	800b4e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	f003 0310 	and.w	r3, r3, #16
 800b0ba:	2b10      	cmp	r3, #16
 800b0bc:	d122      	bne.n	800b104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	f003 0310 	and.w	r3, r3, #16
 800b0c8:	2b10      	cmp	r3, #16
 800b0ca:	d11b      	bne.n	800b104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f06f 0210 	mvn.w	r2, #16
 800b0d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2208      	movs	r2, #8
 800b0da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d003      	beq.n	800b0f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f9f1 	bl	800b4d2 <HAL_TIM_IC_CaptureCallback>
 800b0f0:	e005      	b.n	800b0fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f9e4 	bl	800b4c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f9f3 	bl	800b4e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	f003 0301 	and.w	r3, r3, #1
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d10e      	bne.n	800b130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d107      	bne.n	800b130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f06f 0201 	mvn.w	r2, #1
 800b128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7f9 fb2e 	bl	800478c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b13a:	2b80      	cmp	r3, #128	; 0x80
 800b13c:	d10e      	bne.n	800b15c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b148:	2b80      	cmp	r3, #128	; 0x80
 800b14a:	d107      	bne.n	800b15c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 fdae 	bl	800bcb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b166:	2b40      	cmp	r3, #64	; 0x40
 800b168:	d10e      	bne.n	800b188 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b174:	2b40      	cmp	r3, #64	; 0x40
 800b176:	d107      	bne.n	800b188 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f9b7 	bl	800b4f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	f003 0320 	and.w	r3, r3, #32
 800b192:	2b20      	cmp	r3, #32
 800b194:	d10e      	bne.n	800b1b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	f003 0320 	and.w	r3, r3, #32
 800b1a0:	2b20      	cmp	r3, #32
 800b1a2:	d107      	bne.n	800b1b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f06f 0220 	mvn.w	r2, #32
 800b1ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fd79 	bl	800bca6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b1b4:	bf00      	nop
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d101      	bne.n	800b1d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	e0ac      	b.n	800b330 <HAL_TIM_PWM_ConfigChannel+0x174>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2b0c      	cmp	r3, #12
 800b1e2:	f200 809f 	bhi.w	800b324 <HAL_TIM_PWM_ConfigChannel+0x168>
 800b1e6:	a201      	add	r2, pc, #4	; (adr r2, 800b1ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ec:	0800b221 	.word	0x0800b221
 800b1f0:	0800b325 	.word	0x0800b325
 800b1f4:	0800b325 	.word	0x0800b325
 800b1f8:	0800b325 	.word	0x0800b325
 800b1fc:	0800b261 	.word	0x0800b261
 800b200:	0800b325 	.word	0x0800b325
 800b204:	0800b325 	.word	0x0800b325
 800b208:	0800b325 	.word	0x0800b325
 800b20c:	0800b2a3 	.word	0x0800b2a3
 800b210:	0800b325 	.word	0x0800b325
 800b214:	0800b325 	.word	0x0800b325
 800b218:	0800b325 	.word	0x0800b325
 800b21c:	0800b2e3 	.word	0x0800b2e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68b9      	ldr	r1, [r7, #8]
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fa0c 	bl	800b644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	699a      	ldr	r2, [r3, #24]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f042 0208 	orr.w	r2, r2, #8
 800b23a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	699a      	ldr	r2, [r3, #24]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f022 0204 	bic.w	r2, r2, #4
 800b24a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6999      	ldr	r1, [r3, #24]
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	691a      	ldr	r2, [r3, #16]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	430a      	orrs	r2, r1
 800b25c:	619a      	str	r2, [r3, #24]
      break;
 800b25e:	e062      	b.n	800b326 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68b9      	ldr	r1, [r7, #8]
 800b266:	4618      	mov	r0, r3
 800b268:	f000 fa5c 	bl	800b724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	699a      	ldr	r2, [r3, #24]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b27a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	699a      	ldr	r2, [r3, #24]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b28a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	6999      	ldr	r1, [r3, #24]
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	021a      	lsls	r2, r3, #8
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	430a      	orrs	r2, r1
 800b29e:	619a      	str	r2, [r3, #24]
      break;
 800b2a0:	e041      	b.n	800b326 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68b9      	ldr	r1, [r7, #8]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f000 faaf 	bl	800b80c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	69da      	ldr	r2, [r3, #28]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f042 0208 	orr.w	r2, r2, #8
 800b2bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	69da      	ldr	r2, [r3, #28]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f022 0204 	bic.w	r2, r2, #4
 800b2cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	69d9      	ldr	r1, [r3, #28]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	691a      	ldr	r2, [r3, #16]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	430a      	orrs	r2, r1
 800b2de:	61da      	str	r2, [r3, #28]
      break;
 800b2e0:	e021      	b.n	800b326 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68b9      	ldr	r1, [r7, #8]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f000 fb03 	bl	800b8f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	69da      	ldr	r2, [r3, #28]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	69da      	ldr	r2, [r3, #28]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b30c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	69d9      	ldr	r1, [r3, #28]
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	021a      	lsls	r2, r3, #8
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	430a      	orrs	r2, r1
 800b320:	61da      	str	r2, [r3, #28]
      break;
 800b322:	e000      	b.n	800b326 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800b324:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d101      	bne.n	800b350 <HAL_TIM_ConfigClockSource+0x18>
 800b34c:	2302      	movs	r3, #2
 800b34e:	e0b3      	b.n	800b4b8 <HAL_TIM_ConfigClockSource+0x180>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2202      	movs	r2, #2
 800b35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b36e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b376:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b388:	d03e      	beq.n	800b408 <HAL_TIM_ConfigClockSource+0xd0>
 800b38a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b38e:	f200 8087 	bhi.w	800b4a0 <HAL_TIM_ConfigClockSource+0x168>
 800b392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b396:	f000 8085 	beq.w	800b4a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b39a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b39e:	d87f      	bhi.n	800b4a0 <HAL_TIM_ConfigClockSource+0x168>
 800b3a0:	2b70      	cmp	r3, #112	; 0x70
 800b3a2:	d01a      	beq.n	800b3da <HAL_TIM_ConfigClockSource+0xa2>
 800b3a4:	2b70      	cmp	r3, #112	; 0x70
 800b3a6:	d87b      	bhi.n	800b4a0 <HAL_TIM_ConfigClockSource+0x168>
 800b3a8:	2b60      	cmp	r3, #96	; 0x60
 800b3aa:	d050      	beq.n	800b44e <HAL_TIM_ConfigClockSource+0x116>
 800b3ac:	2b60      	cmp	r3, #96	; 0x60
 800b3ae:	d877      	bhi.n	800b4a0 <HAL_TIM_ConfigClockSource+0x168>
 800b3b0:	2b50      	cmp	r3, #80	; 0x50
 800b3b2:	d03c      	beq.n	800b42e <HAL_TIM_ConfigClockSource+0xf6>
 800b3b4:	2b50      	cmp	r3, #80	; 0x50
 800b3b6:	d873      	bhi.n	800b4a0 <HAL_TIM_ConfigClockSource+0x168>
 800b3b8:	2b40      	cmp	r3, #64	; 0x40
 800b3ba:	d058      	beq.n	800b46e <HAL_TIM_ConfigClockSource+0x136>
 800b3bc:	2b40      	cmp	r3, #64	; 0x40
 800b3be:	d86f      	bhi.n	800b4a0 <HAL_TIM_ConfigClockSource+0x168>
 800b3c0:	2b30      	cmp	r3, #48	; 0x30
 800b3c2:	d064      	beq.n	800b48e <HAL_TIM_ConfigClockSource+0x156>
 800b3c4:	2b30      	cmp	r3, #48	; 0x30
 800b3c6:	d86b      	bhi.n	800b4a0 <HAL_TIM_ConfigClockSource+0x168>
 800b3c8:	2b20      	cmp	r3, #32
 800b3ca:	d060      	beq.n	800b48e <HAL_TIM_ConfigClockSource+0x156>
 800b3cc:	2b20      	cmp	r3, #32
 800b3ce:	d867      	bhi.n	800b4a0 <HAL_TIM_ConfigClockSource+0x168>
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d05c      	beq.n	800b48e <HAL_TIM_ConfigClockSource+0x156>
 800b3d4:	2b10      	cmp	r3, #16
 800b3d6:	d05a      	beq.n	800b48e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b3d8:	e062      	b.n	800b4a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6818      	ldr	r0, [r3, #0]
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	6899      	ldr	r1, [r3, #8]
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	f000 fb4e 	bl	800ba8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b3fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	609a      	str	r2, [r3, #8]
      break;
 800b406:	e04e      	b.n	800b4a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6818      	ldr	r0, [r3, #0]
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	6899      	ldr	r1, [r3, #8]
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	f000 fb37 	bl	800ba8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	689a      	ldr	r2, [r3, #8]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b42a:	609a      	str	r2, [r3, #8]
      break;
 800b42c:	e03b      	b.n	800b4a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6818      	ldr	r0, [r3, #0]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	6859      	ldr	r1, [r3, #4]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	461a      	mov	r2, r3
 800b43c:	f000 faae 	bl	800b99c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2150      	movs	r1, #80	; 0x50
 800b446:	4618      	mov	r0, r3
 800b448:	f000 fb05 	bl	800ba56 <TIM_ITRx_SetConfig>
      break;
 800b44c:	e02b      	b.n	800b4a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6818      	ldr	r0, [r3, #0]
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	6859      	ldr	r1, [r3, #4]
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	461a      	mov	r2, r3
 800b45c:	f000 facc 	bl	800b9f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2160      	movs	r1, #96	; 0x60
 800b466:	4618      	mov	r0, r3
 800b468:	f000 faf5 	bl	800ba56 <TIM_ITRx_SetConfig>
      break;
 800b46c:	e01b      	b.n	800b4a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6818      	ldr	r0, [r3, #0]
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	6859      	ldr	r1, [r3, #4]
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	461a      	mov	r2, r3
 800b47c:	f000 fa8e 	bl	800b99c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2140      	movs	r1, #64	; 0x40
 800b486:	4618      	mov	r0, r3
 800b488:	f000 fae5 	bl	800ba56 <TIM_ITRx_SetConfig>
      break;
 800b48c:	e00b      	b.n	800b4a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4619      	mov	r1, r3
 800b498:	4610      	mov	r0, r2
 800b49a:	f000 fadc 	bl	800ba56 <TIM_ITRx_SetConfig>
        break;
 800b49e:	e002      	b.n	800b4a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b4a0:	bf00      	nop
 800b4a2:	e000      	b.n	800b4a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b4a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b4c8:	bf00      	nop
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bc80      	pop	{r7}
 800b4d0:	4770      	bx	lr

0800b4d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b4d2:	b480      	push	{r7}
 800b4d4:	b083      	sub	sp, #12
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b4da:	bf00      	nop
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bc80      	pop	{r7}
 800b4e2:	4770      	bx	lr

0800b4e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bc80      	pop	{r7}
 800b4f4:	4770      	bx	lr

0800b4f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b083      	sub	sp, #12
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b4fe:	bf00      	nop
 800b500:	370c      	adds	r7, #12
 800b502:	46bd      	mov	sp, r7
 800b504:	bc80      	pop	{r7}
 800b506:	4770      	bx	lr

0800b508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a3f      	ldr	r2, [pc, #252]	; (800b618 <TIM_Base_SetConfig+0x110>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d013      	beq.n	800b548 <TIM_Base_SetConfig+0x40>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b526:	d00f      	beq.n	800b548 <TIM_Base_SetConfig+0x40>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a3c      	ldr	r2, [pc, #240]	; (800b61c <TIM_Base_SetConfig+0x114>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d00b      	beq.n	800b548 <TIM_Base_SetConfig+0x40>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a3b      	ldr	r2, [pc, #236]	; (800b620 <TIM_Base_SetConfig+0x118>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d007      	beq.n	800b548 <TIM_Base_SetConfig+0x40>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a3a      	ldr	r2, [pc, #232]	; (800b624 <TIM_Base_SetConfig+0x11c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d003      	beq.n	800b548 <TIM_Base_SetConfig+0x40>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a39      	ldr	r2, [pc, #228]	; (800b628 <TIM_Base_SetConfig+0x120>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d108      	bne.n	800b55a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b54e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	4313      	orrs	r3, r2
 800b558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4a2e      	ldr	r2, [pc, #184]	; (800b618 <TIM_Base_SetConfig+0x110>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d02b      	beq.n	800b5ba <TIM_Base_SetConfig+0xb2>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b568:	d027      	beq.n	800b5ba <TIM_Base_SetConfig+0xb2>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4a2b      	ldr	r2, [pc, #172]	; (800b61c <TIM_Base_SetConfig+0x114>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d023      	beq.n	800b5ba <TIM_Base_SetConfig+0xb2>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	4a2a      	ldr	r2, [pc, #168]	; (800b620 <TIM_Base_SetConfig+0x118>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d01f      	beq.n	800b5ba <TIM_Base_SetConfig+0xb2>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a29      	ldr	r2, [pc, #164]	; (800b624 <TIM_Base_SetConfig+0x11c>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d01b      	beq.n	800b5ba <TIM_Base_SetConfig+0xb2>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4a28      	ldr	r2, [pc, #160]	; (800b628 <TIM_Base_SetConfig+0x120>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d017      	beq.n	800b5ba <TIM_Base_SetConfig+0xb2>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a27      	ldr	r2, [pc, #156]	; (800b62c <TIM_Base_SetConfig+0x124>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d013      	beq.n	800b5ba <TIM_Base_SetConfig+0xb2>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4a26      	ldr	r2, [pc, #152]	; (800b630 <TIM_Base_SetConfig+0x128>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d00f      	beq.n	800b5ba <TIM_Base_SetConfig+0xb2>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a25      	ldr	r2, [pc, #148]	; (800b634 <TIM_Base_SetConfig+0x12c>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d00b      	beq.n	800b5ba <TIM_Base_SetConfig+0xb2>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a24      	ldr	r2, [pc, #144]	; (800b638 <TIM_Base_SetConfig+0x130>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d007      	beq.n	800b5ba <TIM_Base_SetConfig+0xb2>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a23      	ldr	r2, [pc, #140]	; (800b63c <TIM_Base_SetConfig+0x134>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d003      	beq.n	800b5ba <TIM_Base_SetConfig+0xb2>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a22      	ldr	r2, [pc, #136]	; (800b640 <TIM_Base_SetConfig+0x138>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d108      	bne.n	800b5cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	689a      	ldr	r2, [r3, #8]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a09      	ldr	r2, [pc, #36]	; (800b618 <TIM_Base_SetConfig+0x110>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d003      	beq.n	800b600 <TIM_Base_SetConfig+0xf8>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a0b      	ldr	r2, [pc, #44]	; (800b628 <TIM_Base_SetConfig+0x120>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d103      	bne.n	800b608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	691a      	ldr	r2, [r3, #16]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	615a      	str	r2, [r3, #20]
}
 800b60e:	bf00      	nop
 800b610:	3714      	adds	r7, #20
 800b612:	46bd      	mov	sp, r7
 800b614:	bc80      	pop	{r7}
 800b616:	4770      	bx	lr
 800b618:	40010000 	.word	0x40010000
 800b61c:	40000400 	.word	0x40000400
 800b620:	40000800 	.word	0x40000800
 800b624:	40000c00 	.word	0x40000c00
 800b628:	40010400 	.word	0x40010400
 800b62c:	40014000 	.word	0x40014000
 800b630:	40014400 	.word	0x40014400
 800b634:	40014800 	.word	0x40014800
 800b638:	40001800 	.word	0x40001800
 800b63c:	40001c00 	.word	0x40001c00
 800b640:	40002000 	.word	0x40002000

0800b644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b644:	b480      	push	{r7}
 800b646:	b087      	sub	sp, #28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	f023 0201 	bic.w	r2, r3, #1
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f023 0303 	bic.w	r3, r3, #3
 800b67a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	4313      	orrs	r3, r2
 800b684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f023 0302 	bic.w	r3, r3, #2
 800b68c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	4313      	orrs	r3, r2
 800b696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a20      	ldr	r2, [pc, #128]	; (800b71c <TIM_OC1_SetConfig+0xd8>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d003      	beq.n	800b6a8 <TIM_OC1_SetConfig+0x64>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4a1f      	ldr	r2, [pc, #124]	; (800b720 <TIM_OC1_SetConfig+0xdc>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d10c      	bne.n	800b6c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	f023 0308 	bic.w	r3, r3, #8
 800b6ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f023 0304 	bic.w	r3, r3, #4
 800b6c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a15      	ldr	r2, [pc, #84]	; (800b71c <TIM_OC1_SetConfig+0xd8>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d003      	beq.n	800b6d2 <TIM_OC1_SetConfig+0x8e>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a14      	ldr	r2, [pc, #80]	; (800b720 <TIM_OC1_SetConfig+0xdc>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d111      	bne.n	800b6f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b6e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	693a      	ldr	r2, [r7, #16]
 800b6fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	621a      	str	r2, [r3, #32]
}
 800b710:	bf00      	nop
 800b712:	371c      	adds	r7, #28
 800b714:	46bd      	mov	sp, r7
 800b716:	bc80      	pop	{r7}
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	40010000 	.word	0x40010000
 800b720:	40010400 	.word	0x40010400

0800b724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	f023 0210 	bic.w	r2, r3, #16
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a1b      	ldr	r3, [r3, #32]
 800b73e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b75a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	021b      	lsls	r3, r3, #8
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	4313      	orrs	r3, r2
 800b766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	f023 0320 	bic.w	r3, r3, #32
 800b76e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	011b      	lsls	r3, r3, #4
 800b776:	697a      	ldr	r2, [r7, #20]
 800b778:	4313      	orrs	r3, r2
 800b77a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a21      	ldr	r2, [pc, #132]	; (800b804 <TIM_OC2_SetConfig+0xe0>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d003      	beq.n	800b78c <TIM_OC2_SetConfig+0x68>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a20      	ldr	r2, [pc, #128]	; (800b808 <TIM_OC2_SetConfig+0xe4>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d10d      	bne.n	800b7a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	011b      	lsls	r3, r3, #4
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a16      	ldr	r2, [pc, #88]	; (800b804 <TIM_OC2_SetConfig+0xe0>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d003      	beq.n	800b7b8 <TIM_OC2_SetConfig+0x94>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a15      	ldr	r2, [pc, #84]	; (800b808 <TIM_OC2_SetConfig+0xe4>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d113      	bne.n	800b7e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	695b      	ldr	r3, [r3, #20]
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	693a      	ldr	r2, [r7, #16]
 800b7e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	685a      	ldr	r2, [r3, #4]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	621a      	str	r2, [r3, #32]
}
 800b7fa:	bf00      	nop
 800b7fc:	371c      	adds	r7, #28
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bc80      	pop	{r7}
 800b802:	4770      	bx	lr
 800b804:	40010000 	.word	0x40010000
 800b808:	40010400 	.word	0x40010400

0800b80c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b087      	sub	sp, #28
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a1b      	ldr	r3, [r3, #32]
 800b81a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a1b      	ldr	r3, [r3, #32]
 800b826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	69db      	ldr	r3, [r3, #28]
 800b832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b83a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f023 0303 	bic.w	r3, r3, #3
 800b842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	021b      	lsls	r3, r3, #8
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	4313      	orrs	r3, r2
 800b860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a21      	ldr	r2, [pc, #132]	; (800b8ec <TIM_OC3_SetConfig+0xe0>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d003      	beq.n	800b872 <TIM_OC3_SetConfig+0x66>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a20      	ldr	r2, [pc, #128]	; (800b8f0 <TIM_OC3_SetConfig+0xe4>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d10d      	bne.n	800b88e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	021b      	lsls	r3, r3, #8
 800b880:	697a      	ldr	r2, [r7, #20]
 800b882:	4313      	orrs	r3, r2
 800b884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b88c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a16      	ldr	r2, [pc, #88]	; (800b8ec <TIM_OC3_SetConfig+0xe0>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d003      	beq.n	800b89e <TIM_OC3_SetConfig+0x92>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a15      	ldr	r2, [pc, #84]	; (800b8f0 <TIM_OC3_SetConfig+0xe4>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d113      	bne.n	800b8c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b8ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	011b      	lsls	r3, r3, #4
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	699b      	ldr	r3, [r3, #24]
 800b8be:	011b      	lsls	r3, r3, #4
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	697a      	ldr	r2, [r7, #20]
 800b8de:	621a      	str	r2, [r3, #32]
}
 800b8e0:	bf00      	nop
 800b8e2:	371c      	adds	r7, #28
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bc80      	pop	{r7}
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	40010000 	.word	0x40010000
 800b8f0:	40010400 	.word	0x40010400

0800b8f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b087      	sub	sp, #28
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a1b      	ldr	r3, [r3, #32]
 800b90e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	69db      	ldr	r3, [r3, #28]
 800b91a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b92a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	021b      	lsls	r3, r3, #8
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	4313      	orrs	r3, r2
 800b936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b93e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	031b      	lsls	r3, r3, #12
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	4313      	orrs	r3, r2
 800b94a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a11      	ldr	r2, [pc, #68]	; (800b994 <TIM_OC4_SetConfig+0xa0>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d003      	beq.n	800b95c <TIM_OC4_SetConfig+0x68>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a10      	ldr	r2, [pc, #64]	; (800b998 <TIM_OC4_SetConfig+0xa4>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d109      	bne.n	800b970 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	695b      	ldr	r3, [r3, #20]
 800b968:	019b      	lsls	r3, r3, #6
 800b96a:	697a      	ldr	r2, [r7, #20]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	621a      	str	r2, [r3, #32]
}
 800b98a:	bf00      	nop
 800b98c:	371c      	adds	r7, #28
 800b98e:	46bd      	mov	sp, r7
 800b990:	bc80      	pop	{r7}
 800b992:	4770      	bx	lr
 800b994:	40010000 	.word	0x40010000
 800b998:	40010400 	.word	0x40010400

0800b99c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6a1b      	ldr	r3, [r3, #32]
 800b9ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6a1b      	ldr	r3, [r3, #32]
 800b9b2:	f023 0201 	bic.w	r2, r3, #1
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	011b      	lsls	r3, r3, #4
 800b9cc:	693a      	ldr	r2, [r7, #16]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	f023 030a 	bic.w	r3, r3, #10
 800b9d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9da:	697a      	ldr	r2, [r7, #20]
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	693a      	ldr	r2, [r7, #16]
 800b9e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	621a      	str	r2, [r3, #32]
}
 800b9ee:	bf00      	nop
 800b9f0:	371c      	adds	r7, #28
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bc80      	pop	{r7}
 800b9f6:	4770      	bx	lr

0800b9f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6a1b      	ldr	r3, [r3, #32]
 800ba08:	f023 0210 	bic.w	r2, r3, #16
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	031b      	lsls	r3, r3, #12
 800ba28:	697a      	ldr	r2, [r7, #20]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	011b      	lsls	r3, r3, #4
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	693a      	ldr	r2, [r7, #16]
 800ba4a:	621a      	str	r2, [r3, #32]
}
 800ba4c:	bf00      	nop
 800ba4e:	371c      	adds	r7, #28
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bc80      	pop	{r7}
 800ba54:	4770      	bx	lr

0800ba56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b085      	sub	sp, #20
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	f043 0307 	orr.w	r3, r3, #7
 800ba78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	609a      	str	r2, [r3, #8]
}
 800ba80:	bf00      	nop
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bc80      	pop	{r7}
 800ba88:	4770      	bx	lr

0800ba8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b087      	sub	sp, #28
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	60b9      	str	r1, [r7, #8]
 800ba94:	607a      	str	r2, [r7, #4]
 800ba96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800baa4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	021a      	lsls	r2, r3, #8
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	431a      	orrs	r2, r3
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	697a      	ldr	r2, [r7, #20]
 800bab4:	4313      	orrs	r3, r2
 800bab6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	609a      	str	r2, [r3, #8]
}
 800babe:	bf00      	nop
 800bac0:	371c      	adds	r7, #28
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bc80      	pop	{r7}
 800bac6:	4770      	bx	lr

0800bac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bac8:	b480      	push	{r7}
 800baca:	b087      	sub	sp, #28
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	f003 031f 	and.w	r3, r3, #31
 800bada:	2201      	movs	r2, #1
 800badc:	fa02 f303 	lsl.w	r3, r2, r3
 800bae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6a1a      	ldr	r2, [r3, #32]
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	43db      	mvns	r3, r3
 800baea:	401a      	ands	r2, r3
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6a1a      	ldr	r2, [r3, #32]
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	f003 031f 	and.w	r3, r3, #31
 800bafa:	6879      	ldr	r1, [r7, #4]
 800bafc:	fa01 f303 	lsl.w	r3, r1, r3
 800bb00:	431a      	orrs	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	621a      	str	r2, [r3, #32]
}
 800bb06:	bf00      	nop
 800bb08:	371c      	adds	r7, #28
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bc80      	pop	{r7}
 800bb0e:	4770      	bx	lr

0800bb10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d101      	bne.n	800bb28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb24:	2302      	movs	r3, #2
 800bb26:	e05a      	b.n	800bbde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2202      	movs	r2, #2
 800bb34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a20      	ldr	r2, [pc, #128]	; (800bbe8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d022      	beq.n	800bbb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb74:	d01d      	beq.n	800bbb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a1c      	ldr	r2, [pc, #112]	; (800bbec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d018      	beq.n	800bbb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a1a      	ldr	r2, [pc, #104]	; (800bbf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d013      	beq.n	800bbb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a19      	ldr	r2, [pc, #100]	; (800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d00e      	beq.n	800bbb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a17      	ldr	r2, [pc, #92]	; (800bbf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d009      	beq.n	800bbb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a16      	ldr	r2, [pc, #88]	; (800bbfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d004      	beq.n	800bbb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a14      	ldr	r2, [pc, #80]	; (800bc00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d10c      	bne.n	800bbcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bc80      	pop	{r7}
 800bbe6:	4770      	bx	lr
 800bbe8:	40010000 	.word	0x40010000
 800bbec:	40000400 	.word	0x40000400
 800bbf0:	40000800 	.word	0x40000800
 800bbf4:	40000c00 	.word	0x40000c00
 800bbf8:	40010400 	.word	0x40010400
 800bbfc:	40014000 	.word	0x40014000
 800bc00:	40001800 	.word	0x40001800

0800bc04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d101      	bne.n	800bc20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bc1c:	2302      	movs	r3, #2
 800bc1e:	e03d      	b.n	800bc9c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2201      	movs	r2, #1
 800bc24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	69db      	ldr	r3, [r3, #28]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3714      	adds	r7, #20
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bc80      	pop	{r7}
 800bca4:	4770      	bx	lr

0800bca6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b083      	sub	sp, #12
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcae:	bf00      	nop
 800bcb0:	370c      	adds	r7, #12
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bc80      	pop	{r7}
 800bcb6:	4770      	bx	lr

0800bcb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bc80      	pop	{r7}
 800bcc8:	4770      	bx	lr

0800bcca <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bcca:	b084      	sub	sp, #16
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	f107 001c 	add.w	r0, r7, #28
 800bcd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d122      	bne.n	800bd28 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bcf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bd0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d105      	bne.n	800bd1c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 f98f 	bl	800c040 <USB_CoreReset>
 800bd22:	4603      	mov	r3, r0
 800bd24:	73fb      	strb	r3, [r7, #15]
 800bd26:	e010      	b.n	800bd4a <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 f983 	bl	800c040 <USB_CoreReset>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d10b      	bne.n	800bd68 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	f043 0206 	orr.w	r2, r3, #6
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	f043 0220 	orr.w	r2, r3, #32
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd74:	b004      	add	sp, #16
 800bd76:	4770      	bx	lr

0800bd78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	f043 0201 	orr.w	r2, r3, #1
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	370c      	adds	r7, #12
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bc80      	pop	{r7}
 800bd96:	4770      	bx	lr

0800bd98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	f023 0201 	bic.w	r2, r3, #1
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	370c      	adds	r7, #12
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bc80      	pop	{r7}
 800bdb6:	4770      	bx	lr

0800bdb8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bdd4:	78fb      	ldrb	r3, [r7, #3]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d115      	bne.n	800be06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bde6:	2001      	movs	r0, #1
 800bde8:	f7fa fc2a 	bl	8006640 <HAL_Delay>
      ms++;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f916 	bl	800c024 <USB_GetMode>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d01e      	beq.n	800be3c <USB_SetCurrentMode+0x84>
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2b31      	cmp	r3, #49	; 0x31
 800be02:	d9f0      	bls.n	800bde6 <USB_SetCurrentMode+0x2e>
 800be04:	e01a      	b.n	800be3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800be06:	78fb      	ldrb	r3, [r7, #3]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d115      	bne.n	800be38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800be18:	2001      	movs	r0, #1
 800be1a:	f7fa fc11 	bl	8006640 <HAL_Delay>
      ms++;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	3301      	adds	r3, #1
 800be22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f8fd 	bl	800c024 <USB_GetMode>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d005      	beq.n	800be3c <USB_SetCurrentMode+0x84>
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b31      	cmp	r3, #49	; 0x31
 800be34:	d9f0      	bls.n	800be18 <USB_SetCurrentMode+0x60>
 800be36:	e001      	b.n	800be3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	e005      	b.n	800be48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2b32      	cmp	r3, #50	; 0x32
 800be40:	d101      	bne.n	800be46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e000      	b.n	800be48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800be46:	2300      	movs	r3, #0
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800be5a:	2300      	movs	r3, #0
 800be5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	019b      	lsls	r3, r3, #6
 800be62:	f043 0220 	orr.w	r2, r3, #32
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3301      	adds	r3, #1
 800be6e:	60fb      	str	r3, [r7, #12]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	4a08      	ldr	r2, [pc, #32]	; (800be94 <USB_FlushTxFifo+0x44>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d901      	bls.n	800be7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800be78:	2303      	movs	r3, #3
 800be7a:	e006      	b.n	800be8a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	f003 0320 	and.w	r3, r3, #32
 800be84:	2b20      	cmp	r3, #32
 800be86:	d0f0      	beq.n	800be6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3714      	adds	r7, #20
 800be8e:	46bd      	mov	sp, r7
 800be90:	bc80      	pop	{r7}
 800be92:	4770      	bx	lr
 800be94:	00030d40 	.word	0x00030d40

0800be98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2210      	movs	r2, #16
 800bea8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	3301      	adds	r3, #1
 800beae:	60fb      	str	r3, [r7, #12]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	4a08      	ldr	r2, [pc, #32]	; (800bed4 <USB_FlushRxFifo+0x3c>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d901      	bls.n	800bebc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800beb8:	2303      	movs	r3, #3
 800beba:	e006      	b.n	800beca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	f003 0310 	and.w	r3, r3, #16
 800bec4:	2b10      	cmp	r3, #16
 800bec6:	d0f0      	beq.n	800beaa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3714      	adds	r7, #20
 800bece:	46bd      	mov	sp, r7
 800bed0:	bc80      	pop	{r7}
 800bed2:	4770      	bx	lr
 800bed4:	00030d40 	.word	0x00030d40

0800bed8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bed8:	b480      	push	{r7}
 800beda:	b089      	sub	sp, #36	; 0x24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	4611      	mov	r1, r2
 800bee4:	461a      	mov	r2, r3
 800bee6:	460b      	mov	r3, r1
 800bee8:	71fb      	strb	r3, [r7, #7]
 800beea:	4613      	mov	r3, r2
 800beec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bef6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800befa:	2b00      	cmp	r3, #0
 800befc:	d123      	bne.n	800bf46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800befe:	88bb      	ldrh	r3, [r7, #4]
 800bf00:	3303      	adds	r3, #3
 800bf02:	089b      	lsrs	r3, r3, #2
 800bf04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bf06:	2300      	movs	r3, #0
 800bf08:	61bb      	str	r3, [r7, #24]
 800bf0a:	e018      	b.n	800bf3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bf0c:	79fb      	ldrb	r3, [r7, #7]
 800bf0e:	031a      	lsls	r2, r3, #12
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf18:	461a      	mov	r2, r3
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	3301      	adds	r3, #1
 800bf24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	3301      	adds	r3, #1
 800bf36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	61bb      	str	r3, [r7, #24]
 800bf3e:	69ba      	ldr	r2, [r7, #24]
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d3e2      	bcc.n	800bf0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3724      	adds	r7, #36	; 0x24
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bc80      	pop	{r7}
 800bf50:	4770      	bx	lr

0800bf52 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bf52:	b480      	push	{r7}
 800bf54:	b08b      	sub	sp, #44	; 0x2c
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	60f8      	str	r0, [r7, #12]
 800bf5a:	60b9      	str	r1, [r7, #8]
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bf68:	88fb      	ldrh	r3, [r7, #6]
 800bf6a:	089b      	lsrs	r3, r3, #2
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bf70:	88fb      	ldrh	r3, [r7, #6]
 800bf72:	f003 0303 	and.w	r3, r3, #3
 800bf76:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bf78:	2300      	movs	r3, #0
 800bf7a:	623b      	str	r3, [r7, #32]
 800bf7c:	e014      	b.n	800bfa8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	601a      	str	r2, [r3, #0]
    pDest++;
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	3301      	adds	r3, #1
 800bf94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf98:	3301      	adds	r3, #1
 800bf9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bfa2:	6a3b      	ldr	r3, [r7, #32]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	623b      	str	r3, [r7, #32]
 800bfa8:	6a3a      	ldr	r2, [r7, #32]
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d3e6      	bcc.n	800bf7e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bfb0:	8bfb      	ldrh	r3, [r7, #30]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d01e      	beq.n	800bff4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	f107 0310 	add.w	r3, r7, #16
 800bfc6:	6812      	ldr	r2, [r2, #0]
 800bfc8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	00db      	lsls	r3, r3, #3
 800bfd2:	fa22 f303 	lsr.w	r3, r2, r3
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfda:	701a      	strb	r2, [r3, #0]
      i++;
 800bfdc:	6a3b      	ldr	r3, [r7, #32]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	623b      	str	r3, [r7, #32]
      pDest++;
 800bfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bfe8:	8bfb      	ldrh	r3, [r7, #30]
 800bfea:	3b01      	subs	r3, #1
 800bfec:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bfee:	8bfb      	ldrh	r3, [r7, #30]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1ea      	bne.n	800bfca <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	372c      	adds	r7, #44	; 0x2c
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bc80      	pop	{r7}
 800bffe:	4770      	bx	lr

0800c000 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	695b      	ldr	r3, [r3, #20]
 800c00c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	699b      	ldr	r3, [r3, #24]
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	4013      	ands	r3, r2
 800c016:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c018:	68fb      	ldr	r3, [r7, #12]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3714      	adds	r7, #20
 800c01e:	46bd      	mov	sp, r7
 800c020:	bc80      	pop	{r7}
 800c022:	4770      	bx	lr

0800c024 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	695b      	ldr	r3, [r3, #20]
 800c030:	f003 0301 	and.w	r3, r3, #1
}
 800c034:	4618      	mov	r0, r3
 800c036:	370c      	adds	r7, #12
 800c038:	46bd      	mov	sp, r7
 800c03a:	bc80      	pop	{r7}
 800c03c:	4770      	bx	lr
	...

0800c040 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c048:	2300      	movs	r3, #0
 800c04a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	3301      	adds	r3, #1
 800c050:	60fb      	str	r3, [r7, #12]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	4a12      	ldr	r2, [pc, #72]	; (800c0a0 <USB_CoreReset+0x60>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d901      	bls.n	800c05e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c05a:	2303      	movs	r3, #3
 800c05c:	e01b      	b.n	800c096 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	691b      	ldr	r3, [r3, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	daf2      	bge.n	800c04c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c066:	2300      	movs	r3, #0
 800c068:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	f043 0201 	orr.w	r2, r3, #1
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3301      	adds	r3, #1
 800c07a:	60fb      	str	r3, [r7, #12]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	4a08      	ldr	r2, [pc, #32]	; (800c0a0 <USB_CoreReset+0x60>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d901      	bls.n	800c088 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c084:	2303      	movs	r3, #3
 800c086:	e006      	b.n	800c096 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	691b      	ldr	r3, [r3, #16]
 800c08c:	f003 0301 	and.w	r3, r3, #1
 800c090:	2b01      	cmp	r3, #1
 800c092:	d0f0      	beq.n	800c076 <USB_CoreReset+0x36>

  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bc80      	pop	{r7}
 800c09e:	4770      	bx	lr
 800c0a0:	00030d40 	.word	0x00030d40

0800c0a4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0a4:	b084      	sub	sp, #16
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b084      	sub	sp, #16
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	f107 001c 	add.w	r0, r7, #28
 800c0b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d018      	beq.n	800c128 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d10a      	bne.n	800c112 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c10a:	f043 0304 	orr.w	r3, r3, #4
 800c10e:	6013      	str	r3, [r2, #0]
 800c110:	e014      	b.n	800c13c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c120:	f023 0304 	bic.w	r3, r3, #4
 800c124:	6013      	str	r3, [r2, #0]
 800c126:	e009      	b.n	800c13c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	68ba      	ldr	r2, [r7, #8]
 800c132:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c136:	f023 0304 	bic.w	r3, r3, #4
 800c13a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800c13c:	2110      	movs	r1, #16
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7ff fe86 	bl	800be50 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f7ff fea7 	bl	800be98 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c14a:	2300      	movs	r3, #0
 800c14c:	60fb      	str	r3, [r7, #12]
 800c14e:	e015      	b.n	800c17c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	015a      	lsls	r2, r3, #5
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	4413      	add	r3, r2
 800c158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c15c:	461a      	mov	r2, r3
 800c15e:	f04f 33ff 	mov.w	r3, #4294967295
 800c162:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	015a      	lsls	r2, r3, #5
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	4413      	add	r3, r2
 800c16c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c170:	461a      	mov	r2, r3
 800c172:	2300      	movs	r3, #0
 800c174:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	3301      	adds	r3, #1
 800c17a:	60fb      	str	r3, [r7, #12]
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	429a      	cmp	r2, r3
 800c182:	d3e5      	bcc.n	800c150 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f04f 32ff 	mov.w	r2, #4294967295
 800c190:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00b      	beq.n	800c1b6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1a4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4a13      	ldr	r2, [pc, #76]	; (800c1f8 <USB_HostInit+0x154>)
 800c1aa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a13      	ldr	r2, [pc, #76]	; (800c1fc <USB_HostInit+0x158>)
 800c1b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c1b4:	e009      	b.n	800c1ca <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2280      	movs	r2, #128	; 0x80
 800c1ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a10      	ldr	r2, [pc, #64]	; (800c200 <USB_HostInit+0x15c>)
 800c1c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4a0f      	ldr	r2, [pc, #60]	; (800c204 <USB_HostInit+0x160>)
 800c1c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d105      	bne.n	800c1dc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	f043 0210 	orr.w	r2, r3, #16
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	699a      	ldr	r2, [r3, #24]
 800c1e0:	4b09      	ldr	r3, [pc, #36]	; (800c208 <USB_HostInit+0x164>)
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c1f4:	b004      	add	sp, #16
 800c1f6:	4770      	bx	lr
 800c1f8:	01000200 	.word	0x01000200
 800c1fc:	00e00300 	.word	0x00e00300
 800c200:	00600080 	.word	0x00600080
 800c204:	004000e0 	.word	0x004000e0
 800c208:	a3200008 	.word	0xa3200008

0800c20c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b085      	sub	sp, #20
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	460b      	mov	r3, r1
 800c216:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68fa      	ldr	r2, [r7, #12]
 800c226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c22a:	f023 0303 	bic.w	r3, r3, #3
 800c22e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	78fb      	ldrb	r3, [r7, #3]
 800c23a:	f003 0303 	and.w	r3, r3, #3
 800c23e:	68f9      	ldr	r1, [r7, #12]
 800c240:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c244:	4313      	orrs	r3, r2
 800c246:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c248:	78fb      	ldrb	r3, [r7, #3]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d107      	bne.n	800c25e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c254:	461a      	mov	r2, r3
 800c256:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c25a:	6053      	str	r3, [r2, #4]
 800c25c:	e009      	b.n	800c272 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c25e:	78fb      	ldrb	r3, [r7, #3]
 800c260:	2b02      	cmp	r3, #2
 800c262:	d106      	bne.n	800c272 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c26a:	461a      	mov	r2, r3
 800c26c:	f241 7370 	movw	r3, #6000	; 0x1770
 800c270:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	bc80      	pop	{r7}
 800c27c:	4770      	bx	lr

0800c27e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b084      	sub	sp, #16
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c28a:	2300      	movs	r3, #0
 800c28c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c29e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c2a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2ac:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c2ae:	2064      	movs	r0, #100	; 0x64
 800c2b0:	f7fa f9c6 	bl	8006640 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c2bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2c0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c2c2:	200a      	movs	r0, #10
 800c2c4:	f7fa f9bc 	bl	8006640 <HAL_Delay>

  return HAL_OK;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c2d2:	b480      	push	{r7}
 800c2d4:	b085      	sub	sp, #20
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	460b      	mov	r3, r1
 800c2dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c2f6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d109      	bne.n	800c316 <USB_DriveVbus+0x44>
 800c302:	78fb      	ldrb	r3, [r7, #3]
 800c304:	2b01      	cmp	r3, #1
 800c306:	d106      	bne.n	800c316 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c310:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c314:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c31c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c320:	d109      	bne.n	800c336 <USB_DriveVbus+0x64>
 800c322:	78fb      	ldrb	r3, [r7, #3]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d106      	bne.n	800c336 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c334:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c336:	2300      	movs	r3, #0
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3714      	adds	r7, #20
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bc80      	pop	{r7}
 800c340:	4770      	bx	lr

0800c342 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c342:	b480      	push	{r7}
 800c344:	b085      	sub	sp, #20
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c34e:	2300      	movs	r3, #0
 800c350:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	0c5b      	lsrs	r3, r3, #17
 800c360:	f003 0303 	and.w	r3, r3, #3
}
 800c364:	4618      	mov	r0, r3
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	bc80      	pop	{r7}
 800c36c:	4770      	bx	lr

0800c36e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c36e:	b480      	push	{r7}
 800c370:	b085      	sub	sp, #20
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	b29b      	uxth	r3, r3
}
 800c384:	4618      	mov	r0, r3
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	bc80      	pop	{r7}
 800c38c:	4770      	bx	lr
	...

0800c390 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b088      	sub	sp, #32
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	4608      	mov	r0, r1
 800c39a:	4611      	mov	r1, r2
 800c39c:	461a      	mov	r2, r3
 800c39e:	4603      	mov	r3, r0
 800c3a0:	70fb      	strb	r3, [r7, #3]
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	70bb      	strb	r3, [r7, #2]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c3b2:	78fb      	ldrb	r3, [r7, #3]
 800c3b4:	015a      	lsls	r2, r3, #5
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c3c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	d87e      	bhi.n	800c4cc <USB_HC_Init+0x13c>
 800c3ce:	a201      	add	r2, pc, #4	; (adr r2, 800c3d4 <USB_HC_Init+0x44>)
 800c3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d4:	0800c3e5 	.word	0x0800c3e5
 800c3d8:	0800c48f 	.word	0x0800c48f
 800c3dc:	0800c3e5 	.word	0x0800c3e5
 800c3e0:	0800c451 	.word	0x0800c451
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c3e4:	78fb      	ldrb	r3, [r7, #3]
 800c3e6:	015a      	lsls	r2, r3, #5
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	f240 439d 	movw	r3, #1181	; 0x49d
 800c3f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c3f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	da10      	bge.n	800c422 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c400:	78fb      	ldrb	r3, [r7, #3]
 800c402:	015a      	lsls	r2, r3, #5
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	4413      	add	r3, r2
 800c408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	78fa      	ldrb	r2, [r7, #3]
 800c410:	0151      	lsls	r1, r2, #5
 800c412:	693a      	ldr	r2, [r7, #16]
 800c414:	440a      	add	r2, r1
 800c416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c41a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c41e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c420:	e057      	b.n	800c4d2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d051      	beq.n	800c4d2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c42e:	78fb      	ldrb	r3, [r7, #3]
 800c430:	015a      	lsls	r2, r3, #5
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	4413      	add	r3, r2
 800c436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	78fa      	ldrb	r2, [r7, #3]
 800c43e:	0151      	lsls	r1, r2, #5
 800c440:	693a      	ldr	r2, [r7, #16]
 800c442:	440a      	add	r2, r1
 800c444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c448:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c44c:	60d3      	str	r3, [r2, #12]
      break;
 800c44e:	e040      	b.n	800c4d2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c450:	78fb      	ldrb	r3, [r7, #3]
 800c452:	015a      	lsls	r2, r3, #5
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	4413      	add	r3, r2
 800c458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c45c:	461a      	mov	r2, r3
 800c45e:	f240 639d 	movw	r3, #1693	; 0x69d
 800c462:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c464:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	da34      	bge.n	800c4d6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c46c:	78fb      	ldrb	r3, [r7, #3]
 800c46e:	015a      	lsls	r2, r3, #5
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	4413      	add	r3, r2
 800c474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	78fa      	ldrb	r2, [r7, #3]
 800c47c:	0151      	lsls	r1, r2, #5
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	440a      	add	r2, r1
 800c482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c48a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c48c:	e023      	b.n	800c4d6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c48e:	78fb      	ldrb	r3, [r7, #3]
 800c490:	015a      	lsls	r2, r3, #5
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	4413      	add	r3, r2
 800c496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c49a:	461a      	mov	r2, r3
 800c49c:	f240 2325 	movw	r3, #549	; 0x225
 800c4a0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c4a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	da17      	bge.n	800c4da <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c4aa:	78fb      	ldrb	r3, [r7, #3]
 800c4ac:	015a      	lsls	r2, r3, #5
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	78fa      	ldrb	r2, [r7, #3]
 800c4ba:	0151      	lsls	r1, r2, #5
 800c4bc:	693a      	ldr	r2, [r7, #16]
 800c4be:	440a      	add	r2, r1
 800c4c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4c4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c4c8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c4ca:	e006      	b.n	800c4da <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	77fb      	strb	r3, [r7, #31]
      break;
 800c4d0:	e004      	b.n	800c4dc <USB_HC_Init+0x14c>
      break;
 800c4d2:	bf00      	nop
 800c4d4:	e002      	b.n	800c4dc <USB_HC_Init+0x14c>
      break;
 800c4d6:	bf00      	nop
 800c4d8:	e000      	b.n	800c4dc <USB_HC_Init+0x14c>
      break;
 800c4da:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4e2:	699a      	ldr	r2, [r3, #24]
 800c4e4:	78fb      	ldrb	r3, [r7, #3]
 800c4e6:	f003 030f 	and.w	r3, r3, #15
 800c4ea:	2101      	movs	r1, #1
 800c4ec:	fa01 f303 	lsl.w	r3, r1, r3
 800c4f0:	6939      	ldr	r1, [r7, #16]
 800c4f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	699b      	ldr	r3, [r3, #24]
 800c4fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c506:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	da03      	bge.n	800c516 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c50e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c512:	61bb      	str	r3, [r7, #24]
 800c514:	e001      	b.n	800c51a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800c516:	2300      	movs	r3, #0
 800c518:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7ff ff11 	bl	800c342 <USB_GetHostSpeed>
 800c520:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c522:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c526:	2b02      	cmp	r3, #2
 800c528:	d106      	bne.n	800c538 <USB_HC_Init+0x1a8>
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d003      	beq.n	800c538 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c534:	617b      	str	r3, [r7, #20]
 800c536:	e001      	b.n	800c53c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c538:	2300      	movs	r3, #0
 800c53a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c53c:	787b      	ldrb	r3, [r7, #1]
 800c53e:	059b      	lsls	r3, r3, #22
 800c540:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c544:	78bb      	ldrb	r3, [r7, #2]
 800c546:	02db      	lsls	r3, r3, #11
 800c548:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c54c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c54e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c552:	049b      	lsls	r3, r3, #18
 800c554:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c558:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c55a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c55c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c560:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c566:	78fb      	ldrb	r3, [r7, #3]
 800c568:	0159      	lsls	r1, r3, #5
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	440b      	add	r3, r1
 800c56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c572:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c578:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c57a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c57e:	2b03      	cmp	r3, #3
 800c580:	d10f      	bne.n	800c5a2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c582:	78fb      	ldrb	r3, [r7, #3]
 800c584:	015a      	lsls	r2, r3, #5
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	4413      	add	r3, r2
 800c58a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	78fa      	ldrb	r2, [r7, #3]
 800c592:	0151      	lsls	r1, r2, #5
 800c594:	693a      	ldr	r2, [r7, #16]
 800c596:	440a      	add	r2, r1
 800c598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c59c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5a0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c5a2:	7ffb      	ldrb	r3, [r7, #31]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3720      	adds	r7, #32
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b08c      	sub	sp, #48	; 0x30
 800c5b0:	af02      	add	r7, sp, #8
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	785b      	ldrb	r3, [r3, #1]
 800c5c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c5c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5c8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d02d      	beq.n	800c632 <USB_HC_StartXfer+0x86>
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	791b      	ldrb	r3, [r3, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d129      	bne.n	800c632 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c5de:	79fb      	ldrb	r3, [r7, #7]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d117      	bne.n	800c614 <USB_HC_StartXfer+0x68>
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	79db      	ldrb	r3, [r3, #7]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d003      	beq.n	800c5f4 <USB_HC_StartXfer+0x48>
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	79db      	ldrb	r3, [r3, #7]
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d10f      	bne.n	800c614 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	015a      	lsls	r2, r3, #5
 800c5f8:	6a3b      	ldr	r3, [r7, #32]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	69fa      	ldr	r2, [r7, #28]
 800c604:	0151      	lsls	r1, r2, #5
 800c606:	6a3a      	ldr	r2, [r7, #32]
 800c608:	440a      	add	r2, r1
 800c60a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c612:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c614:	79fb      	ldrb	r3, [r7, #7]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10b      	bne.n	800c632 <USB_HC_StartXfer+0x86>
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	795b      	ldrb	r3, [r3, #5]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d107      	bne.n	800c632 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	785b      	ldrb	r3, [r3, #1]
 800c626:	4619      	mov	r1, r3
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	f000 fa2d 	bl	800ca88 <USB_DoPing>
      return HAL_OK;
 800c62e:	2300      	movs	r3, #0
 800c630:	e0f8      	b.n	800c824 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	695b      	ldr	r3, [r3, #20]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d018      	beq.n	800c66c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	695b      	ldr	r3, [r3, #20]
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	8912      	ldrh	r2, [r2, #8]
 800c642:	4413      	add	r3, r2
 800c644:	3b01      	subs	r3, #1
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	8912      	ldrh	r2, [r2, #8]
 800c64a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c64e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c650:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c652:	8b7b      	ldrh	r3, [r7, #26]
 800c654:	429a      	cmp	r2, r3
 800c656:	d90b      	bls.n	800c670 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c658:	8b7b      	ldrh	r3, [r7, #26]
 800c65a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c65c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	8912      	ldrh	r2, [r2, #8]
 800c662:	fb02 f203 	mul.w	r2, r2, r3
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	611a      	str	r2, [r3, #16]
 800c66a:	e001      	b.n	800c670 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c66c:	2301      	movs	r3, #1
 800c66e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	78db      	ldrb	r3, [r3, #3]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d007      	beq.n	800c688 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c678:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c67a:	68ba      	ldr	r2, [r7, #8]
 800c67c:	8912      	ldrh	r2, [r2, #8]
 800c67e:	fb02 f203 	mul.w	r2, r2, r3
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	611a      	str	r2, [r3, #16]
 800c686:	e003      	b.n	800c690 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	695a      	ldr	r2, [r3, #20]
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c69a:	04d9      	lsls	r1, r3, #19
 800c69c:	4b63      	ldr	r3, [pc, #396]	; (800c82c <USB_HC_StartXfer+0x280>)
 800c69e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c6a0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	7a9b      	ldrb	r3, [r3, #10]
 800c6a6:	075b      	lsls	r3, r3, #29
 800c6a8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c6ac:	69f9      	ldr	r1, [r7, #28]
 800c6ae:	0148      	lsls	r0, r1, #5
 800c6b0:	6a39      	ldr	r1, [r7, #32]
 800c6b2:	4401      	add	r1, r0
 800c6b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c6b8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c6ba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c6bc:	79fb      	ldrb	r3, [r7, #7]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d009      	beq.n	800c6d6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	68d9      	ldr	r1, [r3, #12]
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	015a      	lsls	r2, r3, #5
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6d2:	460a      	mov	r2, r1
 800c6d4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c6d6:	6a3b      	ldr	r3, [r7, #32]
 800c6d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	f003 0301 	and.w	r3, r3, #1
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	bf0c      	ite	eq
 800c6e6:	2301      	moveq	r3, #1
 800c6e8:	2300      	movne	r3, #0
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	015a      	lsls	r2, r3, #5
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	69fa      	ldr	r2, [r7, #28]
 800c6fe:	0151      	lsls	r1, r2, #5
 800c700:	6a3a      	ldr	r2, [r7, #32]
 800c702:	440a      	add	r2, r1
 800c704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c708:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c70c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	015a      	lsls	r2, r3, #5
 800c712:	6a3b      	ldr	r3, [r7, #32]
 800c714:	4413      	add	r3, r2
 800c716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	7e7b      	ldrb	r3, [r7, #25]
 800c71e:	075b      	lsls	r3, r3, #29
 800c720:	69f9      	ldr	r1, [r7, #28]
 800c722:	0148      	lsls	r0, r1, #5
 800c724:	6a39      	ldr	r1, [r7, #32]
 800c726:	4401      	add	r1, r0
 800c728:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c72c:	4313      	orrs	r3, r2
 800c72e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	015a      	lsls	r2, r3, #5
 800c734:	6a3b      	ldr	r3, [r7, #32]
 800c736:	4413      	add	r3, r2
 800c738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c746:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	78db      	ldrb	r3, [r3, #3]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d004      	beq.n	800c75a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c756:	613b      	str	r3, [r7, #16]
 800c758:	e003      	b.n	800c762 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c760:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c768:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	015a      	lsls	r2, r3, #5
 800c76e:	6a3b      	ldr	r3, [r7, #32]
 800c770:	4413      	add	r3, r2
 800c772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c776:	461a      	mov	r2, r3
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c77c:	79fb      	ldrb	r3, [r7, #7]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c782:	2300      	movs	r3, #0
 800c784:	e04e      	b.n	800c824 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	78db      	ldrb	r3, [r3, #3]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d149      	bne.n	800c822 <USB_HC_StartXfer+0x276>
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	695b      	ldr	r3, [r3, #20]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d045      	beq.n	800c822 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	79db      	ldrb	r3, [r3, #7]
 800c79a:	2b03      	cmp	r3, #3
 800c79c:	d830      	bhi.n	800c800 <USB_HC_StartXfer+0x254>
 800c79e:	a201      	add	r2, pc, #4	; (adr r2, 800c7a4 <USB_HC_StartXfer+0x1f8>)
 800c7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a4:	0800c7b5 	.word	0x0800c7b5
 800c7a8:	0800c7d9 	.word	0x0800c7d9
 800c7ac:	0800c7b5 	.word	0x0800c7b5
 800c7b0:	0800c7d9 	.word	0x0800c7d9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	695b      	ldr	r3, [r3, #20]
 800c7b8:	3303      	adds	r3, #3
 800c7ba:	089b      	lsrs	r3, r3, #2
 800c7bc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c7be:	8afa      	ldrh	r2, [r7, #22]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d91c      	bls.n	800c804 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	699b      	ldr	r3, [r3, #24]
 800c7ce:	f043 0220 	orr.w	r2, r3, #32
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	619a      	str	r2, [r3, #24]
        }
        break;
 800c7d6:	e015      	b.n	800c804 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	695b      	ldr	r3, [r3, #20]
 800c7dc:	3303      	adds	r3, #3
 800c7de:	089b      	lsrs	r3, r3, #2
 800c7e0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c7e2:	8afa      	ldrh	r2, [r7, #22]
 800c7e4:	6a3b      	ldr	r3, [r7, #32]
 800c7e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7ea:	691b      	ldr	r3, [r3, #16]
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d90a      	bls.n	800c808 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	699b      	ldr	r3, [r3, #24]
 800c7f6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	619a      	str	r2, [r3, #24]
        }
        break;
 800c7fe:	e003      	b.n	800c808 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c800:	bf00      	nop
 800c802:	e002      	b.n	800c80a <USB_HC_StartXfer+0x25e>
        break;
 800c804:	bf00      	nop
 800c806:	e000      	b.n	800c80a <USB_HC_StartXfer+0x25e>
        break;
 800c808:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	68d9      	ldr	r1, [r3, #12]
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	785a      	ldrb	r2, [r3, #1]
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	695b      	ldr	r3, [r3, #20]
 800c816:	b29b      	uxth	r3, r3
 800c818:	2000      	movs	r0, #0
 800c81a:	9000      	str	r0, [sp, #0]
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f7ff fb5b 	bl	800bed8 <USB_WritePacket>
  }

  return HAL_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3728      	adds	r7, #40	; 0x28
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	1ff80000 	.word	0x1ff80000

0800c830 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c830:	b480      	push	{r7}
 800c832:	b085      	sub	sp, #20
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c842:	695b      	ldr	r3, [r3, #20]
 800c844:	b29b      	uxth	r3, r3
}
 800c846:	4618      	mov	r0, r3
 800c848:	3714      	adds	r7, #20
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bc80      	pop	{r7}
 800c84e:	4770      	bx	lr

0800c850 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c850:	b480      	push	{r7}
 800c852:	b089      	sub	sp, #36	; 0x24
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	460b      	mov	r3, r1
 800c85a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800c860:	78fb      	ldrb	r3, [r7, #3]
 800c862:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800c864:	2300      	movs	r3, #0
 800c866:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	015a      	lsls	r2, r3, #5
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	4413      	add	r3, r2
 800c870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	0c9b      	lsrs	r3, r3, #18
 800c878:	f003 0303 	and.w	r3, r3, #3
 800c87c:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	015a      	lsls	r2, r3, #5
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	4413      	add	r3, r2
 800c886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	0fdb      	lsrs	r3, r3, #31
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	f003 0320 	and.w	r3, r3, #32
 800c89c:	2b20      	cmp	r3, #32
 800c89e:	d104      	bne.n	800c8aa <USB_HC_Halt+0x5a>
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d101      	bne.n	800c8aa <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	e0e8      	b.n	800ca7c <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <USB_HC_Halt+0x66>
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	d173      	bne.n	800c99e <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	015a      	lsls	r2, r3, #5
 800c8ba:	69bb      	ldr	r3, [r7, #24]
 800c8bc:	4413      	add	r3, r2
 800c8be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	697a      	ldr	r2, [r7, #20]
 800c8c6:	0151      	lsls	r1, r2, #5
 800c8c8:	69ba      	ldr	r2, [r7, #24]
 800c8ca:	440a      	add	r2, r1
 800c8cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8d4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	f003 0320 	and.w	r3, r3, #32
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	f040 80cb 	bne.w	800ca7a <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d143      	bne.n	800c978 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	015a      	lsls	r2, r3, #5
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	4413      	add	r3, r2
 800c8f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	0151      	lsls	r1, r2, #5
 800c902:	69ba      	ldr	r2, [r7, #24]
 800c904:	440a      	add	r2, r1
 800c906:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c90a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c90e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	015a      	lsls	r2, r3, #5
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	4413      	add	r3, r2
 800c918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	697a      	ldr	r2, [r7, #20]
 800c920:	0151      	lsls	r1, r2, #5
 800c922:	69ba      	ldr	r2, [r7, #24]
 800c924:	440a      	add	r2, r1
 800c926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c92a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c92e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	015a      	lsls	r2, r3, #5
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	4413      	add	r3, r2
 800c938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	697a      	ldr	r2, [r7, #20]
 800c940:	0151      	lsls	r1, r2, #5
 800c942:	69ba      	ldr	r2, [r7, #24]
 800c944:	440a      	add	r2, r1
 800c946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c94a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c94e:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	3301      	adds	r3, #1
 800c954:	61fb      	str	r3, [r7, #28]
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c95c:	d81d      	bhi.n	800c99a <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	015a      	lsls	r2, r3, #5
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	4413      	add	r3, r2
 800c966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c974:	d0ec      	beq.n	800c950 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c976:	e080      	b.n	800ca7a <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	015a      	lsls	r2, r3, #5
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	4413      	add	r3, r2
 800c980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	697a      	ldr	r2, [r7, #20]
 800c988:	0151      	lsls	r1, r2, #5
 800c98a:	69ba      	ldr	r2, [r7, #24]
 800c98c:	440a      	add	r2, r1
 800c98e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c992:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c996:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c998:	e06f      	b.n	800ca7a <USB_HC_Halt+0x22a>
            break;
 800c99a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c99c:	e06d      	b.n	800ca7a <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	015a      	lsls	r2, r3, #5
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	697a      	ldr	r2, [r7, #20]
 800c9ae:	0151      	lsls	r1, r2, #5
 800c9b0:	69ba      	ldr	r2, [r7, #24]
 800c9b2:	440a      	add	r2, r1
 800c9b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9bc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d143      	bne.n	800ca56 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	015a      	lsls	r2, r3, #5
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	697a      	ldr	r2, [r7, #20]
 800c9de:	0151      	lsls	r1, r2, #5
 800c9e0:	69ba      	ldr	r2, [r7, #24]
 800c9e2:	440a      	add	r2, r1
 800c9e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9ec:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	015a      	lsls	r2, r3, #5
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	697a      	ldr	r2, [r7, #20]
 800c9fe:	0151      	lsls	r1, r2, #5
 800ca00:	69ba      	ldr	r2, [r7, #24]
 800ca02:	440a      	add	r2, r1
 800ca04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca0c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	015a      	lsls	r2, r3, #5
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	4413      	add	r3, r2
 800ca16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	697a      	ldr	r2, [r7, #20]
 800ca1e:	0151      	lsls	r1, r2, #5
 800ca20:	69ba      	ldr	r2, [r7, #24]
 800ca22:	440a      	add	r2, r1
 800ca24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca2c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	3301      	adds	r3, #1
 800ca32:	61fb      	str	r3, [r7, #28]
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca3a:	d81d      	bhi.n	800ca78 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	015a      	lsls	r2, r3, #5
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	4413      	add	r3, r2
 800ca44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca52:	d0ec      	beq.n	800ca2e <USB_HC_Halt+0x1de>
 800ca54:	e011      	b.n	800ca7a <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	015a      	lsls	r2, r3, #5
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	697a      	ldr	r2, [r7, #20]
 800ca66:	0151      	lsls	r1, r2, #5
 800ca68:	69ba      	ldr	r2, [r7, #24]
 800ca6a:	440a      	add	r2, r1
 800ca6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca74:	6013      	str	r3, [r2, #0]
 800ca76:	e000      	b.n	800ca7a <USB_HC_Halt+0x22a>
          break;
 800ca78:	bf00      	nop
    }
  }

  return HAL_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3724      	adds	r7, #36	; 0x24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bc80      	pop	{r7}
 800ca84:	4770      	bx	lr
	...

0800ca88 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b087      	sub	sp, #28
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	460b      	mov	r3, r1
 800ca92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ca98:	78fb      	ldrb	r3, [r7, #3]
 800ca9a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	04da      	lsls	r2, r3, #19
 800caa4:	4b14      	ldr	r3, [pc, #80]	; (800caf8 <USB_DoPing+0x70>)
 800caa6:	4013      	ands	r3, r2
 800caa8:	693a      	ldr	r2, [r7, #16]
 800caaa:	0151      	lsls	r1, r2, #5
 800caac:	697a      	ldr	r2, [r7, #20]
 800caae:	440a      	add	r2, r1
 800cab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cab8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	015a      	lsls	r2, r3, #5
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	4413      	add	r3, r2
 800cac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cad0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cad8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	015a      	lsls	r2, r3, #5
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	4413      	add	r3, r2
 800cae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cae6:	461a      	mov	r2, r3
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	371c      	adds	r7, #28
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bc80      	pop	{r7}
 800caf6:	4770      	bx	lr
 800caf8:	1ff80000 	.word	0x1ff80000

0800cafc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b086      	sub	sp, #24
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7ff f943 	bl	800bd98 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800cb12:	2110      	movs	r1, #16
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f7ff f99b 	bl	800be50 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff f9bc 	bl	800be98 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cb20:	2300      	movs	r3, #0
 800cb22:	613b      	str	r3, [r7, #16]
 800cb24:	e01f      	b.n	800cb66 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	015a      	lsls	r2, r3, #5
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb3c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb44:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb4c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	015a      	lsls	r2, r3, #5
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	4413      	add	r3, r2
 800cb56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	3301      	adds	r3, #1
 800cb64:	613b      	str	r3, [r7, #16]
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	2b0f      	cmp	r3, #15
 800cb6a:	d9dc      	bls.n	800cb26 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	613b      	str	r3, [r7, #16]
 800cb70:	e034      	b.n	800cbdc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	015a      	lsls	r2, r3, #5
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	4413      	add	r3, r2
 800cb7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb88:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb90:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb98:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	015a      	lsls	r2, r3, #5
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	4413      	add	r3, r2
 800cba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cba6:	461a      	mov	r2, r3
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	617b      	str	r3, [r7, #20]
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbb8:	d80c      	bhi.n	800cbd4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	015a      	lsls	r2, r3, #5
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbd0:	d0ec      	beq.n	800cbac <USB_StopHost+0xb0>
 800cbd2:	e000      	b.n	800cbd6 <USB_StopHost+0xda>
        break;
 800cbd4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	613b      	str	r3, [r7, #16]
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	2b0f      	cmp	r3, #15
 800cbe0:	d9c7      	bls.n	800cb72 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbe8:	461a      	mov	r2, r3
 800cbea:	f04f 33ff 	mov.w	r3, #4294967295
 800cbee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3718      	adds	r7, #24
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
	...

0800cc04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800cc08:	4904      	ldr	r1, [pc, #16]	; (800cc1c <MX_FATFS_Init+0x18>)
 800cc0a:	4805      	ldr	r0, [pc, #20]	; (800cc20 <MX_FATFS_Init+0x1c>)
 800cc0c:	f006 f820 	bl	8012c50 <FATFS_LinkDriver>
 800cc10:	4603      	mov	r3, r0
 800cc12:	461a      	mov	r2, r3
 800cc14:	4b03      	ldr	r3, [pc, #12]	; (800cc24 <MX_FATFS_Init+0x20>)
 800cc16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cc18:	bf00      	nop
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	20010cd0 	.word	0x20010cd0
 800cc20:	0801ad50 	.word	0x0801ad50
 800cc24:	20011134 	.word	0x20011134

0800cc28 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cc2c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bc80      	pop	{r7}
 800cc34:	4770      	bx	lr

0800cc36 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800cc36:	b590      	push	{r4, r7, lr}
 800cc38:	b089      	sub	sp, #36	; 0x24
 800cc3a:	af04      	add	r7, sp, #16
 800cc3c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cc44:	7919      	ldrb	r1, [r3, #4]
 800cc46:	2350      	movs	r3, #80	; 0x50
 800cc48:	2206      	movs	r2, #6
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f001 fd3b 	bl	800e6c6 <USBH_FindInterface>
 800cc50:	4603      	mov	r3, r0
 800cc52:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	2bff      	cmp	r3, #255	; 0xff
 800cc58:	d002      	beq.n	800cc60 <USBH_MSC_InterfaceInit+0x2a>
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d901      	bls.n	800cc64 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cc60:	2302      	movs	r3, #2
 800cc62:	e0ef      	b.n	800ce44 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
 800cc66:	4619      	mov	r1, r3
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f001 fd11 	bl	800e690 <USBH_SelectInterface>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800cc72:	7bbb      	ldrb	r3, [r7, #14]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d001      	beq.n	800cc7c <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800cc78:	2302      	movs	r3, #2
 800cc7a:	e0e3      	b.n	800ce44 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800cc82:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cc86:	f009 fbf5 	bl	8016474 <malloc>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cc94:	69db      	ldr	r3, [r3, #28]
 800cc96:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d101      	bne.n	800cca2 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800cc9e:	2302      	movs	r3, #2
 800cca0:	e0d0      	b.n	800ce44 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800cca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cca6:	2100      	movs	r1, #0
 800cca8:	68b8      	ldr	r0, [r7, #8]
 800ccaa:	f009 fc01 	bl	80164b0 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	211a      	movs	r1, #26
 800ccb4:	fb01 f303 	mul.w	r3, r1, r3
 800ccb8:	4413      	add	r3, r2
 800ccba:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	b25b      	sxtb	r3, r3
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	da16      	bge.n	800ccf4 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800ccc6:	7bfb      	ldrb	r3, [r7, #15]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	211a      	movs	r1, #26
 800cccc:	fb01 f303 	mul.w	r3, r1, r3
 800ccd0:	4413      	add	r3, r2
 800ccd2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800ccd6:	781a      	ldrb	r2, [r3, #0]
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ccdc:	7bfb      	ldrb	r3, [r7, #15]
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	211a      	movs	r1, #26
 800cce2:	fb01 f303 	mul.w	r3, r1, r3
 800cce6:	4413      	add	r3, r2
 800cce8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ccec:	881a      	ldrh	r2, [r3, #0]
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	815a      	strh	r2, [r3, #10]
 800ccf2:	e015      	b.n	800cd20 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800ccf4:	7bfb      	ldrb	r3, [r7, #15]
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	211a      	movs	r1, #26
 800ccfa:	fb01 f303 	mul.w	r3, r1, r3
 800ccfe:	4413      	add	r3, r2
 800cd00:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800cd04:	781a      	ldrb	r2, [r3, #0]
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	211a      	movs	r1, #26
 800cd10:	fb01 f303 	mul.w	r3, r1, r3
 800cd14:	4413      	add	r3, r2
 800cd16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cd1a:	881a      	ldrh	r2, [r3, #0]
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800cd20:	7bfb      	ldrb	r3, [r7, #15]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	211a      	movs	r1, #26
 800cd26:	fb01 f303 	mul.w	r3, r1, r3
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	b25b      	sxtb	r3, r3
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	da16      	bge.n	800cd66 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	211a      	movs	r1, #26
 800cd3e:	fb01 f303 	mul.w	r3, r1, r3
 800cd42:	4413      	add	r3, r2
 800cd44:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800cd48:	781a      	ldrb	r2, [r3, #0]
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cd4e:	7bfb      	ldrb	r3, [r7, #15]
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	211a      	movs	r1, #26
 800cd54:	fb01 f303 	mul.w	r3, r1, r3
 800cd58:	4413      	add	r3, r2
 800cd5a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cd5e:	881a      	ldrh	r2, [r3, #0]
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	815a      	strh	r2, [r3, #10]
 800cd64:	e015      	b.n	800cd92 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	211a      	movs	r1, #26
 800cd6c:	fb01 f303 	mul.w	r3, r1, r3
 800cd70:	4413      	add	r3, r2
 800cd72:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800cd76:	781a      	ldrb	r2, [r3, #0]
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cd7c:	7bfb      	ldrb	r3, [r7, #15]
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	211a      	movs	r1, #26
 800cd82:	fb01 f303 	mul.w	r3, r1, r3
 800cd86:	4413      	add	r3, r2
 800cd88:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cd8c:	881a      	ldrh	r2, [r3, #0]
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	2200      	movs	r2, #0
 800cd96:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	2200      	movs	r2, #0
 800cda2:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	799b      	ldrb	r3, [r3, #6]
 800cda8:	4619      	mov	r1, r3
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f002 ff77 	bl	800fc9e <USBH_AllocPipe>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	79db      	ldrb	r3, [r3, #7]
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f002 ff6d 	bl	800fc9e <USBH_AllocPipe>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fdeb 	bl	800d9a8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	7959      	ldrb	r1, [r3, #5]
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	7998      	ldrb	r0, [r3, #6]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cde6:	68ba      	ldr	r2, [r7, #8]
 800cde8:	8912      	ldrh	r2, [r2, #8]
 800cdea:	9202      	str	r2, [sp, #8]
 800cdec:	2202      	movs	r2, #2
 800cdee:	9201      	str	r2, [sp, #4]
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	4623      	mov	r3, r4
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f002 ff22 	bl	800fc40 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	7919      	ldrb	r1, [r3, #4]
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	79d8      	ldrb	r0, [r3, #7]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ce10:	68ba      	ldr	r2, [r7, #8]
 800ce12:	8952      	ldrh	r2, [r2, #10]
 800ce14:	9202      	str	r2, [sp, #8]
 800ce16:	2202      	movs	r2, #2
 800ce18:	9201      	str	r2, [sp, #4]
 800ce1a:	9300      	str	r3, [sp, #0]
 800ce1c:	4623      	mov	r3, r4
 800ce1e:	4602      	mov	r2, r0
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f002 ff0d 	bl	800fc40 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	791b      	ldrb	r3, [r3, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f009 f94a 	bl	80160c8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	795b      	ldrb	r3, [r3, #5]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f009 f943 	bl	80160c8 <USBH_LL_SetToggle>

  return USBH_OK;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd90      	pop	{r4, r7, pc}

0800ce4c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ce5a:	69db      	ldr	r3, [r3, #28]
 800ce5c:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	795b      	ldrb	r3, [r3, #5]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d00e      	beq.n	800ce84 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	795b      	ldrb	r3, [r3, #5]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f002 ff06 	bl	800fc7e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	795b      	ldrb	r3, [r3, #5]
 800ce76:	4619      	mov	r1, r3
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f002 ff30 	bl	800fcde <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2200      	movs	r2, #0
 800ce82:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	791b      	ldrb	r3, [r3, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00e      	beq.n	800ceaa <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	791b      	ldrb	r3, [r3, #4]
 800ce90:	4619      	mov	r1, r3
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f002 fef3 	bl	800fc7e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	791b      	ldrb	r3, [r3, #4]
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f002 ff1d 	bl	800fcde <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ceb0:	69db      	ldr	r3, [r3, #28]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00b      	beq.n	800cece <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cebc:	69db      	ldr	r3, [r3, #28]
 800cebe:	4618      	mov	r0, r3
 800cec0:	f009 fae0 	bl	8016484 <free>
    phost->pActiveClass->pData = 0U;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ceca:	2200      	movs	r2, #0
 800cecc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3710      	adds	r7, #16
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cee6:	69db      	ldr	r3, [r3, #28]
 800cee8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ceea:	2301      	movs	r3, #1
 800ceec:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	7b9b      	ldrb	r3, [r3, #14]
 800cef2:	2b03      	cmp	r3, #3
 800cef4:	d042      	beq.n	800cf7c <USBH_MSC_ClassRequest+0xa4>
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	dc4c      	bgt.n	800cf94 <USBH_MSC_ClassRequest+0xbc>
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d001      	beq.n	800cf02 <USBH_MSC_ClassRequest+0x2a>
 800cefe:	2b02      	cmp	r3, #2
 800cf00:	d148      	bne.n	800cf94 <USBH_MSC_ClassRequest+0xbc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	4619      	mov	r1, r3
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fd30 	bl	800d96c <USBH_MSC_BOT_REQ_GetMaxLUN>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
 800cf12:	2b03      	cmp	r3, #3
 800cf14:	d104      	bne.n	800cf20 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d138      	bne.n	800cf98 <USBH_MSC_ClassRequest+0xc0>
      {
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d804      	bhi.n	800cf3a <USBH_MSC_ClassRequest+0x62>
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	3301      	adds	r3, #1
 800cf38:	e000      	b.n	800cf3c <USBH_MSC_ClassRequest+0x64>
 800cf3a:	2302      	movs	r3, #2
 800cf3c:	68ba      	ldr	r2, [r7, #8]
 800cf3e:	6013      	str	r3, [r2, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800cf40:	2300      	movs	r3, #0
 800cf42:	73bb      	strb	r3, [r7, #14]
 800cf44:	e014      	b.n	800cf70 <USBH_MSC_ClassRequest+0x98>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800cf46:	7bbb      	ldrb	r3, [r7, #14]
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	2134      	movs	r1, #52	; 0x34
 800cf4c:	fb01 f303 	mul.w	r3, r1, r3
 800cf50:	4413      	add	r3, r2
 800cf52:	3392      	adds	r3, #146	; 0x92
 800cf54:	2202      	movs	r2, #2
 800cf56:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800cf58:	7bbb      	ldrb	r3, [r7, #14]
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	2134      	movs	r1, #52	; 0x34
 800cf5e:	fb01 f303 	mul.w	r3, r1, r3
 800cf62:	4413      	add	r3, r2
 800cf64:	33c1      	adds	r3, #193	; 0xc1
 800cf66:	2200      	movs	r2, #0
 800cf68:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800cf6a:	7bbb      	ldrb	r3, [r7, #14]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	73bb      	strb	r3, [r7, #14]
 800cf70:	7bba      	ldrb	r2, [r7, #14]
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d3e5      	bcc.n	800cf46 <USBH_MSC_ClassRequest+0x6e>
        }
      }
      break;
 800cf7a:	e00d      	b.n	800cf98 <USBH_MSC_ClassRequest+0xc0>

    case MSC_REQ_ERROR :
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f002 f94f 	bl	800f222 <USBH_ClrFeature>
 800cf84:	4603      	mov	r3, r0
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d108      	bne.n	800cf9c <USBH_MSC_ClassRequest+0xc4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	7bda      	ldrb	r2, [r3, #15]
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	739a      	strb	r2, [r3, #14]
      }
      break;
 800cf92:	e003      	b.n	800cf9c <USBH_MSC_ClassRequest+0xc4>

    default:
      break;
 800cf94:	bf00      	nop
 800cf96:	e002      	b.n	800cf9e <USBH_MSC_ClassRequest+0xc6>
      break;
 800cf98:	bf00      	nop
 800cf9a:	e000      	b.n	800cf9e <USBH_MSC_ClassRequest+0xc6>
      break;
 800cf9c:	bf00      	nop
  }

  return status;
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b086      	sub	sp, #24
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cfb6:	69db      	ldr	r3, [r3, #28]
 800cfb8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	7b1b      	ldrb	r3, [r3, #12]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d003      	beq.n	800cfd6 <USBH_MSC_Process+0x2e>
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	f000 828d 	beq.w	800d4ee <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800cfd4:	e28e      	b.n	800d4f4 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cfdc:	461a      	mov	r2, r3
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	f080 8267 	bcs.w	800d4b6 <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cfee:	4619      	mov	r1, r3
 800cff0:	693a      	ldr	r2, [r7, #16]
 800cff2:	2334      	movs	r3, #52	; 0x34
 800cff4:	fb03 f301 	mul.w	r3, r3, r1
 800cff8:	4413      	add	r3, r2
 800cffa:	3391      	adds	r3, #145	; 0x91
 800cffc:	2201      	movs	r2, #1
 800cffe:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d006:	4619      	mov	r1, r3
 800d008:	693a      	ldr	r2, [r7, #16]
 800d00a:	2334      	movs	r3, #52	; 0x34
 800d00c:	fb03 f301 	mul.w	r3, r3, r1
 800d010:	4413      	add	r3, r2
 800d012:	3390      	adds	r3, #144	; 0x90
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	2b08      	cmp	r3, #8
 800d018:	f200 8235 	bhi.w	800d486 <USBH_MSC_Process+0x4de>
 800d01c:	a201      	add	r2, pc, #4	; (adr r2, 800d024 <USBH_MSC_Process+0x7c>)
 800d01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d022:	bf00      	nop
 800d024:	0800d049 	.word	0x0800d049
 800d028:	0800d487 	.word	0x0800d487
 800d02c:	0800d111 	.word	0x0800d111
 800d030:	0800d295 	.word	0x0800d295
 800d034:	0800d06f 	.word	0x0800d06f
 800d038:	0800d361 	.word	0x0800d361
 800d03c:	0800d487 	.word	0x0800d487
 800d040:	0800d487 	.word	0x0800d487
 800d044:	0800d475 	.word	0x0800d475
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d04e:	4619      	mov	r1, r3
 800d050:	693a      	ldr	r2, [r7, #16]
 800d052:	2334      	movs	r3, #52	; 0x34
 800d054:	fb03 f301 	mul.w	r3, r3, r1
 800d058:	4413      	add	r3, r2
 800d05a:	3390      	adds	r3, #144	; 0x90
 800d05c:	2204      	movs	r2, #4
 800d05e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800d06c:	e214      	b.n	800d498 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d074:	b2d9      	uxtb	r1, r3
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d07c:	461a      	mov	r2, r3
 800d07e:	2334      	movs	r3, #52	; 0x34
 800d080:	fb03 f302 	mul.w	r3, r3, r2
 800d084:	3398      	adds	r3, #152	; 0x98
 800d086:	693a      	ldr	r2, [r7, #16]
 800d088:	4413      	add	r3, r2
 800d08a:	3307      	adds	r3, #7
 800d08c:	461a      	mov	r2, r3
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f001 f834 	bl	800e0fc <USBH_MSC_SCSI_Inquiry>
 800d094:	4603      	mov	r3, r0
 800d096:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800d098:	7bfb      	ldrb	r3, [r7, #15]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d10b      	bne.n	800d0b6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	2334      	movs	r3, #52	; 0x34
 800d0aa:	fb03 f301 	mul.w	r3, r3, r1
 800d0ae:	4413      	add	r3, r2
 800d0b0:	3390      	adds	r3, #144	; 0x90
 800d0b2:	2202      	movs	r2, #2
 800d0b4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800d0b6:	7bfb      	ldrb	r3, [r7, #15]
 800d0b8:	2b02      	cmp	r3, #2
 800d0ba:	d10c      	bne.n	800d0d6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	693a      	ldr	r2, [r7, #16]
 800d0c6:	2334      	movs	r3, #52	; 0x34
 800d0c8:	fb03 f301 	mul.w	r3, r3, r1
 800d0cc:	4413      	add	r3, r2
 800d0ce:	3390      	adds	r3, #144	; 0x90
 800d0d0:	2205      	movs	r2, #5
 800d0d2:	701a      	strb	r2, [r3, #0]
            break;
 800d0d4:	e1d9      	b.n	800d48a <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d0d6:	7bfb      	ldrb	r3, [r7, #15]
 800d0d8:	2b04      	cmp	r3, #4
 800d0da:	f040 81d6 	bne.w	800d48a <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	693a      	ldr	r2, [r7, #16]
 800d0e8:	2334      	movs	r3, #52	; 0x34
 800d0ea:	fb03 f301 	mul.w	r3, r3, r1
 800d0ee:	4413      	add	r3, r2
 800d0f0:	3390      	adds	r3, #144	; 0x90
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	693a      	ldr	r2, [r7, #16]
 800d100:	2334      	movs	r3, #52	; 0x34
 800d102:	fb03 f301 	mul.w	r3, r3, r1
 800d106:	4413      	add	r3, r2
 800d108:	3391      	adds	r3, #145	; 0x91
 800d10a:	2202      	movs	r2, #2
 800d10c:	701a      	strb	r2, [r3, #0]
            break;
 800d10e:	e1bc      	b.n	800d48a <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d116:	b2db      	uxtb	r3, r3
 800d118:	4619      	mov	r1, r3
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 ff30 	bl	800df80 <USBH_MSC_SCSI_TestUnitReady>
 800d120:	4603      	mov	r3, r0
 800d122:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800d124:	7bbb      	ldrb	r3, [r7, #14]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d149      	bne.n	800d1be <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d130:	4619      	mov	r1, r3
 800d132:	693a      	ldr	r2, [r7, #16]
 800d134:	2334      	movs	r3, #52	; 0x34
 800d136:	fb03 f301 	mul.w	r3, r3, r1
 800d13a:	4413      	add	r3, r2
 800d13c:	3392      	adds	r3, #146	; 0x92
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00c      	beq.n	800d15e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d14a:	4619      	mov	r1, r3
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	2334      	movs	r3, #52	; 0x34
 800d150:	fb03 f301 	mul.w	r3, r3, r1
 800d154:	4413      	add	r3, r2
 800d156:	33c1      	adds	r3, #193	; 0xc1
 800d158:	2201      	movs	r2, #1
 800d15a:	701a      	strb	r2, [r3, #0]
 800d15c:	e00b      	b.n	800d176 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d164:	4619      	mov	r1, r3
 800d166:	693a      	ldr	r2, [r7, #16]
 800d168:	2334      	movs	r3, #52	; 0x34
 800d16a:	fb03 f301 	mul.w	r3, r3, r1
 800d16e:	4413      	add	r3, r2
 800d170:	33c1      	adds	r3, #193	; 0xc1
 800d172:	2200      	movs	r2, #0
 800d174:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d17c:	4619      	mov	r1, r3
 800d17e:	693a      	ldr	r2, [r7, #16]
 800d180:	2334      	movs	r3, #52	; 0x34
 800d182:	fb03 f301 	mul.w	r3, r3, r1
 800d186:	4413      	add	r3, r2
 800d188:	3390      	adds	r3, #144	; 0x90
 800d18a:	2203      	movs	r2, #3
 800d18c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d194:	4619      	mov	r1, r3
 800d196:	693a      	ldr	r2, [r7, #16]
 800d198:	2334      	movs	r3, #52	; 0x34
 800d19a:	fb03 f301 	mul.w	r3, r3, r1
 800d19e:	4413      	add	r3, r2
 800d1a0:	3391      	adds	r3, #145	; 0x91
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	693a      	ldr	r2, [r7, #16]
 800d1b0:	2334      	movs	r3, #52	; 0x34
 800d1b2:	fb03 f301 	mul.w	r3, r3, r1
 800d1b6:	4413      	add	r3, r2
 800d1b8:	3392      	adds	r3, #146	; 0x92
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800d1be:	7bbb      	ldrb	r3, [r7, #14]
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	d14a      	bne.n	800d25a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	693a      	ldr	r2, [r7, #16]
 800d1ce:	2334      	movs	r3, #52	; 0x34
 800d1d0:	fb03 f301 	mul.w	r3, r3, r1
 800d1d4:	4413      	add	r3, r2
 800d1d6:	3392      	adds	r3, #146	; 0x92
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d00c      	beq.n	800d1f8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	693a      	ldr	r2, [r7, #16]
 800d1e8:	2334      	movs	r3, #52	; 0x34
 800d1ea:	fb03 f301 	mul.w	r3, r3, r1
 800d1ee:	4413      	add	r3, r2
 800d1f0:	33c1      	adds	r3, #193	; 0xc1
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	701a      	strb	r2, [r3, #0]
 800d1f6:	e00b      	b.n	800d210 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d1fe:	4619      	mov	r1, r3
 800d200:	693a      	ldr	r2, [r7, #16]
 800d202:	2334      	movs	r3, #52	; 0x34
 800d204:	fb03 f301 	mul.w	r3, r3, r1
 800d208:	4413      	add	r3, r2
 800d20a:	33c1      	adds	r3, #193	; 0xc1
 800d20c:	2200      	movs	r2, #0
 800d20e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d216:	4619      	mov	r1, r3
 800d218:	693a      	ldr	r2, [r7, #16]
 800d21a:	2334      	movs	r3, #52	; 0x34
 800d21c:	fb03 f301 	mul.w	r3, r3, r1
 800d220:	4413      	add	r3, r2
 800d222:	3390      	adds	r3, #144	; 0x90
 800d224:	2205      	movs	r2, #5
 800d226:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d22e:	4619      	mov	r1, r3
 800d230:	693a      	ldr	r2, [r7, #16]
 800d232:	2334      	movs	r3, #52	; 0x34
 800d234:	fb03 f301 	mul.w	r3, r3, r1
 800d238:	4413      	add	r3, r2
 800d23a:	3391      	adds	r3, #145	; 0x91
 800d23c:	2201      	movs	r2, #1
 800d23e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d246:	4619      	mov	r1, r3
 800d248:	693a      	ldr	r2, [r7, #16]
 800d24a:	2334      	movs	r3, #52	; 0x34
 800d24c:	fb03 f301 	mul.w	r3, r3, r1
 800d250:	4413      	add	r3, r2
 800d252:	3392      	adds	r3, #146	; 0x92
 800d254:	2202      	movs	r2, #2
 800d256:	701a      	strb	r2, [r3, #0]
            break;
 800d258:	e119      	b.n	800d48e <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800d25a:	7bbb      	ldrb	r3, [r7, #14]
 800d25c:	2b04      	cmp	r3, #4
 800d25e:	f040 8116 	bne.w	800d48e <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d268:	4619      	mov	r1, r3
 800d26a:	693a      	ldr	r2, [r7, #16]
 800d26c:	2334      	movs	r3, #52	; 0x34
 800d26e:	fb03 f301 	mul.w	r3, r3, r1
 800d272:	4413      	add	r3, r2
 800d274:	3390      	adds	r3, #144	; 0x90
 800d276:	2201      	movs	r2, #1
 800d278:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d280:	4619      	mov	r1, r3
 800d282:	693a      	ldr	r2, [r7, #16]
 800d284:	2334      	movs	r3, #52	; 0x34
 800d286:	fb03 f301 	mul.w	r3, r3, r1
 800d28a:	4413      	add	r3, r2
 800d28c:	3391      	adds	r3, #145	; 0x91
 800d28e:	2202      	movs	r2, #2
 800d290:	701a      	strb	r2, [r3, #0]
            break;
 800d292:	e0fc      	b.n	800d48e <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d29a:	b2d9      	uxtb	r1, r3
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	2334      	movs	r3, #52	; 0x34
 800d2a6:	fb03 f302 	mul.w	r3, r3, r2
 800d2aa:	3390      	adds	r3, #144	; 0x90
 800d2ac:	693a      	ldr	r2, [r7, #16]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 fea6 	bl	800e006 <USBH_MSC_SCSI_ReadCapacity>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800d2be:	7bfb      	ldrb	r3, [r7, #15]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d120      	bne.n	800d306 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	693a      	ldr	r2, [r7, #16]
 800d2ce:	2334      	movs	r3, #52	; 0x34
 800d2d0:	fb03 f301 	mul.w	r3, r3, r1
 800d2d4:	4413      	add	r3, r2
 800d2d6:	3390      	adds	r3, #144	; 0x90
 800d2d8:	2201      	movs	r2, #1
 800d2da:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	693a      	ldr	r2, [r7, #16]
 800d2e6:	2334      	movs	r3, #52	; 0x34
 800d2e8:	fb03 f301 	mul.w	r3, r3, r1
 800d2ec:	4413      	add	r3, r2
 800d2ee:	3391      	adds	r3, #145	; 0x91
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800d304:	e0c5      	b.n	800d492 <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 800d306:	7bfb      	ldrb	r3, [r7, #15]
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d10c      	bne.n	800d326 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d312:	4619      	mov	r1, r3
 800d314:	693a      	ldr	r2, [r7, #16]
 800d316:	2334      	movs	r3, #52	; 0x34
 800d318:	fb03 f301 	mul.w	r3, r3, r1
 800d31c:	4413      	add	r3, r2
 800d31e:	3390      	adds	r3, #144	; 0x90
 800d320:	2205      	movs	r2, #5
 800d322:	701a      	strb	r2, [r3, #0]
            break;
 800d324:	e0b5      	b.n	800d492 <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d326:	7bfb      	ldrb	r3, [r7, #15]
 800d328:	2b04      	cmp	r3, #4
 800d32a:	f040 80b2 	bne.w	800d492 <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d334:	4619      	mov	r1, r3
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	2334      	movs	r3, #52	; 0x34
 800d33a:	fb03 f301 	mul.w	r3, r3, r1
 800d33e:	4413      	add	r3, r2
 800d340:	3390      	adds	r3, #144	; 0x90
 800d342:	2201      	movs	r2, #1
 800d344:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d34c:	4619      	mov	r1, r3
 800d34e:	693a      	ldr	r2, [r7, #16]
 800d350:	2334      	movs	r3, #52	; 0x34
 800d352:	fb03 f301 	mul.w	r3, r3, r1
 800d356:	4413      	add	r3, r2
 800d358:	3391      	adds	r3, #145	; 0x91
 800d35a:	2202      	movs	r2, #2
 800d35c:	701a      	strb	r2, [r3, #0]
            break;
 800d35e:	e098      	b.n	800d492 <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d366:	b2d9      	uxtb	r1, r3
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d36e:	461a      	mov	r2, r3
 800d370:	2334      	movs	r3, #52	; 0x34
 800d372:	fb03 f302 	mul.w	r3, r3, r2
 800d376:	3398      	adds	r3, #152	; 0x98
 800d378:	693a      	ldr	r2, [r7, #16]
 800d37a:	4413      	add	r3, r2
 800d37c:	3304      	adds	r3, #4
 800d37e:	461a      	mov	r2, r3
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 ff60 	bl	800e246 <USBH_MSC_SCSI_RequestSense>
 800d386:	4603      	mov	r3, r0
 800d388:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800d38a:	7bfb      	ldrb	r3, [r7, #15]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d145      	bne.n	800d41c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d396:	4619      	mov	r1, r3
 800d398:	693a      	ldr	r2, [r7, #16]
 800d39a:	2334      	movs	r3, #52	; 0x34
 800d39c:	fb03 f301 	mul.w	r3, r3, r1
 800d3a0:	4413      	add	r3, r2
 800d3a2:	339c      	adds	r3, #156	; 0x9c
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	2b06      	cmp	r3, #6
 800d3a8:	d00c      	beq.n	800d3c4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	693a      	ldr	r2, [r7, #16]
 800d3b4:	2334      	movs	r3, #52	; 0x34
 800d3b6:	fb03 f301 	mul.w	r3, r3, r1
 800d3ba:	4413      	add	r3, r2
 800d3bc:	339c      	adds	r3, #156	; 0x9c
 800d3be:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800d3c0:	2b02      	cmp	r3, #2
 800d3c2:	d117      	bne.n	800d3f4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	f242 720f 	movw	r2, #9999	; 0x270f
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d80c      	bhi.n	800d3f4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	2334      	movs	r3, #52	; 0x34
 800d3e6:	fb03 f301 	mul.w	r3, r3, r1
 800d3ea:	4413      	add	r3, r2
 800d3ec:	3390      	adds	r3, #144	; 0x90
 800d3ee:	2202      	movs	r2, #2
 800d3f0:	701a      	strb	r2, [r3, #0]
                  break;
 800d3f2:	e051      	b.n	800d498 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	693a      	ldr	r2, [r7, #16]
 800d3fe:	2334      	movs	r3, #52	; 0x34
 800d400:	fb03 f301 	mul.w	r3, r3, r1
 800d404:	4413      	add	r3, r2
 800d406:	3390      	adds	r3, #144	; 0x90
 800d408:	2201      	movs	r2, #1
 800d40a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d412:	3301      	adds	r3, #1
 800d414:	b29a      	uxth	r2, r3
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800d41c:	7bfb      	ldrb	r3, [r7, #15]
 800d41e:	2b02      	cmp	r3, #2
 800d420:	d10c      	bne.n	800d43c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d428:	4619      	mov	r1, r3
 800d42a:	693a      	ldr	r2, [r7, #16]
 800d42c:	2334      	movs	r3, #52	; 0x34
 800d42e:	fb03 f301 	mul.w	r3, r3, r1
 800d432:	4413      	add	r3, r2
 800d434:	3390      	adds	r3, #144	; 0x90
 800d436:	2208      	movs	r2, #8
 800d438:	701a      	strb	r2, [r3, #0]
            break;
 800d43a:	e02c      	b.n	800d496 <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d43c:	7bfb      	ldrb	r3, [r7, #15]
 800d43e:	2b04      	cmp	r3, #4
 800d440:	d129      	bne.n	800d496 <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d448:	4619      	mov	r1, r3
 800d44a:	693a      	ldr	r2, [r7, #16]
 800d44c:	2334      	movs	r3, #52	; 0x34
 800d44e:	fb03 f301 	mul.w	r3, r3, r1
 800d452:	4413      	add	r3, r2
 800d454:	3390      	adds	r3, #144	; 0x90
 800d456:	2201      	movs	r2, #1
 800d458:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d460:	4619      	mov	r1, r3
 800d462:	693a      	ldr	r2, [r7, #16]
 800d464:	2334      	movs	r3, #52	; 0x34
 800d466:	fb03 f301 	mul.w	r3, r3, r1
 800d46a:	4413      	add	r3, r2
 800d46c:	3391      	adds	r3, #145	; 0x91
 800d46e:	2202      	movs	r2, #2
 800d470:	701a      	strb	r2, [r3, #0]
            break;
 800d472:	e010      	b.n	800d496 <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d47a:	3301      	adds	r3, #1
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800d484:	e008      	b.n	800d498 <USBH_MSC_Process+0x4f0>
            break;
 800d486:	bf00      	nop
 800d488:	e006      	b.n	800d498 <USBH_MSC_Process+0x4f0>
            break;
 800d48a:	bf00      	nop
 800d48c:	e004      	b.n	800d498 <USBH_MSC_Process+0x4f0>
            break;
 800d48e:	bf00      	nop
 800d490:	e002      	b.n	800d498 <USBH_MSC_Process+0x4f0>
            break;
 800d492:	bf00      	nop
 800d494:	e000      	b.n	800d498 <USBH_MSC_Process+0x4f0>
            break;
 800d496:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2204      	movs	r2, #4
 800d49c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	f005 fed8 	bl	8013264 <osMessagePut>
      break;
 800d4b4:	e01e      	b.n	800d4f4 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2204      	movs	r2, #4
 800d4c8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d4d8:	2200      	movs	r2, #0
 800d4da:	4619      	mov	r1, r3
 800d4dc:	f005 fec2 	bl	8013264 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800d4e6:	2102      	movs	r1, #2
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	4798      	blx	r3
      break;
 800d4ec:	e002      	b.n	800d4f4 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	75fb      	strb	r3, [r7, #23]
      break;
 800d4f2:	bf00      	nop
  }
  return error;
 800d4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3718      	adds	r7, #24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop

0800d500 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	370c      	adds	r7, #12
 800d50e:	46bd      	mov	sp, r7
 800d510:	bc80      	pop	{r7}
 800d512:	4770      	bx	lr

0800d514 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b088      	sub	sp, #32
 800d518:	af02      	add	r7, sp, #8
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	460b      	mov	r3, r1
 800d51e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d526:	69db      	ldr	r3, [r3, #28]
 800d528:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800d52a:	2301      	movs	r3, #1
 800d52c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800d52e:	2301      	movs	r3, #1
 800d530:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800d532:	78fb      	ldrb	r3, [r7, #3]
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	2134      	movs	r1, #52	; 0x34
 800d538:	fb01 f303 	mul.w	r3, r1, r3
 800d53c:	4413      	add	r3, r2
 800d53e:	3390      	adds	r3, #144	; 0x90
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	2b07      	cmp	r3, #7
 800d544:	d04b      	beq.n	800d5de <USBH_MSC_RdWrProcess+0xca>
 800d546:	2b07      	cmp	r3, #7
 800d548:	f300 80d2 	bgt.w	800d6f0 <USBH_MSC_RdWrProcess+0x1dc>
 800d54c:	2b05      	cmp	r3, #5
 800d54e:	f000 8089 	beq.w	800d664 <USBH_MSC_RdWrProcess+0x150>
 800d552:	2b06      	cmp	r3, #6
 800d554:	f040 80cc 	bne.w	800d6f0 <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800d558:	78f9      	ldrb	r1, [r7, #3]
 800d55a:	2300      	movs	r3, #0
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	2300      	movs	r3, #0
 800d560:	2200      	movs	r2, #0
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 ff53 	bl	800e40e <USBH_MSC_SCSI_Read>
 800d568:	4603      	mov	r3, r0
 800d56a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800d56c:	7bfb      	ldrb	r3, [r7, #15]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d10b      	bne.n	800d58a <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800d572:	78fb      	ldrb	r3, [r7, #3]
 800d574:	693a      	ldr	r2, [r7, #16]
 800d576:	2134      	movs	r1, #52	; 0x34
 800d578:	fb01 f303 	mul.w	r3, r1, r3
 800d57c:	4413      	add	r3, r2
 800d57e:	3390      	adds	r3, #144	; 0x90
 800d580:	2201      	movs	r2, #1
 800d582:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800d584:	2300      	movs	r3, #0
 800d586:	75fb      	strb	r3, [r7, #23]
 800d588:	e01a      	b.n	800d5c0 <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 800d58a:	7bfb      	ldrb	r3, [r7, #15]
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d109      	bne.n	800d5a4 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800d590:	78fb      	ldrb	r3, [r7, #3]
 800d592:	693a      	ldr	r2, [r7, #16]
 800d594:	2134      	movs	r1, #52	; 0x34
 800d596:	fb01 f303 	mul.w	r3, r1, r3
 800d59a:	4413      	add	r3, r2
 800d59c:	3390      	adds	r3, #144	; 0x90
 800d59e:	2205      	movs	r2, #5
 800d5a0:	701a      	strb	r2, [r3, #0]
 800d5a2:	e00d      	b.n	800d5c0 <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d5a4:	7bfb      	ldrb	r3, [r7, #15]
 800d5a6:	2b04      	cmp	r3, #4
 800d5a8:	d10a      	bne.n	800d5c0 <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800d5aa:	78fb      	ldrb	r3, [r7, #3]
 800d5ac:	693a      	ldr	r2, [r7, #16]
 800d5ae:	2134      	movs	r1, #52	; 0x34
 800d5b0:	fb01 f303 	mul.w	r3, r1, r3
 800d5b4:	4413      	add	r3, r2
 800d5b6:	3390      	adds	r3, #144	; 0x90
 800d5b8:	2208      	movs	r2, #8
 800d5ba:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800d5bc:	2302      	movs	r3, #2
 800d5be:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2204      	movs	r2, #4
 800d5c4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	f005 fe44 	bl	8013264 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d5dc:	e089      	b.n	800d6f2 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800d5de:	78f9      	ldrb	r1, [r7, #3]
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	9300      	str	r3, [sp, #0]
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 fea5 	bl	800e338 <USBH_MSC_SCSI_Write>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800d5f2:	7bfb      	ldrb	r3, [r7, #15]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d10b      	bne.n	800d610 <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800d5f8:	78fb      	ldrb	r3, [r7, #3]
 800d5fa:	693a      	ldr	r2, [r7, #16]
 800d5fc:	2134      	movs	r1, #52	; 0x34
 800d5fe:	fb01 f303 	mul.w	r3, r1, r3
 800d602:	4413      	add	r3, r2
 800d604:	3390      	adds	r3, #144	; 0x90
 800d606:	2201      	movs	r2, #1
 800d608:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800d60a:	2300      	movs	r3, #0
 800d60c:	75fb      	strb	r3, [r7, #23]
 800d60e:	e01a      	b.n	800d646 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 800d610:	7bfb      	ldrb	r3, [r7, #15]
 800d612:	2b02      	cmp	r3, #2
 800d614:	d109      	bne.n	800d62a <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800d616:	78fb      	ldrb	r3, [r7, #3]
 800d618:	693a      	ldr	r2, [r7, #16]
 800d61a:	2134      	movs	r1, #52	; 0x34
 800d61c:	fb01 f303 	mul.w	r3, r1, r3
 800d620:	4413      	add	r3, r2
 800d622:	3390      	adds	r3, #144	; 0x90
 800d624:	2205      	movs	r2, #5
 800d626:	701a      	strb	r2, [r3, #0]
 800d628:	e00d      	b.n	800d646 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d62a:	7bfb      	ldrb	r3, [r7, #15]
 800d62c:	2b04      	cmp	r3, #4
 800d62e:	d10a      	bne.n	800d646 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800d630:	78fb      	ldrb	r3, [r7, #3]
 800d632:	693a      	ldr	r2, [r7, #16]
 800d634:	2134      	movs	r1, #52	; 0x34
 800d636:	fb01 f303 	mul.w	r3, r1, r3
 800d63a:	4413      	add	r3, r2
 800d63c:	3390      	adds	r3, #144	; 0x90
 800d63e:	2208      	movs	r2, #8
 800d640:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800d642:	2302      	movs	r3, #2
 800d644:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2204      	movs	r2, #4
 800d64a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d65a:	2200      	movs	r2, #0
 800d65c:	4619      	mov	r1, r3
 800d65e:	f005 fe01 	bl	8013264 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d662:	e046      	b.n	800d6f2 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800d664:	78fb      	ldrb	r3, [r7, #3]
 800d666:	2234      	movs	r2, #52	; 0x34
 800d668:	fb02 f303 	mul.w	r3, r2, r3
 800d66c:	3398      	adds	r3, #152	; 0x98
 800d66e:	693a      	ldr	r2, [r7, #16]
 800d670:	4413      	add	r3, r2
 800d672:	1d1a      	adds	r2, r3, #4
 800d674:	78fb      	ldrb	r3, [r7, #3]
 800d676:	4619      	mov	r1, r3
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 fde4 	bl	800e246 <USBH_MSC_SCSI_RequestSense>
 800d67e:	4603      	mov	r3, r0
 800d680:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800d682:	7bfb      	ldrb	r3, [r7, #15]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d113      	bne.n	800d6b0 <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800d688:	78fb      	ldrb	r3, [r7, #3]
 800d68a:	693a      	ldr	r2, [r7, #16]
 800d68c:	2134      	movs	r1, #52	; 0x34
 800d68e:	fb01 f303 	mul.w	r3, r1, r3
 800d692:	4413      	add	r3, r2
 800d694:	3390      	adds	r3, #144	; 0x90
 800d696:	2201      	movs	r2, #1
 800d698:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800d69a:	78fb      	ldrb	r3, [r7, #3]
 800d69c:	693a      	ldr	r2, [r7, #16]
 800d69e:	2134      	movs	r1, #52	; 0x34
 800d6a0:	fb01 f303 	mul.w	r3, r1, r3
 800d6a4:	4413      	add	r3, r2
 800d6a6:	3391      	adds	r3, #145	; 0x91
 800d6a8:	2202      	movs	r2, #2
 800d6aa:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800d6b0:	7bfb      	ldrb	r3, [r7, #15]
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	d00d      	beq.n	800d6d2 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d6b6:	7bfb      	ldrb	r3, [r7, #15]
 800d6b8:	2b04      	cmp	r3, #4
 800d6ba:	d10a      	bne.n	800d6d2 <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800d6bc:	78fb      	ldrb	r3, [r7, #3]
 800d6be:	693a      	ldr	r2, [r7, #16]
 800d6c0:	2134      	movs	r1, #52	; 0x34
 800d6c2:	fb01 f303 	mul.w	r3, r1, r3
 800d6c6:	4413      	add	r3, r2
 800d6c8:	3390      	adds	r3, #144	; 0x90
 800d6ca:	2208      	movs	r2, #8
 800d6cc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800d6ce:	2302      	movs	r3, #2
 800d6d0:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2204      	movs	r2, #4
 800d6d6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	f005 fdbb 	bl	8013264 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d6ee:	e000      	b.n	800d6f2 <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 800d6f0:	bf00      	nop

  }
  return error;
 800d6f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3718      	adds	r7, #24
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	460b      	mov	r3, r1
 800d706:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d70e:	69db      	ldr	r3, [r3, #28]
 800d710:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	b2db      	uxtb	r3, r3
 800d718:	2b0b      	cmp	r3, #11
 800d71a:	d10c      	bne.n	800d736 <USBH_MSC_UnitIsReady+0x3a>
 800d71c:	78fb      	ldrb	r3, [r7, #3]
 800d71e:	68ba      	ldr	r2, [r7, #8]
 800d720:	2134      	movs	r1, #52	; 0x34
 800d722:	fb01 f303 	mul.w	r3, r1, r3
 800d726:	4413      	add	r3, r2
 800d728:	3391      	adds	r3, #145	; 0x91
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d102      	bne.n	800d736 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800d730:	2301      	movs	r3, #1
 800d732:	73fb      	strb	r3, [r7, #15]
 800d734:	e001      	b.n	800d73a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800d736:	2300      	movs	r3, #0
 800d738:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800d73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	bc80      	pop	{r7}
 800d744:	4770      	bx	lr

0800d746 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b086      	sub	sp, #24
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	60f8      	str	r0, [r7, #12]
 800d74e:	460b      	mov	r3, r1
 800d750:	607a      	str	r2, [r7, #4]
 800d752:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d75a:	69db      	ldr	r3, [r3, #28]
 800d75c:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	b2db      	uxtb	r3, r3
 800d764:	2b0b      	cmp	r3, #11
 800d766:	d10d      	bne.n	800d784 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800d768:	7afb      	ldrb	r3, [r7, #11]
 800d76a:	2234      	movs	r2, #52	; 0x34
 800d76c:	fb02 f303 	mul.w	r3, r2, r3
 800d770:	3390      	adds	r3, #144	; 0x90
 800d772:	697a      	ldr	r2, [r7, #20]
 800d774:	4413      	add	r3, r2
 800d776:	2234      	movs	r2, #52	; 0x34
 800d778:	4619      	mov	r1, r3
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f008 fe8a 	bl	8016494 <memcpy>
    return USBH_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	e000      	b.n	800d786 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800d784:	2302      	movs	r3, #2
  }
}
 800d786:	4618      	mov	r0, r3
 800d788:	3718      	adds	r7, #24
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b088      	sub	sp, #32
 800d792:	af02      	add	r7, sp, #8
 800d794:	60f8      	str	r0, [r7, #12]
 800d796:	607a      	str	r2, [r7, #4]
 800d798:	603b      	str	r3, [r7, #0]
 800d79a:	460b      	mov	r3, r1
 800d79c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d7a4:	69db      	ldr	r3, [r3, #28]
 800d7a6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d00e      	beq.n	800d7d2 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800d7ba:	2b0b      	cmp	r3, #11
 800d7bc:	d109      	bne.n	800d7d2 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800d7be:	7afb      	ldrb	r3, [r7, #11]
 800d7c0:	697a      	ldr	r2, [r7, #20]
 800d7c2:	2134      	movs	r1, #52	; 0x34
 800d7c4:	fb01 f303 	mul.w	r3, r1, r3
 800d7c8:	4413      	add	r3, r2
 800d7ca:	3390      	adds	r3, #144	; 0x90
 800d7cc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d001      	beq.n	800d7d6 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800d7d2:	2302      	movs	r3, #2
 800d7d4:	e040      	b.n	800d858 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2206      	movs	r2, #6
 800d7da:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800d7dc:	7afb      	ldrb	r3, [r7, #11]
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	2134      	movs	r1, #52	; 0x34
 800d7e2:	fb01 f303 	mul.w	r3, r1, r3
 800d7e6:	4413      	add	r3, r2
 800d7e8:	3390      	adds	r3, #144	; 0x90
 800d7ea:	2206      	movs	r2, #6
 800d7ec:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800d7ee:	7afb      	ldrb	r3, [r7, #11]
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800d7f8:	7af9      	ldrb	r1, [r7, #11]
 800d7fa:	6a3b      	ldr	r3, [r7, #32]
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	f000 fe03 	bl	800e40e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800d80e:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d810:	e016      	b.n	800d840 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	1ad2      	subs	r2, r2, r3
 800d81c:	6a3b      	ldr	r3, [r7, #32]
 800d81e:	f242 7110 	movw	r1, #10000	; 0x2710
 800d822:	fb01 f303 	mul.w	r3, r1, r3
 800d826:	429a      	cmp	r2, r3
 800d828:	d805      	bhi.n	800d836 <USBH_MSC_Read+0xa8>
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d830:	b2db      	uxtb	r3, r3
 800d832:	2b00      	cmp	r3, #0
 800d834:	d104      	bne.n	800d840 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	2201      	movs	r2, #1
 800d83a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800d83c:	2302      	movs	r3, #2
 800d83e:	e00b      	b.n	800d858 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d840:	7afb      	ldrb	r3, [r7, #11]
 800d842:	4619      	mov	r1, r3
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f7ff fe65 	bl	800d514 <USBH_MSC_RdWrProcess>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d0e0      	beq.n	800d812 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	2201      	movs	r2, #1
 800d854:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3718      	adds	r7, #24
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b088      	sub	sp, #32
 800d864:	af02      	add	r7, sp, #8
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	607a      	str	r2, [r7, #4]
 800d86a:	603b      	str	r3, [r7, #0]
 800d86c:	460b      	mov	r3, r1
 800d86e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d876:	69db      	ldr	r3, [r3, #28]
 800d878:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d880:	b2db      	uxtb	r3, r3
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00e      	beq.n	800d8a4 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800d88c:	2b0b      	cmp	r3, #11
 800d88e:	d109      	bne.n	800d8a4 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800d890:	7afb      	ldrb	r3, [r7, #11]
 800d892:	697a      	ldr	r2, [r7, #20]
 800d894:	2134      	movs	r1, #52	; 0x34
 800d896:	fb01 f303 	mul.w	r3, r1, r3
 800d89a:	4413      	add	r3, r2
 800d89c:	3390      	adds	r3, #144	; 0x90
 800d89e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d001      	beq.n	800d8a8 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800d8a4:	2302      	movs	r3, #2
 800d8a6:	e040      	b.n	800d92a <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	2207      	movs	r2, #7
 800d8ac:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800d8ae:	7afb      	ldrb	r3, [r7, #11]
 800d8b0:	697a      	ldr	r2, [r7, #20]
 800d8b2:	2134      	movs	r1, #52	; 0x34
 800d8b4:	fb01 f303 	mul.w	r3, r1, r3
 800d8b8:	4413      	add	r3, r2
 800d8ba:	3390      	adds	r3, #144	; 0x90
 800d8bc:	2207      	movs	r2, #7
 800d8be:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800d8c0:	7afb      	ldrb	r3, [r7, #11]
 800d8c2:	b29a      	uxth	r2, r3
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800d8ca:	7af9      	ldrb	r1, [r7, #11]
 800d8cc:	6a3b      	ldr	r3, [r7, #32]
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f000 fd2f 	bl	800e338 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800d8e0:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d8e2:	e016      	b.n	800d912 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	1ad2      	subs	r2, r2, r3
 800d8ee:	6a3b      	ldr	r3, [r7, #32]
 800d8f0:	f242 7110 	movw	r1, #10000	; 0x2710
 800d8f4:	fb01 f303 	mul.w	r3, r1, r3
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d805      	bhi.n	800d908 <USBH_MSC_Write+0xa8>
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d104      	bne.n	800d912 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	2201      	movs	r2, #1
 800d90c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800d90e:	2302      	movs	r3, #2
 800d910:	e00b      	b.n	800d92a <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d912:	7afb      	ldrb	r3, [r7, #11]
 800d914:	4619      	mov	r1, r3
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f7ff fdfc 	bl	800d514 <USBH_MSC_RdWrProcess>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d0e0      	beq.n	800d8e4 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	2201      	movs	r2, #1
 800d926:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3718      	adds	r7, #24
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b082      	sub	sp, #8
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2221      	movs	r2, #33	; 0x21
 800d93e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	22ff      	movs	r2, #255	; 0xff
 800d944:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2200      	movs	r2, #0
 800d94a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2200      	movs	r2, #0
 800d956:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800d958:	2200      	movs	r2, #0
 800d95a:	2100      	movs	r1, #0
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f001 fe3b 	bl	800f5d8 <USBH_CtlReq>
 800d962:	4603      	mov	r3, r0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	22a1      	movs	r2, #161	; 0xa1
 800d97a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	22fe      	movs	r2, #254	; 0xfe
 800d980:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2201      	movs	r2, #1
 800d992:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800d994:	2201      	movs	r2, #1
 800d996:	6839      	ldr	r1, [r7, #0]
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f001 fe1d 	bl	800f5d8 <USBH_CtlReq>
 800d99e:	4603      	mov	r3, r0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d9b6:	69db      	ldr	r3, [r3, #28]
 800d9b8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	4a09      	ldr	r2, [pc, #36]	; (800d9e4 <USBH_MSC_BOT_Init+0x3c>)
 800d9be:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	4a09      	ldr	r2, [pc, #36]	; (800d9e8 <USBH_MSC_BOT_Init+0x40>)
 800d9c4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800d9d6:	2300      	movs	r3, #0
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3714      	adds	r7, #20
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bc80      	pop	{r7}
 800d9e0:	4770      	bx	lr
 800d9e2:	bf00      	nop
 800d9e4:	43425355 	.word	0x43425355
 800d9e8:	20304050 	.word	0x20304050

0800d9ec <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b088      	sub	sp, #32
 800d9f0:	af02      	add	r7, sp, #8
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800da00:	2301      	movs	r3, #1
 800da02:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800da04:	2300      	movs	r3, #0
 800da06:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800da0e:	69db      	ldr	r3, [r3, #28]
 800da10:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800da12:	2300      	movs	r3, #0
 800da14:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800da1c:	3b01      	subs	r3, #1
 800da1e:	2b0a      	cmp	r3, #10
 800da20:	f200 822a 	bhi.w	800de78 <USBH_MSC_BOT_Process+0x48c>
 800da24:	a201      	add	r2, pc, #4	; (adr r2, 800da2c <USBH_MSC_BOT_Process+0x40>)
 800da26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2a:	bf00      	nop
 800da2c:	0800da59 	.word	0x0800da59
 800da30:	0800da81 	.word	0x0800da81
 800da34:	0800db3f 	.word	0x0800db3f
 800da38:	0800db5d 	.word	0x0800db5d
 800da3c:	0800dc19 	.word	0x0800dc19
 800da40:	0800dc3b 	.word	0x0800dc3b
 800da44:	0800dd27 	.word	0x0800dd27
 800da48:	0800dd43 	.word	0x0800dd43
 800da4c:	0800ddcd 	.word	0x0800ddcd
 800da50:	0800ddfd 	.word	0x0800ddfd
 800da54:	0800de5f 	.word	0x0800de5f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	78fa      	ldrb	r2, [r7, #3]
 800da5c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	2202      	movs	r2, #2
 800da64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	795b      	ldrb	r3, [r3, #5]
 800da72:	2201      	movs	r2, #1
 800da74:	9200      	str	r2, [sp, #0]
 800da76:	221f      	movs	r2, #31
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f002 f89e 	bl	800fbba <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800da7e:	e20a      	b.n	800de96 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	795b      	ldrb	r3, [r3, #5]
 800da84:	4619      	mov	r1, r3
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f008 faf4 	bl	8016074 <USBH_LL_GetURBState>
 800da8c:	4603      	mov	r3, r0
 800da8e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800da90:	7d3b      	ldrb	r3, [r7, #20]
 800da92:	2b01      	cmp	r3, #1
 800da94:	d126      	bne.n	800dae4 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00f      	beq.n	800dabe <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800daa4:	b25b      	sxtb	r3, r3
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	da04      	bge.n	800dab4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	2203      	movs	r2, #3
 800daae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800dab2:	e008      	b.n	800dac6 <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	2205      	movs	r2, #5
 800dab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800dabc:	e003      	b.n	800dac6 <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	2207      	movs	r2, #7
 800dac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2202      	movs	r2, #2
 800daca:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800dada:	2200      	movs	r2, #0
 800dadc:	4619      	mov	r1, r3
 800dade:	f005 fbc1 	bl	8013264 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dae2:	e1cb      	b.n	800de7c <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dae4:	7d3b      	ldrb	r3, [r7, #20]
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	d112      	bne.n	800db10 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	2201      	movs	r2, #1
 800daee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2202      	movs	r2, #2
 800daf6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800db06:	2200      	movs	r2, #0
 800db08:	4619      	mov	r1, r3
 800db0a:	f005 fbab 	bl	8013264 <osMessagePut>
      break;
 800db0e:	e1b5      	b.n	800de7c <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 800db10:	7d3b      	ldrb	r3, [r7, #20]
 800db12:	2b05      	cmp	r3, #5
 800db14:	f040 81b2 	bne.w	800de7c <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	220a      	movs	r2, #10
 800db1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2202      	movs	r2, #2
 800db24:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800db34:	2200      	movs	r2, #0
 800db36:	4619      	mov	r1, r3
 800db38:	f005 fb94 	bl	8013264 <osMessagePut>
      break;
 800db3c:	e19e      	b.n	800de7c <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	895a      	ldrh	r2, [r3, #10]
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	791b      	ldrb	r3, [r3, #4]
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f002 f859 	bl	800fc04 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	2204      	movs	r2, #4
 800db56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800db5a:	e19c      	b.n	800de96 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	791b      	ldrb	r3, [r3, #4]
 800db60:	4619      	mov	r1, r3
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f008 fa86 	bl	8016074 <USBH_LL_GetURBState>
 800db68:	4603      	mov	r3, r0
 800db6a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800db6c:	7d3b      	ldrb	r3, [r7, #20]
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d13b      	bne.n	800dbea <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db76:	693a      	ldr	r2, [r7, #16]
 800db78:	8952      	ldrh	r2, [r2, #10]
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d910      	bls.n	800dba0 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db84:	693a      	ldr	r2, [r7, #16]
 800db86:	8952      	ldrh	r2, [r2, #10]
 800db88:	441a      	add	r2, r3
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db94:	693a      	ldr	r2, [r7, #16]
 800db96:	8952      	ldrh	r2, [r2, #10]
 800db98:	1a9a      	subs	r2, r3, r2
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	65da      	str	r2, [r3, #92]	; 0x5c
 800db9e:	e002      	b.n	800dba6 <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	2200      	movs	r2, #0
 800dba4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00a      	beq.n	800dbc4 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	895a      	ldrh	r2, [r3, #10]
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	791b      	ldrb	r3, [r3, #4]
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f002 f821 	bl	800fc04 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800dbc2:	e15d      	b.n	800de80 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	2207      	movs	r2, #7
 800dbc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2202      	movs	r2, #2
 800dbd0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	f005 fb3e 	bl	8013264 <osMessagePut>
      break;
 800dbe8:	e14a      	b.n	800de80 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 800dbea:	7d3b      	ldrb	r3, [r7, #20]
 800dbec:	2b05      	cmp	r3, #5
 800dbee:	f040 8147 	bne.w	800de80 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	2209      	movs	r2, #9
 800dbf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2202      	movs	r2, #2
 800dbfe:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800dc0e:	2200      	movs	r2, #0
 800dc10:	4619      	mov	r1, r3
 800dc12:	f005 fb27 	bl	8013264 <osMessagePut>
      break;
 800dc16:	e133      	b.n	800de80 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	891a      	ldrh	r2, [r3, #8]
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	795b      	ldrb	r3, [r3, #5]
 800dc26:	2001      	movs	r0, #1
 800dc28:	9000      	str	r0, [sp, #0]
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f001 ffc5 	bl	800fbba <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	2206      	movs	r2, #6
 800dc34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800dc38:	e12d      	b.n	800de96 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	795b      	ldrb	r3, [r3, #5]
 800dc3e:	4619      	mov	r1, r3
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f008 fa17 	bl	8016074 <USBH_LL_GetURBState>
 800dc46:	4603      	mov	r3, r0
 800dc48:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800dc4a:	7d3b      	ldrb	r3, [r7, #20]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d13d      	bne.n	800dccc <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc54:	693a      	ldr	r2, [r7, #16]
 800dc56:	8912      	ldrh	r2, [r2, #8]
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d910      	bls.n	800dc7e <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc62:	693a      	ldr	r2, [r7, #16]
 800dc64:	8912      	ldrh	r2, [r2, #8]
 800dc66:	441a      	add	r2, r3
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc72:	693a      	ldr	r2, [r7, #16]
 800dc74:	8912      	ldrh	r2, [r2, #8]
 800dc76:	1a9a      	subs	r2, r3, r2
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	65da      	str	r2, [r3, #92]	; 0x5c
 800dc7c:	e002      	b.n	800dc84 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	2200      	movs	r2, #0
 800dc82:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d00c      	beq.n	800dca6 <USBH_MSC_BOT_Process+0x2ba>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	891a      	ldrh	r2, [r3, #8]
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	795b      	ldrb	r3, [r3, #5]
 800dc9a:	2001      	movs	r0, #1
 800dc9c:	9000      	str	r0, [sp, #0]
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f001 ff8b 	bl	800fbba <USBH_BulkSendData>
 800dca4:	e003      	b.n	800dcae <USBH_MSC_BOT_Process+0x2c2>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	2207      	movs	r2, #7
 800dcaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2202      	movs	r2, #2
 800dcb2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	f005 facd 	bl	8013264 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800dcca:	e0db      	b.n	800de84 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dccc:	7d3b      	ldrb	r3, [r7, #20]
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d112      	bne.n	800dcf8 <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2205      	movs	r2, #5
 800dcd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2202      	movs	r2, #2
 800dcde:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800dcee:	2200      	movs	r2, #0
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	f005 fab7 	bl	8013264 <osMessagePut>
      break;
 800dcf6:	e0c5      	b.n	800de84 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 800dcf8:	7d3b      	ldrb	r3, [r7, #20]
 800dcfa:	2b05      	cmp	r3, #5
 800dcfc:	f040 80c2 	bne.w	800de84 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	220a      	movs	r2, #10
 800dd04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2202      	movs	r2, #2
 800dd0c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	4619      	mov	r1, r3
 800dd20:	f005 faa0 	bl	8013264 <osMessagePut>
      break;
 800dd24:	e0ae      	b.n	800de84 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	791b      	ldrb	r3, [r3, #4]
 800dd30:	220d      	movs	r2, #13
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f001 ff66 	bl	800fc04 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	2208      	movs	r2, #8
 800dd3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800dd40:	e0a9      	b.n	800de96 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	791b      	ldrb	r3, [r3, #4]
 800dd46:	4619      	mov	r1, r3
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f008 f993 	bl	8016074 <USBH_LL_GetURBState>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800dd52:	7d3b      	ldrb	r3, [r7, #20]
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d123      	bne.n	800dda0 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	2201      	movs	r2, #1
 800dd64:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 f8c5 	bl	800def8 <USBH_MSC_DecodeCSW>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800dd72:	7d7b      	ldrb	r3, [r7, #21]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d102      	bne.n	800dd7e <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	75fb      	strb	r3, [r7, #23]
 800dd7c:	e001      	b.n	800dd82 <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 800dd7e:	2302      	movs	r3, #2
 800dd80:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2202      	movs	r2, #2
 800dd86:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800dd96:	2200      	movs	r2, #0
 800dd98:	4619      	mov	r1, r3
 800dd9a:	f005 fa63 	bl	8013264 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800dd9e:	e073      	b.n	800de88 <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 800dda0:	7d3b      	ldrb	r3, [r7, #20]
 800dda2:	2b05      	cmp	r3, #5
 800dda4:	d170      	bne.n	800de88 <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	2209      	movs	r2, #9
 800ddaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2202      	movs	r2, #2
 800ddb2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	f005 fa4d 	bl	8013264 <osMessagePut>
      break;
 800ddca:	e05d      	b.n	800de88 <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800ddcc:	78fb      	ldrb	r3, [r7, #3]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f000 f864 	bl	800dea0 <USBH_MSC_BOT_Abort>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800dddc:	7dbb      	ldrb	r3, [r7, #22]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d104      	bne.n	800ddec <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	2207      	movs	r2, #7
 800dde6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800ddea:	e04f      	b.n	800de8c <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 800ddec:	7dbb      	ldrb	r3, [r7, #22]
 800ddee:	2b04      	cmp	r3, #4
 800ddf0:	d14c      	bne.n	800de8c <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	220b      	movs	r2, #11
 800ddf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ddfa:	e047      	b.n	800de8c <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800ddfc:	78fb      	ldrb	r3, [r7, #3]
 800ddfe:	2201      	movs	r2, #1
 800de00:	4619      	mov	r1, r3
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 f84c 	bl	800dea0 <USBH_MSC_BOT_Abort>
 800de08:	4603      	mov	r3, r0
 800de0a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800de0c:	7dbb      	ldrb	r3, [r7, #22]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d11d      	bne.n	800de4e <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	795b      	ldrb	r3, [r3, #5]
 800de16:	4619      	mov	r1, r3
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f008 f984 	bl	8016126 <USBH_LL_GetToggle>
 800de1e:	4603      	mov	r3, r0
 800de20:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	7959      	ldrb	r1, [r3, #5]
 800de26:	7bfb      	ldrb	r3, [r7, #15]
 800de28:	f1c3 0301 	rsb	r3, r3, #1
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	461a      	mov	r2, r3
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f008 f949 	bl	80160c8 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	791b      	ldrb	r3, [r3, #4]
 800de3a:	2200      	movs	r2, #0
 800de3c:	4619      	mov	r1, r3
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f008 f942 	bl	80160c8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	2209      	movs	r2, #9
 800de48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800de4c:	e020      	b.n	800de90 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 800de4e:	7dbb      	ldrb	r3, [r7, #22]
 800de50:	2b04      	cmp	r3, #4
 800de52:	d11d      	bne.n	800de90 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	220b      	movs	r2, #11
 800de58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800de5c:	e018      	b.n	800de90 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f7ff fd67 	bl	800d932 <USBH_MSC_BOT_REQ_Reset>
 800de64:	4603      	mov	r3, r0
 800de66:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800de68:	7dfb      	ldrb	r3, [r7, #23]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d112      	bne.n	800de94 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	2201      	movs	r2, #1
 800de72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800de76:	e00d      	b.n	800de94 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 800de78:	bf00      	nop
 800de7a:	e00c      	b.n	800de96 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800de7c:	bf00      	nop
 800de7e:	e00a      	b.n	800de96 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800de80:	bf00      	nop
 800de82:	e008      	b.n	800de96 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800de84:	bf00      	nop
 800de86:	e006      	b.n	800de96 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800de88:	bf00      	nop
 800de8a:	e004      	b.n	800de96 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800de8c:	bf00      	nop
 800de8e:	e002      	b.n	800de96 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800de90:	bf00      	nop
 800de92:	e000      	b.n	800de96 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800de94:	bf00      	nop
  }
  return status;
 800de96:	7dfb      	ldrb	r3, [r7, #23]
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3718      	adds	r7, #24
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	460b      	mov	r3, r1
 800deaa:	70fb      	strb	r3, [r7, #3]
 800deac:	4613      	mov	r3, r2
 800deae:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800deb0:	2302      	movs	r3, #2
 800deb2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800deba:	69db      	ldr	r3, [r3, #28]
 800debc:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800debe:	78bb      	ldrb	r3, [r7, #2]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d002      	beq.n	800deca <USBH_MSC_BOT_Abort+0x2a>
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d009      	beq.n	800dedc <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800dec8:	e011      	b.n	800deee <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	79db      	ldrb	r3, [r3, #7]
 800dece:	4619      	mov	r1, r3
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f001 f9a6 	bl	800f222 <USBH_ClrFeature>
 800ded6:	4603      	mov	r3, r0
 800ded8:	73fb      	strb	r3, [r7, #15]
      break;
 800deda:	e008      	b.n	800deee <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	799b      	ldrb	r3, [r3, #6]
 800dee0:	4619      	mov	r1, r3
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f001 f99d 	bl	800f222 <USBH_ClrFeature>
 800dee8:	4603      	mov	r3, r0
 800deea:	73fb      	strb	r3, [r7, #15]
      break;
 800deec:	bf00      	nop
  }
  return status;
 800deee:	7bfb      	ldrb	r3, [r7, #15]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3710      	adds	r7, #16
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800df06:	69db      	ldr	r3, [r3, #28]
 800df08:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800df0a:	2301      	movs	r3, #1
 800df0c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	791b      	ldrb	r3, [r3, #4]
 800df12:	4619      	mov	r1, r3
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f008 f81b 	bl	8015f50 <USBH_LL_GetLastXferSize>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b0d      	cmp	r3, #13
 800df1e:	d002      	beq.n	800df26 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800df20:	2302      	movs	r3, #2
 800df22:	73fb      	strb	r3, [r7, #15]
 800df24:	e024      	b.n	800df70 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df2a:	4a14      	ldr	r2, [pc, #80]	; (800df7c <USBH_MSC_DecodeCSW+0x84>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d11d      	bne.n	800df6c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df38:	429a      	cmp	r2, r3
 800df3a:	d119      	bne.n	800df70 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800df42:	2b00      	cmp	r3, #0
 800df44:	d102      	bne.n	800df4c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800df46:	2300      	movs	r3, #0
 800df48:	73fb      	strb	r3, [r7, #15]
 800df4a:	e011      	b.n	800df70 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800df52:	2b01      	cmp	r3, #1
 800df54:	d102      	bne.n	800df5c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800df56:	2301      	movs	r3, #1
 800df58:	73fb      	strb	r3, [r7, #15]
 800df5a:	e009      	b.n	800df70 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800df62:	2b02      	cmp	r3, #2
 800df64:	d104      	bne.n	800df70 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800df66:	2302      	movs	r3, #2
 800df68:	73fb      	strb	r3, [r7, #15]
 800df6a:	e001      	b.n	800df70 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800df6c:	2302      	movs	r3, #2
 800df6e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800df70:	7bfb      	ldrb	r3, [r7, #15]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	53425355 	.word	0x53425355

0800df80 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b084      	sub	sp, #16
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	460b      	mov	r3, r1
 800df8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800df8c:	2302      	movs	r3, #2
 800df8e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800df96:	69db      	ldr	r3, [r3, #28]
 800df98:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d002      	beq.n	800dfaa <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800dfa4:	2b02      	cmp	r3, #2
 800dfa6:	d021      	beq.n	800dfec <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800dfa8:	e028      	b.n	800dffc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	2200      	movs	r2, #0
 800dfae:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	220a      	movs	r2, #10
 800dfbc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	3363      	adds	r3, #99	; 0x63
 800dfc4:	2210      	movs	r2, #16
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f008 fa71 	bl	80164b0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	2202      	movs	r2, #2
 800dfe2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	73fb      	strb	r3, [r7, #15]
      break;
 800dfea:	e007      	b.n	800dffc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800dfec:	78fb      	ldrb	r3, [r7, #3]
 800dfee:	4619      	mov	r1, r3
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f7ff fcfb 	bl	800d9ec <USBH_MSC_BOT_Process>
 800dff6:	4603      	mov	r3, r0
 800dff8:	73fb      	strb	r3, [r7, #15]
      break;
 800dffa:	bf00      	nop
  }

  return error;
 800dffc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b086      	sub	sp, #24
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	60f8      	str	r0, [r7, #12]
 800e00e:	460b      	mov	r3, r1
 800e010:	607a      	str	r2, [r7, #4]
 800e012:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800e014:	2301      	movs	r3, #1
 800e016:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e01e:	69db      	ldr	r3, [r3, #28]
 800e020:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d002      	beq.n	800e032 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800e02c:	2b02      	cmp	r3, #2
 800e02e:	d027      	beq.n	800e080 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800e030:	e05f      	b.n	800e0f2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	2208      	movs	r2, #8
 800e036:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	2280      	movs	r2, #128	; 0x80
 800e03c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	220a      	movs	r2, #10
 800e044:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	3363      	adds	r3, #99	; 0x63
 800e04c:	2210      	movs	r2, #16
 800e04e:	2100      	movs	r1, #0
 800e050:	4618      	mov	r0, r3
 800e052:	f008 fa2d 	bl	80164b0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	2225      	movs	r2, #37	; 0x25
 800e05a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	2201      	movs	r2, #1
 800e062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	2202      	movs	r2, #2
 800e06a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	f103 0210 	add.w	r2, r3, #16
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e07a:	2301      	movs	r3, #1
 800e07c:	75fb      	strb	r3, [r7, #23]
      break;
 800e07e:	e038      	b.n	800e0f2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e080:	7afb      	ldrb	r3, [r7, #11]
 800e082:	4619      	mov	r1, r3
 800e084:	68f8      	ldr	r0, [r7, #12]
 800e086:	f7ff fcb1 	bl	800d9ec <USBH_MSC_BOT_Process>
 800e08a:	4603      	mov	r3, r0
 800e08c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800e08e:	7dfb      	ldrb	r3, [r7, #23]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d12d      	bne.n	800e0f0 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e09a:	3303      	adds	r3, #3
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	461a      	mov	r2, r3
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0a6:	3302      	adds	r3, #2
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	021b      	lsls	r3, r3, #8
 800e0ac:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800e0ba:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	061b      	lsls	r3, r3, #24
 800e0c6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0d2:	3307      	adds	r3, #7
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0de:	3306      	adds	r3, #6
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	021b      	lsls	r3, r3, #8
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	4313      	orrs	r3, r2
 800e0ea:	b29a      	uxth	r2, r3
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	809a      	strh	r2, [r3, #4]
      break;
 800e0f0:	bf00      	nop
  }

  return error;
 800e0f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3718      	adds	r7, #24
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	460b      	mov	r3, r1
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800e10a:	2302      	movs	r3, #2
 800e10c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e114:	69db      	ldr	r3, [r3, #28]
 800e116:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d002      	beq.n	800e128 <USBH_MSC_SCSI_Inquiry+0x2c>
 800e122:	2b02      	cmp	r3, #2
 800e124:	d03d      	beq.n	800e1a2 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800e126:	e089      	b.n	800e23c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	2224      	movs	r2, #36	; 0x24
 800e12c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	2280      	movs	r2, #128	; 0x80
 800e132:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	220a      	movs	r2, #10
 800e13a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	3363      	adds	r3, #99	; 0x63
 800e142:	220a      	movs	r2, #10
 800e144:	2100      	movs	r1, #0
 800e146:	4618      	mov	r0, r3
 800e148:	f008 f9b2 	bl	80164b0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	2212      	movs	r2, #18
 800e150:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800e154:	7afb      	ldrb	r3, [r7, #11]
 800e156:	015b      	lsls	r3, r3, #5
 800e158:	b2da      	uxtb	r2, r3
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	2200      	movs	r2, #0
 800e164:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	2200      	movs	r2, #0
 800e16c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	2224      	movs	r2, #36	; 0x24
 800e174:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	2200      	movs	r2, #0
 800e17c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	2201      	movs	r2, #1
 800e184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	2202      	movs	r2, #2
 800e18c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	f103 0210 	add.w	r2, r3, #16
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e19c:	2301      	movs	r3, #1
 800e19e:	75fb      	strb	r3, [r7, #23]
      break;
 800e1a0:	e04c      	b.n	800e23c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e1a2:	7afb      	ldrb	r3, [r7, #11]
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f7ff fc20 	bl	800d9ec <USBH_MSC_BOT_Process>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800e1b0:	7dfb      	ldrb	r3, [r7, #23]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d141      	bne.n	800e23a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800e1b6:	2222      	movs	r2, #34	; 0x22
 800e1b8:	2100      	movs	r1, #0
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f008 f978 	bl	80164b0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	f003 031f 	and.w	r3, r3, #31
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	095b      	lsrs	r3, r3, #5
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	b25b      	sxtb	r3, r3
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	da03      	bge.n	800e1fa <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	709a      	strb	r2, [r3, #2]
 800e1f8:	e002      	b.n	800e200 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	1cd8      	adds	r0, r3, #3
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e20a:	3308      	adds	r3, #8
 800e20c:	2208      	movs	r2, #8
 800e20e:	4619      	mov	r1, r3
 800e210:	f008 f940 	bl	8016494 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f103 000c 	add.w	r0, r3, #12
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e220:	3310      	adds	r3, #16
 800e222:	2210      	movs	r2, #16
 800e224:	4619      	mov	r1, r3
 800e226:	f008 f935 	bl	8016494 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	331d      	adds	r3, #29
 800e22e:	693a      	ldr	r2, [r7, #16]
 800e230:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800e234:	3220      	adds	r2, #32
 800e236:	6812      	ldr	r2, [r2, #0]
 800e238:	601a      	str	r2, [r3, #0]
      break;
 800e23a:	bf00      	nop
  }

  return error;
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3718      	adds	r7, #24
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b086      	sub	sp, #24
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	60f8      	str	r0, [r7, #12]
 800e24e:	460b      	mov	r3, r1
 800e250:	607a      	str	r2, [r7, #4]
 800e252:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e254:	2302      	movs	r3, #2
 800e256:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e25e:	69db      	ldr	r3, [r3, #28]
 800e260:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d002      	beq.n	800e272 <USBH_MSC_SCSI_RequestSense+0x2c>
 800e26c:	2b02      	cmp	r3, #2
 800e26e:	d03d      	beq.n	800e2ec <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800e270:	e05d      	b.n	800e32e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	220e      	movs	r2, #14
 800e276:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	2280      	movs	r2, #128	; 0x80
 800e27c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	220a      	movs	r2, #10
 800e284:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	3363      	adds	r3, #99	; 0x63
 800e28c:	2210      	movs	r2, #16
 800e28e:	2100      	movs	r1, #0
 800e290:	4618      	mov	r0, r3
 800e292:	f008 f90d 	bl	80164b0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	2203      	movs	r2, #3
 800e29a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800e29e:	7afb      	ldrb	r3, [r7, #11]
 800e2a0:	015b      	lsls	r3, r3, #5
 800e2a2:	b2da      	uxtb	r2, r3
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	220e      	movs	r2, #14
 800e2be:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	2202      	movs	r2, #2
 800e2d6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	f103 0210 	add.w	r2, r3, #16
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	75fb      	strb	r3, [r7, #23]
      break;
 800e2ea:	e020      	b.n	800e32e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e2ec:	7afb      	ldrb	r3, [r7, #11]
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f7ff fb7b 	bl	800d9ec <USBH_MSC_BOT_Process>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800e2fa:	7dfb      	ldrb	r3, [r7, #23]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d115      	bne.n	800e32c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e306:	3302      	adds	r3, #2
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	f003 030f 	and.w	r3, r3, #15
 800e30e:	b2da      	uxtb	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e31a:	7b1a      	ldrb	r2, [r3, #12]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e326:	7b5a      	ldrb	r2, [r3, #13]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	709a      	strb	r2, [r3, #2]
      break;
 800e32c:	bf00      	nop
  }

  return error;
 800e32e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e330:	4618      	mov	r0, r3
 800e332:	3718      	adds	r7, #24
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}

0800e338 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b086      	sub	sp, #24
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	607a      	str	r2, [r7, #4]
 800e342:	603b      	str	r3, [r7, #0]
 800e344:	460b      	mov	r3, r1
 800e346:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e348:	2302      	movs	r3, #2
 800e34a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e352:	69db      	ldr	r3, [r3, #28]
 800e354:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d002      	beq.n	800e366 <USBH_MSC_SCSI_Write+0x2e>
 800e360:	2b02      	cmp	r3, #2
 800e362:	d047      	beq.n	800e3f4 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800e364:	e04e      	b.n	800e404 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800e36c:	461a      	mov	r2, r3
 800e36e:	6a3b      	ldr	r3, [r7, #32]
 800e370:	fb03 f202 	mul.w	r2, r3, r2
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	2200      	movs	r2, #0
 800e37c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	220a      	movs	r2, #10
 800e384:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	3363      	adds	r3, #99	; 0x63
 800e38c:	2210      	movs	r2, #16
 800e38e:	2100      	movs	r1, #0
 800e390:	4618      	mov	r0, r3
 800e392:	f008 f88d 	bl	80164b0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	222a      	movs	r2, #42	; 0x2a
 800e39a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800e39e:	79fa      	ldrb	r2, [r7, #7]
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800e3a6:	79ba      	ldrb	r2, [r7, #6]
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800e3ae:	797a      	ldrb	r2, [r7, #5]
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800e3b6:	1d3b      	adds	r3, r7, #4
 800e3b8:	781a      	ldrb	r2, [r3, #0]
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800e3c0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800e3ca:	f107 0320 	add.w	r3, r7, #32
 800e3ce:	781a      	ldrb	r2, [r3, #0]
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	2202      	movs	r2, #2
 800e3e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	683a      	ldr	r2, [r7, #0]
 800e3ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	75fb      	strb	r3, [r7, #23]
      break;
 800e3f2:	e007      	b.n	800e404 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e3f4:	7afb      	ldrb	r3, [r7, #11]
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f7ff faf7 	bl	800d9ec <USBH_MSC_BOT_Process>
 800e3fe:	4603      	mov	r3, r0
 800e400:	75fb      	strb	r3, [r7, #23]
      break;
 800e402:	bf00      	nop
  }

  return error;
 800e404:	7dfb      	ldrb	r3, [r7, #23]
}
 800e406:	4618      	mov	r0, r3
 800e408:	3718      	adds	r7, #24
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}

0800e40e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800e40e:	b580      	push	{r7, lr}
 800e410:	b086      	sub	sp, #24
 800e412:	af00      	add	r7, sp, #0
 800e414:	60f8      	str	r0, [r7, #12]
 800e416:	607a      	str	r2, [r7, #4]
 800e418:	603b      	str	r3, [r7, #0]
 800e41a:	460b      	mov	r3, r1
 800e41c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e41e:	2302      	movs	r3, #2
 800e420:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e428:	69db      	ldr	r3, [r3, #28]
 800e42a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e432:	2b01      	cmp	r3, #1
 800e434:	d002      	beq.n	800e43c <USBH_MSC_SCSI_Read+0x2e>
 800e436:	2b02      	cmp	r3, #2
 800e438:	d047      	beq.n	800e4ca <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800e43a:	e04e      	b.n	800e4da <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800e442:	461a      	mov	r2, r3
 800e444:	6a3b      	ldr	r3, [r7, #32]
 800e446:	fb03 f202 	mul.w	r2, r3, r2
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	2280      	movs	r2, #128	; 0x80
 800e452:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	220a      	movs	r2, #10
 800e45a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	3363      	adds	r3, #99	; 0x63
 800e462:	2210      	movs	r2, #16
 800e464:	2100      	movs	r1, #0
 800e466:	4618      	mov	r0, r3
 800e468:	f008 f822 	bl	80164b0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	2228      	movs	r2, #40	; 0x28
 800e470:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800e474:	79fa      	ldrb	r2, [r7, #7]
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800e47c:	79ba      	ldrb	r2, [r7, #6]
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800e484:	797a      	ldrb	r2, [r7, #5]
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800e48c:	1d3b      	adds	r3, r7, #4
 800e48e:	781a      	ldrb	r2, [r3, #0]
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800e496:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800e4a0:	f107 0320 	add.w	r3, r7, #32
 800e4a4:	781a      	ldrb	r2, [r3, #0]
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	2202      	movs	r2, #2
 800e4b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	683a      	ldr	r2, [r7, #0]
 800e4c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	75fb      	strb	r3, [r7, #23]
      break;
 800e4c8:	e007      	b.n	800e4da <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e4ca:	7afb      	ldrb	r3, [r7, #11]
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f7ff fa8c 	bl	800d9ec <USBH_MSC_BOT_Process>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	75fb      	strb	r3, [r7, #23]
      break;
 800e4d8:	bf00      	nop
  }

  return error;
 800e4da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3718      	adds	r7, #24
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e4e4:	b5b0      	push	{r4, r5, r7, lr}
 800e4e6:	b090      	sub	sp, #64	; 0x40
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d101      	bne.n	800e4fc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e4f8:	2302      	movs	r3, #2
 800e4fa:	e04d      	b.n	800e598 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	79fa      	ldrb	r2, [r7, #7]
 800e500:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2200      	movs	r2, #0
 800e508:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2200      	movs	r2, #0
 800e510:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e514:	68f8      	ldr	r0, [r7, #12]
 800e516:	f000 f847 	bl	800e5a8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2200      	movs	r2, #0
 800e51e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2200      	movs	r2, #0
 800e526:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2200      	movs	r2, #0
 800e52e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2200      	movs	r2, #0
 800e536:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d003      	beq.n	800e548 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	68ba      	ldr	r2, [r7, #8]
 800e544:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800e548:	4b15      	ldr	r3, [pc, #84]	; (800e5a0 <USBH_Init+0xbc>)
 800e54a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e54e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800e554:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e558:	2100      	movs	r1, #0
 800e55a:	4618      	mov	r0, r3
 800e55c:	f004 fe59 	bl	8013212 <osMessageCreate>
 800e560:	4602      	mov	r2, r0
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800e568:	4b0e      	ldr	r3, [pc, #56]	; (800e5a4 <USBH_Init+0xc0>)
 800e56a:	f107 0414 	add.w	r4, r7, #20
 800e56e:	461d      	mov	r5, r3
 800e570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800e57c:	f107 0314 	add.w	r3, r7, #20
 800e580:	68f9      	ldr	r1, [r7, #12]
 800e582:	4618      	mov	r0, r3
 800e584:	f004 fd1b 	bl	8012fbe <osThreadCreate>
 800e588:	4602      	mov	r2, r0
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e590:	68f8      	ldr	r0, [r7, #12]
 800e592:	f007 fc29 	bl	8015de8 <USBH_LL_Init>

  return USBH_OK;
 800e596:	2300      	movs	r3, #0
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3740      	adds	r7, #64	; 0x40
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bdb0      	pop	{r4, r5, r7, pc}
 800e5a0:	0801ac34 	.word	0x0801ac34
 800e5a4:	0801ac44 	.word	0x0801ac44

0800e5a8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	60fb      	str	r3, [r7, #12]
 800e5b8:	e008      	b.n	800e5cc <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	68fa      	ldr	r2, [r7, #12]
 800e5be:	32e0      	adds	r2, #224	; 0xe0
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	60fb      	str	r3, [r7, #12]
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2b0e      	cmp	r3, #14
 800e5d0:	d9f3      	bls.n	800e5ba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	60fb      	str	r3, [r7, #12]
 800e5d6:	e009      	b.n	800e5ec <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	4413      	add	r3, r2
 800e5de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	60fb      	str	r3, [r7, #12]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5f2:	d3f1      	bcc.n	800e5d8 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2201      	movs	r2, #1
 800e604:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2200      	movs	r2, #0
 800e60a:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2201      	movs	r2, #1
 800e612:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2240      	movs	r2, #64	; 0x40
 800e618:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2200      	movs	r2, #0
 800e61e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2200      	movs	r2, #0
 800e624:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2201      	movs	r2, #1
 800e62c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800e630:	2300      	movs	r3, #0
}
 800e632:	4618      	mov	r0, r3
 800e634:	3714      	adds	r7, #20
 800e636:	46bd      	mov	sp, r7
 800e638:	bc80      	pop	{r7}
 800e63a:	4770      	bx	lr

0800e63c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d017      	beq.n	800e680 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e656:	2b00      	cmp	r3, #0
 800e658:	d10f      	bne.n	800e67a <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e660:	1c59      	adds	r1, r3, #1
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	33dc      	adds	r3, #220	; 0xdc
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	4413      	add	r3, r2
 800e670:	683a      	ldr	r2, [r7, #0]
 800e672:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800e674:	2300      	movs	r3, #0
 800e676:	73fb      	strb	r3, [r7, #15]
 800e678:	e004      	b.n	800e684 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e67a:	2302      	movs	r3, #2
 800e67c:	73fb      	strb	r3, [r7, #15]
 800e67e:	e001      	b.n	800e684 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e680:	2302      	movs	r3, #2
 800e682:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e684:	7bfb      	ldrb	r3, [r7, #15]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3714      	adds	r7, #20
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bc80      	pop	{r7}
 800e68e:	4770      	bx	lr

0800e690 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e690:	b480      	push	{r7}
 800e692:	b085      	sub	sp, #20
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	460b      	mov	r3, r1
 800e69a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e69c:	2300      	movs	r3, #0
 800e69e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800e6a6:	78fa      	ldrb	r2, [r7, #3]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d204      	bcs.n	800e6b6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	78fa      	ldrb	r2, [r7, #3]
 800e6b0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800e6b4:	e001      	b.n	800e6ba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e6b6:	2302      	movs	r3, #2
 800e6b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3714      	adds	r7, #20
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bc80      	pop	{r7}
 800e6c4:	4770      	bx	lr

0800e6c6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e6c6:	b480      	push	{r7}
 800e6c8:	b087      	sub	sp, #28
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
 800e6ce:	4608      	mov	r0, r1
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	70fb      	strb	r3, [r7, #3]
 800e6d8:	460b      	mov	r3, r1
 800e6da:	70bb      	strb	r3, [r7, #2]
 800e6dc:	4613      	mov	r3, r2
 800e6de:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f203 3336 	addw	r3, r3, #822	; 0x336
 800e6ee:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e6f0:	e025      	b.n	800e73e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e6f2:	7dfb      	ldrb	r3, [r7, #23]
 800e6f4:	221a      	movs	r2, #26
 800e6f6:	fb02 f303 	mul.w	r3, r2, r3
 800e6fa:	3308      	adds	r3, #8
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	4413      	add	r3, r2
 800e700:	3302      	adds	r3, #2
 800e702:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	795b      	ldrb	r3, [r3, #5]
 800e708:	78fa      	ldrb	r2, [r7, #3]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d002      	beq.n	800e714 <USBH_FindInterface+0x4e>
 800e70e:	78fb      	ldrb	r3, [r7, #3]
 800e710:	2bff      	cmp	r3, #255	; 0xff
 800e712:	d111      	bne.n	800e738 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e718:	78ba      	ldrb	r2, [r7, #2]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d002      	beq.n	800e724 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e71e:	78bb      	ldrb	r3, [r7, #2]
 800e720:	2bff      	cmp	r3, #255	; 0xff
 800e722:	d109      	bne.n	800e738 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e728:	787a      	ldrb	r2, [r7, #1]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d002      	beq.n	800e734 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e72e:	787b      	ldrb	r3, [r7, #1]
 800e730:	2bff      	cmp	r3, #255	; 0xff
 800e732:	d101      	bne.n	800e738 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e734:	7dfb      	ldrb	r3, [r7, #23]
 800e736:	e006      	b.n	800e746 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e738:	7dfb      	ldrb	r3, [r7, #23]
 800e73a:	3301      	adds	r3, #1
 800e73c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e73e:	7dfb      	ldrb	r3, [r7, #23]
 800e740:	2b01      	cmp	r3, #1
 800e742:	d9d6      	bls.n	800e6f2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e744:	23ff      	movs	r3, #255	; 0xff
}
 800e746:	4618      	mov	r0, r3
 800e748:	371c      	adds	r7, #28
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bc80      	pop	{r7}
 800e74e:	4770      	bx	lr

0800e750 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f007 fb81 	bl	8015e60 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e75e:	2101      	movs	r1, #1
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f007 fc9a 	bl	801609a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e766:	2300      	movs	r3, #0
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3708      	adds	r7, #8
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}

0800e770 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b088      	sub	sp, #32
 800e774:	af04      	add	r7, sp, #16
 800e776:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e778:	2302      	movs	r3, #2
 800e77a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e77c:	2300      	movs	r3, #0
 800e77e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e786:	b2db      	uxtb	r3, r3
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d102      	bne.n	800e792 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2203      	movs	r2, #3
 800e790:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	b2db      	uxtb	r3, r3
 800e798:	2b0b      	cmp	r3, #11
 800e79a:	f200 81e4 	bhi.w	800eb66 <USBH_Process+0x3f6>
 800e79e:	a201      	add	r2, pc, #4	; (adr r2, 800e7a4 <USBH_Process+0x34>)
 800e7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a4:	0800e7d5 	.word	0x0800e7d5
 800e7a8:	0800e813 	.word	0x0800e813
 800e7ac:	0800e827 	.word	0x0800e827
 800e7b0:	0800eae5 	.word	0x0800eae5
 800e7b4:	0800eb67 	.word	0x0800eb67
 800e7b8:	0800e8e7 	.word	0x0800e8e7
 800e7bc:	0800ea7f 	.word	0x0800ea7f
 800e7c0:	0800e917 	.word	0x0800e917
 800e7c4:	0800e953 	.word	0x0800e953
 800e7c8:	0800e98d 	.word	0x0800e98d
 800e7cc:	0800e9d5 	.word	0x0800e9d5
 800e7d0:	0800eacd 	.word	0x0800eacd
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f000 81c4 	beq.w	800eb6a <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e7e8:	20c8      	movs	r0, #200	; 0xc8
 800e7ea:	f007 fccb 	bl	8016184 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f007 fb93 	bl	8015f1a <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e808:	2200      	movs	r2, #0
 800e80a:	4619      	mov	r1, r3
 800e80c:	f004 fd2a 	bl	8013264 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e810:	e1ab      	b.n	800eb6a <USBH_Process+0x3fa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e818:	2b01      	cmp	r3, #1
 800e81a:	f040 81a8 	bne.w	800eb6e <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2202      	movs	r2, #2
 800e822:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e824:	e1a3      	b.n	800eb6e <USBH_Process+0x3fe>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d005      	beq.n	800e83c <USBH_Process+0xcc>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e836:	2104      	movs	r1, #4
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e83c:	2064      	movs	r0, #100	; 0x64
 800e83e:	f007 fca1 	bl	8016184 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f007 fb42 	bl	8015ecc <USBH_LL_GetSpeed>
 800e848:	4603      	mov	r3, r0
 800e84a:	461a      	mov	r2, r3
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2205      	movs	r2, #5
 800e856:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e858:	2100      	movs	r1, #0
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f001 fa1f 	bl	800fc9e <USBH_AllocPipe>
 800e860:	4603      	mov	r3, r0
 800e862:	461a      	mov	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e868:	2180      	movs	r1, #128	; 0x80
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f001 fa17 	bl	800fc9e <USBH_AllocPipe>
 800e870:	4603      	mov	r3, r0
 800e872:	461a      	mov	r2, r3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	7919      	ldrb	r1, [r3, #4]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800e88c:	b292      	uxth	r2, r2
 800e88e:	9202      	str	r2, [sp, #8]
 800e890:	2200      	movs	r2, #0
 800e892:	9201      	str	r2, [sp, #4]
 800e894:	9300      	str	r3, [sp, #0]
 800e896:	4603      	mov	r3, r0
 800e898:	2280      	movs	r2, #128	; 0x80
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f001 f9d0 	bl	800fc40 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	7959      	ldrb	r1, [r3, #5]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800e8b4:	b292      	uxth	r2, r2
 800e8b6:	9202      	str	r2, [sp, #8]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	9201      	str	r2, [sp, #4]
 800e8bc:	9300      	str	r3, [sp, #0]
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f001 f9bc 	bl	800fc40 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e8dc:	2200      	movs	r2, #0
 800e8de:	4619      	mov	r1, r3
 800e8e0:	f004 fcc0 	bl	8013264 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e8e4:	e14c      	b.n	800eb80 <USBH_Process+0x410>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 f950 	bl	800eb8c <USBH_HandleEnum>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f040 813f 	bne.w	800eb72 <USBH_Process+0x402>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e902:	2b01      	cmp	r3, #1
 800e904:	d103      	bne.n	800e90e <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2208      	movs	r2, #8
 800e90a:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 800e90c:	e131      	b.n	800eb72 <USBH_Process+0x402>
          phost->gState = HOST_INPUT;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2207      	movs	r2, #7
 800e912:	701a      	strb	r2, [r3, #0]
      break;
 800e914:	e12d      	b.n	800eb72 <USBH_Process+0x402>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f000 812a 	beq.w	800eb76 <USBH_Process+0x406>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e928:	2101      	movs	r1, #1
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2208      	movs	r2, #8
 800e932:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2205      	movs	r2, #5
 800e938:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e948:	2200      	movs	r2, #0
 800e94a:	4619      	mov	r1, r3
 800e94c:	f004 fc8a 	bl	8013264 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e950:	e111      	b.n	800eb76 <USBH_Process+0x406>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800e958:	b29b      	uxth	r3, r3
 800e95a:	4619      	mov	r1, r3
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 fc19 	bl	800f194 <USBH_SetCfg>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d102      	bne.n	800e96e <USBH_Process+0x1fe>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2209      	movs	r2, #9
 800e96c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2201      	movs	r2, #1
 800e972:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e982:	2200      	movs	r2, #0
 800e984:	4619      	mov	r1, r3
 800e986:	f004 fc6d 	bl	8013264 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e98a:	e0f9      	b.n	800eb80 <USBH_Process+0x410>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e992:	f003 0320 	and.w	r3, r3, #32
 800e996:	2b00      	cmp	r3, #0
 800e998:	d00a      	beq.n	800e9b0 <USBH_Process+0x240>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e99a:	2101      	movs	r1, #1
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 fc1c 	bl	800f1da <USBH_SetFeature>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d106      	bne.n	800e9b6 <USBH_Process+0x246>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	220a      	movs	r2, #10
 800e9ac:	701a      	strb	r2, [r3, #0]
 800e9ae:	e002      	b.n	800e9b6 <USBH_Process+0x246>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	220a      	movs	r2, #10
 800e9b4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	f004 fc49 	bl	8013264 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e9d2:	e0d5      	b.n	800eb80 <USBH_Process+0x410>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d040      	beq.n	800ea60 <USBH_Process+0x2f0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	73fb      	strb	r3, [r7, #15]
 800e9ea:	e017      	b.n	800ea1c <USBH_Process+0x2ac>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e9ec:	7bfb      	ldrb	r3, [r7, #15]
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	33dc      	adds	r3, #220	; 0xdc
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	4413      	add	r3, r2
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	791a      	ldrb	r2, [r3, #4]
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d108      	bne.n	800ea16 <USBH_Process+0x2a6>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ea04:	7bfb      	ldrb	r3, [r7, #15]
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	33dc      	adds	r3, #220	; 0xdc
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	4413      	add	r3, r2
 800ea0e:	685a      	ldr	r2, [r3, #4]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ea16:	7bfb      	ldrb	r3, [r7, #15]
 800ea18:	3301      	adds	r3, #1
 800ea1a:	73fb      	strb	r3, [r7, #15]
 800ea1c:	7bfb      	ldrb	r3, [r7, #15]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d0e4      	beq.n	800e9ec <USBH_Process+0x27c>
          }
        }

        if (phost->pActiveClass != NULL)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d016      	beq.n	800ea5a <USBH_Process+0x2ea>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	4798      	blx	r3
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d109      	bne.n	800ea52 <USBH_Process+0x2e2>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2206      	movs	r2, #6
 800ea42:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800ea4a:	2103      	movs	r1, #3
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	4798      	blx	r3
 800ea50:	e006      	b.n	800ea60 <USBH_Process+0x2f0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	220d      	movs	r2, #13
 800ea56:	701a      	strb	r2, [r3, #0]
 800ea58:	e002      	b.n	800ea60 <USBH_Process+0x2f0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	220d      	movs	r2, #13
 800ea5e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2205      	movs	r2, #5
 800ea64:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ea74:	2200      	movs	r2, #0
 800ea76:	4619      	mov	r1, r3
 800ea78:	f004 fbf4 	bl	8013264 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ea7c:	e080      	b.n	800eb80 <USBH_Process+0x410>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d00f      	beq.n	800eaa8 <USBH_Process+0x338>
      {
        status = phost->pActiveClass->Requests(phost);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ea8e:	691b      	ldr	r3, [r3, #16]
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	4798      	blx	r3
 800ea94:	4603      	mov	r3, r0
 800ea96:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ea98:	7bbb      	ldrb	r3, [r7, #14]
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d16c      	bne.n	800eb7a <USBH_Process+0x40a>
        {
          phost->gState = HOST_CLASS;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	220b      	movs	r2, #11
 800eaa4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800eaa6:	e068      	b.n	800eb7a <USBH_Process+0x40a>
        phost->gState = HOST_ABORT_STATE;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	220d      	movs	r2, #13
 800eaac:	701a      	strb	r2, [r3, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2205      	movs	r2, #5
 800eab2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800eac2:	2200      	movs	r2, #0
 800eac4:	4619      	mov	r1, r3
 800eac6:	f004 fbcd 	bl	8013264 <osMessagePut>
      break;
 800eaca:	e056      	b.n	800eb7a <USBH_Process+0x40a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d053      	beq.n	800eb7e <USBH_Process+0x40e>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800eadc:	695b      	ldr	r3, [r3, #20]
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	4798      	blx	r3
      }
      break;
 800eae2:	e04c      	b.n	800eb7e <USBH_Process+0x40e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2200      	movs	r2, #0
 800eae8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7ff fd5b 	bl	800e5a8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d009      	beq.n	800eb10 <USBH_Process+0x3a0>
      {
        phost->pActiveClass->DeInit(phost);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800eb02:	68db      	ldr	r3, [r3, #12]
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d005      	beq.n	800eb26 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800eb20:	2105      	movs	r1, #5
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d107      	bne.n	800eb42 <USBH_Process+0x3d2>
      {
        phost->device.is_ReEnumerated = 0U;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f7ff fe08 	bl	800e750 <USBH_Start>
 800eb40:	e002      	b.n	800eb48 <USBH_Process+0x3d8>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f007 f98c 	bl	8015e60 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	4619      	mov	r1, r3
 800eb60:	f004 fb80 	bl	8013264 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800eb64:	e00c      	b.n	800eb80 <USBH_Process+0x410>

    case HOST_ABORT_STATE:
    default :
      break;
 800eb66:	bf00      	nop
 800eb68:	e00a      	b.n	800eb80 <USBH_Process+0x410>
      break;
 800eb6a:	bf00      	nop
 800eb6c:	e008      	b.n	800eb80 <USBH_Process+0x410>
      break;
 800eb6e:	bf00      	nop
 800eb70:	e006      	b.n	800eb80 <USBH_Process+0x410>
      break;
 800eb72:	bf00      	nop
 800eb74:	e004      	b.n	800eb80 <USBH_Process+0x410>
    break;
 800eb76:	bf00      	nop
 800eb78:	e002      	b.n	800eb80 <USBH_Process+0x410>
      break;
 800eb7a:	bf00      	nop
 800eb7c:	e000      	b.n	800eb80 <USBH_Process+0x410>
      break;
 800eb7e:	bf00      	nop
  }
  return USBH_OK;
 800eb80:	2300      	movs	r3, #0
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3710      	adds	r7, #16
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop

0800eb8c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b088      	sub	sp, #32
 800eb90:	af04      	add	r7, sp, #16
 800eb92:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800eb94:	2301      	movs	r3, #1
 800eb96:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	785b      	ldrb	r3, [r3, #1]
 800eb9c:	2b07      	cmp	r3, #7
 800eb9e:	f200 8132 	bhi.w	800ee06 <USBH_HandleEnum+0x27a>
 800eba2:	a201      	add	r2, pc, #4	; (adr r2, 800eba8 <USBH_HandleEnum+0x1c>)
 800eba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba8:	0800ebc9 	.word	0x0800ebc9
 800ebac:	0800ec3b 	.word	0x0800ec3b
 800ebb0:	0800ec53 	.word	0x0800ec53
 800ebb4:	0800ecc9 	.word	0x0800ecc9
 800ebb8:	0800ece1 	.word	0x0800ece1
 800ebbc:	0800ecff 	.word	0x0800ecff
 800ebc0:	0800ed6b 	.word	0x0800ed6b
 800ebc4:	0800edbb 	.word	0x0800edbb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800ebc8:	2108      	movs	r1, #8
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 fa12 	bl	800eff4 <USBH_Get_DevDesc>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	f040 8119 	bne.w	800ee0a <USBH_HandleEnum+0x27e>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	7919      	ldrb	r1, [r3, #4]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800ebfc:	b292      	uxth	r2, r2
 800ebfe:	9202      	str	r2, [sp, #8]
 800ec00:	2200      	movs	r2, #0
 800ec02:	9201      	str	r2, [sp, #4]
 800ec04:	9300      	str	r3, [sp, #0]
 800ec06:	4603      	mov	r3, r0
 800ec08:	2280      	movs	r2, #128	; 0x80
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f001 f818 	bl	800fc40 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	7959      	ldrb	r1, [r3, #5]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800ec24:	b292      	uxth	r2, r2
 800ec26:	9202      	str	r2, [sp, #8]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	9201      	str	r2, [sp, #4]
 800ec2c:	9300      	str	r3, [sp, #0]
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2200      	movs	r2, #0
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f001 f804 	bl	800fc40 <USBH_OpenPipe>
      }
      break;
 800ec38:	e0e7      	b.n	800ee0a <USBH_HandleEnum+0x27e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 800ec3a:	2112      	movs	r1, #18
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f000 f9d9 	bl	800eff4 <USBH_Get_DevDesc>
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f040 80e2 	bne.w	800ee0e <USBH_HandleEnum+0x282>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2202      	movs	r2, #2
 800ec4e:	705a      	strb	r2, [r3, #1]

      }
      break;
 800ec50:	e0dd      	b.n	800ee0e <USBH_HandleEnum+0x282>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800ec52:	2101      	movs	r1, #1
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f000 fa79 	bl	800f14c <USBH_SetAddress>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f040 80d8 	bne.w	800ee12 <USBH_HandleEnum+0x286>
      {
        USBH_Delay(2U);
 800ec62:	2002      	movs	r0, #2
 800ec64:	f007 fa8e 	bl	8016184 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2203      	movs	r2, #3
 800ec74:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	7919      	ldrb	r1, [r3, #4]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ec86:	687a      	ldr	r2, [r7, #4]
 800ec88:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800ec8a:	b292      	uxth	r2, r2
 800ec8c:	9202      	str	r2, [sp, #8]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	9201      	str	r2, [sp, #4]
 800ec92:	9300      	str	r3, [sp, #0]
 800ec94:	4603      	mov	r3, r0
 800ec96:	2280      	movs	r2, #128	; 0x80
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f000 ffd1 	bl	800fc40 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	7959      	ldrb	r1, [r3, #5]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800ecb2:	b292      	uxth	r2, r2
 800ecb4:	9202      	str	r2, [sp, #8]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	9201      	str	r2, [sp, #4]
 800ecba:	9300      	str	r3, [sp, #0]
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 ffbd 	bl	800fc40 <USBH_OpenPipe>
      }
      break;
 800ecc6:	e0a4      	b.n	800ee12 <USBH_HandleEnum+0x286>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 800ecc8:	2109      	movs	r1, #9
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 f9ba 	bl	800f044 <USBH_Get_CfgDesc>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f040 809f 	bne.w	800ee16 <USBH_HandleEnum+0x28a>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2204      	movs	r2, #4
 800ecdc:	705a      	strb	r2, [r3, #1]
      }
      break;
 800ecde:	e09a      	b.n	800ee16 <USBH_HandleEnum+0x28a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800ece6:	4619      	mov	r1, r3
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 f9ab 	bl	800f044 <USBH_Get_CfgDesc>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f040 8092 	bne.w	800ee1a <USBH_HandleEnum+0x28e>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2205      	movs	r2, #5
 800ecfa:	705a      	strb	r2, [r3, #1]
      }
      break;
 800ecfc:	e08d      	b.n	800ee1a <USBH_HandleEnum+0x28e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d01e      	beq.n	800ed46 <USBH_HandleEnum+0x1ba>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800ed14:	23ff      	movs	r3, #255	; 0xff
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 f9b8 	bl	800f08c <USBH_Get_StringDesc>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d17d      	bne.n	800ee1e <USBH_HandleEnum+0x292>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2206      	movs	r2, #6
 800ed26:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2205      	movs	r2, #5
 800ed2c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	4619      	mov	r1, r3
 800ed40:	f004 fa90 	bl	8013264 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ed44:	e06b      	b.n	800ee1e <USBH_HandleEnum+0x292>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2206      	movs	r2, #6
 800ed4a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2205      	movs	r2, #5
 800ed50:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ed60:	2200      	movs	r2, #0
 800ed62:	4619      	mov	r1, r3
 800ed64:	f004 fa7e 	bl	8013264 <osMessagePut>
      break;
 800ed68:	e059      	b.n	800ee1e <USBH_HandleEnum+0x292>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d010      	beq.n	800ed96 <USBH_HandleEnum+0x20a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800ed80:	23ff      	movs	r3, #255	; 0xff
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f000 f982 	bl	800f08c <USBH_Get_StringDesc>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d149      	bne.n	800ee22 <USBH_HandleEnum+0x296>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2207      	movs	r2, #7
 800ed92:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ed94:	e045      	b.n	800ee22 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2207      	movs	r2, #7
 800ed9a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2205      	movs	r2, #5
 800eda0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800edb0:	2200      	movs	r2, #0
 800edb2:	4619      	mov	r1, r3
 800edb4:	f004 fa56 	bl	8013264 <osMessagePut>
      break;
 800edb8:	e033      	b.n	800ee22 <USBH_HandleEnum+0x296>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d00f      	beq.n	800ede4 <USBH_HandleEnum+0x258>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800edd0:	23ff      	movs	r3, #255	; 0xff
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f000 f95a 	bl	800f08c <USBH_Get_StringDesc>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d123      	bne.n	800ee26 <USBH_HandleEnum+0x29a>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800edde:	2300      	movs	r3, #0
 800ede0:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ede2:	e020      	b.n	800ee26 <USBH_HandleEnum+0x29a>
        Status = USBH_OK;
 800ede4:	2300      	movs	r3, #0
 800ede6:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2205      	movs	r2, #5
 800edec:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800edfc:	2200      	movs	r2, #0
 800edfe:	4619      	mov	r1, r3
 800ee00:	f004 fa30 	bl	8013264 <osMessagePut>
      break;
 800ee04:	e00f      	b.n	800ee26 <USBH_HandleEnum+0x29a>

    default:
      break;
 800ee06:	bf00      	nop
 800ee08:	e00e      	b.n	800ee28 <USBH_HandleEnum+0x29c>
      break;
 800ee0a:	bf00      	nop
 800ee0c:	e00c      	b.n	800ee28 <USBH_HandleEnum+0x29c>
      break;
 800ee0e:	bf00      	nop
 800ee10:	e00a      	b.n	800ee28 <USBH_HandleEnum+0x29c>
      break;
 800ee12:	bf00      	nop
 800ee14:	e008      	b.n	800ee28 <USBH_HandleEnum+0x29c>
      break;
 800ee16:	bf00      	nop
 800ee18:	e006      	b.n	800ee28 <USBH_HandleEnum+0x29c>
      break;
 800ee1a:	bf00      	nop
 800ee1c:	e004      	b.n	800ee28 <USBH_HandleEnum+0x29c>
      break;
 800ee1e:	bf00      	nop
 800ee20:	e002      	b.n	800ee28 <USBH_HandleEnum+0x29c>
      break;
 800ee22:	bf00      	nop
 800ee24:	e000      	b.n	800ee28 <USBH_HandleEnum+0x29c>
      break;
 800ee26:	bf00      	nop
  }
  return Status;
 800ee28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3710      	adds	r7, #16
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop

0800ee34 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	683a      	ldr	r2, [r7, #0]
 800ee42:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800ee46:	bf00      	nop
 800ee48:	370c      	adds	r7, #12
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bc80      	pop	{r7}
 800ee4e:	4770      	bx	lr

0800ee50 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800ee5e:	1c5a      	adds	r2, r3, #1
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f000 f804 	bl	800ee74 <USBH_HandleSof>
}
 800ee6c:	bf00      	nop
 800ee6e:	3708      	adds	r7, #8
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	2b0b      	cmp	r3, #11
 800ee84:	d10a      	bne.n	800ee9c <USBH_HandleSof+0x28>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d005      	beq.n	800ee9c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ee96:	699b      	ldr	r3, [r3, #24]
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	4798      	blx	r3
  }
}
 800ee9c:	bf00      	nop
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2201      	movs	r2, #1
 800eeb0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800eec8:	2200      	movs	r2, #0
 800eeca:	4619      	mov	r1, r3
 800eecc:	f004 f9ca 	bl	8013264 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800eed0:	bf00      	nop
}
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800eee8:	bf00      	nop
}
 800eeea:	370c      	adds	r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bc80      	pop	{r7}
 800eef0:	4770      	bx	lr

0800eef2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800eef2:	b580      	push	{r7, lr}
 800eef4:	b082      	sub	sp, #8
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2201      	movs	r2, #1
 800eefe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2200      	movs	r2, #0
 800ef06:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2201      	movs	r2, #1
 800ef16:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ef26:	2200      	movs	r2, #0
 800ef28:	4619      	mov	r1, r3
 800ef2a:	f004 f99b 	bl	8013264 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ef2e:	2300      	movs	r3, #0
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3708      	adds	r7, #8
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2201      	movs	r2, #1
 800ef44:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f006 ff9c 	bl	8015e96 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	791b      	ldrb	r3, [r3, #4]
 800ef62:	4619      	mov	r1, r3
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 feba 	bl	800fcde <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	795b      	ldrb	r3, [r3, #5]
 800ef6e:	4619      	mov	r1, r3
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 feb4 	bl	800fcde <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2201      	movs	r2, #1
 800ef7a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	f004 f969 	bl	8013264 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ef92:	2300      	movs	r3, #0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3708      	adds	r7, #8
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b086      	sub	sp, #24
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 800efaa:	f107 030c 	add.w	r3, r7, #12
 800efae:	f04f 32ff 	mov.w	r2, #4294967295
 800efb2:	4618      	mov	r0, r3
 800efb4:	f004 f996 	bl	80132e4 <osMessageGet>
    if (event.status == osEventMessage)
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2b10      	cmp	r3, #16
 800efbc:	d1f2      	bne.n	800efa4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f7ff fbd6 	bl	800e770 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800efc4:	e7ee      	b.n	800efa4 <USBH_Process_OS+0x8>

0800efc6 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b082      	sub	sp, #8
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2201      	movs	r2, #1
 800efd2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800efe2:	2200      	movs	r2, #0
 800efe4:	4619      	mov	r1, r3
 800efe6:	f004 f93d 	bl	8013264 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800efea:	2300      	movs	r3, #0
}
 800efec:	4618      	mov	r0, r3
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b086      	sub	sp, #24
 800eff8:	af02      	add	r7, sp, #8
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	460b      	mov	r3, r1
 800effe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f006:	78fb      	ldrb	r3, [r7, #3]
 800f008:	b29b      	uxth	r3, r3
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	4613      	mov	r3, r2
 800f00e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f012:	2100      	movs	r1, #0
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 f864 	bl	800f0e2 <USBH_GetDescriptor>
 800f01a:	4603      	mov	r3, r0
 800f01c:	73fb      	strb	r3, [r7, #15]
 800f01e:	7bfb      	ldrb	r3, [r7, #15]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d10a      	bne.n	800f03a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f503 7049 	add.w	r0, r3, #804	; 0x324
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f030:	78fa      	ldrb	r2, [r7, #3]
 800f032:	b292      	uxth	r2, r2
 800f034:	4619      	mov	r1, r3
 800f036:	f000 f918 	bl	800f26a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f044:	b580      	push	{r7, lr}
 800f046:	b086      	sub	sp, #24
 800f048:	af02      	add	r7, sp, #8
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	460b      	mov	r3, r1
 800f04e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	331c      	adds	r3, #28
 800f054:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f056:	887b      	ldrh	r3, [r7, #2]
 800f058:	9300      	str	r3, [sp, #0]
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f060:	2100      	movs	r1, #0
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f000 f83d 	bl	800f0e2 <USBH_GetDescriptor>
 800f068:	4603      	mov	r3, r0
 800f06a:	72fb      	strb	r3, [r7, #11]
 800f06c:	7afb      	ldrb	r3, [r7, #11]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d107      	bne.n	800f082 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f203 3336 	addw	r3, r3, #822	; 0x336
 800f078:	887a      	ldrh	r2, [r7, #2]
 800f07a:	68f9      	ldr	r1, [r7, #12]
 800f07c:	4618      	mov	r0, r3
 800f07e:	f000 f963 	bl	800f348 <USBH_ParseCfgDesc>
  }

  return status;
 800f082:	7afb      	ldrb	r3, [r7, #11]
}
 800f084:	4618      	mov	r0, r3
 800f086:	3710      	adds	r7, #16
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}

0800f08c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b088      	sub	sp, #32
 800f090:	af02      	add	r7, sp, #8
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	607a      	str	r2, [r7, #4]
 800f096:	461a      	mov	r2, r3
 800f098:	460b      	mov	r3, r1
 800f09a:	72fb      	strb	r3, [r7, #11]
 800f09c:	4613      	mov	r3, r2
 800f09e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f0a0:	7afb      	ldrb	r3, [r7, #11]
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f0a8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f0b0:	893b      	ldrh	r3, [r7, #8]
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	2100      	movs	r1, #0
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f000 f812 	bl	800f0e2 <USBH_GetDescriptor>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	75fb      	strb	r3, [r7, #23]
 800f0c2:	7dfb      	ldrb	r3, [r7, #23]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d107      	bne.n	800f0d8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f0ce:	893a      	ldrh	r2, [r7, #8]
 800f0d0:	6879      	ldr	r1, [r7, #4]
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 fa34 	bl	800f540 <USBH_ParseStringDesc>
  }

  return status;
 800f0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3718      	adds	r7, #24
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b084      	sub	sp, #16
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	60f8      	str	r0, [r7, #12]
 800f0ea:	607b      	str	r3, [r7, #4]
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	72fb      	strb	r3, [r7, #11]
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	789b      	ldrb	r3, [r3, #2]
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d11c      	bne.n	800f136 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f0fc:	7afb      	ldrb	r3, [r7, #11]
 800f0fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f102:	b2da      	uxtb	r2, r3
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2206      	movs	r2, #6
 800f10c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	893a      	ldrh	r2, [r7, #8]
 800f112:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f114:	893b      	ldrh	r3, [r7, #8]
 800f116:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f11a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f11e:	d104      	bne.n	800f12a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f240 4209 	movw	r2, #1033	; 0x409
 800f126:	829a      	strh	r2, [r3, #20]
 800f128:	e002      	b.n	800f130 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2200      	movs	r2, #0
 800f12e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	8b3a      	ldrh	r2, [r7, #24]
 800f134:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f136:	8b3b      	ldrh	r3, [r7, #24]
 800f138:	461a      	mov	r2, r3
 800f13a:	6879      	ldr	r1, [r7, #4]
 800f13c:	68f8      	ldr	r0, [r7, #12]
 800f13e:	f000 fa4b 	bl	800f5d8 <USBH_CtlReq>
 800f142:	4603      	mov	r3, r0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3710      	adds	r7, #16
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	460b      	mov	r3, r1
 800f156:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	789b      	ldrb	r3, [r3, #2]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d10f      	bne.n	800f180 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2205      	movs	r2, #5
 800f16a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f16c:	78fb      	ldrb	r3, [r7, #3]
 800f16e:	b29a      	uxth	r2, r3
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2200      	movs	r2, #0
 800f178:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2200      	movs	r2, #0
 800f17e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f180:	2200      	movs	r2, #0
 800f182:	2100      	movs	r1, #0
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f000 fa27 	bl	800f5d8 <USBH_CtlReq>
 800f18a:	4603      	mov	r3, r0
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	460b      	mov	r3, r1
 800f19e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	789b      	ldrb	r3, [r3, #2]
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d10e      	bne.n	800f1c6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2209      	movs	r2, #9
 800f1b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	887a      	ldrh	r2, [r7, #2]
 800f1b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f000 fa04 	bl	800f5d8 <USBH_CtlReq>
 800f1d0:	4603      	mov	r3, r0
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3708      	adds	r7, #8
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b082      	sub	sp, #8
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6078      	str	r0, [r7, #4]
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	789b      	ldrb	r3, [r3, #2]
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d10f      	bne.n	800f20e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2203      	movs	r2, #3
 800f1f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f1fa:	78fb      	ldrb	r3, [r7, #3]
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2200      	movs	r2, #0
 800f206:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2200      	movs	r2, #0
 800f20c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f20e:	2200      	movs	r2, #0
 800f210:	2100      	movs	r1, #0
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 f9e0 	bl	800f5d8 <USBH_CtlReq>
 800f218:	4603      	mov	r3, r0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b082      	sub	sp, #8
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
 800f22a:	460b      	mov	r3, r1
 800f22c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	789b      	ldrb	r3, [r3, #2]
 800f232:	2b01      	cmp	r3, #1
 800f234:	d10f      	bne.n	800f256 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2202      	movs	r2, #2
 800f23a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2201      	movs	r2, #1
 800f240:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2200      	movs	r2, #0
 800f246:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f248:	78fb      	ldrb	r3, [r7, #3]
 800f24a:	b29a      	uxth	r2, r3
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f256:	2200      	movs	r2, #0
 800f258:	2100      	movs	r1, #0
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f000 f9bc 	bl	800f5d8 <USBH_CtlReq>
 800f260:	4603      	mov	r3, r0
}
 800f262:	4618      	mov	r0, r3
 800f264:	3708      	adds	r7, #8
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}

0800f26a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f26a:	b480      	push	{r7}
 800f26c:	b085      	sub	sp, #20
 800f26e:	af00      	add	r7, sp, #0
 800f270:	60f8      	str	r0, [r7, #12]
 800f272:	60b9      	str	r1, [r7, #8]
 800f274:	4613      	mov	r3, r2
 800f276:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	781a      	ldrb	r2, [r3, #0]
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	785a      	ldrb	r2, [r3, #1]
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	3302      	adds	r3, #2
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	b29a      	uxth	r2, r3
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	3303      	adds	r3, #3
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	b29b      	uxth	r3, r3
 800f298:	021b      	lsls	r3, r3, #8
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	4313      	orrs	r3, r2
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	791a      	ldrb	r2, [r3, #4]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	795a      	ldrb	r2, [r3, #5]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	799a      	ldrb	r2, [r3, #6]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	79da      	ldrb	r2, [r3, #7]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f2c4:	88fb      	ldrh	r3, [r7, #6]
 800f2c6:	2b08      	cmp	r3, #8
 800f2c8:	d939      	bls.n	800f33e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	3308      	adds	r3, #8
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	b29a      	uxth	r2, r3
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	3309      	adds	r3, #9
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	021b      	lsls	r3, r3, #8
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	330a      	adds	r3, #10
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	330b      	adds	r3, #11
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	021b      	lsls	r3, r3, #8
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	330c      	adds	r3, #12
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	b29a      	uxth	r2, r3
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	330d      	adds	r3, #13
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	b29b      	uxth	r3, r3
 800f312:	021b      	lsls	r3, r3, #8
 800f314:	b29b      	uxth	r3, r3
 800f316:	4313      	orrs	r3, r2
 800f318:	b29a      	uxth	r2, r3
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	7b9a      	ldrb	r2, [r3, #14]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	7bda      	ldrb	r2, [r3, #15]
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	7c1a      	ldrb	r2, [r3, #16]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	7c5a      	ldrb	r2, [r3, #17]
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	745a      	strb	r2, [r3, #17]
  }
}
 800f33e:	bf00      	nop
 800f340:	3714      	adds	r7, #20
 800f342:	46bd      	mov	sp, r7
 800f344:	bc80      	pop	{r7}
 800f346:	4770      	bx	lr

0800f348 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b08a      	sub	sp, #40	; 0x28
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	4613      	mov	r3, r2
 800f354:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f35a:	2300      	movs	r3, #0
 800f35c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f360:	2300      	movs	r3, #0
 800f362:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	781a      	ldrb	r2, [r3, #0]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	785a      	ldrb	r2, [r3, #1]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	3302      	adds	r3, #2
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	b29a      	uxth	r2, r3
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	3303      	adds	r3, #3
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	b29b      	uxth	r3, r3
 800f38a:	021b      	lsls	r3, r3, #8
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	4313      	orrs	r3, r2
 800f390:	b29a      	uxth	r2, r3
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	791a      	ldrb	r2, [r3, #4]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	795a      	ldrb	r2, [r3, #5]
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	799a      	ldrb	r2, [r3, #6]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	79da      	ldrb	r2, [r3, #7]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	7a1a      	ldrb	r2, [r3, #8]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f3be:	88fb      	ldrh	r3, [r7, #6]
 800f3c0:	2b09      	cmp	r3, #9
 800f3c2:	d95f      	bls.n	800f484 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800f3c4:	2309      	movs	r3, #9
 800f3c6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f3cc:	e051      	b.n	800f472 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f3ce:	f107 0316 	add.w	r3, r7, #22
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3d6:	f000 f8e5 	bl	800f5a4 <USBH_GetNextDesc>
 800f3da:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3de:	785b      	ldrb	r3, [r3, #1]
 800f3e0:	2b04      	cmp	r3, #4
 800f3e2:	d146      	bne.n	800f472 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f3e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f3e8:	221a      	movs	r2, #26
 800f3ea:	fb02 f303 	mul.w	r3, r2, r3
 800f3ee:	3308      	adds	r3, #8
 800f3f0:	68fa      	ldr	r2, [r7, #12]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	3302      	adds	r3, #2
 800f3f6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f3f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3fa:	69f8      	ldr	r0, [r7, #28]
 800f3fc:	f000 f846 	bl	800f48c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f400:	2300      	movs	r3, #0
 800f402:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f406:	2300      	movs	r3, #0
 800f408:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f40a:	e022      	b.n	800f452 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f40c:	f107 0316 	add.w	r3, r7, #22
 800f410:	4619      	mov	r1, r3
 800f412:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f414:	f000 f8c6 	bl	800f5a4 <USBH_GetNextDesc>
 800f418:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41c:	785b      	ldrb	r3, [r3, #1]
 800f41e:	2b05      	cmp	r3, #5
 800f420:	d117      	bne.n	800f452 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f422:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f426:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f42a:	3201      	adds	r2, #1
 800f42c:	00d2      	lsls	r2, r2, #3
 800f42e:	211a      	movs	r1, #26
 800f430:	fb01 f303 	mul.w	r3, r1, r3
 800f434:	4413      	add	r3, r2
 800f436:	3308      	adds	r3, #8
 800f438:	68fa      	ldr	r2, [r7, #12]
 800f43a:	4413      	add	r3, r2
 800f43c:	3304      	adds	r3, #4
 800f43e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f442:	69b8      	ldr	r0, [r7, #24]
 800f444:	f000 f850 	bl	800f4e8 <USBH_ParseEPDesc>
            ep_ix++;
 800f448:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f44c:	3301      	adds	r3, #1
 800f44e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	791b      	ldrb	r3, [r3, #4]
 800f456:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d204      	bcs.n	800f468 <USBH_ParseCfgDesc+0x120>
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	885a      	ldrh	r2, [r3, #2]
 800f462:	8afb      	ldrh	r3, [r7, #22]
 800f464:	429a      	cmp	r2, r3
 800f466:	d8d1      	bhi.n	800f40c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f468:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f46c:	3301      	adds	r3, #1
 800f46e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f472:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f476:	2b01      	cmp	r3, #1
 800f478:	d804      	bhi.n	800f484 <USBH_ParseCfgDesc+0x13c>
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	885a      	ldrh	r2, [r3, #2]
 800f47e:	8afb      	ldrh	r3, [r7, #22]
 800f480:	429a      	cmp	r2, r3
 800f482:	d8a4      	bhi.n	800f3ce <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f484:	bf00      	nop
 800f486:	3728      	adds	r7, #40	; 0x28
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	781a      	ldrb	r2, [r3, #0]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	785a      	ldrb	r2, [r3, #1]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	789a      	ldrb	r2, [r3, #2]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	78da      	ldrb	r2, [r3, #3]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	791a      	ldrb	r2, [r3, #4]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	795a      	ldrb	r2, [r3, #5]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	799a      	ldrb	r2, [r3, #6]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	79da      	ldrb	r2, [r3, #7]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	7a1a      	ldrb	r2, [r3, #8]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	721a      	strb	r2, [r3, #8]
}
 800f4de:	bf00      	nop
 800f4e0:	370c      	adds	r7, #12
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bc80      	pop	{r7}
 800f4e6:	4770      	bx	lr

0800f4e8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	781a      	ldrb	r2, [r3, #0]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	785a      	ldrb	r2, [r3, #1]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	789a      	ldrb	r2, [r3, #2]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	78da      	ldrb	r2, [r3, #3]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	3304      	adds	r3, #4
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	b29a      	uxth	r2, r3
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	3305      	adds	r3, #5
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	b29b      	uxth	r3, r3
 800f522:	021b      	lsls	r3, r3, #8
 800f524:	b29b      	uxth	r3, r3
 800f526:	4313      	orrs	r3, r2
 800f528:	b29a      	uxth	r2, r3
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	799a      	ldrb	r2, [r3, #6]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	719a      	strb	r2, [r3, #6]
}
 800f536:	bf00      	nop
 800f538:	370c      	adds	r7, #12
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bc80      	pop	{r7}
 800f53e:	4770      	bx	lr

0800f540 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f540:	b480      	push	{r7}
 800f542:	b087      	sub	sp, #28
 800f544:	af00      	add	r7, sp, #0
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	60b9      	str	r1, [r7, #8]
 800f54a:	4613      	mov	r3, r2
 800f54c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	3301      	adds	r3, #1
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	2b03      	cmp	r3, #3
 800f556:	d120      	bne.n	800f59a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	781b      	ldrb	r3, [r3, #0]
 800f55c:	1e9a      	subs	r2, r3, #2
 800f55e:	88fb      	ldrh	r3, [r7, #6]
 800f560:	4293      	cmp	r3, r2
 800f562:	bf28      	it	cs
 800f564:	4613      	movcs	r3, r2
 800f566:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	3302      	adds	r3, #2
 800f56c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f56e:	2300      	movs	r3, #0
 800f570:	82fb      	strh	r3, [r7, #22]
 800f572:	e00b      	b.n	800f58c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f574:	8afb      	ldrh	r3, [r7, #22]
 800f576:	68fa      	ldr	r2, [r7, #12]
 800f578:	4413      	add	r3, r2
 800f57a:	781a      	ldrb	r2, [r3, #0]
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	3301      	adds	r3, #1
 800f584:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f586:	8afb      	ldrh	r3, [r7, #22]
 800f588:	3302      	adds	r3, #2
 800f58a:	82fb      	strh	r3, [r7, #22]
 800f58c:	8afa      	ldrh	r2, [r7, #22]
 800f58e:	8abb      	ldrh	r3, [r7, #20]
 800f590:	429a      	cmp	r2, r3
 800f592:	d3ef      	bcc.n	800f574 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	2200      	movs	r2, #0
 800f598:	701a      	strb	r2, [r3, #0]
  }
}
 800f59a:	bf00      	nop
 800f59c:	371c      	adds	r7, #28
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bc80      	pop	{r7}
 800f5a2:	4770      	bx	lr

0800f5a4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b085      	sub	sp, #20
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	881a      	ldrh	r2, [r3, #0]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	4413      	add	r3, r2
 800f5ba:	b29a      	uxth	r2, r3
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3714      	adds	r7, #20
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bc80      	pop	{r7}
 800f5d6:	4770      	bx	lr

0800f5d8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b086      	sub	sp, #24
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	789b      	ldrb	r3, [r3, #2]
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d002      	beq.n	800f5f8 <USBH_CtlReq+0x20>
 800f5f2:	2b02      	cmp	r3, #2
 800f5f4:	d01d      	beq.n	800f632 <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 800f5f6:	e042      	b.n	800f67e <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	68ba      	ldr	r2, [r7, #8]
 800f5fc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	88fa      	ldrh	r2, [r7, #6]
 800f602:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2201      	movs	r2, #1
 800f608:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2202      	movs	r2, #2
 800f60e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f610:	2301      	movs	r3, #1
 800f612:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2203      	movs	r2, #3
 800f618:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f628:	2200      	movs	r2, #0
 800f62a:	4619      	mov	r1, r3
 800f62c:	f003 fe1a 	bl	8013264 <osMessagePut>
      break;
 800f630:	e025      	b.n	800f67e <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 800f632:	68f8      	ldr	r0, [r7, #12]
 800f634:	f000 f828 	bl	800f688 <USBH_HandleControl>
 800f638:	4603      	mov	r3, r0
 800f63a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800f63c:	7dfb      	ldrb	r3, [r7, #23]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d108      	bne.n	800f654 <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	2201      	movs	r2, #1
 800f646:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2200      	movs	r2, #0
 800f64c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f64e:	2300      	movs	r3, #0
 800f650:	75fb      	strb	r3, [r7, #23]
      break;
 800f652:	e013      	b.n	800f67c <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 800f654:	7dfb      	ldrb	r3, [r7, #23]
 800f656:	2b03      	cmp	r3, #3
 800f658:	d108      	bne.n	800f66c <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	2201      	movs	r2, #1
 800f65e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2200      	movs	r2, #0
 800f664:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f666:	2303      	movs	r3, #3
 800f668:	75fb      	strb	r3, [r7, #23]
      break;
 800f66a:	e007      	b.n	800f67c <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 800f66c:	7dfb      	ldrb	r3, [r7, #23]
 800f66e:	2b02      	cmp	r3, #2
 800f670:	d104      	bne.n	800f67c <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	2201      	movs	r2, #1
 800f676:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800f678:	2302      	movs	r3, #2
 800f67a:	75fb      	strb	r3, [r7, #23]
      break;
 800f67c:	bf00      	nop
  }
  return status;
 800f67e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f680:	4618      	mov	r0, r3
 800f682:	3718      	adds	r7, #24
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af02      	add	r7, sp, #8
 800f68e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f690:	2301      	movs	r3, #1
 800f692:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f694:	2300      	movs	r3, #0
 800f696:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	7e1b      	ldrb	r3, [r3, #24]
 800f69c:	3b01      	subs	r3, #1
 800f69e:	2b0a      	cmp	r3, #10
 800f6a0:	f200 821d 	bhi.w	800fade <USBH_HandleControl+0x456>
 800f6a4:	a201      	add	r2, pc, #4	; (adr r2, 800f6ac <USBH_HandleControl+0x24>)
 800f6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6aa:	bf00      	nop
 800f6ac:	0800f6d9 	.word	0x0800f6d9
 800f6b0:	0800f6f3 	.word	0x0800f6f3
 800f6b4:	0800f795 	.word	0x0800f795
 800f6b8:	0800f7bb 	.word	0x0800f7bb
 800f6bc:	0800f847 	.word	0x0800f847
 800f6c0:	0800f871 	.word	0x0800f871
 800f6c4:	0800f933 	.word	0x0800f933
 800f6c8:	0800f955 	.word	0x0800f955
 800f6cc:	0800f9e7 	.word	0x0800f9e7
 800f6d0:	0800fa0d 	.word	0x0800fa0d
 800f6d4:	0800fa9f 	.word	0x0800fa9f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f103 0110 	add.w	r1, r3, #16
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	795b      	ldrb	r3, [r3, #5]
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f000 fa0b 	bl	800fb00 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2202      	movs	r2, #2
 800f6ee:	761a      	strb	r2, [r3, #24]
      break;
 800f6f0:	e200      	b.n	800faf4 <USBH_HandleControl+0x46c>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	795b      	ldrb	r3, [r3, #5]
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f006 fcbb 	bl	8016074 <USBH_LL_GetURBState>
 800f6fe:	4603      	mov	r3, r0
 800f700:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f702:	7bbb      	ldrb	r3, [r7, #14]
 800f704:	2b01      	cmp	r3, #1
 800f706:	d12c      	bne.n	800f762 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	7c1b      	ldrb	r3, [r3, #16]
 800f70c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f710:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	8adb      	ldrh	r3, [r3, #22]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00a      	beq.n	800f730 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f71a:	7b7b      	ldrb	r3, [r7, #13]
 800f71c:	2b80      	cmp	r3, #128	; 0x80
 800f71e:	d103      	bne.n	800f728 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2203      	movs	r2, #3
 800f724:	761a      	strb	r2, [r3, #24]
 800f726:	e00d      	b.n	800f744 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2205      	movs	r2, #5
 800f72c:	761a      	strb	r2, [r3, #24]
 800f72e:	e009      	b.n	800f744 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800f730:	7b7b      	ldrb	r3, [r7, #13]
 800f732:	2b80      	cmp	r3, #128	; 0x80
 800f734:	d103      	bne.n	800f73e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2209      	movs	r2, #9
 800f73a:	761a      	strb	r2, [r3, #24]
 800f73c:	e002      	b.n	800f744 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2207      	movs	r2, #7
 800f742:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2203      	movs	r2, #3
 800f748:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f758:	2200      	movs	r2, #0
 800f75a:	4619      	mov	r1, r3
 800f75c:	f003 fd82 	bl	8013264 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f760:	e1bf      	b.n	800fae2 <USBH_HandleControl+0x45a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f762:	7bbb      	ldrb	r3, [r7, #14]
 800f764:	2b04      	cmp	r3, #4
 800f766:	d003      	beq.n	800f770 <USBH_HandleControl+0xe8>
 800f768:	7bbb      	ldrb	r3, [r7, #14]
 800f76a:	2b02      	cmp	r3, #2
 800f76c:	f040 81b9 	bne.w	800fae2 <USBH_HandleControl+0x45a>
          phost->Control.state = CTRL_ERROR;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	220b      	movs	r2, #11
 800f774:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2203      	movs	r2, #3
 800f77a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f78a:	2200      	movs	r2, #0
 800f78c:	4619      	mov	r1, r3
 800f78e:	f003 fd69 	bl	8013264 <osMessagePut>
      break;
 800f792:	e1a6      	b.n	800fae2 <USBH_HandleControl+0x45a>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800f79a:	b29a      	uxth	r2, r3
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6899      	ldr	r1, [r3, #8]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	899a      	ldrh	r2, [r3, #12]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	791b      	ldrb	r3, [r3, #4]
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 f9e6 	bl	800fb7e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2204      	movs	r2, #4
 800f7b6:	761a      	strb	r2, [r3, #24]
      break;
 800f7b8:	e19c      	b.n	800faf4 <USBH_HandleControl+0x46c>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	791b      	ldrb	r3, [r3, #4]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f006 fc57 	bl	8016074 <USBH_LL_GetURBState>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f7ca:	7bbb      	ldrb	r3, [r7, #14]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d110      	bne.n	800f7f2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2209      	movs	r2, #9
 800f7d4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2203      	movs	r2, #3
 800f7da:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	f003 fd39 	bl	8013264 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f7f2:	7bbb      	ldrb	r3, [r7, #14]
 800f7f4:	2b05      	cmp	r3, #5
 800f7f6:	d110      	bne.n	800f81a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f7f8:	2303      	movs	r3, #3
 800f7fa:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2203      	movs	r2, #3
 800f800:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f810:	2200      	movs	r2, #0
 800f812:	4619      	mov	r1, r3
 800f814:	f003 fd26 	bl	8013264 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f818:	e165      	b.n	800fae6 <USBH_HandleControl+0x45e>
        if (URB_Status == USBH_URB_ERROR)
 800f81a:	7bbb      	ldrb	r3, [r7, #14]
 800f81c:	2b04      	cmp	r3, #4
 800f81e:	f040 8162 	bne.w	800fae6 <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	220b      	movs	r2, #11
 800f826:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2203      	movs	r2, #3
 800f82c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f83c:	2200      	movs	r2, #0
 800f83e:	4619      	mov	r1, r3
 800f840:	f003 fd10 	bl	8013264 <osMessagePut>
      break;
 800f844:	e14f      	b.n	800fae6 <USBH_HandleControl+0x45e>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6899      	ldr	r1, [r3, #8]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	899a      	ldrh	r2, [r3, #12]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	795b      	ldrb	r3, [r3, #5]
 800f852:	2001      	movs	r0, #1
 800f854:	9000      	str	r0, [sp, #0]
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 f96c 	bl	800fb34 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800f862:	b29a      	uxth	r2, r3
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2206      	movs	r2, #6
 800f86c:	761a      	strb	r2, [r3, #24]
      break;
 800f86e:	e141      	b.n	800faf4 <USBH_HandleControl+0x46c>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	795b      	ldrb	r3, [r3, #5]
 800f874:	4619      	mov	r1, r3
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f006 fbfc 	bl	8016074 <USBH_LL_GetURBState>
 800f87c:	4603      	mov	r3, r0
 800f87e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f880:	7bbb      	ldrb	r3, [r7, #14]
 800f882:	2b01      	cmp	r3, #1
 800f884:	d111      	bne.n	800f8aa <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2207      	movs	r2, #7
 800f88a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2203      	movs	r2, #3
 800f890:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	f003 fcde 	bl	8013264 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f8a8:	e11f      	b.n	800faea <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_STALL)
 800f8aa:	7bbb      	ldrb	r3, [r7, #14]
 800f8ac:	2b05      	cmp	r3, #5
 800f8ae:	d113      	bne.n	800f8d8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	220c      	movs	r2, #12
 800f8b4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f8b6:	2303      	movs	r3, #3
 800f8b8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2203      	movs	r2, #3
 800f8be:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	f003 fcc7 	bl	8013264 <osMessagePut>
      break;
 800f8d6:	e108      	b.n	800faea <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f8d8:	7bbb      	ldrb	r3, [r7, #14]
 800f8da:	2b02      	cmp	r3, #2
 800f8dc:	d111      	bne.n	800f902 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2205      	movs	r2, #5
 800f8e2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2203      	movs	r2, #3
 800f8e8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	f003 fcb2 	bl	8013264 <osMessagePut>
      break;
 800f900:	e0f3      	b.n	800faea <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 800f902:	7bbb      	ldrb	r3, [r7, #14]
 800f904:	2b04      	cmp	r3, #4
 800f906:	f040 80f0 	bne.w	800faea <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	220b      	movs	r2, #11
 800f90e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f910:	2302      	movs	r3, #2
 800f912:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2203      	movs	r2, #3
 800f918:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f928:	2200      	movs	r2, #0
 800f92a:	4619      	mov	r1, r3
 800f92c:	f003 fc9a 	bl	8013264 <osMessagePut>
      break;
 800f930:	e0db      	b.n	800faea <USBH_HandleControl+0x462>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	791b      	ldrb	r3, [r3, #4]
 800f936:	2200      	movs	r2, #0
 800f938:	2100      	movs	r1, #0
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f000 f91f 	bl	800fb7e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800f946:	b29a      	uxth	r2, r3
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2208      	movs	r2, #8
 800f950:	761a      	strb	r2, [r3, #24]

      break;
 800f952:	e0cf      	b.n	800faf4 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	791b      	ldrb	r3, [r3, #4]
 800f958:	4619      	mov	r1, r3
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f006 fb8a 	bl	8016074 <USBH_LL_GetURBState>
 800f960:	4603      	mov	r3, r0
 800f962:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f964:	7bbb      	ldrb	r3, [r7, #14]
 800f966:	2b01      	cmp	r3, #1
 800f968:	d113      	bne.n	800f992 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	220d      	movs	r2, #13
 800f96e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f970:	2300      	movs	r3, #0
 800f972:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2203      	movs	r2, #3
 800f978:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f988:	2200      	movs	r2, #0
 800f98a:	4619      	mov	r1, r3
 800f98c:	f003 fc6a 	bl	8013264 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f990:	e0ad      	b.n	800faee <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_ERROR)
 800f992:	7bbb      	ldrb	r3, [r7, #14]
 800f994:	2b04      	cmp	r3, #4
 800f996:	d111      	bne.n	800f9bc <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	220b      	movs	r2, #11
 800f99c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2203      	movs	r2, #3
 800f9a2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	f003 fc55 	bl	8013264 <osMessagePut>
      break;
 800f9ba:	e098      	b.n	800faee <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_STALL)
 800f9bc:	7bbb      	ldrb	r3, [r7, #14]
 800f9be:	2b05      	cmp	r3, #5
 800f9c0:	f040 8095 	bne.w	800faee <USBH_HandleControl+0x466>
          status = USBH_NOT_SUPPORTED;
 800f9c4:	2303      	movs	r3, #3
 800f9c6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2203      	movs	r2, #3
 800f9cc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f9dc:	2200      	movs	r2, #0
 800f9de:	4619      	mov	r1, r3
 800f9e0:	f003 fc40 	bl	8013264 <osMessagePut>
      break;
 800f9e4:	e083      	b.n	800faee <USBH_HandleControl+0x466>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	795b      	ldrb	r3, [r3, #5]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	9200      	str	r2, [sp, #0]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 f89e 	bl	800fb34 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	220a      	movs	r2, #10
 800fa08:	761a      	strb	r2, [r3, #24]
      break;
 800fa0a:	e073      	b.n	800faf4 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	795b      	ldrb	r3, [r3, #5]
 800fa10:	4619      	mov	r1, r3
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f006 fb2e 	bl	8016074 <USBH_LL_GetURBState>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fa1c:	7bbb      	ldrb	r3, [r7, #14]
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d113      	bne.n	800fa4a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800fa22:	2300      	movs	r3, #0
 800fa24:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	220d      	movs	r2, #13
 800fa2a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2203      	movs	r2, #3
 800fa30:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800fa40:	2200      	movs	r2, #0
 800fa42:	4619      	mov	r1, r3
 800fa44:	f003 fc0e 	bl	8013264 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fa48:	e053      	b.n	800faf2 <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fa4a:	7bbb      	ldrb	r3, [r7, #14]
 800fa4c:	2b02      	cmp	r3, #2
 800fa4e:	d111      	bne.n	800fa74 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2209      	movs	r2, #9
 800fa54:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2203      	movs	r2, #3
 800fa5a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	f003 fbf9 	bl	8013264 <osMessagePut>
      break;
 800fa72:	e03e      	b.n	800faf2 <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_ERROR)
 800fa74:	7bbb      	ldrb	r3, [r7, #14]
 800fa76:	2b04      	cmp	r3, #4
 800fa78:	d13b      	bne.n	800faf2 <USBH_HandleControl+0x46a>
          phost->Control.state = CTRL_ERROR;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	220b      	movs	r2, #11
 800fa7e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2203      	movs	r2, #3
 800fa84:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800fa94:	2200      	movs	r2, #0
 800fa96:	4619      	mov	r1, r3
 800fa98:	f003 fbe4 	bl	8013264 <osMessagePut>
      break;
 800fa9c:	e029      	b.n	800faf2 <USBH_HandleControl+0x46a>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	7e5b      	ldrb	r3, [r3, #25]
 800faa2:	3301      	adds	r3, #1
 800faa4:	b2da      	uxtb	r2, r3
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	765a      	strb	r2, [r3, #25]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	7e5b      	ldrb	r3, [r3, #25]
 800faae:	2b02      	cmp	r3, #2
 800fab0:	d806      	bhi.n	800fac0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2201      	movs	r2, #1
 800fab6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2201      	movs	r2, #1
 800fabc:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800fabe:	e019      	b.n	800faf4 <USBH_HandleControl+0x46c>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800fac6:	2106      	movs	r1, #6
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2200      	movs	r2, #0
 800fad0:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2200      	movs	r2, #0
 800fad6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800fad8:	2302      	movs	r3, #2
 800fada:	73fb      	strb	r3, [r7, #15]
      break;
 800fadc:	e00a      	b.n	800faf4 <USBH_HandleControl+0x46c>

    default:
      break;
 800fade:	bf00      	nop
 800fae0:	e008      	b.n	800faf4 <USBH_HandleControl+0x46c>
      break;
 800fae2:	bf00      	nop
 800fae4:	e006      	b.n	800faf4 <USBH_HandleControl+0x46c>
      break;
 800fae6:	bf00      	nop
 800fae8:	e004      	b.n	800faf4 <USBH_HandleControl+0x46c>
      break;
 800faea:	bf00      	nop
 800faec:	e002      	b.n	800faf4 <USBH_HandleControl+0x46c>
      break;
 800faee:	bf00      	nop
 800faf0:	e000      	b.n	800faf4 <USBH_HandleControl+0x46c>
      break;
 800faf2:	bf00      	nop
  }

  return status;
 800faf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3710      	adds	r7, #16
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop

0800fb00 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b088      	sub	sp, #32
 800fb04:	af04      	add	r7, sp, #16
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	60b9      	str	r1, [r7, #8]
 800fb0a:	4613      	mov	r3, r2
 800fb0c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fb0e:	79f9      	ldrb	r1, [r7, #7]
 800fb10:	2300      	movs	r3, #0
 800fb12:	9303      	str	r3, [sp, #12]
 800fb14:	2308      	movs	r3, #8
 800fb16:	9302      	str	r3, [sp, #8]
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	9301      	str	r3, [sp, #4]
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	9300      	str	r3, [sp, #0]
 800fb20:	2300      	movs	r3, #0
 800fb22:	2200      	movs	r2, #0
 800fb24:	68f8      	ldr	r0, [r7, #12]
 800fb26:	f006 fa74 	bl	8016012 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800fb2a:	2300      	movs	r3, #0
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3710      	adds	r7, #16
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b088      	sub	sp, #32
 800fb38:	af04      	add	r7, sp, #16
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	4611      	mov	r1, r2
 800fb40:	461a      	mov	r2, r3
 800fb42:	460b      	mov	r3, r1
 800fb44:	80fb      	strh	r3, [r7, #6]
 800fb46:	4613      	mov	r3, r2
 800fb48:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d001      	beq.n	800fb58 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fb54:	2300      	movs	r3, #0
 800fb56:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fb58:	7979      	ldrb	r1, [r7, #5]
 800fb5a:	7e3b      	ldrb	r3, [r7, #24]
 800fb5c:	9303      	str	r3, [sp, #12]
 800fb5e:	88fb      	ldrh	r3, [r7, #6]
 800fb60:	9302      	str	r3, [sp, #8]
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	9301      	str	r3, [sp, #4]
 800fb66:	2301      	movs	r3, #1
 800fb68:	9300      	str	r3, [sp, #0]
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	68f8      	ldr	r0, [r7, #12]
 800fb70:	f006 fa4f 	bl	8016012 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800fb74:	2300      	movs	r3, #0
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3710      	adds	r7, #16
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}

0800fb7e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800fb7e:	b580      	push	{r7, lr}
 800fb80:	b088      	sub	sp, #32
 800fb82:	af04      	add	r7, sp, #16
 800fb84:	60f8      	str	r0, [r7, #12]
 800fb86:	60b9      	str	r1, [r7, #8]
 800fb88:	4611      	mov	r1, r2
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	80fb      	strh	r3, [r7, #6]
 800fb90:	4613      	mov	r3, r2
 800fb92:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fb94:	7979      	ldrb	r1, [r7, #5]
 800fb96:	2300      	movs	r3, #0
 800fb98:	9303      	str	r3, [sp, #12]
 800fb9a:	88fb      	ldrh	r3, [r7, #6]
 800fb9c:	9302      	str	r3, [sp, #8]
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	9301      	str	r3, [sp, #4]
 800fba2:	2301      	movs	r3, #1
 800fba4:	9300      	str	r3, [sp, #0]
 800fba6:	2300      	movs	r3, #0
 800fba8:	2201      	movs	r2, #1
 800fbaa:	68f8      	ldr	r0, [r7, #12]
 800fbac:	f006 fa31 	bl	8016012 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fbb0:	2300      	movs	r3, #0

}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3710      	adds	r7, #16
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}

0800fbba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b088      	sub	sp, #32
 800fbbe:	af04      	add	r7, sp, #16
 800fbc0:	60f8      	str	r0, [r7, #12]
 800fbc2:	60b9      	str	r1, [r7, #8]
 800fbc4:	4611      	mov	r1, r2
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	460b      	mov	r3, r1
 800fbca:	80fb      	strh	r3, [r7, #6]
 800fbcc:	4613      	mov	r3, r2
 800fbce:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d001      	beq.n	800fbde <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fbde:	7979      	ldrb	r1, [r7, #5]
 800fbe0:	7e3b      	ldrb	r3, [r7, #24]
 800fbe2:	9303      	str	r3, [sp, #12]
 800fbe4:	88fb      	ldrh	r3, [r7, #6]
 800fbe6:	9302      	str	r3, [sp, #8]
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	9301      	str	r3, [sp, #4]
 800fbec:	2301      	movs	r3, #1
 800fbee:	9300      	str	r3, [sp, #0]
 800fbf0:	2302      	movs	r3, #2
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	68f8      	ldr	r0, [r7, #12]
 800fbf6:	f006 fa0c 	bl	8016012 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800fbfa:	2300      	movs	r3, #0
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3710      	adds	r7, #16
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b088      	sub	sp, #32
 800fc08:	af04      	add	r7, sp, #16
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	4611      	mov	r1, r2
 800fc10:	461a      	mov	r2, r3
 800fc12:	460b      	mov	r3, r1
 800fc14:	80fb      	strh	r3, [r7, #6]
 800fc16:	4613      	mov	r3, r2
 800fc18:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fc1a:	7979      	ldrb	r1, [r7, #5]
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	9303      	str	r3, [sp, #12]
 800fc20:	88fb      	ldrh	r3, [r7, #6]
 800fc22:	9302      	str	r3, [sp, #8]
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	9301      	str	r3, [sp, #4]
 800fc28:	2301      	movs	r3, #1
 800fc2a:	9300      	str	r3, [sp, #0]
 800fc2c:	2302      	movs	r3, #2
 800fc2e:	2201      	movs	r2, #1
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	f006 f9ee 	bl	8016012 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fc36:	2300      	movs	r3, #0
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3710      	adds	r7, #16
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b086      	sub	sp, #24
 800fc44:	af04      	add	r7, sp, #16
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	4608      	mov	r0, r1
 800fc4a:	4611      	mov	r1, r2
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	4603      	mov	r3, r0
 800fc50:	70fb      	strb	r3, [r7, #3]
 800fc52:	460b      	mov	r3, r1
 800fc54:	70bb      	strb	r3, [r7, #2]
 800fc56:	4613      	mov	r3, r2
 800fc58:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800fc5a:	7878      	ldrb	r0, [r7, #1]
 800fc5c:	78ba      	ldrb	r2, [r7, #2]
 800fc5e:	78f9      	ldrb	r1, [r7, #3]
 800fc60:	8b3b      	ldrh	r3, [r7, #24]
 800fc62:	9302      	str	r3, [sp, #8]
 800fc64:	7d3b      	ldrb	r3, [r7, #20]
 800fc66:	9301      	str	r3, [sp, #4]
 800fc68:	7c3b      	ldrb	r3, [r7, #16]
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f006 f981 	bl	8015f76 <USBH_LL_OpenPipe>

  return USBH_OK;
 800fc74:	2300      	movs	r3, #0
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b082      	sub	sp, #8
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
 800fc86:	460b      	mov	r3, r1
 800fc88:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800fc8a:	78fb      	ldrb	r3, [r7, #3]
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f006 f9a0 	bl	8015fd4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800fc94:	2300      	movs	r3, #0
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3708      	adds	r7, #8
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}

0800fc9e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800fc9e:	b580      	push	{r7, lr}
 800fca0:	b084      	sub	sp, #16
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	6078      	str	r0, [r7, #4]
 800fca6:	460b      	mov	r3, r1
 800fca8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f000 f832 	bl	800fd14 <USBH_GetFreePipe>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800fcb4:	89fb      	ldrh	r3, [r7, #14]
 800fcb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d009      	beq.n	800fcd2 <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800fcbe:	78fb      	ldrb	r3, [r7, #3]
 800fcc0:	89fa      	ldrh	r2, [r7, #14]
 800fcc2:	f002 020f 	and.w	r2, r2, #15
 800fcc6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	32e0      	adds	r2, #224	; 0xe0
 800fcce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800fcd2:	89fb      	ldrh	r3, [r7, #14]
 800fcd4:	b2db      	uxtb	r3, r3
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3710      	adds	r7, #16
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}

0800fcde <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fcde:	b480      	push	{r7}
 800fce0:	b083      	sub	sp, #12
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
 800fce6:	460b      	mov	r3, r1
 800fce8:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800fcea:	78fb      	ldrb	r3, [r7, #3]
 800fcec:	2b0a      	cmp	r3, #10
 800fcee:	d80b      	bhi.n	800fd08 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800fcf0:	78fa      	ldrb	r2, [r7, #3]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	32e0      	adds	r2, #224	; 0xe0
 800fcf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcfa:	78fa      	ldrb	r2, [r7, #3]
 800fcfc:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	32e0      	adds	r2, #224	; 0xe0
 800fd04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	370c      	adds	r7, #12
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bc80      	pop	{r7}
 800fd12:	4770      	bx	lr

0800fd14 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b085      	sub	sp, #20
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800fd20:	2300      	movs	r3, #0
 800fd22:	73fb      	strb	r3, [r7, #15]
 800fd24:	e00e      	b.n	800fd44 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800fd26:	7bfa      	ldrb	r2, [r7, #15]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	32e0      	adds	r2, #224	; 0xe0
 800fd2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d102      	bne.n	800fd3e <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800fd38:	7bfb      	ldrb	r3, [r7, #15]
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	e007      	b.n	800fd4e <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800fd3e:	7bfb      	ldrb	r3, [r7, #15]
 800fd40:	3301      	adds	r3, #1
 800fd42:	73fb      	strb	r3, [r7, #15]
 800fd44:	7bfb      	ldrb	r3, [r7, #15]
 800fd46:	2b0a      	cmp	r3, #10
 800fd48:	d9ed      	bls.n	800fd26 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800fd4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3714      	adds	r7, #20
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bc80      	pop	{r7}
 800fd56:	4770      	bx	lr

0800fd58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b084      	sub	sp, #16
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	4603      	mov	r3, r0
 800fd60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fd62:	79fb      	ldrb	r3, [r7, #7]
 800fd64:	4a08      	ldr	r2, [pc, #32]	; (800fd88 <disk_status+0x30>)
 800fd66:	009b      	lsls	r3, r3, #2
 800fd68:	4413      	add	r3, r2
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	79fa      	ldrb	r2, [r7, #7]
 800fd70:	4905      	ldr	r1, [pc, #20]	; (800fd88 <disk_status+0x30>)
 800fd72:	440a      	add	r2, r1
 800fd74:	7a12      	ldrb	r2, [r2, #8]
 800fd76:	4610      	mov	r0, r2
 800fd78:	4798      	blx	r3
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3710      	adds	r7, #16
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}
 800fd88:	20007ae4 	.word	0x20007ae4

0800fd8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b084      	sub	sp, #16
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	4603      	mov	r3, r0
 800fd94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fd96:	2300      	movs	r3, #0
 800fd98:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800fd9a:	79fb      	ldrb	r3, [r7, #7]
 800fd9c:	4a0d      	ldr	r2, [pc, #52]	; (800fdd4 <disk_initialize+0x48>)
 800fd9e:	5cd3      	ldrb	r3, [r2, r3]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d111      	bne.n	800fdc8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800fda4:	79fb      	ldrb	r3, [r7, #7]
 800fda6:	4a0b      	ldr	r2, [pc, #44]	; (800fdd4 <disk_initialize+0x48>)
 800fda8:	2101      	movs	r1, #1
 800fdaa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fdac:	79fb      	ldrb	r3, [r7, #7]
 800fdae:	4a09      	ldr	r2, [pc, #36]	; (800fdd4 <disk_initialize+0x48>)
 800fdb0:	009b      	lsls	r3, r3, #2
 800fdb2:	4413      	add	r3, r2
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	79fa      	ldrb	r2, [r7, #7]
 800fdba:	4906      	ldr	r1, [pc, #24]	; (800fdd4 <disk_initialize+0x48>)
 800fdbc:	440a      	add	r2, r1
 800fdbe:	7a12      	ldrb	r2, [r2, #8]
 800fdc0:	4610      	mov	r0, r2
 800fdc2:	4798      	blx	r3
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3710      	adds	r7, #16
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	20007ae4 	.word	0x20007ae4

0800fdd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fdd8:	b590      	push	{r4, r7, lr}
 800fdda:	b087      	sub	sp, #28
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	60b9      	str	r1, [r7, #8]
 800fde0:	607a      	str	r2, [r7, #4]
 800fde2:	603b      	str	r3, [r7, #0]
 800fde4:	4603      	mov	r3, r0
 800fde6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fde8:	7bfb      	ldrb	r3, [r7, #15]
 800fdea:	4a0a      	ldr	r2, [pc, #40]	; (800fe14 <disk_read+0x3c>)
 800fdec:	009b      	lsls	r3, r3, #2
 800fdee:	4413      	add	r3, r2
 800fdf0:	685b      	ldr	r3, [r3, #4]
 800fdf2:	689c      	ldr	r4, [r3, #8]
 800fdf4:	7bfb      	ldrb	r3, [r7, #15]
 800fdf6:	4a07      	ldr	r2, [pc, #28]	; (800fe14 <disk_read+0x3c>)
 800fdf8:	4413      	add	r3, r2
 800fdfa:	7a18      	ldrb	r0, [r3, #8]
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	687a      	ldr	r2, [r7, #4]
 800fe00:	68b9      	ldr	r1, [r7, #8]
 800fe02:	47a0      	blx	r4
 800fe04:	4603      	mov	r3, r0
 800fe06:	75fb      	strb	r3, [r7, #23]
  return res;
 800fe08:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	371c      	adds	r7, #28
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd90      	pop	{r4, r7, pc}
 800fe12:	bf00      	nop
 800fe14:	20007ae4 	.word	0x20007ae4

0800fe18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fe18:	b590      	push	{r4, r7, lr}
 800fe1a:	b087      	sub	sp, #28
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60b9      	str	r1, [r7, #8]
 800fe20:	607a      	str	r2, [r7, #4]
 800fe22:	603b      	str	r3, [r7, #0]
 800fe24:	4603      	mov	r3, r0
 800fe26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fe28:	7bfb      	ldrb	r3, [r7, #15]
 800fe2a:	4a0a      	ldr	r2, [pc, #40]	; (800fe54 <disk_write+0x3c>)
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	4413      	add	r3, r2
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	68dc      	ldr	r4, [r3, #12]
 800fe34:	7bfb      	ldrb	r3, [r7, #15]
 800fe36:	4a07      	ldr	r2, [pc, #28]	; (800fe54 <disk_write+0x3c>)
 800fe38:	4413      	add	r3, r2
 800fe3a:	7a18      	ldrb	r0, [r3, #8]
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	68b9      	ldr	r1, [r7, #8]
 800fe42:	47a0      	blx	r4
 800fe44:	4603      	mov	r3, r0
 800fe46:	75fb      	strb	r3, [r7, #23]
  return res;
 800fe48:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	371c      	adds	r7, #28
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd90      	pop	{r4, r7, pc}
 800fe52:	bf00      	nop
 800fe54:	20007ae4 	.word	0x20007ae4

0800fe58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	4603      	mov	r3, r0
 800fe60:	603a      	str	r2, [r7, #0]
 800fe62:	71fb      	strb	r3, [r7, #7]
 800fe64:	460b      	mov	r3, r1
 800fe66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fe68:	79fb      	ldrb	r3, [r7, #7]
 800fe6a:	4a09      	ldr	r2, [pc, #36]	; (800fe90 <disk_ioctl+0x38>)
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	4413      	add	r3, r2
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	691b      	ldr	r3, [r3, #16]
 800fe74:	79fa      	ldrb	r2, [r7, #7]
 800fe76:	4906      	ldr	r1, [pc, #24]	; (800fe90 <disk_ioctl+0x38>)
 800fe78:	440a      	add	r2, r1
 800fe7a:	7a10      	ldrb	r0, [r2, #8]
 800fe7c:	79b9      	ldrb	r1, [r7, #6]
 800fe7e:	683a      	ldr	r2, [r7, #0]
 800fe80:	4798      	blx	r3
 800fe82:	4603      	mov	r3, r0
 800fe84:	73fb      	strb	r3, [r7, #15]
  return res;
 800fe86:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3710      	adds	r7, #16
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}
 800fe90:	20007ae4 	.word	0x20007ae4

0800fe94 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fe94:	b480      	push	{r7}
 800fe96:	b087      	sub	sp, #28
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	60b9      	str	r1, [r7, #8]
 800fe9e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800fea8:	e007      	b.n	800feba <mem_cpy+0x26>
		*d++ = *s++;
 800feaa:	693a      	ldr	r2, [r7, #16]
 800feac:	1c53      	adds	r3, r2, #1
 800feae:	613b      	str	r3, [r7, #16]
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	1c59      	adds	r1, r3, #1
 800feb4:	6179      	str	r1, [r7, #20]
 800feb6:	7812      	ldrb	r2, [r2, #0]
 800feb8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	1e5a      	subs	r2, r3, #1
 800febe:	607a      	str	r2, [r7, #4]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d1f2      	bne.n	800feaa <mem_cpy+0x16>
}
 800fec4:	bf00      	nop
 800fec6:	bf00      	nop
 800fec8:	371c      	adds	r7, #28
 800feca:	46bd      	mov	sp, r7
 800fecc:	bc80      	pop	{r7}
 800fece:	4770      	bx	lr

0800fed0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fed0:	b480      	push	{r7}
 800fed2:	b087      	sub	sp, #28
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	60b9      	str	r1, [r7, #8]
 800feda:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800fee0:	e005      	b.n	800feee <mem_set+0x1e>
		*d++ = (BYTE)val;
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	1c5a      	adds	r2, r3, #1
 800fee6:	617a      	str	r2, [r7, #20]
 800fee8:	68ba      	ldr	r2, [r7, #8]
 800feea:	b2d2      	uxtb	r2, r2
 800feec:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	1e5a      	subs	r2, r3, #1
 800fef2:	607a      	str	r2, [r7, #4]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d1f4      	bne.n	800fee2 <mem_set+0x12>
}
 800fef8:	bf00      	nop
 800fefa:	bf00      	nop
 800fefc:	371c      	adds	r7, #28
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bc80      	pop	{r7}
 800ff02:	4770      	bx	lr

0800ff04 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800ff04:	b480      	push	{r7}
 800ff06:	b089      	sub	sp, #36	; 0x24
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	61fb      	str	r3, [r7, #28]
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800ff1c:	bf00      	nop
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	1e5a      	subs	r2, r3, #1
 800ff22:	607a      	str	r2, [r7, #4]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00d      	beq.n	800ff44 <mem_cmp+0x40>
 800ff28:	69fb      	ldr	r3, [r7, #28]
 800ff2a:	1c5a      	adds	r2, r3, #1
 800ff2c:	61fa      	str	r2, [r7, #28]
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	4619      	mov	r1, r3
 800ff32:	69bb      	ldr	r3, [r7, #24]
 800ff34:	1c5a      	adds	r2, r3, #1
 800ff36:	61ba      	str	r2, [r7, #24]
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	1acb      	subs	r3, r1, r3
 800ff3c:	617b      	str	r3, [r7, #20]
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d0ec      	beq.n	800ff1e <mem_cmp+0x1a>
	return r;
 800ff44:	697b      	ldr	r3, [r7, #20]
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3724      	adds	r7, #36	; 0x24
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bc80      	pop	{r7}
 800ff4e:	4770      	bx	lr

0800ff50 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ff5a:	e002      	b.n	800ff62 <chk_chr+0x12>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	3301      	adds	r3, #1
 800ff60:	607b      	str	r3, [r7, #4]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d005      	beq.n	800ff76 <chk_chr+0x26>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	461a      	mov	r2, r3
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d1f2      	bne.n	800ff5c <chk_chr+0xc>
	return *str;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	781b      	ldrb	r3, [r3, #0]
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	370c      	adds	r7, #12
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bc80      	pop	{r7}
 800ff82:	4770      	bx	lr

0800ff84 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ff92:	4618      	mov	r0, r3
 800ff94:	f002 ffc4 	bl	8012f20 <ff_req_grant>
 800ff98:	4603      	mov	r3, r0
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3708      	adds	r7, #8
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}

0800ffa2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ffa2:	b580      	push	{r7, lr}
 800ffa4:	b082      	sub	sp, #8
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	6078      	str	r0, [r7, #4]
 800ffaa:	460b      	mov	r3, r1
 800ffac:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d011      	beq.n	800ffd8 <unlock_fs+0x36>
 800ffb4:	78fb      	ldrb	r3, [r7, #3]
 800ffb6:	2b0c      	cmp	r3, #12
 800ffb8:	d00e      	beq.n	800ffd8 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800ffba:	78fb      	ldrb	r3, [r7, #3]
 800ffbc:	2b0b      	cmp	r3, #11
 800ffbe:	d00b      	beq.n	800ffd8 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800ffc0:	78fb      	ldrb	r3, [r7, #3]
 800ffc2:	2b09      	cmp	r3, #9
 800ffc4:	d008      	beq.n	800ffd8 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800ffc6:	78fb      	ldrb	r3, [r7, #3]
 800ffc8:	2b0f      	cmp	r3, #15
 800ffca:	d005      	beq.n	800ffd8 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f002 ffb9 	bl	8012f4a <ff_rel_grant>
	}
}
 800ffd8:	bf00      	nop
 800ffda:	3708      	adds	r7, #8
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b085      	sub	sp, #20
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ffea:	2300      	movs	r3, #0
 800ffec:	60bb      	str	r3, [r7, #8]
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	60fb      	str	r3, [r7, #12]
 800fff2:	e038      	b.n	8010066 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800fff4:	492f      	ldr	r1, [pc, #188]	; (80100b4 <chk_lock+0xd4>)
 800fff6:	68fa      	ldr	r2, [r7, #12]
 800fff8:	4613      	mov	r3, r2
 800fffa:	005b      	lsls	r3, r3, #1
 800fffc:	4413      	add	r3, r2
 800fffe:	009b      	lsls	r3, r3, #2
 8010000:	440b      	add	r3, r1
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d029      	beq.n	801005c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8010008:	492a      	ldr	r1, [pc, #168]	; (80100b4 <chk_lock+0xd4>)
 801000a:	68fa      	ldr	r2, [r7, #12]
 801000c:	4613      	mov	r3, r2
 801000e:	005b      	lsls	r3, r3, #1
 8010010:	4413      	add	r3, r2
 8010012:	009b      	lsls	r3, r3, #2
 8010014:	440b      	add	r3, r1
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801001e:	429a      	cmp	r2, r3
 8010020:	d11e      	bne.n	8010060 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8010022:	4924      	ldr	r1, [pc, #144]	; (80100b4 <chk_lock+0xd4>)
 8010024:	68fa      	ldr	r2, [r7, #12]
 8010026:	4613      	mov	r3, r2
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	4413      	add	r3, r2
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	440b      	add	r3, r1
 8010030:	3304      	adds	r3, #4
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 801003a:	429a      	cmp	r2, r3
 801003c:	d110      	bne.n	8010060 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 801003e:	491d      	ldr	r1, [pc, #116]	; (80100b4 <chk_lock+0xd4>)
 8010040:	68fa      	ldr	r2, [r7, #12]
 8010042:	4613      	mov	r3, r2
 8010044:	005b      	lsls	r3, r3, #1
 8010046:	4413      	add	r3, r2
 8010048:	009b      	lsls	r3, r3, #2
 801004a:	440b      	add	r3, r1
 801004c:	3308      	adds	r3, #8
 801004e:	881a      	ldrh	r2, [r3, #0]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8010056:	429a      	cmp	r2, r3
 8010058:	d102      	bne.n	8010060 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 801005a:	e007      	b.n	801006c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 801005c:	2301      	movs	r3, #1
 801005e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	3301      	adds	r3, #1
 8010064:	60fb      	str	r3, [r7, #12]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	2b01      	cmp	r3, #1
 801006a:	d9c3      	bls.n	800fff4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2b02      	cmp	r3, #2
 8010070:	d109      	bne.n	8010086 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d102      	bne.n	801007e <chk_lock+0x9e>
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	2b02      	cmp	r3, #2
 801007c:	d101      	bne.n	8010082 <chk_lock+0xa2>
 801007e:	2300      	movs	r3, #0
 8010080:	e013      	b.n	80100aa <chk_lock+0xca>
 8010082:	2312      	movs	r3, #18
 8010084:	e011      	b.n	80100aa <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d10b      	bne.n	80100a4 <chk_lock+0xc4>
 801008c:	4909      	ldr	r1, [pc, #36]	; (80100b4 <chk_lock+0xd4>)
 801008e:	68fa      	ldr	r2, [r7, #12]
 8010090:	4613      	mov	r3, r2
 8010092:	005b      	lsls	r3, r3, #1
 8010094:	4413      	add	r3, r2
 8010096:	009b      	lsls	r3, r3, #2
 8010098:	440b      	add	r3, r1
 801009a:	330a      	adds	r3, #10
 801009c:	881b      	ldrh	r3, [r3, #0]
 801009e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100a2:	d101      	bne.n	80100a8 <chk_lock+0xc8>
 80100a4:	2310      	movs	r3, #16
 80100a6:	e000      	b.n	80100aa <chk_lock+0xca>
 80100a8:	2300      	movs	r3, #0
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3714      	adds	r7, #20
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bc80      	pop	{r7}
 80100b2:	4770      	bx	lr
 80100b4:	20007acc 	.word	0x20007acc

080100b8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80100be:	2300      	movs	r3, #0
 80100c0:	607b      	str	r3, [r7, #4]
 80100c2:	e002      	b.n	80100ca <enq_lock+0x12>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	3301      	adds	r3, #1
 80100c8:	607b      	str	r3, [r7, #4]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2b01      	cmp	r3, #1
 80100ce:	d809      	bhi.n	80100e4 <enq_lock+0x2c>
 80100d0:	490a      	ldr	r1, [pc, #40]	; (80100fc <enq_lock+0x44>)
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	4613      	mov	r3, r2
 80100d6:	005b      	lsls	r3, r3, #1
 80100d8:	4413      	add	r3, r2
 80100da:	009b      	lsls	r3, r3, #2
 80100dc:	440b      	add	r3, r1
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d1ef      	bne.n	80100c4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2b02      	cmp	r3, #2
 80100e8:	bf14      	ite	ne
 80100ea:	2301      	movne	r3, #1
 80100ec:	2300      	moveq	r3, #0
 80100ee:	b2db      	uxtb	r3, r3
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bc80      	pop	{r7}
 80100f8:	4770      	bx	lr
 80100fa:	bf00      	nop
 80100fc:	20007acc 	.word	0x20007acc

08010100 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010100:	b480      	push	{r7}
 8010102:	b085      	sub	sp, #20
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801010a:	2300      	movs	r3, #0
 801010c:	60fb      	str	r3, [r7, #12]
 801010e:	e02b      	b.n	8010168 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8010110:	4955      	ldr	r1, [pc, #340]	; (8010268 <inc_lock+0x168>)
 8010112:	68fa      	ldr	r2, [r7, #12]
 8010114:	4613      	mov	r3, r2
 8010116:	005b      	lsls	r3, r3, #1
 8010118:	4413      	add	r3, r2
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	440b      	add	r3, r1
 801011e:	681a      	ldr	r2, [r3, #0]
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010126:	429a      	cmp	r2, r3
 8010128:	d11b      	bne.n	8010162 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 801012a:	494f      	ldr	r1, [pc, #316]	; (8010268 <inc_lock+0x168>)
 801012c:	68fa      	ldr	r2, [r7, #12]
 801012e:	4613      	mov	r3, r2
 8010130:	005b      	lsls	r3, r3, #1
 8010132:	4413      	add	r3, r2
 8010134:	009b      	lsls	r3, r3, #2
 8010136:	440b      	add	r3, r1
 8010138:	3304      	adds	r3, #4
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8010142:	429a      	cmp	r2, r3
 8010144:	d10d      	bne.n	8010162 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8010146:	4948      	ldr	r1, [pc, #288]	; (8010268 <inc_lock+0x168>)
 8010148:	68fa      	ldr	r2, [r7, #12]
 801014a:	4613      	mov	r3, r2
 801014c:	005b      	lsls	r3, r3, #1
 801014e:	4413      	add	r3, r2
 8010150:	009b      	lsls	r3, r3, #2
 8010152:	440b      	add	r3, r1
 8010154:	3308      	adds	r3, #8
 8010156:	881a      	ldrh	r2, [r3, #0]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 801015e:	429a      	cmp	r2, r3
 8010160:	d006      	beq.n	8010170 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3301      	adds	r3, #1
 8010166:	60fb      	str	r3, [r7, #12]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2b01      	cmp	r3, #1
 801016c:	d9d0      	bls.n	8010110 <inc_lock+0x10>
 801016e:	e000      	b.n	8010172 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8010170:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2b02      	cmp	r3, #2
 8010176:	d145      	bne.n	8010204 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010178:	2300      	movs	r3, #0
 801017a:	60fb      	str	r3, [r7, #12]
 801017c:	e002      	b.n	8010184 <inc_lock+0x84>
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	3301      	adds	r3, #1
 8010182:	60fb      	str	r3, [r7, #12]
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2b01      	cmp	r3, #1
 8010188:	d809      	bhi.n	801019e <inc_lock+0x9e>
 801018a:	4937      	ldr	r1, [pc, #220]	; (8010268 <inc_lock+0x168>)
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	4613      	mov	r3, r2
 8010190:	005b      	lsls	r3, r3, #1
 8010192:	4413      	add	r3, r2
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	440b      	add	r3, r1
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d1ef      	bne.n	801017e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2b02      	cmp	r3, #2
 80101a2:	d101      	bne.n	80101a8 <inc_lock+0xa8>
 80101a4:	2300      	movs	r3, #0
 80101a6:	e05a      	b.n	801025e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80101ae:	482e      	ldr	r0, [pc, #184]	; (8010268 <inc_lock+0x168>)
 80101b0:	68fa      	ldr	r2, [r7, #12]
 80101b2:	4613      	mov	r3, r2
 80101b4:	005b      	lsls	r3, r3, #1
 80101b6:	4413      	add	r3, r2
 80101b8:	009b      	lsls	r3, r3, #2
 80101ba:	4403      	add	r3, r0
 80101bc:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80101c4:	4828      	ldr	r0, [pc, #160]	; (8010268 <inc_lock+0x168>)
 80101c6:	68fa      	ldr	r2, [r7, #12]
 80101c8:	4613      	mov	r3, r2
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	4413      	add	r3, r2
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	4403      	add	r3, r0
 80101d2:	3304      	adds	r3, #4
 80101d4:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80101dc:	4922      	ldr	r1, [pc, #136]	; (8010268 <inc_lock+0x168>)
 80101de:	68fa      	ldr	r2, [r7, #12]
 80101e0:	4613      	mov	r3, r2
 80101e2:	005b      	lsls	r3, r3, #1
 80101e4:	4413      	add	r3, r2
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	440b      	add	r3, r1
 80101ea:	3308      	adds	r3, #8
 80101ec:	4602      	mov	r2, r0
 80101ee:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80101f0:	491d      	ldr	r1, [pc, #116]	; (8010268 <inc_lock+0x168>)
 80101f2:	68fa      	ldr	r2, [r7, #12]
 80101f4:	4613      	mov	r3, r2
 80101f6:	005b      	lsls	r3, r3, #1
 80101f8:	4413      	add	r3, r2
 80101fa:	009b      	lsls	r3, r3, #2
 80101fc:	440b      	add	r3, r1
 80101fe:	330a      	adds	r3, #10
 8010200:	2200      	movs	r2, #0
 8010202:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d00c      	beq.n	8010224 <inc_lock+0x124>
 801020a:	4917      	ldr	r1, [pc, #92]	; (8010268 <inc_lock+0x168>)
 801020c:	68fa      	ldr	r2, [r7, #12]
 801020e:	4613      	mov	r3, r2
 8010210:	005b      	lsls	r3, r3, #1
 8010212:	4413      	add	r3, r2
 8010214:	009b      	lsls	r3, r3, #2
 8010216:	440b      	add	r3, r1
 8010218:	330a      	adds	r3, #10
 801021a:	881b      	ldrh	r3, [r3, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d001      	beq.n	8010224 <inc_lock+0x124>
 8010220:	2300      	movs	r3, #0
 8010222:	e01c      	b.n	801025e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d10b      	bne.n	8010242 <inc_lock+0x142>
 801022a:	490f      	ldr	r1, [pc, #60]	; (8010268 <inc_lock+0x168>)
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	4613      	mov	r3, r2
 8010230:	005b      	lsls	r3, r3, #1
 8010232:	4413      	add	r3, r2
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	440b      	add	r3, r1
 8010238:	330a      	adds	r3, #10
 801023a:	881b      	ldrh	r3, [r3, #0]
 801023c:	3301      	adds	r3, #1
 801023e:	b299      	uxth	r1, r3
 8010240:	e001      	b.n	8010246 <inc_lock+0x146>
 8010242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010246:	4808      	ldr	r0, [pc, #32]	; (8010268 <inc_lock+0x168>)
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	4613      	mov	r3, r2
 801024c:	005b      	lsls	r3, r3, #1
 801024e:	4413      	add	r3, r2
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	4403      	add	r3, r0
 8010254:	330a      	adds	r3, #10
 8010256:	460a      	mov	r2, r1
 8010258:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	3301      	adds	r3, #1
}
 801025e:	4618      	mov	r0, r3
 8010260:	3714      	adds	r7, #20
 8010262:	46bd      	mov	sp, r7
 8010264:	bc80      	pop	{r7}
 8010266:	4770      	bx	lr
 8010268:	20007acc 	.word	0x20007acc

0801026c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801026c:	b480      	push	{r7}
 801026e:	b085      	sub	sp, #20
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	3b01      	subs	r3, #1
 8010278:	607b      	str	r3, [r7, #4]
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2b01      	cmp	r3, #1
 801027e:	d82e      	bhi.n	80102de <dec_lock+0x72>
		n = Files[i].ctr;
 8010280:	491b      	ldr	r1, [pc, #108]	; (80102f0 <dec_lock+0x84>)
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	4613      	mov	r3, r2
 8010286:	005b      	lsls	r3, r3, #1
 8010288:	4413      	add	r3, r2
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	440b      	add	r3, r1
 801028e:	330a      	adds	r3, #10
 8010290:	881b      	ldrh	r3, [r3, #0]
 8010292:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010294:	89fb      	ldrh	r3, [r7, #14]
 8010296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801029a:	d101      	bne.n	80102a0 <dec_lock+0x34>
 801029c:	2300      	movs	r3, #0
 801029e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80102a0:	89fb      	ldrh	r3, [r7, #14]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d002      	beq.n	80102ac <dec_lock+0x40>
 80102a6:	89fb      	ldrh	r3, [r7, #14]
 80102a8:	3b01      	subs	r3, #1
 80102aa:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80102ac:	4910      	ldr	r1, [pc, #64]	; (80102f0 <dec_lock+0x84>)
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	4613      	mov	r3, r2
 80102b2:	005b      	lsls	r3, r3, #1
 80102b4:	4413      	add	r3, r2
 80102b6:	009b      	lsls	r3, r3, #2
 80102b8:	440b      	add	r3, r1
 80102ba:	330a      	adds	r3, #10
 80102bc:	89fa      	ldrh	r2, [r7, #14]
 80102be:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80102c0:	89fb      	ldrh	r3, [r7, #14]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d108      	bne.n	80102d8 <dec_lock+0x6c>
 80102c6:	490a      	ldr	r1, [pc, #40]	; (80102f0 <dec_lock+0x84>)
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	4613      	mov	r3, r2
 80102cc:	005b      	lsls	r3, r3, #1
 80102ce:	4413      	add	r3, r2
 80102d0:	009b      	lsls	r3, r3, #2
 80102d2:	440b      	add	r3, r1
 80102d4:	2200      	movs	r2, #0
 80102d6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80102d8:	2300      	movs	r3, #0
 80102da:	737b      	strb	r3, [r7, #13]
 80102dc:	e001      	b.n	80102e2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80102de:	2302      	movs	r3, #2
 80102e0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80102e2:	7b7b      	ldrb	r3, [r7, #13]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3714      	adds	r7, #20
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bc80      	pop	{r7}
 80102ec:	4770      	bx	lr
 80102ee:	bf00      	nop
 80102f0:	20007acc 	.word	0x20007acc

080102f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b085      	sub	sp, #20
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80102fc:	2300      	movs	r3, #0
 80102fe:	60fb      	str	r3, [r7, #12]
 8010300:	e016      	b.n	8010330 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010302:	4910      	ldr	r1, [pc, #64]	; (8010344 <clear_lock+0x50>)
 8010304:	68fa      	ldr	r2, [r7, #12]
 8010306:	4613      	mov	r3, r2
 8010308:	005b      	lsls	r3, r3, #1
 801030a:	4413      	add	r3, r2
 801030c:	009b      	lsls	r3, r3, #2
 801030e:	440b      	add	r3, r1
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	429a      	cmp	r2, r3
 8010316:	d108      	bne.n	801032a <clear_lock+0x36>
 8010318:	490a      	ldr	r1, [pc, #40]	; (8010344 <clear_lock+0x50>)
 801031a:	68fa      	ldr	r2, [r7, #12]
 801031c:	4613      	mov	r3, r2
 801031e:	005b      	lsls	r3, r3, #1
 8010320:	4413      	add	r3, r2
 8010322:	009b      	lsls	r3, r3, #2
 8010324:	440b      	add	r3, r1
 8010326:	2200      	movs	r2, #0
 8010328:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	3301      	adds	r3, #1
 801032e:	60fb      	str	r3, [r7, #12]
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2b01      	cmp	r3, #1
 8010334:	d9e5      	bls.n	8010302 <clear_lock+0xe>
	}
}
 8010336:	bf00      	nop
 8010338:	bf00      	nop
 801033a:	3714      	adds	r7, #20
 801033c:	46bd      	mov	sp, r7
 801033e:	bc80      	pop	{r7}
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop
 8010344:	20007acc 	.word	0x20007acc

08010348 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b086      	sub	sp, #24
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010350:	2300      	movs	r3, #0
 8010352:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 801035a:	2b00      	cmp	r3, #0
 801035c:	d038      	beq.n	80103d0 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8010364:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801036c:	6879      	ldr	r1, [r7, #4]
 801036e:	2301      	movs	r3, #1
 8010370:	697a      	ldr	r2, [r7, #20]
 8010372:	f7ff fd51 	bl	800fe18 <disk_write>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d002      	beq.n	8010382 <sync_window+0x3a>
			res = FR_DISK_ERR;
 801037c:	2301      	movs	r3, #1
 801037e:	73fb      	strb	r3, [r7, #15]
 8010380:	e026      	b.n	80103d0 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2200      	movs	r2, #0
 8010386:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010390:	697a      	ldr	r2, [r7, #20]
 8010392:	1ad2      	subs	r2, r2, r3
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801039a:	429a      	cmp	r2, r3
 801039c:	d218      	bcs.n	80103d0 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80103a4:	613b      	str	r3, [r7, #16]
 80103a6:	e010      	b.n	80103ca <sync_window+0x82>
					wsect += fs->fsize;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80103ae:	697a      	ldr	r2, [r7, #20]
 80103b0:	4413      	add	r3, r2
 80103b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80103ba:	6879      	ldr	r1, [r7, #4]
 80103bc:	2301      	movs	r3, #1
 80103be:	697a      	ldr	r2, [r7, #20]
 80103c0:	f7ff fd2a 	bl	800fe18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	3b01      	subs	r3, #1
 80103c8:	613b      	str	r3, [r7, #16]
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d8eb      	bhi.n	80103a8 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80103d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3718      	adds	r7, #24
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b084      	sub	sp, #16
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
 80103e2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80103e4:	2300      	movs	r3, #0
 80103e6:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80103ee:	683a      	ldr	r2, [r7, #0]
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d01b      	beq.n	801042c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f7ff ffa7 	bl	8010348 <sync_window>
 80103fa:	4603      	mov	r3, r0
 80103fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80103fe:	7bfb      	ldrb	r3, [r7, #15]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d113      	bne.n	801042c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801040a:	6879      	ldr	r1, [r7, #4]
 801040c:	2301      	movs	r3, #1
 801040e:	683a      	ldr	r2, [r7, #0]
 8010410:	f7ff fce2 	bl	800fdd8 <disk_read>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d004      	beq.n	8010424 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801041a:	f04f 33ff 	mov.w	r3, #4294967295
 801041e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010420:	2301      	movs	r3, #1
 8010422:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	683a      	ldr	r2, [r7, #0]
 8010428:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 801042c:	7bfb      	ldrb	r3, [r7, #15]
}
 801042e:	4618      	mov	r0, r3
 8010430:	3710      	adds	r7, #16
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}

08010436 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8010436:	b580      	push	{r7, lr}
 8010438:	b084      	sub	sp, #16
 801043a:	af00      	add	r7, sp, #0
 801043c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f7ff ff82 	bl	8010348 <sync_window>
 8010444:	4603      	mov	r3, r0
 8010446:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010448:	7bfb      	ldrb	r3, [r7, #15]
 801044a:	2b00      	cmp	r3, #0
 801044c:	f040 809b 	bne.w	8010586 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010456:	2b03      	cmp	r3, #3
 8010458:	f040 8088 	bne.w	801056c <sync_fs+0x136>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8010462:	2b01      	cmp	r3, #1
 8010464:	f040 8082 	bne.w	801056c <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801046e:	2100      	movs	r1, #0
 8010470:	4618      	mov	r0, r3
 8010472:	f7ff fd2d 	bl	800fed0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2255      	movs	r2, #85	; 0x55
 801047a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	22aa      	movs	r2, #170	; 0xaa
 8010482:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2252      	movs	r2, #82	; 0x52
 801048a:	701a      	strb	r2, [r3, #0]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2252      	movs	r2, #82	; 0x52
 8010490:	705a      	strb	r2, [r3, #1]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2261      	movs	r2, #97	; 0x61
 8010496:	709a      	strb	r2, [r3, #2]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2241      	movs	r2, #65	; 0x41
 801049c:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2272      	movs	r2, #114	; 0x72
 80104a2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2272      	movs	r2, #114	; 0x72
 80104aa:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2241      	movs	r2, #65	; 0x41
 80104b2:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2261      	movs	r2, #97	; 0x61
 80104ba:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80104c4:	b2da      	uxtb	r2, r3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	0a1b      	lsrs	r3, r3, #8
 80104d6:	b29b      	uxth	r3, r3
 80104d8:	b2da      	uxtb	r2, r3
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80104e6:	0c1b      	lsrs	r3, r3, #16
 80104e8:	b2da      	uxtb	r2, r3
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80104f6:	0e1b      	lsrs	r3, r3, #24
 80104f8:	b2da      	uxtb	r2, r3
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010506:	b2da      	uxtb	r2, r3
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010514:	b29b      	uxth	r3, r3
 8010516:	0a1b      	lsrs	r3, r3, #8
 8010518:	b29b      	uxth	r3, r3
 801051a:	b2da      	uxtb	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010528:	0c1b      	lsrs	r3, r3, #16
 801052a:	b2da      	uxtb	r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010538:	0e1b      	lsrs	r3, r3, #24
 801053a:	b2da      	uxtb	r2, r3
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010548:	1c5a      	adds	r2, r3, #1
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010556:	6879      	ldr	r1, [r7, #4]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 801055e:	2301      	movs	r3, #1
 8010560:	f7ff fc5a 	bl	800fe18 <disk_write>
			fs->fsi_flag = 0;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2200      	movs	r2, #0
 8010568:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010572:	2200      	movs	r2, #0
 8010574:	2100      	movs	r1, #0
 8010576:	4618      	mov	r0, r3
 8010578:	f7ff fc6e 	bl	800fe58 <disk_ioctl>
 801057c:	4603      	mov	r3, r0
 801057e:	2b00      	cmp	r3, #0
 8010580:	d001      	beq.n	8010586 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8010582:	2301      	movs	r3, #1
 8010584:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010586:	7bfb      	ldrb	r3, [r7, #15]
}
 8010588:	4618      	mov	r0, r3
 801058a:	3710      	adds	r7, #16
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010590:	b480      	push	{r7}
 8010592:	b083      	sub	sp, #12
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	3b02      	subs	r3, #2
 801059e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80105a6:	3b02      	subs	r3, #2
 80105a8:	683a      	ldr	r2, [r7, #0]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d301      	bcc.n	80105b2 <clust2sect+0x22>
 80105ae:	2300      	movs	r3, #0
 80105b0:	e00a      	b.n	80105c8 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80105b8:	461a      	mov	r2, r3
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	fb03 f202 	mul.w	r2, r3, r2
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80105c6:	4413      	add	r3, r2
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	370c      	adds	r7, #12
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bc80      	pop	{r7}
 80105d0:	4770      	bx	lr

080105d2 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b086      	sub	sp, #24
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
 80105da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d905      	bls.n	80105ee <get_fat+0x1c>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80105e8:	683a      	ldr	r2, [r7, #0]
 80105ea:	429a      	cmp	r2, r3
 80105ec:	d302      	bcc.n	80105f4 <get_fat+0x22>
		val = 1;	/* Internal error */
 80105ee:	2301      	movs	r3, #1
 80105f0:	617b      	str	r3, [r7, #20]
 80105f2:	e0a3      	b.n	801073c <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80105f4:	f04f 33ff 	mov.w	r3, #4294967295
 80105f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010600:	2b03      	cmp	r3, #3
 8010602:	d068      	beq.n	80106d6 <get_fat+0x104>
 8010604:	2b03      	cmp	r3, #3
 8010606:	f300 808f 	bgt.w	8010728 <get_fat+0x156>
 801060a:	2b01      	cmp	r3, #1
 801060c:	d002      	beq.n	8010614 <get_fat+0x42>
 801060e:	2b02      	cmp	r3, #2
 8010610:	d040      	beq.n	8010694 <get_fat+0xc2>
 8010612:	e089      	b.n	8010728 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	60fb      	str	r3, [r7, #12]
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	085b      	lsrs	r3, r3, #1
 801061c:	68fa      	ldr	r2, [r7, #12]
 801061e:	4413      	add	r3, r2
 8010620:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	0a5b      	lsrs	r3, r3, #9
 801062c:	4413      	add	r3, r2
 801062e:	4619      	mov	r1, r3
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f7ff fed2 	bl	80103da <move_window>
 8010636:	4603      	mov	r3, r0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d178      	bne.n	801072e <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	1c5a      	adds	r2, r3, #1
 8010640:	60fa      	str	r2, [r7, #12]
 8010642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010646:	687a      	ldr	r2, [r7, #4]
 8010648:	5cd3      	ldrb	r3, [r2, r3]
 801064a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	0a5b      	lsrs	r3, r3, #9
 8010656:	4413      	add	r3, r2
 8010658:	4619      	mov	r1, r3
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f7ff febd 	bl	80103da <move_window>
 8010660:	4603      	mov	r3, r0
 8010662:	2b00      	cmp	r3, #0
 8010664:	d165      	bne.n	8010732 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	5cd3      	ldrb	r3, [r2, r3]
 8010670:	021b      	lsls	r3, r3, #8
 8010672:	461a      	mov	r2, r3
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	4313      	orrs	r3, r2
 8010678:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	f003 0301 	and.w	r3, r3, #1
 8010680:	2b00      	cmp	r3, #0
 8010682:	d002      	beq.n	801068a <get_fat+0xb8>
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	091b      	lsrs	r3, r3, #4
 8010688:	e002      	b.n	8010690 <get_fat+0xbe>
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010690:	617b      	str	r3, [r7, #20]
			break;
 8010692:	e053      	b.n	801073c <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	0a1b      	lsrs	r3, r3, #8
 801069e:	4413      	add	r3, r2
 80106a0:	4619      	mov	r1, r3
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f7ff fe99 	bl	80103da <move_window>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d143      	bne.n	8010736 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	005b      	lsls	r3, r3, #1
 80106b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80106b6:	687a      	ldr	r2, [r7, #4]
 80106b8:	4413      	add	r3, r2
 80106ba:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	3301      	adds	r3, #1
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	021b      	lsls	r3, r3, #8
 80106c4:	b21a      	sxth	r2, r3
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	b21b      	sxth	r3, r3
 80106cc:	4313      	orrs	r3, r2
 80106ce:	b21b      	sxth	r3, r3
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	617b      	str	r3, [r7, #20]
			break;
 80106d4:	e032      	b.n	801073c <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	09db      	lsrs	r3, r3, #7
 80106e0:	4413      	add	r3, r2
 80106e2:	4619      	mov	r1, r3
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f7ff fe78 	bl	80103da <move_window>
 80106ea:	4603      	mov	r3, r0
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d124      	bne.n	801073a <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	4413      	add	r3, r2
 80106fc:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	3303      	adds	r3, #3
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	061a      	lsls	r2, r3, #24
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	3302      	adds	r3, #2
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	041b      	lsls	r3, r3, #16
 801070e:	4313      	orrs	r3, r2
 8010710:	693a      	ldr	r2, [r7, #16]
 8010712:	3201      	adds	r2, #1
 8010714:	7812      	ldrb	r2, [r2, #0]
 8010716:	0212      	lsls	r2, r2, #8
 8010718:	4313      	orrs	r3, r2
 801071a:	693a      	ldr	r2, [r7, #16]
 801071c:	7812      	ldrb	r2, [r2, #0]
 801071e:	4313      	orrs	r3, r2
 8010720:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010724:	617b      	str	r3, [r7, #20]
			break;
 8010726:	e009      	b.n	801073c <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8010728:	2301      	movs	r3, #1
 801072a:	617b      	str	r3, [r7, #20]
 801072c:	e006      	b.n	801073c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801072e:	bf00      	nop
 8010730:	e004      	b.n	801073c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010732:	bf00      	nop
 8010734:	e002      	b.n	801073c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010736:	bf00      	nop
 8010738:	e000      	b.n	801073c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801073a:	bf00      	nop
		}
	}

	return val;
 801073c:	697b      	ldr	r3, [r7, #20]
}
 801073e:	4618      	mov	r0, r3
 8010740:	3718      	adds	r7, #24
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}

08010746 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8010746:	b580      	push	{r7, lr}
 8010748:	b088      	sub	sp, #32
 801074a:	af00      	add	r7, sp, #0
 801074c:	60f8      	str	r0, [r7, #12]
 801074e:	60b9      	str	r1, [r7, #8]
 8010750:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	2b01      	cmp	r3, #1
 8010756:	d905      	bls.n	8010764 <put_fat+0x1e>
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801075e:	68ba      	ldr	r2, [r7, #8]
 8010760:	429a      	cmp	r2, r3
 8010762:	d302      	bcc.n	801076a <put_fat+0x24>
		res = FR_INT_ERR;
 8010764:	2302      	movs	r3, #2
 8010766:	77fb      	strb	r3, [r7, #31]
 8010768:	e0f6      	b.n	8010958 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010770:	2b03      	cmp	r3, #3
 8010772:	f000 809e 	beq.w	80108b2 <put_fat+0x16c>
 8010776:	2b03      	cmp	r3, #3
 8010778:	f300 80e4 	bgt.w	8010944 <put_fat+0x1fe>
 801077c:	2b01      	cmp	r3, #1
 801077e:	d002      	beq.n	8010786 <put_fat+0x40>
 8010780:	2b02      	cmp	r3, #2
 8010782:	d06f      	beq.n	8010864 <put_fat+0x11e>
 8010784:	e0de      	b.n	8010944 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	617b      	str	r3, [r7, #20]
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	085b      	lsrs	r3, r3, #1
 801078e:	697a      	ldr	r2, [r7, #20]
 8010790:	4413      	add	r3, r2
 8010792:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	0a5b      	lsrs	r3, r3, #9
 801079e:	4413      	add	r3, r2
 80107a0:	4619      	mov	r1, r3
 80107a2:	68f8      	ldr	r0, [r7, #12]
 80107a4:	f7ff fe19 	bl	80103da <move_window>
 80107a8:	4603      	mov	r3, r0
 80107aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80107ac:	7ffb      	ldrb	r3, [r7, #31]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f040 80cb 	bne.w	801094a <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	1c5a      	adds	r2, r3, #1
 80107b8:	617a      	str	r2, [r7, #20]
 80107ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107be:	68fa      	ldr	r2, [r7, #12]
 80107c0:	4413      	add	r3, r2
 80107c2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	f003 0301 	and.w	r3, r3, #1
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d00d      	beq.n	80107ea <put_fat+0xa4>
 80107ce:	69bb      	ldr	r3, [r7, #24]
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	b25b      	sxtb	r3, r3
 80107d4:	f003 030f 	and.w	r3, r3, #15
 80107d8:	b25a      	sxtb	r2, r3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	b2db      	uxtb	r3, r3
 80107de:	011b      	lsls	r3, r3, #4
 80107e0:	b25b      	sxtb	r3, r3
 80107e2:	4313      	orrs	r3, r2
 80107e4:	b25b      	sxtb	r3, r3
 80107e6:	b2db      	uxtb	r3, r3
 80107e8:	e001      	b.n	80107ee <put_fat+0xa8>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	69ba      	ldr	r2, [r7, #24]
 80107f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	2201      	movs	r2, #1
 80107f6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	0a5b      	lsrs	r3, r3, #9
 8010804:	4413      	add	r3, r2
 8010806:	4619      	mov	r1, r3
 8010808:	68f8      	ldr	r0, [r7, #12]
 801080a:	f7ff fde6 	bl	80103da <move_window>
 801080e:	4603      	mov	r3, r0
 8010810:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010812:	7ffb      	ldrb	r3, [r7, #31]
 8010814:	2b00      	cmp	r3, #0
 8010816:	f040 809a 	bne.w	801094e <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010820:	68fa      	ldr	r2, [r7, #12]
 8010822:	4413      	add	r3, r2
 8010824:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	f003 0301 	and.w	r3, r3, #1
 801082c:	2b00      	cmp	r3, #0
 801082e:	d003      	beq.n	8010838 <put_fat+0xf2>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	091b      	lsrs	r3, r3, #4
 8010834:	b2db      	uxtb	r3, r3
 8010836:	e00e      	b.n	8010856 <put_fat+0x110>
 8010838:	69bb      	ldr	r3, [r7, #24]
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	b25b      	sxtb	r3, r3
 801083e:	f023 030f 	bic.w	r3, r3, #15
 8010842:	b25a      	sxtb	r2, r3
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	0a1b      	lsrs	r3, r3, #8
 8010848:	b25b      	sxtb	r3, r3
 801084a:	f003 030f 	and.w	r3, r3, #15
 801084e:	b25b      	sxtb	r3, r3
 8010850:	4313      	orrs	r3, r2
 8010852:	b25b      	sxtb	r3, r3
 8010854:	b2db      	uxtb	r3, r3
 8010856:	69ba      	ldr	r2, [r7, #24]
 8010858:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2201      	movs	r2, #1
 801085e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010862:	e079      	b.n	8010958 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	0a1b      	lsrs	r3, r3, #8
 801086e:	4413      	add	r3, r2
 8010870:	4619      	mov	r1, r3
 8010872:	68f8      	ldr	r0, [r7, #12]
 8010874:	f7ff fdb1 	bl	80103da <move_window>
 8010878:	4603      	mov	r3, r0
 801087a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801087c:	7ffb      	ldrb	r3, [r7, #31]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d167      	bne.n	8010952 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	005b      	lsls	r3, r3, #1
 8010886:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801088a:	68fa      	ldr	r2, [r7, #12]
 801088c:	4413      	add	r3, r2
 801088e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	b2da      	uxtb	r2, r3
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	701a      	strb	r2, [r3, #0]
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	b29b      	uxth	r3, r3
 801089c:	0a1b      	lsrs	r3, r3, #8
 801089e:	b29a      	uxth	r2, r3
 80108a0:	69bb      	ldr	r3, [r7, #24]
 80108a2:	3301      	adds	r3, #1
 80108a4:	b2d2      	uxtb	r2, r2
 80108a6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2201      	movs	r2, #1
 80108ac:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80108b0:	e052      	b.n	8010958 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	09db      	lsrs	r3, r3, #7
 80108bc:	4413      	add	r3, r2
 80108be:	4619      	mov	r1, r3
 80108c0:	68f8      	ldr	r0, [r7, #12]
 80108c2:	f7ff fd8a 	bl	80103da <move_window>
 80108c6:	4603      	mov	r3, r0
 80108c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80108ca:	7ffb      	ldrb	r3, [r7, #31]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d142      	bne.n	8010956 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80108d0:	68bb      	ldr	r3, [r7, #8]
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80108d8:	68fa      	ldr	r2, [r7, #12]
 80108da:	4413      	add	r3, r2
 80108dc:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80108de:	69bb      	ldr	r3, [r7, #24]
 80108e0:	3303      	adds	r3, #3
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	061a      	lsls	r2, r3, #24
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	3302      	adds	r3, #2
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	041b      	lsls	r3, r3, #16
 80108ee:	4313      	orrs	r3, r2
 80108f0:	69ba      	ldr	r2, [r7, #24]
 80108f2:	3201      	adds	r2, #1
 80108f4:	7812      	ldrb	r2, [r2, #0]
 80108f6:	0212      	lsls	r2, r2, #8
 80108f8:	4313      	orrs	r3, r2
 80108fa:	69ba      	ldr	r2, [r7, #24]
 80108fc:	7812      	ldrb	r2, [r2, #0]
 80108fe:	4313      	orrs	r3, r2
 8010900:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010904:	687a      	ldr	r2, [r7, #4]
 8010906:	4313      	orrs	r3, r2
 8010908:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	b2da      	uxtb	r2, r3
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	701a      	strb	r2, [r3, #0]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	b29b      	uxth	r3, r3
 8010916:	0a1b      	lsrs	r3, r3, #8
 8010918:	b29a      	uxth	r2, r3
 801091a:	69bb      	ldr	r3, [r7, #24]
 801091c:	3301      	adds	r3, #1
 801091e:	b2d2      	uxtb	r2, r2
 8010920:	701a      	strb	r2, [r3, #0]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	0c1a      	lsrs	r2, r3, #16
 8010926:	69bb      	ldr	r3, [r7, #24]
 8010928:	3302      	adds	r3, #2
 801092a:	b2d2      	uxtb	r2, r2
 801092c:	701a      	strb	r2, [r3, #0]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	0e1a      	lsrs	r2, r3, #24
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	3303      	adds	r3, #3
 8010936:	b2d2      	uxtb	r2, r2
 8010938:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2201      	movs	r2, #1
 801093e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010942:	e009      	b.n	8010958 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8010944:	2302      	movs	r3, #2
 8010946:	77fb      	strb	r3, [r7, #31]
 8010948:	e006      	b.n	8010958 <put_fat+0x212>
			if (res != FR_OK) break;
 801094a:	bf00      	nop
 801094c:	e004      	b.n	8010958 <put_fat+0x212>
			if (res != FR_OK) break;
 801094e:	bf00      	nop
 8010950:	e002      	b.n	8010958 <put_fat+0x212>
			if (res != FR_OK) break;
 8010952:	bf00      	nop
 8010954:	e000      	b.n	8010958 <put_fat+0x212>
			if (res != FR_OK) break;
 8010956:	bf00      	nop
		}
	}

	return res;
 8010958:	7ffb      	ldrb	r3, [r7, #31]
}
 801095a:	4618      	mov	r0, r3
 801095c:	3720      	adds	r7, #32
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8010962:	b580      	push	{r7, lr}
 8010964:	b084      	sub	sp, #16
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
 801096a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	2b01      	cmp	r3, #1
 8010970:	d905      	bls.n	801097e <remove_chain+0x1c>
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010978:	683a      	ldr	r2, [r7, #0]
 801097a:	429a      	cmp	r2, r3
 801097c:	d302      	bcc.n	8010984 <remove_chain+0x22>
		res = FR_INT_ERR;
 801097e:	2302      	movs	r3, #2
 8010980:	73fb      	strb	r3, [r7, #15]
 8010982:	e043      	b.n	8010a0c <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8010984:	2300      	movs	r3, #0
 8010986:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8010988:	e036      	b.n	80109f8 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 801098a:	6839      	ldr	r1, [r7, #0]
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f7ff fe20 	bl	80105d2 <get_fat>
 8010992:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d035      	beq.n	8010a06 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	2b01      	cmp	r3, #1
 801099e:	d102      	bne.n	80109a6 <remove_chain+0x44>
 80109a0:	2302      	movs	r3, #2
 80109a2:	73fb      	strb	r3, [r7, #15]
 80109a4:	e032      	b.n	8010a0c <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ac:	d102      	bne.n	80109b4 <remove_chain+0x52>
 80109ae:	2301      	movs	r3, #1
 80109b0:	73fb      	strb	r3, [r7, #15]
 80109b2:	e02b      	b.n	8010a0c <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80109b4:	2200      	movs	r2, #0
 80109b6:	6839      	ldr	r1, [r7, #0]
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f7ff fec4 	bl	8010746 <put_fat>
 80109be:	4603      	mov	r3, r0
 80109c0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80109c2:	7bfb      	ldrb	r3, [r7, #15]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d120      	bne.n	8010a0a <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80109ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109d2:	d00f      	beq.n	80109f4 <remove_chain+0x92>
				fs->free_clust++;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80109da:	1c5a      	adds	r2, r3, #1
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80109e8:	f043 0301 	orr.w	r3, r3, #1
 80109ec:	b2da      	uxtb	r2, r3
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80109fe:	683a      	ldr	r2, [r7, #0]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d3c2      	bcc.n	801098a <remove_chain+0x28>
 8010a04:	e002      	b.n	8010a0c <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8010a06:	bf00      	nop
 8010a08:	e000      	b.n	8010a0c <remove_chain+0xaa>
			if (res != FR_OK) break;
 8010a0a:	bf00      	nop
		}
	}

	return res;
 8010a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3710      	adds	r7, #16
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}

08010a16 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8010a16:	b580      	push	{r7, lr}
 8010a18:	b086      	sub	sp, #24
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	6078      	str	r0, [r7, #4]
 8010a1e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d10f      	bne.n	8010a46 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010a2c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d005      	beq.n	8010a40 <create_chain+0x2a>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010a3a:	693a      	ldr	r2, [r7, #16]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d31c      	bcc.n	8010a7a <create_chain+0x64>
 8010a40:	2301      	movs	r3, #1
 8010a42:	613b      	str	r3, [r7, #16]
 8010a44:	e019      	b.n	8010a7a <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8010a46:	6839      	ldr	r1, [r7, #0]
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f7ff fdc2 	bl	80105d2 <get_fat>
 8010a4e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d801      	bhi.n	8010a5a <create_chain+0x44>
 8010a56:	2301      	movs	r3, #1
 8010a58:	e076      	b.n	8010b48 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a60:	d101      	bne.n	8010a66 <create_chain+0x50>
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	e070      	b.n	8010b48 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010a6c:	68ba      	ldr	r2, [r7, #8]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d201      	bcs.n	8010a76 <create_chain+0x60>
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	e068      	b.n	8010b48 <create_chain+0x132>
		scl = clst;
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	3301      	adds	r3, #1
 8010a82:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010a8a:	697a      	ldr	r2, [r7, #20]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d307      	bcc.n	8010aa0 <create_chain+0x8a>
			ncl = 2;
 8010a90:	2302      	movs	r3, #2
 8010a92:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8010a94:	697a      	ldr	r2, [r7, #20]
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d901      	bls.n	8010aa0 <create_chain+0x8a>
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	e053      	b.n	8010b48 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8010aa0:	6979      	ldr	r1, [r7, #20]
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f7ff fd95 	bl	80105d2 <get_fat>
 8010aa8:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d00e      	beq.n	8010ace <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ab6:	d002      	beq.n	8010abe <create_chain+0xa8>
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	2b01      	cmp	r3, #1
 8010abc:	d101      	bne.n	8010ac2 <create_chain+0xac>
			return cs;
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	e042      	b.n	8010b48 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8010ac2:	697a      	ldr	r2, [r7, #20]
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d1d9      	bne.n	8010a7e <create_chain+0x68>
 8010aca:	2300      	movs	r3, #0
 8010acc:	e03c      	b.n	8010b48 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8010ace:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8010ad0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8010ad4:	6979      	ldr	r1, [r7, #20]
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f7ff fe35 	bl	8010746 <put_fat>
 8010adc:	4603      	mov	r3, r0
 8010ade:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8010ae0:	7bfb      	ldrb	r3, [r7, #15]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d109      	bne.n	8010afa <create_chain+0xe4>
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d006      	beq.n	8010afa <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8010aec:	697a      	ldr	r2, [r7, #20]
 8010aee:	6839      	ldr	r1, [r7, #0]
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7ff fe28 	bl	8010746 <put_fat>
 8010af6:	4603      	mov	r3, r0
 8010af8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8010afa:	7bfb      	ldrb	r3, [r7, #15]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d11a      	bne.n	8010b36 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	697a      	ldr	r2, [r7, #20]
 8010b04:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b12:	d018      	beq.n	8010b46 <create_chain+0x130>
			fs->free_clust--;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b1a:	1e5a      	subs	r2, r3, #1
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8010b28:	f043 0301 	orr.w	r3, r3, #1
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8010b34:	e007      	b.n	8010b46 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8010b36:	7bfb      	ldrb	r3, [r7, #15]
 8010b38:	2b01      	cmp	r3, #1
 8010b3a:	d102      	bne.n	8010b42 <create_chain+0x12c>
 8010b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b40:	e000      	b.n	8010b44 <create_chain+0x12e>
 8010b42:	2301      	movs	r3, #1
 8010b44:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8010b46:	697b      	ldr	r3, [r7, #20]
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3718      	adds	r7, #24
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}

08010b50 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8010b50:	b480      	push	{r7}
 8010b52:	b087      	sub	sp, #28
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010b60:	3304      	adds	r3, #4
 8010b62:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	0a5b      	lsrs	r3, r3, #9
 8010b68:	687a      	ldr	r2, [r7, #4]
 8010b6a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010b6e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010b72:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b76:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	1d1a      	adds	r2, r3, #4
 8010b7c:	613a      	str	r2, [r7, #16]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d101      	bne.n	8010b8c <clmt_clust+0x3c>
 8010b88:	2300      	movs	r3, #0
 8010b8a:	e010      	b.n	8010bae <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8010b8c:	697a      	ldr	r2, [r7, #20]
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d307      	bcc.n	8010ba4 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8010b94:	697a      	ldr	r2, [r7, #20]
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	1ad3      	subs	r3, r2, r3
 8010b9a:	617b      	str	r3, [r7, #20]
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	3304      	adds	r3, #4
 8010ba0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010ba2:	e7e9      	b.n	8010b78 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8010ba4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	4413      	add	r3, r2
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	371c      	adds	r7, #28
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bc80      	pop	{r7}
 8010bb6:	4770      	bx	lr

08010bb8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b086      	sub	sp, #24
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010bd2:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d007      	beq.n	8010bea <dir_sdi+0x32>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010be0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010be4:	697a      	ldr	r2, [r7, #20]
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d301      	bcc.n	8010bee <dir_sdi+0x36>
		return FR_INT_ERR;
 8010bea:	2302      	movs	r3, #2
 8010bec:	e074      	b.n	8010cd8 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d10c      	bne.n	8010c0e <dir_sdi+0x56>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010bfa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010bfe:	2b03      	cmp	r3, #3
 8010c00:	d105      	bne.n	8010c0e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c08:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8010c0c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d111      	bne.n	8010c38 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c1a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8010c1e:	461a      	mov	r2, r3
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d301      	bcc.n	8010c2a <dir_sdi+0x72>
			return FR_INT_ERR;
 8010c26:	2302      	movs	r3, #2
 8010c28:	e056      	b.n	8010cd8 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c30:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8010c34:	613b      	str	r3, [r7, #16]
 8010c36:	e032      	b.n	8010c9e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c3e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010c42:	011b      	lsls	r3, r3, #4
 8010c44:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8010c46:	e01e      	b.n	8010c86 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c4e:	6979      	ldr	r1, [r7, #20]
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7ff fcbe 	bl	80105d2 <get_fat>
 8010c56:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c5e:	d101      	bne.n	8010c64 <dir_sdi+0xac>
 8010c60:	2301      	movs	r3, #1
 8010c62:	e039      	b.n	8010cd8 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d907      	bls.n	8010c7a <dir_sdi+0xc2>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c70:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010c74:	697a      	ldr	r2, [r7, #20]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d301      	bcc.n	8010c7e <dir_sdi+0xc6>
				return FR_INT_ERR;
 8010c7a:	2302      	movs	r3, #2
 8010c7c:	e02c      	b.n	8010cd8 <dir_sdi+0x120>
			idx -= ic;
 8010c7e:	683a      	ldr	r2, [r7, #0]
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	1ad3      	subs	r3, r2, r3
 8010c84:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8010c86:	683a      	ldr	r2, [r7, #0]
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d2dc      	bcs.n	8010c48 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c94:	6979      	ldr	r1, [r7, #20]
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7ff fc7a 	bl	8010590 <clust2sect>
 8010c9c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	697a      	ldr	r2, [r7, #20]
 8010ca2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d101      	bne.n	8010cb0 <dir_sdi+0xf8>
 8010cac:	2302      	movs	r3, #2
 8010cae:	e013      	b.n	8010cd8 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	091a      	lsrs	r2, r3, #4
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	441a      	add	r2, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010cc4:	461a      	mov	r2, r3
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	f003 030f 	and.w	r3, r3, #15
 8010ccc:	015b      	lsls	r3, r3, #5
 8010cce:	441a      	add	r2, r3
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8010cd6:	2300      	movs	r3, #0
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3718      	adds	r7, #24
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010ce0:	b590      	push	{r4, r7, lr}
 8010ce2:	b087      	sub	sp, #28
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d004      	beq.n	8010d06 <dir_next+0x26>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d101      	bne.n	8010d0a <dir_next+0x2a>
		return FR_NO_FILE;
 8010d06:	2304      	movs	r3, #4
 8010d08:	e0dd      	b.n	8010ec6 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	f003 030f 	and.w	r3, r3, #15
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	f040 80c6 	bne.w	8010ea2 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010d1c:	1c5a      	adds	r2, r3, #1
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d10b      	bne.n	8010d46 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010d34:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8010d38:	461a      	mov	r2, r3
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	f0c0 80b0 	bcc.w	8010ea2 <dir_next+0x1c2>
				return FR_NO_FILE;
 8010d42:	2304      	movs	r3, #4
 8010d44:	e0bf      	b.n	8010ec6 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	091b      	lsrs	r3, r3, #4
 8010d4a:	687a      	ldr	r2, [r7, #4]
 8010d4c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010d50:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010d54:	3a01      	subs	r2, #1
 8010d56:	4013      	ands	r3, r2
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	f040 80a2 	bne.w	8010ea2 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	4610      	mov	r0, r2
 8010d6e:	f7ff fc30 	bl	80105d2 <get_fat>
 8010d72:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	2b01      	cmp	r3, #1
 8010d78:	d801      	bhi.n	8010d7e <dir_next+0x9e>
 8010d7a:	2302      	movs	r3, #2
 8010d7c:	e0a3      	b.n	8010ec6 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d84:	d101      	bne.n	8010d8a <dir_next+0xaa>
 8010d86:	2301      	movs	r3, #1
 8010d88:	e09d      	b.n	8010ec6 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010d90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010d94:	697a      	ldr	r2, [r7, #20]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d374      	bcc.n	8010e84 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d101      	bne.n	8010da4 <dir_next+0xc4>
 8010da0:	2304      	movs	r3, #4
 8010da2:	e090      	b.n	8010ec6 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010db0:	4619      	mov	r1, r3
 8010db2:	4610      	mov	r0, r2
 8010db4:	f7ff fe2f 	bl	8010a16 <create_chain>
 8010db8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d101      	bne.n	8010dc4 <dir_next+0xe4>
 8010dc0:	2307      	movs	r3, #7
 8010dc2:	e080      	b.n	8010ec6 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	2b01      	cmp	r3, #1
 8010dc8:	d101      	bne.n	8010dce <dir_next+0xee>
 8010dca:	2302      	movs	r3, #2
 8010dcc:	e07b      	b.n	8010ec6 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dd4:	d101      	bne.n	8010dda <dir_next+0xfa>
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	e075      	b.n	8010ec6 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7ff fab1 	bl	8010348 <sync_window>
 8010de6:	4603      	mov	r3, r0
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d001      	beq.n	8010df0 <dir_next+0x110>
 8010dec:	2301      	movs	r3, #1
 8010dee:	e06a      	b.n	8010ec6 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010dfa:	2100      	movs	r1, #0
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7ff f867 	bl	800fed0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8010e0e:	6979      	ldr	r1, [r7, #20]
 8010e10:	4610      	mov	r0, r2
 8010e12:	f7ff fbbd 	bl	8010590 <clust2sect>
 8010e16:	4603      	mov	r3, r0
 8010e18:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	613b      	str	r3, [r7, #16]
 8010e20:	e01b      	b.n	8010e5a <dir_next+0x17a>
						dp->fs->wflag = 1;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010e28:	2201      	movs	r2, #1
 8010e2a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7ff fa87 	bl	8010348 <sync_window>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d001      	beq.n	8010e44 <dir_next+0x164>
 8010e40:	2301      	movs	r3, #1
 8010e42:	e040      	b.n	8010ec6 <dir_next+0x1e6>
						dp->fs->winsect++;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010e4a:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8010e4e:	3201      	adds	r2, #1
 8010e50:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	3301      	adds	r3, #1
 8010e58:	613b      	str	r3, [r7, #16]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010e60:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010e64:	461a      	mov	r2, r3
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d3da      	bcc.n	8010e22 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010e72:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010e7c:	693a      	ldr	r2, [r7, #16]
 8010e7e:	1a8a      	subs	r2, r1, r2
 8010e80:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	697a      	ldr	r2, [r7, #20]
 8010e88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010e92:	6979      	ldr	r1, [r7, #20]
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7ff fb7b 	bl	8010590 <clust2sect>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	b29a      	uxth	r2, r3
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	f003 030f 	and.w	r3, r3, #15
 8010eba:	015b      	lsls	r3, r3, #5
 8010ebc:	441a      	add	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8010ec4:	2300      	movs	r3, #0
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	371c      	adds	r7, #28
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd90      	pop	{r4, r7, pc}

08010ece <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8010ece:	b580      	push	{r7, lr}
 8010ed0:	b084      	sub	sp, #16
 8010ed2:	af00      	add	r7, sp, #0
 8010ed4:	6078      	str	r0, [r7, #4]
 8010ed6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8010ed8:	2100      	movs	r1, #0
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7ff fe6c 	bl	8010bb8 <dir_sdi>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010ee4:	7bfb      	ldrb	r3, [r7, #15]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d131      	bne.n	8010f4e <dir_alloc+0x80>
		n = 0;
 8010eea:	2300      	movs	r3, #0
 8010eec:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010efa:	4619      	mov	r1, r3
 8010efc:	4610      	mov	r0, r2
 8010efe:	f7ff fa6c 	bl	80103da <move_window>
 8010f02:	4603      	mov	r3, r0
 8010f04:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8010f06:	7bfb      	ldrb	r3, [r7, #15]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d11f      	bne.n	8010f4c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	2be5      	cmp	r3, #229	; 0xe5
 8010f16:	d005      	beq.n	8010f24 <dir_alloc+0x56>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d107      	bne.n	8010f34 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	3301      	adds	r3, #1
 8010f28:	60bb      	str	r3, [r7, #8]
 8010f2a:	68ba      	ldr	r2, [r7, #8]
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d102      	bne.n	8010f38 <dir_alloc+0x6a>
 8010f32:	e00c      	b.n	8010f4e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010f34:	2300      	movs	r3, #0
 8010f36:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8010f38:	2101      	movs	r1, #1
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f7ff fed0 	bl	8010ce0 <dir_next>
 8010f40:	4603      	mov	r3, r0
 8010f42:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8010f44:	7bfb      	ldrb	r3, [r7, #15]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d0d1      	beq.n	8010eee <dir_alloc+0x20>
 8010f4a:	e000      	b.n	8010f4e <dir_alloc+0x80>
			if (res != FR_OK) break;
 8010f4c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010f4e:	7bfb      	ldrb	r3, [r7, #15]
 8010f50:	2b04      	cmp	r3, #4
 8010f52:	d101      	bne.n	8010f58 <dir_alloc+0x8a>
 8010f54:	2307      	movs	r3, #7
 8010f56:	73fb      	strb	r3, [r7, #15]
	return res;
 8010f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3710      	adds	r7, #16
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}

08010f62 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8010f62:	b480      	push	{r7}
 8010f64:	b085      	sub	sp, #20
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	6078      	str	r0, [r7, #4]
 8010f6a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	331b      	adds	r3, #27
 8010f70:	781b      	ldrb	r3, [r3, #0]
 8010f72:	021b      	lsls	r3, r3, #8
 8010f74:	b21a      	sxth	r2, r3
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	331a      	adds	r3, #26
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	b21b      	sxth	r3, r3
 8010f7e:	4313      	orrs	r3, r2
 8010f80:	b21b      	sxth	r3, r3
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010f8c:	2b03      	cmp	r3, #3
 8010f8e:	d10f      	bne.n	8010fb0 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	3315      	adds	r3, #21
 8010f94:	781b      	ldrb	r3, [r3, #0]
 8010f96:	021b      	lsls	r3, r3, #8
 8010f98:	b21a      	sxth	r2, r3
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	3314      	adds	r3, #20
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	b21b      	sxth	r3, r3
 8010fa2:	4313      	orrs	r3, r2
 8010fa4:	b21b      	sxth	r3, r3
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	041b      	lsls	r3, r3, #16
 8010faa:	68fa      	ldr	r2, [r7, #12]
 8010fac:	4313      	orrs	r3, r2
 8010fae:	60fb      	str	r3, [r7, #12]

	return cl;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3714      	adds	r7, #20
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bc80      	pop	{r7}
 8010fba:	4770      	bx	lr

08010fbc <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	331a      	adds	r3, #26
 8010fca:	683a      	ldr	r2, [r7, #0]
 8010fcc:	b2d2      	uxtb	r2, r2
 8010fce:	701a      	strb	r2, [r3, #0]
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	0a1b      	lsrs	r3, r3, #8
 8010fd6:	b29a      	uxth	r2, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	331b      	adds	r3, #27
 8010fdc:	b2d2      	uxtb	r2, r2
 8010fde:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	0c1a      	lsrs	r2, r3, #16
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	3314      	adds	r3, #20
 8010fe8:	b2d2      	uxtb	r2, r2
 8010fea:	701a      	strb	r2, [r3, #0]
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	0c1b      	lsrs	r3, r3, #16
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	0a1b      	lsrs	r3, r3, #8
 8010ff4:	b29a      	uxth	r2, r3
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	3315      	adds	r3, #21
 8010ffa:	b2d2      	uxtb	r2, r2
 8010ffc:	701a      	strb	r2, [r3, #0]
}
 8010ffe:	bf00      	nop
 8011000:	370c      	adds	r7, #12
 8011002:	46bd      	mov	sp, r7
 8011004:	bc80      	pop	{r7}
 8011006:	4770      	bx	lr

08011008 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b086      	sub	sp, #24
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011010:	2100      	movs	r1, #0
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f7ff fdd0 	bl	8010bb8 <dir_sdi>
 8011018:	4603      	mov	r3, r0
 801101a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801101c:	7dfb      	ldrb	r3, [r7, #23]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d001      	beq.n	8011026 <dir_find+0x1e>
 8011022:	7dfb      	ldrb	r3, [r7, #23]
 8011024:	e03b      	b.n	801109e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011032:	4619      	mov	r1, r3
 8011034:	4610      	mov	r0, r2
 8011036:	f7ff f9d0 	bl	80103da <move_window>
 801103a:	4603      	mov	r3, r0
 801103c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801103e:	7dfb      	ldrb	r3, [r7, #23]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d128      	bne.n	8011096 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801104a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011052:	7bfb      	ldrb	r3, [r7, #15]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d102      	bne.n	801105e <dir_find+0x56>
 8011058:	2304      	movs	r3, #4
 801105a:	75fb      	strb	r3, [r7, #23]
 801105c:	e01e      	b.n	801109c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	330b      	adds	r3, #11
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	f003 0308 	and.w	r3, r3, #8
 8011068:	2b00      	cmp	r3, #0
 801106a:	d10a      	bne.n	8011082 <dir_find+0x7a>
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011072:	220b      	movs	r2, #11
 8011074:	4619      	mov	r1, r3
 8011076:	6938      	ldr	r0, [r7, #16]
 8011078:	f7fe ff44 	bl	800ff04 <mem_cmp>
 801107c:	4603      	mov	r3, r0
 801107e:	2b00      	cmp	r3, #0
 8011080:	d00b      	beq.n	801109a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8011082:	2100      	movs	r1, #0
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f7ff fe2b 	bl	8010ce0 <dir_next>
 801108a:	4603      	mov	r3, r0
 801108c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801108e:	7dfb      	ldrb	r3, [r7, #23]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d0c8      	beq.n	8011026 <dir_find+0x1e>
 8011094:	e002      	b.n	801109c <dir_find+0x94>
		if (res != FR_OK) break;
 8011096:	bf00      	nop
 8011098:	e000      	b.n	801109c <dir_find+0x94>
			break;
 801109a:	bf00      	nop

	return res;
 801109c:	7dfb      	ldrb	r3, [r7, #23]
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3718      	adds	r7, #24
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}

080110a6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80110a6:	b580      	push	{r7, lr}
 80110a8:	b086      	sub	sp, #24
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	6078      	str	r0, [r7, #4]
 80110ae:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 80110b0:	2304      	movs	r3, #4
 80110b2:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 80110b4:	e03f      	b.n	8011136 <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80110c2:	4619      	mov	r1, r3
 80110c4:	4610      	mov	r0, r2
 80110c6:	f7ff f988 	bl	80103da <move_window>
 80110ca:	4603      	mov	r3, r0
 80110cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80110ce:	7dfb      	ldrb	r3, [r7, #23]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d136      	bne.n	8011142 <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80110da:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80110e2:	7bfb      	ldrb	r3, [r7, #15]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d102      	bne.n	80110ee <dir_read+0x48>
 80110e8:	2304      	movs	r3, #4
 80110ea:	75fb      	strb	r3, [r7, #23]
 80110ec:	e02e      	b.n	801114c <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	330b      	adds	r3, #11
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110f8:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 80110fa:	7bfb      	ldrb	r3, [r7, #15]
 80110fc:	2be5      	cmp	r3, #229	; 0xe5
 80110fe:	d011      	beq.n	8011124 <dir_read+0x7e>
 8011100:	7bfb      	ldrb	r3, [r7, #15]
 8011102:	2b2e      	cmp	r3, #46	; 0x2e
 8011104:	d00e      	beq.n	8011124 <dir_read+0x7e>
 8011106:	7bbb      	ldrb	r3, [r7, #14]
 8011108:	2b0f      	cmp	r3, #15
 801110a:	d00b      	beq.n	8011124 <dir_read+0x7e>
 801110c:	7bbb      	ldrb	r3, [r7, #14]
 801110e:	f023 0320 	bic.w	r3, r3, #32
 8011112:	2b08      	cmp	r3, #8
 8011114:	bf0c      	ite	eq
 8011116:	2301      	moveq	r3, #1
 8011118:	2300      	movne	r3, #0
 801111a:	b2db      	uxtb	r3, r3
 801111c:	461a      	mov	r2, r3
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	4293      	cmp	r3, r2
 8011122:	d010      	beq.n	8011146 <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8011124:	2100      	movs	r1, #0
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f7ff fdda 	bl	8010ce0 <dir_next>
 801112c:	4603      	mov	r3, r0
 801112e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011130:	7dfb      	ldrb	r3, [r7, #23]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d109      	bne.n	801114a <dir_read+0xa4>
	while (dp->sect) {
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801113c:	2b00      	cmp	r3, #0
 801113e:	d1ba      	bne.n	80110b6 <dir_read+0x10>
 8011140:	e004      	b.n	801114c <dir_read+0xa6>
		if (res != FR_OK) break;
 8011142:	bf00      	nop
 8011144:	e002      	b.n	801114c <dir_read+0xa6>
			break;
 8011146:	bf00      	nop
 8011148:	e000      	b.n	801114c <dir_read+0xa6>
		if (res != FR_OK) break;
 801114a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 801114c:	7dfb      	ldrb	r3, [r7, #23]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d003      	beq.n	801115a <dir_read+0xb4>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2200      	movs	r2, #0
 8011156:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 801115a:	7dfb      	ldrb	r3, [r7, #23]
}
 801115c:	4618      	mov	r0, r3
 801115e:	3718      	adds	r7, #24
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}

08011164 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b084      	sub	sp, #16
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801116c:	2101      	movs	r1, #1
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f7ff fead 	bl	8010ece <dir_alloc>
 8011174:	4603      	mov	r3, r0
 8011176:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8011178:	7bfb      	ldrb	r3, [r7, #15]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d126      	bne.n	80111cc <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801118a:	4619      	mov	r1, r3
 801118c:	4610      	mov	r0, r2
 801118e:	f7ff f924 	bl	80103da <move_window>
 8011192:	4603      	mov	r3, r0
 8011194:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011196:	7bfb      	ldrb	r3, [r7, #15]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d117      	bne.n	80111cc <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80111a2:	2220      	movs	r2, #32
 80111a4:	2100      	movs	r1, #0
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7fe fe92 	bl	800fed0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80111b8:	220b      	movs	r2, #11
 80111ba:	4619      	mov	r1, r3
 80111bc:	f7fe fe6a 	bl	800fe94 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80111c6:	2201      	movs	r2, #1
 80111c8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80111cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3710      	adds	r7, #16
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}

080111d6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80111d6:	b480      	push	{r7}
 80111d8:	b087      	sub	sp, #28
 80111da:	af00      	add	r7, sp, #0
 80111dc:	6078      	str	r0, [r7, #4]
 80111de:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	3309      	adds	r3, #9
 80111e4:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d05a      	beq.n	80112a6 <get_fileinfo+0xd0>
		dir = dp->dir;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80111f6:	60bb      	str	r3, [r7, #8]
		i = 0;
 80111f8:	2300      	movs	r3, #0
 80111fa:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 80111fc:	e01c      	b.n	8011238 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	1c5a      	adds	r2, r3, #1
 8011202:	617a      	str	r2, [r7, #20]
 8011204:	68ba      	ldr	r2, [r7, #8]
 8011206:	4413      	add	r3, r2
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 801120c:	7bfb      	ldrb	r3, [r7, #15]
 801120e:	2b20      	cmp	r3, #32
 8011210:	d100      	bne.n	8011214 <get_fileinfo+0x3e>
 8011212:	e011      	b.n	8011238 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8011214:	7bfb      	ldrb	r3, [r7, #15]
 8011216:	2b05      	cmp	r3, #5
 8011218:	d101      	bne.n	801121e <get_fileinfo+0x48>
 801121a:	23e5      	movs	r3, #229	; 0xe5
 801121c:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	2b09      	cmp	r3, #9
 8011222:	d104      	bne.n	801122e <get_fileinfo+0x58>
 8011224:	693b      	ldr	r3, [r7, #16]
 8011226:	1c5a      	adds	r2, r3, #1
 8011228:	613a      	str	r2, [r7, #16]
 801122a:	222e      	movs	r2, #46	; 0x2e
 801122c:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	1c5a      	adds	r2, r3, #1
 8011232:	613a      	str	r2, [r7, #16]
 8011234:	7bfa      	ldrb	r2, [r7, #15]
 8011236:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	2b0a      	cmp	r3, #10
 801123c:	d9df      	bls.n	80111fe <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	7ada      	ldrb	r2, [r3, #11]
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	331f      	adds	r3, #31
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	061a      	lsls	r2, r3, #24
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	331e      	adds	r3, #30
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	041b      	lsls	r3, r3, #16
 8011256:	4313      	orrs	r3, r2
 8011258:	68ba      	ldr	r2, [r7, #8]
 801125a:	321d      	adds	r2, #29
 801125c:	7812      	ldrb	r2, [r2, #0]
 801125e:	0212      	lsls	r2, r2, #8
 8011260:	4313      	orrs	r3, r2
 8011262:	68ba      	ldr	r2, [r7, #8]
 8011264:	321c      	adds	r2, #28
 8011266:	7812      	ldrb	r2, [r2, #0]
 8011268:	431a      	orrs	r2, r3
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	3319      	adds	r3, #25
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	021b      	lsls	r3, r3, #8
 8011276:	b21a      	sxth	r2, r3
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	3318      	adds	r3, #24
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	b21b      	sxth	r3, r3
 8011280:	4313      	orrs	r3, r2
 8011282:	b21b      	sxth	r3, r3
 8011284:	b29a      	uxth	r2, r3
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	3317      	adds	r3, #23
 801128e:	781b      	ldrb	r3, [r3, #0]
 8011290:	021b      	lsls	r3, r3, #8
 8011292:	b21a      	sxth	r2, r3
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	3316      	adds	r3, #22
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	b21b      	sxth	r3, r3
 801129c:	4313      	orrs	r3, r2
 801129e:	b21b      	sxth	r3, r3
 80112a0:	b29a      	uxth	r2, r3
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	2200      	movs	r2, #0
 80112aa:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 80112ac:	bf00      	nop
 80112ae:	371c      	adds	r7, #28
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bc80      	pop	{r7}
 80112b4:	4770      	bx	lr
	...

080112b8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b088      	sub	sp, #32
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	60fb      	str	r3, [r7, #12]
 80112c8:	e002      	b.n	80112d0 <create_name+0x18>
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	3301      	adds	r3, #1
 80112ce:	60fb      	str	r3, [r7, #12]
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	2b2f      	cmp	r3, #47	; 0x2f
 80112d6:	d0f8      	beq.n	80112ca <create_name+0x12>
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	2b5c      	cmp	r3, #92	; 0x5c
 80112de:	d0f4      	beq.n	80112ca <create_name+0x12>
	sfn = dp->fn;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80112e6:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80112e8:	220b      	movs	r2, #11
 80112ea:	2120      	movs	r1, #32
 80112ec:	68b8      	ldr	r0, [r7, #8]
 80112ee:	f7fe fdef 	bl	800fed0 <mem_set>
	si = i = b = 0; ni = 8;
 80112f2:	2300      	movs	r3, #0
 80112f4:	77fb      	strb	r3, [r7, #31]
 80112f6:	2300      	movs	r3, #0
 80112f8:	613b      	str	r3, [r7, #16]
 80112fa:	693b      	ldr	r3, [r7, #16]
 80112fc:	617b      	str	r3, [r7, #20]
 80112fe:	2308      	movs	r3, #8
 8011300:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	1c5a      	adds	r2, r3, #1
 8011306:	617a      	str	r2, [r7, #20]
 8011308:	68fa      	ldr	r2, [r7, #12]
 801130a:	4413      	add	r3, r2
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8011310:	7fbb      	ldrb	r3, [r7, #30]
 8011312:	2b20      	cmp	r3, #32
 8011314:	d953      	bls.n	80113be <create_name+0x106>
 8011316:	7fbb      	ldrb	r3, [r7, #30]
 8011318:	2b2f      	cmp	r3, #47	; 0x2f
 801131a:	d050      	beq.n	80113be <create_name+0x106>
 801131c:	7fbb      	ldrb	r3, [r7, #30]
 801131e:	2b5c      	cmp	r3, #92	; 0x5c
 8011320:	d04d      	beq.n	80113be <create_name+0x106>
		if (c == '.' || i >= ni) {
 8011322:	7fbb      	ldrb	r3, [r7, #30]
 8011324:	2b2e      	cmp	r3, #46	; 0x2e
 8011326:	d003      	beq.n	8011330 <create_name+0x78>
 8011328:	693a      	ldr	r2, [r7, #16]
 801132a:	69bb      	ldr	r3, [r7, #24]
 801132c:	429a      	cmp	r2, r3
 801132e:	d30f      	bcc.n	8011350 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8011330:	69bb      	ldr	r3, [r7, #24]
 8011332:	2b08      	cmp	r3, #8
 8011334:	d102      	bne.n	801133c <create_name+0x84>
 8011336:	7fbb      	ldrb	r3, [r7, #30]
 8011338:	2b2e      	cmp	r3, #46	; 0x2e
 801133a:	d001      	beq.n	8011340 <create_name+0x88>
 801133c:	2306      	movs	r3, #6
 801133e:	e073      	b.n	8011428 <create_name+0x170>
			i = 8; ni = 11;
 8011340:	2308      	movs	r3, #8
 8011342:	613b      	str	r3, [r7, #16]
 8011344:	230b      	movs	r3, #11
 8011346:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8011348:	7ffb      	ldrb	r3, [r7, #31]
 801134a:	009b      	lsls	r3, r3, #2
 801134c:	77fb      	strb	r3, [r7, #31]
 801134e:	e035      	b.n	80113bc <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011350:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011354:	2b00      	cmp	r3, #0
 8011356:	da08      	bge.n	801136a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8011358:	7ffb      	ldrb	r3, [r7, #31]
 801135a:	f043 0303 	orr.w	r3, r3, #3
 801135e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011360:	7fbb      	ldrb	r3, [r7, #30]
 8011362:	3b80      	subs	r3, #128	; 0x80
 8011364:	4a32      	ldr	r2, [pc, #200]	; (8011430 <create_name+0x178>)
 8011366:	5cd3      	ldrb	r3, [r2, r3]
 8011368:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 801136a:	7fbb      	ldrb	r3, [r7, #30]
 801136c:	4619      	mov	r1, r3
 801136e:	4831      	ldr	r0, [pc, #196]	; (8011434 <create_name+0x17c>)
 8011370:	f7fe fdee 	bl	800ff50 <chk_chr>
 8011374:	4603      	mov	r3, r0
 8011376:	2b00      	cmp	r3, #0
 8011378:	d001      	beq.n	801137e <create_name+0xc6>
				return FR_INVALID_NAME;
 801137a:	2306      	movs	r3, #6
 801137c:	e054      	b.n	8011428 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 801137e:	7fbb      	ldrb	r3, [r7, #30]
 8011380:	2b40      	cmp	r3, #64	; 0x40
 8011382:	d907      	bls.n	8011394 <create_name+0xdc>
 8011384:	7fbb      	ldrb	r3, [r7, #30]
 8011386:	2b5a      	cmp	r3, #90	; 0x5a
 8011388:	d804      	bhi.n	8011394 <create_name+0xdc>
				b |= 2;
 801138a:	7ffb      	ldrb	r3, [r7, #31]
 801138c:	f043 0302 	orr.w	r3, r3, #2
 8011390:	77fb      	strb	r3, [r7, #31]
 8011392:	e00c      	b.n	80113ae <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8011394:	7fbb      	ldrb	r3, [r7, #30]
 8011396:	2b60      	cmp	r3, #96	; 0x60
 8011398:	d909      	bls.n	80113ae <create_name+0xf6>
 801139a:	7fbb      	ldrb	r3, [r7, #30]
 801139c:	2b7a      	cmp	r3, #122	; 0x7a
 801139e:	d806      	bhi.n	80113ae <create_name+0xf6>
					b |= 1; c -= 0x20;
 80113a0:	7ffb      	ldrb	r3, [r7, #31]
 80113a2:	f043 0301 	orr.w	r3, r3, #1
 80113a6:	77fb      	strb	r3, [r7, #31]
 80113a8:	7fbb      	ldrb	r3, [r7, #30]
 80113aa:	3b20      	subs	r3, #32
 80113ac:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	1c5a      	adds	r2, r3, #1
 80113b2:	613a      	str	r2, [r7, #16]
 80113b4:	68ba      	ldr	r2, [r7, #8]
 80113b6:	4413      	add	r3, r2
 80113b8:	7fba      	ldrb	r2, [r7, #30]
 80113ba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80113bc:	e7a1      	b.n	8011302 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80113be:	68fa      	ldr	r2, [r7, #12]
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	441a      	add	r2, r3
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80113c8:	7fbb      	ldrb	r3, [r7, #30]
 80113ca:	2b20      	cmp	r3, #32
 80113cc:	d801      	bhi.n	80113d2 <create_name+0x11a>
 80113ce:	2304      	movs	r3, #4
 80113d0:	e000      	b.n	80113d4 <create_name+0x11c>
 80113d2:	2300      	movs	r3, #0
 80113d4:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d101      	bne.n	80113e0 <create_name+0x128>
 80113dc:	2306      	movs	r3, #6
 80113de:	e023      	b.n	8011428 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80113e0:	68bb      	ldr	r3, [r7, #8]
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	2be5      	cmp	r3, #229	; 0xe5
 80113e6:	d102      	bne.n	80113ee <create_name+0x136>
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	2205      	movs	r2, #5
 80113ec:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80113ee:	69bb      	ldr	r3, [r7, #24]
 80113f0:	2b08      	cmp	r3, #8
 80113f2:	d102      	bne.n	80113fa <create_name+0x142>
 80113f4:	7ffb      	ldrb	r3, [r7, #31]
 80113f6:	009b      	lsls	r3, r3, #2
 80113f8:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80113fa:	7ffb      	ldrb	r3, [r7, #31]
 80113fc:	f003 0303 	and.w	r3, r3, #3
 8011400:	2b01      	cmp	r3, #1
 8011402:	d103      	bne.n	801140c <create_name+0x154>
 8011404:	7fbb      	ldrb	r3, [r7, #30]
 8011406:	f043 0310 	orr.w	r3, r3, #16
 801140a:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 801140c:	7ffb      	ldrb	r3, [r7, #31]
 801140e:	f003 030c 	and.w	r3, r3, #12
 8011412:	2b04      	cmp	r3, #4
 8011414:	d103      	bne.n	801141e <create_name+0x166>
 8011416:	7fbb      	ldrb	r3, [r7, #30]
 8011418:	f043 0308 	orr.w	r3, r3, #8
 801141c:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	330b      	adds	r3, #11
 8011422:	7fba      	ldrb	r2, [r7, #30]
 8011424:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011426:	2300      	movs	r3, #0
#endif
}
 8011428:	4618      	mov	r0, r3
 801142a:	3720      	adds	r7, #32
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}
 8011430:	0801acd0 	.word	0x0801acd0
 8011434:	0801ac60 	.word	0x0801ac60

08011438 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	2b2f      	cmp	r3, #47	; 0x2f
 8011448:	d003      	beq.n	8011452 <follow_path+0x1a>
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	781b      	ldrb	r3, [r3, #0]
 801144e:	2b5c      	cmp	r3, #92	; 0x5c
 8011450:	d102      	bne.n	8011458 <follow_path+0x20>
		path++;
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	3301      	adds	r3, #1
 8011456:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	2b1f      	cmp	r3, #31
 8011466:	d80a      	bhi.n	801147e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8011468:	2100      	movs	r1, #0
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f7ff fba4 	bl	8010bb8 <dir_sdi>
 8011470:	4603      	mov	r3, r0
 8011472:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2200      	movs	r2, #0
 8011478:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 801147c:	e045      	b.n	801150a <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801147e:	463b      	mov	r3, r7
 8011480:	4619      	mov	r1, r3
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f7ff ff18 	bl	80112b8 <create_name>
 8011488:	4603      	mov	r3, r0
 801148a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 801148c:	7bfb      	ldrb	r3, [r7, #15]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d136      	bne.n	8011500 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f7ff fdb8 	bl	8011008 <dir_find>
 8011498:	4603      	mov	r3, r0
 801149a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80114a2:	7adb      	ldrb	r3, [r3, #11]
 80114a4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80114a6:	7bfb      	ldrb	r3, [r7, #15]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00a      	beq.n	80114c2 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80114ac:	7bfb      	ldrb	r3, [r7, #15]
 80114ae:	2b04      	cmp	r3, #4
 80114b0:	d128      	bne.n	8011504 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80114b2:	7bbb      	ldrb	r3, [r7, #14]
 80114b4:	f003 0304 	and.w	r3, r3, #4
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d123      	bne.n	8011504 <follow_path+0xcc>
 80114bc:	2305      	movs	r3, #5
 80114be:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80114c0:	e020      	b.n	8011504 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80114c2:	7bbb      	ldrb	r3, [r7, #14]
 80114c4:	f003 0304 	and.w	r3, r3, #4
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d11d      	bne.n	8011508 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80114d2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	330b      	adds	r3, #11
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	f003 0310 	and.w	r3, r3, #16
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d102      	bne.n	80114e8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80114e2:	2305      	movs	r3, #5
 80114e4:	73fb      	strb	r3, [r7, #15]
 80114e6:	e010      	b.n	801150a <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114ee:	68b9      	ldr	r1, [r7, #8]
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7ff fd36 	bl	8010f62 <ld_clust>
 80114f6:	4602      	mov	r2, r0
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80114fe:	e7be      	b.n	801147e <follow_path+0x46>
			if (res != FR_OK) break;
 8011500:	bf00      	nop
 8011502:	e002      	b.n	801150a <follow_path+0xd2>
				break;
 8011504:	bf00      	nop
 8011506:	e000      	b.n	801150a <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011508:	bf00      	nop
		}
	}

	return res;
 801150a:	7bfb      	ldrb	r3, [r7, #15]
}
 801150c:	4618      	mov	r0, r3
 801150e:	3710      	adds	r7, #16
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011514:	b480      	push	{r7}
 8011516:	b087      	sub	sp, #28
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801151c:	f04f 33ff 	mov.w	r3, #4294967295
 8011520:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d031      	beq.n	801158e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	617b      	str	r3, [r7, #20]
 8011530:	e002      	b.n	8011538 <get_ldnumber+0x24>
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	3301      	adds	r3, #1
 8011536:	617b      	str	r3, [r7, #20]
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	781b      	ldrb	r3, [r3, #0]
 801153c:	2b20      	cmp	r3, #32
 801153e:	d903      	bls.n	8011548 <get_ldnumber+0x34>
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	781b      	ldrb	r3, [r3, #0]
 8011544:	2b3a      	cmp	r3, #58	; 0x3a
 8011546:	d1f4      	bne.n	8011532 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	2b3a      	cmp	r3, #58	; 0x3a
 801154e:	d11c      	bne.n	801158a <get_ldnumber+0x76>
			tp = *path;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	1c5a      	adds	r2, r3, #1
 801155a:	60fa      	str	r2, [r7, #12]
 801155c:	781b      	ldrb	r3, [r3, #0]
 801155e:	3b30      	subs	r3, #48	; 0x30
 8011560:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	2b09      	cmp	r3, #9
 8011566:	d80e      	bhi.n	8011586 <get_ldnumber+0x72>
 8011568:	68fa      	ldr	r2, [r7, #12]
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	429a      	cmp	r2, r3
 801156e:	d10a      	bne.n	8011586 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d107      	bne.n	8011586 <get_ldnumber+0x72>
					vol = (int)i;
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	3301      	adds	r3, #1
 801157e:	617b      	str	r3, [r7, #20]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	697a      	ldr	r2, [r7, #20]
 8011584:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	e002      	b.n	8011590 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801158a:	2300      	movs	r3, #0
 801158c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801158e:	693b      	ldr	r3, [r7, #16]
}
 8011590:	4618      	mov	r0, r3
 8011592:	371c      	adds	r7, #28
 8011594:	46bd      	mov	sp, r7
 8011596:	bc80      	pop	{r7}
 8011598:	4770      	bx	lr
	...

0801159c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2200      	movs	r2, #0
 80115aa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f04f 32ff 	mov.w	r2, #4294967295
 80115b4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80115b8:	6839      	ldr	r1, [r7, #0]
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f7fe ff0d 	bl	80103da <move_window>
 80115c0:	4603      	mov	r3, r0
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d001      	beq.n	80115ca <check_fs+0x2e>
		return 3;
 80115c6:	2303      	movs	r3, #3
 80115c8:	e04a      	b.n	8011660 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80115d0:	3301      	adds	r3, #1
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	021b      	lsls	r3, r3, #8
 80115d6:	b21a      	sxth	r2, r3
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80115de:	b21b      	sxth	r3, r3
 80115e0:	4313      	orrs	r3, r2
 80115e2:	b21b      	sxth	r3, r3
 80115e4:	4a20      	ldr	r2, [pc, #128]	; (8011668 <check_fs+0xcc>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d001      	beq.n	80115ee <check_fs+0x52>
		return 2;
 80115ea:	2302      	movs	r3, #2
 80115ec:	e038      	b.n	8011660 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	3336      	adds	r3, #54	; 0x36
 80115f2:	3303      	adds	r3, #3
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	061a      	lsls	r2, r3, #24
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	3336      	adds	r3, #54	; 0x36
 80115fc:	3302      	adds	r3, #2
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	041b      	lsls	r3, r3, #16
 8011602:	4313      	orrs	r3, r2
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	3236      	adds	r2, #54	; 0x36
 8011608:	3201      	adds	r2, #1
 801160a:	7812      	ldrb	r2, [r2, #0]
 801160c:	0212      	lsls	r2, r2, #8
 801160e:	4313      	orrs	r3, r2
 8011610:	687a      	ldr	r2, [r7, #4]
 8011612:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8011616:	4313      	orrs	r3, r2
 8011618:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801161c:	4a13      	ldr	r2, [pc, #76]	; (801166c <check_fs+0xd0>)
 801161e:	4293      	cmp	r3, r2
 8011620:	d101      	bne.n	8011626 <check_fs+0x8a>
		return 0;
 8011622:	2300      	movs	r3, #0
 8011624:	e01c      	b.n	8011660 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	3352      	adds	r3, #82	; 0x52
 801162a:	3303      	adds	r3, #3
 801162c:	781b      	ldrb	r3, [r3, #0]
 801162e:	061a      	lsls	r2, r3, #24
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	3352      	adds	r3, #82	; 0x52
 8011634:	3302      	adds	r3, #2
 8011636:	781b      	ldrb	r3, [r3, #0]
 8011638:	041b      	lsls	r3, r3, #16
 801163a:	4313      	orrs	r3, r2
 801163c:	687a      	ldr	r2, [r7, #4]
 801163e:	3252      	adds	r2, #82	; 0x52
 8011640:	3201      	adds	r2, #1
 8011642:	7812      	ldrb	r2, [r2, #0]
 8011644:	0212      	lsls	r2, r2, #8
 8011646:	4313      	orrs	r3, r2
 8011648:	687a      	ldr	r2, [r7, #4]
 801164a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 801164e:	4313      	orrs	r3, r2
 8011650:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011654:	4a05      	ldr	r2, [pc, #20]	; (801166c <check_fs+0xd0>)
 8011656:	4293      	cmp	r3, r2
 8011658:	d101      	bne.n	801165e <check_fs+0xc2>
		return 0;
 801165a:	2300      	movs	r3, #0
 801165c:	e000      	b.n	8011660 <check_fs+0xc4>

	return 1;
 801165e:	2301      	movs	r3, #1
}
 8011660:	4618      	mov	r0, r3
 8011662:	3708      	adds	r7, #8
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}
 8011668:	ffffaa55 	.word	0xffffaa55
 801166c:	00544146 	.word	0x00544146

08011670 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b096      	sub	sp, #88	; 0x58
 8011674:	af00      	add	r7, sp, #0
 8011676:	60f8      	str	r0, [r7, #12]
 8011678:	60b9      	str	r1, [r7, #8]
 801167a:	4613      	mov	r3, r2
 801167c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2200      	movs	r2, #0
 8011682:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011684:	68b8      	ldr	r0, [r7, #8]
 8011686:	f7ff ff45 	bl	8011514 <get_ldnumber>
 801168a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801168c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801168e:	2b00      	cmp	r3, #0
 8011690:	da01      	bge.n	8011696 <find_volume+0x26>
 8011692:	230b      	movs	r3, #11
 8011694:	e2b2      	b.n	8011bfc <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011696:	4aa2      	ldr	r2, [pc, #648]	; (8011920 <find_volume+0x2b0>)
 8011698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801169e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80116a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d101      	bne.n	80116aa <find_volume+0x3a>
 80116a6:	230c      	movs	r3, #12
 80116a8:	e2a8      	b.n	8011bfc <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 80116aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80116ac:	f7fe fc6a 	bl	800ff84 <lock_fs>
 80116b0:	4603      	mov	r3, r0
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d101      	bne.n	80116ba <find_volume+0x4a>
 80116b6:	230f      	movs	r3, #15
 80116b8:	e2a0      	b.n	8011bfc <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116be:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80116c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d01b      	beq.n	8011702 <find_volume+0x92>
		stat = disk_status(fs->drv);
 80116ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116cc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7fe fb41 	bl	800fd58 <disk_status>
 80116d6:	4603      	mov	r3, r0
 80116d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80116dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80116e0:	f003 0301 	and.w	r3, r3, #1
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d10c      	bne.n	8011702 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80116e8:	79fb      	ldrb	r3, [r7, #7]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d007      	beq.n	80116fe <find_volume+0x8e>
 80116ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80116f2:	f003 0304 	and.w	r3, r3, #4
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d001      	beq.n	80116fe <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 80116fa:	230a      	movs	r3, #10
 80116fc:	e27e      	b.n	8011bfc <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 80116fe:	2300      	movs	r3, #0
 8011700:	e27c      	b.n	8011bfc <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011704:	2200      	movs	r2, #0
 8011706:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801170a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801170c:	b2da      	uxtb	r2, r3
 801170e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011710:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011716:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801171a:	4618      	mov	r0, r3
 801171c:	f7fe fb36 	bl	800fd8c <disk_initialize>
 8011720:	4603      	mov	r3, r0
 8011722:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8011726:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801172a:	f003 0301 	and.w	r3, r3, #1
 801172e:	2b00      	cmp	r3, #0
 8011730:	d001      	beq.n	8011736 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011732:	2303      	movs	r3, #3
 8011734:	e262      	b.n	8011bfc <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8011736:	79fb      	ldrb	r3, [r7, #7]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d007      	beq.n	801174c <find_volume+0xdc>
 801173c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011740:	f003 0304 	and.w	r3, r3, #4
 8011744:	2b00      	cmp	r3, #0
 8011746:	d001      	beq.n	801174c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8011748:	230a      	movs	r3, #10
 801174a:	e257      	b.n	8011bfc <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 801174c:	2300      	movs	r3, #0
 801174e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8011750:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011752:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011754:	f7ff ff22 	bl	801159c <check_fs>
 8011758:	4603      	mov	r3, r0
 801175a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 801175e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011762:	2b01      	cmp	r3, #1
 8011764:	d155      	bne.n	8011812 <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8011766:	2300      	movs	r3, #0
 8011768:	643b      	str	r3, [r7, #64]	; 0x40
 801176a:	e029      	b.n	80117c0 <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 801176c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801176e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011770:	011b      	lsls	r3, r3, #4
 8011772:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011776:	4413      	add	r3, r2
 8011778:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 801177a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177c:	3304      	adds	r3, #4
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d012      	beq.n	80117aa <find_volume+0x13a>
 8011784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011786:	330b      	adds	r3, #11
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	061a      	lsls	r2, r3, #24
 801178c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801178e:	330a      	adds	r3, #10
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	041b      	lsls	r3, r3, #16
 8011794:	4313      	orrs	r3, r2
 8011796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011798:	3209      	adds	r2, #9
 801179a:	7812      	ldrb	r2, [r2, #0]
 801179c:	0212      	lsls	r2, r2, #8
 801179e:	4313      	orrs	r3, r2
 80117a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117a2:	3208      	adds	r2, #8
 80117a4:	7812      	ldrb	r2, [r2, #0]
 80117a6:	431a      	orrs	r2, r3
 80117a8:	e000      	b.n	80117ac <find_volume+0x13c>
 80117aa:	2200      	movs	r2, #0
 80117ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117ae:	009b      	lsls	r3, r3, #2
 80117b0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80117b4:	440b      	add	r3, r1
 80117b6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80117ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117bc:	3301      	adds	r3, #1
 80117be:	643b      	str	r3, [r7, #64]	; 0x40
 80117c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117c2:	2b03      	cmp	r3, #3
 80117c4:	d9d2      	bls.n	801176c <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80117c6:	2300      	movs	r3, #0
 80117c8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80117ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d002      	beq.n	80117d6 <find_volume+0x166>
 80117d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117d2:	3b01      	subs	r3, #1
 80117d4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80117d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80117de:	4413      	add	r3, r2
 80117e0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80117e4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80117e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d005      	beq.n	80117f8 <find_volume+0x188>
 80117ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80117ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80117f0:	f7ff fed4 	bl	801159c <check_fs>
 80117f4:	4603      	mov	r3, r0
 80117f6:	e000      	b.n	80117fa <find_volume+0x18a>
 80117f8:	2302      	movs	r3, #2
 80117fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80117fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011802:	2b00      	cmp	r3, #0
 8011804:	d005      	beq.n	8011812 <find_volume+0x1a2>
 8011806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011808:	3301      	adds	r3, #1
 801180a:	643b      	str	r3, [r7, #64]	; 0x40
 801180c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801180e:	2b03      	cmp	r3, #3
 8011810:	d9e1      	bls.n	80117d6 <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011812:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011816:	2b03      	cmp	r3, #3
 8011818:	d101      	bne.n	801181e <find_volume+0x1ae>
 801181a:	2301      	movs	r3, #1
 801181c:	e1ee      	b.n	8011bfc <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 801181e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011822:	2b00      	cmp	r3, #0
 8011824:	d001      	beq.n	801182a <find_volume+0x1ba>
 8011826:	230d      	movs	r3, #13
 8011828:	e1e8      	b.n	8011bfc <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801182a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182c:	7b1b      	ldrb	r3, [r3, #12]
 801182e:	021b      	lsls	r3, r3, #8
 8011830:	b21a      	sxth	r2, r3
 8011832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011834:	7adb      	ldrb	r3, [r3, #11]
 8011836:	b21b      	sxth	r3, r3
 8011838:	4313      	orrs	r3, r2
 801183a:	b21b      	sxth	r3, r3
 801183c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011840:	d001      	beq.n	8011846 <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 8011842:	230d      	movs	r3, #13
 8011844:	e1da      	b.n	8011bfc <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8011846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011848:	7ddb      	ldrb	r3, [r3, #23]
 801184a:	021b      	lsls	r3, r3, #8
 801184c:	b21a      	sxth	r2, r3
 801184e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011850:	7d9b      	ldrb	r3, [r3, #22]
 8011852:	b21b      	sxth	r3, r3
 8011854:	4313      	orrs	r3, r2
 8011856:	b21b      	sxth	r3, r3
 8011858:	b29b      	uxth	r3, r3
 801185a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 801185c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801185e:	2b00      	cmp	r3, #0
 8011860:	d112      	bne.n	8011888 <find_volume+0x218>
 8011862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011864:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011868:	061a      	lsls	r2, r3, #24
 801186a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8011870:	041b      	lsls	r3, r3, #16
 8011872:	4313      	orrs	r3, r2
 8011874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011876:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 801187a:	0212      	lsls	r2, r2, #8
 801187c:	4313      	orrs	r3, r2
 801187e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011880:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8011884:	4313      	orrs	r3, r2
 8011886:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8011888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801188c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8011890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011892:	7c1a      	ldrb	r2, [r3, #16]
 8011894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011896:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 801189a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801189c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d006      	beq.n	80118b2 <find_volume+0x242>
 80118a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a6:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80118aa:	2b02      	cmp	r3, #2
 80118ac:	d001      	beq.n	80118b2 <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 80118ae:	230d      	movs	r3, #13
 80118b0:	e1a4      	b.n	8011bfc <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80118b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80118b8:	461a      	mov	r2, r3
 80118ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118bc:	fb02 f303 	mul.w	r3, r2, r3
 80118c0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80118c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c4:	7b5a      	ldrb	r2, [r3, #13]
 80118c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c8:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80118cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ce:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d00a      	beq.n	80118ec <find_volume+0x27c>
 80118d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118d8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80118dc:	461a      	mov	r2, r3
 80118de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80118e4:	3b01      	subs	r3, #1
 80118e6:	4013      	ands	r3, r2
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d001      	beq.n	80118f0 <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 80118ec:	230d      	movs	r3, #13
 80118ee:	e185      	b.n	8011bfc <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80118f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f2:	7c9b      	ldrb	r3, [r3, #18]
 80118f4:	021b      	lsls	r3, r3, #8
 80118f6:	b21a      	sxth	r2, r3
 80118f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118fa:	7c5b      	ldrb	r3, [r3, #17]
 80118fc:	b21b      	sxth	r3, r3
 80118fe:	4313      	orrs	r3, r2
 8011900:	b21b      	sxth	r3, r3
 8011902:	b29a      	uxth	r2, r3
 8011904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011906:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 801190a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801190c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011910:	f003 030f 	and.w	r3, r3, #15
 8011914:	b29b      	uxth	r3, r3
 8011916:	2b00      	cmp	r3, #0
 8011918:	d004      	beq.n	8011924 <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 801191a:	230d      	movs	r3, #13
 801191c:	e16e      	b.n	8011bfc <find_volume+0x58c>
 801191e:	bf00      	nop
 8011920:	20007ac4 	.word	0x20007ac4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8011924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011926:	7d1b      	ldrb	r3, [r3, #20]
 8011928:	021b      	lsls	r3, r3, #8
 801192a:	b21a      	sxth	r2, r3
 801192c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801192e:	7cdb      	ldrb	r3, [r3, #19]
 8011930:	b21b      	sxth	r3, r3
 8011932:	4313      	orrs	r3, r2
 8011934:	b21b      	sxth	r3, r3
 8011936:	b29b      	uxth	r3, r3
 8011938:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 801193a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801193c:	2b00      	cmp	r3, #0
 801193e:	d112      	bne.n	8011966 <find_volume+0x2f6>
 8011940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011942:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011946:	061a      	lsls	r2, r3, #24
 8011948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801194a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801194e:	041b      	lsls	r3, r3, #16
 8011950:	4313      	orrs	r3, r2
 8011952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011954:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8011958:	0212      	lsls	r2, r2, #8
 801195a:	4313      	orrs	r3, r2
 801195c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801195e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8011962:	4313      	orrs	r3, r2
 8011964:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8011966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011968:	7bdb      	ldrb	r3, [r3, #15]
 801196a:	021b      	lsls	r3, r3, #8
 801196c:	b21a      	sxth	r2, r3
 801196e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011970:	7b9b      	ldrb	r3, [r3, #14]
 8011972:	b21b      	sxth	r3, r3
 8011974:	4313      	orrs	r3, r2
 8011976:	b21b      	sxth	r3, r3
 8011978:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 801197a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801197c:	2b00      	cmp	r3, #0
 801197e:	d101      	bne.n	8011984 <find_volume+0x314>
 8011980:	230d      	movs	r3, #13
 8011982:	e13b      	b.n	8011bfc <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8011984:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011988:	4413      	add	r3, r2
 801198a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801198c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8011990:	0912      	lsrs	r2, r2, #4
 8011992:	b292      	uxth	r2, r2
 8011994:	4413      	add	r3, r2
 8011996:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801199a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801199c:	429a      	cmp	r2, r3
 801199e:	d201      	bcs.n	80119a4 <find_volume+0x334>
 80119a0:	230d      	movs	r3, #13
 80119a2:	e12b      	b.n	8011bfc <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80119a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80119a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119a8:	1ad3      	subs	r3, r2, r3
 80119aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119ac:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80119b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80119b4:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80119b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d101      	bne.n	80119c0 <find_volume+0x350>
 80119bc:	230d      	movs	r3, #13
 80119be:	e11d      	b.n	8011bfc <find_volume+0x58c>
	fmt = FS_FAT12;
 80119c0:	2301      	movs	r3, #1
 80119c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80119c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80119cc:	4293      	cmp	r3, r2
 80119ce:	d902      	bls.n	80119d6 <find_volume+0x366>
 80119d0:	2302      	movs	r3, #2
 80119d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80119d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80119dc:	4293      	cmp	r3, r2
 80119de:	d902      	bls.n	80119e6 <find_volume+0x376>
 80119e0:	2303      	movs	r3, #3
 80119e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80119e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e8:	1c9a      	adds	r2, r3, #2
 80119ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 80119f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80119f4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80119f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80119fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119fc:	441a      	add	r2, r3
 80119fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a00:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8011a04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a08:	441a      	add	r2, r3
 8011a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a0c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 8011a10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011a14:	2b03      	cmp	r3, #3
 8011a16:	d121      	bne.n	8011a5c <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8011a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a1a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d001      	beq.n	8011a26 <find_volume+0x3b6>
 8011a22:	230d      	movs	r3, #13
 8011a24:	e0ea      	b.n	8011bfc <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8011a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011a2c:	061a      	lsls	r2, r3, #24
 8011a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a30:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011a34:	041b      	lsls	r3, r3, #16
 8011a36:	4313      	orrs	r3, r2
 8011a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a3a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8011a3e:	0212      	lsls	r2, r2, #8
 8011a40:	4313      	orrs	r3, r2
 8011a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a44:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8011a48:	431a      	orrs	r2, r3
 8011a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a4c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8011a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a52:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011a56:	009b      	lsls	r3, r3, #2
 8011a58:	647b      	str	r3, [r7, #68]	; 0x44
 8011a5a:	e025      	b.n	8011aa8 <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8011a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a5e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d101      	bne.n	8011a6a <find_volume+0x3fa>
 8011a66:	230d      	movs	r3, #13
 8011a68:	e0c8      	b.n	8011bfc <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8011a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a6c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8011a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a72:	441a      	add	r2, r3
 8011a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a76:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011a7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011a7e:	2b02      	cmp	r3, #2
 8011a80:	d104      	bne.n	8011a8c <find_volume+0x41c>
 8011a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a84:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011a88:	005b      	lsls	r3, r3, #1
 8011a8a:	e00c      	b.n	8011aa6 <find_volume+0x436>
 8011a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a8e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011a92:	4613      	mov	r3, r2
 8011a94:	005b      	lsls	r3, r3, #1
 8011a96:	4413      	add	r3, r2
 8011a98:	085a      	lsrs	r2, r3, #1
 8011a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011aa0:	f003 0301 	and.w	r3, r3, #1
 8011aa4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8011aa6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8011aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aaa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8011aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ab0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011ab4:	0a5b      	lsrs	r3, r3, #9
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d201      	bcs.n	8011abe <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 8011aba:	230d      	movs	r3, #13
 8011abc:	e09e      	b.n	8011bfc <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8011abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ac4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8011ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8011ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad6:	2280      	movs	r2, #128	; 0x80
 8011ad8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8011adc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ae0:	2b03      	cmp	r3, #3
 8011ae2:	d177      	bne.n	8011bd4 <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8011ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011aea:	021b      	lsls	r3, r3, #8
 8011aec:	b21a      	sxth	r2, r3
 8011aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011af4:	b21b      	sxth	r3, r3
 8011af6:	4313      	orrs	r3, r2
 8011af8:	b21b      	sxth	r3, r3
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	d16a      	bne.n	8011bd4 <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 8011afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b00:	3301      	adds	r3, #1
 8011b02:	4619      	mov	r1, r3
 8011b04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b06:	f7fe fc68 	bl	80103da <move_window>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d161      	bne.n	8011bd4 <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 8011b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b12:	2200      	movs	r2, #0
 8011b14:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b1a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8011b1e:	021b      	lsls	r3, r3, #8
 8011b20:	b21a      	sxth	r2, r3
 8011b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b24:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8011b28:	b21b      	sxth	r3, r3
 8011b2a:	4313      	orrs	r3, r2
 8011b2c:	b21b      	sxth	r3, r3
 8011b2e:	4a35      	ldr	r2, [pc, #212]	; (8011c04 <find_volume+0x594>)
 8011b30:	4293      	cmp	r3, r2
 8011b32:	d14f      	bne.n	8011bd4 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8011b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b36:	78db      	ldrb	r3, [r3, #3]
 8011b38:	061a      	lsls	r2, r3, #24
 8011b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3c:	789b      	ldrb	r3, [r3, #2]
 8011b3e:	041b      	lsls	r3, r3, #16
 8011b40:	4313      	orrs	r3, r2
 8011b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b44:	7852      	ldrb	r2, [r2, #1]
 8011b46:	0212      	lsls	r2, r2, #8
 8011b48:	4313      	orrs	r3, r2
 8011b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b4c:	7812      	ldrb	r2, [r2, #0]
 8011b4e:	4313      	orrs	r3, r2
 8011b50:	4a2d      	ldr	r2, [pc, #180]	; (8011c08 <find_volume+0x598>)
 8011b52:	4293      	cmp	r3, r2
 8011b54:	d13e      	bne.n	8011bd4 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8011b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b58:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8011b5c:	061a      	lsls	r2, r3, #24
 8011b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b60:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8011b64:	041b      	lsls	r3, r3, #16
 8011b66:	4313      	orrs	r3, r2
 8011b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b6a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8011b6e:	0212      	lsls	r2, r2, #8
 8011b70:	4313      	orrs	r3, r2
 8011b72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b74:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8011b78:	4313      	orrs	r3, r2
 8011b7a:	4a24      	ldr	r2, [pc, #144]	; (8011c0c <find_volume+0x59c>)
 8011b7c:	4293      	cmp	r3, r2
 8011b7e:	d129      	bne.n	8011bd4 <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8011b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b82:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8011b86:	061a      	lsls	r2, r3, #24
 8011b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b8a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8011b8e:	041b      	lsls	r3, r3, #16
 8011b90:	4313      	orrs	r3, r2
 8011b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b94:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8011b98:	0212      	lsls	r2, r2, #8
 8011b9a:	4313      	orrs	r3, r2
 8011b9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b9e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8011ba2:	431a      	orrs	r2, r3
 8011ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8011baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bac:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8011bb0:	061a      	lsls	r2, r3, #24
 8011bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb4:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8011bb8:	041b      	lsls	r3, r3, #16
 8011bba:	4313      	orrs	r3, r2
 8011bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011bbe:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8011bc2:	0212      	lsls	r2, r2, #8
 8011bc4:	4313      	orrs	r3, r2
 8011bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011bc8:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8011bcc:	431a      	orrs	r2, r3
 8011bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8011bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011bda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8011bde:	4b0c      	ldr	r3, [pc, #48]	; (8011c10 <find_volume+0x5a0>)
 8011be0:	881b      	ldrh	r3, [r3, #0]
 8011be2:	3301      	adds	r3, #1
 8011be4:	b29a      	uxth	r2, r3
 8011be6:	4b0a      	ldr	r3, [pc, #40]	; (8011c10 <find_volume+0x5a0>)
 8011be8:	801a      	strh	r2, [r3, #0]
 8011bea:	4b09      	ldr	r3, [pc, #36]	; (8011c10 <find_volume+0x5a0>)
 8011bec:	881a      	ldrh	r2, [r3, #0]
 8011bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8011bf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011bf6:	f7fe fb7d 	bl	80102f4 <clear_lock>
#endif

	return FR_OK;
 8011bfa:	2300      	movs	r3, #0
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3758      	adds	r7, #88	; 0x58
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	ffffaa55 	.word	0xffffaa55
 8011c08:	41615252 	.word	0x41615252
 8011c0c:	61417272 	.word	0x61417272
 8011c10:	20007ac8 	.word	0x20007ac8

08011c14 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b084      	sub	sp, #16
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d022      	beq.n	8011c6c <validate+0x58>
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d01d      	beq.n	8011c6c <validate+0x58>
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011c36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d016      	beq.n	8011c6c <validate+0x58>
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011c44:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d10c      	bne.n	8011c6c <validate+0x58>
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011c58:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7fe f87b 	bl	800fd58 <disk_status>
 8011c62:	4603      	mov	r3, r0
 8011c64:	f003 0301 	and.w	r3, r3, #1
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d001      	beq.n	8011c70 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8011c6c:	2309      	movs	r3, #9
 8011c6e:	e00b      	b.n	8011c88 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7fe f984 	bl	800ff84 <lock_fs>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d101      	bne.n	8011c86 <validate+0x72>
 8011c82:	230f      	movs	r3, #15
 8011c84:	e000      	b.n	8011c88 <validate+0x74>

	return FR_OK;
 8011c86:	2300      	movs	r3, #0
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3710      	adds	r7, #16
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b088      	sub	sp, #32
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8011ca2:	f107 0310 	add.w	r3, r7, #16
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f7ff fc34 	bl	8011514 <get_ldnumber>
 8011cac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011cae:	69fb      	ldr	r3, [r7, #28]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	da01      	bge.n	8011cb8 <f_mount+0x28>
 8011cb4:	230b      	movs	r3, #11
 8011cb6:	e04c      	b.n	8011d52 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011cb8:	4a28      	ldr	r2, [pc, #160]	; (8011d5c <f_mount+0xcc>)
 8011cba:	69fb      	ldr	r3, [r7, #28]
 8011cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011cc0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011cc2:	69bb      	ldr	r3, [r7, #24]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d011      	beq.n	8011cec <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8011cc8:	69b8      	ldr	r0, [r7, #24]
 8011cca:	f7fe fb13 	bl	80102f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8011cce:	69bb      	ldr	r3, [r7, #24]
 8011cd0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f001 f917 	bl	8012f08 <ff_del_syncobj>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d101      	bne.n	8011ce4 <f_mount+0x54>
 8011ce0:	2302      	movs	r3, #2
 8011ce2:	e036      	b.n	8011d52 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011ce4:	69bb      	ldr	r3, [r7, #24]
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d011      	beq.n	8011d16 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8011cfa:	69fb      	ldr	r3, [r7, #28]
 8011cfc:	b2da      	uxtb	r2, r3
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8011d04:	4619      	mov	r1, r3
 8011d06:	4610      	mov	r0, r2
 8011d08:	f001 f8de 	bl	8012ec8 <ff_cre_syncobj>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d101      	bne.n	8011d16 <f_mount+0x86>
 8011d12:	2302      	movs	r3, #2
 8011d14:	e01d      	b.n	8011d52 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011d16:	68fa      	ldr	r2, [r7, #12]
 8011d18:	4910      	ldr	r1, [pc, #64]	; (8011d5c <f_mount+0xcc>)
 8011d1a:	69fb      	ldr	r3, [r7, #28]
 8011d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d002      	beq.n	8011d2c <f_mount+0x9c>
 8011d26:	79fb      	ldrb	r3, [r7, #7]
 8011d28:	2b01      	cmp	r3, #1
 8011d2a:	d001      	beq.n	8011d30 <f_mount+0xa0>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	e010      	b.n	8011d52 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8011d30:	f107 0108 	add.w	r1, r7, #8
 8011d34:	f107 030c 	add.w	r3, r7, #12
 8011d38:	2200      	movs	r2, #0
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7ff fc98 	bl	8011670 <find_volume>
 8011d40:	4603      	mov	r3, r0
 8011d42:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	7dfa      	ldrb	r2, [r7, #23]
 8011d48:	4611      	mov	r1, r2
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7fe f929 	bl	800ffa2 <unlock_fs>
 8011d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	3720      	adds	r7, #32
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}
 8011d5a:	bf00      	nop
 8011d5c:	20007ac4 	.word	0x20007ac4

08011d60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	f107 030c 	add.w	r3, r7, #12
 8011d6c:	6018      	str	r0, [r3, #0]
 8011d6e:	f107 0308 	add.w	r3, r7, #8
 8011d72:	6019      	str	r1, [r3, #0]
 8011d74:	1dfb      	adds	r3, r7, #7
 8011d76:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8011d78:	f107 030c 	add.w	r3, r7, #12
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d101      	bne.n	8011d86 <f_open+0x26>
 8011d82:	2309      	movs	r3, #9
 8011d84:	e1fc      	b.n	8012180 <f_open+0x420>
	fp->fs = 0;			/* Clear file object */
 8011d86:	f107 030c 	add.w	r3, r7, #12
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8011d92:	1dfb      	adds	r3, r7, #7
 8011d94:	1dfa      	adds	r2, r7, #7
 8011d96:	7812      	ldrb	r2, [r2, #0]
 8011d98:	f002 021f 	and.w	r2, r2, #31
 8011d9c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8011d9e:	1dfb      	adds	r3, r7, #7
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	f023 0301 	bic.w	r3, r3, #1
 8011da6:	b2da      	uxtb	r2, r3
 8011da8:	f107 0108 	add.w	r1, r7, #8
 8011dac:	f107 0320 	add.w	r3, r7, #32
 8011db0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011db4:	4618      	mov	r0, r3
 8011db6:	f7ff fc5b 	bl	8011670 <find_volume>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8011dc0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	f040 81cf 	bne.w	8012168 <f_open+0x408>
		INIT_BUF(dj);
 8011dca:	f107 0320 	add.w	r3, r7, #32
 8011dce:	f107 0214 	add.w	r2, r7, #20
 8011dd2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8011dd6:	f107 0308 	add.w	r3, r7, #8
 8011dda:	681a      	ldr	r2, [r3, #0]
 8011ddc:	f107 0320 	add.w	r3, r7, #32
 8011de0:	4611      	mov	r1, r2
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7ff fb28 	bl	8011438 <follow_path>
 8011de8:	4603      	mov	r3, r0
 8011dea:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8011dee:	f107 0320 	add.w	r3, r7, #32
 8011df2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011df6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011dfa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d11a      	bne.n	8011e38 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8011e02:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d103      	bne.n	8011e12 <f_open+0xb2>
				res = FR_INVALID_NAME;
 8011e0a:	2306      	movs	r3, #6
 8011e0c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8011e10:	e012      	b.n	8011e38 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011e12:	1dfb      	adds	r3, r7, #7
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	f023 0301 	bic.w	r3, r3, #1
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	bf14      	ite	ne
 8011e1e:	2301      	movne	r3, #1
 8011e20:	2300      	moveq	r3, #0
 8011e22:	b2db      	uxtb	r3, r3
 8011e24:	461a      	mov	r2, r3
 8011e26:	f107 0320 	add.w	r3, r7, #32
 8011e2a:	4611      	mov	r1, r2
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7fe f8d7 	bl	800ffe0 <chk_lock>
 8011e32:	4603      	mov	r3, r0
 8011e34:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011e38:	1dfb      	adds	r3, r7, #7
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	f003 031c 	and.w	r3, r3, #28
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	f000 80cc 	beq.w	8011fde <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8011e46:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d01f      	beq.n	8011e8e <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8011e4e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011e52:	2b04      	cmp	r3, #4
 8011e54:	d10e      	bne.n	8011e74 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011e56:	f7fe f92f 	bl	80100b8 <enq_lock>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d006      	beq.n	8011e6e <f_open+0x10e>
 8011e60:	f107 0320 	add.w	r3, r7, #32
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7ff f97d 	bl	8011164 <dir_register>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	e000      	b.n	8011e70 <f_open+0x110>
 8011e6e:	2312      	movs	r3, #18
 8011e70:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011e74:	1dfb      	adds	r3, r7, #7
 8011e76:	1dfa      	adds	r2, r7, #7
 8011e78:	7812      	ldrb	r2, [r2, #0]
 8011e7a:	f042 0208 	orr.w	r2, r2, #8
 8011e7e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8011e80:	f107 0320 	add.w	r3, r7, #32
 8011e84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011e88:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8011e8c:	e014      	b.n	8011eb8 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011e8e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011e92:	330b      	adds	r3, #11
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	f003 0311 	and.w	r3, r3, #17
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d003      	beq.n	8011ea6 <f_open+0x146>
					res = FR_DENIED;
 8011e9e:	2307      	movs	r3, #7
 8011ea0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8011ea4:	e008      	b.n	8011eb8 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8011ea6:	1dfb      	adds	r3, r7, #7
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	f003 0304 	and.w	r3, r3, #4
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d002      	beq.n	8011eb8 <f_open+0x158>
						res = FR_EXIST;
 8011eb2:	2308      	movs	r3, #8
 8011eb4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011eb8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	f040 80af 	bne.w	8012020 <f_open+0x2c0>
 8011ec2:	1dfb      	adds	r3, r7, #7
 8011ec4:	781b      	ldrb	r3, [r3, #0]
 8011ec6:	f003 0308 	and.w	r3, r3, #8
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	f000 80a8 	beq.w	8012020 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8011ed0:	f7fa feaa 	bl	800cc28 <get_fattime>
 8011ed4:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8011ed8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011edc:	330e      	adds	r3, #14
 8011ede:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8011ee2:	b2d2      	uxtb	r2, r2
 8011ee4:	701a      	strb	r2, [r3, #0]
 8011ee6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011eea:	b29b      	uxth	r3, r3
 8011eec:	0a1b      	lsrs	r3, r3, #8
 8011eee:	b29a      	uxth	r2, r3
 8011ef0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011ef4:	330f      	adds	r3, #15
 8011ef6:	b2d2      	uxtb	r2, r2
 8011ef8:	701a      	strb	r2, [r3, #0]
 8011efa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011efe:	0c1a      	lsrs	r2, r3, #16
 8011f00:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011f04:	3310      	adds	r3, #16
 8011f06:	b2d2      	uxtb	r2, r2
 8011f08:	701a      	strb	r2, [r3, #0]
 8011f0a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011f0e:	0e1a      	lsrs	r2, r3, #24
 8011f10:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011f14:	3311      	adds	r3, #17
 8011f16:	b2d2      	uxtb	r2, r2
 8011f18:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8011f1a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011f1e:	330b      	adds	r3, #11
 8011f20:	2200      	movs	r2, #0
 8011f22:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8011f24:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011f28:	331c      	adds	r3, #28
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	701a      	strb	r2, [r3, #0]
 8011f2e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011f32:	331d      	adds	r3, #29
 8011f34:	2200      	movs	r2, #0
 8011f36:	701a      	strb	r2, [r3, #0]
 8011f38:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011f3c:	331e      	adds	r3, #30
 8011f3e:	2200      	movs	r2, #0
 8011f40:	701a      	strb	r2, [r3, #0]
 8011f42:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011f46:	331f      	adds	r3, #31
 8011f48:	2200      	movs	r2, #0
 8011f4a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8011f4c:	f107 0320 	add.w	r3, r7, #32
 8011f50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011f54:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7ff f802 	bl	8010f62 <ld_clust>
 8011f5e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8011f62:	2100      	movs	r1, #0
 8011f64:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8011f68:	f7ff f828 	bl	8010fbc <st_clust>
				dj.fs->wflag = 1;
 8011f6c:	f107 0320 	add.w	r3, r7, #32
 8011f70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011f74:	2201      	movs	r2, #1
 8011f76:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8011f7a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d04e      	beq.n	8012020 <f_open+0x2c0>
					dw = dj.fs->winsect;
 8011f82:	f107 0320 	add.w	r3, r7, #32
 8011f86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011f8a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8011f8e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8011f92:	f107 0320 	add.w	r3, r7, #32
 8011f96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011f9a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7fe fcdf 	bl	8010962 <remove_chain>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8011faa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d136      	bne.n	8012020 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8011fb2:	f107 0320 	add.w	r3, r7, #32
 8011fb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011fba:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8011fbe:	3a01      	subs	r2, #1
 8011fc0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8011fc4:	f107 0320 	add.w	r3, r7, #32
 8011fc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011fcc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7fe fa02 	bl	80103da <move_window>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8011fdc:	e020      	b.n	8012020 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8011fde:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d11c      	bne.n	8012020 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8011fe6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011fea:	330b      	adds	r3, #11
 8011fec:	781b      	ldrb	r3, [r3, #0]
 8011fee:	f003 0310 	and.w	r3, r3, #16
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d003      	beq.n	8011ffe <f_open+0x29e>
					res = FR_NO_FILE;
 8011ff6:	2304      	movs	r3, #4
 8011ff8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8011ffc:	e010      	b.n	8012020 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8011ffe:	1dfb      	adds	r3, r7, #7
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	f003 0302 	and.w	r3, r3, #2
 8012006:	2b00      	cmp	r3, #0
 8012008:	d00a      	beq.n	8012020 <f_open+0x2c0>
 801200a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801200e:	330b      	adds	r3, #11
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	f003 0301 	and.w	r3, r3, #1
 8012016:	2b00      	cmp	r3, #0
 8012018:	d002      	beq.n	8012020 <f_open+0x2c0>
						res = FR_DENIED;
 801201a:	2307      	movs	r3, #7
 801201c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8012020:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012024:	2b00      	cmp	r3, #0
 8012026:	d13d      	bne.n	80120a4 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012028:	1dfb      	adds	r3, r7, #7
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	f003 0308 	and.w	r3, r3, #8
 8012030:	2b00      	cmp	r3, #0
 8012032:	d005      	beq.n	8012040 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8012034:	1dfb      	adds	r3, r7, #7
 8012036:	1dfa      	adds	r2, r7, #7
 8012038:	7812      	ldrb	r2, [r2, #0]
 801203a:	f042 0220 	orr.w	r2, r2, #32
 801203e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8012040:	f107 0320 	add.w	r3, r7, #32
 8012044:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012048:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 801204c:	f107 030c 	add.w	r3, r7, #12
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8012056:	f107 030c 	add.w	r3, r7, #12
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8012060:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012064:	1dfb      	adds	r3, r7, #7
 8012066:	781b      	ldrb	r3, [r3, #0]
 8012068:	f023 0301 	bic.w	r3, r3, #1
 801206c:	2b00      	cmp	r3, #0
 801206e:	bf14      	ite	ne
 8012070:	2301      	movne	r3, #1
 8012072:	2300      	moveq	r3, #0
 8012074:	b2db      	uxtb	r3, r3
 8012076:	461a      	mov	r2, r3
 8012078:	f107 0320 	add.w	r3, r7, #32
 801207c:	4611      	mov	r1, r2
 801207e:	4618      	mov	r0, r3
 8012080:	f7fe f83e 	bl	8010100 <inc_lock>
 8012084:	4602      	mov	r2, r0
 8012086:	f107 030c 	add.w	r3, r7, #12
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8012090:	f107 030c 	add.w	r3, r7, #12
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801209a:	2b00      	cmp	r3, #0
 801209c:	d102      	bne.n	80120a4 <f_open+0x344>
 801209e:	2302      	movs	r3, #2
 80120a0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80120a4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d15d      	bne.n	8012168 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 80120ac:	f107 030c 	add.w	r3, r7, #12
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	1dfa      	adds	r2, r7, #7
 80120b4:	7812      	ldrb	r2, [r2, #0]
 80120b6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80120ba:	f107 030c 	add.w	r3, r7, #12
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	2200      	movs	r2, #0
 80120c2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80120c6:	f107 0320 	add.w	r3, r7, #32
 80120ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80120ce:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fe ff45 	bl	8010f62 <ld_clust>
 80120d8:	4602      	mov	r2, r0
 80120da:	f107 030c 	add.w	r3, r7, #12
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80120e4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80120e8:	331f      	adds	r3, #31
 80120ea:	781b      	ldrb	r3, [r3, #0]
 80120ec:	061a      	lsls	r2, r3, #24
 80120ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80120f2:	331e      	adds	r3, #30
 80120f4:	781b      	ldrb	r3, [r3, #0]
 80120f6:	041b      	lsls	r3, r3, #16
 80120f8:	4313      	orrs	r3, r2
 80120fa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80120fe:	321d      	adds	r2, #29
 8012100:	7812      	ldrb	r2, [r2, #0]
 8012102:	0212      	lsls	r2, r2, #8
 8012104:	4313      	orrs	r3, r2
 8012106:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801210a:	321c      	adds	r2, #28
 801210c:	7812      	ldrb	r2, [r2, #0]
 801210e:	431a      	orrs	r2, r3
 8012110:	f107 030c 	add.w	r3, r7, #12
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 801211a:	f107 030c 	add.w	r3, r7, #12
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	2200      	movs	r2, #0
 8012122:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8012126:	f107 030c 	add.w	r3, r7, #12
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	2200      	movs	r2, #0
 801212e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8012132:	f107 030c 	add.w	r3, r7, #12
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	2200      	movs	r2, #0
 801213a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 801213e:	f107 0320 	add.w	r3, r7, #32
 8012142:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012146:	f107 030c 	add.w	r3, r7, #12
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8012150:	f107 030c 	add.w	r3, r7, #12
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801215a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 801215e:	f107 030c 	add.w	r3, r7, #12
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8012168:	f107 0320 	add.w	r3, r7, #32
 801216c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012170:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8012174:	4611      	mov	r1, r2
 8012176:	4618      	mov	r0, r3
 8012178:	f7fd ff13 	bl	800ffa2 <unlock_fs>
 801217c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8012180:	4618      	mov	r0, r3
 8012182:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}

0801218a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801218a:	b580      	push	{r7, lr}
 801218c:	b08a      	sub	sp, #40	; 0x28
 801218e:	af00      	add	r7, sp, #0
 8012190:	60f8      	str	r0, [r7, #12]
 8012192:	60b9      	str	r1, [r7, #8]
 8012194:	607a      	str	r2, [r7, #4]
 8012196:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	2200      	movs	r2, #0
 80121a0:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80121a2:	68f8      	ldr	r0, [r7, #12]
 80121a4:	f7ff fd36 	bl	8011c14 <validate>
 80121a8:	4603      	mov	r3, r0
 80121aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80121ac:	7dfb      	ldrb	r3, [r7, #23]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d009      	beq.n	80121c6 <f_write+0x3c>
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80121b8:	7dfa      	ldrb	r2, [r7, #23]
 80121ba:	4611      	mov	r1, r2
 80121bc:	4618      	mov	r0, r3
 80121be:	f7fd fef0 	bl	800ffa2 <unlock_fs>
 80121c2:	7dfb      	ldrb	r3, [r7, #23]
 80121c4:	e1d4      	b.n	8012570 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d00d      	beq.n	80121ec <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80121dc:	4619      	mov	r1, r3
 80121de:	4610      	mov	r0, r2
 80121e0:	f7fd fedf 	bl	800ffa2 <unlock_fs>
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80121ea:	e1c1      	b.n	8012570 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80121f2:	f003 0302 	and.w	r3, r3, #2
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d108      	bne.n	801220c <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012200:	2107      	movs	r1, #7
 8012202:	4618      	mov	r0, r3
 8012204:	f7fd fecd 	bl	800ffa2 <unlock_fs>
 8012208:	2307      	movs	r3, #7
 801220a:	e1b1      	b.n	8012570 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	441a      	add	r2, r3
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801221c:	429a      	cmp	r2, r3
 801221e:	f080 8182 	bcs.w	8012526 <f_write+0x39c>
 8012222:	2300      	movs	r3, #0
 8012224:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8012226:	e17e      	b.n	8012526 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801222e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012232:	2b00      	cmp	r3, #0
 8012234:	f040 813e 	bne.w	80124b4 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801223e:	0a5b      	lsrs	r3, r3, #9
 8012240:	b2da      	uxtb	r2, r3
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012248:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801224c:	3b01      	subs	r3, #1
 801224e:	b2db      	uxtb	r3, r3
 8012250:	4013      	ands	r3, r2
 8012252:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8012254:	7dbb      	ldrb	r3, [r7, #22]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d15f      	bne.n	801231a <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012260:	2b00      	cmp	r3, #0
 8012262:	d10f      	bne.n	8012284 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801226a:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 801226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226e:	2b00      	cmp	r3, #0
 8012270:	d121      	bne.n	80122b6 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012278:	2100      	movs	r1, #0
 801227a:	4618      	mov	r0, r3
 801227c:	f7fe fbcb 	bl	8010a16 <create_chain>
 8012280:	6278      	str	r0, [r7, #36]	; 0x24
 8012282:	e018      	b.n	80122b6 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801228a:	2b00      	cmp	r3, #0
 801228c:	d008      	beq.n	80122a0 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012294:	4619      	mov	r1, r3
 8012296:	68f8      	ldr	r0, [r7, #12]
 8012298:	f7fe fc5a 	bl	8010b50 <clmt_clust>
 801229c:	6278      	str	r0, [r7, #36]	; 0x24
 801229e:	e00a      	b.n	80122b6 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80122ac:	4619      	mov	r1, r3
 80122ae:	4610      	mov	r0, r2
 80122b0:	f7fe fbb1 	bl	8010a16 <create_chain>
 80122b4:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80122b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	f000 8139 	beq.w	8012530 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80122be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c0:	2b01      	cmp	r3, #1
 80122c2:	d10c      	bne.n	80122de <f_write+0x154>
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	2202      	movs	r2, #2
 80122c8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80122d2:	2102      	movs	r1, #2
 80122d4:	4618      	mov	r0, r3
 80122d6:	f7fd fe64 	bl	800ffa2 <unlock_fs>
 80122da:	2302      	movs	r3, #2
 80122dc:	e148      	b.n	8012570 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80122de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122e4:	d10c      	bne.n	8012300 <f_write+0x176>
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2201      	movs	r2, #1
 80122ea:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80122f4:	2101      	movs	r1, #1
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7fd fe53 	bl	800ffa2 <unlock_fs>
 80122fc:	2301      	movs	r3, #1
 80122fe:	e137      	b.n	8012570 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012304:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801230e:	2b00      	cmp	r3, #0
 8012310:	d103      	bne.n	801231a <f_write+0x190>
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012316:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012324:	2b00      	cmp	r3, #0
 8012326:	d024      	beq.n	8012372 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801232e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8012332:	68f9      	ldr	r1, [r7, #12]
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801233a:	2301      	movs	r3, #1
 801233c:	f7fd fd6c 	bl	800fe18 <disk_write>
 8012340:	4603      	mov	r3, r0
 8012342:	2b00      	cmp	r3, #0
 8012344:	d00c      	beq.n	8012360 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	2201      	movs	r2, #1
 801234a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012354:	2101      	movs	r1, #1
 8012356:	4618      	mov	r0, r3
 8012358:	f7fd fe23 	bl	800ffa2 <unlock_fs>
 801235c:	2301      	movs	r3, #1
 801235e:	e107      	b.n	8012570 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801236a:	b2da      	uxtb	r2, r3
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801237e:	4619      	mov	r1, r3
 8012380:	4610      	mov	r0, r2
 8012382:	f7fe f905 	bl	8010590 <clust2sect>
 8012386:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8012388:	693b      	ldr	r3, [r7, #16]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d10c      	bne.n	80123a8 <f_write+0x21e>
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2202      	movs	r2, #2
 8012392:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801239c:	2102      	movs	r1, #2
 801239e:	4618      	mov	r0, r3
 80123a0:	f7fd fdff 	bl	800ffa2 <unlock_fs>
 80123a4:	2302      	movs	r3, #2
 80123a6:	e0e3      	b.n	8012570 <f_write+0x3e6>
			sect += csect;
 80123a8:	7dbb      	ldrb	r3, [r7, #22]
 80123aa:	693a      	ldr	r2, [r7, #16]
 80123ac:	4413      	add	r3, r2
 80123ae:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	0a5b      	lsrs	r3, r3, #9
 80123b4:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80123b6:	69fb      	ldr	r3, [r7, #28]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d04f      	beq.n	801245c <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80123bc:	7dba      	ldrb	r2, [r7, #22]
 80123be:	69fb      	ldr	r3, [r7, #28]
 80123c0:	4413      	add	r3, r2
 80123c2:	68fa      	ldr	r2, [r7, #12]
 80123c4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80123c8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80123cc:	4293      	cmp	r3, r2
 80123ce:	d908      	bls.n	80123e2 <f_write+0x258>
					cc = fp->fs->csize - csect;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80123d6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80123da:	461a      	mov	r2, r3
 80123dc:	7dbb      	ldrb	r3, [r7, #22]
 80123de:	1ad3      	subs	r3, r2, r3
 80123e0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80123e8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80123ec:	69fb      	ldr	r3, [r7, #28]
 80123ee:	693a      	ldr	r2, [r7, #16]
 80123f0:	69b9      	ldr	r1, [r7, #24]
 80123f2:	f7fd fd11 	bl	800fe18 <disk_write>
 80123f6:	4603      	mov	r3, r0
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d00c      	beq.n	8012416 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	2201      	movs	r2, #1
 8012400:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801240a:	2101      	movs	r1, #1
 801240c:	4618      	mov	r0, r3
 801240e:	f7fd fdc8 	bl	800ffa2 <unlock_fs>
 8012412:	2301      	movs	r3, #1
 8012414:	e0ac      	b.n	8012570 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801241c:	693b      	ldr	r3, [r7, #16]
 801241e:	1ad3      	subs	r3, r2, r3
 8012420:	69fa      	ldr	r2, [r7, #28]
 8012422:	429a      	cmp	r2, r3
 8012424:	d916      	bls.n	8012454 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8012426:	68f8      	ldr	r0, [r7, #12]
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801242e:	693b      	ldr	r3, [r7, #16]
 8012430:	1ad3      	subs	r3, r2, r3
 8012432:	025b      	lsls	r3, r3, #9
 8012434:	69ba      	ldr	r2, [r7, #24]
 8012436:	4413      	add	r3, r2
 8012438:	f44f 7200 	mov.w	r2, #512	; 0x200
 801243c:	4619      	mov	r1, r3
 801243e:	f7fd fd29 	bl	800fe94 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801244c:	b2da      	uxtb	r2, r3
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8012454:	69fb      	ldr	r3, [r7, #28]
 8012456:	025b      	lsls	r3, r3, #9
 8012458:	623b      	str	r3, [r7, #32]
				continue;
 801245a:	e04e      	b.n	80124fa <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012462:	693a      	ldr	r2, [r7, #16]
 8012464:	429a      	cmp	r2, r3
 8012466:	d021      	beq.n	80124ac <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012474:	429a      	cmp	r2, r3
 8012476:	d219      	bcs.n	80124ac <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801247e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8012482:	68f9      	ldr	r1, [r7, #12]
 8012484:	2301      	movs	r3, #1
 8012486:	693a      	ldr	r2, [r7, #16]
 8012488:	f7fd fca6 	bl	800fdd8 <disk_read>
 801248c:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 801248e:	2b00      	cmp	r3, #0
 8012490:	d00c      	beq.n	80124ac <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	2201      	movs	r2, #1
 8012496:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80124a0:	2101      	movs	r1, #1
 80124a2:	4618      	mov	r0, r3
 80124a4:	f7fd fd7d 	bl	800ffa2 <unlock_fs>
 80124a8:	2301      	movs	r3, #1
 80124aa:	e061      	b.n	8012570 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	693a      	ldr	r2, [r7, #16]
 80124b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80124ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124be:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80124c2:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80124c4:	6a3a      	ldr	r2, [r7, #32]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d901      	bls.n	80124d0 <f_write+0x346>
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80124d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124da:	68fa      	ldr	r2, [r7, #12]
 80124dc:	4413      	add	r3, r2
 80124de:	6a3a      	ldr	r2, [r7, #32]
 80124e0:	69b9      	ldr	r1, [r7, #24]
 80124e2:	4618      	mov	r0, r3
 80124e4:	f7fd fcd6 	bl	800fe94 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80124ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124f2:	b2da      	uxtb	r2, r3
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80124fa:	69ba      	ldr	r2, [r7, #24]
 80124fc:	6a3b      	ldr	r3, [r7, #32]
 80124fe:	4413      	add	r3, r2
 8012500:	61bb      	str	r3, [r7, #24]
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012508:	6a3b      	ldr	r3, [r7, #32]
 801250a:	441a      	add	r2, r3
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	681a      	ldr	r2, [r3, #0]
 8012516:	6a3b      	ldr	r3, [r7, #32]
 8012518:	441a      	add	r2, r3
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	601a      	str	r2, [r3, #0]
 801251e:	687a      	ldr	r2, [r7, #4]
 8012520:	6a3b      	ldr	r3, [r7, #32]
 8012522:	1ad3      	subs	r3, r2, r3
 8012524:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2b00      	cmp	r3, #0
 801252a:	f47f ae7d 	bne.w	8012228 <f_write+0x9e>
 801252e:	e000      	b.n	8012532 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012530:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801253e:	429a      	cmp	r2, r3
 8012540:	d905      	bls.n	801254e <f_write+0x3c4>
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012554:	f043 0320 	orr.w	r3, r3, #32
 8012558:	b2da      	uxtb	r2, r3
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012566:	2100      	movs	r1, #0
 8012568:	4618      	mov	r0, r3
 801256a:	f7fd fd1a 	bl	800ffa2 <unlock_fs>
 801256e:	2300      	movs	r3, #0
}
 8012570:	4618      	mov	r0, r3
 8012572:	3728      	adds	r7, #40	; 0x28
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}

08012578 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b086      	sub	sp, #24
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f7ff fb47 	bl	8011c14 <validate>
 8012586:	4603      	mov	r3, r0
 8012588:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801258a:	7dfb      	ldrb	r3, [r7, #23]
 801258c:	2b00      	cmp	r3, #0
 801258e:	f040 80af 	bne.w	80126f0 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012598:	f003 0320 	and.w	r3, r3, #32
 801259c:	2b00      	cmp	r3, #0
 801259e:	f000 80a7 	beq.w	80126f0 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80125a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d020      	beq.n	80125f2 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80125b6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80125ba:	6879      	ldr	r1, [r7, #4]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80125c2:	2301      	movs	r3, #1
 80125c4:	f7fd fc28 	bl	800fe18 <disk_write>
 80125c8:	4603      	mov	r3, r0
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d008      	beq.n	80125e0 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80125d4:	2101      	movs	r1, #1
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7fd fce3 	bl	800ffa2 <unlock_fs>
 80125dc:	2301      	movs	r3, #1
 80125de:	e090      	b.n	8012702 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80125e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80125ea:	b2da      	uxtb	r2, r3
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80125fe:	4619      	mov	r1, r3
 8012600:	4610      	mov	r0, r2
 8012602:	f7fd feea 	bl	80103da <move_window>
 8012606:	4603      	mov	r3, r0
 8012608:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 801260a:	7dfb      	ldrb	r3, [r7, #23]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d16f      	bne.n	80126f0 <f_sync+0x178>
				dir = fp->dir_ptr;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012616:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	330b      	adds	r3, #11
 801261c:	781a      	ldrb	r2, [r3, #0]
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	330b      	adds	r3, #11
 8012622:	f042 0220 	orr.w	r2, r2, #32
 8012626:	b2d2      	uxtb	r2, r2
 8012628:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8012630:	693b      	ldr	r3, [r7, #16]
 8012632:	331c      	adds	r3, #28
 8012634:	b2d2      	uxtb	r2, r2
 8012636:	701a      	strb	r2, [r3, #0]
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801263e:	b29b      	uxth	r3, r3
 8012640:	0a1b      	lsrs	r3, r3, #8
 8012642:	b29a      	uxth	r2, r3
 8012644:	693b      	ldr	r3, [r7, #16]
 8012646:	331d      	adds	r3, #29
 8012648:	b2d2      	uxtb	r2, r2
 801264a:	701a      	strb	r2, [r3, #0]
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012652:	0c1a      	lsrs	r2, r3, #16
 8012654:	693b      	ldr	r3, [r7, #16]
 8012656:	331e      	adds	r3, #30
 8012658:	b2d2      	uxtb	r2, r2
 801265a:	701a      	strb	r2, [r3, #0]
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012662:	0e1a      	lsrs	r2, r3, #24
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	331f      	adds	r3, #31
 8012668:	b2d2      	uxtb	r2, r2
 801266a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012672:	4619      	mov	r1, r3
 8012674:	6938      	ldr	r0, [r7, #16]
 8012676:	f7fe fca1 	bl	8010fbc <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 801267a:	f7fa fad5 	bl	800cc28 <get_fattime>
 801267e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8012680:	693b      	ldr	r3, [r7, #16]
 8012682:	3316      	adds	r3, #22
 8012684:	68fa      	ldr	r2, [r7, #12]
 8012686:	b2d2      	uxtb	r2, r2
 8012688:	701a      	strb	r2, [r3, #0]
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	b29b      	uxth	r3, r3
 801268e:	0a1b      	lsrs	r3, r3, #8
 8012690:	b29a      	uxth	r2, r3
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	3317      	adds	r3, #23
 8012696:	b2d2      	uxtb	r2, r2
 8012698:	701a      	strb	r2, [r3, #0]
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	0c1a      	lsrs	r2, r3, #16
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	3318      	adds	r3, #24
 80126a2:	b2d2      	uxtb	r2, r2
 80126a4:	701a      	strb	r2, [r3, #0]
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	0e1a      	lsrs	r2, r3, #24
 80126aa:	693b      	ldr	r3, [r7, #16]
 80126ac:	3319      	adds	r3, #25
 80126ae:	b2d2      	uxtb	r2, r2
 80126b0:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	3312      	adds	r3, #18
 80126b6:	2200      	movs	r2, #0
 80126b8:	701a      	strb	r2, [r3, #0]
 80126ba:	693b      	ldr	r3, [r7, #16]
 80126bc:	3313      	adds	r3, #19
 80126be:	2200      	movs	r2, #0
 80126c0:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80126c8:	f023 0320 	bic.w	r3, r3, #32
 80126cc:	b2da      	uxtb	r2, r3
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80126da:	2201      	movs	r2, #1
 80126dc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7fd fea5 	bl	8010436 <sync_fs>
 80126ec:	4603      	mov	r3, r0
 80126ee:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80126f6:	7dfa      	ldrb	r2, [r7, #23]
 80126f8:	4611      	mov	r1, r2
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7fd fc51 	bl	800ffa2 <unlock_fs>
 8012700:	7dfb      	ldrb	r3, [r7, #23]
}
 8012702:	4618      	mov	r0, r3
 8012704:	3718      	adds	r7, #24
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 801270a:	b580      	push	{r7, lr}
 801270c:	b084      	sub	sp, #16
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f7ff ff30 	bl	8012578 <f_sync>
 8012718:	4603      	mov	r3, r0
 801271a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801271c:	7bfb      	ldrb	r3, [r7, #15]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d11e      	bne.n	8012760 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f7ff fa76 	bl	8011c14 <validate>
 8012728:	4603      	mov	r3, r0
 801272a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801272c:	7bfb      	ldrb	r3, [r7, #15]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d116      	bne.n	8012760 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012738:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8012740:	4618      	mov	r0, r3
 8012742:	f7fd fd93 	bl	801026c <dec_lock>
 8012746:	4603      	mov	r3, r0
 8012748:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801274a:	7bfb      	ldrb	r3, [r7, #15]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d103      	bne.n	8012758 <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2200      	movs	r2, #0
 8012754:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012758:	2100      	movs	r1, #0
 801275a:	68b8      	ldr	r0, [r7, #8]
 801275c:	f7fd fc21 	bl	800ffa2 <unlock_fs>
#endif
		}
	}
	return res;
 8012760:	7bfb      	ldrb	r3, [r7, #15]
}
 8012762:	4618      	mov	r0, r3
 8012764:	3710      	adds	r7, #16
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}

0801276a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801276a:	b580      	push	{r7, lr}
 801276c:	b088      	sub	sp, #32
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
 8012772:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d101      	bne.n	801277e <f_opendir+0x14>
 801277a:	2309      	movs	r3, #9
 801277c:	e079      	b.n	8012872 <f_opendir+0x108>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 801277e:	4639      	mov	r1, r7
 8012780:	f107 0318 	add.w	r3, r7, #24
 8012784:	2200      	movs	r2, #0
 8012786:	4618      	mov	r0, r3
 8012788:	f7fe ff72 	bl	8011670 <find_volume>
 801278c:	4603      	mov	r3, r0
 801278e:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8012790:	7ffb      	ldrb	r3, [r7, #31]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d15f      	bne.n	8012856 <f_opendir+0xec>
		dp->fs = fs;
 8012796:	69ba      	ldr	r2, [r7, #24]
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f107 020c 	add.w	r2, r7, #12
 80127a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	4619      	mov	r1, r3
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f7fe fe43 	bl	8011438 <follow_path>
 80127b2:	4603      	mov	r3, r0
 80127b4:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 80127b6:	7ffb      	ldrb	r3, [r7, #31]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d147      	bne.n	801284c <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d017      	beq.n	80127f6 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80127cc:	330b      	adds	r3, #11
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	f003 0310 	and.w	r3, r3, #16
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d00c      	beq.n	80127f2 <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 80127d8:	69ba      	ldr	r2, [r7, #24]
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80127e0:	4619      	mov	r1, r3
 80127e2:	4610      	mov	r0, r2
 80127e4:	f7fe fbbd 	bl	8010f62 <ld_clust>
 80127e8:	4602      	mov	r2, r0
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80127f0:	e001      	b.n	80127f6 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 80127f2:	2305      	movs	r3, #5
 80127f4:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 80127f6:	7ffb      	ldrb	r3, [r7, #31]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d127      	bne.n	801284c <f_opendir+0xe2>
				dp->id = fs->id;
 80127fc:	69bb      	ldr	r3, [r7, #24]
 80127fe:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012808:	2100      	movs	r1, #0
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f7fe f9d4 	bl	8010bb8 <dir_sdi>
 8012810:	4603      	mov	r3, r0
 8012812:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8012814:	7ffb      	ldrb	r3, [r7, #31]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d118      	bne.n	801284c <f_opendir+0xe2>
					if (dp->sclust) {
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012820:	2b00      	cmp	r3, #0
 8012822:	d00f      	beq.n	8012844 <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012824:	2100      	movs	r1, #0
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f7fd fc6a 	bl	8010100 <inc_lock>
 801282c:	4602      	mov	r2, r0
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801283a:	2b00      	cmp	r3, #0
 801283c:	d106      	bne.n	801284c <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 801283e:	2312      	movs	r3, #18
 8012840:	77fb      	strb	r3, [r7, #31]
 8012842:	e003      	b.n	801284c <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2200      	movs	r2, #0
 8012848:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801284c:	7ffb      	ldrb	r3, [r7, #31]
 801284e:	2b04      	cmp	r3, #4
 8012850:	d101      	bne.n	8012856 <f_opendir+0xec>
 8012852:	2305      	movs	r3, #5
 8012854:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8012856:	7ffb      	ldrb	r3, [r7, #31]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d003      	beq.n	8012864 <f_opendir+0xfa>
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2200      	movs	r2, #0
 8012860:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 8012864:	69bb      	ldr	r3, [r7, #24]
 8012866:	7ffa      	ldrb	r2, [r7, #31]
 8012868:	4611      	mov	r1, r2
 801286a:	4618      	mov	r0, r3
 801286c:	f7fd fb99 	bl	800ffa2 <unlock_fs>
 8012870:	7ffb      	ldrb	r3, [r7, #31]
}
 8012872:	4618      	mov	r0, r3
 8012874:	3720      	adds	r7, #32
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}

0801287a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801287a:	b580      	push	{r7, lr}
 801287c:	b084      	sub	sp, #16
 801287e:	af00      	add	r7, sp, #0
 8012880:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f7ff f9c6 	bl	8011c14 <validate>
 8012888:	4603      	mov	r3, r0
 801288a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801288c:	7bfb      	ldrb	r3, [r7, #15]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d11b      	bne.n	80128ca <f_closedir+0x50>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012898:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d007      	beq.n	80128b4 <f_closedir+0x3a>
			res = dec_lock(dp->lockid);
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7fd fcde 	bl	801026c <dec_lock>
 80128b0:	4603      	mov	r3, r0
 80128b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 80128b4:	7bfb      	ldrb	r3, [r7, #15]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d103      	bne.n	80128c2 <f_closedir+0x48>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2200      	movs	r2, #0
 80128be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80128c2:	2100      	movs	r1, #0
 80128c4:	68b8      	ldr	r0, [r7, #8]
 80128c6:	f7fd fb6c 	bl	800ffa2 <unlock_fs>
#endif
	}
	return res;
 80128ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	3710      	adds	r7, #16
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b086      	sub	sp, #24
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f7ff f998 	bl	8011c14 <validate>
 80128e4:	4603      	mov	r3, r0
 80128e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80128e8:	7dfb      	ldrb	r3, [r7, #23]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d133      	bne.n	8012956 <f_readdir+0x82>
		if (!fno) {
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d106      	bne.n	8012902 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80128f4:	2100      	movs	r1, #0
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f7fe f95e 	bl	8010bb8 <dir_sdi>
 80128fc:	4603      	mov	r3, r0
 80128fe:	75fb      	strb	r3, [r7, #23]
 8012900:	e029      	b.n	8012956 <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f107 0208 	add.w	r2, r7, #8
 8012908:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 801290c:	2100      	movs	r1, #0
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	f7fe fbc9 	bl	80110a6 <dir_read>
 8012914:	4603      	mov	r3, r0
 8012916:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8012918:	7dfb      	ldrb	r3, [r7, #23]
 801291a:	2b04      	cmp	r3, #4
 801291c:	d105      	bne.n	801292a <f_readdir+0x56>
				dp->sect = 0;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2200      	movs	r2, #0
 8012922:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 8012926:	2300      	movs	r3, #0
 8012928:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 801292a:	7dfb      	ldrb	r3, [r7, #23]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d112      	bne.n	8012956 <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 8012930:	6839      	ldr	r1, [r7, #0]
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f7fe fc4f 	bl	80111d6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012938:	2100      	movs	r1, #0
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f7fe f9d0 	bl	8010ce0 <dir_next>
 8012940:	4603      	mov	r3, r0
 8012942:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8012944:	7dfb      	ldrb	r3, [r7, #23]
 8012946:	2b04      	cmp	r3, #4
 8012948:	d105      	bne.n	8012956 <f_readdir+0x82>
					dp->sect = 0;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2200      	movs	r2, #0
 801294e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 8012952:	2300      	movs	r3, #0
 8012954:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801295c:	7dfa      	ldrb	r2, [r7, #23]
 801295e:	4611      	mov	r1, r2
 8012960:	4618      	mov	r0, r3
 8012962:	f7fd fb1e 	bl	800ffa2 <unlock_fs>
 8012966:	7dfb      	ldrb	r3, [r7, #23]
}
 8012968:	4618      	mov	r0, r3
 801296a:	3718      	adds	r7, #24
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}

08012970 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8012976:	af00      	add	r7, sp, #0
 8012978:	1d3b      	adds	r3, r7, #4
 801297a:	6018      	str	r0, [r3, #0]
 801297c:	463b      	mov	r3, r7
 801297e:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 8012980:	1d39      	adds	r1, r7, #4
 8012982:	f107 0314 	add.w	r3, r7, #20
 8012986:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801298a:	2200      	movs	r2, #0
 801298c:	4618      	mov	r0, r3
 801298e:	f7fe fe6f 	bl	8011670 <find_volume>
 8012992:	4603      	mov	r3, r0
 8012994:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (res == FR_OK) {
 8012998:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 801299c:	2b00      	cmp	r3, #0
 801299e:	d129      	bne.n	80129f4 <f_stat+0x84>
		INIT_BUF(dj);
 80129a0:	f107 0314 	add.w	r3, r7, #20
 80129a4:	f107 0208 	add.w	r2, r7, #8
 80129a8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80129ac:	1d3b      	adds	r3, r7, #4
 80129ae:	681a      	ldr	r2, [r3, #0]
 80129b0:	f107 0314 	add.w	r3, r7, #20
 80129b4:	4611      	mov	r1, r2
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7fe fd3e 	bl	8011438 <follow_path>
 80129bc:	4603      	mov	r3, r0
 80129be:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res == FR_OK) {				/* Follow completed */
 80129c2:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d114      	bne.n	80129f4 <f_stat+0x84>
			if (dj.dir) {		/* Found an object */
 80129ca:	f107 0314 	add.w	r3, r7, #20
 80129ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d00b      	beq.n	80129ee <f_stat+0x7e>
				if (fno) get_fileinfo(&dj, fno);
 80129d6:	463b      	mov	r3, r7
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d00a      	beq.n	80129f4 <f_stat+0x84>
 80129de:	463b      	mov	r3, r7
 80129e0:	f107 0214 	add.w	r2, r7, #20
 80129e4:	6819      	ldr	r1, [r3, #0]
 80129e6:	4610      	mov	r0, r2
 80129e8:	f7fe fbf5 	bl	80111d6 <get_fileinfo>
 80129ec:	e002      	b.n	80129f4 <f_stat+0x84>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 80129ee:	2306      	movs	r3, #6
 80129f0:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 80129f4:	f107 0314 	add.w	r3, r7, #20
 80129f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80129fc:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 8012a00:	4611      	mov	r1, r2
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7fd facd 	bl	800ffa2 <unlock_fs>
 8012a08:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}

08012a16 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8012a16:	b580      	push	{r7, lr}
 8012a18:	b08e      	sub	sp, #56	; 0x38
 8012a1a:	af00      	add	r7, sp, #0
 8012a1c:	60f8      	str	r0, [r7, #12]
 8012a1e:	60b9      	str	r1, [r7, #8]
 8012a20:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8012a22:	f107 030c 	add.w	r3, r7, #12
 8012a26:	2200      	movs	r2, #0
 8012a28:	4619      	mov	r1, r3
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f7fe fe20 	bl	8011670 <find_volume>
 8012a30:	4603      	mov	r3, r0
 8012a32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8012a3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	f040 80af 	bne.w	8012ba4 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8012a46:	69fb      	ldr	r3, [r7, #28]
 8012a48:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012a4c:	69fb      	ldr	r3, [r7, #28]
 8012a4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012a52:	3b02      	subs	r3, #2
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d805      	bhi.n	8012a64 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8012a58:	69fb      	ldr	r3, [r7, #28]
 8012a5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	601a      	str	r2, [r3, #0]
 8012a62:	e09f      	b.n	8012ba4 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8012a64:	69fb      	ldr	r3, [r7, #28]
 8012a66:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012a6a:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8012a70:	7efb      	ldrb	r3, [r7, #27]
 8012a72:	2b01      	cmp	r3, #1
 8012a74:	d125      	bne.n	8012ac2 <f_getfree+0xac>
				clst = 2;
 8012a76:	2302      	movs	r3, #2
 8012a78:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8012a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a7c:	69f8      	ldr	r0, [r7, #28]
 8012a7e:	f7fd fda8 	bl	80105d2 <get_fat>
 8012a82:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a8a:	d103      	bne.n	8012a94 <f_getfree+0x7e>
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a92:	e077      	b.n	8012b84 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	2b01      	cmp	r3, #1
 8012a98:	d103      	bne.n	8012aa2 <f_getfree+0x8c>
 8012a9a:	2302      	movs	r3, #2
 8012a9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012aa0:	e070      	b.n	8012b84 <f_getfree+0x16e>
					if (stat == 0) n++;
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d102      	bne.n	8012aae <f_getfree+0x98>
 8012aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aaa:	3301      	adds	r3, #1
 8012aac:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8012aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ab4:	69fb      	ldr	r3, [r7, #28]
 8012ab6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012abc:	429a      	cmp	r2, r3
 8012abe:	d3dc      	bcc.n	8012a7a <f_getfree+0x64>
 8012ac0:	e060      	b.n	8012b84 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8012aca:	69fb      	ldr	r3, [r7, #28]
 8012acc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8012ad0:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8012ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d112      	bne.n	8012b06 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 8012ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae2:	1c5a      	adds	r2, r3, #1
 8012ae4:	62ba      	str	r2, [r7, #40]	; 0x28
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	69f8      	ldr	r0, [r7, #28]
 8012aea:	f7fd fc76 	bl	80103da <move_window>
 8012aee:	4603      	mov	r3, r0
 8012af0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8012af4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d142      	bne.n	8012b82 <f_getfree+0x16c>
						p = fs->win.d8;
 8012afc:	69fb      	ldr	r3, [r7, #28]
 8012afe:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8012b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012b04:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8012b06:	7efb      	ldrb	r3, [r7, #27]
 8012b08:	2b02      	cmp	r3, #2
 8012b0a:	d115      	bne.n	8012b38 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 8012b0c:	6a3b      	ldr	r3, [r7, #32]
 8012b0e:	3301      	adds	r3, #1
 8012b10:	781b      	ldrb	r3, [r3, #0]
 8012b12:	021b      	lsls	r3, r3, #8
 8012b14:	b21a      	sxth	r2, r3
 8012b16:	6a3b      	ldr	r3, [r7, #32]
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	b21b      	sxth	r3, r3
 8012b1c:	4313      	orrs	r3, r2
 8012b1e:	b21b      	sxth	r3, r3
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d102      	bne.n	8012b2a <f_getfree+0x114>
 8012b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b26:	3301      	adds	r3, #1
 8012b28:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8012b2a:	6a3b      	ldr	r3, [r7, #32]
 8012b2c:	3302      	adds	r3, #2
 8012b2e:	623b      	str	r3, [r7, #32]
 8012b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b32:	3b02      	subs	r3, #2
 8012b34:	627b      	str	r3, [r7, #36]	; 0x24
 8012b36:	e01d      	b.n	8012b74 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8012b38:	6a3b      	ldr	r3, [r7, #32]
 8012b3a:	3303      	adds	r3, #3
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	061a      	lsls	r2, r3, #24
 8012b40:	6a3b      	ldr	r3, [r7, #32]
 8012b42:	3302      	adds	r3, #2
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	041b      	lsls	r3, r3, #16
 8012b48:	4313      	orrs	r3, r2
 8012b4a:	6a3a      	ldr	r2, [r7, #32]
 8012b4c:	3201      	adds	r2, #1
 8012b4e:	7812      	ldrb	r2, [r2, #0]
 8012b50:	0212      	lsls	r2, r2, #8
 8012b52:	4313      	orrs	r3, r2
 8012b54:	6a3a      	ldr	r2, [r7, #32]
 8012b56:	7812      	ldrb	r2, [r2, #0]
 8012b58:	4313      	orrs	r3, r2
 8012b5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d102      	bne.n	8012b68 <f_getfree+0x152>
 8012b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b64:	3301      	adds	r3, #1
 8012b66:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8012b68:	6a3b      	ldr	r3, [r7, #32]
 8012b6a:	3304      	adds	r3, #4
 8012b6c:	623b      	str	r3, [r7, #32]
 8012b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b70:	3b04      	subs	r3, #4
 8012b72:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8012b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b76:	3b01      	subs	r3, #1
 8012b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d1ac      	bne.n	8012ada <f_getfree+0xc4>
 8012b80:	e000      	b.n	8012b84 <f_getfree+0x16e>
						if (res != FR_OK) break;
 8012b82:	bf00      	nop
			}
			fs->free_clust = n;
 8012b84:	69fb      	ldr	r3, [r7, #28]
 8012b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 8012b8c:	69fb      	ldr	r3, [r7, #28]
 8012b8e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8012b92:	f043 0301 	orr.w	r3, r3, #1
 8012b96:	b2da      	uxtb	r2, r3
 8012b98:	69fb      	ldr	r3, [r7, #28]
 8012b9a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ba2:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8012ba4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ba8:	4619      	mov	r1, r3
 8012baa:	69f8      	ldr	r0, [r7, #28]
 8012bac:	f7fd f9f9 	bl	800ffa2 <unlock_fs>
 8012bb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3738      	adds	r7, #56	; 0x38
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012bbc:	b480      	push	{r7}
 8012bbe:	b087      	sub	sp, #28
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	60f8      	str	r0, [r7, #12]
 8012bc4:	60b9      	str	r1, [r7, #8]
 8012bc6:	4613      	mov	r3, r2
 8012bc8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012bca:	2301      	movs	r3, #1
 8012bcc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8012bd2:	4b1e      	ldr	r3, [pc, #120]	; (8012c4c <FATFS_LinkDriverEx+0x90>)
 8012bd4:	7a5b      	ldrb	r3, [r3, #9]
 8012bd6:	b2db      	uxtb	r3, r3
 8012bd8:	2b01      	cmp	r3, #1
 8012bda:	d831      	bhi.n	8012c40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012bdc:	4b1b      	ldr	r3, [pc, #108]	; (8012c4c <FATFS_LinkDriverEx+0x90>)
 8012bde:	7a5b      	ldrb	r3, [r3, #9]
 8012be0:	b2db      	uxtb	r3, r3
 8012be2:	461a      	mov	r2, r3
 8012be4:	4b19      	ldr	r3, [pc, #100]	; (8012c4c <FATFS_LinkDriverEx+0x90>)
 8012be6:	2100      	movs	r1, #0
 8012be8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8012bea:	4b18      	ldr	r3, [pc, #96]	; (8012c4c <FATFS_LinkDriverEx+0x90>)
 8012bec:	7a5b      	ldrb	r3, [r3, #9]
 8012bee:	b2db      	uxtb	r3, r3
 8012bf0:	4a16      	ldr	r2, [pc, #88]	; (8012c4c <FATFS_LinkDriverEx+0x90>)
 8012bf2:	009b      	lsls	r3, r3, #2
 8012bf4:	4413      	add	r3, r2
 8012bf6:	68fa      	ldr	r2, [r7, #12]
 8012bf8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8012bfa:	4b14      	ldr	r3, [pc, #80]	; (8012c4c <FATFS_LinkDriverEx+0x90>)
 8012bfc:	7a5b      	ldrb	r3, [r3, #9]
 8012bfe:	b2db      	uxtb	r3, r3
 8012c00:	461a      	mov	r2, r3
 8012c02:	4b12      	ldr	r3, [pc, #72]	; (8012c4c <FATFS_LinkDriverEx+0x90>)
 8012c04:	4413      	add	r3, r2
 8012c06:	79fa      	ldrb	r2, [r7, #7]
 8012c08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012c0a:	4b10      	ldr	r3, [pc, #64]	; (8012c4c <FATFS_LinkDriverEx+0x90>)
 8012c0c:	7a5b      	ldrb	r3, [r3, #9]
 8012c0e:	b2db      	uxtb	r3, r3
 8012c10:	1c5a      	adds	r2, r3, #1
 8012c12:	b2d1      	uxtb	r1, r2
 8012c14:	4a0d      	ldr	r2, [pc, #52]	; (8012c4c <FATFS_LinkDriverEx+0x90>)
 8012c16:	7251      	strb	r1, [r2, #9]
 8012c18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012c1a:	7dbb      	ldrb	r3, [r7, #22]
 8012c1c:	3330      	adds	r3, #48	; 0x30
 8012c1e:	b2da      	uxtb	r2, r3
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	3301      	adds	r3, #1
 8012c28:	223a      	movs	r2, #58	; 0x3a
 8012c2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	3302      	adds	r3, #2
 8012c30:	222f      	movs	r2, #47	; 0x2f
 8012c32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	3303      	adds	r3, #3
 8012c38:	2200      	movs	r2, #0
 8012c3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8012c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	371c      	adds	r7, #28
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bc80      	pop	{r7}
 8012c4a:	4770      	bx	lr
 8012c4c:	20007ae4 	.word	0x20007ae4

08012c50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b082      	sub	sp, #8
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
 8012c58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	6839      	ldr	r1, [r7, #0]
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	f7ff ffac 	bl	8012bbc <FATFS_LinkDriverEx>
 8012c64:	4603      	mov	r3, r0
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	3708      	adds	r7, #8
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}

08012c6e <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8012c6e:	b480      	push	{r7}
 8012c70:	b083      	sub	sp, #12
 8012c72:	af00      	add	r7, sp, #0
 8012c74:	4603      	mov	r3, r0
 8012c76:	71fb      	strb	r3, [r7, #7]
  return RES_OK;
 8012c78:	2300      	movs	r3, #0
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	370c      	adds	r7, #12
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bc80      	pop	{r7}
 8012c82:	4770      	bx	lr

08012c84 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8012c8e:	2301      	movs	r3, #1
 8012c90:	73fb      	strb	r3, [r7, #15]
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 8012c92:	79fb      	ldrb	r3, [r7, #7]
 8012c94:	4619      	mov	r1, r3
 8012c96:	4808      	ldr	r0, [pc, #32]	; (8012cb8 <USBH_status+0x34>)
 8012c98:	f7fa fd30 	bl	800d6fc <USBH_MSC_UnitIsReady>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d002      	beq.n	8012ca8 <USBH_status+0x24>
  {
    res = RES_OK;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	73fb      	strb	r3, [r7, #15]
 8012ca6:	e001      	b.n	8012cac <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8012ca8:	2301      	movs	r3, #1
 8012caa:	73fb      	strb	r3, [r7, #15]
  }
  
  return res;
 8012cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3710      	adds	r7, #16
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	20011178 	.word	0x20011178

08012cbc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b094      	sub	sp, #80	; 0x50
 8012cc0:	af02      	add	r7, sp, #8
 8012cc2:	60b9      	str	r1, [r7, #8]
 8012cc4:	607a      	str	r2, [r7, #4]
 8012cc6:	603b      	str	r3, [r7, #0]
 8012cc8:	4603      	mov	r3, r0
 8012cca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012ccc:	2301      	movs	r3, #1
 8012cce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	f003 0303 	and.w	r3, r3, #3
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d002      	beq.n	8012ce8 <USBH_read+0x2c>
      {
        break;
      }
    }
#else
    return res;
 8012ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012ce6:	e02c      	b.n	8012d42 <USBH_read+0x86>
#endif
  }
  else
  {
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 8012ce8:	7bf9      	ldrb	r1, [r7, #15]
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	9300      	str	r3, [sp, #0]
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	687a      	ldr	r2, [r7, #4]
 8012cf2:	4816      	ldr	r0, [pc, #88]	; (8012d4c <USBH_read+0x90>)
 8012cf4:	f7fa fd4b 	bl	800d78e <USBH_MSC_Read>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 8012cfe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d103      	bne.n	8012d0e <USBH_read+0x52>
  {
    res = RES_OK;
 8012d06:	2300      	movs	r3, #0
 8012d08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012d0c:	e017      	b.n	8012d3e <USBH_read+0x82>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 8012d0e:	f107 0210 	add.w	r2, r7, #16
 8012d12:	7bfb      	ldrb	r3, [r7, #15]
 8012d14:	4619      	mov	r1, r3
 8012d16:	480d      	ldr	r0, [pc, #52]	; (8012d4c <USBH_read+0x90>)
 8012d18:	f7fa fd15 	bl	800d746 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 8012d1c:	7f7b      	ldrb	r3, [r7, #29]
 8012d1e:	2b3a      	cmp	r3, #58	; 0x3a
 8012d20:	d005      	beq.n	8012d2e <USBH_read+0x72>
 8012d22:	2b3a      	cmp	r3, #58	; 0x3a
 8012d24:	dc07      	bgt.n	8012d36 <USBH_read+0x7a>
 8012d26:	2b04      	cmp	r3, #4
 8012d28:	d001      	beq.n	8012d2e <USBH_read+0x72>
 8012d2a:	2b28      	cmp	r3, #40	; 0x28
 8012d2c:	d103      	bne.n	8012d36 <USBH_read+0x7a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE: 
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
 8012d2e:	2303      	movs	r3, #3
 8012d30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8012d34:	e003      	b.n	8012d3e <USBH_read+0x82>
      
    default:
      res = RES_ERROR;
 8012d36:	2301      	movs	r3, #1
 8012d38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8012d3c:	bf00      	nop
    }
  }
  
  return res;
 8012d3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3748      	adds	r7, #72	; 0x48
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
 8012d4a:	bf00      	nop
 8012d4c:	20011178 	.word	0x20011178

08012d50 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b094      	sub	sp, #80	; 0x50
 8012d54:	af02      	add	r7, sp, #8
 8012d56:	60b9      	str	r1, [r7, #8]
 8012d58:	607a      	str	r2, [r7, #4]
 8012d5a:	603b      	str	r3, [r7, #0]
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR; 
 8012d60:	2301      	movs	r3, #1
 8012d62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;  
 8012d66:	2300      	movs	r3, #0
 8012d68:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	f003 0303 	and.w	r3, r3, #3
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d002      	beq.n	8012d7c <USBH_write+0x2c>
      {
        break;
      }
    }
#else
    return res;
 8012d76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012d7a:	e034      	b.n	8012de6 <USBH_write+0x96>
#endif
  }
  else
  {
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 8012d7c:	7bf9      	ldrb	r1, [r7, #15]
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	9300      	str	r3, [sp, #0]
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	687a      	ldr	r2, [r7, #4]
 8012d86:	481a      	ldr	r0, [pc, #104]	; (8012df0 <USBH_write+0xa0>)
 8012d88:	f7fa fd6a 	bl	800d860 <USBH_MSC_Write>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 8012d92:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d103      	bne.n	8012da2 <USBH_write+0x52>
  {
    res = RES_OK;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012da0:	e01f      	b.n	8012de2 <USBH_write+0x92>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 8012da2:	f107 0210 	add.w	r2, r7, #16
 8012da6:	7bfb      	ldrb	r3, [r7, #15]
 8012da8:	4619      	mov	r1, r3
 8012daa:	4811      	ldr	r0, [pc, #68]	; (8012df0 <USBH_write+0xa0>)
 8012dac:	f7fa fccb 	bl	800d746 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 8012db0:	7f7b      	ldrb	r3, [r7, #29]
 8012db2:	2b3a      	cmp	r3, #58	; 0x3a
 8012db4:	d00d      	beq.n	8012dd2 <USBH_write+0x82>
 8012db6:	2b3a      	cmp	r3, #58	; 0x3a
 8012db8:	dc0f      	bgt.n	8012dda <USBH_write+0x8a>
 8012dba:	2b28      	cmp	r3, #40	; 0x28
 8012dbc:	d009      	beq.n	8012dd2 <USBH_write+0x82>
 8012dbe:	2b28      	cmp	r3, #40	; 0x28
 8012dc0:	dc0b      	bgt.n	8012dda <USBH_write+0x8a>
 8012dc2:	2b04      	cmp	r3, #4
 8012dc4:	d005      	beq.n	8012dd2 <USBH_write+0x82>
 8012dc6:	2b27      	cmp	r3, #39	; 0x27
 8012dc8:	d107      	bne.n	8012dda <USBH_write+0x8a>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8012dca:	2302      	movs	r3, #2
 8012dcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8012dd0:	e007      	b.n	8012de2 <USBH_write+0x92>
      
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");      
      res = RES_NOTRDY;
 8012dd2:	2303      	movs	r3, #3
 8012dd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8012dd8:	e003      	b.n	8012de2 <USBH_write+0x92>
      
    default:
      res = RES_ERROR;
 8012dda:	2301      	movs	r3, #1
 8012ddc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8012de0:	bf00      	nop
    }
  }
  
  return res;   
 8012de2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3748      	adds	r7, #72	; 0x48
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
 8012dee:	bf00      	nop
 8012df0:	20011178 	.word	0x20011178

08012df4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b090      	sub	sp, #64	; 0x40
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	603a      	str	r2, [r7, #0]
 8012dfe:	71fb      	strb	r3, [r7, #7]
 8012e00:	460b      	mov	r3, r1
 8012e02:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012e04:	2301      	movs	r3, #1
 8012e06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;
  
  switch (cmd)
 8012e0a:	79bb      	ldrb	r3, [r7, #6]
 8012e0c:	2b03      	cmp	r3, #3
 8012e0e:	d850      	bhi.n	8012eb2 <USBH_ioctl+0xbe>
 8012e10:	a201      	add	r2, pc, #4	; (adr r2, 8012e18 <USBH_ioctl+0x24>)
 8012e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e16:	bf00      	nop
 8012e18:	08012e29 	.word	0x08012e29
 8012e1c:	08012e31 	.word	0x08012e31
 8012e20:	08012e5b 	.word	0x08012e5b
 8012e24:	08012e87 	.word	0x08012e87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC: 
    res = RES_OK;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8012e2e:	e043      	b.n	8012eb8 <USBH_ioctl+0xc4>
    
  /* Get number of sectors on the disk (DWORD) */  
  case GET_SECTOR_COUNT : 
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 8012e30:	f107 0208 	add.w	r2, r7, #8
 8012e34:	79fb      	ldrb	r3, [r7, #7]
 8012e36:	4619      	mov	r1, r3
 8012e38:	4822      	ldr	r0, [pc, #136]	; (8012ec4 <USBH_ioctl+0xd0>)
 8012e3a:	f7fa fc84 	bl	800d746 <USBH_MSC_GetLUNInfo>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d106      	bne.n	8012e52 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8012e44:	68fa      	ldr	r2, [r7, #12]
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8012e50:	e032      	b.n	8012eb8 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 8012e52:	2301      	movs	r3, #1
 8012e54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8012e58:	e02e      	b.n	8012eb8 <USBH_ioctl+0xc4>
    
  /* Get R/W sector size (WORD) */  
  case GET_SECTOR_SIZE :	
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 8012e5a:	f107 0208 	add.w	r2, r7, #8
 8012e5e:	79fb      	ldrb	r3, [r7, #7]
 8012e60:	4619      	mov	r1, r3
 8012e62:	4818      	ldr	r0, [pc, #96]	; (8012ec4 <USBH_ioctl+0xd0>)
 8012e64:	f7fa fc6f 	bl	800d746 <USBH_MSC_GetLUNInfo>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d107      	bne.n	8012e7e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8012e6e:	8a3b      	ldrh	r3, [r7, #16]
 8012e70:	461a      	mov	r2, r3
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8012e76:	2300      	movs	r3, #0
 8012e78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8012e7c:	e01c      	b.n	8012eb8 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 8012e7e:	2301      	movs	r3, #1
 8012e80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8012e84:	e018      	b.n	8012eb8 <USBH_ioctl+0xc4>
    
    /* Get erase block size in unit of sector (DWORD) */ 
  case GET_BLOCK_SIZE : 
    
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 8012e86:	f107 0208 	add.w	r2, r7, #8
 8012e8a:	79fb      	ldrb	r3, [r7, #7]
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	480d      	ldr	r0, [pc, #52]	; (8012ec4 <USBH_ioctl+0xd0>)
 8012e90:	f7fa fc59 	bl	800d746 <USBH_MSC_GetLUNInfo>
 8012e94:	4603      	mov	r3, r0
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d107      	bne.n	8012eaa <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8012e9a:	8a3b      	ldrh	r3, [r7, #16]
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8012ea8:	e006      	b.n	8012eb8 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 8012eaa:	2301      	movs	r3, #1
 8012eac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8012eb0:	e002      	b.n	8012eb8 <USBH_ioctl+0xc4>
    
  default:
    res = RES_PARERR;
 8012eb2:	2304      	movs	r3, #4
 8012eb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  return res;
 8012eb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	3740      	adds	r7, #64	; 0x40
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}
 8012ec4:	20011178 	.word	0x20011178

08012ec8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b086      	sub	sp, #24
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	4603      	mov	r3, r0
 8012ed0:	6039      	str	r1, [r7, #0]
 8012ed2:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	60fb      	str	r3, [r7, #12]
 8012ed8:	2300      	movs	r3, #0
 8012eda:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8012edc:	f107 030c 	add.w	r3, r7, #12
 8012ee0:	2101      	movs	r1, #1
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f000 f8cb 	bl	801307e <osSemaphoreCreate>
 8012ee8:	4602      	mov	r2, r0
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	bf14      	ite	ne
 8012ef6:	2301      	movne	r3, #1
 8012ef8:	2300      	moveq	r3, #0
 8012efa:	b2db      	uxtb	r3, r3
 8012efc:	617b      	str	r3, [r7, #20]
  
  return ret;
 8012efe:	697b      	ldr	r3, [r7, #20]
}
 8012f00:	4618      	mov	r0, r3
 8012f02:	3718      	adds	r7, #24
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}

08012f08 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b082      	sub	sp, #8
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f000 f96b 	bl	80131ec <osSemaphoreDelete>
  return 1;
 8012f16:	2301      	movs	r3, #1
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3708      	adds	r7, #8
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}

08012f20 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b084      	sub	sp, #16
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012f28:	2300      	movs	r3, #0
 8012f2a:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8012f2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f000 f8d7 	bl	80130e4 <osSemaphoreWait>
 8012f36:	4603      	mov	r3, r0
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d101      	bne.n	8012f40 <ff_req_grant+0x20>
  {
    ret = 1;
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8012f40:	68fb      	ldr	r3, [r7, #12]
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3710      	adds	r7, #16
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}

08012f4a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8012f4a:	b580      	push	{r7, lr}
 8012f4c:	b082      	sub	sp, #8
 8012f4e:	af00      	add	r7, sp, #0
 8012f50:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f000 f914 	bl	8013180 <osSemaphoreRelease>
}
 8012f58:	bf00      	nop
 8012f5a:	3708      	adds	r7, #8
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012f60:	b480      	push	{r7}
 8012f62:	b085      	sub	sp, #20
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	4603      	mov	r3, r0
 8012f68:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f72:	2b84      	cmp	r3, #132	; 0x84
 8012f74:	d005      	beq.n	8012f82 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012f76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	4413      	add	r3, r2
 8012f7e:	3303      	adds	r3, #3
 8012f80:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012f82:	68fb      	ldr	r3, [r7, #12]
}
 8012f84:	4618      	mov	r0, r3
 8012f86:	3714      	adds	r7, #20
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bc80      	pop	{r7}
 8012f8c:	4770      	bx	lr

08012f8e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012f8e:	b480      	push	{r7}
 8012f90:	b083      	sub	sp, #12
 8012f92:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f94:	f3ef 8305 	mrs	r3, IPSR
 8012f98:	607b      	str	r3, [r7, #4]
  return(result);
 8012f9a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	bf14      	ite	ne
 8012fa0:	2301      	movne	r3, #1
 8012fa2:	2300      	moveq	r3, #0
 8012fa4:	b2db      	uxtb	r3, r3
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	370c      	adds	r7, #12
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bc80      	pop	{r7}
 8012fae:	4770      	bx	lr

08012fb0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012fb4:	f001 fbd0 	bl	8014758 <vTaskStartScheduler>
  
  return osOK;
 8012fb8:	2300      	movs	r3, #0
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	bd80      	pop	{r7, pc}

08012fbe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fc0:	b089      	sub	sp, #36	; 0x24
 8012fc2:	af04      	add	r7, sp, #16
 8012fc4:	6078      	str	r0, [r7, #4]
 8012fc6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	695b      	ldr	r3, [r3, #20]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d020      	beq.n	8013012 <osThreadCreate+0x54>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	699b      	ldr	r3, [r3, #24]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d01c      	beq.n	8013012 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	685c      	ldr	r4, [r3, #4]
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681d      	ldr	r5, [r3, #0]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	691e      	ldr	r6, [r3, #16]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012fea:	4618      	mov	r0, r3
 8012fec:	f7ff ffb8 	bl	8012f60 <makeFreeRtosPriority>
 8012ff0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	695b      	ldr	r3, [r3, #20]
 8012ff6:	687a      	ldr	r2, [r7, #4]
 8012ff8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012ffa:	9202      	str	r2, [sp, #8]
 8012ffc:	9301      	str	r3, [sp, #4]
 8012ffe:	9100      	str	r1, [sp, #0]
 8013000:	683b      	ldr	r3, [r7, #0]
 8013002:	4632      	mov	r2, r6
 8013004:	4629      	mov	r1, r5
 8013006:	4620      	mov	r0, r4
 8013008:	f001 f9d0 	bl	80143ac <xTaskCreateStatic>
 801300c:	4603      	mov	r3, r0
 801300e:	60fb      	str	r3, [r7, #12]
 8013010:	e01c      	b.n	801304c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	685c      	ldr	r4, [r3, #4]
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801301e:	b29e      	uxth	r6, r3
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013026:	4618      	mov	r0, r3
 8013028:	f7ff ff9a 	bl	8012f60 <makeFreeRtosPriority>
 801302c:	4602      	mov	r2, r0
 801302e:	f107 030c 	add.w	r3, r7, #12
 8013032:	9301      	str	r3, [sp, #4]
 8013034:	9200      	str	r2, [sp, #0]
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	4632      	mov	r2, r6
 801303a:	4629      	mov	r1, r5
 801303c:	4620      	mov	r0, r4
 801303e:	f001 fa11 	bl	8014464 <xTaskCreate>
 8013042:	4603      	mov	r3, r0
 8013044:	2b01      	cmp	r3, #1
 8013046:	d001      	beq.n	801304c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8013048:	2300      	movs	r3, #0
 801304a:	e000      	b.n	801304e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801304c:	68fb      	ldr	r3, [r7, #12]
}
 801304e:	4618      	mov	r0, r3
 8013050:	3714      	adds	r7, #20
 8013052:	46bd      	mov	sp, r7
 8013054:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013056 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013056:	b580      	push	{r7, lr}
 8013058:	b084      	sub	sp, #16
 801305a:	af00      	add	r7, sp, #0
 801305c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d001      	beq.n	801306c <osDelay+0x16>
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	e000      	b.n	801306e <osDelay+0x18>
 801306c:	2301      	movs	r3, #1
 801306e:	4618      	mov	r0, r3
 8013070:	f001 fb3e 	bl	80146f0 <vTaskDelay>
  
  return osOK;
 8013074:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013076:	4618      	mov	r0, r3
 8013078:	3710      	adds	r7, #16
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}

0801307e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801307e:	b580      	push	{r7, lr}
 8013080:	b086      	sub	sp, #24
 8013082:	af02      	add	r7, sp, #8
 8013084:	6078      	str	r0, [r7, #4]
 8013086:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	685b      	ldr	r3, [r3, #4]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d00f      	beq.n	80130b0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8013090:	683b      	ldr	r3, [r7, #0]
 8013092:	2b01      	cmp	r3, #1
 8013094:	d10a      	bne.n	80130ac <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	685b      	ldr	r3, [r3, #4]
 801309a:	2203      	movs	r2, #3
 801309c:	9200      	str	r2, [sp, #0]
 801309e:	2200      	movs	r2, #0
 80130a0:	2100      	movs	r1, #0
 80130a2:	2001      	movs	r0, #1
 80130a4:	f000 faaa 	bl	80135fc <xQueueGenericCreateStatic>
 80130a8:	4603      	mov	r3, r0
 80130aa:	e016      	b.n	80130da <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80130ac:	2300      	movs	r3, #0
 80130ae:	e014      	b.n	80130da <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	2b01      	cmp	r3, #1
 80130b4:	d110      	bne.n	80130d8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80130b6:	2203      	movs	r2, #3
 80130b8:	2100      	movs	r1, #0
 80130ba:	2001      	movs	r0, #1
 80130bc:	f000 fb15 	bl	80136ea <xQueueGenericCreate>
 80130c0:	60f8      	str	r0, [r7, #12]
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d005      	beq.n	80130d4 <osSemaphoreCreate+0x56>
 80130c8:	2300      	movs	r3, #0
 80130ca:	2200      	movs	r2, #0
 80130cc:	2100      	movs	r1, #0
 80130ce:	68f8      	ldr	r0, [r7, #12]
 80130d0:	f000 fb68 	bl	80137a4 <xQueueGenericSend>
      return sema;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	e000      	b.n	80130da <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80130d8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3710      	adds	r7, #16
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
	...

080130e4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b084      	sub	sp, #16
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80130ee:	2300      	movs	r3, #0
 80130f0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d101      	bne.n	80130fc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80130f8:	2380      	movs	r3, #128	; 0x80
 80130fa:	e03a      	b.n	8013172 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80130fc:	2300      	movs	r3, #0
 80130fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013106:	d103      	bne.n	8013110 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8013108:	f04f 33ff 	mov.w	r3, #4294967295
 801310c:	60fb      	str	r3, [r7, #12]
 801310e:	e009      	b.n	8013124 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d006      	beq.n	8013124 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d101      	bne.n	8013124 <osSemaphoreWait+0x40>
      ticks = 1;
 8013120:	2301      	movs	r3, #1
 8013122:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8013124:	f7ff ff33 	bl	8012f8e <inHandlerMode>
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d017      	beq.n	801315e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801312e:	f107 0308 	add.w	r3, r7, #8
 8013132:	461a      	mov	r2, r3
 8013134:	2100      	movs	r1, #0
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f000 ff44 	bl	8013fc4 <xQueueReceiveFromISR>
 801313c:	4603      	mov	r3, r0
 801313e:	2b01      	cmp	r3, #1
 8013140:	d001      	beq.n	8013146 <osSemaphoreWait+0x62>
      return osErrorOS;
 8013142:	23ff      	movs	r3, #255	; 0xff
 8013144:	e015      	b.n	8013172 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d011      	beq.n	8013170 <osSemaphoreWait+0x8c>
 801314c:	4b0b      	ldr	r3, [pc, #44]	; (801317c <osSemaphoreWait+0x98>)
 801314e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013152:	601a      	str	r2, [r3, #0]
 8013154:	f3bf 8f4f 	dsb	sy
 8013158:	f3bf 8f6f 	isb	sy
 801315c:	e008      	b.n	8013170 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801315e:	68f9      	ldr	r1, [r7, #12]
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f000 fe23 	bl	8013dac <xQueueSemaphoreTake>
 8013166:	4603      	mov	r3, r0
 8013168:	2b01      	cmp	r3, #1
 801316a:	d001      	beq.n	8013170 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801316c:	23ff      	movs	r3, #255	; 0xff
 801316e:	e000      	b.n	8013172 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8013170:	2300      	movs	r3, #0
}
 8013172:	4618      	mov	r0, r3
 8013174:	3710      	adds	r7, #16
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}
 801317a:	bf00      	nop
 801317c:	e000ed04 	.word	0xe000ed04

08013180 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b084      	sub	sp, #16
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8013188:	2300      	movs	r3, #0
 801318a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801318c:	2300      	movs	r3, #0
 801318e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8013190:	f7ff fefd 	bl	8012f8e <inHandlerMode>
 8013194:	4603      	mov	r3, r0
 8013196:	2b00      	cmp	r3, #0
 8013198:	d016      	beq.n	80131c8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801319a:	f107 0308 	add.w	r3, r7, #8
 801319e:	4619      	mov	r1, r3
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f000 fc95 	bl	8013ad0 <xQueueGiveFromISR>
 80131a6:	4603      	mov	r3, r0
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d001      	beq.n	80131b0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80131ac:	23ff      	movs	r3, #255	; 0xff
 80131ae:	e017      	b.n	80131e0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80131b0:	68bb      	ldr	r3, [r7, #8]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d013      	beq.n	80131de <osSemaphoreRelease+0x5e>
 80131b6:	4b0c      	ldr	r3, [pc, #48]	; (80131e8 <osSemaphoreRelease+0x68>)
 80131b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131bc:	601a      	str	r2, [r3, #0]
 80131be:	f3bf 8f4f 	dsb	sy
 80131c2:	f3bf 8f6f 	isb	sy
 80131c6:	e00a      	b.n	80131de <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80131c8:	2300      	movs	r3, #0
 80131ca:	2200      	movs	r2, #0
 80131cc:	2100      	movs	r1, #0
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f000 fae8 	bl	80137a4 <xQueueGenericSend>
 80131d4:	4603      	mov	r3, r0
 80131d6:	2b01      	cmp	r3, #1
 80131d8:	d001      	beq.n	80131de <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80131da:	23ff      	movs	r3, #255	; 0xff
 80131dc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80131de:	68fb      	ldr	r3, [r7, #12]
}
 80131e0:	4618      	mov	r0, r3
 80131e2:	3710      	adds	r7, #16
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	e000ed04 	.word	0xe000ed04

080131ec <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b082      	sub	sp, #8
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80131f4:	f7ff fecb 	bl	8012f8e <inHandlerMode>
 80131f8:	4603      	mov	r3, r0
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d001      	beq.n	8013202 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80131fe:	2382      	movs	r3, #130	; 0x82
 8013200:	e003      	b.n	801320a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f000 ff5e 	bl	80140c4 <vQueueDelete>

  return osOK; 
 8013208:	2300      	movs	r3, #0
}
 801320a:	4618      	mov	r0, r3
 801320c:	3708      	adds	r7, #8
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}

08013212 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8013212:	b590      	push	{r4, r7, lr}
 8013214:	b085      	sub	sp, #20
 8013216:	af02      	add	r7, sp, #8
 8013218:	6078      	str	r0, [r7, #4]
 801321a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	689b      	ldr	r3, [r3, #8]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d011      	beq.n	8013248 <osMessageCreate+0x36>
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	68db      	ldr	r3, [r3, #12]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d00d      	beq.n	8013248 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	6818      	ldr	r0, [r3, #0]
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	6859      	ldr	r1, [r3, #4]
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	689a      	ldr	r2, [r3, #8]
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	68db      	ldr	r3, [r3, #12]
 801323c:	2400      	movs	r4, #0
 801323e:	9400      	str	r4, [sp, #0]
 8013240:	f000 f9dc 	bl	80135fc <xQueueGenericCreateStatic>
 8013244:	4603      	mov	r3, r0
 8013246:	e008      	b.n	801325a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	6818      	ldr	r0, [r3, #0]
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	685b      	ldr	r3, [r3, #4]
 8013250:	2200      	movs	r2, #0
 8013252:	4619      	mov	r1, r3
 8013254:	f000 fa49 	bl	80136ea <xQueueGenericCreate>
 8013258:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801325a:	4618      	mov	r0, r3
 801325c:	370c      	adds	r7, #12
 801325e:	46bd      	mov	sp, r7
 8013260:	bd90      	pop	{r4, r7, pc}
	...

08013264 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b086      	sub	sp, #24
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8013270:	2300      	movs	r3, #0
 8013272:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d101      	bne.n	8013282 <osMessagePut+0x1e>
    ticks = 1;
 801327e:	2301      	movs	r3, #1
 8013280:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8013282:	f7ff fe84 	bl	8012f8e <inHandlerMode>
 8013286:	4603      	mov	r3, r0
 8013288:	2b00      	cmp	r3, #0
 801328a:	d018      	beq.n	80132be <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801328c:	f107 0210 	add.w	r2, r7, #16
 8013290:	f107 0108 	add.w	r1, r7, #8
 8013294:	2300      	movs	r3, #0
 8013296:	68f8      	ldr	r0, [r7, #12]
 8013298:	f000 fb82 	bl	80139a0 <xQueueGenericSendFromISR>
 801329c:	4603      	mov	r3, r0
 801329e:	2b01      	cmp	r3, #1
 80132a0:	d001      	beq.n	80132a6 <osMessagePut+0x42>
      return osErrorOS;
 80132a2:	23ff      	movs	r3, #255	; 0xff
 80132a4:	e018      	b.n	80132d8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d014      	beq.n	80132d6 <osMessagePut+0x72>
 80132ac:	4b0c      	ldr	r3, [pc, #48]	; (80132e0 <osMessagePut+0x7c>)
 80132ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132b2:	601a      	str	r2, [r3, #0]
 80132b4:	f3bf 8f4f 	dsb	sy
 80132b8:	f3bf 8f6f 	isb	sy
 80132bc:	e00b      	b.n	80132d6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80132be:	f107 0108 	add.w	r1, r7, #8
 80132c2:	2300      	movs	r3, #0
 80132c4:	697a      	ldr	r2, [r7, #20]
 80132c6:	68f8      	ldr	r0, [r7, #12]
 80132c8:	f000 fa6c 	bl	80137a4 <xQueueGenericSend>
 80132cc:	4603      	mov	r3, r0
 80132ce:	2b01      	cmp	r3, #1
 80132d0:	d001      	beq.n	80132d6 <osMessagePut+0x72>
      return osErrorOS;
 80132d2:	23ff      	movs	r3, #255	; 0xff
 80132d4:	e000      	b.n	80132d8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80132d6:	2300      	movs	r3, #0
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3718      	adds	r7, #24
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}
 80132e0:	e000ed04 	.word	0xe000ed04

080132e4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80132e4:	b590      	push	{r4, r7, lr}
 80132e6:	b08b      	sub	sp, #44	; 0x2c
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	60f8      	str	r0, [r7, #12]
 80132ec:	60b9      	str	r1, [r7, #8]
 80132ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80132f4:	2300      	movs	r3, #0
 80132f6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d10a      	bne.n	8013314 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80132fe:	2380      	movs	r3, #128	; 0x80
 8013300:	617b      	str	r3, [r7, #20]
    return event;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	461c      	mov	r4, r3
 8013306:	f107 0314 	add.w	r3, r7, #20
 801330a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801330e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013312:	e054      	b.n	80133be <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8013314:	2300      	movs	r3, #0
 8013316:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8013318:	2300      	movs	r3, #0
 801331a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013322:	d103      	bne.n	801332c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8013324:	f04f 33ff 	mov.w	r3, #4294967295
 8013328:	627b      	str	r3, [r7, #36]	; 0x24
 801332a:	e009      	b.n	8013340 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d006      	beq.n	8013340 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8013336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013338:	2b00      	cmp	r3, #0
 801333a:	d101      	bne.n	8013340 <osMessageGet+0x5c>
      ticks = 1;
 801333c:	2301      	movs	r3, #1
 801333e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8013340:	f7ff fe25 	bl	8012f8e <inHandlerMode>
 8013344:	4603      	mov	r3, r0
 8013346:	2b00      	cmp	r3, #0
 8013348:	d01c      	beq.n	8013384 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801334a:	f107 0220 	add.w	r2, r7, #32
 801334e:	f107 0314 	add.w	r3, r7, #20
 8013352:	3304      	adds	r3, #4
 8013354:	4619      	mov	r1, r3
 8013356:	68b8      	ldr	r0, [r7, #8]
 8013358:	f000 fe34 	bl	8013fc4 <xQueueReceiveFromISR>
 801335c:	4603      	mov	r3, r0
 801335e:	2b01      	cmp	r3, #1
 8013360:	d102      	bne.n	8013368 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8013362:	2310      	movs	r3, #16
 8013364:	617b      	str	r3, [r7, #20]
 8013366:	e001      	b.n	801336c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8013368:	2300      	movs	r3, #0
 801336a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801336c:	6a3b      	ldr	r3, [r7, #32]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d01d      	beq.n	80133ae <osMessageGet+0xca>
 8013372:	4b15      	ldr	r3, [pc, #84]	; (80133c8 <osMessageGet+0xe4>)
 8013374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013378:	601a      	str	r2, [r3, #0]
 801337a:	f3bf 8f4f 	dsb	sy
 801337e:	f3bf 8f6f 	isb	sy
 8013382:	e014      	b.n	80133ae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8013384:	f107 0314 	add.w	r3, r7, #20
 8013388:	3304      	adds	r3, #4
 801338a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801338c:	4619      	mov	r1, r3
 801338e:	68b8      	ldr	r0, [r7, #8]
 8013390:	f000 fc2c 	bl	8013bec <xQueueReceive>
 8013394:	4603      	mov	r3, r0
 8013396:	2b01      	cmp	r3, #1
 8013398:	d102      	bne.n	80133a0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801339a:	2310      	movs	r3, #16
 801339c:	617b      	str	r3, [r7, #20]
 801339e:	e006      	b.n	80133ae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80133a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d101      	bne.n	80133aa <osMessageGet+0xc6>
 80133a6:	2300      	movs	r3, #0
 80133a8:	e000      	b.n	80133ac <osMessageGet+0xc8>
 80133aa:	2340      	movs	r3, #64	; 0x40
 80133ac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	461c      	mov	r4, r3
 80133b2:	f107 0314 	add.w	r3, r7, #20
 80133b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80133ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80133be:	68f8      	ldr	r0, [r7, #12]
 80133c0:	372c      	adds	r7, #44	; 0x2c
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd90      	pop	{r4, r7, pc}
 80133c6:	bf00      	nop
 80133c8:	e000ed04 	.word	0xe000ed04

080133cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80133cc:	b480      	push	{r7}
 80133ce:	b083      	sub	sp, #12
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f103 0208 	add.w	r2, r3, #8
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f04f 32ff 	mov.w	r2, #4294967295
 80133e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f103 0208 	add.w	r2, r3, #8
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f103 0208 	add.w	r2, r3, #8
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2200      	movs	r2, #0
 80133fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013400:	bf00      	nop
 8013402:	370c      	adds	r7, #12
 8013404:	46bd      	mov	sp, r7
 8013406:	bc80      	pop	{r7}
 8013408:	4770      	bx	lr

0801340a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801340a:	b480      	push	{r7}
 801340c:	b083      	sub	sp, #12
 801340e:	af00      	add	r7, sp, #0
 8013410:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	2200      	movs	r2, #0
 8013416:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013418:	bf00      	nop
 801341a:	370c      	adds	r7, #12
 801341c:	46bd      	mov	sp, r7
 801341e:	bc80      	pop	{r7}
 8013420:	4770      	bx	lr

08013422 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013422:	b480      	push	{r7}
 8013424:	b085      	sub	sp, #20
 8013426:	af00      	add	r7, sp, #0
 8013428:	6078      	str	r0, [r7, #4]
 801342a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	68fa      	ldr	r2, [r7, #12]
 8013436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	689a      	ldr	r2, [r3, #8]
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	689b      	ldr	r3, [r3, #8]
 8013444:	683a      	ldr	r2, [r7, #0]
 8013446:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	683a      	ldr	r2, [r7, #0]
 801344c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	687a      	ldr	r2, [r7, #4]
 8013452:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	1c5a      	adds	r2, r3, #1
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	601a      	str	r2, [r3, #0]
}
 801345e:	bf00      	nop
 8013460:	3714      	adds	r7, #20
 8013462:	46bd      	mov	sp, r7
 8013464:	bc80      	pop	{r7}
 8013466:	4770      	bx	lr

08013468 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013468:	b480      	push	{r7}
 801346a:	b085      	sub	sp, #20
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801347e:	d103      	bne.n	8013488 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	691b      	ldr	r3, [r3, #16]
 8013484:	60fb      	str	r3, [r7, #12]
 8013486:	e00c      	b.n	80134a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	3308      	adds	r3, #8
 801348c:	60fb      	str	r3, [r7, #12]
 801348e:	e002      	b.n	8013496 <vListInsert+0x2e>
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	60fb      	str	r3, [r7, #12]
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	685b      	ldr	r3, [r3, #4]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	68ba      	ldr	r2, [r7, #8]
 801349e:	429a      	cmp	r2, r3
 80134a0:	d2f6      	bcs.n	8013490 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	685a      	ldr	r2, [r3, #4]
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	685b      	ldr	r3, [r3, #4]
 80134ae:	683a      	ldr	r2, [r7, #0]
 80134b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	68fa      	ldr	r2, [r7, #12]
 80134b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	683a      	ldr	r2, [r7, #0]
 80134bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	687a      	ldr	r2, [r7, #4]
 80134c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	1c5a      	adds	r2, r3, #1
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	601a      	str	r2, [r3, #0]
}
 80134ce:	bf00      	nop
 80134d0:	3714      	adds	r7, #20
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bc80      	pop	{r7}
 80134d6:	4770      	bx	lr

080134d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80134d8:	b480      	push	{r7}
 80134da:	b085      	sub	sp, #20
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	691b      	ldr	r3, [r3, #16]
 80134e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	685b      	ldr	r3, [r3, #4]
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	6892      	ldr	r2, [r2, #8]
 80134ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	689b      	ldr	r3, [r3, #8]
 80134f4:	687a      	ldr	r2, [r7, #4]
 80134f6:	6852      	ldr	r2, [r2, #4]
 80134f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	685b      	ldr	r3, [r3, #4]
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	429a      	cmp	r2, r3
 8013502:	d103      	bne.n	801350c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	689a      	ldr	r2, [r3, #8]
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2200      	movs	r2, #0
 8013510:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	1e5a      	subs	r2, r3, #1
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	681b      	ldr	r3, [r3, #0]
}
 8013520:	4618      	mov	r0, r3
 8013522:	3714      	adds	r7, #20
 8013524:	46bd      	mov	sp, r7
 8013526:	bc80      	pop	{r7}
 8013528:	4770      	bx	lr
	...

0801352c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b084      	sub	sp, #16
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d10a      	bne.n	8013556 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013544:	f383 8811 	msr	BASEPRI, r3
 8013548:	f3bf 8f6f 	isb	sy
 801354c:	f3bf 8f4f 	dsb	sy
 8013550:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013552:	bf00      	nop
 8013554:	e7fe      	b.n	8013554 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013556:	f002 f851 	bl	80155fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	681a      	ldr	r2, [r3, #0]
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013562:	68f9      	ldr	r1, [r7, #12]
 8013564:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013566:	fb01 f303 	mul.w	r3, r1, r3
 801356a:	441a      	add	r2, r3
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	2200      	movs	r2, #0
 8013574:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	681a      	ldr	r2, [r3, #0]
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	681a      	ldr	r2, [r3, #0]
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013586:	3b01      	subs	r3, #1
 8013588:	68f9      	ldr	r1, [r7, #12]
 801358a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801358c:	fb01 f303 	mul.w	r3, r1, r3
 8013590:	441a      	add	r2, r3
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	22ff      	movs	r2, #255	; 0xff
 801359a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	22ff      	movs	r2, #255	; 0xff
 80135a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d114      	bne.n	80135d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	691b      	ldr	r3, [r3, #16]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d01a      	beq.n	80135ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	3310      	adds	r3, #16
 80135b8:	4618      	mov	r0, r3
 80135ba:	f001 fb25 	bl	8014c08 <xTaskRemoveFromEventList>
 80135be:	4603      	mov	r3, r0
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d012      	beq.n	80135ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80135c4:	4b0c      	ldr	r3, [pc, #48]	; (80135f8 <xQueueGenericReset+0xcc>)
 80135c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135ca:	601a      	str	r2, [r3, #0]
 80135cc:	f3bf 8f4f 	dsb	sy
 80135d0:	f3bf 8f6f 	isb	sy
 80135d4:	e009      	b.n	80135ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	3310      	adds	r3, #16
 80135da:	4618      	mov	r0, r3
 80135dc:	f7ff fef6 	bl	80133cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	3324      	adds	r3, #36	; 0x24
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7ff fef1 	bl	80133cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80135ea:	f002 f837 	bl	801565c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80135ee:	2301      	movs	r3, #1
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3710      	adds	r7, #16
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}
 80135f8:	e000ed04 	.word	0xe000ed04

080135fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b08e      	sub	sp, #56	; 0x38
 8013600:	af02      	add	r7, sp, #8
 8013602:	60f8      	str	r0, [r7, #12]
 8013604:	60b9      	str	r1, [r7, #8]
 8013606:	607a      	str	r2, [r7, #4]
 8013608:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d10a      	bne.n	8013626 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013614:	f383 8811 	msr	BASEPRI, r3
 8013618:	f3bf 8f6f 	isb	sy
 801361c:	f3bf 8f4f 	dsb	sy
 8013620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013622:	bf00      	nop
 8013624:	e7fe      	b.n	8013624 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d10a      	bne.n	8013642 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013630:	f383 8811 	msr	BASEPRI, r3
 8013634:	f3bf 8f6f 	isb	sy
 8013638:	f3bf 8f4f 	dsb	sy
 801363c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801363e:	bf00      	nop
 8013640:	e7fe      	b.n	8013640 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d002      	beq.n	801364e <xQueueGenericCreateStatic+0x52>
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d001      	beq.n	8013652 <xQueueGenericCreateStatic+0x56>
 801364e:	2301      	movs	r3, #1
 8013650:	e000      	b.n	8013654 <xQueueGenericCreateStatic+0x58>
 8013652:	2300      	movs	r3, #0
 8013654:	2b00      	cmp	r3, #0
 8013656:	d10a      	bne.n	801366e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801365c:	f383 8811 	msr	BASEPRI, r3
 8013660:	f3bf 8f6f 	isb	sy
 8013664:	f3bf 8f4f 	dsb	sy
 8013668:	623b      	str	r3, [r7, #32]
}
 801366a:	bf00      	nop
 801366c:	e7fe      	b.n	801366c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d102      	bne.n	801367a <xQueueGenericCreateStatic+0x7e>
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d101      	bne.n	801367e <xQueueGenericCreateStatic+0x82>
 801367a:	2301      	movs	r3, #1
 801367c:	e000      	b.n	8013680 <xQueueGenericCreateStatic+0x84>
 801367e:	2300      	movs	r3, #0
 8013680:	2b00      	cmp	r3, #0
 8013682:	d10a      	bne.n	801369a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013688:	f383 8811 	msr	BASEPRI, r3
 801368c:	f3bf 8f6f 	isb	sy
 8013690:	f3bf 8f4f 	dsb	sy
 8013694:	61fb      	str	r3, [r7, #28]
}
 8013696:	bf00      	nop
 8013698:	e7fe      	b.n	8013698 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801369a:	2348      	movs	r3, #72	; 0x48
 801369c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	2b48      	cmp	r3, #72	; 0x48
 80136a2:	d00a      	beq.n	80136ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80136a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a8:	f383 8811 	msr	BASEPRI, r3
 80136ac:	f3bf 8f6f 	isb	sy
 80136b0:	f3bf 8f4f 	dsb	sy
 80136b4:	61bb      	str	r3, [r7, #24]
}
 80136b6:	bf00      	nop
 80136b8:	e7fe      	b.n	80136b8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80136be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d00d      	beq.n	80136e0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80136c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c6:	2201      	movs	r2, #1
 80136c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80136cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80136d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d2:	9300      	str	r3, [sp, #0]
 80136d4:	4613      	mov	r3, r2
 80136d6:	687a      	ldr	r2, [r7, #4]
 80136d8:	68b9      	ldr	r1, [r7, #8]
 80136da:	68f8      	ldr	r0, [r7, #12]
 80136dc:	f000 f843 	bl	8013766 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80136e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3730      	adds	r7, #48	; 0x30
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}

080136ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80136ea:	b580      	push	{r7, lr}
 80136ec:	b08a      	sub	sp, #40	; 0x28
 80136ee:	af02      	add	r7, sp, #8
 80136f0:	60f8      	str	r0, [r7, #12]
 80136f2:	60b9      	str	r1, [r7, #8]
 80136f4:	4613      	mov	r3, r2
 80136f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d10a      	bne.n	8013714 <xQueueGenericCreate+0x2a>
	__asm volatile
 80136fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013702:	f383 8811 	msr	BASEPRI, r3
 8013706:	f3bf 8f6f 	isb	sy
 801370a:	f3bf 8f4f 	dsb	sy
 801370e:	613b      	str	r3, [r7, #16]
}
 8013710:	bf00      	nop
 8013712:	e7fe      	b.n	8013712 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d102      	bne.n	8013720 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801371a:	2300      	movs	r3, #0
 801371c:	61fb      	str	r3, [r7, #28]
 801371e:	e004      	b.n	801372a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	68ba      	ldr	r2, [r7, #8]
 8013724:	fb02 f303 	mul.w	r3, r2, r3
 8013728:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801372a:	69fb      	ldr	r3, [r7, #28]
 801372c:	3348      	adds	r3, #72	; 0x48
 801372e:	4618      	mov	r0, r3
 8013730:	f002 f864 	bl	80157fc <pvPortMalloc>
 8013734:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013736:	69bb      	ldr	r3, [r7, #24]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d00f      	beq.n	801375c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 801373c:	69bb      	ldr	r3, [r7, #24]
 801373e:	3348      	adds	r3, #72	; 0x48
 8013740:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013742:	69bb      	ldr	r3, [r7, #24]
 8013744:	2200      	movs	r2, #0
 8013746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801374a:	79fa      	ldrb	r2, [r7, #7]
 801374c:	69bb      	ldr	r3, [r7, #24]
 801374e:	9300      	str	r3, [sp, #0]
 8013750:	4613      	mov	r3, r2
 8013752:	697a      	ldr	r2, [r7, #20]
 8013754:	68b9      	ldr	r1, [r7, #8]
 8013756:	68f8      	ldr	r0, [r7, #12]
 8013758:	f000 f805 	bl	8013766 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801375c:	69bb      	ldr	r3, [r7, #24]
	}
 801375e:	4618      	mov	r0, r3
 8013760:	3720      	adds	r7, #32
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}

08013766 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013766:	b580      	push	{r7, lr}
 8013768:	b084      	sub	sp, #16
 801376a:	af00      	add	r7, sp, #0
 801376c:	60f8      	str	r0, [r7, #12]
 801376e:	60b9      	str	r1, [r7, #8]
 8013770:	607a      	str	r2, [r7, #4]
 8013772:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d103      	bne.n	8013782 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801377a:	69bb      	ldr	r3, [r7, #24]
 801377c:	69ba      	ldr	r2, [r7, #24]
 801377e:	601a      	str	r2, [r3, #0]
 8013780:	e002      	b.n	8013788 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013782:	69bb      	ldr	r3, [r7, #24]
 8013784:	687a      	ldr	r2, [r7, #4]
 8013786:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013788:	69bb      	ldr	r3, [r7, #24]
 801378a:	68fa      	ldr	r2, [r7, #12]
 801378c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801378e:	69bb      	ldr	r3, [r7, #24]
 8013790:	68ba      	ldr	r2, [r7, #8]
 8013792:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013794:	2101      	movs	r1, #1
 8013796:	69b8      	ldr	r0, [r7, #24]
 8013798:	f7ff fec8 	bl	801352c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801379c:	bf00      	nop
 801379e:	3710      	adds	r7, #16
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}

080137a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b08e      	sub	sp, #56	; 0x38
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	60f8      	str	r0, [r7, #12]
 80137ac:	60b9      	str	r1, [r7, #8]
 80137ae:	607a      	str	r2, [r7, #4]
 80137b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80137b2:	2300      	movs	r3, #0
 80137b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80137ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d10a      	bne.n	80137d6 <xQueueGenericSend+0x32>
	__asm volatile
 80137c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c4:	f383 8811 	msr	BASEPRI, r3
 80137c8:	f3bf 8f6f 	isb	sy
 80137cc:	f3bf 8f4f 	dsb	sy
 80137d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80137d2:	bf00      	nop
 80137d4:	e7fe      	b.n	80137d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d103      	bne.n	80137e4 <xQueueGenericSend+0x40>
 80137dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d101      	bne.n	80137e8 <xQueueGenericSend+0x44>
 80137e4:	2301      	movs	r3, #1
 80137e6:	e000      	b.n	80137ea <xQueueGenericSend+0x46>
 80137e8:	2300      	movs	r3, #0
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d10a      	bne.n	8013804 <xQueueGenericSend+0x60>
	__asm volatile
 80137ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f2:	f383 8811 	msr	BASEPRI, r3
 80137f6:	f3bf 8f6f 	isb	sy
 80137fa:	f3bf 8f4f 	dsb	sy
 80137fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013800:	bf00      	nop
 8013802:	e7fe      	b.n	8013802 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	2b02      	cmp	r3, #2
 8013808:	d103      	bne.n	8013812 <xQueueGenericSend+0x6e>
 801380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801380e:	2b01      	cmp	r3, #1
 8013810:	d101      	bne.n	8013816 <xQueueGenericSend+0x72>
 8013812:	2301      	movs	r3, #1
 8013814:	e000      	b.n	8013818 <xQueueGenericSend+0x74>
 8013816:	2300      	movs	r3, #0
 8013818:	2b00      	cmp	r3, #0
 801381a:	d10a      	bne.n	8013832 <xQueueGenericSend+0x8e>
	__asm volatile
 801381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013820:	f383 8811 	msr	BASEPRI, r3
 8013824:	f3bf 8f6f 	isb	sy
 8013828:	f3bf 8f4f 	dsb	sy
 801382c:	623b      	str	r3, [r7, #32]
}
 801382e:	bf00      	nop
 8013830:	e7fe      	b.n	8013830 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013832:	f001 fbad 	bl	8014f90 <xTaskGetSchedulerState>
 8013836:	4603      	mov	r3, r0
 8013838:	2b00      	cmp	r3, #0
 801383a:	d102      	bne.n	8013842 <xQueueGenericSend+0x9e>
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d101      	bne.n	8013846 <xQueueGenericSend+0xa2>
 8013842:	2301      	movs	r3, #1
 8013844:	e000      	b.n	8013848 <xQueueGenericSend+0xa4>
 8013846:	2300      	movs	r3, #0
 8013848:	2b00      	cmp	r3, #0
 801384a:	d10a      	bne.n	8013862 <xQueueGenericSend+0xbe>
	__asm volatile
 801384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013850:	f383 8811 	msr	BASEPRI, r3
 8013854:	f3bf 8f6f 	isb	sy
 8013858:	f3bf 8f4f 	dsb	sy
 801385c:	61fb      	str	r3, [r7, #28]
}
 801385e:	bf00      	nop
 8013860:	e7fe      	b.n	8013860 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013862:	f001 fecb 	bl	80155fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801386c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801386e:	429a      	cmp	r2, r3
 8013870:	d302      	bcc.n	8013878 <xQueueGenericSend+0xd4>
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	2b02      	cmp	r3, #2
 8013876:	d129      	bne.n	80138cc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013878:	683a      	ldr	r2, [r7, #0]
 801387a:	68b9      	ldr	r1, [r7, #8]
 801387c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801387e:	f000 fc5b 	bl	8014138 <prvCopyDataToQueue>
 8013882:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013888:	2b00      	cmp	r3, #0
 801388a:	d010      	beq.n	80138ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388e:	3324      	adds	r3, #36	; 0x24
 8013890:	4618      	mov	r0, r3
 8013892:	f001 f9b9 	bl	8014c08 <xTaskRemoveFromEventList>
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d013      	beq.n	80138c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801389c:	4b3f      	ldr	r3, [pc, #252]	; (801399c <xQueueGenericSend+0x1f8>)
 801389e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138a2:	601a      	str	r2, [r3, #0]
 80138a4:	f3bf 8f4f 	dsb	sy
 80138a8:	f3bf 8f6f 	isb	sy
 80138ac:	e00a      	b.n	80138c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80138ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d007      	beq.n	80138c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80138b4:	4b39      	ldr	r3, [pc, #228]	; (801399c <xQueueGenericSend+0x1f8>)
 80138b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138ba:	601a      	str	r2, [r3, #0]
 80138bc:	f3bf 8f4f 	dsb	sy
 80138c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80138c4:	f001 feca 	bl	801565c <vPortExitCritical>
				return pdPASS;
 80138c8:	2301      	movs	r3, #1
 80138ca:	e063      	b.n	8013994 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d103      	bne.n	80138da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80138d2:	f001 fec3 	bl	801565c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80138d6:	2300      	movs	r3, #0
 80138d8:	e05c      	b.n	8013994 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80138da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d106      	bne.n	80138ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80138e0:	f107 0314 	add.w	r3, r7, #20
 80138e4:	4618      	mov	r0, r3
 80138e6:	f001 f9f1 	bl	8014ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80138ea:	2301      	movs	r3, #1
 80138ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80138ee:	f001 feb5 	bl	801565c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80138f2:	f000 ff9b 	bl	801482c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80138f6:	f001 fe81 	bl	80155fc <vPortEnterCritical>
 80138fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013900:	b25b      	sxtb	r3, r3
 8013902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013906:	d103      	bne.n	8013910 <xQueueGenericSend+0x16c>
 8013908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801390a:	2200      	movs	r2, #0
 801390c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013916:	b25b      	sxtb	r3, r3
 8013918:	f1b3 3fff 	cmp.w	r3, #4294967295
 801391c:	d103      	bne.n	8013926 <xQueueGenericSend+0x182>
 801391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013920:	2200      	movs	r2, #0
 8013922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013926:	f001 fe99 	bl	801565c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801392a:	1d3a      	adds	r2, r7, #4
 801392c:	f107 0314 	add.w	r3, r7, #20
 8013930:	4611      	mov	r1, r2
 8013932:	4618      	mov	r0, r3
 8013934:	f001 f9e0 	bl	8014cf8 <xTaskCheckForTimeOut>
 8013938:	4603      	mov	r3, r0
 801393a:	2b00      	cmp	r3, #0
 801393c:	d124      	bne.n	8013988 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801393e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013940:	f000 fcf2 	bl	8014328 <prvIsQueueFull>
 8013944:	4603      	mov	r3, r0
 8013946:	2b00      	cmp	r3, #0
 8013948:	d018      	beq.n	801397c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394c:	3310      	adds	r3, #16
 801394e:	687a      	ldr	r2, [r7, #4]
 8013950:	4611      	mov	r1, r2
 8013952:	4618      	mov	r0, r3
 8013954:	f001 f934 	bl	8014bc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801395a:	f000 fc7d 	bl	8014258 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801395e:	f000 ff73 	bl	8014848 <xTaskResumeAll>
 8013962:	4603      	mov	r3, r0
 8013964:	2b00      	cmp	r3, #0
 8013966:	f47f af7c 	bne.w	8013862 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801396a:	4b0c      	ldr	r3, [pc, #48]	; (801399c <xQueueGenericSend+0x1f8>)
 801396c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013970:	601a      	str	r2, [r3, #0]
 8013972:	f3bf 8f4f 	dsb	sy
 8013976:	f3bf 8f6f 	isb	sy
 801397a:	e772      	b.n	8013862 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801397c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801397e:	f000 fc6b 	bl	8014258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013982:	f000 ff61 	bl	8014848 <xTaskResumeAll>
 8013986:	e76c      	b.n	8013862 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801398a:	f000 fc65 	bl	8014258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801398e:	f000 ff5b 	bl	8014848 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013992:	2300      	movs	r3, #0
		}
	}
}
 8013994:	4618      	mov	r0, r3
 8013996:	3738      	adds	r7, #56	; 0x38
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}
 801399c:	e000ed04 	.word	0xe000ed04

080139a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b08e      	sub	sp, #56	; 0x38
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	60f8      	str	r0, [r7, #12]
 80139a8:	60b9      	str	r1, [r7, #8]
 80139aa:	607a      	str	r2, [r7, #4]
 80139ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80139b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d10a      	bne.n	80139ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80139b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139bc:	f383 8811 	msr	BASEPRI, r3
 80139c0:	f3bf 8f6f 	isb	sy
 80139c4:	f3bf 8f4f 	dsb	sy
 80139c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80139ca:	bf00      	nop
 80139cc:	e7fe      	b.n	80139cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d103      	bne.n	80139dc <xQueueGenericSendFromISR+0x3c>
 80139d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d101      	bne.n	80139e0 <xQueueGenericSendFromISR+0x40>
 80139dc:	2301      	movs	r3, #1
 80139de:	e000      	b.n	80139e2 <xQueueGenericSendFromISR+0x42>
 80139e0:	2300      	movs	r3, #0
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d10a      	bne.n	80139fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80139e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ea:	f383 8811 	msr	BASEPRI, r3
 80139ee:	f3bf 8f6f 	isb	sy
 80139f2:	f3bf 8f4f 	dsb	sy
 80139f6:	623b      	str	r3, [r7, #32]
}
 80139f8:	bf00      	nop
 80139fa:	e7fe      	b.n	80139fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	2b02      	cmp	r3, #2
 8013a00:	d103      	bne.n	8013a0a <xQueueGenericSendFromISR+0x6a>
 8013a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a06:	2b01      	cmp	r3, #1
 8013a08:	d101      	bne.n	8013a0e <xQueueGenericSendFromISR+0x6e>
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	e000      	b.n	8013a10 <xQueueGenericSendFromISR+0x70>
 8013a0e:	2300      	movs	r3, #0
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d10a      	bne.n	8013a2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a18:	f383 8811 	msr	BASEPRI, r3
 8013a1c:	f3bf 8f6f 	isb	sy
 8013a20:	f3bf 8f4f 	dsb	sy
 8013a24:	61fb      	str	r3, [r7, #28]
}
 8013a26:	bf00      	nop
 8013a28:	e7fe      	b.n	8013a28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a2a:	f001 fea9 	bl	8015780 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013a2e:	f3ef 8211 	mrs	r2, BASEPRI
 8013a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a36:	f383 8811 	msr	BASEPRI, r3
 8013a3a:	f3bf 8f6f 	isb	sy
 8013a3e:	f3bf 8f4f 	dsb	sy
 8013a42:	61ba      	str	r2, [r7, #24]
 8013a44:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013a46:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d302      	bcc.n	8013a5c <xQueueGenericSendFromISR+0xbc>
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	2b02      	cmp	r3, #2
 8013a5a:	d12c      	bne.n	8013ab6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013a66:	683a      	ldr	r2, [r7, #0]
 8013a68:	68b9      	ldr	r1, [r7, #8]
 8013a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a6c:	f000 fb64 	bl	8014138 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013a70:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a78:	d112      	bne.n	8013aa0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d016      	beq.n	8013ab0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a84:	3324      	adds	r3, #36	; 0x24
 8013a86:	4618      	mov	r0, r3
 8013a88:	f001 f8be 	bl	8014c08 <xTaskRemoveFromEventList>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d00e      	beq.n	8013ab0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d00b      	beq.n	8013ab0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2201      	movs	r2, #1
 8013a9c:	601a      	str	r2, [r3, #0]
 8013a9e:	e007      	b.n	8013ab0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013aa0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013aa4:	3301      	adds	r3, #1
 8013aa6:	b2db      	uxtb	r3, r3
 8013aa8:	b25a      	sxtb	r2, r3
 8013aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013ab4:	e001      	b.n	8013aba <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8013aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013abc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013ac4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013ac8:	4618      	mov	r0, r3
 8013aca:	3738      	adds	r7, #56	; 0x38
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}

08013ad0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b08e      	sub	sp, #56	; 0x38
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d10a      	bne.n	8013afa <xQueueGiveFromISR+0x2a>
	__asm volatile
 8013ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ae8:	f383 8811 	msr	BASEPRI, r3
 8013aec:	f3bf 8f6f 	isb	sy
 8013af0:	f3bf 8f4f 	dsb	sy
 8013af4:	623b      	str	r3, [r7, #32]
}
 8013af6:	bf00      	nop
 8013af8:	e7fe      	b.n	8013af8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d00a      	beq.n	8013b18 <xQueueGiveFromISR+0x48>
	__asm volatile
 8013b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b06:	f383 8811 	msr	BASEPRI, r3
 8013b0a:	f3bf 8f6f 	isb	sy
 8013b0e:	f3bf 8f4f 	dsb	sy
 8013b12:	61fb      	str	r3, [r7, #28]
}
 8013b14:	bf00      	nop
 8013b16:	e7fe      	b.n	8013b16 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8013b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d103      	bne.n	8013b28 <xQueueGiveFromISR+0x58>
 8013b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d101      	bne.n	8013b2c <xQueueGiveFromISR+0x5c>
 8013b28:	2301      	movs	r3, #1
 8013b2a:	e000      	b.n	8013b2e <xQueueGiveFromISR+0x5e>
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d10a      	bne.n	8013b48 <xQueueGiveFromISR+0x78>
	__asm volatile
 8013b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b36:	f383 8811 	msr	BASEPRI, r3
 8013b3a:	f3bf 8f6f 	isb	sy
 8013b3e:	f3bf 8f4f 	dsb	sy
 8013b42:	61bb      	str	r3, [r7, #24]
}
 8013b44:	bf00      	nop
 8013b46:	e7fe      	b.n	8013b46 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b48:	f001 fe1a 	bl	8015780 <vPortValidateInterruptPriority>
	__asm volatile
 8013b4c:	f3ef 8211 	mrs	r2, BASEPRI
 8013b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b54:	f383 8811 	msr	BASEPRI, r3
 8013b58:	f3bf 8f6f 	isb	sy
 8013b5c:	f3bf 8f4f 	dsb	sy
 8013b60:	617a      	str	r2, [r7, #20]
 8013b62:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013b64:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b66:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b6c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b74:	429a      	cmp	r2, r3
 8013b76:	d22b      	bcs.n	8013bd0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b84:	1c5a      	adds	r2, r3, #1
 8013b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b88:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013b8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b92:	d112      	bne.n	8013bba <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d016      	beq.n	8013bca <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b9e:	3324      	adds	r3, #36	; 0x24
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f001 f831 	bl	8014c08 <xTaskRemoveFromEventList>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d00e      	beq.n	8013bca <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d00b      	beq.n	8013bca <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	2201      	movs	r2, #1
 8013bb6:	601a      	str	r2, [r3, #0]
 8013bb8:	e007      	b.n	8013bca <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	b2db      	uxtb	r3, r3
 8013bc2:	b25a      	sxtb	r2, r3
 8013bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013bca:	2301      	movs	r3, #1
 8013bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8013bce:	e001      	b.n	8013bd4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8013bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	f383 8811 	msr	BASEPRI, r3
}
 8013bde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013be2:	4618      	mov	r0, r3
 8013be4:	3738      	adds	r7, #56	; 0x38
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}
	...

08013bec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b08c      	sub	sp, #48	; 0x30
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	60f8      	str	r0, [r7, #12]
 8013bf4:	60b9      	str	r1, [r7, #8]
 8013bf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d10a      	bne.n	8013c1c <xQueueReceive+0x30>
	__asm volatile
 8013c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c0a:	f383 8811 	msr	BASEPRI, r3
 8013c0e:	f3bf 8f6f 	isb	sy
 8013c12:	f3bf 8f4f 	dsb	sy
 8013c16:	623b      	str	r3, [r7, #32]
}
 8013c18:	bf00      	nop
 8013c1a:	e7fe      	b.n	8013c1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d103      	bne.n	8013c2a <xQueueReceive+0x3e>
 8013c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d101      	bne.n	8013c2e <xQueueReceive+0x42>
 8013c2a:	2301      	movs	r3, #1
 8013c2c:	e000      	b.n	8013c30 <xQueueReceive+0x44>
 8013c2e:	2300      	movs	r3, #0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d10a      	bne.n	8013c4a <xQueueReceive+0x5e>
	__asm volatile
 8013c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c38:	f383 8811 	msr	BASEPRI, r3
 8013c3c:	f3bf 8f6f 	isb	sy
 8013c40:	f3bf 8f4f 	dsb	sy
 8013c44:	61fb      	str	r3, [r7, #28]
}
 8013c46:	bf00      	nop
 8013c48:	e7fe      	b.n	8013c48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c4a:	f001 f9a1 	bl	8014f90 <xTaskGetSchedulerState>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d102      	bne.n	8013c5a <xQueueReceive+0x6e>
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d101      	bne.n	8013c5e <xQueueReceive+0x72>
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	e000      	b.n	8013c60 <xQueueReceive+0x74>
 8013c5e:	2300      	movs	r3, #0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d10a      	bne.n	8013c7a <xQueueReceive+0x8e>
	__asm volatile
 8013c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c68:	f383 8811 	msr	BASEPRI, r3
 8013c6c:	f3bf 8f6f 	isb	sy
 8013c70:	f3bf 8f4f 	dsb	sy
 8013c74:	61bb      	str	r3, [r7, #24]
}
 8013c76:	bf00      	nop
 8013c78:	e7fe      	b.n	8013c78 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c7a:	f001 fcbf 	bl	80155fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d01f      	beq.n	8013cca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c8a:	68b9      	ldr	r1, [r7, #8]
 8013c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c8e:	f000 fabd 	bl	801420c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c94:	1e5a      	subs	r2, r3, #1
 8013c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c9c:	691b      	ldr	r3, [r3, #16]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d00f      	beq.n	8013cc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca4:	3310      	adds	r3, #16
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f000 ffae 	bl	8014c08 <xTaskRemoveFromEventList>
 8013cac:	4603      	mov	r3, r0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d007      	beq.n	8013cc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013cb2:	4b3d      	ldr	r3, [pc, #244]	; (8013da8 <xQueueReceive+0x1bc>)
 8013cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cb8:	601a      	str	r2, [r3, #0]
 8013cba:	f3bf 8f4f 	dsb	sy
 8013cbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013cc2:	f001 fccb 	bl	801565c <vPortExitCritical>
				return pdPASS;
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	e069      	b.n	8013d9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d103      	bne.n	8013cd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013cd0:	f001 fcc4 	bl	801565c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	e062      	b.n	8013d9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d106      	bne.n	8013cec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013cde:	f107 0310 	add.w	r3, r7, #16
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f000 fff2 	bl	8014ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013ce8:	2301      	movs	r3, #1
 8013cea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013cec:	f001 fcb6 	bl	801565c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013cf0:	f000 fd9c 	bl	801482c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013cf4:	f001 fc82 	bl	80155fc <vPortEnterCritical>
 8013cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013cfe:	b25b      	sxtb	r3, r3
 8013d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d04:	d103      	bne.n	8013d0e <xQueueReceive+0x122>
 8013d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d08:	2200      	movs	r2, #0
 8013d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d14:	b25b      	sxtb	r3, r3
 8013d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d1a:	d103      	bne.n	8013d24 <xQueueReceive+0x138>
 8013d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d1e:	2200      	movs	r2, #0
 8013d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d24:	f001 fc9a 	bl	801565c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d28:	1d3a      	adds	r2, r7, #4
 8013d2a:	f107 0310 	add.w	r3, r7, #16
 8013d2e:	4611      	mov	r1, r2
 8013d30:	4618      	mov	r0, r3
 8013d32:	f000 ffe1 	bl	8014cf8 <xTaskCheckForTimeOut>
 8013d36:	4603      	mov	r3, r0
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d123      	bne.n	8013d84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d3e:	f000 fadd 	bl	80142fc <prvIsQueueEmpty>
 8013d42:	4603      	mov	r3, r0
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d017      	beq.n	8013d78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d4a:	3324      	adds	r3, #36	; 0x24
 8013d4c:	687a      	ldr	r2, [r7, #4]
 8013d4e:	4611      	mov	r1, r2
 8013d50:	4618      	mov	r0, r3
 8013d52:	f000 ff35 	bl	8014bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d58:	f000 fa7e 	bl	8014258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d5c:	f000 fd74 	bl	8014848 <xTaskResumeAll>
 8013d60:	4603      	mov	r3, r0
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d189      	bne.n	8013c7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013d66:	4b10      	ldr	r3, [pc, #64]	; (8013da8 <xQueueReceive+0x1bc>)
 8013d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d6c:	601a      	str	r2, [r3, #0]
 8013d6e:	f3bf 8f4f 	dsb	sy
 8013d72:	f3bf 8f6f 	isb	sy
 8013d76:	e780      	b.n	8013c7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d7a:	f000 fa6d 	bl	8014258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013d7e:	f000 fd63 	bl	8014848 <xTaskResumeAll>
 8013d82:	e77a      	b.n	8013c7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d86:	f000 fa67 	bl	8014258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013d8a:	f000 fd5d 	bl	8014848 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d90:	f000 fab4 	bl	80142fc <prvIsQueueEmpty>
 8013d94:	4603      	mov	r3, r0
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	f43f af6f 	beq.w	8013c7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013d9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8013d9e:	4618      	mov	r0, r3
 8013da0:	3730      	adds	r7, #48	; 0x30
 8013da2:	46bd      	mov	sp, r7
 8013da4:	bd80      	pop	{r7, pc}
 8013da6:	bf00      	nop
 8013da8:	e000ed04 	.word	0xe000ed04

08013dac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b08e      	sub	sp, #56	; 0x38
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013db6:	2300      	movs	r3, #0
 8013db8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d10a      	bne.n	8013dde <xQueueSemaphoreTake+0x32>
	__asm volatile
 8013dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dcc:	f383 8811 	msr	BASEPRI, r3
 8013dd0:	f3bf 8f6f 	isb	sy
 8013dd4:	f3bf 8f4f 	dsb	sy
 8013dd8:	623b      	str	r3, [r7, #32]
}
 8013dda:	bf00      	nop
 8013ddc:	e7fe      	b.n	8013ddc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d00a      	beq.n	8013dfc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8013de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dea:	f383 8811 	msr	BASEPRI, r3
 8013dee:	f3bf 8f6f 	isb	sy
 8013df2:	f3bf 8f4f 	dsb	sy
 8013df6:	61fb      	str	r3, [r7, #28]
}
 8013df8:	bf00      	nop
 8013dfa:	e7fe      	b.n	8013dfa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013dfc:	f001 f8c8 	bl	8014f90 <xTaskGetSchedulerState>
 8013e00:	4603      	mov	r3, r0
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d102      	bne.n	8013e0c <xQueueSemaphoreTake+0x60>
 8013e06:	683b      	ldr	r3, [r7, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d101      	bne.n	8013e10 <xQueueSemaphoreTake+0x64>
 8013e0c:	2301      	movs	r3, #1
 8013e0e:	e000      	b.n	8013e12 <xQueueSemaphoreTake+0x66>
 8013e10:	2300      	movs	r3, #0
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d10a      	bne.n	8013e2c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8013e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1a:	f383 8811 	msr	BASEPRI, r3
 8013e1e:	f3bf 8f6f 	isb	sy
 8013e22:	f3bf 8f4f 	dsb	sy
 8013e26:	61bb      	str	r3, [r7, #24]
}
 8013e28:	bf00      	nop
 8013e2a:	e7fe      	b.n	8013e2a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8013e2c:	f001 fbe6 	bl	80155fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e34:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d024      	beq.n	8013e86 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e3e:	1e5a      	subs	r2, r3, #1
 8013e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d104      	bne.n	8013e56 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8013e4c:	f001 fa6a 	bl	8015324 <pvTaskIncrementMutexHeldCount>
 8013e50:	4602      	mov	r2, r0
 8013e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e54:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e58:	691b      	ldr	r3, [r3, #16]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d00f      	beq.n	8013e7e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e60:	3310      	adds	r3, #16
 8013e62:	4618      	mov	r0, r3
 8013e64:	f000 fed0 	bl	8014c08 <xTaskRemoveFromEventList>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d007      	beq.n	8013e7e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013e6e:	4b54      	ldr	r3, [pc, #336]	; (8013fc0 <xQueueSemaphoreTake+0x214>)
 8013e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e74:	601a      	str	r2, [r3, #0]
 8013e76:	f3bf 8f4f 	dsb	sy
 8013e7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013e7e:	f001 fbed 	bl	801565c <vPortExitCritical>
				return pdPASS;
 8013e82:	2301      	movs	r3, #1
 8013e84:	e097      	b.n	8013fb6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013e86:	683b      	ldr	r3, [r7, #0]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d111      	bne.n	8013eb0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d00a      	beq.n	8013ea8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8013e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e96:	f383 8811 	msr	BASEPRI, r3
 8013e9a:	f3bf 8f6f 	isb	sy
 8013e9e:	f3bf 8f4f 	dsb	sy
 8013ea2:	617b      	str	r3, [r7, #20]
}
 8013ea4:	bf00      	nop
 8013ea6:	e7fe      	b.n	8013ea6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013ea8:	f001 fbd8 	bl	801565c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013eac:	2300      	movs	r3, #0
 8013eae:	e082      	b.n	8013fb6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d106      	bne.n	8013ec4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013eb6:	f107 030c 	add.w	r3, r7, #12
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f000 ff06 	bl	8014ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013ec4:	f001 fbca 	bl	801565c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013ec8:	f000 fcb0 	bl	801482c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013ecc:	f001 fb96 	bl	80155fc <vPortEnterCritical>
 8013ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013ed6:	b25b      	sxtb	r3, r3
 8013ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013edc:	d103      	bne.n	8013ee6 <xQueueSemaphoreTake+0x13a>
 8013ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013eec:	b25b      	sxtb	r3, r3
 8013eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ef2:	d103      	bne.n	8013efc <xQueueSemaphoreTake+0x150>
 8013ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013efc:	f001 fbae 	bl	801565c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013f00:	463a      	mov	r2, r7
 8013f02:	f107 030c 	add.w	r3, r7, #12
 8013f06:	4611      	mov	r1, r2
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f000 fef5 	bl	8014cf8 <xTaskCheckForTimeOut>
 8013f0e:	4603      	mov	r3, r0
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d132      	bne.n	8013f7a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013f14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f16:	f000 f9f1 	bl	80142fc <prvIsQueueEmpty>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d026      	beq.n	8013f6e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d109      	bne.n	8013f3c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8013f28:	f001 fb68 	bl	80155fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8013f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	4618      	mov	r0, r3
 8013f32:	f001 f84b 	bl	8014fcc <xTaskPriorityInherit>
 8013f36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013f38:	f001 fb90 	bl	801565c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f3e:	3324      	adds	r3, #36	; 0x24
 8013f40:	683a      	ldr	r2, [r7, #0]
 8013f42:	4611      	mov	r1, r2
 8013f44:	4618      	mov	r0, r3
 8013f46:	f000 fe3b 	bl	8014bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013f4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f4c:	f000 f984 	bl	8014258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013f50:	f000 fc7a 	bl	8014848 <xTaskResumeAll>
 8013f54:	4603      	mov	r3, r0
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	f47f af68 	bne.w	8013e2c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8013f5c:	4b18      	ldr	r3, [pc, #96]	; (8013fc0 <xQueueSemaphoreTake+0x214>)
 8013f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f62:	601a      	str	r2, [r3, #0]
 8013f64:	f3bf 8f4f 	dsb	sy
 8013f68:	f3bf 8f6f 	isb	sy
 8013f6c:	e75e      	b.n	8013e2c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013f6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f70:	f000 f972 	bl	8014258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013f74:	f000 fc68 	bl	8014848 <xTaskResumeAll>
 8013f78:	e758      	b.n	8013e2c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013f7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f7c:	f000 f96c 	bl	8014258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013f80:	f000 fc62 	bl	8014848 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013f84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f86:	f000 f9b9 	bl	80142fc <prvIsQueueEmpty>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	f43f af4d 	beq.w	8013e2c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d00d      	beq.n	8013fb4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8013f98:	f001 fb30 	bl	80155fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f9e:	f000 f8b4 	bl	801410a <prvGetDisinheritPriorityAfterTimeout>
 8013fa2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8013fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa6:	685b      	ldr	r3, [r3, #4]
 8013fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013faa:	4618      	mov	r0, r3
 8013fac:	f001 f91a 	bl	80151e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013fb0:	f001 fb54 	bl	801565c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013fb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3738      	adds	r7, #56	; 0x38
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
 8013fbe:	bf00      	nop
 8013fc0:	e000ed04 	.word	0xe000ed04

08013fc4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b08e      	sub	sp, #56	; 0x38
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	60f8      	str	r0, [r7, #12]
 8013fcc:	60b9      	str	r1, [r7, #8]
 8013fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d10a      	bne.n	8013ff0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fde:	f383 8811 	msr	BASEPRI, r3
 8013fe2:	f3bf 8f6f 	isb	sy
 8013fe6:	f3bf 8f4f 	dsb	sy
 8013fea:	623b      	str	r3, [r7, #32]
}
 8013fec:	bf00      	nop
 8013fee:	e7fe      	b.n	8013fee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d103      	bne.n	8013ffe <xQueueReceiveFromISR+0x3a>
 8013ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d101      	bne.n	8014002 <xQueueReceiveFromISR+0x3e>
 8013ffe:	2301      	movs	r3, #1
 8014000:	e000      	b.n	8014004 <xQueueReceiveFromISR+0x40>
 8014002:	2300      	movs	r3, #0
 8014004:	2b00      	cmp	r3, #0
 8014006:	d10a      	bne.n	801401e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801400c:	f383 8811 	msr	BASEPRI, r3
 8014010:	f3bf 8f6f 	isb	sy
 8014014:	f3bf 8f4f 	dsb	sy
 8014018:	61fb      	str	r3, [r7, #28]
}
 801401a:	bf00      	nop
 801401c:	e7fe      	b.n	801401c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801401e:	f001 fbaf 	bl	8015780 <vPortValidateInterruptPriority>
	__asm volatile
 8014022:	f3ef 8211 	mrs	r2, BASEPRI
 8014026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801402a:	f383 8811 	msr	BASEPRI, r3
 801402e:	f3bf 8f6f 	isb	sy
 8014032:	f3bf 8f4f 	dsb	sy
 8014036:	61ba      	str	r2, [r7, #24]
 8014038:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801403a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801403c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014042:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014046:	2b00      	cmp	r3, #0
 8014048:	d02f      	beq.n	80140aa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801404c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014054:	68b9      	ldr	r1, [r7, #8]
 8014056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014058:	f000 f8d8 	bl	801420c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801405e:	1e5a      	subs	r2, r3, #1
 8014060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014062:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014064:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801406c:	d112      	bne.n	8014094 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014070:	691b      	ldr	r3, [r3, #16]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d016      	beq.n	80140a4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014078:	3310      	adds	r3, #16
 801407a:	4618      	mov	r0, r3
 801407c:	f000 fdc4 	bl	8014c08 <xTaskRemoveFromEventList>
 8014080:	4603      	mov	r3, r0
 8014082:	2b00      	cmp	r3, #0
 8014084:	d00e      	beq.n	80140a4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d00b      	beq.n	80140a4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2201      	movs	r2, #1
 8014090:	601a      	str	r2, [r3, #0]
 8014092:	e007      	b.n	80140a4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014098:	3301      	adds	r3, #1
 801409a:	b2db      	uxtb	r3, r3
 801409c:	b25a      	sxtb	r2, r3
 801409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80140a4:	2301      	movs	r3, #1
 80140a6:	637b      	str	r3, [r7, #52]	; 0x34
 80140a8:	e001      	b.n	80140ae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80140aa:	2300      	movs	r3, #0
 80140ac:	637b      	str	r3, [r7, #52]	; 0x34
 80140ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80140b2:	693b      	ldr	r3, [r7, #16]
 80140b4:	f383 8811 	msr	BASEPRI, r3
}
 80140b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80140ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80140bc:	4618      	mov	r0, r3
 80140be:	3738      	adds	r7, #56	; 0x38
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}

080140c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b084      	sub	sp, #16
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d10a      	bne.n	80140ec <vQueueDelete+0x28>
	__asm volatile
 80140d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140da:	f383 8811 	msr	BASEPRI, r3
 80140de:	f3bf 8f6f 	isb	sy
 80140e2:	f3bf 8f4f 	dsb	sy
 80140e6:	60bb      	str	r3, [r7, #8]
}
 80140e8:	bf00      	nop
 80140ea:	e7fe      	b.n	80140ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80140ec:	68f8      	ldr	r0, [r7, #12]
 80140ee:	f000 f933 	bl	8014358 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d102      	bne.n	8014102 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80140fc:	68f8      	ldr	r0, [r7, #12]
 80140fe:	f001 fc41 	bl	8015984 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8014102:	bf00      	nop
 8014104:	3710      	adds	r7, #16
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}

0801410a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801410a:	b480      	push	{r7}
 801410c:	b085      	sub	sp, #20
 801410e:	af00      	add	r7, sp, #0
 8014110:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014116:	2b00      	cmp	r3, #0
 8014118:	d006      	beq.n	8014128 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	f1c3 0307 	rsb	r3, r3, #7
 8014124:	60fb      	str	r3, [r7, #12]
 8014126:	e001      	b.n	801412c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014128:	2300      	movs	r3, #0
 801412a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801412c:	68fb      	ldr	r3, [r7, #12]
	}
 801412e:	4618      	mov	r0, r3
 8014130:	3714      	adds	r7, #20
 8014132:	46bd      	mov	sp, r7
 8014134:	bc80      	pop	{r7}
 8014136:	4770      	bx	lr

08014138 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b086      	sub	sp, #24
 801413c:	af00      	add	r7, sp, #0
 801413e:	60f8      	str	r0, [r7, #12]
 8014140:	60b9      	str	r1, [r7, #8]
 8014142:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014144:	2300      	movs	r3, #0
 8014146:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801414c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014152:	2b00      	cmp	r3, #0
 8014154:	d10d      	bne.n	8014172 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d14d      	bne.n	80141fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	685b      	ldr	r3, [r3, #4]
 8014162:	4618      	mov	r0, r3
 8014164:	f000 ffb8 	bl	80150d8 <xTaskPriorityDisinherit>
 8014168:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	2200      	movs	r2, #0
 801416e:	605a      	str	r2, [r3, #4]
 8014170:	e043      	b.n	80141fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d119      	bne.n	80141ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	6898      	ldr	r0, [r3, #8]
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014180:	461a      	mov	r2, r3
 8014182:	68b9      	ldr	r1, [r7, #8]
 8014184:	f002 f986 	bl	8016494 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	689a      	ldr	r2, [r3, #8]
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014190:	441a      	add	r2, r3
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	689a      	ldr	r2, [r3, #8]
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	685b      	ldr	r3, [r3, #4]
 801419e:	429a      	cmp	r2, r3
 80141a0:	d32b      	bcc.n	80141fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	681a      	ldr	r2, [r3, #0]
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	609a      	str	r2, [r3, #8]
 80141aa:	e026      	b.n	80141fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	68d8      	ldr	r0, [r3, #12]
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141b4:	461a      	mov	r2, r3
 80141b6:	68b9      	ldr	r1, [r7, #8]
 80141b8:	f002 f96c 	bl	8016494 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	68da      	ldr	r2, [r3, #12]
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141c4:	425b      	negs	r3, r3
 80141c6:	441a      	add	r2, r3
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	68da      	ldr	r2, [r3, #12]
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	429a      	cmp	r2, r3
 80141d6:	d207      	bcs.n	80141e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	685a      	ldr	r2, [r3, #4]
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141e0:	425b      	negs	r3, r3
 80141e2:	441a      	add	r2, r3
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2b02      	cmp	r3, #2
 80141ec:	d105      	bne.n	80141fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80141ee:	693b      	ldr	r3, [r7, #16]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d002      	beq.n	80141fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80141f4:	693b      	ldr	r3, [r7, #16]
 80141f6:	3b01      	subs	r3, #1
 80141f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80141fa:	693b      	ldr	r3, [r7, #16]
 80141fc:	1c5a      	adds	r2, r3, #1
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014202:	697b      	ldr	r3, [r7, #20]
}
 8014204:	4618      	mov	r0, r3
 8014206:	3718      	adds	r7, #24
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}

0801420c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b082      	sub	sp, #8
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
 8014214:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801421a:	2b00      	cmp	r3, #0
 801421c:	d018      	beq.n	8014250 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	68da      	ldr	r2, [r3, #12]
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014226:	441a      	add	r2, r3
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	68da      	ldr	r2, [r3, #12]
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	685b      	ldr	r3, [r3, #4]
 8014234:	429a      	cmp	r2, r3
 8014236:	d303      	bcc.n	8014240 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681a      	ldr	r2, [r3, #0]
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	68d9      	ldr	r1, [r3, #12]
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014248:	461a      	mov	r2, r3
 801424a:	6838      	ldr	r0, [r7, #0]
 801424c:	f002 f922 	bl	8016494 <memcpy>
	}
}
 8014250:	bf00      	nop
 8014252:	3708      	adds	r7, #8
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b084      	sub	sp, #16
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014260:	f001 f9cc 	bl	80155fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801426a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801426c:	e011      	b.n	8014292 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014272:	2b00      	cmp	r3, #0
 8014274:	d012      	beq.n	801429c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	3324      	adds	r3, #36	; 0x24
 801427a:	4618      	mov	r0, r3
 801427c:	f000 fcc4 	bl	8014c08 <xTaskRemoveFromEventList>
 8014280:	4603      	mov	r3, r0
 8014282:	2b00      	cmp	r3, #0
 8014284:	d001      	beq.n	801428a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014286:	f000 fd99 	bl	8014dbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801428a:	7bfb      	ldrb	r3, [r7, #15]
 801428c:	3b01      	subs	r3, #1
 801428e:	b2db      	uxtb	r3, r3
 8014290:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014296:	2b00      	cmp	r3, #0
 8014298:	dce9      	bgt.n	801426e <prvUnlockQueue+0x16>
 801429a:	e000      	b.n	801429e <prvUnlockQueue+0x46>
					break;
 801429c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	22ff      	movs	r2, #255	; 0xff
 80142a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80142a6:	f001 f9d9 	bl	801565c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80142aa:	f001 f9a7 	bl	80155fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80142b6:	e011      	b.n	80142dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	691b      	ldr	r3, [r3, #16]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d012      	beq.n	80142e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	3310      	adds	r3, #16
 80142c4:	4618      	mov	r0, r3
 80142c6:	f000 fc9f 	bl	8014c08 <xTaskRemoveFromEventList>
 80142ca:	4603      	mov	r3, r0
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d001      	beq.n	80142d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80142d0:	f000 fd74 	bl	8014dbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80142d4:	7bbb      	ldrb	r3, [r7, #14]
 80142d6:	3b01      	subs	r3, #1
 80142d8:	b2db      	uxtb	r3, r3
 80142da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80142dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	dce9      	bgt.n	80142b8 <prvUnlockQueue+0x60>
 80142e4:	e000      	b.n	80142e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80142e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	22ff      	movs	r2, #255	; 0xff
 80142ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80142f0:	f001 f9b4 	bl	801565c <vPortExitCritical>
}
 80142f4:	bf00      	nop
 80142f6:	3710      	adds	r7, #16
 80142f8:	46bd      	mov	sp, r7
 80142fa:	bd80      	pop	{r7, pc}

080142fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b084      	sub	sp, #16
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014304:	f001 f97a 	bl	80155fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801430c:	2b00      	cmp	r3, #0
 801430e:	d102      	bne.n	8014316 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014310:	2301      	movs	r3, #1
 8014312:	60fb      	str	r3, [r7, #12]
 8014314:	e001      	b.n	801431a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014316:	2300      	movs	r3, #0
 8014318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801431a:	f001 f99f 	bl	801565c <vPortExitCritical>

	return xReturn;
 801431e:	68fb      	ldr	r3, [r7, #12]
}
 8014320:	4618      	mov	r0, r3
 8014322:	3710      	adds	r7, #16
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}

08014328 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b084      	sub	sp, #16
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014330:	f001 f964 	bl	80155fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801433c:	429a      	cmp	r2, r3
 801433e:	d102      	bne.n	8014346 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014340:	2301      	movs	r3, #1
 8014342:	60fb      	str	r3, [r7, #12]
 8014344:	e001      	b.n	801434a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014346:	2300      	movs	r3, #0
 8014348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801434a:	f001 f987 	bl	801565c <vPortExitCritical>

	return xReturn;
 801434e:	68fb      	ldr	r3, [r7, #12]
}
 8014350:	4618      	mov	r0, r3
 8014352:	3710      	adds	r7, #16
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}

08014358 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8014358:	b480      	push	{r7}
 801435a:	b085      	sub	sp, #20
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014360:	2300      	movs	r3, #0
 8014362:	60fb      	str	r3, [r7, #12]
 8014364:	e016      	b.n	8014394 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014366:	4a10      	ldr	r2, [pc, #64]	; (80143a8 <vQueueUnregisterQueue+0x50>)
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	00db      	lsls	r3, r3, #3
 801436c:	4413      	add	r3, r2
 801436e:	685b      	ldr	r3, [r3, #4]
 8014370:	687a      	ldr	r2, [r7, #4]
 8014372:	429a      	cmp	r2, r3
 8014374:	d10b      	bne.n	801438e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8014376:	4a0c      	ldr	r2, [pc, #48]	; (80143a8 <vQueueUnregisterQueue+0x50>)
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	2100      	movs	r1, #0
 801437c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8014380:	4a09      	ldr	r2, [pc, #36]	; (80143a8 <vQueueUnregisterQueue+0x50>)
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	00db      	lsls	r3, r3, #3
 8014386:	4413      	add	r3, r2
 8014388:	2200      	movs	r2, #0
 801438a:	605a      	str	r2, [r3, #4]
				break;
 801438c:	e006      	b.n	801439c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	3301      	adds	r3, #1
 8014392:	60fb      	str	r3, [r7, #12]
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	2b07      	cmp	r3, #7
 8014398:	d9e5      	bls.n	8014366 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801439a:	bf00      	nop
 801439c:	bf00      	nop
 801439e:	3714      	adds	r7, #20
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bc80      	pop	{r7}
 80143a4:	4770      	bx	lr
 80143a6:	bf00      	nop
 80143a8:	20011138 	.word	0x20011138

080143ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b08e      	sub	sp, #56	; 0x38
 80143b0:	af04      	add	r7, sp, #16
 80143b2:	60f8      	str	r0, [r7, #12]
 80143b4:	60b9      	str	r1, [r7, #8]
 80143b6:	607a      	str	r2, [r7, #4]
 80143b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80143ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d10a      	bne.n	80143d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80143c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c4:	f383 8811 	msr	BASEPRI, r3
 80143c8:	f3bf 8f6f 	isb	sy
 80143cc:	f3bf 8f4f 	dsb	sy
 80143d0:	623b      	str	r3, [r7, #32]
}
 80143d2:	bf00      	nop
 80143d4:	e7fe      	b.n	80143d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80143d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d10a      	bne.n	80143f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80143dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143e0:	f383 8811 	msr	BASEPRI, r3
 80143e4:	f3bf 8f6f 	isb	sy
 80143e8:	f3bf 8f4f 	dsb	sy
 80143ec:	61fb      	str	r3, [r7, #28]
}
 80143ee:	bf00      	nop
 80143f0:	e7fe      	b.n	80143f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80143f2:	23b4      	movs	r3, #180	; 0xb4
 80143f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80143f6:	693b      	ldr	r3, [r7, #16]
 80143f8:	2bb4      	cmp	r3, #180	; 0xb4
 80143fa:	d00a      	beq.n	8014412 <xTaskCreateStatic+0x66>
	__asm volatile
 80143fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014400:	f383 8811 	msr	BASEPRI, r3
 8014404:	f3bf 8f6f 	isb	sy
 8014408:	f3bf 8f4f 	dsb	sy
 801440c:	61bb      	str	r3, [r7, #24]
}
 801440e:	bf00      	nop
 8014410:	e7fe      	b.n	8014410 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014414:	2b00      	cmp	r3, #0
 8014416:	d01e      	beq.n	8014456 <xTaskCreateStatic+0xaa>
 8014418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801441a:	2b00      	cmp	r3, #0
 801441c:	d01b      	beq.n	8014456 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014420:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014426:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801442a:	2202      	movs	r2, #2
 801442c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014430:	2300      	movs	r3, #0
 8014432:	9303      	str	r3, [sp, #12]
 8014434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014436:	9302      	str	r3, [sp, #8]
 8014438:	f107 0314 	add.w	r3, r7, #20
 801443c:	9301      	str	r3, [sp, #4]
 801443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014440:	9300      	str	r3, [sp, #0]
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	687a      	ldr	r2, [r7, #4]
 8014446:	68b9      	ldr	r1, [r7, #8]
 8014448:	68f8      	ldr	r0, [r7, #12]
 801444a:	f000 f851 	bl	80144f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801444e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014450:	f000 f8e4 	bl	801461c <prvAddNewTaskToReadyList>
 8014454:	e001      	b.n	801445a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8014456:	2300      	movs	r3, #0
 8014458:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801445a:	697b      	ldr	r3, [r7, #20]
	}
 801445c:	4618      	mov	r0, r3
 801445e:	3728      	adds	r7, #40	; 0x28
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}

08014464 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014464:	b580      	push	{r7, lr}
 8014466:	b08c      	sub	sp, #48	; 0x30
 8014468:	af04      	add	r7, sp, #16
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	60b9      	str	r1, [r7, #8]
 801446e:	603b      	str	r3, [r7, #0]
 8014470:	4613      	mov	r3, r2
 8014472:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014474:	88fb      	ldrh	r3, [r7, #6]
 8014476:	009b      	lsls	r3, r3, #2
 8014478:	4618      	mov	r0, r3
 801447a:	f001 f9bf 	bl	80157fc <pvPortMalloc>
 801447e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014480:	697b      	ldr	r3, [r7, #20]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d00e      	beq.n	80144a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8014486:	20b4      	movs	r0, #180	; 0xb4
 8014488:	f001 f9b8 	bl	80157fc <pvPortMalloc>
 801448c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801448e:	69fb      	ldr	r3, [r7, #28]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d003      	beq.n	801449c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014494:	69fb      	ldr	r3, [r7, #28]
 8014496:	697a      	ldr	r2, [r7, #20]
 8014498:	631a      	str	r2, [r3, #48]	; 0x30
 801449a:	e005      	b.n	80144a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801449c:	6978      	ldr	r0, [r7, #20]
 801449e:	f001 fa71 	bl	8015984 <vPortFree>
 80144a2:	e001      	b.n	80144a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80144a4:	2300      	movs	r3, #0
 80144a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80144a8:	69fb      	ldr	r3, [r7, #28]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d017      	beq.n	80144de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80144ae:	69fb      	ldr	r3, [r7, #28]
 80144b0:	2200      	movs	r2, #0
 80144b2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80144b6:	88fa      	ldrh	r2, [r7, #6]
 80144b8:	2300      	movs	r3, #0
 80144ba:	9303      	str	r3, [sp, #12]
 80144bc:	69fb      	ldr	r3, [r7, #28]
 80144be:	9302      	str	r3, [sp, #8]
 80144c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c2:	9301      	str	r3, [sp, #4]
 80144c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c6:	9300      	str	r3, [sp, #0]
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	68b9      	ldr	r1, [r7, #8]
 80144cc:	68f8      	ldr	r0, [r7, #12]
 80144ce:	f000 f80f 	bl	80144f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80144d2:	69f8      	ldr	r0, [r7, #28]
 80144d4:	f000 f8a2 	bl	801461c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80144d8:	2301      	movs	r3, #1
 80144da:	61bb      	str	r3, [r7, #24]
 80144dc:	e002      	b.n	80144e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80144de:	f04f 33ff 	mov.w	r3, #4294967295
 80144e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80144e4:	69bb      	ldr	r3, [r7, #24]
	}
 80144e6:	4618      	mov	r0, r3
 80144e8:	3720      	adds	r7, #32
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}
	...

080144f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b088      	sub	sp, #32
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	60f8      	str	r0, [r7, #12]
 80144f8:	60b9      	str	r1, [r7, #8]
 80144fa:	607a      	str	r2, [r7, #4]
 80144fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80144fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014508:	3b01      	subs	r3, #1
 801450a:	009b      	lsls	r3, r3, #2
 801450c:	4413      	add	r3, r2
 801450e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8014510:	69bb      	ldr	r3, [r7, #24]
 8014512:	f023 0307 	bic.w	r3, r3, #7
 8014516:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014518:	69bb      	ldr	r3, [r7, #24]
 801451a:	f003 0307 	and.w	r3, r3, #7
 801451e:	2b00      	cmp	r3, #0
 8014520:	d00a      	beq.n	8014538 <prvInitialiseNewTask+0x48>
	__asm volatile
 8014522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014526:	f383 8811 	msr	BASEPRI, r3
 801452a:	f3bf 8f6f 	isb	sy
 801452e:	f3bf 8f4f 	dsb	sy
 8014532:	617b      	str	r3, [r7, #20]
}
 8014534:	bf00      	nop
 8014536:	e7fe      	b.n	8014536 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014538:	2300      	movs	r3, #0
 801453a:	61fb      	str	r3, [r7, #28]
 801453c:	e012      	b.n	8014564 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801453e:	68ba      	ldr	r2, [r7, #8]
 8014540:	69fb      	ldr	r3, [r7, #28]
 8014542:	4413      	add	r3, r2
 8014544:	7819      	ldrb	r1, [r3, #0]
 8014546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014548:	69fb      	ldr	r3, [r7, #28]
 801454a:	4413      	add	r3, r2
 801454c:	3334      	adds	r3, #52	; 0x34
 801454e:	460a      	mov	r2, r1
 8014550:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8014552:	68ba      	ldr	r2, [r7, #8]
 8014554:	69fb      	ldr	r3, [r7, #28]
 8014556:	4413      	add	r3, r2
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d006      	beq.n	801456c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801455e:	69fb      	ldr	r3, [r7, #28]
 8014560:	3301      	adds	r3, #1
 8014562:	61fb      	str	r3, [r7, #28]
 8014564:	69fb      	ldr	r3, [r7, #28]
 8014566:	2b0f      	cmp	r3, #15
 8014568:	d9e9      	bls.n	801453e <prvInitialiseNewTask+0x4e>
 801456a:	e000      	b.n	801456e <prvInitialiseNewTask+0x7e>
		{
			break;
 801456c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014570:	2200      	movs	r2, #0
 8014572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014578:	2b06      	cmp	r3, #6
 801457a:	d901      	bls.n	8014580 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801457c:	2306      	movs	r3, #6
 801457e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014584:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801458a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801458e:	2200      	movs	r2, #0
 8014590:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014594:	3304      	adds	r3, #4
 8014596:	4618      	mov	r0, r3
 8014598:	f7fe ff37 	bl	801340a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801459e:	3318      	adds	r3, #24
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7fe ff32 	bl	801340a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80145a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ae:	f1c3 0207 	rsb	r2, r3, #7
 80145b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80145b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80145bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145be:	2200      	movs	r2, #0
 80145c0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80145c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c6:	2200      	movs	r2, #0
 80145c8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80145cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ce:	334c      	adds	r3, #76	; 0x4c
 80145d0:	2260      	movs	r2, #96	; 0x60
 80145d2:	2100      	movs	r1, #0
 80145d4:	4618      	mov	r0, r3
 80145d6:	f001 ff6b 	bl	80164b0 <memset>
 80145da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145dc:	4a0c      	ldr	r2, [pc, #48]	; (8014610 <prvInitialiseNewTask+0x120>)
 80145de:	651a      	str	r2, [r3, #80]	; 0x50
 80145e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e2:	4a0c      	ldr	r2, [pc, #48]	; (8014614 <prvInitialiseNewTask+0x124>)
 80145e4:	655a      	str	r2, [r3, #84]	; 0x54
 80145e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e8:	4a0b      	ldr	r2, [pc, #44]	; (8014618 <prvInitialiseNewTask+0x128>)
 80145ea:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80145ec:	683a      	ldr	r2, [r7, #0]
 80145ee:	68f9      	ldr	r1, [r7, #12]
 80145f0:	69b8      	ldr	r0, [r7, #24]
 80145f2:	f000 ff11 	bl	8015418 <pxPortInitialiseStack>
 80145f6:	4602      	mov	r2, r0
 80145f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80145fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d002      	beq.n	8014608 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014606:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014608:	bf00      	nop
 801460a:	3720      	adds	r7, #32
 801460c:	46bd      	mov	sp, r7
 801460e:	bd80      	pop	{r7, pc}
 8014610:	0801ad84 	.word	0x0801ad84
 8014614:	0801ada4 	.word	0x0801ada4
 8014618:	0801ad64 	.word	0x0801ad64

0801461c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b082      	sub	sp, #8
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014624:	f000 ffea 	bl	80155fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014628:	4b2a      	ldr	r3, [pc, #168]	; (80146d4 <prvAddNewTaskToReadyList+0xb8>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	3301      	adds	r3, #1
 801462e:	4a29      	ldr	r2, [pc, #164]	; (80146d4 <prvAddNewTaskToReadyList+0xb8>)
 8014630:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014632:	4b29      	ldr	r3, [pc, #164]	; (80146d8 <prvAddNewTaskToReadyList+0xbc>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d109      	bne.n	801464e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801463a:	4a27      	ldr	r2, [pc, #156]	; (80146d8 <prvAddNewTaskToReadyList+0xbc>)
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014640:	4b24      	ldr	r3, [pc, #144]	; (80146d4 <prvAddNewTaskToReadyList+0xb8>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2b01      	cmp	r3, #1
 8014646:	d110      	bne.n	801466a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014648:	f000 fbdc 	bl	8014e04 <prvInitialiseTaskLists>
 801464c:	e00d      	b.n	801466a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801464e:	4b23      	ldr	r3, [pc, #140]	; (80146dc <prvAddNewTaskToReadyList+0xc0>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d109      	bne.n	801466a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014656:	4b20      	ldr	r3, [pc, #128]	; (80146d8 <prvAddNewTaskToReadyList+0xbc>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014660:	429a      	cmp	r2, r3
 8014662:	d802      	bhi.n	801466a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014664:	4a1c      	ldr	r2, [pc, #112]	; (80146d8 <prvAddNewTaskToReadyList+0xbc>)
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801466a:	4b1d      	ldr	r3, [pc, #116]	; (80146e0 <prvAddNewTaskToReadyList+0xc4>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	3301      	adds	r3, #1
 8014670:	4a1b      	ldr	r2, [pc, #108]	; (80146e0 <prvAddNewTaskToReadyList+0xc4>)
 8014672:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014678:	2201      	movs	r2, #1
 801467a:	409a      	lsls	r2, r3
 801467c:	4b19      	ldr	r3, [pc, #100]	; (80146e4 <prvAddNewTaskToReadyList+0xc8>)
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	4313      	orrs	r3, r2
 8014682:	4a18      	ldr	r2, [pc, #96]	; (80146e4 <prvAddNewTaskToReadyList+0xc8>)
 8014684:	6013      	str	r3, [r2, #0]
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801468a:	4613      	mov	r3, r2
 801468c:	009b      	lsls	r3, r3, #2
 801468e:	4413      	add	r3, r2
 8014690:	009b      	lsls	r3, r3, #2
 8014692:	4a15      	ldr	r2, [pc, #84]	; (80146e8 <prvAddNewTaskToReadyList+0xcc>)
 8014694:	441a      	add	r2, r3
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	3304      	adds	r3, #4
 801469a:	4619      	mov	r1, r3
 801469c:	4610      	mov	r0, r2
 801469e:	f7fe fec0 	bl	8013422 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80146a2:	f000 ffdb 	bl	801565c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80146a6:	4b0d      	ldr	r3, [pc, #52]	; (80146dc <prvAddNewTaskToReadyList+0xc0>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d00e      	beq.n	80146cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80146ae:	4b0a      	ldr	r3, [pc, #40]	; (80146d8 <prvAddNewTaskToReadyList+0xbc>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d207      	bcs.n	80146cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80146bc:	4b0b      	ldr	r3, [pc, #44]	; (80146ec <prvAddNewTaskToReadyList+0xd0>)
 80146be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146c2:	601a      	str	r2, [r3, #0]
 80146c4:	f3bf 8f4f 	dsb	sy
 80146c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80146cc:	bf00      	nop
 80146ce:	3708      	adds	r7, #8
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}
 80146d4:	20007bf0 	.word	0x20007bf0
 80146d8:	20007af0 	.word	0x20007af0
 80146dc:	20007bfc 	.word	0x20007bfc
 80146e0:	20007c0c 	.word	0x20007c0c
 80146e4:	20007bf8 	.word	0x20007bf8
 80146e8:	20007af4 	.word	0x20007af4
 80146ec:	e000ed04 	.word	0xe000ed04

080146f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b084      	sub	sp, #16
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80146f8:	2300      	movs	r3, #0
 80146fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d017      	beq.n	8014732 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014702:	4b13      	ldr	r3, [pc, #76]	; (8014750 <vTaskDelay+0x60>)
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d00a      	beq.n	8014720 <vTaskDelay+0x30>
	__asm volatile
 801470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801470e:	f383 8811 	msr	BASEPRI, r3
 8014712:	f3bf 8f6f 	isb	sy
 8014716:	f3bf 8f4f 	dsb	sy
 801471a:	60bb      	str	r3, [r7, #8]
}
 801471c:	bf00      	nop
 801471e:	e7fe      	b.n	801471e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014720:	f000 f884 	bl	801482c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014724:	2100      	movs	r1, #0
 8014726:	6878      	ldr	r0, [r7, #4]
 8014728:	f000 fe10 	bl	801534c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801472c:	f000 f88c 	bl	8014848 <xTaskResumeAll>
 8014730:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d107      	bne.n	8014748 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014738:	4b06      	ldr	r3, [pc, #24]	; (8014754 <vTaskDelay+0x64>)
 801473a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801473e:	601a      	str	r2, [r3, #0]
 8014740:	f3bf 8f4f 	dsb	sy
 8014744:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014748:	bf00      	nop
 801474a:	3710      	adds	r7, #16
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}
 8014750:	20007c18 	.word	0x20007c18
 8014754:	e000ed04 	.word	0xe000ed04

08014758 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b08a      	sub	sp, #40	; 0x28
 801475c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801475e:	2300      	movs	r3, #0
 8014760:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014762:	2300      	movs	r3, #0
 8014764:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014766:	463a      	mov	r2, r7
 8014768:	1d39      	adds	r1, r7, #4
 801476a:	f107 0308 	add.w	r3, r7, #8
 801476e:	4618      	mov	r0, r3
 8014770:	f7ec fef6 	bl	8001560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014774:	6839      	ldr	r1, [r7, #0]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	68ba      	ldr	r2, [r7, #8]
 801477a:	9202      	str	r2, [sp, #8]
 801477c:	9301      	str	r3, [sp, #4]
 801477e:	2300      	movs	r3, #0
 8014780:	9300      	str	r3, [sp, #0]
 8014782:	2300      	movs	r3, #0
 8014784:	460a      	mov	r2, r1
 8014786:	4921      	ldr	r1, [pc, #132]	; (801480c <vTaskStartScheduler+0xb4>)
 8014788:	4821      	ldr	r0, [pc, #132]	; (8014810 <vTaskStartScheduler+0xb8>)
 801478a:	f7ff fe0f 	bl	80143ac <xTaskCreateStatic>
 801478e:	4603      	mov	r3, r0
 8014790:	4a20      	ldr	r2, [pc, #128]	; (8014814 <vTaskStartScheduler+0xbc>)
 8014792:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014794:	4b1f      	ldr	r3, [pc, #124]	; (8014814 <vTaskStartScheduler+0xbc>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d002      	beq.n	80147a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801479c:	2301      	movs	r3, #1
 801479e:	617b      	str	r3, [r7, #20]
 80147a0:	e001      	b.n	80147a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80147a2:	2300      	movs	r3, #0
 80147a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	2b01      	cmp	r3, #1
 80147aa:	d11b      	bne.n	80147e4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80147ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147b0:	f383 8811 	msr	BASEPRI, r3
 80147b4:	f3bf 8f6f 	isb	sy
 80147b8:	f3bf 8f4f 	dsb	sy
 80147bc:	613b      	str	r3, [r7, #16]
}
 80147be:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80147c0:	4b15      	ldr	r3, [pc, #84]	; (8014818 <vTaskStartScheduler+0xc0>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	334c      	adds	r3, #76	; 0x4c
 80147c6:	4a15      	ldr	r2, [pc, #84]	; (801481c <vTaskStartScheduler+0xc4>)
 80147c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80147ca:	4b15      	ldr	r3, [pc, #84]	; (8014820 <vTaskStartScheduler+0xc8>)
 80147cc:	f04f 32ff 	mov.w	r2, #4294967295
 80147d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80147d2:	4b14      	ldr	r3, [pc, #80]	; (8014824 <vTaskStartScheduler+0xcc>)
 80147d4:	2201      	movs	r2, #1
 80147d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80147d8:	4b13      	ldr	r3, [pc, #76]	; (8014828 <vTaskStartScheduler+0xd0>)
 80147da:	2200      	movs	r2, #0
 80147dc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80147de:	f000 fe9b 	bl	8015518 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80147e2:	e00e      	b.n	8014802 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147ea:	d10a      	bne.n	8014802 <vTaskStartScheduler+0xaa>
	__asm volatile
 80147ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147f0:	f383 8811 	msr	BASEPRI, r3
 80147f4:	f3bf 8f6f 	isb	sy
 80147f8:	f3bf 8f4f 	dsb	sy
 80147fc:	60fb      	str	r3, [r7, #12]
}
 80147fe:	bf00      	nop
 8014800:	e7fe      	b.n	8014800 <vTaskStartScheduler+0xa8>
}
 8014802:	bf00      	nop
 8014804:	3718      	adds	r7, #24
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}
 801480a:	bf00      	nop
 801480c:	0801aca4 	.word	0x0801aca4
 8014810:	08014dd5 	.word	0x08014dd5
 8014814:	20007c14 	.word	0x20007c14
 8014818:	20007af0 	.word	0x20007af0
 801481c:	2000023c 	.word	0x2000023c
 8014820:	20007c10 	.word	0x20007c10
 8014824:	20007bfc 	.word	0x20007bfc
 8014828:	20007bf4 	.word	0x20007bf4

0801482c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801482c:	b480      	push	{r7}
 801482e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014830:	4b04      	ldr	r3, [pc, #16]	; (8014844 <vTaskSuspendAll+0x18>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	3301      	adds	r3, #1
 8014836:	4a03      	ldr	r2, [pc, #12]	; (8014844 <vTaskSuspendAll+0x18>)
 8014838:	6013      	str	r3, [r2, #0]
}
 801483a:	bf00      	nop
 801483c:	46bd      	mov	sp, r7
 801483e:	bc80      	pop	{r7}
 8014840:	4770      	bx	lr
 8014842:	bf00      	nop
 8014844:	20007c18 	.word	0x20007c18

08014848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b084      	sub	sp, #16
 801484c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801484e:	2300      	movs	r3, #0
 8014850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014852:	2300      	movs	r3, #0
 8014854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014856:	4b41      	ldr	r3, [pc, #260]	; (801495c <xTaskResumeAll+0x114>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d10a      	bne.n	8014874 <xTaskResumeAll+0x2c>
	__asm volatile
 801485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014862:	f383 8811 	msr	BASEPRI, r3
 8014866:	f3bf 8f6f 	isb	sy
 801486a:	f3bf 8f4f 	dsb	sy
 801486e:	603b      	str	r3, [r7, #0]
}
 8014870:	bf00      	nop
 8014872:	e7fe      	b.n	8014872 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014874:	f000 fec2 	bl	80155fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014878:	4b38      	ldr	r3, [pc, #224]	; (801495c <xTaskResumeAll+0x114>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	3b01      	subs	r3, #1
 801487e:	4a37      	ldr	r2, [pc, #220]	; (801495c <xTaskResumeAll+0x114>)
 8014880:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014882:	4b36      	ldr	r3, [pc, #216]	; (801495c <xTaskResumeAll+0x114>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d161      	bne.n	801494e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801488a:	4b35      	ldr	r3, [pc, #212]	; (8014960 <xTaskResumeAll+0x118>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d05d      	beq.n	801494e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014892:	e02e      	b.n	80148f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8014894:	4b33      	ldr	r3, [pc, #204]	; (8014964 <xTaskResumeAll+0x11c>)
 8014896:	68db      	ldr	r3, [r3, #12]
 8014898:	68db      	ldr	r3, [r3, #12]
 801489a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	3318      	adds	r3, #24
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7fe fe19 	bl	80134d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	3304      	adds	r3, #4
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7fe fe14 	bl	80134d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148b4:	2201      	movs	r2, #1
 80148b6:	409a      	lsls	r2, r3
 80148b8:	4b2b      	ldr	r3, [pc, #172]	; (8014968 <xTaskResumeAll+0x120>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	4313      	orrs	r3, r2
 80148be:	4a2a      	ldr	r2, [pc, #168]	; (8014968 <xTaskResumeAll+0x120>)
 80148c0:	6013      	str	r3, [r2, #0]
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148c6:	4613      	mov	r3, r2
 80148c8:	009b      	lsls	r3, r3, #2
 80148ca:	4413      	add	r3, r2
 80148cc:	009b      	lsls	r3, r3, #2
 80148ce:	4a27      	ldr	r2, [pc, #156]	; (801496c <xTaskResumeAll+0x124>)
 80148d0:	441a      	add	r2, r3
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	3304      	adds	r3, #4
 80148d6:	4619      	mov	r1, r3
 80148d8:	4610      	mov	r0, r2
 80148da:	f7fe fda2 	bl	8013422 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148e2:	4b23      	ldr	r3, [pc, #140]	; (8014970 <xTaskResumeAll+0x128>)
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148e8:	429a      	cmp	r2, r3
 80148ea:	d302      	bcc.n	80148f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80148ec:	4b21      	ldr	r3, [pc, #132]	; (8014974 <xTaskResumeAll+0x12c>)
 80148ee:	2201      	movs	r2, #1
 80148f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80148f2:	4b1c      	ldr	r3, [pc, #112]	; (8014964 <xTaskResumeAll+0x11c>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d1cc      	bne.n	8014894 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d001      	beq.n	8014904 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014900:	f000 fb22 	bl	8014f48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014904:	4b1c      	ldr	r3, [pc, #112]	; (8014978 <xTaskResumeAll+0x130>)
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d010      	beq.n	8014932 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014910:	f000 f836 	bl	8014980 <xTaskIncrementTick>
 8014914:	4603      	mov	r3, r0
 8014916:	2b00      	cmp	r3, #0
 8014918:	d002      	beq.n	8014920 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801491a:	4b16      	ldr	r3, [pc, #88]	; (8014974 <xTaskResumeAll+0x12c>)
 801491c:	2201      	movs	r2, #1
 801491e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	3b01      	subs	r3, #1
 8014924:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d1f1      	bne.n	8014910 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 801492c:	4b12      	ldr	r3, [pc, #72]	; (8014978 <xTaskResumeAll+0x130>)
 801492e:	2200      	movs	r2, #0
 8014930:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014932:	4b10      	ldr	r3, [pc, #64]	; (8014974 <xTaskResumeAll+0x12c>)
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d009      	beq.n	801494e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801493a:	2301      	movs	r3, #1
 801493c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801493e:	4b0f      	ldr	r3, [pc, #60]	; (801497c <xTaskResumeAll+0x134>)
 8014940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014944:	601a      	str	r2, [r3, #0]
 8014946:	f3bf 8f4f 	dsb	sy
 801494a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801494e:	f000 fe85 	bl	801565c <vPortExitCritical>

	return xAlreadyYielded;
 8014952:	68bb      	ldr	r3, [r7, #8]
}
 8014954:	4618      	mov	r0, r3
 8014956:	3710      	adds	r7, #16
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}
 801495c:	20007c18 	.word	0x20007c18
 8014960:	20007bf0 	.word	0x20007bf0
 8014964:	20007bb0 	.word	0x20007bb0
 8014968:	20007bf8 	.word	0x20007bf8
 801496c:	20007af4 	.word	0x20007af4
 8014970:	20007af0 	.word	0x20007af0
 8014974:	20007c04 	.word	0x20007c04
 8014978:	20007c00 	.word	0x20007c00
 801497c:	e000ed04 	.word	0xe000ed04

08014980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b086      	sub	sp, #24
 8014984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014986:	2300      	movs	r3, #0
 8014988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801498a:	4b51      	ldr	r3, [pc, #324]	; (8014ad0 <xTaskIncrementTick+0x150>)
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	2b00      	cmp	r3, #0
 8014990:	f040 808d 	bne.w	8014aae <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014994:	4b4f      	ldr	r3, [pc, #316]	; (8014ad4 <xTaskIncrementTick+0x154>)
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	3301      	adds	r3, #1
 801499a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801499c:	4a4d      	ldr	r2, [pc, #308]	; (8014ad4 <xTaskIncrementTick+0x154>)
 801499e:	693b      	ldr	r3, [r7, #16]
 80149a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d120      	bne.n	80149ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80149a8:	4b4b      	ldr	r3, [pc, #300]	; (8014ad8 <xTaskIncrementTick+0x158>)
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d00a      	beq.n	80149c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80149b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b6:	f383 8811 	msr	BASEPRI, r3
 80149ba:	f3bf 8f6f 	isb	sy
 80149be:	f3bf 8f4f 	dsb	sy
 80149c2:	603b      	str	r3, [r7, #0]
}
 80149c4:	bf00      	nop
 80149c6:	e7fe      	b.n	80149c6 <xTaskIncrementTick+0x46>
 80149c8:	4b43      	ldr	r3, [pc, #268]	; (8014ad8 <xTaskIncrementTick+0x158>)
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	60fb      	str	r3, [r7, #12]
 80149ce:	4b43      	ldr	r3, [pc, #268]	; (8014adc <xTaskIncrementTick+0x15c>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	4a41      	ldr	r2, [pc, #260]	; (8014ad8 <xTaskIncrementTick+0x158>)
 80149d4:	6013      	str	r3, [r2, #0]
 80149d6:	4a41      	ldr	r2, [pc, #260]	; (8014adc <xTaskIncrementTick+0x15c>)
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	6013      	str	r3, [r2, #0]
 80149dc:	4b40      	ldr	r3, [pc, #256]	; (8014ae0 <xTaskIncrementTick+0x160>)
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	3301      	adds	r3, #1
 80149e2:	4a3f      	ldr	r2, [pc, #252]	; (8014ae0 <xTaskIncrementTick+0x160>)
 80149e4:	6013      	str	r3, [r2, #0]
 80149e6:	f000 faaf 	bl	8014f48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80149ea:	4b3e      	ldr	r3, [pc, #248]	; (8014ae4 <xTaskIncrementTick+0x164>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	693a      	ldr	r2, [r7, #16]
 80149f0:	429a      	cmp	r2, r3
 80149f2:	d34d      	bcc.n	8014a90 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80149f4:	4b38      	ldr	r3, [pc, #224]	; (8014ad8 <xTaskIncrementTick+0x158>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d101      	bne.n	8014a02 <xTaskIncrementTick+0x82>
 80149fe:	2301      	movs	r3, #1
 8014a00:	e000      	b.n	8014a04 <xTaskIncrementTick+0x84>
 8014a02:	2300      	movs	r3, #0
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d004      	beq.n	8014a12 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a08:	4b36      	ldr	r3, [pc, #216]	; (8014ae4 <xTaskIncrementTick+0x164>)
 8014a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8014a0e:	601a      	str	r2, [r3, #0]
					break;
 8014a10:	e03e      	b.n	8014a90 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8014a12:	4b31      	ldr	r3, [pc, #196]	; (8014ad8 <xTaskIncrementTick+0x158>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	68db      	ldr	r3, [r3, #12]
 8014a18:	68db      	ldr	r3, [r3, #12]
 8014a1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	685b      	ldr	r3, [r3, #4]
 8014a20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014a22:	693a      	ldr	r2, [r7, #16]
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	429a      	cmp	r2, r3
 8014a28:	d203      	bcs.n	8014a32 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014a2a:	4a2e      	ldr	r2, [pc, #184]	; (8014ae4 <xTaskIncrementTick+0x164>)
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	6013      	str	r3, [r2, #0]
						break;
 8014a30:	e02e      	b.n	8014a90 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a32:	68bb      	ldr	r3, [r7, #8]
 8014a34:	3304      	adds	r3, #4
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7fe fd4e 	bl	80134d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d004      	beq.n	8014a4e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	3318      	adds	r3, #24
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f7fe fd45 	bl	80134d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a52:	2201      	movs	r2, #1
 8014a54:	409a      	lsls	r2, r3
 8014a56:	4b24      	ldr	r3, [pc, #144]	; (8014ae8 <xTaskIncrementTick+0x168>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	4313      	orrs	r3, r2
 8014a5c:	4a22      	ldr	r2, [pc, #136]	; (8014ae8 <xTaskIncrementTick+0x168>)
 8014a5e:	6013      	str	r3, [r2, #0]
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a64:	4613      	mov	r3, r2
 8014a66:	009b      	lsls	r3, r3, #2
 8014a68:	4413      	add	r3, r2
 8014a6a:	009b      	lsls	r3, r3, #2
 8014a6c:	4a1f      	ldr	r2, [pc, #124]	; (8014aec <xTaskIncrementTick+0x16c>)
 8014a6e:	441a      	add	r2, r3
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	3304      	adds	r3, #4
 8014a74:	4619      	mov	r1, r3
 8014a76:	4610      	mov	r0, r2
 8014a78:	f7fe fcd3 	bl	8013422 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a80:	4b1b      	ldr	r3, [pc, #108]	; (8014af0 <xTaskIncrementTick+0x170>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d3b4      	bcc.n	80149f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a8e:	e7b1      	b.n	80149f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014a90:	4b17      	ldr	r3, [pc, #92]	; (8014af0 <xTaskIncrementTick+0x170>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a96:	4915      	ldr	r1, [pc, #84]	; (8014aec <xTaskIncrementTick+0x16c>)
 8014a98:	4613      	mov	r3, r2
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	4413      	add	r3, r2
 8014a9e:	009b      	lsls	r3, r3, #2
 8014aa0:	440b      	add	r3, r1
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	2b01      	cmp	r3, #1
 8014aa6:	d907      	bls.n	8014ab8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	617b      	str	r3, [r7, #20]
 8014aac:	e004      	b.n	8014ab8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014aae:	4b11      	ldr	r3, [pc, #68]	; (8014af4 <xTaskIncrementTick+0x174>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	3301      	adds	r3, #1
 8014ab4:	4a0f      	ldr	r2, [pc, #60]	; (8014af4 <xTaskIncrementTick+0x174>)
 8014ab6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014ab8:	4b0f      	ldr	r3, [pc, #60]	; (8014af8 <xTaskIncrementTick+0x178>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d001      	beq.n	8014ac4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014ac4:	697b      	ldr	r3, [r7, #20]
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3718      	adds	r7, #24
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	20007c18 	.word	0x20007c18
 8014ad4:	20007bf4 	.word	0x20007bf4
 8014ad8:	20007ba8 	.word	0x20007ba8
 8014adc:	20007bac 	.word	0x20007bac
 8014ae0:	20007c08 	.word	0x20007c08
 8014ae4:	20007c10 	.word	0x20007c10
 8014ae8:	20007bf8 	.word	0x20007bf8
 8014aec:	20007af4 	.word	0x20007af4
 8014af0:	20007af0 	.word	0x20007af0
 8014af4:	20007c00 	.word	0x20007c00
 8014af8:	20007c04 	.word	0x20007c04

08014afc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014afc:	b480      	push	{r7}
 8014afe:	b087      	sub	sp, #28
 8014b00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014b02:	4b29      	ldr	r3, [pc, #164]	; (8014ba8 <vTaskSwitchContext+0xac>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d003      	beq.n	8014b12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014b0a:	4b28      	ldr	r3, [pc, #160]	; (8014bac <vTaskSwitchContext+0xb0>)
 8014b0c:	2201      	movs	r2, #1
 8014b0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014b10:	e044      	b.n	8014b9c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8014b12:	4b26      	ldr	r3, [pc, #152]	; (8014bac <vTaskSwitchContext+0xb0>)
 8014b14:	2200      	movs	r2, #0
 8014b16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8014b18:	4b25      	ldr	r3, [pc, #148]	; (8014bb0 <vTaskSwitchContext+0xb4>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	fab3 f383 	clz	r3, r3
 8014b24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014b26:	7afb      	ldrb	r3, [r7, #11]
 8014b28:	f1c3 031f 	rsb	r3, r3, #31
 8014b2c:	617b      	str	r3, [r7, #20]
 8014b2e:	4921      	ldr	r1, [pc, #132]	; (8014bb4 <vTaskSwitchContext+0xb8>)
 8014b30:	697a      	ldr	r2, [r7, #20]
 8014b32:	4613      	mov	r3, r2
 8014b34:	009b      	lsls	r3, r3, #2
 8014b36:	4413      	add	r3, r2
 8014b38:	009b      	lsls	r3, r3, #2
 8014b3a:	440b      	add	r3, r1
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d10a      	bne.n	8014b58 <vTaskSwitchContext+0x5c>
	__asm volatile
 8014b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b46:	f383 8811 	msr	BASEPRI, r3
 8014b4a:	f3bf 8f6f 	isb	sy
 8014b4e:	f3bf 8f4f 	dsb	sy
 8014b52:	607b      	str	r3, [r7, #4]
}
 8014b54:	bf00      	nop
 8014b56:	e7fe      	b.n	8014b56 <vTaskSwitchContext+0x5a>
 8014b58:	697a      	ldr	r2, [r7, #20]
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	009b      	lsls	r3, r3, #2
 8014b5e:	4413      	add	r3, r2
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	4a14      	ldr	r2, [pc, #80]	; (8014bb4 <vTaskSwitchContext+0xb8>)
 8014b64:	4413      	add	r3, r2
 8014b66:	613b      	str	r3, [r7, #16]
 8014b68:	693b      	ldr	r3, [r7, #16]
 8014b6a:	685b      	ldr	r3, [r3, #4]
 8014b6c:	685a      	ldr	r2, [r3, #4]
 8014b6e:	693b      	ldr	r3, [r7, #16]
 8014b70:	605a      	str	r2, [r3, #4]
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	685a      	ldr	r2, [r3, #4]
 8014b76:	693b      	ldr	r3, [r7, #16]
 8014b78:	3308      	adds	r3, #8
 8014b7a:	429a      	cmp	r2, r3
 8014b7c:	d104      	bne.n	8014b88 <vTaskSwitchContext+0x8c>
 8014b7e:	693b      	ldr	r3, [r7, #16]
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	685a      	ldr	r2, [r3, #4]
 8014b84:	693b      	ldr	r3, [r7, #16]
 8014b86:	605a      	str	r2, [r3, #4]
 8014b88:	693b      	ldr	r3, [r7, #16]
 8014b8a:	685b      	ldr	r3, [r3, #4]
 8014b8c:	68db      	ldr	r3, [r3, #12]
 8014b8e:	4a0a      	ldr	r2, [pc, #40]	; (8014bb8 <vTaskSwitchContext+0xbc>)
 8014b90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014b92:	4b09      	ldr	r3, [pc, #36]	; (8014bb8 <vTaskSwitchContext+0xbc>)
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	334c      	adds	r3, #76	; 0x4c
 8014b98:	4a08      	ldr	r2, [pc, #32]	; (8014bbc <vTaskSwitchContext+0xc0>)
 8014b9a:	6013      	str	r3, [r2, #0]
}
 8014b9c:	bf00      	nop
 8014b9e:	371c      	adds	r7, #28
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bc80      	pop	{r7}
 8014ba4:	4770      	bx	lr
 8014ba6:	bf00      	nop
 8014ba8:	20007c18 	.word	0x20007c18
 8014bac:	20007c04 	.word	0x20007c04
 8014bb0:	20007bf8 	.word	0x20007bf8
 8014bb4:	20007af4 	.word	0x20007af4
 8014bb8:	20007af0 	.word	0x20007af0
 8014bbc:	2000023c 	.word	0x2000023c

08014bc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b084      	sub	sp, #16
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d10a      	bne.n	8014be6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd4:	f383 8811 	msr	BASEPRI, r3
 8014bd8:	f3bf 8f6f 	isb	sy
 8014bdc:	f3bf 8f4f 	dsb	sy
 8014be0:	60fb      	str	r3, [r7, #12]
}
 8014be2:	bf00      	nop
 8014be4:	e7fe      	b.n	8014be4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014be6:	4b07      	ldr	r3, [pc, #28]	; (8014c04 <vTaskPlaceOnEventList+0x44>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	3318      	adds	r3, #24
 8014bec:	4619      	mov	r1, r3
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f7fe fc3a 	bl	8013468 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014bf4:	2101      	movs	r1, #1
 8014bf6:	6838      	ldr	r0, [r7, #0]
 8014bf8:	f000 fba8 	bl	801534c <prvAddCurrentTaskToDelayedList>
}
 8014bfc:	bf00      	nop
 8014bfe:	3710      	adds	r7, #16
 8014c00:	46bd      	mov	sp, r7
 8014c02:	bd80      	pop	{r7, pc}
 8014c04:	20007af0 	.word	0x20007af0

08014c08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b086      	sub	sp, #24
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	68db      	ldr	r3, [r3, #12]
 8014c14:	68db      	ldr	r3, [r3, #12]
 8014c16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014c18:	693b      	ldr	r3, [r7, #16]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d10a      	bne.n	8014c34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c22:	f383 8811 	msr	BASEPRI, r3
 8014c26:	f3bf 8f6f 	isb	sy
 8014c2a:	f3bf 8f4f 	dsb	sy
 8014c2e:	60fb      	str	r3, [r7, #12]
}
 8014c30:	bf00      	nop
 8014c32:	e7fe      	b.n	8014c32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014c34:	693b      	ldr	r3, [r7, #16]
 8014c36:	3318      	adds	r3, #24
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f7fe fc4d 	bl	80134d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c3e:	4b1d      	ldr	r3, [pc, #116]	; (8014cb4 <xTaskRemoveFromEventList+0xac>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d11c      	bne.n	8014c80 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	3304      	adds	r3, #4
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f7fe fc44 	bl	80134d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c54:	2201      	movs	r2, #1
 8014c56:	409a      	lsls	r2, r3
 8014c58:	4b17      	ldr	r3, [pc, #92]	; (8014cb8 <xTaskRemoveFromEventList+0xb0>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	4313      	orrs	r3, r2
 8014c5e:	4a16      	ldr	r2, [pc, #88]	; (8014cb8 <xTaskRemoveFromEventList+0xb0>)
 8014c60:	6013      	str	r3, [r2, #0]
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c66:	4613      	mov	r3, r2
 8014c68:	009b      	lsls	r3, r3, #2
 8014c6a:	4413      	add	r3, r2
 8014c6c:	009b      	lsls	r3, r3, #2
 8014c6e:	4a13      	ldr	r2, [pc, #76]	; (8014cbc <xTaskRemoveFromEventList+0xb4>)
 8014c70:	441a      	add	r2, r3
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	3304      	adds	r3, #4
 8014c76:	4619      	mov	r1, r3
 8014c78:	4610      	mov	r0, r2
 8014c7a:	f7fe fbd2 	bl	8013422 <vListInsertEnd>
 8014c7e:	e005      	b.n	8014c8c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014c80:	693b      	ldr	r3, [r7, #16]
 8014c82:	3318      	adds	r3, #24
 8014c84:	4619      	mov	r1, r3
 8014c86:	480e      	ldr	r0, [pc, #56]	; (8014cc0 <xTaskRemoveFromEventList+0xb8>)
 8014c88:	f7fe fbcb 	bl	8013422 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014c8c:	693b      	ldr	r3, [r7, #16]
 8014c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c90:	4b0c      	ldr	r3, [pc, #48]	; (8014cc4 <xTaskRemoveFromEventList+0xbc>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d905      	bls.n	8014ca6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014c9e:	4b0a      	ldr	r3, [pc, #40]	; (8014cc8 <xTaskRemoveFromEventList+0xc0>)
 8014ca0:	2201      	movs	r2, #1
 8014ca2:	601a      	str	r2, [r3, #0]
 8014ca4:	e001      	b.n	8014caa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8014caa:	697b      	ldr	r3, [r7, #20]
}
 8014cac:	4618      	mov	r0, r3
 8014cae:	3718      	adds	r7, #24
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}
 8014cb4:	20007c18 	.word	0x20007c18
 8014cb8:	20007bf8 	.word	0x20007bf8
 8014cbc:	20007af4 	.word	0x20007af4
 8014cc0:	20007bb0 	.word	0x20007bb0
 8014cc4:	20007af0 	.word	0x20007af0
 8014cc8:	20007c04 	.word	0x20007c04

08014ccc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014ccc:	b480      	push	{r7}
 8014cce:	b083      	sub	sp, #12
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014cd4:	4b06      	ldr	r3, [pc, #24]	; (8014cf0 <vTaskInternalSetTimeOutState+0x24>)
 8014cd6:	681a      	ldr	r2, [r3, #0]
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014cdc:	4b05      	ldr	r3, [pc, #20]	; (8014cf4 <vTaskInternalSetTimeOutState+0x28>)
 8014cde:	681a      	ldr	r2, [r3, #0]
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	605a      	str	r2, [r3, #4]
}
 8014ce4:	bf00      	nop
 8014ce6:	370c      	adds	r7, #12
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bc80      	pop	{r7}
 8014cec:	4770      	bx	lr
 8014cee:	bf00      	nop
 8014cf0:	20007c08 	.word	0x20007c08
 8014cf4:	20007bf4 	.word	0x20007bf4

08014cf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b088      	sub	sp, #32
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
 8014d00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d10a      	bne.n	8014d1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d0c:	f383 8811 	msr	BASEPRI, r3
 8014d10:	f3bf 8f6f 	isb	sy
 8014d14:	f3bf 8f4f 	dsb	sy
 8014d18:	613b      	str	r3, [r7, #16]
}
 8014d1a:	bf00      	nop
 8014d1c:	e7fe      	b.n	8014d1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d10a      	bne.n	8014d3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d28:	f383 8811 	msr	BASEPRI, r3
 8014d2c:	f3bf 8f6f 	isb	sy
 8014d30:	f3bf 8f4f 	dsb	sy
 8014d34:	60fb      	str	r3, [r7, #12]
}
 8014d36:	bf00      	nop
 8014d38:	e7fe      	b.n	8014d38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014d3a:	f000 fc5f 	bl	80155fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014d3e:	4b1d      	ldr	r3, [pc, #116]	; (8014db4 <xTaskCheckForTimeOut+0xbc>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	685b      	ldr	r3, [r3, #4]
 8014d48:	69ba      	ldr	r2, [r7, #24]
 8014d4a:	1ad3      	subs	r3, r2, r3
 8014d4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014d4e:	683b      	ldr	r3, [r7, #0]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d56:	d102      	bne.n	8014d5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014d58:	2300      	movs	r3, #0
 8014d5a:	61fb      	str	r3, [r7, #28]
 8014d5c:	e023      	b.n	8014da6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	681a      	ldr	r2, [r3, #0]
 8014d62:	4b15      	ldr	r3, [pc, #84]	; (8014db8 <xTaskCheckForTimeOut+0xc0>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	429a      	cmp	r2, r3
 8014d68:	d007      	beq.n	8014d7a <xTaskCheckForTimeOut+0x82>
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	685b      	ldr	r3, [r3, #4]
 8014d6e:	69ba      	ldr	r2, [r7, #24]
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d302      	bcc.n	8014d7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014d74:	2301      	movs	r3, #1
 8014d76:	61fb      	str	r3, [r7, #28]
 8014d78:	e015      	b.n	8014da6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	697a      	ldr	r2, [r7, #20]
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d20b      	bcs.n	8014d9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014d84:	683b      	ldr	r3, [r7, #0]
 8014d86:	681a      	ldr	r2, [r3, #0]
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	1ad2      	subs	r2, r2, r3
 8014d8c:	683b      	ldr	r3, [r7, #0]
 8014d8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014d90:	6878      	ldr	r0, [r7, #4]
 8014d92:	f7ff ff9b 	bl	8014ccc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014d96:	2300      	movs	r3, #0
 8014d98:	61fb      	str	r3, [r7, #28]
 8014d9a:	e004      	b.n	8014da6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014da2:	2301      	movs	r3, #1
 8014da4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014da6:	f000 fc59 	bl	801565c <vPortExitCritical>

	return xReturn;
 8014daa:	69fb      	ldr	r3, [r7, #28]
}
 8014dac:	4618      	mov	r0, r3
 8014dae:	3720      	adds	r7, #32
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}
 8014db4:	20007bf4 	.word	0x20007bf4
 8014db8:	20007c08 	.word	0x20007c08

08014dbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014dbc:	b480      	push	{r7}
 8014dbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014dc0:	4b03      	ldr	r3, [pc, #12]	; (8014dd0 <vTaskMissedYield+0x14>)
 8014dc2:	2201      	movs	r2, #1
 8014dc4:	601a      	str	r2, [r3, #0]
}
 8014dc6:	bf00      	nop
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bc80      	pop	{r7}
 8014dcc:	4770      	bx	lr
 8014dce:	bf00      	nop
 8014dd0:	20007c04 	.word	0x20007c04

08014dd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b082      	sub	sp, #8
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014ddc:	f000 f852 	bl	8014e84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014de0:	4b06      	ldr	r3, [pc, #24]	; (8014dfc <prvIdleTask+0x28>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	2b01      	cmp	r3, #1
 8014de6:	d9f9      	bls.n	8014ddc <prvIdleTask+0x8>
			{
				taskYIELD();
 8014de8:	4b05      	ldr	r3, [pc, #20]	; (8014e00 <prvIdleTask+0x2c>)
 8014dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014dee:	601a      	str	r2, [r3, #0]
 8014df0:	f3bf 8f4f 	dsb	sy
 8014df4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014df8:	e7f0      	b.n	8014ddc <prvIdleTask+0x8>
 8014dfa:	bf00      	nop
 8014dfc:	20007af4 	.word	0x20007af4
 8014e00:	e000ed04 	.word	0xe000ed04

08014e04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	607b      	str	r3, [r7, #4]
 8014e0e:	e00c      	b.n	8014e2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014e10:	687a      	ldr	r2, [r7, #4]
 8014e12:	4613      	mov	r3, r2
 8014e14:	009b      	lsls	r3, r3, #2
 8014e16:	4413      	add	r3, r2
 8014e18:	009b      	lsls	r3, r3, #2
 8014e1a:	4a12      	ldr	r2, [pc, #72]	; (8014e64 <prvInitialiseTaskLists+0x60>)
 8014e1c:	4413      	add	r3, r2
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7fe fad4 	bl	80133cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	3301      	adds	r3, #1
 8014e28:	607b      	str	r3, [r7, #4]
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	2b06      	cmp	r3, #6
 8014e2e:	d9ef      	bls.n	8014e10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014e30:	480d      	ldr	r0, [pc, #52]	; (8014e68 <prvInitialiseTaskLists+0x64>)
 8014e32:	f7fe facb 	bl	80133cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014e36:	480d      	ldr	r0, [pc, #52]	; (8014e6c <prvInitialiseTaskLists+0x68>)
 8014e38:	f7fe fac8 	bl	80133cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014e3c:	480c      	ldr	r0, [pc, #48]	; (8014e70 <prvInitialiseTaskLists+0x6c>)
 8014e3e:	f7fe fac5 	bl	80133cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014e42:	480c      	ldr	r0, [pc, #48]	; (8014e74 <prvInitialiseTaskLists+0x70>)
 8014e44:	f7fe fac2 	bl	80133cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014e48:	480b      	ldr	r0, [pc, #44]	; (8014e78 <prvInitialiseTaskLists+0x74>)
 8014e4a:	f7fe fabf 	bl	80133cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014e4e:	4b0b      	ldr	r3, [pc, #44]	; (8014e7c <prvInitialiseTaskLists+0x78>)
 8014e50:	4a05      	ldr	r2, [pc, #20]	; (8014e68 <prvInitialiseTaskLists+0x64>)
 8014e52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014e54:	4b0a      	ldr	r3, [pc, #40]	; (8014e80 <prvInitialiseTaskLists+0x7c>)
 8014e56:	4a05      	ldr	r2, [pc, #20]	; (8014e6c <prvInitialiseTaskLists+0x68>)
 8014e58:	601a      	str	r2, [r3, #0]
}
 8014e5a:	bf00      	nop
 8014e5c:	3708      	adds	r7, #8
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
 8014e62:	bf00      	nop
 8014e64:	20007af4 	.word	0x20007af4
 8014e68:	20007b80 	.word	0x20007b80
 8014e6c:	20007b94 	.word	0x20007b94
 8014e70:	20007bb0 	.word	0x20007bb0
 8014e74:	20007bc4 	.word	0x20007bc4
 8014e78:	20007bdc 	.word	0x20007bdc
 8014e7c:	20007ba8 	.word	0x20007ba8
 8014e80:	20007bac 	.word	0x20007bac

08014e84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b082      	sub	sp, #8
 8014e88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014e8a:	e019      	b.n	8014ec0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014e8c:	f000 fbb6 	bl	80155fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8014e90:	4b10      	ldr	r3, [pc, #64]	; (8014ed4 <prvCheckTasksWaitingTermination+0x50>)
 8014e92:	68db      	ldr	r3, [r3, #12]
 8014e94:	68db      	ldr	r3, [r3, #12]
 8014e96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	3304      	adds	r3, #4
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f7fe fb1b 	bl	80134d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014ea2:	4b0d      	ldr	r3, [pc, #52]	; (8014ed8 <prvCheckTasksWaitingTermination+0x54>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	3b01      	subs	r3, #1
 8014ea8:	4a0b      	ldr	r2, [pc, #44]	; (8014ed8 <prvCheckTasksWaitingTermination+0x54>)
 8014eaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014eac:	4b0b      	ldr	r3, [pc, #44]	; (8014edc <prvCheckTasksWaitingTermination+0x58>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	3b01      	subs	r3, #1
 8014eb2:	4a0a      	ldr	r2, [pc, #40]	; (8014edc <prvCheckTasksWaitingTermination+0x58>)
 8014eb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014eb6:	f000 fbd1 	bl	801565c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f000 f810 	bl	8014ee0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014ec0:	4b06      	ldr	r3, [pc, #24]	; (8014edc <prvCheckTasksWaitingTermination+0x58>)
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d1e1      	bne.n	8014e8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014ec8:	bf00      	nop
 8014eca:	bf00      	nop
 8014ecc:	3708      	adds	r7, #8
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}
 8014ed2:	bf00      	nop
 8014ed4:	20007bc4 	.word	0x20007bc4
 8014ed8:	20007bf0 	.word	0x20007bf0
 8014edc:	20007bd8 	.word	0x20007bd8

08014ee0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b084      	sub	sp, #16
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	334c      	adds	r3, #76	; 0x4c
 8014eec:	4618      	mov	r0, r3
 8014eee:	f002 fa0d 	bl	801730c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d108      	bne.n	8014f0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f00:	4618      	mov	r0, r3
 8014f02:	f000 fd3f 	bl	8015984 <vPortFree>
				vPortFree( pxTCB );
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	f000 fd3c 	bl	8015984 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014f0c:	e018      	b.n	8014f40 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014f14:	2b01      	cmp	r3, #1
 8014f16:	d103      	bne.n	8014f20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014f18:	6878      	ldr	r0, [r7, #4]
 8014f1a:	f000 fd33 	bl	8015984 <vPortFree>
	}
 8014f1e:	e00f      	b.n	8014f40 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014f26:	2b02      	cmp	r3, #2
 8014f28:	d00a      	beq.n	8014f40 <prvDeleteTCB+0x60>
	__asm volatile
 8014f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f2e:	f383 8811 	msr	BASEPRI, r3
 8014f32:	f3bf 8f6f 	isb	sy
 8014f36:	f3bf 8f4f 	dsb	sy
 8014f3a:	60fb      	str	r3, [r7, #12]
}
 8014f3c:	bf00      	nop
 8014f3e:	e7fe      	b.n	8014f3e <prvDeleteTCB+0x5e>
	}
 8014f40:	bf00      	nop
 8014f42:	3710      	adds	r7, #16
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}

08014f48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014f48:	b480      	push	{r7}
 8014f4a:	b083      	sub	sp, #12
 8014f4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014f4e:	4b0e      	ldr	r3, [pc, #56]	; (8014f88 <prvResetNextTaskUnblockTime+0x40>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d101      	bne.n	8014f5c <prvResetNextTaskUnblockTime+0x14>
 8014f58:	2301      	movs	r3, #1
 8014f5a:	e000      	b.n	8014f5e <prvResetNextTaskUnblockTime+0x16>
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d004      	beq.n	8014f6c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014f62:	4b0a      	ldr	r3, [pc, #40]	; (8014f8c <prvResetNextTaskUnblockTime+0x44>)
 8014f64:	f04f 32ff 	mov.w	r2, #4294967295
 8014f68:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014f6a:	e008      	b.n	8014f7e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8014f6c:	4b06      	ldr	r3, [pc, #24]	; (8014f88 <prvResetNextTaskUnblockTime+0x40>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	68db      	ldr	r3, [r3, #12]
 8014f72:	68db      	ldr	r3, [r3, #12]
 8014f74:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	685b      	ldr	r3, [r3, #4]
 8014f7a:	4a04      	ldr	r2, [pc, #16]	; (8014f8c <prvResetNextTaskUnblockTime+0x44>)
 8014f7c:	6013      	str	r3, [r2, #0]
}
 8014f7e:	bf00      	nop
 8014f80:	370c      	adds	r7, #12
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bc80      	pop	{r7}
 8014f86:	4770      	bx	lr
 8014f88:	20007ba8 	.word	0x20007ba8
 8014f8c:	20007c10 	.word	0x20007c10

08014f90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014f90:	b480      	push	{r7}
 8014f92:	b083      	sub	sp, #12
 8014f94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014f96:	4b0b      	ldr	r3, [pc, #44]	; (8014fc4 <xTaskGetSchedulerState+0x34>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d102      	bne.n	8014fa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	607b      	str	r3, [r7, #4]
 8014fa2:	e008      	b.n	8014fb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014fa4:	4b08      	ldr	r3, [pc, #32]	; (8014fc8 <xTaskGetSchedulerState+0x38>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d102      	bne.n	8014fb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014fac:	2302      	movs	r3, #2
 8014fae:	607b      	str	r3, [r7, #4]
 8014fb0:	e001      	b.n	8014fb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014fb6:	687b      	ldr	r3, [r7, #4]
	}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	370c      	adds	r7, #12
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bc80      	pop	{r7}
 8014fc0:	4770      	bx	lr
 8014fc2:	bf00      	nop
 8014fc4:	20007bfc 	.word	0x20007bfc
 8014fc8:	20007c18 	.word	0x20007c18

08014fcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b084      	sub	sp, #16
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014fd8:	2300      	movs	r3, #0
 8014fda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d06e      	beq.n	80150c0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fe6:	4b39      	ldr	r3, [pc, #228]	; (80150cc <xTaskPriorityInherit+0x100>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fec:	429a      	cmp	r2, r3
 8014fee:	d25e      	bcs.n	80150ae <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	699b      	ldr	r3, [r3, #24]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	db06      	blt.n	8015006 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ff8:	4b34      	ldr	r3, [pc, #208]	; (80150cc <xTaskPriorityInherit+0x100>)
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ffe:	f1c3 0207 	rsb	r2, r3, #7
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015006:	68bb      	ldr	r3, [r7, #8]
 8015008:	6959      	ldr	r1, [r3, #20]
 801500a:	68bb      	ldr	r3, [r7, #8]
 801500c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801500e:	4613      	mov	r3, r2
 8015010:	009b      	lsls	r3, r3, #2
 8015012:	4413      	add	r3, r2
 8015014:	009b      	lsls	r3, r3, #2
 8015016:	4a2e      	ldr	r2, [pc, #184]	; (80150d0 <xTaskPriorityInherit+0x104>)
 8015018:	4413      	add	r3, r2
 801501a:	4299      	cmp	r1, r3
 801501c:	d101      	bne.n	8015022 <xTaskPriorityInherit+0x56>
 801501e:	2301      	movs	r3, #1
 8015020:	e000      	b.n	8015024 <xTaskPriorityInherit+0x58>
 8015022:	2300      	movs	r3, #0
 8015024:	2b00      	cmp	r3, #0
 8015026:	d03a      	beq.n	801509e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	3304      	adds	r3, #4
 801502c:	4618      	mov	r0, r3
 801502e:	f7fe fa53 	bl	80134d8 <uxListRemove>
 8015032:	4603      	mov	r3, r0
 8015034:	2b00      	cmp	r3, #0
 8015036:	d115      	bne.n	8015064 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801503c:	4924      	ldr	r1, [pc, #144]	; (80150d0 <xTaskPriorityInherit+0x104>)
 801503e:	4613      	mov	r3, r2
 8015040:	009b      	lsls	r3, r3, #2
 8015042:	4413      	add	r3, r2
 8015044:	009b      	lsls	r3, r3, #2
 8015046:	440b      	add	r3, r1
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d10a      	bne.n	8015064 <xTaskPriorityInherit+0x98>
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015052:	2201      	movs	r2, #1
 8015054:	fa02 f303 	lsl.w	r3, r2, r3
 8015058:	43da      	mvns	r2, r3
 801505a:	4b1e      	ldr	r3, [pc, #120]	; (80150d4 <xTaskPriorityInherit+0x108>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	4013      	ands	r3, r2
 8015060:	4a1c      	ldr	r2, [pc, #112]	; (80150d4 <xTaskPriorityInherit+0x108>)
 8015062:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015064:	4b19      	ldr	r3, [pc, #100]	; (80150cc <xTaskPriorityInherit+0x100>)
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801506a:	68bb      	ldr	r3, [r7, #8]
 801506c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015072:	2201      	movs	r2, #1
 8015074:	409a      	lsls	r2, r3
 8015076:	4b17      	ldr	r3, [pc, #92]	; (80150d4 <xTaskPriorityInherit+0x108>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	4313      	orrs	r3, r2
 801507c:	4a15      	ldr	r2, [pc, #84]	; (80150d4 <xTaskPriorityInherit+0x108>)
 801507e:	6013      	str	r3, [r2, #0]
 8015080:	68bb      	ldr	r3, [r7, #8]
 8015082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015084:	4613      	mov	r3, r2
 8015086:	009b      	lsls	r3, r3, #2
 8015088:	4413      	add	r3, r2
 801508a:	009b      	lsls	r3, r3, #2
 801508c:	4a10      	ldr	r2, [pc, #64]	; (80150d0 <xTaskPriorityInherit+0x104>)
 801508e:	441a      	add	r2, r3
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	3304      	adds	r3, #4
 8015094:	4619      	mov	r1, r3
 8015096:	4610      	mov	r0, r2
 8015098:	f7fe f9c3 	bl	8013422 <vListInsertEnd>
 801509c:	e004      	b.n	80150a8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801509e:	4b0b      	ldr	r3, [pc, #44]	; (80150cc <xTaskPriorityInherit+0x100>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80150a8:	2301      	movs	r3, #1
 80150aa:	60fb      	str	r3, [r7, #12]
 80150ac:	e008      	b.n	80150c0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80150ae:	68bb      	ldr	r3, [r7, #8]
 80150b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80150b2:	4b06      	ldr	r3, [pc, #24]	; (80150cc <xTaskPriorityInherit+0x100>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d201      	bcs.n	80150c0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80150bc:	2301      	movs	r3, #1
 80150be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80150c0:	68fb      	ldr	r3, [r7, #12]
	}
 80150c2:	4618      	mov	r0, r3
 80150c4:	3710      	adds	r7, #16
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}
 80150ca:	bf00      	nop
 80150cc:	20007af0 	.word	0x20007af0
 80150d0:	20007af4 	.word	0x20007af4
 80150d4:	20007bf8 	.word	0x20007bf8

080150d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b086      	sub	sp, #24
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80150e4:	2300      	movs	r3, #0
 80150e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d06e      	beq.n	80151cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80150ee:	4b3a      	ldr	r3, [pc, #232]	; (80151d8 <xTaskPriorityDisinherit+0x100>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	693a      	ldr	r2, [r7, #16]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d00a      	beq.n	801510e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80150f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150fc:	f383 8811 	msr	BASEPRI, r3
 8015100:	f3bf 8f6f 	isb	sy
 8015104:	f3bf 8f4f 	dsb	sy
 8015108:	60fb      	str	r3, [r7, #12]
}
 801510a:	bf00      	nop
 801510c:	e7fe      	b.n	801510c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801510e:	693b      	ldr	r3, [r7, #16]
 8015110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015112:	2b00      	cmp	r3, #0
 8015114:	d10a      	bne.n	801512c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801511a:	f383 8811 	msr	BASEPRI, r3
 801511e:	f3bf 8f6f 	isb	sy
 8015122:	f3bf 8f4f 	dsb	sy
 8015126:	60bb      	str	r3, [r7, #8]
}
 8015128:	bf00      	nop
 801512a:	e7fe      	b.n	801512a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015130:	1e5a      	subs	r2, r3, #1
 8015132:	693b      	ldr	r3, [r7, #16]
 8015134:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015136:	693b      	ldr	r3, [r7, #16]
 8015138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801513e:	429a      	cmp	r2, r3
 8015140:	d044      	beq.n	80151cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015146:	2b00      	cmp	r3, #0
 8015148:	d140      	bne.n	80151cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801514a:	693b      	ldr	r3, [r7, #16]
 801514c:	3304      	adds	r3, #4
 801514e:	4618      	mov	r0, r3
 8015150:	f7fe f9c2 	bl	80134d8 <uxListRemove>
 8015154:	4603      	mov	r3, r0
 8015156:	2b00      	cmp	r3, #0
 8015158:	d115      	bne.n	8015186 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801515a:	693b      	ldr	r3, [r7, #16]
 801515c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801515e:	491f      	ldr	r1, [pc, #124]	; (80151dc <xTaskPriorityDisinherit+0x104>)
 8015160:	4613      	mov	r3, r2
 8015162:	009b      	lsls	r3, r3, #2
 8015164:	4413      	add	r3, r2
 8015166:	009b      	lsls	r3, r3, #2
 8015168:	440b      	add	r3, r1
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d10a      	bne.n	8015186 <xTaskPriorityDisinherit+0xae>
 8015170:	693b      	ldr	r3, [r7, #16]
 8015172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015174:	2201      	movs	r2, #1
 8015176:	fa02 f303 	lsl.w	r3, r2, r3
 801517a:	43da      	mvns	r2, r3
 801517c:	4b18      	ldr	r3, [pc, #96]	; (80151e0 <xTaskPriorityDisinherit+0x108>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	4013      	ands	r3, r2
 8015182:	4a17      	ldr	r2, [pc, #92]	; (80151e0 <xTaskPriorityDisinherit+0x108>)
 8015184:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801518a:	693b      	ldr	r3, [r7, #16]
 801518c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801518e:	693b      	ldr	r3, [r7, #16]
 8015190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015192:	f1c3 0207 	rsb	r2, r3, #7
 8015196:	693b      	ldr	r3, [r7, #16]
 8015198:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801519a:	693b      	ldr	r3, [r7, #16]
 801519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801519e:	2201      	movs	r2, #1
 80151a0:	409a      	lsls	r2, r3
 80151a2:	4b0f      	ldr	r3, [pc, #60]	; (80151e0 <xTaskPriorityDisinherit+0x108>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	4313      	orrs	r3, r2
 80151a8:	4a0d      	ldr	r2, [pc, #52]	; (80151e0 <xTaskPriorityDisinherit+0x108>)
 80151aa:	6013      	str	r3, [r2, #0]
 80151ac:	693b      	ldr	r3, [r7, #16]
 80151ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151b0:	4613      	mov	r3, r2
 80151b2:	009b      	lsls	r3, r3, #2
 80151b4:	4413      	add	r3, r2
 80151b6:	009b      	lsls	r3, r3, #2
 80151b8:	4a08      	ldr	r2, [pc, #32]	; (80151dc <xTaskPriorityDisinherit+0x104>)
 80151ba:	441a      	add	r2, r3
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	3304      	adds	r3, #4
 80151c0:	4619      	mov	r1, r3
 80151c2:	4610      	mov	r0, r2
 80151c4:	f7fe f92d 	bl	8013422 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80151c8:	2301      	movs	r3, #1
 80151ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80151cc:	697b      	ldr	r3, [r7, #20]
	}
 80151ce:	4618      	mov	r0, r3
 80151d0:	3718      	adds	r7, #24
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}
 80151d6:	bf00      	nop
 80151d8:	20007af0 	.word	0x20007af0
 80151dc:	20007af4 	.word	0x20007af4
 80151e0:	20007bf8 	.word	0x20007bf8

080151e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b088      	sub	sp, #32
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80151f2:	2301      	movs	r3, #1
 80151f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	f000 8088 	beq.w	801530e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80151fe:	69bb      	ldr	r3, [r7, #24]
 8015200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015202:	2b00      	cmp	r3, #0
 8015204:	d10a      	bne.n	801521c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8015206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801520a:	f383 8811 	msr	BASEPRI, r3
 801520e:	f3bf 8f6f 	isb	sy
 8015212:	f3bf 8f4f 	dsb	sy
 8015216:	60fb      	str	r3, [r7, #12]
}
 8015218:	bf00      	nop
 801521a:	e7fe      	b.n	801521a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801521c:	69bb      	ldr	r3, [r7, #24]
 801521e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015220:	683a      	ldr	r2, [r7, #0]
 8015222:	429a      	cmp	r2, r3
 8015224:	d902      	bls.n	801522c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	61fb      	str	r3, [r7, #28]
 801522a:	e002      	b.n	8015232 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801522c:	69bb      	ldr	r3, [r7, #24]
 801522e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015230:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015236:	69fa      	ldr	r2, [r7, #28]
 8015238:	429a      	cmp	r2, r3
 801523a:	d068      	beq.n	801530e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801523c:	69bb      	ldr	r3, [r7, #24]
 801523e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015240:	697a      	ldr	r2, [r7, #20]
 8015242:	429a      	cmp	r2, r3
 8015244:	d163      	bne.n	801530e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015246:	4b34      	ldr	r3, [pc, #208]	; (8015318 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	69ba      	ldr	r2, [r7, #24]
 801524c:	429a      	cmp	r2, r3
 801524e:	d10a      	bne.n	8015266 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8015250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015254:	f383 8811 	msr	BASEPRI, r3
 8015258:	f3bf 8f6f 	isb	sy
 801525c:	f3bf 8f4f 	dsb	sy
 8015260:	60bb      	str	r3, [r7, #8]
}
 8015262:	bf00      	nop
 8015264:	e7fe      	b.n	8015264 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015266:	69bb      	ldr	r3, [r7, #24]
 8015268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801526a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801526c:	69bb      	ldr	r3, [r7, #24]
 801526e:	69fa      	ldr	r2, [r7, #28]
 8015270:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015272:	69bb      	ldr	r3, [r7, #24]
 8015274:	699b      	ldr	r3, [r3, #24]
 8015276:	2b00      	cmp	r3, #0
 8015278:	db04      	blt.n	8015284 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801527a:	69fb      	ldr	r3, [r7, #28]
 801527c:	f1c3 0207 	rsb	r2, r3, #7
 8015280:	69bb      	ldr	r3, [r7, #24]
 8015282:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015284:	69bb      	ldr	r3, [r7, #24]
 8015286:	6959      	ldr	r1, [r3, #20]
 8015288:	693a      	ldr	r2, [r7, #16]
 801528a:	4613      	mov	r3, r2
 801528c:	009b      	lsls	r3, r3, #2
 801528e:	4413      	add	r3, r2
 8015290:	009b      	lsls	r3, r3, #2
 8015292:	4a22      	ldr	r2, [pc, #136]	; (801531c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015294:	4413      	add	r3, r2
 8015296:	4299      	cmp	r1, r3
 8015298:	d101      	bne.n	801529e <vTaskPriorityDisinheritAfterTimeout+0xba>
 801529a:	2301      	movs	r3, #1
 801529c:	e000      	b.n	80152a0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 801529e:	2300      	movs	r3, #0
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d034      	beq.n	801530e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	3304      	adds	r3, #4
 80152a8:	4618      	mov	r0, r3
 80152aa:	f7fe f915 	bl	80134d8 <uxListRemove>
 80152ae:	4603      	mov	r3, r0
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d115      	bne.n	80152e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80152b4:	69bb      	ldr	r3, [r7, #24]
 80152b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152b8:	4918      	ldr	r1, [pc, #96]	; (801531c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80152ba:	4613      	mov	r3, r2
 80152bc:	009b      	lsls	r3, r3, #2
 80152be:	4413      	add	r3, r2
 80152c0:	009b      	lsls	r3, r3, #2
 80152c2:	440b      	add	r3, r1
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d10a      	bne.n	80152e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80152ca:	69bb      	ldr	r3, [r7, #24]
 80152cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152ce:	2201      	movs	r2, #1
 80152d0:	fa02 f303 	lsl.w	r3, r2, r3
 80152d4:	43da      	mvns	r2, r3
 80152d6:	4b12      	ldr	r3, [pc, #72]	; (8015320 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	4013      	ands	r3, r2
 80152dc:	4a10      	ldr	r2, [pc, #64]	; (8015320 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80152de:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80152e0:	69bb      	ldr	r3, [r7, #24]
 80152e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152e4:	2201      	movs	r2, #1
 80152e6:	409a      	lsls	r2, r3
 80152e8:	4b0d      	ldr	r3, [pc, #52]	; (8015320 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	4313      	orrs	r3, r2
 80152ee:	4a0c      	ldr	r2, [pc, #48]	; (8015320 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80152f0:	6013      	str	r3, [r2, #0]
 80152f2:	69bb      	ldr	r3, [r7, #24]
 80152f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152f6:	4613      	mov	r3, r2
 80152f8:	009b      	lsls	r3, r3, #2
 80152fa:	4413      	add	r3, r2
 80152fc:	009b      	lsls	r3, r3, #2
 80152fe:	4a07      	ldr	r2, [pc, #28]	; (801531c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015300:	441a      	add	r2, r3
 8015302:	69bb      	ldr	r3, [r7, #24]
 8015304:	3304      	adds	r3, #4
 8015306:	4619      	mov	r1, r3
 8015308:	4610      	mov	r0, r2
 801530a:	f7fe f88a 	bl	8013422 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801530e:	bf00      	nop
 8015310:	3720      	adds	r7, #32
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	20007af0 	.word	0x20007af0
 801531c:	20007af4 	.word	0x20007af4
 8015320:	20007bf8 	.word	0x20007bf8

08015324 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8015324:	b480      	push	{r7}
 8015326:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015328:	4b07      	ldr	r3, [pc, #28]	; (8015348 <pvTaskIncrementMutexHeldCount+0x24>)
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d004      	beq.n	801533a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015330:	4b05      	ldr	r3, [pc, #20]	; (8015348 <pvTaskIncrementMutexHeldCount+0x24>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015336:	3201      	adds	r2, #1
 8015338:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801533a:	4b03      	ldr	r3, [pc, #12]	; (8015348 <pvTaskIncrementMutexHeldCount+0x24>)
 801533c:	681b      	ldr	r3, [r3, #0]
	}
 801533e:	4618      	mov	r0, r3
 8015340:	46bd      	mov	sp, r7
 8015342:	bc80      	pop	{r7}
 8015344:	4770      	bx	lr
 8015346:	bf00      	nop
 8015348:	20007af0 	.word	0x20007af0

0801534c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b084      	sub	sp, #16
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
 8015354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015356:	4b29      	ldr	r3, [pc, #164]	; (80153fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801535c:	4b28      	ldr	r3, [pc, #160]	; (8015400 <prvAddCurrentTaskToDelayedList+0xb4>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	3304      	adds	r3, #4
 8015362:	4618      	mov	r0, r3
 8015364:	f7fe f8b8 	bl	80134d8 <uxListRemove>
 8015368:	4603      	mov	r3, r0
 801536a:	2b00      	cmp	r3, #0
 801536c:	d10b      	bne.n	8015386 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801536e:	4b24      	ldr	r3, [pc, #144]	; (8015400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015374:	2201      	movs	r2, #1
 8015376:	fa02 f303 	lsl.w	r3, r2, r3
 801537a:	43da      	mvns	r2, r3
 801537c:	4b21      	ldr	r3, [pc, #132]	; (8015404 <prvAddCurrentTaskToDelayedList+0xb8>)
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	4013      	ands	r3, r2
 8015382:	4a20      	ldr	r2, [pc, #128]	; (8015404 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015384:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f1b3 3fff 	cmp.w	r3, #4294967295
 801538c:	d10a      	bne.n	80153a4 <prvAddCurrentTaskToDelayedList+0x58>
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d007      	beq.n	80153a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015394:	4b1a      	ldr	r3, [pc, #104]	; (8015400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	3304      	adds	r3, #4
 801539a:	4619      	mov	r1, r3
 801539c:	481a      	ldr	r0, [pc, #104]	; (8015408 <prvAddCurrentTaskToDelayedList+0xbc>)
 801539e:	f7fe f840 	bl	8013422 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80153a2:	e026      	b.n	80153f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80153a4:	68fa      	ldr	r2, [r7, #12]
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	4413      	add	r3, r2
 80153aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80153ac:	4b14      	ldr	r3, [pc, #80]	; (8015400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	68ba      	ldr	r2, [r7, #8]
 80153b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80153b4:	68ba      	ldr	r2, [r7, #8]
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	429a      	cmp	r2, r3
 80153ba:	d209      	bcs.n	80153d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153bc:	4b13      	ldr	r3, [pc, #76]	; (801540c <prvAddCurrentTaskToDelayedList+0xc0>)
 80153be:	681a      	ldr	r2, [r3, #0]
 80153c0:	4b0f      	ldr	r3, [pc, #60]	; (8015400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	3304      	adds	r3, #4
 80153c6:	4619      	mov	r1, r3
 80153c8:	4610      	mov	r0, r2
 80153ca:	f7fe f84d 	bl	8013468 <vListInsert>
}
 80153ce:	e010      	b.n	80153f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153d0:	4b0f      	ldr	r3, [pc, #60]	; (8015410 <prvAddCurrentTaskToDelayedList+0xc4>)
 80153d2:	681a      	ldr	r2, [r3, #0]
 80153d4:	4b0a      	ldr	r3, [pc, #40]	; (8015400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	3304      	adds	r3, #4
 80153da:	4619      	mov	r1, r3
 80153dc:	4610      	mov	r0, r2
 80153de:	f7fe f843 	bl	8013468 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80153e2:	4b0c      	ldr	r3, [pc, #48]	; (8015414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	68ba      	ldr	r2, [r7, #8]
 80153e8:	429a      	cmp	r2, r3
 80153ea:	d202      	bcs.n	80153f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80153ec:	4a09      	ldr	r2, [pc, #36]	; (8015414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80153ee:	68bb      	ldr	r3, [r7, #8]
 80153f0:	6013      	str	r3, [r2, #0]
}
 80153f2:	bf00      	nop
 80153f4:	3710      	adds	r7, #16
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
 80153fa:	bf00      	nop
 80153fc:	20007bf4 	.word	0x20007bf4
 8015400:	20007af0 	.word	0x20007af0
 8015404:	20007bf8 	.word	0x20007bf8
 8015408:	20007bdc 	.word	0x20007bdc
 801540c:	20007bac 	.word	0x20007bac
 8015410:	20007ba8 	.word	0x20007ba8
 8015414:	20007c10 	.word	0x20007c10

08015418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015418:	b480      	push	{r7}
 801541a:	b085      	sub	sp, #20
 801541c:	af00      	add	r7, sp, #0
 801541e:	60f8      	str	r0, [r7, #12]
 8015420:	60b9      	str	r1, [r7, #8]
 8015422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	3b04      	subs	r3, #4
 8015428:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	3b04      	subs	r3, #4
 8015436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	f023 0201 	bic.w	r2, r3, #1
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	3b04      	subs	r3, #4
 8015446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015448:	4a08      	ldr	r2, [pc, #32]	; (801546c <pxPortInitialiseStack+0x54>)
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	3b14      	subs	r3, #20
 8015452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015454:	687a      	ldr	r2, [r7, #4]
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	3b20      	subs	r3, #32
 801545e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015460:	68fb      	ldr	r3, [r7, #12]
}
 8015462:	4618      	mov	r0, r3
 8015464:	3714      	adds	r7, #20
 8015466:	46bd      	mov	sp, r7
 8015468:	bc80      	pop	{r7}
 801546a:	4770      	bx	lr
 801546c:	08015471 	.word	0x08015471

08015470 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015470:	b480      	push	{r7}
 8015472:	b085      	sub	sp, #20
 8015474:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8015476:	2300      	movs	r3, #0
 8015478:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801547a:	4b12      	ldr	r3, [pc, #72]	; (80154c4 <prvTaskExitError+0x54>)
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015482:	d00a      	beq.n	801549a <prvTaskExitError+0x2a>
	__asm volatile
 8015484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015488:	f383 8811 	msr	BASEPRI, r3
 801548c:	f3bf 8f6f 	isb	sy
 8015490:	f3bf 8f4f 	dsb	sy
 8015494:	60fb      	str	r3, [r7, #12]
}
 8015496:	bf00      	nop
 8015498:	e7fe      	b.n	8015498 <prvTaskExitError+0x28>
	__asm volatile
 801549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801549e:	f383 8811 	msr	BASEPRI, r3
 80154a2:	f3bf 8f6f 	isb	sy
 80154a6:	f3bf 8f4f 	dsb	sy
 80154aa:	60bb      	str	r3, [r7, #8]
}
 80154ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80154ae:	bf00      	nop
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d0fc      	beq.n	80154b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80154b6:	bf00      	nop
 80154b8:	bf00      	nop
 80154ba:	3714      	adds	r7, #20
 80154bc:	46bd      	mov	sp, r7
 80154be:	bc80      	pop	{r7}
 80154c0:	4770      	bx	lr
 80154c2:	bf00      	nop
 80154c4:	20000238 	.word	0x20000238
	...

080154d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80154d0:	4b07      	ldr	r3, [pc, #28]	; (80154f0 <pxCurrentTCBConst2>)
 80154d2:	6819      	ldr	r1, [r3, #0]
 80154d4:	6808      	ldr	r0, [r1, #0]
 80154d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80154da:	f380 8809 	msr	PSP, r0
 80154de:	f3bf 8f6f 	isb	sy
 80154e2:	f04f 0000 	mov.w	r0, #0
 80154e6:	f380 8811 	msr	BASEPRI, r0
 80154ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80154ee:	4770      	bx	lr

080154f0 <pxCurrentTCBConst2>:
 80154f0:	20007af0 	.word	0x20007af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80154f4:	bf00      	nop
 80154f6:	bf00      	nop

080154f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80154f8:	4806      	ldr	r0, [pc, #24]	; (8015514 <prvPortStartFirstTask+0x1c>)
 80154fa:	6800      	ldr	r0, [r0, #0]
 80154fc:	6800      	ldr	r0, [r0, #0]
 80154fe:	f380 8808 	msr	MSP, r0
 8015502:	b662      	cpsie	i
 8015504:	b661      	cpsie	f
 8015506:	f3bf 8f4f 	dsb	sy
 801550a:	f3bf 8f6f 	isb	sy
 801550e:	df00      	svc	0
 8015510:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015512:	bf00      	nop
 8015514:	e000ed08 	.word	0xe000ed08

08015518 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b084      	sub	sp, #16
 801551c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801551e:	4b32      	ldr	r3, [pc, #200]	; (80155e8 <xPortStartScheduler+0xd0>)
 8015520:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	781b      	ldrb	r3, [r3, #0]
 8015526:	b2db      	uxtb	r3, r3
 8015528:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	22ff      	movs	r2, #255	; 0xff
 801552e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	b2db      	uxtb	r3, r3
 8015536:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015538:	78fb      	ldrb	r3, [r7, #3]
 801553a:	b2db      	uxtb	r3, r3
 801553c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015540:	b2da      	uxtb	r2, r3
 8015542:	4b2a      	ldr	r3, [pc, #168]	; (80155ec <xPortStartScheduler+0xd4>)
 8015544:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015546:	4b2a      	ldr	r3, [pc, #168]	; (80155f0 <xPortStartScheduler+0xd8>)
 8015548:	2207      	movs	r2, #7
 801554a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801554c:	e009      	b.n	8015562 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801554e:	4b28      	ldr	r3, [pc, #160]	; (80155f0 <xPortStartScheduler+0xd8>)
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	3b01      	subs	r3, #1
 8015554:	4a26      	ldr	r2, [pc, #152]	; (80155f0 <xPortStartScheduler+0xd8>)
 8015556:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015558:	78fb      	ldrb	r3, [r7, #3]
 801555a:	b2db      	uxtb	r3, r3
 801555c:	005b      	lsls	r3, r3, #1
 801555e:	b2db      	uxtb	r3, r3
 8015560:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015562:	78fb      	ldrb	r3, [r7, #3]
 8015564:	b2db      	uxtb	r3, r3
 8015566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801556a:	2b80      	cmp	r3, #128	; 0x80
 801556c:	d0ef      	beq.n	801554e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801556e:	4b20      	ldr	r3, [pc, #128]	; (80155f0 <xPortStartScheduler+0xd8>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	f1c3 0307 	rsb	r3, r3, #7
 8015576:	2b04      	cmp	r3, #4
 8015578:	d00a      	beq.n	8015590 <xPortStartScheduler+0x78>
	__asm volatile
 801557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801557e:	f383 8811 	msr	BASEPRI, r3
 8015582:	f3bf 8f6f 	isb	sy
 8015586:	f3bf 8f4f 	dsb	sy
 801558a:	60bb      	str	r3, [r7, #8]
}
 801558c:	bf00      	nop
 801558e:	e7fe      	b.n	801558e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015590:	4b17      	ldr	r3, [pc, #92]	; (80155f0 <xPortStartScheduler+0xd8>)
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	021b      	lsls	r3, r3, #8
 8015596:	4a16      	ldr	r2, [pc, #88]	; (80155f0 <xPortStartScheduler+0xd8>)
 8015598:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801559a:	4b15      	ldr	r3, [pc, #84]	; (80155f0 <xPortStartScheduler+0xd8>)
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80155a2:	4a13      	ldr	r2, [pc, #76]	; (80155f0 <xPortStartScheduler+0xd8>)
 80155a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	b2da      	uxtb	r2, r3
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80155ae:	4b11      	ldr	r3, [pc, #68]	; (80155f4 <xPortStartScheduler+0xdc>)
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	4a10      	ldr	r2, [pc, #64]	; (80155f4 <xPortStartScheduler+0xdc>)
 80155b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80155b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80155ba:	4b0e      	ldr	r3, [pc, #56]	; (80155f4 <xPortStartScheduler+0xdc>)
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	4a0d      	ldr	r2, [pc, #52]	; (80155f4 <xPortStartScheduler+0xdc>)
 80155c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80155c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80155c6:	f000 f8b9 	bl	801573c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80155ca:	4b0b      	ldr	r3, [pc, #44]	; (80155f8 <xPortStartScheduler+0xe0>)
 80155cc:	2200      	movs	r2, #0
 80155ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80155d0:	f7ff ff92 	bl	80154f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80155d4:	f7ff fa92 	bl	8014afc <vTaskSwitchContext>
	prvTaskExitError();
 80155d8:	f7ff ff4a 	bl	8015470 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80155dc:	2300      	movs	r3, #0
}
 80155de:	4618      	mov	r0, r3
 80155e0:	3710      	adds	r7, #16
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd80      	pop	{r7, pc}
 80155e6:	bf00      	nop
 80155e8:	e000e400 	.word	0xe000e400
 80155ec:	20007c1c 	.word	0x20007c1c
 80155f0:	20007c20 	.word	0x20007c20
 80155f4:	e000ed20 	.word	0xe000ed20
 80155f8:	20000238 	.word	0x20000238

080155fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80155fc:	b480      	push	{r7}
 80155fe:	b083      	sub	sp, #12
 8015600:	af00      	add	r7, sp, #0
	__asm volatile
 8015602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015606:	f383 8811 	msr	BASEPRI, r3
 801560a:	f3bf 8f6f 	isb	sy
 801560e:	f3bf 8f4f 	dsb	sy
 8015612:	607b      	str	r3, [r7, #4]
}
 8015614:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015616:	4b0f      	ldr	r3, [pc, #60]	; (8015654 <vPortEnterCritical+0x58>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	3301      	adds	r3, #1
 801561c:	4a0d      	ldr	r2, [pc, #52]	; (8015654 <vPortEnterCritical+0x58>)
 801561e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015620:	4b0c      	ldr	r3, [pc, #48]	; (8015654 <vPortEnterCritical+0x58>)
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	2b01      	cmp	r3, #1
 8015626:	d10f      	bne.n	8015648 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015628:	4b0b      	ldr	r3, [pc, #44]	; (8015658 <vPortEnterCritical+0x5c>)
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	b2db      	uxtb	r3, r3
 801562e:	2b00      	cmp	r3, #0
 8015630:	d00a      	beq.n	8015648 <vPortEnterCritical+0x4c>
	__asm volatile
 8015632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015636:	f383 8811 	msr	BASEPRI, r3
 801563a:	f3bf 8f6f 	isb	sy
 801563e:	f3bf 8f4f 	dsb	sy
 8015642:	603b      	str	r3, [r7, #0]
}
 8015644:	bf00      	nop
 8015646:	e7fe      	b.n	8015646 <vPortEnterCritical+0x4a>
	}
}
 8015648:	bf00      	nop
 801564a:	370c      	adds	r7, #12
 801564c:	46bd      	mov	sp, r7
 801564e:	bc80      	pop	{r7}
 8015650:	4770      	bx	lr
 8015652:	bf00      	nop
 8015654:	20000238 	.word	0x20000238
 8015658:	e000ed04 	.word	0xe000ed04

0801565c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801565c:	b480      	push	{r7}
 801565e:	b083      	sub	sp, #12
 8015660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015662:	4b11      	ldr	r3, [pc, #68]	; (80156a8 <vPortExitCritical+0x4c>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d10a      	bne.n	8015680 <vPortExitCritical+0x24>
	__asm volatile
 801566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801566e:	f383 8811 	msr	BASEPRI, r3
 8015672:	f3bf 8f6f 	isb	sy
 8015676:	f3bf 8f4f 	dsb	sy
 801567a:	607b      	str	r3, [r7, #4]
}
 801567c:	bf00      	nop
 801567e:	e7fe      	b.n	801567e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015680:	4b09      	ldr	r3, [pc, #36]	; (80156a8 <vPortExitCritical+0x4c>)
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	3b01      	subs	r3, #1
 8015686:	4a08      	ldr	r2, [pc, #32]	; (80156a8 <vPortExitCritical+0x4c>)
 8015688:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801568a:	4b07      	ldr	r3, [pc, #28]	; (80156a8 <vPortExitCritical+0x4c>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d105      	bne.n	801569e <vPortExitCritical+0x42>
 8015692:	2300      	movs	r3, #0
 8015694:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	f383 8811 	msr	BASEPRI, r3
}
 801569c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801569e:	bf00      	nop
 80156a0:	370c      	adds	r7, #12
 80156a2:	46bd      	mov	sp, r7
 80156a4:	bc80      	pop	{r7}
 80156a6:	4770      	bx	lr
 80156a8:	20000238 	.word	0x20000238
 80156ac:	00000000 	.word	0x00000000

080156b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80156b0:	f3ef 8009 	mrs	r0, PSP
 80156b4:	f3bf 8f6f 	isb	sy
 80156b8:	4b0d      	ldr	r3, [pc, #52]	; (80156f0 <pxCurrentTCBConst>)
 80156ba:	681a      	ldr	r2, [r3, #0]
 80156bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80156c0:	6010      	str	r0, [r2, #0]
 80156c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80156c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80156ca:	f380 8811 	msr	BASEPRI, r0
 80156ce:	f7ff fa15 	bl	8014afc <vTaskSwitchContext>
 80156d2:	f04f 0000 	mov.w	r0, #0
 80156d6:	f380 8811 	msr	BASEPRI, r0
 80156da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80156de:	6819      	ldr	r1, [r3, #0]
 80156e0:	6808      	ldr	r0, [r1, #0]
 80156e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80156e6:	f380 8809 	msr	PSP, r0
 80156ea:	f3bf 8f6f 	isb	sy
 80156ee:	4770      	bx	lr

080156f0 <pxCurrentTCBConst>:
 80156f0:	20007af0 	.word	0x20007af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80156f4:	bf00      	nop
 80156f6:	bf00      	nop

080156f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b082      	sub	sp, #8
 80156fc:	af00      	add	r7, sp, #0
	__asm volatile
 80156fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015702:	f383 8811 	msr	BASEPRI, r3
 8015706:	f3bf 8f6f 	isb	sy
 801570a:	f3bf 8f4f 	dsb	sy
 801570e:	607b      	str	r3, [r7, #4]
}
 8015710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015712:	f7ff f935 	bl	8014980 <xTaskIncrementTick>
 8015716:	4603      	mov	r3, r0
 8015718:	2b00      	cmp	r3, #0
 801571a:	d003      	beq.n	8015724 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801571c:	4b06      	ldr	r3, [pc, #24]	; (8015738 <SysTick_Handler+0x40>)
 801571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015722:	601a      	str	r2, [r3, #0]
 8015724:	2300      	movs	r3, #0
 8015726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015728:	683b      	ldr	r3, [r7, #0]
 801572a:	f383 8811 	msr	BASEPRI, r3
}
 801572e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015730:	bf00      	nop
 8015732:	3708      	adds	r7, #8
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}
 8015738:	e000ed04 	.word	0xe000ed04

0801573c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801573c:	b480      	push	{r7}
 801573e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015740:	4b0a      	ldr	r3, [pc, #40]	; (801576c <vPortSetupTimerInterrupt+0x30>)
 8015742:	2200      	movs	r2, #0
 8015744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015746:	4b0a      	ldr	r3, [pc, #40]	; (8015770 <vPortSetupTimerInterrupt+0x34>)
 8015748:	2200      	movs	r2, #0
 801574a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801574c:	4b09      	ldr	r3, [pc, #36]	; (8015774 <vPortSetupTimerInterrupt+0x38>)
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	4a09      	ldr	r2, [pc, #36]	; (8015778 <vPortSetupTimerInterrupt+0x3c>)
 8015752:	fba2 2303 	umull	r2, r3, r2, r3
 8015756:	099b      	lsrs	r3, r3, #6
 8015758:	4a08      	ldr	r2, [pc, #32]	; (801577c <vPortSetupTimerInterrupt+0x40>)
 801575a:	3b01      	subs	r3, #1
 801575c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801575e:	4b03      	ldr	r3, [pc, #12]	; (801576c <vPortSetupTimerInterrupt+0x30>)
 8015760:	2207      	movs	r2, #7
 8015762:	601a      	str	r2, [r3, #0]
}
 8015764:	bf00      	nop
 8015766:	46bd      	mov	sp, r7
 8015768:	bc80      	pop	{r7}
 801576a:	4770      	bx	lr
 801576c:	e000e010 	.word	0xe000e010
 8015770:	e000e018 	.word	0xe000e018
 8015774:	2000020c 	.word	0x2000020c
 8015778:	10624dd3 	.word	0x10624dd3
 801577c:	e000e014 	.word	0xe000e014

08015780 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015780:	b480      	push	{r7}
 8015782:	b085      	sub	sp, #20
 8015784:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015786:	f3ef 8305 	mrs	r3, IPSR
 801578a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	2b0f      	cmp	r3, #15
 8015790:	d914      	bls.n	80157bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015792:	4a16      	ldr	r2, [pc, #88]	; (80157ec <vPortValidateInterruptPriority+0x6c>)
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	4413      	add	r3, r2
 8015798:	781b      	ldrb	r3, [r3, #0]
 801579a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801579c:	4b14      	ldr	r3, [pc, #80]	; (80157f0 <vPortValidateInterruptPriority+0x70>)
 801579e:	781b      	ldrb	r3, [r3, #0]
 80157a0:	7afa      	ldrb	r2, [r7, #11]
 80157a2:	429a      	cmp	r2, r3
 80157a4:	d20a      	bcs.n	80157bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80157a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157aa:	f383 8811 	msr	BASEPRI, r3
 80157ae:	f3bf 8f6f 	isb	sy
 80157b2:	f3bf 8f4f 	dsb	sy
 80157b6:	607b      	str	r3, [r7, #4]
}
 80157b8:	bf00      	nop
 80157ba:	e7fe      	b.n	80157ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80157bc:	4b0d      	ldr	r3, [pc, #52]	; (80157f4 <vPortValidateInterruptPriority+0x74>)
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80157c4:	4b0c      	ldr	r3, [pc, #48]	; (80157f8 <vPortValidateInterruptPriority+0x78>)
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	429a      	cmp	r2, r3
 80157ca:	d90a      	bls.n	80157e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80157cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157d0:	f383 8811 	msr	BASEPRI, r3
 80157d4:	f3bf 8f6f 	isb	sy
 80157d8:	f3bf 8f4f 	dsb	sy
 80157dc:	603b      	str	r3, [r7, #0]
}
 80157de:	bf00      	nop
 80157e0:	e7fe      	b.n	80157e0 <vPortValidateInterruptPriority+0x60>
	}
 80157e2:	bf00      	nop
 80157e4:	3714      	adds	r7, #20
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bc80      	pop	{r7}
 80157ea:	4770      	bx	lr
 80157ec:	e000e3f0 	.word	0xe000e3f0
 80157f0:	20007c1c 	.word	0x20007c1c
 80157f4:	e000ed0c 	.word	0xe000ed0c
 80157f8:	20007c20 	.word	0x20007c20

080157fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b08a      	sub	sp, #40	; 0x28
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015804:	2300      	movs	r3, #0
 8015806:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015808:	f7ff f810 	bl	801482c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801580c:	4b58      	ldr	r3, [pc, #352]	; (8015970 <pvPortMalloc+0x174>)
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d101      	bne.n	8015818 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015814:	f000 f910 	bl	8015a38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015818:	4b56      	ldr	r3, [pc, #344]	; (8015974 <pvPortMalloc+0x178>)
 801581a:	681a      	ldr	r2, [r3, #0]
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	4013      	ands	r3, r2
 8015820:	2b00      	cmp	r3, #0
 8015822:	f040 808e 	bne.w	8015942 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d01d      	beq.n	8015868 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801582c:	2208      	movs	r2, #8
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	4413      	add	r3, r2
 8015832:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f003 0307 	and.w	r3, r3, #7
 801583a:	2b00      	cmp	r3, #0
 801583c:	d014      	beq.n	8015868 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	f023 0307 	bic.w	r3, r3, #7
 8015844:	3308      	adds	r3, #8
 8015846:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	f003 0307 	and.w	r3, r3, #7
 801584e:	2b00      	cmp	r3, #0
 8015850:	d00a      	beq.n	8015868 <pvPortMalloc+0x6c>
	__asm volatile
 8015852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015856:	f383 8811 	msr	BASEPRI, r3
 801585a:	f3bf 8f6f 	isb	sy
 801585e:	f3bf 8f4f 	dsb	sy
 8015862:	617b      	str	r3, [r7, #20]
}
 8015864:	bf00      	nop
 8015866:	e7fe      	b.n	8015866 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d069      	beq.n	8015942 <pvPortMalloc+0x146>
 801586e:	4b42      	ldr	r3, [pc, #264]	; (8015978 <pvPortMalloc+0x17c>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	429a      	cmp	r2, r3
 8015876:	d864      	bhi.n	8015942 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015878:	4b40      	ldr	r3, [pc, #256]	; (801597c <pvPortMalloc+0x180>)
 801587a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801587c:	4b3f      	ldr	r3, [pc, #252]	; (801597c <pvPortMalloc+0x180>)
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015882:	e004      	b.n	801588e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015886:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015890:	685b      	ldr	r3, [r3, #4]
 8015892:	687a      	ldr	r2, [r7, #4]
 8015894:	429a      	cmp	r2, r3
 8015896:	d903      	bls.n	80158a0 <pvPortMalloc+0xa4>
 8015898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d1f1      	bne.n	8015884 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80158a0:	4b33      	ldr	r3, [pc, #204]	; (8015970 <pvPortMalloc+0x174>)
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d04b      	beq.n	8015942 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80158aa:	6a3b      	ldr	r3, [r7, #32]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	2208      	movs	r2, #8
 80158b0:	4413      	add	r3, r2
 80158b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80158b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b6:	681a      	ldr	r2, [r3, #0]
 80158b8:	6a3b      	ldr	r3, [r7, #32]
 80158ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80158bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158be:	685a      	ldr	r2, [r3, #4]
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	1ad2      	subs	r2, r2, r3
 80158c4:	2308      	movs	r3, #8
 80158c6:	005b      	lsls	r3, r3, #1
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d91f      	bls.n	801590c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80158cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	4413      	add	r3, r2
 80158d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80158d4:	69bb      	ldr	r3, [r7, #24]
 80158d6:	f003 0307 	and.w	r3, r3, #7
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d00a      	beq.n	80158f4 <pvPortMalloc+0xf8>
	__asm volatile
 80158de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158e2:	f383 8811 	msr	BASEPRI, r3
 80158e6:	f3bf 8f6f 	isb	sy
 80158ea:	f3bf 8f4f 	dsb	sy
 80158ee:	613b      	str	r3, [r7, #16]
}
 80158f0:	bf00      	nop
 80158f2:	e7fe      	b.n	80158f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80158f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f6:	685a      	ldr	r2, [r3, #4]
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	1ad2      	subs	r2, r2, r3
 80158fc:	69bb      	ldr	r3, [r7, #24]
 80158fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015902:	687a      	ldr	r2, [r7, #4]
 8015904:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015906:	69b8      	ldr	r0, [r7, #24]
 8015908:	f000 f8f8 	bl	8015afc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801590c:	4b1a      	ldr	r3, [pc, #104]	; (8015978 <pvPortMalloc+0x17c>)
 801590e:	681a      	ldr	r2, [r3, #0]
 8015910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015912:	685b      	ldr	r3, [r3, #4]
 8015914:	1ad3      	subs	r3, r2, r3
 8015916:	4a18      	ldr	r2, [pc, #96]	; (8015978 <pvPortMalloc+0x17c>)
 8015918:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801591a:	4b17      	ldr	r3, [pc, #92]	; (8015978 <pvPortMalloc+0x17c>)
 801591c:	681a      	ldr	r2, [r3, #0]
 801591e:	4b18      	ldr	r3, [pc, #96]	; (8015980 <pvPortMalloc+0x184>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	429a      	cmp	r2, r3
 8015924:	d203      	bcs.n	801592e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015926:	4b14      	ldr	r3, [pc, #80]	; (8015978 <pvPortMalloc+0x17c>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	4a15      	ldr	r2, [pc, #84]	; (8015980 <pvPortMalloc+0x184>)
 801592c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015930:	685a      	ldr	r2, [r3, #4]
 8015932:	4b10      	ldr	r3, [pc, #64]	; (8015974 <pvPortMalloc+0x178>)
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	431a      	orrs	r2, r3
 8015938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801593a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801593e:	2200      	movs	r2, #0
 8015940:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015942:	f7fe ff81 	bl	8014848 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015946:	69fb      	ldr	r3, [r7, #28]
 8015948:	f003 0307 	and.w	r3, r3, #7
 801594c:	2b00      	cmp	r3, #0
 801594e:	d00a      	beq.n	8015966 <pvPortMalloc+0x16a>
	__asm volatile
 8015950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015954:	f383 8811 	msr	BASEPRI, r3
 8015958:	f3bf 8f6f 	isb	sy
 801595c:	f3bf 8f4f 	dsb	sy
 8015960:	60fb      	str	r3, [r7, #12]
}
 8015962:	bf00      	nop
 8015964:	e7fe      	b.n	8015964 <pvPortMalloc+0x168>
	return pvReturn;
 8015966:	69fb      	ldr	r3, [r7, #28]
}
 8015968:	4618      	mov	r0, r3
 801596a:	3728      	adds	r7, #40	; 0x28
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}
 8015970:	2000b82c 	.word	0x2000b82c
 8015974:	2000b838 	.word	0x2000b838
 8015978:	2000b830 	.word	0x2000b830
 801597c:	2000b824 	.word	0x2000b824
 8015980:	2000b834 	.word	0x2000b834

08015984 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b086      	sub	sp, #24
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d048      	beq.n	8015a28 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015996:	2308      	movs	r3, #8
 8015998:	425b      	negs	r3, r3
 801599a:	697a      	ldr	r2, [r7, #20]
 801599c:	4413      	add	r3, r2
 801599e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	685a      	ldr	r2, [r3, #4]
 80159a8:	4b21      	ldr	r3, [pc, #132]	; (8015a30 <vPortFree+0xac>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	4013      	ands	r3, r2
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d10a      	bne.n	80159c8 <vPortFree+0x44>
	__asm volatile
 80159b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159b6:	f383 8811 	msr	BASEPRI, r3
 80159ba:	f3bf 8f6f 	isb	sy
 80159be:	f3bf 8f4f 	dsb	sy
 80159c2:	60fb      	str	r3, [r7, #12]
}
 80159c4:	bf00      	nop
 80159c6:	e7fe      	b.n	80159c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80159c8:	693b      	ldr	r3, [r7, #16]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d00a      	beq.n	80159e6 <vPortFree+0x62>
	__asm volatile
 80159d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159d4:	f383 8811 	msr	BASEPRI, r3
 80159d8:	f3bf 8f6f 	isb	sy
 80159dc:	f3bf 8f4f 	dsb	sy
 80159e0:	60bb      	str	r3, [r7, #8]
}
 80159e2:	bf00      	nop
 80159e4:	e7fe      	b.n	80159e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80159e6:	693b      	ldr	r3, [r7, #16]
 80159e8:	685a      	ldr	r2, [r3, #4]
 80159ea:	4b11      	ldr	r3, [pc, #68]	; (8015a30 <vPortFree+0xac>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	4013      	ands	r3, r2
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d019      	beq.n	8015a28 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80159f4:	693b      	ldr	r3, [r7, #16]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d115      	bne.n	8015a28 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80159fc:	693b      	ldr	r3, [r7, #16]
 80159fe:	685a      	ldr	r2, [r3, #4]
 8015a00:	4b0b      	ldr	r3, [pc, #44]	; (8015a30 <vPortFree+0xac>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	43db      	mvns	r3, r3
 8015a06:	401a      	ands	r2, r3
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015a0c:	f7fe ff0e 	bl	801482c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015a10:	693b      	ldr	r3, [r7, #16]
 8015a12:	685a      	ldr	r2, [r3, #4]
 8015a14:	4b07      	ldr	r3, [pc, #28]	; (8015a34 <vPortFree+0xb0>)
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	4413      	add	r3, r2
 8015a1a:	4a06      	ldr	r2, [pc, #24]	; (8015a34 <vPortFree+0xb0>)
 8015a1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015a1e:	6938      	ldr	r0, [r7, #16]
 8015a20:	f000 f86c 	bl	8015afc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015a24:	f7fe ff10 	bl	8014848 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015a28:	bf00      	nop
 8015a2a:	3718      	adds	r7, #24
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}
 8015a30:	2000b838 	.word	0x2000b838
 8015a34:	2000b830 	.word	0x2000b830

08015a38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015a38:	b480      	push	{r7}
 8015a3a:	b085      	sub	sp, #20
 8015a3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015a3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8015a42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015a44:	4b27      	ldr	r3, [pc, #156]	; (8015ae4 <prvHeapInit+0xac>)
 8015a46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	f003 0307 	and.w	r3, r3, #7
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d00c      	beq.n	8015a6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	3307      	adds	r3, #7
 8015a56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	f023 0307 	bic.w	r3, r3, #7
 8015a5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015a60:	68ba      	ldr	r2, [r7, #8]
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	1ad3      	subs	r3, r2, r3
 8015a66:	4a1f      	ldr	r2, [pc, #124]	; (8015ae4 <prvHeapInit+0xac>)
 8015a68:	4413      	add	r3, r2
 8015a6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015a70:	4a1d      	ldr	r2, [pc, #116]	; (8015ae8 <prvHeapInit+0xb0>)
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015a76:	4b1c      	ldr	r3, [pc, #112]	; (8015ae8 <prvHeapInit+0xb0>)
 8015a78:	2200      	movs	r2, #0
 8015a7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	68ba      	ldr	r2, [r7, #8]
 8015a80:	4413      	add	r3, r2
 8015a82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015a84:	2208      	movs	r2, #8
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	1a9b      	subs	r3, r3, r2
 8015a8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	f023 0307 	bic.w	r3, r3, #7
 8015a92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	4a15      	ldr	r2, [pc, #84]	; (8015aec <prvHeapInit+0xb4>)
 8015a98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015a9a:	4b14      	ldr	r3, [pc, #80]	; (8015aec <prvHeapInit+0xb4>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015aa2:	4b12      	ldr	r3, [pc, #72]	; (8015aec <prvHeapInit+0xb4>)
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	68fa      	ldr	r2, [r7, #12]
 8015ab2:	1ad2      	subs	r2, r2, r3
 8015ab4:	683b      	ldr	r3, [r7, #0]
 8015ab6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015ab8:	4b0c      	ldr	r3, [pc, #48]	; (8015aec <prvHeapInit+0xb4>)
 8015aba:	681a      	ldr	r2, [r3, #0]
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015ac0:	683b      	ldr	r3, [r7, #0]
 8015ac2:	685b      	ldr	r3, [r3, #4]
 8015ac4:	4a0a      	ldr	r2, [pc, #40]	; (8015af0 <prvHeapInit+0xb8>)
 8015ac6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	685b      	ldr	r3, [r3, #4]
 8015acc:	4a09      	ldr	r2, [pc, #36]	; (8015af4 <prvHeapInit+0xbc>)
 8015ace:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015ad0:	4b09      	ldr	r3, [pc, #36]	; (8015af8 <prvHeapInit+0xc0>)
 8015ad2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015ad6:	601a      	str	r2, [r3, #0]
}
 8015ad8:	bf00      	nop
 8015ada:	3714      	adds	r7, #20
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bc80      	pop	{r7}
 8015ae0:	4770      	bx	lr
 8015ae2:	bf00      	nop
 8015ae4:	20007c24 	.word	0x20007c24
 8015ae8:	2000b824 	.word	0x2000b824
 8015aec:	2000b82c 	.word	0x2000b82c
 8015af0:	2000b834 	.word	0x2000b834
 8015af4:	2000b830 	.word	0x2000b830
 8015af8:	2000b838 	.word	0x2000b838

08015afc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015afc:	b480      	push	{r7}
 8015afe:	b085      	sub	sp, #20
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015b04:	4b27      	ldr	r3, [pc, #156]	; (8015ba4 <prvInsertBlockIntoFreeList+0xa8>)
 8015b06:	60fb      	str	r3, [r7, #12]
 8015b08:	e002      	b.n	8015b10 <prvInsertBlockIntoFreeList+0x14>
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	60fb      	str	r3, [r7, #12]
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	687a      	ldr	r2, [r7, #4]
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d8f7      	bhi.n	8015b0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	685b      	ldr	r3, [r3, #4]
 8015b22:	68ba      	ldr	r2, [r7, #8]
 8015b24:	4413      	add	r3, r2
 8015b26:	687a      	ldr	r2, [r7, #4]
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	d108      	bne.n	8015b3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	685a      	ldr	r2, [r3, #4]
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	685b      	ldr	r3, [r3, #4]
 8015b34:	441a      	add	r2, r3
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	685b      	ldr	r3, [r3, #4]
 8015b46:	68ba      	ldr	r2, [r7, #8]
 8015b48:	441a      	add	r2, r3
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	d118      	bne.n	8015b84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	681a      	ldr	r2, [r3, #0]
 8015b56:	4b14      	ldr	r3, [pc, #80]	; (8015ba8 <prvInsertBlockIntoFreeList+0xac>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	429a      	cmp	r2, r3
 8015b5c:	d00d      	beq.n	8015b7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	685a      	ldr	r2, [r3, #4]
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	685b      	ldr	r3, [r3, #4]
 8015b68:	441a      	add	r2, r3
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	681a      	ldr	r2, [r3, #0]
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	601a      	str	r2, [r3, #0]
 8015b78:	e008      	b.n	8015b8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015b7a:	4b0b      	ldr	r3, [pc, #44]	; (8015ba8 <prvInsertBlockIntoFreeList+0xac>)
 8015b7c:	681a      	ldr	r2, [r3, #0]
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	601a      	str	r2, [r3, #0]
 8015b82:	e003      	b.n	8015b8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	681a      	ldr	r2, [r3, #0]
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015b8c:	68fa      	ldr	r2, [r7, #12]
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	429a      	cmp	r2, r3
 8015b92:	d002      	beq.n	8015b9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	687a      	ldr	r2, [r7, #4]
 8015b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015b9a:	bf00      	nop
 8015b9c:	3714      	adds	r7, #20
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bc80      	pop	{r7}
 8015ba2:	4770      	bx	lr
 8015ba4:	2000b824 	.word	0x2000b824
 8015ba8:	2000b82c 	.word	0x2000b82c

08015bac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8015bb0:	2201      	movs	r2, #1
 8015bb2:	490e      	ldr	r1, [pc, #56]	; (8015bec <MX_USB_HOST_Init+0x40>)
 8015bb4:	480e      	ldr	r0, [pc, #56]	; (8015bf0 <MX_USB_HOST_Init+0x44>)
 8015bb6:	f7f8 fc95 	bl	800e4e4 <USBH_Init>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d001      	beq.n	8015bc4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8015bc0:	f7ee fdf6 	bl	80047b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8015bc4:	490b      	ldr	r1, [pc, #44]	; (8015bf4 <MX_USB_HOST_Init+0x48>)
 8015bc6:	480a      	ldr	r0, [pc, #40]	; (8015bf0 <MX_USB_HOST_Init+0x44>)
 8015bc8:	f7f8 fd38 	bl	800e63c <USBH_RegisterClass>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d001      	beq.n	8015bd6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8015bd2:	f7ee fded 	bl	80047b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8015bd6:	4806      	ldr	r0, [pc, #24]	; (8015bf0 <MX_USB_HOST_Init+0x44>)
 8015bd8:	f7f8 fdba 	bl	800e750 <USBH_Start>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d001      	beq.n	8015be6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8015be2:	f7ee fde5 	bl	80047b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8015be6:	bf00      	nop
 8015be8:	bd80      	pop	{r7, pc}
 8015bea:	bf00      	nop
 8015bec:	08015bf9 	.word	0x08015bf9
 8015bf0:	20011178 	.word	0x20011178
 8015bf4:	20000218 	.word	0x20000218

08015bf8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b082      	sub	sp, #8
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
 8015c00:	460b      	mov	r3, r1
 8015c02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8015c04:	78fb      	ldrb	r3, [r7, #3]
 8015c06:	3b01      	subs	r3, #1
 8015c08:	2b04      	cmp	r3, #4
 8015c0a:	d828      	bhi.n	8015c5e <USBH_UserProcess+0x66>
 8015c0c:	a201      	add	r2, pc, #4	; (adr r2, 8015c14 <USBH_UserProcess+0x1c>)
 8015c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c12:	bf00      	nop
 8015c14:	08015c5f 	.word	0x08015c5f
 8015c18:	08015c3b 	.word	0x08015c3b
 8015c1c:	08015c5f 	.word	0x08015c5f
 8015c20:	08015c57 	.word	0x08015c57
 8015c24:	08015c29 	.word	0x08015c29
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8015c28:	4b0f      	ldr	r3, [pc, #60]	; (8015c68 <USBH_UserProcess+0x70>)
 8015c2a:	2203      	movs	r2, #3
 8015c2c:	701a      	strb	r2, [r3, #0]
  usb_good = 0;
 8015c2e:	4b0f      	ldr	r3, [pc, #60]	; (8015c6c <USBH_UserProcess+0x74>)
 8015c30:	2200      	movs	r2, #0
 8015c32:	601a      	str	r2, [r3, #0]
  Unmount_USB();
 8015c34:	f7eb f9aa 	bl	8000f8c <Unmount_USB>
  break;
 8015c38:	e012      	b.n	8015c60 <USBH_UserProcess+0x68>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8015c3a:	4b0b      	ldr	r3, [pc, #44]	; (8015c68 <USBH_UserProcess+0x70>)
 8015c3c:	2202      	movs	r2, #2
 8015c3e:	701a      	strb	r2, [r3, #0]
	Mount_USB();
 8015c40:	f7eb f990 	bl	8000f64 <Mount_USB>
	Check_USB_Details();
 8015c44:	f7eb faa6 	bl	8001194 <Check_USB_Details>
	Scan_USB("/");
 8015c48:	4809      	ldr	r0, [pc, #36]	; (8015c70 <USBH_UserProcess+0x78>)
 8015c4a:	f7eb f9b1 	bl	8000fb0 <Scan_USB>

  usb_good = 1;
 8015c4e:	4b07      	ldr	r3, [pc, #28]	; (8015c6c <USBH_UserProcess+0x74>)
 8015c50:	2201      	movs	r2, #1
 8015c52:	601a      	str	r2, [r3, #0]

  break;
 8015c54:	e004      	b.n	8015c60 <USBH_UserProcess+0x68>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8015c56:	4b04      	ldr	r3, [pc, #16]	; (8015c68 <USBH_UserProcess+0x70>)
 8015c58:	2201      	movs	r2, #1
 8015c5a:	701a      	strb	r2, [r3, #0]
  break;
 8015c5c:	e000      	b.n	8015c60 <USBH_UserProcess+0x68>

  default:
  break;
 8015c5e:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8015c60:	bf00      	nop
 8015c62:	3708      	adds	r7, #8
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}
 8015c68:	2000b83c 	.word	0x2000b83c
 8015c6c:	2000b840 	.word	0x2000b840
 8015c70:	0801acac 	.word	0x0801acac

08015c74 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b08a      	sub	sp, #40	; 0x28
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015c7c:	f107 0314 	add.w	r3, r7, #20
 8015c80:	2200      	movs	r2, #0
 8015c82:	601a      	str	r2, [r3, #0]
 8015c84:	605a      	str	r2, [r3, #4]
 8015c86:	609a      	str	r2, [r3, #8]
 8015c88:	60da      	str	r2, [r3, #12]
 8015c8a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015c94:	d147      	bne.n	8015d26 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015c96:	2300      	movs	r3, #0
 8015c98:	613b      	str	r3, [r7, #16]
 8015c9a:	4b25      	ldr	r3, [pc, #148]	; (8015d30 <HAL_HCD_MspInit+0xbc>)
 8015c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c9e:	4a24      	ldr	r2, [pc, #144]	; (8015d30 <HAL_HCD_MspInit+0xbc>)
 8015ca0:	f043 0301 	orr.w	r3, r3, #1
 8015ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8015ca6:	4b22      	ldr	r3, [pc, #136]	; (8015d30 <HAL_HCD_MspInit+0xbc>)
 8015ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015caa:	f003 0301 	and.w	r3, r3, #1
 8015cae:	613b      	str	r3, [r7, #16]
 8015cb0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8015cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015cb8:	2300      	movs	r3, #0
 8015cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015cc0:	f107 0314 	add.w	r3, r7, #20
 8015cc4:	4619      	mov	r1, r3
 8015cc6:	481b      	ldr	r0, [pc, #108]	; (8015d34 <HAL_HCD_MspInit+0xc0>)
 8015cc8:	f7f1 fe5a 	bl	8007980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015ccc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015cd2:	2302      	movs	r3, #2
 8015cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015cda:	2303      	movs	r3, #3
 8015cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015cde:	230a      	movs	r3, #10
 8015ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015ce2:	f107 0314 	add.w	r3, r7, #20
 8015ce6:	4619      	mov	r1, r3
 8015ce8:	4812      	ldr	r0, [pc, #72]	; (8015d34 <HAL_HCD_MspInit+0xc0>)
 8015cea:	f7f1 fe49 	bl	8007980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015cee:	4b10      	ldr	r3, [pc, #64]	; (8015d30 <HAL_HCD_MspInit+0xbc>)
 8015cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cf2:	4a0f      	ldr	r2, [pc, #60]	; (8015d30 <HAL_HCD_MspInit+0xbc>)
 8015cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015cf8:	6353      	str	r3, [r2, #52]	; 0x34
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	60fb      	str	r3, [r7, #12]
 8015cfe:	4b0c      	ldr	r3, [pc, #48]	; (8015d30 <HAL_HCD_MspInit+0xbc>)
 8015d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d02:	4a0b      	ldr	r2, [pc, #44]	; (8015d30 <HAL_HCD_MspInit+0xbc>)
 8015d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015d08:	6453      	str	r3, [r2, #68]	; 0x44
 8015d0a:	4b09      	ldr	r3, [pc, #36]	; (8015d30 <HAL_HCD_MspInit+0xbc>)
 8015d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015d12:	60fb      	str	r3, [r7, #12]
 8015d14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015d16:	2200      	movs	r2, #0
 8015d18:	2105      	movs	r1, #5
 8015d1a:	2043      	movs	r0, #67	; 0x43
 8015d1c:	f7f1 fa99 	bl	8007252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015d20:	2043      	movs	r0, #67	; 0x43
 8015d22:	f7f1 fab2 	bl	800728a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015d26:	bf00      	nop
 8015d28:	3728      	adds	r7, #40	; 0x28
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}
 8015d2e:	bf00      	nop
 8015d30:	40023800 	.word	0x40023800
 8015d34:	40020000 	.word	0x40020000

08015d38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b082      	sub	sp, #8
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015d46:	4618      	mov	r0, r3
 8015d48:	f7f9 f882 	bl	800ee50 <USBH_LL_IncTimer>
}
 8015d4c:	bf00      	nop
 8015d4e:	3708      	adds	r7, #8
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bd80      	pop	{r7, pc}

08015d54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b082      	sub	sp, #8
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015d62:	4618      	mov	r0, r3
 8015d64:	f7f9 f8c5 	bl	800eef2 <USBH_LL_Connect>
}
 8015d68:	bf00      	nop
 8015d6a:	3708      	adds	r7, #8
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	bd80      	pop	{r7, pc}

08015d70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b082      	sub	sp, #8
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7f9 f8da 	bl	800ef38 <USBH_LL_Disconnect>
}
 8015d84:	bf00      	nop
 8015d86:	3708      	adds	r7, #8
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	bd80      	pop	{r7, pc}

08015d8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b082      	sub	sp, #8
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
 8015d94:	460b      	mov	r3, r1
 8015d96:	70fb      	strb	r3, [r7, #3]
 8015d98:	4613      	mov	r3, r2
 8015d9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7f9 f90f 	bl	800efc6 <USBH_LL_NotifyURBChange>
#endif
}
 8015da8:	bf00      	nop
 8015daa:	3708      	adds	r7, #8
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}

08015db0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b082      	sub	sp, #8
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f7f9 f870 	bl	800eea4 <USBH_LL_PortEnabled>
}
 8015dc4:	bf00      	nop
 8015dc6:	3708      	adds	r7, #8
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}

08015dcc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b082      	sub	sp, #8
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f7f9 f87c 	bl	800eed8 <USBH_LL_PortDisabled>
}
 8015de0:	bf00      	nop
 8015de2:	3708      	adds	r7, #8
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}

08015de8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b082      	sub	sp, #8
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8015df6:	2b01      	cmp	r3, #1
 8015df8:	d12a      	bne.n	8015e50 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8015dfa:	4a18      	ldr	r2, [pc, #96]	; (8015e5c <USBH_LL_Init+0x74>)
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	4a15      	ldr	r2, [pc, #84]	; (8015e5c <USBH_LL_Init+0x74>)
 8015e06:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015e0a:	4b14      	ldr	r3, [pc, #80]	; (8015e5c <USBH_LL_Init+0x74>)
 8015e0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015e10:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015e12:	4b12      	ldr	r3, [pc, #72]	; (8015e5c <USBH_LL_Init+0x74>)
 8015e14:	2208      	movs	r2, #8
 8015e16:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015e18:	4b10      	ldr	r3, [pc, #64]	; (8015e5c <USBH_LL_Init+0x74>)
 8015e1a:	2201      	movs	r2, #1
 8015e1c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015e1e:	4b0f      	ldr	r3, [pc, #60]	; (8015e5c <USBH_LL_Init+0x74>)
 8015e20:	2200      	movs	r2, #0
 8015e22:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015e24:	4b0d      	ldr	r3, [pc, #52]	; (8015e5c <USBH_LL_Init+0x74>)
 8015e26:	2202      	movs	r2, #2
 8015e28:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015e2a:	4b0c      	ldr	r3, [pc, #48]	; (8015e5c <USBH_LL_Init+0x74>)
 8015e2c:	2200      	movs	r2, #0
 8015e2e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015e30:	480a      	ldr	r0, [pc, #40]	; (8015e5c <USBH_LL_Init+0x74>)
 8015e32:	f7f1 ff8b 	bl	8007d4c <HAL_HCD_Init>
 8015e36:	4603      	mov	r3, r0
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d001      	beq.n	8015e40 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8015e3c:	f7ee fcb8 	bl	80047b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015e40:	4806      	ldr	r0, [pc, #24]	; (8015e5c <USBH_LL_Init+0x74>)
 8015e42:	f7f2 fb65 	bl	8008510 <HAL_HCD_GetCurrentFrame>
 8015e46:	4603      	mov	r3, r0
 8015e48:	4619      	mov	r1, r3
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	f7f8 fff2 	bl	800ee34 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8015e50:	2300      	movs	r3, #0
}
 8015e52:	4618      	mov	r0, r3
 8015e54:	3708      	adds	r7, #8
 8015e56:	46bd      	mov	sp, r7
 8015e58:	bd80      	pop	{r7, pc}
 8015e5a:	bf00      	nop
 8015e5c:	20011554 	.word	0x20011554

08015e60 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b084      	sub	sp, #16
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e68:	2300      	movs	r3, #0
 8015e6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015e76:	4618      	mov	r0, r3
 8015e78:	f7f2 fad6 	bl	8008428 <HAL_HCD_Start>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015e80:	7bfb      	ldrb	r3, [r7, #15]
 8015e82:	4618      	mov	r0, r3
 8015e84:	f000 f98a 	bl	801619c <USBH_Get_USB_Status>
 8015e88:	4603      	mov	r3, r0
 8015e8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e8e:	4618      	mov	r0, r3
 8015e90:	3710      	adds	r7, #16
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}

08015e96 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8015e96:	b580      	push	{r7, lr}
 8015e98:	b084      	sub	sp, #16
 8015e9a:	af00      	add	r7, sp, #0
 8015e9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015eac:	4618      	mov	r0, r3
 8015eae:	f7f2 fade 	bl	800846e <HAL_HCD_Stop>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015eb6:	7bfb      	ldrb	r3, [r7, #15]
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f000 f96f 	bl	801619c <USBH_Get_USB_Status>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	3710      	adds	r7, #16
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}

08015ecc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b084      	sub	sp, #16
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8015ed4:	2301      	movs	r3, #1
 8015ed6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f7f2 fb24 	bl	800852c <HAL_HCD_GetCurrentSpeed>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	2b02      	cmp	r3, #2
 8015ee8:	d00c      	beq.n	8015f04 <USBH_LL_GetSpeed+0x38>
 8015eea:	2b02      	cmp	r3, #2
 8015eec:	d80d      	bhi.n	8015f0a <USBH_LL_GetSpeed+0x3e>
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d002      	beq.n	8015ef8 <USBH_LL_GetSpeed+0x2c>
 8015ef2:	2b01      	cmp	r3, #1
 8015ef4:	d003      	beq.n	8015efe <USBH_LL_GetSpeed+0x32>
 8015ef6:	e008      	b.n	8015f0a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015ef8:	2300      	movs	r3, #0
 8015efa:	73fb      	strb	r3, [r7, #15]
    break;
 8015efc:	e008      	b.n	8015f10 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8015efe:	2301      	movs	r3, #1
 8015f00:	73fb      	strb	r3, [r7, #15]
    break;
 8015f02:	e005      	b.n	8015f10 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015f04:	2302      	movs	r3, #2
 8015f06:	73fb      	strb	r3, [r7, #15]
    break;
 8015f08:	e002      	b.n	8015f10 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8015f0e:	bf00      	nop
  }
  return  speed;
 8015f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f12:	4618      	mov	r0, r3
 8015f14:	3710      	adds	r7, #16
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}

08015f1a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8015f1a:	b580      	push	{r7, lr}
 8015f1c:	b084      	sub	sp, #16
 8015f1e:	af00      	add	r7, sp, #0
 8015f20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f22:	2300      	movs	r3, #0
 8015f24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015f26:	2300      	movs	r3, #0
 8015f28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015f30:	4618      	mov	r0, r3
 8015f32:	f7f2 fab9 	bl	80084a8 <HAL_HCD_ResetPort>
 8015f36:	4603      	mov	r3, r0
 8015f38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015f3a:	7bfb      	ldrb	r3, [r7, #15]
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	f000 f92d 	bl	801619c <USBH_Get_USB_Status>
 8015f42:	4603      	mov	r3, r0
 8015f44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f46:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3710      	adds	r7, #16
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}

08015f50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b082      	sub	sp, #8
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
 8015f58:	460b      	mov	r3, r1
 8015f5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015f62:	78fa      	ldrb	r2, [r7, #3]
 8015f64:	4611      	mov	r1, r2
 8015f66:	4618      	mov	r0, r3
 8015f68:	f7f2 fabf 	bl	80084ea <HAL_HCD_HC_GetXferCount>
 8015f6c:	4603      	mov	r3, r0
}
 8015f6e:	4618      	mov	r0, r3
 8015f70:	3708      	adds	r7, #8
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}

08015f76 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015f76:	b590      	push	{r4, r7, lr}
 8015f78:	b089      	sub	sp, #36	; 0x24
 8015f7a:	af04      	add	r7, sp, #16
 8015f7c:	6078      	str	r0, [r7, #4]
 8015f7e:	4608      	mov	r0, r1
 8015f80:	4611      	mov	r1, r2
 8015f82:	461a      	mov	r2, r3
 8015f84:	4603      	mov	r3, r0
 8015f86:	70fb      	strb	r3, [r7, #3]
 8015f88:	460b      	mov	r3, r1
 8015f8a:	70bb      	strb	r3, [r7, #2]
 8015f8c:	4613      	mov	r3, r2
 8015f8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f90:	2300      	movs	r3, #0
 8015f92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015f94:	2300      	movs	r3, #0
 8015f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 8015f9e:	787c      	ldrb	r4, [r7, #1]
 8015fa0:	78ba      	ldrb	r2, [r7, #2]
 8015fa2:	78f9      	ldrb	r1, [r7, #3]
 8015fa4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015fa6:	9302      	str	r3, [sp, #8]
 8015fa8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015fac:	9301      	str	r3, [sp, #4]
 8015fae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015fb2:	9300      	str	r3, [sp, #0]
 8015fb4:	4623      	mov	r3, r4
 8015fb6:	f7f1 ff2b 	bl	8007e10 <HAL_HCD_HC_Init>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8015fbe:	7bfb      	ldrb	r3, [r7, #15]
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f000 f8eb 	bl	801619c <USBH_Get_USB_Status>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015fca:	7bbb      	ldrb	r3, [r7, #14]
}
 8015fcc:	4618      	mov	r0, r3
 8015fce:	3714      	adds	r7, #20
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	bd90      	pop	{r4, r7, pc}

08015fd4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b084      	sub	sp, #16
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
 8015fdc:	460b      	mov	r3, r1
 8015fde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015fee:	78fa      	ldrb	r2, [r7, #3]
 8015ff0:	4611      	mov	r1, r2
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7f1 ff9b 	bl	8007f2e <HAL_HCD_HC_Halt>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015ffc:	7bfb      	ldrb	r3, [r7, #15]
 8015ffe:	4618      	mov	r0, r3
 8016000:	f000 f8cc 	bl	801619c <USBH_Get_USB_Status>
 8016004:	4603      	mov	r3, r0
 8016006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016008:	7bbb      	ldrb	r3, [r7, #14]
}
 801600a:	4618      	mov	r0, r3
 801600c:	3710      	adds	r7, #16
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}

08016012 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8016012:	b590      	push	{r4, r7, lr}
 8016014:	b089      	sub	sp, #36	; 0x24
 8016016:	af04      	add	r7, sp, #16
 8016018:	6078      	str	r0, [r7, #4]
 801601a:	4608      	mov	r0, r1
 801601c:	4611      	mov	r1, r2
 801601e:	461a      	mov	r2, r3
 8016020:	4603      	mov	r3, r0
 8016022:	70fb      	strb	r3, [r7, #3]
 8016024:	460b      	mov	r3, r1
 8016026:	70bb      	strb	r3, [r7, #2]
 8016028:	4613      	mov	r3, r2
 801602a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801602c:	2300      	movs	r3, #0
 801602e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016030:	2300      	movs	r3, #0
 8016032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 801603a:	787c      	ldrb	r4, [r7, #1]
 801603c:	78ba      	ldrb	r2, [r7, #2]
 801603e:	78f9      	ldrb	r1, [r7, #3]
 8016040:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016044:	9303      	str	r3, [sp, #12]
 8016046:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016048:	9302      	str	r3, [sp, #8]
 801604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801604c:	9301      	str	r3, [sp, #4]
 801604e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016052:	9300      	str	r3, [sp, #0]
 8016054:	4623      	mov	r3, r4
 8016056:	f7f1 ff8d 	bl	8007f74 <HAL_HCD_HC_SubmitRequest>
 801605a:	4603      	mov	r3, r0
 801605c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801605e:	7bfb      	ldrb	r3, [r7, #15]
 8016060:	4618      	mov	r0, r3
 8016062:	f000 f89b 	bl	801619c <USBH_Get_USB_Status>
 8016066:	4603      	mov	r3, r0
 8016068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801606a:	7bbb      	ldrb	r3, [r7, #14]
}
 801606c:	4618      	mov	r0, r3
 801606e:	3714      	adds	r7, #20
 8016070:	46bd      	mov	sp, r7
 8016072:	bd90      	pop	{r4, r7, pc}

08016074 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b082      	sub	sp, #8
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
 801607c:	460b      	mov	r3, r1
 801607e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8016086:	78fa      	ldrb	r2, [r7, #3]
 8016088:	4611      	mov	r1, r2
 801608a:	4618      	mov	r0, r3
 801608c:	f7f2 fa1a 	bl	80084c4 <HAL_HCD_HC_GetURBState>
 8016090:	4603      	mov	r3, r0
}
 8016092:	4618      	mov	r0, r3
 8016094:	3708      	adds	r7, #8
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}

0801609a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801609a:	b580      	push	{r7, lr}
 801609c:	b082      	sub	sp, #8
 801609e:	af00      	add	r7, sp, #0
 80160a0:	6078      	str	r0, [r7, #4]
 80160a2:	460b      	mov	r3, r1
 80160a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80160ac:	2b01      	cmp	r3, #1
 80160ae:	d103      	bne.n	80160b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80160b0:	78fb      	ldrb	r3, [r7, #3]
 80160b2:	4618      	mov	r0, r3
 80160b4:	f000 f89e 	bl	80161f4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80160b8:	20c8      	movs	r0, #200	; 0xc8
 80160ba:	f7f0 fac1 	bl	8006640 <HAL_Delay>
  return USBH_OK;
 80160be:	2300      	movs	r3, #0
}
 80160c0:	4618      	mov	r0, r3
 80160c2:	3708      	adds	r7, #8
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}

080160c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80160c8:	b480      	push	{r7}
 80160ca:	b085      	sub	sp, #20
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
 80160d0:	460b      	mov	r3, r1
 80160d2:	70fb      	strb	r3, [r7, #3]
 80160d4:	4613      	mov	r3, r2
 80160d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80160de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80160e0:	78fb      	ldrb	r3, [r7, #3]
 80160e2:	68fa      	ldr	r2, [r7, #12]
 80160e4:	212c      	movs	r1, #44	; 0x2c
 80160e6:	fb01 f303 	mul.w	r3, r1, r3
 80160ea:	4413      	add	r3, r2
 80160ec:	333b      	adds	r3, #59	; 0x3b
 80160ee:	781b      	ldrb	r3, [r3, #0]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d009      	beq.n	8016108 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80160f4:	78fb      	ldrb	r3, [r7, #3]
 80160f6:	68fa      	ldr	r2, [r7, #12]
 80160f8:	212c      	movs	r1, #44	; 0x2c
 80160fa:	fb01 f303 	mul.w	r3, r1, r3
 80160fe:	4413      	add	r3, r2
 8016100:	3354      	adds	r3, #84	; 0x54
 8016102:	78ba      	ldrb	r2, [r7, #2]
 8016104:	701a      	strb	r2, [r3, #0]
 8016106:	e008      	b.n	801611a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8016108:	78fb      	ldrb	r3, [r7, #3]
 801610a:	68fa      	ldr	r2, [r7, #12]
 801610c:	212c      	movs	r1, #44	; 0x2c
 801610e:	fb01 f303 	mul.w	r3, r1, r3
 8016112:	4413      	add	r3, r2
 8016114:	3355      	adds	r3, #85	; 0x55
 8016116:	78ba      	ldrb	r2, [r7, #2]
 8016118:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801611a:	2300      	movs	r3, #0
}
 801611c:	4618      	mov	r0, r3
 801611e:	3714      	adds	r7, #20
 8016120:	46bd      	mov	sp, r7
 8016122:	bc80      	pop	{r7}
 8016124:	4770      	bx	lr

08016126 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016126:	b480      	push	{r7}
 8016128:	b085      	sub	sp, #20
 801612a:	af00      	add	r7, sp, #0
 801612c:	6078      	str	r0, [r7, #4]
 801612e:	460b      	mov	r3, r1
 8016130:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8016132:	2300      	movs	r3, #0
 8016134:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801613c:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 801613e:	78fb      	ldrb	r3, [r7, #3]
 8016140:	68ba      	ldr	r2, [r7, #8]
 8016142:	212c      	movs	r1, #44	; 0x2c
 8016144:	fb01 f303 	mul.w	r3, r1, r3
 8016148:	4413      	add	r3, r2
 801614a:	333b      	adds	r3, #59	; 0x3b
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d009      	beq.n	8016166 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8016152:	78fb      	ldrb	r3, [r7, #3]
 8016154:	68ba      	ldr	r2, [r7, #8]
 8016156:	212c      	movs	r1, #44	; 0x2c
 8016158:	fb01 f303 	mul.w	r3, r1, r3
 801615c:	4413      	add	r3, r2
 801615e:	3354      	adds	r3, #84	; 0x54
 8016160:	781b      	ldrb	r3, [r3, #0]
 8016162:	73fb      	strb	r3, [r7, #15]
 8016164:	e008      	b.n	8016178 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8016166:	78fb      	ldrb	r3, [r7, #3]
 8016168:	68ba      	ldr	r2, [r7, #8]
 801616a:	212c      	movs	r1, #44	; 0x2c
 801616c:	fb01 f303 	mul.w	r3, r1, r3
 8016170:	4413      	add	r3, r2
 8016172:	3355      	adds	r3, #85	; 0x55
 8016174:	781b      	ldrb	r3, [r3, #0]
 8016176:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8016178:	7bfb      	ldrb	r3, [r7, #15]
}
 801617a:	4618      	mov	r0, r3
 801617c:	3714      	adds	r7, #20
 801617e:	46bd      	mov	sp, r7
 8016180:	bc80      	pop	{r7}
 8016182:	4770      	bx	lr

08016184 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b082      	sub	sp, #8
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f7f0 fa57 	bl	8006640 <HAL_Delay>
}
 8016192:	bf00      	nop
 8016194:	3708      	adds	r7, #8
 8016196:	46bd      	mov	sp, r7
 8016198:	bd80      	pop	{r7, pc}
	...

0801619c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801619c:	b480      	push	{r7}
 801619e:	b085      	sub	sp, #20
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	4603      	mov	r3, r0
 80161a4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80161a6:	2300      	movs	r3, #0
 80161a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80161aa:	79fb      	ldrb	r3, [r7, #7]
 80161ac:	2b03      	cmp	r3, #3
 80161ae:	d817      	bhi.n	80161e0 <USBH_Get_USB_Status+0x44>
 80161b0:	a201      	add	r2, pc, #4	; (adr r2, 80161b8 <USBH_Get_USB_Status+0x1c>)
 80161b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161b6:	bf00      	nop
 80161b8:	080161c9 	.word	0x080161c9
 80161bc:	080161cf 	.word	0x080161cf
 80161c0:	080161d5 	.word	0x080161d5
 80161c4:	080161db 	.word	0x080161db
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80161c8:	2300      	movs	r3, #0
 80161ca:	73fb      	strb	r3, [r7, #15]
    break;
 80161cc:	e00b      	b.n	80161e6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80161ce:	2302      	movs	r3, #2
 80161d0:	73fb      	strb	r3, [r7, #15]
    break;
 80161d2:	e008      	b.n	80161e6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80161d4:	2301      	movs	r3, #1
 80161d6:	73fb      	strb	r3, [r7, #15]
    break;
 80161d8:	e005      	b.n	80161e6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80161da:	2302      	movs	r3, #2
 80161dc:	73fb      	strb	r3, [r7, #15]
    break;
 80161de:	e002      	b.n	80161e6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80161e0:	2302      	movs	r3, #2
 80161e2:	73fb      	strb	r3, [r7, #15]
    break;
 80161e4:	bf00      	nop
  }
  return usb_status;
 80161e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80161e8:	4618      	mov	r0, r3
 80161ea:	3714      	adds	r7, #20
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bc80      	pop	{r7}
 80161f0:	4770      	bx	lr
 80161f2:	bf00      	nop

080161f4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b084      	sub	sp, #16
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	4603      	mov	r3, r0
 80161fc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80161fe:	79fb      	ldrb	r3, [r7, #7]
 8016200:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8016202:	79fb      	ldrb	r3, [r7, #7]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d102      	bne.n	801620e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8016208:	2300      	movs	r3, #0
 801620a:	73fb      	strb	r3, [r7, #15]
 801620c:	e001      	b.n	8016212 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801620e:	2301      	movs	r3, #1
 8016210:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,(GPIO_PinState)data);
 8016212:	7bfb      	ldrb	r3, [r7, #15]
 8016214:	461a      	mov	r2, r3
 8016216:	2104      	movs	r1, #4
 8016218:	4803      	ldr	r0, [pc, #12]	; (8016228 <MX_DriverVbusFS+0x34>)
 801621a:	f7f1 fd66 	bl	8007cea <HAL_GPIO_WritePin>
}
 801621e:	bf00      	nop
 8016220:	3710      	adds	r7, #16
 8016222:	46bd      	mov	sp, r7
 8016224:	bd80      	pop	{r7, pc}
 8016226:	bf00      	nop
 8016228:	40020800 	.word	0x40020800

0801622c <__errno>:
 801622c:	4b01      	ldr	r3, [pc, #4]	; (8016234 <__errno+0x8>)
 801622e:	6818      	ldr	r0, [r3, #0]
 8016230:	4770      	bx	lr
 8016232:	bf00      	nop
 8016234:	2000023c 	.word	0x2000023c

08016238 <std>:
 8016238:	2300      	movs	r3, #0
 801623a:	b510      	push	{r4, lr}
 801623c:	4604      	mov	r4, r0
 801623e:	e9c0 3300 	strd	r3, r3, [r0]
 8016242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016246:	6083      	str	r3, [r0, #8]
 8016248:	8181      	strh	r1, [r0, #12]
 801624a:	6643      	str	r3, [r0, #100]	; 0x64
 801624c:	81c2      	strh	r2, [r0, #14]
 801624e:	6183      	str	r3, [r0, #24]
 8016250:	4619      	mov	r1, r3
 8016252:	2208      	movs	r2, #8
 8016254:	305c      	adds	r0, #92	; 0x5c
 8016256:	f000 f92b 	bl	80164b0 <memset>
 801625a:	4b05      	ldr	r3, [pc, #20]	; (8016270 <std+0x38>)
 801625c:	6224      	str	r4, [r4, #32]
 801625e:	6263      	str	r3, [r4, #36]	; 0x24
 8016260:	4b04      	ldr	r3, [pc, #16]	; (8016274 <std+0x3c>)
 8016262:	62a3      	str	r3, [r4, #40]	; 0x28
 8016264:	4b04      	ldr	r3, [pc, #16]	; (8016278 <std+0x40>)
 8016266:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016268:	4b04      	ldr	r3, [pc, #16]	; (801627c <std+0x44>)
 801626a:	6323      	str	r3, [r4, #48]	; 0x30
 801626c:	bd10      	pop	{r4, pc}
 801626e:	bf00      	nop
 8016270:	0801742d 	.word	0x0801742d
 8016274:	0801744f 	.word	0x0801744f
 8016278:	08017487 	.word	0x08017487
 801627c:	080174ab 	.word	0x080174ab

08016280 <_cleanup_r>:
 8016280:	4901      	ldr	r1, [pc, #4]	; (8016288 <_cleanup_r+0x8>)
 8016282:	f000 b8af 	b.w	80163e4 <_fwalk_reent>
 8016286:	bf00      	nop
 8016288:	08019049 	.word	0x08019049

0801628c <__sfmoreglue>:
 801628c:	b570      	push	{r4, r5, r6, lr}
 801628e:	2568      	movs	r5, #104	; 0x68
 8016290:	1e4a      	subs	r2, r1, #1
 8016292:	4355      	muls	r5, r2
 8016294:	460e      	mov	r6, r1
 8016296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801629a:	f000 f95d 	bl	8016558 <_malloc_r>
 801629e:	4604      	mov	r4, r0
 80162a0:	b140      	cbz	r0, 80162b4 <__sfmoreglue+0x28>
 80162a2:	2100      	movs	r1, #0
 80162a4:	e9c0 1600 	strd	r1, r6, [r0]
 80162a8:	300c      	adds	r0, #12
 80162aa:	60a0      	str	r0, [r4, #8]
 80162ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80162b0:	f000 f8fe 	bl	80164b0 <memset>
 80162b4:	4620      	mov	r0, r4
 80162b6:	bd70      	pop	{r4, r5, r6, pc}

080162b8 <__sfp_lock_acquire>:
 80162b8:	4801      	ldr	r0, [pc, #4]	; (80162c0 <__sfp_lock_acquire+0x8>)
 80162ba:	f000 b8d8 	b.w	801646e <__retarget_lock_acquire_recursive>
 80162be:	bf00      	nop
 80162c0:	20011860 	.word	0x20011860

080162c4 <__sfp_lock_release>:
 80162c4:	4801      	ldr	r0, [pc, #4]	; (80162cc <__sfp_lock_release+0x8>)
 80162c6:	f000 b8d3 	b.w	8016470 <__retarget_lock_release_recursive>
 80162ca:	bf00      	nop
 80162cc:	20011860 	.word	0x20011860

080162d0 <__sinit_lock_acquire>:
 80162d0:	4801      	ldr	r0, [pc, #4]	; (80162d8 <__sinit_lock_acquire+0x8>)
 80162d2:	f000 b8cc 	b.w	801646e <__retarget_lock_acquire_recursive>
 80162d6:	bf00      	nop
 80162d8:	2001185b 	.word	0x2001185b

080162dc <__sinit_lock_release>:
 80162dc:	4801      	ldr	r0, [pc, #4]	; (80162e4 <__sinit_lock_release+0x8>)
 80162de:	f000 b8c7 	b.w	8016470 <__retarget_lock_release_recursive>
 80162e2:	bf00      	nop
 80162e4:	2001185b 	.word	0x2001185b

080162e8 <__sinit>:
 80162e8:	b510      	push	{r4, lr}
 80162ea:	4604      	mov	r4, r0
 80162ec:	f7ff fff0 	bl	80162d0 <__sinit_lock_acquire>
 80162f0:	69a3      	ldr	r3, [r4, #24]
 80162f2:	b11b      	cbz	r3, 80162fc <__sinit+0x14>
 80162f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162f8:	f7ff bff0 	b.w	80162dc <__sinit_lock_release>
 80162fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016300:	6523      	str	r3, [r4, #80]	; 0x50
 8016302:	4b13      	ldr	r3, [pc, #76]	; (8016350 <__sinit+0x68>)
 8016304:	4a13      	ldr	r2, [pc, #76]	; (8016354 <__sinit+0x6c>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	62a2      	str	r2, [r4, #40]	; 0x28
 801630a:	42a3      	cmp	r3, r4
 801630c:	bf08      	it	eq
 801630e:	2301      	moveq	r3, #1
 8016310:	4620      	mov	r0, r4
 8016312:	bf08      	it	eq
 8016314:	61a3      	streq	r3, [r4, #24]
 8016316:	f000 f81f 	bl	8016358 <__sfp>
 801631a:	6060      	str	r0, [r4, #4]
 801631c:	4620      	mov	r0, r4
 801631e:	f000 f81b 	bl	8016358 <__sfp>
 8016322:	60a0      	str	r0, [r4, #8]
 8016324:	4620      	mov	r0, r4
 8016326:	f000 f817 	bl	8016358 <__sfp>
 801632a:	2200      	movs	r2, #0
 801632c:	2104      	movs	r1, #4
 801632e:	60e0      	str	r0, [r4, #12]
 8016330:	6860      	ldr	r0, [r4, #4]
 8016332:	f7ff ff81 	bl	8016238 <std>
 8016336:	2201      	movs	r2, #1
 8016338:	2109      	movs	r1, #9
 801633a:	68a0      	ldr	r0, [r4, #8]
 801633c:	f7ff ff7c 	bl	8016238 <std>
 8016340:	2202      	movs	r2, #2
 8016342:	2112      	movs	r1, #18
 8016344:	68e0      	ldr	r0, [r4, #12]
 8016346:	f7ff ff77 	bl	8016238 <std>
 801634a:	2301      	movs	r3, #1
 801634c:	61a3      	str	r3, [r4, #24]
 801634e:	e7d1      	b.n	80162f4 <__sinit+0xc>
 8016350:	0801adc4 	.word	0x0801adc4
 8016354:	08016281 	.word	0x08016281

08016358 <__sfp>:
 8016358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801635a:	4607      	mov	r7, r0
 801635c:	f7ff ffac 	bl	80162b8 <__sfp_lock_acquire>
 8016360:	4b1e      	ldr	r3, [pc, #120]	; (80163dc <__sfp+0x84>)
 8016362:	681e      	ldr	r6, [r3, #0]
 8016364:	69b3      	ldr	r3, [r6, #24]
 8016366:	b913      	cbnz	r3, 801636e <__sfp+0x16>
 8016368:	4630      	mov	r0, r6
 801636a:	f7ff ffbd 	bl	80162e8 <__sinit>
 801636e:	3648      	adds	r6, #72	; 0x48
 8016370:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016374:	3b01      	subs	r3, #1
 8016376:	d503      	bpl.n	8016380 <__sfp+0x28>
 8016378:	6833      	ldr	r3, [r6, #0]
 801637a:	b30b      	cbz	r3, 80163c0 <__sfp+0x68>
 801637c:	6836      	ldr	r6, [r6, #0]
 801637e:	e7f7      	b.n	8016370 <__sfp+0x18>
 8016380:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016384:	b9d5      	cbnz	r5, 80163bc <__sfp+0x64>
 8016386:	4b16      	ldr	r3, [pc, #88]	; (80163e0 <__sfp+0x88>)
 8016388:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801638c:	60e3      	str	r3, [r4, #12]
 801638e:	6665      	str	r5, [r4, #100]	; 0x64
 8016390:	f000 f86c 	bl	801646c <__retarget_lock_init_recursive>
 8016394:	f7ff ff96 	bl	80162c4 <__sfp_lock_release>
 8016398:	2208      	movs	r2, #8
 801639a:	4629      	mov	r1, r5
 801639c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80163a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80163a4:	6025      	str	r5, [r4, #0]
 80163a6:	61a5      	str	r5, [r4, #24]
 80163a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80163ac:	f000 f880 	bl	80164b0 <memset>
 80163b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80163b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80163b8:	4620      	mov	r0, r4
 80163ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163bc:	3468      	adds	r4, #104	; 0x68
 80163be:	e7d9      	b.n	8016374 <__sfp+0x1c>
 80163c0:	2104      	movs	r1, #4
 80163c2:	4638      	mov	r0, r7
 80163c4:	f7ff ff62 	bl	801628c <__sfmoreglue>
 80163c8:	4604      	mov	r4, r0
 80163ca:	6030      	str	r0, [r6, #0]
 80163cc:	2800      	cmp	r0, #0
 80163ce:	d1d5      	bne.n	801637c <__sfp+0x24>
 80163d0:	f7ff ff78 	bl	80162c4 <__sfp_lock_release>
 80163d4:	230c      	movs	r3, #12
 80163d6:	603b      	str	r3, [r7, #0]
 80163d8:	e7ee      	b.n	80163b8 <__sfp+0x60>
 80163da:	bf00      	nop
 80163dc:	0801adc4 	.word	0x0801adc4
 80163e0:	ffff0001 	.word	0xffff0001

080163e4 <_fwalk_reent>:
 80163e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163e8:	4606      	mov	r6, r0
 80163ea:	4688      	mov	r8, r1
 80163ec:	2700      	movs	r7, #0
 80163ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80163f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80163f6:	f1b9 0901 	subs.w	r9, r9, #1
 80163fa:	d505      	bpl.n	8016408 <_fwalk_reent+0x24>
 80163fc:	6824      	ldr	r4, [r4, #0]
 80163fe:	2c00      	cmp	r4, #0
 8016400:	d1f7      	bne.n	80163f2 <_fwalk_reent+0xe>
 8016402:	4638      	mov	r0, r7
 8016404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016408:	89ab      	ldrh	r3, [r5, #12]
 801640a:	2b01      	cmp	r3, #1
 801640c:	d907      	bls.n	801641e <_fwalk_reent+0x3a>
 801640e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016412:	3301      	adds	r3, #1
 8016414:	d003      	beq.n	801641e <_fwalk_reent+0x3a>
 8016416:	4629      	mov	r1, r5
 8016418:	4630      	mov	r0, r6
 801641a:	47c0      	blx	r8
 801641c:	4307      	orrs	r7, r0
 801641e:	3568      	adds	r5, #104	; 0x68
 8016420:	e7e9      	b.n	80163f6 <_fwalk_reent+0x12>
	...

08016424 <__libc_init_array>:
 8016424:	b570      	push	{r4, r5, r6, lr}
 8016426:	2600      	movs	r6, #0
 8016428:	4d0c      	ldr	r5, [pc, #48]	; (801645c <__libc_init_array+0x38>)
 801642a:	4c0d      	ldr	r4, [pc, #52]	; (8016460 <__libc_init_array+0x3c>)
 801642c:	1b64      	subs	r4, r4, r5
 801642e:	10a4      	asrs	r4, r4, #2
 8016430:	42a6      	cmp	r6, r4
 8016432:	d109      	bne.n	8016448 <__libc_init_array+0x24>
 8016434:	f004 fba8 	bl	801ab88 <_init>
 8016438:	2600      	movs	r6, #0
 801643a:	4d0a      	ldr	r5, [pc, #40]	; (8016464 <__libc_init_array+0x40>)
 801643c:	4c0a      	ldr	r4, [pc, #40]	; (8016468 <__libc_init_array+0x44>)
 801643e:	1b64      	subs	r4, r4, r5
 8016440:	10a4      	asrs	r4, r4, #2
 8016442:	42a6      	cmp	r6, r4
 8016444:	d105      	bne.n	8016452 <__libc_init_array+0x2e>
 8016446:	bd70      	pop	{r4, r5, r6, pc}
 8016448:	f855 3b04 	ldr.w	r3, [r5], #4
 801644c:	4798      	blx	r3
 801644e:	3601      	adds	r6, #1
 8016450:	e7ee      	b.n	8016430 <__libc_init_array+0xc>
 8016452:	f855 3b04 	ldr.w	r3, [r5], #4
 8016456:	4798      	blx	r3
 8016458:	3601      	adds	r6, #1
 801645a:	e7f2      	b.n	8016442 <__libc_init_array+0x1e>
 801645c:	0801b224 	.word	0x0801b224
 8016460:	0801b224 	.word	0x0801b224
 8016464:	0801b224 	.word	0x0801b224
 8016468:	0801b228 	.word	0x0801b228

0801646c <__retarget_lock_init_recursive>:
 801646c:	4770      	bx	lr

0801646e <__retarget_lock_acquire_recursive>:
 801646e:	4770      	bx	lr

08016470 <__retarget_lock_release_recursive>:
 8016470:	4770      	bx	lr
	...

08016474 <malloc>:
 8016474:	4b02      	ldr	r3, [pc, #8]	; (8016480 <malloc+0xc>)
 8016476:	4601      	mov	r1, r0
 8016478:	6818      	ldr	r0, [r3, #0]
 801647a:	f000 b86d 	b.w	8016558 <_malloc_r>
 801647e:	bf00      	nop
 8016480:	2000023c 	.word	0x2000023c

08016484 <free>:
 8016484:	4b02      	ldr	r3, [pc, #8]	; (8016490 <free+0xc>)
 8016486:	4601      	mov	r1, r0
 8016488:	6818      	ldr	r0, [r3, #0]
 801648a:	f000 b819 	b.w	80164c0 <_free_r>
 801648e:	bf00      	nop
 8016490:	2000023c 	.word	0x2000023c

08016494 <memcpy>:
 8016494:	440a      	add	r2, r1
 8016496:	4291      	cmp	r1, r2
 8016498:	f100 33ff 	add.w	r3, r0, #4294967295
 801649c:	d100      	bne.n	80164a0 <memcpy+0xc>
 801649e:	4770      	bx	lr
 80164a0:	b510      	push	{r4, lr}
 80164a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80164a6:	4291      	cmp	r1, r2
 80164a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80164ac:	d1f9      	bne.n	80164a2 <memcpy+0xe>
 80164ae:	bd10      	pop	{r4, pc}

080164b0 <memset>:
 80164b0:	4603      	mov	r3, r0
 80164b2:	4402      	add	r2, r0
 80164b4:	4293      	cmp	r3, r2
 80164b6:	d100      	bne.n	80164ba <memset+0xa>
 80164b8:	4770      	bx	lr
 80164ba:	f803 1b01 	strb.w	r1, [r3], #1
 80164be:	e7f9      	b.n	80164b4 <memset+0x4>

080164c0 <_free_r>:
 80164c0:	b538      	push	{r3, r4, r5, lr}
 80164c2:	4605      	mov	r5, r0
 80164c4:	2900      	cmp	r1, #0
 80164c6:	d043      	beq.n	8016550 <_free_r+0x90>
 80164c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80164cc:	1f0c      	subs	r4, r1, #4
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	bfb8      	it	lt
 80164d2:	18e4      	addlt	r4, r4, r3
 80164d4:	f003 f990 	bl	80197f8 <__malloc_lock>
 80164d8:	4a1e      	ldr	r2, [pc, #120]	; (8016554 <_free_r+0x94>)
 80164da:	6813      	ldr	r3, [r2, #0]
 80164dc:	4610      	mov	r0, r2
 80164de:	b933      	cbnz	r3, 80164ee <_free_r+0x2e>
 80164e0:	6063      	str	r3, [r4, #4]
 80164e2:	6014      	str	r4, [r2, #0]
 80164e4:	4628      	mov	r0, r5
 80164e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80164ea:	f003 b98b 	b.w	8019804 <__malloc_unlock>
 80164ee:	42a3      	cmp	r3, r4
 80164f0:	d90a      	bls.n	8016508 <_free_r+0x48>
 80164f2:	6821      	ldr	r1, [r4, #0]
 80164f4:	1862      	adds	r2, r4, r1
 80164f6:	4293      	cmp	r3, r2
 80164f8:	bf01      	itttt	eq
 80164fa:	681a      	ldreq	r2, [r3, #0]
 80164fc:	685b      	ldreq	r3, [r3, #4]
 80164fe:	1852      	addeq	r2, r2, r1
 8016500:	6022      	streq	r2, [r4, #0]
 8016502:	6063      	str	r3, [r4, #4]
 8016504:	6004      	str	r4, [r0, #0]
 8016506:	e7ed      	b.n	80164e4 <_free_r+0x24>
 8016508:	461a      	mov	r2, r3
 801650a:	685b      	ldr	r3, [r3, #4]
 801650c:	b10b      	cbz	r3, 8016512 <_free_r+0x52>
 801650e:	42a3      	cmp	r3, r4
 8016510:	d9fa      	bls.n	8016508 <_free_r+0x48>
 8016512:	6811      	ldr	r1, [r2, #0]
 8016514:	1850      	adds	r0, r2, r1
 8016516:	42a0      	cmp	r0, r4
 8016518:	d10b      	bne.n	8016532 <_free_r+0x72>
 801651a:	6820      	ldr	r0, [r4, #0]
 801651c:	4401      	add	r1, r0
 801651e:	1850      	adds	r0, r2, r1
 8016520:	4283      	cmp	r3, r0
 8016522:	6011      	str	r1, [r2, #0]
 8016524:	d1de      	bne.n	80164e4 <_free_r+0x24>
 8016526:	6818      	ldr	r0, [r3, #0]
 8016528:	685b      	ldr	r3, [r3, #4]
 801652a:	4401      	add	r1, r0
 801652c:	6011      	str	r1, [r2, #0]
 801652e:	6053      	str	r3, [r2, #4]
 8016530:	e7d8      	b.n	80164e4 <_free_r+0x24>
 8016532:	d902      	bls.n	801653a <_free_r+0x7a>
 8016534:	230c      	movs	r3, #12
 8016536:	602b      	str	r3, [r5, #0]
 8016538:	e7d4      	b.n	80164e4 <_free_r+0x24>
 801653a:	6820      	ldr	r0, [r4, #0]
 801653c:	1821      	adds	r1, r4, r0
 801653e:	428b      	cmp	r3, r1
 8016540:	bf01      	itttt	eq
 8016542:	6819      	ldreq	r1, [r3, #0]
 8016544:	685b      	ldreq	r3, [r3, #4]
 8016546:	1809      	addeq	r1, r1, r0
 8016548:	6021      	streq	r1, [r4, #0]
 801654a:	6063      	str	r3, [r4, #4]
 801654c:	6054      	str	r4, [r2, #4]
 801654e:	e7c9      	b.n	80164e4 <_free_r+0x24>
 8016550:	bd38      	pop	{r3, r4, r5, pc}
 8016552:	bf00      	nop
 8016554:	2000b844 	.word	0x2000b844

08016558 <_malloc_r>:
 8016558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801655a:	1ccd      	adds	r5, r1, #3
 801655c:	f025 0503 	bic.w	r5, r5, #3
 8016560:	3508      	adds	r5, #8
 8016562:	2d0c      	cmp	r5, #12
 8016564:	bf38      	it	cc
 8016566:	250c      	movcc	r5, #12
 8016568:	2d00      	cmp	r5, #0
 801656a:	4606      	mov	r6, r0
 801656c:	db01      	blt.n	8016572 <_malloc_r+0x1a>
 801656e:	42a9      	cmp	r1, r5
 8016570:	d903      	bls.n	801657a <_malloc_r+0x22>
 8016572:	230c      	movs	r3, #12
 8016574:	6033      	str	r3, [r6, #0]
 8016576:	2000      	movs	r0, #0
 8016578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801657a:	f003 f93d 	bl	80197f8 <__malloc_lock>
 801657e:	4921      	ldr	r1, [pc, #132]	; (8016604 <_malloc_r+0xac>)
 8016580:	680a      	ldr	r2, [r1, #0]
 8016582:	4614      	mov	r4, r2
 8016584:	b99c      	cbnz	r4, 80165ae <_malloc_r+0x56>
 8016586:	4f20      	ldr	r7, [pc, #128]	; (8016608 <_malloc_r+0xb0>)
 8016588:	683b      	ldr	r3, [r7, #0]
 801658a:	b923      	cbnz	r3, 8016596 <_malloc_r+0x3e>
 801658c:	4621      	mov	r1, r4
 801658e:	4630      	mov	r0, r6
 8016590:	f000 ff18 	bl	80173c4 <_sbrk_r>
 8016594:	6038      	str	r0, [r7, #0]
 8016596:	4629      	mov	r1, r5
 8016598:	4630      	mov	r0, r6
 801659a:	f000 ff13 	bl	80173c4 <_sbrk_r>
 801659e:	1c43      	adds	r3, r0, #1
 80165a0:	d123      	bne.n	80165ea <_malloc_r+0x92>
 80165a2:	230c      	movs	r3, #12
 80165a4:	4630      	mov	r0, r6
 80165a6:	6033      	str	r3, [r6, #0]
 80165a8:	f003 f92c 	bl	8019804 <__malloc_unlock>
 80165ac:	e7e3      	b.n	8016576 <_malloc_r+0x1e>
 80165ae:	6823      	ldr	r3, [r4, #0]
 80165b0:	1b5b      	subs	r3, r3, r5
 80165b2:	d417      	bmi.n	80165e4 <_malloc_r+0x8c>
 80165b4:	2b0b      	cmp	r3, #11
 80165b6:	d903      	bls.n	80165c0 <_malloc_r+0x68>
 80165b8:	6023      	str	r3, [r4, #0]
 80165ba:	441c      	add	r4, r3
 80165bc:	6025      	str	r5, [r4, #0]
 80165be:	e004      	b.n	80165ca <_malloc_r+0x72>
 80165c0:	6863      	ldr	r3, [r4, #4]
 80165c2:	42a2      	cmp	r2, r4
 80165c4:	bf0c      	ite	eq
 80165c6:	600b      	streq	r3, [r1, #0]
 80165c8:	6053      	strne	r3, [r2, #4]
 80165ca:	4630      	mov	r0, r6
 80165cc:	f003 f91a 	bl	8019804 <__malloc_unlock>
 80165d0:	f104 000b 	add.w	r0, r4, #11
 80165d4:	1d23      	adds	r3, r4, #4
 80165d6:	f020 0007 	bic.w	r0, r0, #7
 80165da:	1ac2      	subs	r2, r0, r3
 80165dc:	d0cc      	beq.n	8016578 <_malloc_r+0x20>
 80165de:	1a1b      	subs	r3, r3, r0
 80165e0:	50a3      	str	r3, [r4, r2]
 80165e2:	e7c9      	b.n	8016578 <_malloc_r+0x20>
 80165e4:	4622      	mov	r2, r4
 80165e6:	6864      	ldr	r4, [r4, #4]
 80165e8:	e7cc      	b.n	8016584 <_malloc_r+0x2c>
 80165ea:	1cc4      	adds	r4, r0, #3
 80165ec:	f024 0403 	bic.w	r4, r4, #3
 80165f0:	42a0      	cmp	r0, r4
 80165f2:	d0e3      	beq.n	80165bc <_malloc_r+0x64>
 80165f4:	1a21      	subs	r1, r4, r0
 80165f6:	4630      	mov	r0, r6
 80165f8:	f000 fee4 	bl	80173c4 <_sbrk_r>
 80165fc:	3001      	adds	r0, #1
 80165fe:	d1dd      	bne.n	80165bc <_malloc_r+0x64>
 8016600:	e7cf      	b.n	80165a2 <_malloc_r+0x4a>
 8016602:	bf00      	nop
 8016604:	2000b844 	.word	0x2000b844
 8016608:	2000b848 	.word	0x2000b848

0801660c <__cvt>:
 801660c:	2b00      	cmp	r3, #0
 801660e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016612:	461f      	mov	r7, r3
 8016614:	bfbb      	ittet	lt
 8016616:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 801661a:	461f      	movlt	r7, r3
 801661c:	2300      	movge	r3, #0
 801661e:	232d      	movlt	r3, #45	; 0x2d
 8016620:	b088      	sub	sp, #32
 8016622:	4614      	mov	r4, r2
 8016624:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016626:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016628:	7013      	strb	r3, [r2, #0]
 801662a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801662c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8016630:	f023 0820 	bic.w	r8, r3, #32
 8016634:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016638:	d005      	beq.n	8016646 <__cvt+0x3a>
 801663a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801663e:	d100      	bne.n	8016642 <__cvt+0x36>
 8016640:	3501      	adds	r5, #1
 8016642:	2302      	movs	r3, #2
 8016644:	e000      	b.n	8016648 <__cvt+0x3c>
 8016646:	2303      	movs	r3, #3
 8016648:	aa07      	add	r2, sp, #28
 801664a:	9204      	str	r2, [sp, #16]
 801664c:	aa06      	add	r2, sp, #24
 801664e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8016652:	e9cd 3500 	strd	r3, r5, [sp]
 8016656:	4622      	mov	r2, r4
 8016658:	463b      	mov	r3, r7
 801665a:	f001 fe81 	bl	8018360 <_dtoa_r>
 801665e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016662:	4606      	mov	r6, r0
 8016664:	d102      	bne.n	801666c <__cvt+0x60>
 8016666:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016668:	07db      	lsls	r3, r3, #31
 801666a:	d522      	bpl.n	80166b2 <__cvt+0xa6>
 801666c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016670:	eb06 0905 	add.w	r9, r6, r5
 8016674:	d110      	bne.n	8016698 <__cvt+0x8c>
 8016676:	7833      	ldrb	r3, [r6, #0]
 8016678:	2b30      	cmp	r3, #48	; 0x30
 801667a:	d10a      	bne.n	8016692 <__cvt+0x86>
 801667c:	2200      	movs	r2, #0
 801667e:	2300      	movs	r3, #0
 8016680:	4620      	mov	r0, r4
 8016682:	4639      	mov	r1, r7
 8016684:	f7ea f9da 	bl	8000a3c <__aeabi_dcmpeq>
 8016688:	b918      	cbnz	r0, 8016692 <__cvt+0x86>
 801668a:	f1c5 0501 	rsb	r5, r5, #1
 801668e:	f8ca 5000 	str.w	r5, [sl]
 8016692:	f8da 3000 	ldr.w	r3, [sl]
 8016696:	4499      	add	r9, r3
 8016698:	2200      	movs	r2, #0
 801669a:	2300      	movs	r3, #0
 801669c:	4620      	mov	r0, r4
 801669e:	4639      	mov	r1, r7
 80166a0:	f7ea f9cc 	bl	8000a3c <__aeabi_dcmpeq>
 80166a4:	b108      	cbz	r0, 80166aa <__cvt+0x9e>
 80166a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80166aa:	2230      	movs	r2, #48	; 0x30
 80166ac:	9b07      	ldr	r3, [sp, #28]
 80166ae:	454b      	cmp	r3, r9
 80166b0:	d307      	bcc.n	80166c2 <__cvt+0xb6>
 80166b2:	4630      	mov	r0, r6
 80166b4:	9b07      	ldr	r3, [sp, #28]
 80166b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80166b8:	1b9b      	subs	r3, r3, r6
 80166ba:	6013      	str	r3, [r2, #0]
 80166bc:	b008      	add	sp, #32
 80166be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166c2:	1c59      	adds	r1, r3, #1
 80166c4:	9107      	str	r1, [sp, #28]
 80166c6:	701a      	strb	r2, [r3, #0]
 80166c8:	e7f0      	b.n	80166ac <__cvt+0xa0>

080166ca <__exponent>:
 80166ca:	4603      	mov	r3, r0
 80166cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80166ce:	2900      	cmp	r1, #0
 80166d0:	f803 2b02 	strb.w	r2, [r3], #2
 80166d4:	bfb6      	itet	lt
 80166d6:	222d      	movlt	r2, #45	; 0x2d
 80166d8:	222b      	movge	r2, #43	; 0x2b
 80166da:	4249      	neglt	r1, r1
 80166dc:	2909      	cmp	r1, #9
 80166de:	7042      	strb	r2, [r0, #1]
 80166e0:	dd2b      	ble.n	801673a <__exponent+0x70>
 80166e2:	f10d 0407 	add.w	r4, sp, #7
 80166e6:	46a4      	mov	ip, r4
 80166e8:	270a      	movs	r7, #10
 80166ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80166ee:	460a      	mov	r2, r1
 80166f0:	46a6      	mov	lr, r4
 80166f2:	fb07 1516 	mls	r5, r7, r6, r1
 80166f6:	2a63      	cmp	r2, #99	; 0x63
 80166f8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80166fc:	4631      	mov	r1, r6
 80166fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8016702:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016706:	dcf0      	bgt.n	80166ea <__exponent+0x20>
 8016708:	3130      	adds	r1, #48	; 0x30
 801670a:	f1ae 0502 	sub.w	r5, lr, #2
 801670e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016712:	4629      	mov	r1, r5
 8016714:	1c44      	adds	r4, r0, #1
 8016716:	4561      	cmp	r1, ip
 8016718:	d30a      	bcc.n	8016730 <__exponent+0x66>
 801671a:	f10d 0209 	add.w	r2, sp, #9
 801671e:	eba2 020e 	sub.w	r2, r2, lr
 8016722:	4565      	cmp	r5, ip
 8016724:	bf88      	it	hi
 8016726:	2200      	movhi	r2, #0
 8016728:	4413      	add	r3, r2
 801672a:	1a18      	subs	r0, r3, r0
 801672c:	b003      	add	sp, #12
 801672e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016730:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016734:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016738:	e7ed      	b.n	8016716 <__exponent+0x4c>
 801673a:	2330      	movs	r3, #48	; 0x30
 801673c:	3130      	adds	r1, #48	; 0x30
 801673e:	7083      	strb	r3, [r0, #2]
 8016740:	70c1      	strb	r1, [r0, #3]
 8016742:	1d03      	adds	r3, r0, #4
 8016744:	e7f1      	b.n	801672a <__exponent+0x60>
	...

08016748 <_printf_float>:
 8016748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801674c:	b091      	sub	sp, #68	; 0x44
 801674e:	460c      	mov	r4, r1
 8016750:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8016754:	4616      	mov	r6, r2
 8016756:	461f      	mov	r7, r3
 8016758:	4605      	mov	r5, r0
 801675a:	f003 f817 	bl	801978c <_localeconv_r>
 801675e:	6803      	ldr	r3, [r0, #0]
 8016760:	4618      	mov	r0, r3
 8016762:	9309      	str	r3, [sp, #36]	; 0x24
 8016764:	f7e9 fd3e 	bl	80001e4 <strlen>
 8016768:	2300      	movs	r3, #0
 801676a:	930e      	str	r3, [sp, #56]	; 0x38
 801676c:	f8d8 3000 	ldr.w	r3, [r8]
 8016770:	900a      	str	r0, [sp, #40]	; 0x28
 8016772:	3307      	adds	r3, #7
 8016774:	f023 0307 	bic.w	r3, r3, #7
 8016778:	f103 0208 	add.w	r2, r3, #8
 801677c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8016780:	f8d4 b000 	ldr.w	fp, [r4]
 8016784:	f8c8 2000 	str.w	r2, [r8]
 8016788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801678c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016790:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8016794:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8016798:	930b      	str	r3, [sp, #44]	; 0x2c
 801679a:	f04f 32ff 	mov.w	r2, #4294967295
 801679e:	4640      	mov	r0, r8
 80167a0:	4b9c      	ldr	r3, [pc, #624]	; (8016a14 <_printf_float+0x2cc>)
 80167a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167a4:	f7ea f97c 	bl	8000aa0 <__aeabi_dcmpun>
 80167a8:	bb70      	cbnz	r0, 8016808 <_printf_float+0xc0>
 80167aa:	f04f 32ff 	mov.w	r2, #4294967295
 80167ae:	4640      	mov	r0, r8
 80167b0:	4b98      	ldr	r3, [pc, #608]	; (8016a14 <_printf_float+0x2cc>)
 80167b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167b4:	f7ea f956 	bl	8000a64 <__aeabi_dcmple>
 80167b8:	bb30      	cbnz	r0, 8016808 <_printf_float+0xc0>
 80167ba:	2200      	movs	r2, #0
 80167bc:	2300      	movs	r3, #0
 80167be:	4640      	mov	r0, r8
 80167c0:	4651      	mov	r1, sl
 80167c2:	f7ea f945 	bl	8000a50 <__aeabi_dcmplt>
 80167c6:	b110      	cbz	r0, 80167ce <_printf_float+0x86>
 80167c8:	232d      	movs	r3, #45	; 0x2d
 80167ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80167ce:	4b92      	ldr	r3, [pc, #584]	; (8016a18 <_printf_float+0x2d0>)
 80167d0:	4892      	ldr	r0, [pc, #584]	; (8016a1c <_printf_float+0x2d4>)
 80167d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80167d6:	bf94      	ite	ls
 80167d8:	4698      	movls	r8, r3
 80167da:	4680      	movhi	r8, r0
 80167dc:	2303      	movs	r3, #3
 80167de:	f04f 0a00 	mov.w	sl, #0
 80167e2:	6123      	str	r3, [r4, #16]
 80167e4:	f02b 0304 	bic.w	r3, fp, #4
 80167e8:	6023      	str	r3, [r4, #0]
 80167ea:	4633      	mov	r3, r6
 80167ec:	4621      	mov	r1, r4
 80167ee:	4628      	mov	r0, r5
 80167f0:	9700      	str	r7, [sp, #0]
 80167f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80167f4:	f000 f9d4 	bl	8016ba0 <_printf_common>
 80167f8:	3001      	adds	r0, #1
 80167fa:	f040 8090 	bne.w	801691e <_printf_float+0x1d6>
 80167fe:	f04f 30ff 	mov.w	r0, #4294967295
 8016802:	b011      	add	sp, #68	; 0x44
 8016804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016808:	4642      	mov	r2, r8
 801680a:	4653      	mov	r3, sl
 801680c:	4640      	mov	r0, r8
 801680e:	4651      	mov	r1, sl
 8016810:	f7ea f946 	bl	8000aa0 <__aeabi_dcmpun>
 8016814:	b148      	cbz	r0, 801682a <_printf_float+0xe2>
 8016816:	f1ba 0f00 	cmp.w	sl, #0
 801681a:	bfb8      	it	lt
 801681c:	232d      	movlt	r3, #45	; 0x2d
 801681e:	4880      	ldr	r0, [pc, #512]	; (8016a20 <_printf_float+0x2d8>)
 8016820:	bfb8      	it	lt
 8016822:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016826:	4b7f      	ldr	r3, [pc, #508]	; (8016a24 <_printf_float+0x2dc>)
 8016828:	e7d3      	b.n	80167d2 <_printf_float+0x8a>
 801682a:	6863      	ldr	r3, [r4, #4]
 801682c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8016830:	1c5a      	adds	r2, r3, #1
 8016832:	d142      	bne.n	80168ba <_printf_float+0x172>
 8016834:	2306      	movs	r3, #6
 8016836:	6063      	str	r3, [r4, #4]
 8016838:	2200      	movs	r2, #0
 801683a:	9206      	str	r2, [sp, #24]
 801683c:	aa0e      	add	r2, sp, #56	; 0x38
 801683e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8016842:	aa0d      	add	r2, sp, #52	; 0x34
 8016844:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8016848:	9203      	str	r2, [sp, #12]
 801684a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801684e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016852:	6023      	str	r3, [r4, #0]
 8016854:	6863      	ldr	r3, [r4, #4]
 8016856:	4642      	mov	r2, r8
 8016858:	9300      	str	r3, [sp, #0]
 801685a:	4628      	mov	r0, r5
 801685c:	4653      	mov	r3, sl
 801685e:	910b      	str	r1, [sp, #44]	; 0x2c
 8016860:	f7ff fed4 	bl	801660c <__cvt>
 8016864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016866:	4680      	mov	r8, r0
 8016868:	2947      	cmp	r1, #71	; 0x47
 801686a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801686c:	d108      	bne.n	8016880 <_printf_float+0x138>
 801686e:	1cc8      	adds	r0, r1, #3
 8016870:	db02      	blt.n	8016878 <_printf_float+0x130>
 8016872:	6863      	ldr	r3, [r4, #4]
 8016874:	4299      	cmp	r1, r3
 8016876:	dd40      	ble.n	80168fa <_printf_float+0x1b2>
 8016878:	f1a9 0902 	sub.w	r9, r9, #2
 801687c:	fa5f f989 	uxtb.w	r9, r9
 8016880:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016884:	d81f      	bhi.n	80168c6 <_printf_float+0x17e>
 8016886:	464a      	mov	r2, r9
 8016888:	3901      	subs	r1, #1
 801688a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801688e:	910d      	str	r1, [sp, #52]	; 0x34
 8016890:	f7ff ff1b 	bl	80166ca <__exponent>
 8016894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016896:	4682      	mov	sl, r0
 8016898:	1813      	adds	r3, r2, r0
 801689a:	2a01      	cmp	r2, #1
 801689c:	6123      	str	r3, [r4, #16]
 801689e:	dc02      	bgt.n	80168a6 <_printf_float+0x15e>
 80168a0:	6822      	ldr	r2, [r4, #0]
 80168a2:	07d2      	lsls	r2, r2, #31
 80168a4:	d501      	bpl.n	80168aa <_printf_float+0x162>
 80168a6:	3301      	adds	r3, #1
 80168a8:	6123      	str	r3, [r4, #16]
 80168aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d09b      	beq.n	80167ea <_printf_float+0xa2>
 80168b2:	232d      	movs	r3, #45	; 0x2d
 80168b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168b8:	e797      	b.n	80167ea <_printf_float+0xa2>
 80168ba:	2947      	cmp	r1, #71	; 0x47
 80168bc:	d1bc      	bne.n	8016838 <_printf_float+0xf0>
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d1ba      	bne.n	8016838 <_printf_float+0xf0>
 80168c2:	2301      	movs	r3, #1
 80168c4:	e7b7      	b.n	8016836 <_printf_float+0xee>
 80168c6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80168ca:	d118      	bne.n	80168fe <_printf_float+0x1b6>
 80168cc:	2900      	cmp	r1, #0
 80168ce:	6863      	ldr	r3, [r4, #4]
 80168d0:	dd0b      	ble.n	80168ea <_printf_float+0x1a2>
 80168d2:	6121      	str	r1, [r4, #16]
 80168d4:	b913      	cbnz	r3, 80168dc <_printf_float+0x194>
 80168d6:	6822      	ldr	r2, [r4, #0]
 80168d8:	07d0      	lsls	r0, r2, #31
 80168da:	d502      	bpl.n	80168e2 <_printf_float+0x19a>
 80168dc:	3301      	adds	r3, #1
 80168de:	440b      	add	r3, r1
 80168e0:	6123      	str	r3, [r4, #16]
 80168e2:	f04f 0a00 	mov.w	sl, #0
 80168e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80168e8:	e7df      	b.n	80168aa <_printf_float+0x162>
 80168ea:	b913      	cbnz	r3, 80168f2 <_printf_float+0x1aa>
 80168ec:	6822      	ldr	r2, [r4, #0]
 80168ee:	07d2      	lsls	r2, r2, #31
 80168f0:	d501      	bpl.n	80168f6 <_printf_float+0x1ae>
 80168f2:	3302      	adds	r3, #2
 80168f4:	e7f4      	b.n	80168e0 <_printf_float+0x198>
 80168f6:	2301      	movs	r3, #1
 80168f8:	e7f2      	b.n	80168e0 <_printf_float+0x198>
 80168fa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80168fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016900:	4299      	cmp	r1, r3
 8016902:	db05      	blt.n	8016910 <_printf_float+0x1c8>
 8016904:	6823      	ldr	r3, [r4, #0]
 8016906:	6121      	str	r1, [r4, #16]
 8016908:	07d8      	lsls	r0, r3, #31
 801690a:	d5ea      	bpl.n	80168e2 <_printf_float+0x19a>
 801690c:	1c4b      	adds	r3, r1, #1
 801690e:	e7e7      	b.n	80168e0 <_printf_float+0x198>
 8016910:	2900      	cmp	r1, #0
 8016912:	bfcc      	ite	gt
 8016914:	2201      	movgt	r2, #1
 8016916:	f1c1 0202 	rsble	r2, r1, #2
 801691a:	4413      	add	r3, r2
 801691c:	e7e0      	b.n	80168e0 <_printf_float+0x198>
 801691e:	6823      	ldr	r3, [r4, #0]
 8016920:	055a      	lsls	r2, r3, #21
 8016922:	d407      	bmi.n	8016934 <_printf_float+0x1ec>
 8016924:	6923      	ldr	r3, [r4, #16]
 8016926:	4642      	mov	r2, r8
 8016928:	4631      	mov	r1, r6
 801692a:	4628      	mov	r0, r5
 801692c:	47b8      	blx	r7
 801692e:	3001      	adds	r0, #1
 8016930:	d12b      	bne.n	801698a <_printf_float+0x242>
 8016932:	e764      	b.n	80167fe <_printf_float+0xb6>
 8016934:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016938:	f240 80dd 	bls.w	8016af6 <_printf_float+0x3ae>
 801693c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016940:	2200      	movs	r2, #0
 8016942:	2300      	movs	r3, #0
 8016944:	f7ea f87a 	bl	8000a3c <__aeabi_dcmpeq>
 8016948:	2800      	cmp	r0, #0
 801694a:	d033      	beq.n	80169b4 <_printf_float+0x26c>
 801694c:	2301      	movs	r3, #1
 801694e:	4631      	mov	r1, r6
 8016950:	4628      	mov	r0, r5
 8016952:	4a35      	ldr	r2, [pc, #212]	; (8016a28 <_printf_float+0x2e0>)
 8016954:	47b8      	blx	r7
 8016956:	3001      	adds	r0, #1
 8016958:	f43f af51 	beq.w	80167fe <_printf_float+0xb6>
 801695c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8016960:	429a      	cmp	r2, r3
 8016962:	db02      	blt.n	801696a <_printf_float+0x222>
 8016964:	6823      	ldr	r3, [r4, #0]
 8016966:	07d8      	lsls	r0, r3, #31
 8016968:	d50f      	bpl.n	801698a <_printf_float+0x242>
 801696a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801696e:	4631      	mov	r1, r6
 8016970:	4628      	mov	r0, r5
 8016972:	47b8      	blx	r7
 8016974:	3001      	adds	r0, #1
 8016976:	f43f af42 	beq.w	80167fe <_printf_float+0xb6>
 801697a:	f04f 0800 	mov.w	r8, #0
 801697e:	f104 091a 	add.w	r9, r4, #26
 8016982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016984:	3b01      	subs	r3, #1
 8016986:	4543      	cmp	r3, r8
 8016988:	dc09      	bgt.n	801699e <_printf_float+0x256>
 801698a:	6823      	ldr	r3, [r4, #0]
 801698c:	079b      	lsls	r3, r3, #30
 801698e:	f100 8102 	bmi.w	8016b96 <_printf_float+0x44e>
 8016992:	68e0      	ldr	r0, [r4, #12]
 8016994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016996:	4298      	cmp	r0, r3
 8016998:	bfb8      	it	lt
 801699a:	4618      	movlt	r0, r3
 801699c:	e731      	b.n	8016802 <_printf_float+0xba>
 801699e:	2301      	movs	r3, #1
 80169a0:	464a      	mov	r2, r9
 80169a2:	4631      	mov	r1, r6
 80169a4:	4628      	mov	r0, r5
 80169a6:	47b8      	blx	r7
 80169a8:	3001      	adds	r0, #1
 80169aa:	f43f af28 	beq.w	80167fe <_printf_float+0xb6>
 80169ae:	f108 0801 	add.w	r8, r8, #1
 80169b2:	e7e6      	b.n	8016982 <_printf_float+0x23a>
 80169b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	dc38      	bgt.n	8016a2c <_printf_float+0x2e4>
 80169ba:	2301      	movs	r3, #1
 80169bc:	4631      	mov	r1, r6
 80169be:	4628      	mov	r0, r5
 80169c0:	4a19      	ldr	r2, [pc, #100]	; (8016a28 <_printf_float+0x2e0>)
 80169c2:	47b8      	blx	r7
 80169c4:	3001      	adds	r0, #1
 80169c6:	f43f af1a 	beq.w	80167fe <_printf_float+0xb6>
 80169ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80169ce:	4313      	orrs	r3, r2
 80169d0:	d102      	bne.n	80169d8 <_printf_float+0x290>
 80169d2:	6823      	ldr	r3, [r4, #0]
 80169d4:	07d9      	lsls	r1, r3, #31
 80169d6:	d5d8      	bpl.n	801698a <_printf_float+0x242>
 80169d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80169dc:	4631      	mov	r1, r6
 80169de:	4628      	mov	r0, r5
 80169e0:	47b8      	blx	r7
 80169e2:	3001      	adds	r0, #1
 80169e4:	f43f af0b 	beq.w	80167fe <_printf_float+0xb6>
 80169e8:	f04f 0900 	mov.w	r9, #0
 80169ec:	f104 0a1a 	add.w	sl, r4, #26
 80169f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169f2:	425b      	negs	r3, r3
 80169f4:	454b      	cmp	r3, r9
 80169f6:	dc01      	bgt.n	80169fc <_printf_float+0x2b4>
 80169f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80169fa:	e794      	b.n	8016926 <_printf_float+0x1de>
 80169fc:	2301      	movs	r3, #1
 80169fe:	4652      	mov	r2, sl
 8016a00:	4631      	mov	r1, r6
 8016a02:	4628      	mov	r0, r5
 8016a04:	47b8      	blx	r7
 8016a06:	3001      	adds	r0, #1
 8016a08:	f43f aef9 	beq.w	80167fe <_printf_float+0xb6>
 8016a0c:	f109 0901 	add.w	r9, r9, #1
 8016a10:	e7ee      	b.n	80169f0 <_printf_float+0x2a8>
 8016a12:	bf00      	nop
 8016a14:	7fefffff 	.word	0x7fefffff
 8016a18:	0801adc8 	.word	0x0801adc8
 8016a1c:	0801adcc 	.word	0x0801adcc
 8016a20:	0801add4 	.word	0x0801add4
 8016a24:	0801add0 	.word	0x0801add0
 8016a28:	0801add8 	.word	0x0801add8
 8016a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016a30:	429a      	cmp	r2, r3
 8016a32:	bfa8      	it	ge
 8016a34:	461a      	movge	r2, r3
 8016a36:	2a00      	cmp	r2, #0
 8016a38:	4691      	mov	r9, r2
 8016a3a:	dc37      	bgt.n	8016aac <_printf_float+0x364>
 8016a3c:	f04f 0b00 	mov.w	fp, #0
 8016a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016a44:	f104 021a 	add.w	r2, r4, #26
 8016a48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016a4c:	ebaa 0309 	sub.w	r3, sl, r9
 8016a50:	455b      	cmp	r3, fp
 8016a52:	dc33      	bgt.n	8016abc <_printf_float+0x374>
 8016a54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	db3b      	blt.n	8016ad4 <_printf_float+0x38c>
 8016a5c:	6823      	ldr	r3, [r4, #0]
 8016a5e:	07da      	lsls	r2, r3, #31
 8016a60:	d438      	bmi.n	8016ad4 <_printf_float+0x38c>
 8016a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016a66:	eba2 030a 	sub.w	r3, r2, sl
 8016a6a:	eba2 0901 	sub.w	r9, r2, r1
 8016a6e:	4599      	cmp	r9, r3
 8016a70:	bfa8      	it	ge
 8016a72:	4699      	movge	r9, r3
 8016a74:	f1b9 0f00 	cmp.w	r9, #0
 8016a78:	dc34      	bgt.n	8016ae4 <_printf_float+0x39c>
 8016a7a:	f04f 0800 	mov.w	r8, #0
 8016a7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016a82:	f104 0a1a 	add.w	sl, r4, #26
 8016a86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8016a8a:	1a9b      	subs	r3, r3, r2
 8016a8c:	eba3 0309 	sub.w	r3, r3, r9
 8016a90:	4543      	cmp	r3, r8
 8016a92:	f77f af7a 	ble.w	801698a <_printf_float+0x242>
 8016a96:	2301      	movs	r3, #1
 8016a98:	4652      	mov	r2, sl
 8016a9a:	4631      	mov	r1, r6
 8016a9c:	4628      	mov	r0, r5
 8016a9e:	47b8      	blx	r7
 8016aa0:	3001      	adds	r0, #1
 8016aa2:	f43f aeac 	beq.w	80167fe <_printf_float+0xb6>
 8016aa6:	f108 0801 	add.w	r8, r8, #1
 8016aaa:	e7ec      	b.n	8016a86 <_printf_float+0x33e>
 8016aac:	4613      	mov	r3, r2
 8016aae:	4631      	mov	r1, r6
 8016ab0:	4642      	mov	r2, r8
 8016ab2:	4628      	mov	r0, r5
 8016ab4:	47b8      	blx	r7
 8016ab6:	3001      	adds	r0, #1
 8016ab8:	d1c0      	bne.n	8016a3c <_printf_float+0x2f4>
 8016aba:	e6a0      	b.n	80167fe <_printf_float+0xb6>
 8016abc:	2301      	movs	r3, #1
 8016abe:	4631      	mov	r1, r6
 8016ac0:	4628      	mov	r0, r5
 8016ac2:	920b      	str	r2, [sp, #44]	; 0x2c
 8016ac4:	47b8      	blx	r7
 8016ac6:	3001      	adds	r0, #1
 8016ac8:	f43f ae99 	beq.w	80167fe <_printf_float+0xb6>
 8016acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016ace:	f10b 0b01 	add.w	fp, fp, #1
 8016ad2:	e7b9      	b.n	8016a48 <_printf_float+0x300>
 8016ad4:	4631      	mov	r1, r6
 8016ad6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016ada:	4628      	mov	r0, r5
 8016adc:	47b8      	blx	r7
 8016ade:	3001      	adds	r0, #1
 8016ae0:	d1bf      	bne.n	8016a62 <_printf_float+0x31a>
 8016ae2:	e68c      	b.n	80167fe <_printf_float+0xb6>
 8016ae4:	464b      	mov	r3, r9
 8016ae6:	4631      	mov	r1, r6
 8016ae8:	4628      	mov	r0, r5
 8016aea:	eb08 020a 	add.w	r2, r8, sl
 8016aee:	47b8      	blx	r7
 8016af0:	3001      	adds	r0, #1
 8016af2:	d1c2      	bne.n	8016a7a <_printf_float+0x332>
 8016af4:	e683      	b.n	80167fe <_printf_float+0xb6>
 8016af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016af8:	2a01      	cmp	r2, #1
 8016afa:	dc01      	bgt.n	8016b00 <_printf_float+0x3b8>
 8016afc:	07db      	lsls	r3, r3, #31
 8016afe:	d537      	bpl.n	8016b70 <_printf_float+0x428>
 8016b00:	2301      	movs	r3, #1
 8016b02:	4642      	mov	r2, r8
 8016b04:	4631      	mov	r1, r6
 8016b06:	4628      	mov	r0, r5
 8016b08:	47b8      	blx	r7
 8016b0a:	3001      	adds	r0, #1
 8016b0c:	f43f ae77 	beq.w	80167fe <_printf_float+0xb6>
 8016b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016b14:	4631      	mov	r1, r6
 8016b16:	4628      	mov	r0, r5
 8016b18:	47b8      	blx	r7
 8016b1a:	3001      	adds	r0, #1
 8016b1c:	f43f ae6f 	beq.w	80167fe <_printf_float+0xb6>
 8016b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016b24:	2200      	movs	r2, #0
 8016b26:	2300      	movs	r3, #0
 8016b28:	f7e9 ff88 	bl	8000a3c <__aeabi_dcmpeq>
 8016b2c:	b9d8      	cbnz	r0, 8016b66 <_printf_float+0x41e>
 8016b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b30:	f108 0201 	add.w	r2, r8, #1
 8016b34:	3b01      	subs	r3, #1
 8016b36:	4631      	mov	r1, r6
 8016b38:	4628      	mov	r0, r5
 8016b3a:	47b8      	blx	r7
 8016b3c:	3001      	adds	r0, #1
 8016b3e:	d10e      	bne.n	8016b5e <_printf_float+0x416>
 8016b40:	e65d      	b.n	80167fe <_printf_float+0xb6>
 8016b42:	2301      	movs	r3, #1
 8016b44:	464a      	mov	r2, r9
 8016b46:	4631      	mov	r1, r6
 8016b48:	4628      	mov	r0, r5
 8016b4a:	47b8      	blx	r7
 8016b4c:	3001      	adds	r0, #1
 8016b4e:	f43f ae56 	beq.w	80167fe <_printf_float+0xb6>
 8016b52:	f108 0801 	add.w	r8, r8, #1
 8016b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b58:	3b01      	subs	r3, #1
 8016b5a:	4543      	cmp	r3, r8
 8016b5c:	dcf1      	bgt.n	8016b42 <_printf_float+0x3fa>
 8016b5e:	4653      	mov	r3, sl
 8016b60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016b64:	e6e0      	b.n	8016928 <_printf_float+0x1e0>
 8016b66:	f04f 0800 	mov.w	r8, #0
 8016b6a:	f104 091a 	add.w	r9, r4, #26
 8016b6e:	e7f2      	b.n	8016b56 <_printf_float+0x40e>
 8016b70:	2301      	movs	r3, #1
 8016b72:	4642      	mov	r2, r8
 8016b74:	e7df      	b.n	8016b36 <_printf_float+0x3ee>
 8016b76:	2301      	movs	r3, #1
 8016b78:	464a      	mov	r2, r9
 8016b7a:	4631      	mov	r1, r6
 8016b7c:	4628      	mov	r0, r5
 8016b7e:	47b8      	blx	r7
 8016b80:	3001      	adds	r0, #1
 8016b82:	f43f ae3c 	beq.w	80167fe <_printf_float+0xb6>
 8016b86:	f108 0801 	add.w	r8, r8, #1
 8016b8a:	68e3      	ldr	r3, [r4, #12]
 8016b8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016b8e:	1a5b      	subs	r3, r3, r1
 8016b90:	4543      	cmp	r3, r8
 8016b92:	dcf0      	bgt.n	8016b76 <_printf_float+0x42e>
 8016b94:	e6fd      	b.n	8016992 <_printf_float+0x24a>
 8016b96:	f04f 0800 	mov.w	r8, #0
 8016b9a:	f104 0919 	add.w	r9, r4, #25
 8016b9e:	e7f4      	b.n	8016b8a <_printf_float+0x442>

08016ba0 <_printf_common>:
 8016ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ba4:	4616      	mov	r6, r2
 8016ba6:	4699      	mov	r9, r3
 8016ba8:	688a      	ldr	r2, [r1, #8]
 8016baa:	690b      	ldr	r3, [r1, #16]
 8016bac:	4607      	mov	r7, r0
 8016bae:	4293      	cmp	r3, r2
 8016bb0:	bfb8      	it	lt
 8016bb2:	4613      	movlt	r3, r2
 8016bb4:	6033      	str	r3, [r6, #0]
 8016bb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016bba:	460c      	mov	r4, r1
 8016bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016bc0:	b10a      	cbz	r2, 8016bc6 <_printf_common+0x26>
 8016bc2:	3301      	adds	r3, #1
 8016bc4:	6033      	str	r3, [r6, #0]
 8016bc6:	6823      	ldr	r3, [r4, #0]
 8016bc8:	0699      	lsls	r1, r3, #26
 8016bca:	bf42      	ittt	mi
 8016bcc:	6833      	ldrmi	r3, [r6, #0]
 8016bce:	3302      	addmi	r3, #2
 8016bd0:	6033      	strmi	r3, [r6, #0]
 8016bd2:	6825      	ldr	r5, [r4, #0]
 8016bd4:	f015 0506 	ands.w	r5, r5, #6
 8016bd8:	d106      	bne.n	8016be8 <_printf_common+0x48>
 8016bda:	f104 0a19 	add.w	sl, r4, #25
 8016bde:	68e3      	ldr	r3, [r4, #12]
 8016be0:	6832      	ldr	r2, [r6, #0]
 8016be2:	1a9b      	subs	r3, r3, r2
 8016be4:	42ab      	cmp	r3, r5
 8016be6:	dc28      	bgt.n	8016c3a <_printf_common+0x9a>
 8016be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016bec:	1e13      	subs	r3, r2, #0
 8016bee:	6822      	ldr	r2, [r4, #0]
 8016bf0:	bf18      	it	ne
 8016bf2:	2301      	movne	r3, #1
 8016bf4:	0692      	lsls	r2, r2, #26
 8016bf6:	d42d      	bmi.n	8016c54 <_printf_common+0xb4>
 8016bf8:	4649      	mov	r1, r9
 8016bfa:	4638      	mov	r0, r7
 8016bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c00:	47c0      	blx	r8
 8016c02:	3001      	adds	r0, #1
 8016c04:	d020      	beq.n	8016c48 <_printf_common+0xa8>
 8016c06:	6823      	ldr	r3, [r4, #0]
 8016c08:	68e5      	ldr	r5, [r4, #12]
 8016c0a:	f003 0306 	and.w	r3, r3, #6
 8016c0e:	2b04      	cmp	r3, #4
 8016c10:	bf18      	it	ne
 8016c12:	2500      	movne	r5, #0
 8016c14:	6832      	ldr	r2, [r6, #0]
 8016c16:	f04f 0600 	mov.w	r6, #0
 8016c1a:	68a3      	ldr	r3, [r4, #8]
 8016c1c:	bf08      	it	eq
 8016c1e:	1aad      	subeq	r5, r5, r2
 8016c20:	6922      	ldr	r2, [r4, #16]
 8016c22:	bf08      	it	eq
 8016c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016c28:	4293      	cmp	r3, r2
 8016c2a:	bfc4      	itt	gt
 8016c2c:	1a9b      	subgt	r3, r3, r2
 8016c2e:	18ed      	addgt	r5, r5, r3
 8016c30:	341a      	adds	r4, #26
 8016c32:	42b5      	cmp	r5, r6
 8016c34:	d11a      	bne.n	8016c6c <_printf_common+0xcc>
 8016c36:	2000      	movs	r0, #0
 8016c38:	e008      	b.n	8016c4c <_printf_common+0xac>
 8016c3a:	2301      	movs	r3, #1
 8016c3c:	4652      	mov	r2, sl
 8016c3e:	4649      	mov	r1, r9
 8016c40:	4638      	mov	r0, r7
 8016c42:	47c0      	blx	r8
 8016c44:	3001      	adds	r0, #1
 8016c46:	d103      	bne.n	8016c50 <_printf_common+0xb0>
 8016c48:	f04f 30ff 	mov.w	r0, #4294967295
 8016c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c50:	3501      	adds	r5, #1
 8016c52:	e7c4      	b.n	8016bde <_printf_common+0x3e>
 8016c54:	2030      	movs	r0, #48	; 0x30
 8016c56:	18e1      	adds	r1, r4, r3
 8016c58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016c5c:	1c5a      	adds	r2, r3, #1
 8016c5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016c62:	4422      	add	r2, r4
 8016c64:	3302      	adds	r3, #2
 8016c66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016c6a:	e7c5      	b.n	8016bf8 <_printf_common+0x58>
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	4622      	mov	r2, r4
 8016c70:	4649      	mov	r1, r9
 8016c72:	4638      	mov	r0, r7
 8016c74:	47c0      	blx	r8
 8016c76:	3001      	adds	r0, #1
 8016c78:	d0e6      	beq.n	8016c48 <_printf_common+0xa8>
 8016c7a:	3601      	adds	r6, #1
 8016c7c:	e7d9      	b.n	8016c32 <_printf_common+0x92>
	...

08016c80 <_printf_i>:
 8016c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c84:	460c      	mov	r4, r1
 8016c86:	7e27      	ldrb	r7, [r4, #24]
 8016c88:	4691      	mov	r9, r2
 8016c8a:	2f78      	cmp	r7, #120	; 0x78
 8016c8c:	4680      	mov	r8, r0
 8016c8e:	469a      	mov	sl, r3
 8016c90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016c92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c96:	d807      	bhi.n	8016ca8 <_printf_i+0x28>
 8016c98:	2f62      	cmp	r7, #98	; 0x62
 8016c9a:	d80a      	bhi.n	8016cb2 <_printf_i+0x32>
 8016c9c:	2f00      	cmp	r7, #0
 8016c9e:	f000 80d9 	beq.w	8016e54 <_printf_i+0x1d4>
 8016ca2:	2f58      	cmp	r7, #88	; 0x58
 8016ca4:	f000 80a4 	beq.w	8016df0 <_printf_i+0x170>
 8016ca8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016cb0:	e03a      	b.n	8016d28 <_printf_i+0xa8>
 8016cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016cb6:	2b15      	cmp	r3, #21
 8016cb8:	d8f6      	bhi.n	8016ca8 <_printf_i+0x28>
 8016cba:	a001      	add	r0, pc, #4	; (adr r0, 8016cc0 <_printf_i+0x40>)
 8016cbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016cc0:	08016d19 	.word	0x08016d19
 8016cc4:	08016d2d 	.word	0x08016d2d
 8016cc8:	08016ca9 	.word	0x08016ca9
 8016ccc:	08016ca9 	.word	0x08016ca9
 8016cd0:	08016ca9 	.word	0x08016ca9
 8016cd4:	08016ca9 	.word	0x08016ca9
 8016cd8:	08016d2d 	.word	0x08016d2d
 8016cdc:	08016ca9 	.word	0x08016ca9
 8016ce0:	08016ca9 	.word	0x08016ca9
 8016ce4:	08016ca9 	.word	0x08016ca9
 8016ce8:	08016ca9 	.word	0x08016ca9
 8016cec:	08016e3b 	.word	0x08016e3b
 8016cf0:	08016d5d 	.word	0x08016d5d
 8016cf4:	08016e1d 	.word	0x08016e1d
 8016cf8:	08016ca9 	.word	0x08016ca9
 8016cfc:	08016ca9 	.word	0x08016ca9
 8016d00:	08016e5d 	.word	0x08016e5d
 8016d04:	08016ca9 	.word	0x08016ca9
 8016d08:	08016d5d 	.word	0x08016d5d
 8016d0c:	08016ca9 	.word	0x08016ca9
 8016d10:	08016ca9 	.word	0x08016ca9
 8016d14:	08016e25 	.word	0x08016e25
 8016d18:	680b      	ldr	r3, [r1, #0]
 8016d1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016d1e:	1d1a      	adds	r2, r3, #4
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	600a      	str	r2, [r1, #0]
 8016d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016d28:	2301      	movs	r3, #1
 8016d2a:	e0a4      	b.n	8016e76 <_printf_i+0x1f6>
 8016d2c:	6825      	ldr	r5, [r4, #0]
 8016d2e:	6808      	ldr	r0, [r1, #0]
 8016d30:	062e      	lsls	r6, r5, #24
 8016d32:	f100 0304 	add.w	r3, r0, #4
 8016d36:	d50a      	bpl.n	8016d4e <_printf_i+0xce>
 8016d38:	6805      	ldr	r5, [r0, #0]
 8016d3a:	600b      	str	r3, [r1, #0]
 8016d3c:	2d00      	cmp	r5, #0
 8016d3e:	da03      	bge.n	8016d48 <_printf_i+0xc8>
 8016d40:	232d      	movs	r3, #45	; 0x2d
 8016d42:	426d      	negs	r5, r5
 8016d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016d48:	230a      	movs	r3, #10
 8016d4a:	485e      	ldr	r0, [pc, #376]	; (8016ec4 <_printf_i+0x244>)
 8016d4c:	e019      	b.n	8016d82 <_printf_i+0x102>
 8016d4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016d52:	6805      	ldr	r5, [r0, #0]
 8016d54:	600b      	str	r3, [r1, #0]
 8016d56:	bf18      	it	ne
 8016d58:	b22d      	sxthne	r5, r5
 8016d5a:	e7ef      	b.n	8016d3c <_printf_i+0xbc>
 8016d5c:	680b      	ldr	r3, [r1, #0]
 8016d5e:	6825      	ldr	r5, [r4, #0]
 8016d60:	1d18      	adds	r0, r3, #4
 8016d62:	6008      	str	r0, [r1, #0]
 8016d64:	0628      	lsls	r0, r5, #24
 8016d66:	d501      	bpl.n	8016d6c <_printf_i+0xec>
 8016d68:	681d      	ldr	r5, [r3, #0]
 8016d6a:	e002      	b.n	8016d72 <_printf_i+0xf2>
 8016d6c:	0669      	lsls	r1, r5, #25
 8016d6e:	d5fb      	bpl.n	8016d68 <_printf_i+0xe8>
 8016d70:	881d      	ldrh	r5, [r3, #0]
 8016d72:	2f6f      	cmp	r7, #111	; 0x6f
 8016d74:	bf0c      	ite	eq
 8016d76:	2308      	moveq	r3, #8
 8016d78:	230a      	movne	r3, #10
 8016d7a:	4852      	ldr	r0, [pc, #328]	; (8016ec4 <_printf_i+0x244>)
 8016d7c:	2100      	movs	r1, #0
 8016d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016d82:	6866      	ldr	r6, [r4, #4]
 8016d84:	2e00      	cmp	r6, #0
 8016d86:	bfa8      	it	ge
 8016d88:	6821      	ldrge	r1, [r4, #0]
 8016d8a:	60a6      	str	r6, [r4, #8]
 8016d8c:	bfa4      	itt	ge
 8016d8e:	f021 0104 	bicge.w	r1, r1, #4
 8016d92:	6021      	strge	r1, [r4, #0]
 8016d94:	b90d      	cbnz	r5, 8016d9a <_printf_i+0x11a>
 8016d96:	2e00      	cmp	r6, #0
 8016d98:	d04d      	beq.n	8016e36 <_printf_i+0x1b6>
 8016d9a:	4616      	mov	r6, r2
 8016d9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8016da0:	fb03 5711 	mls	r7, r3, r1, r5
 8016da4:	5dc7      	ldrb	r7, [r0, r7]
 8016da6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016daa:	462f      	mov	r7, r5
 8016dac:	42bb      	cmp	r3, r7
 8016dae:	460d      	mov	r5, r1
 8016db0:	d9f4      	bls.n	8016d9c <_printf_i+0x11c>
 8016db2:	2b08      	cmp	r3, #8
 8016db4:	d10b      	bne.n	8016dce <_printf_i+0x14e>
 8016db6:	6823      	ldr	r3, [r4, #0]
 8016db8:	07df      	lsls	r7, r3, #31
 8016dba:	d508      	bpl.n	8016dce <_printf_i+0x14e>
 8016dbc:	6923      	ldr	r3, [r4, #16]
 8016dbe:	6861      	ldr	r1, [r4, #4]
 8016dc0:	4299      	cmp	r1, r3
 8016dc2:	bfde      	ittt	le
 8016dc4:	2330      	movle	r3, #48	; 0x30
 8016dc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016dca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016dce:	1b92      	subs	r2, r2, r6
 8016dd0:	6122      	str	r2, [r4, #16]
 8016dd2:	464b      	mov	r3, r9
 8016dd4:	4621      	mov	r1, r4
 8016dd6:	4640      	mov	r0, r8
 8016dd8:	f8cd a000 	str.w	sl, [sp]
 8016ddc:	aa03      	add	r2, sp, #12
 8016dde:	f7ff fedf 	bl	8016ba0 <_printf_common>
 8016de2:	3001      	adds	r0, #1
 8016de4:	d14c      	bne.n	8016e80 <_printf_i+0x200>
 8016de6:	f04f 30ff 	mov.w	r0, #4294967295
 8016dea:	b004      	add	sp, #16
 8016dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016df0:	4834      	ldr	r0, [pc, #208]	; (8016ec4 <_printf_i+0x244>)
 8016df2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016df6:	680e      	ldr	r6, [r1, #0]
 8016df8:	6823      	ldr	r3, [r4, #0]
 8016dfa:	f856 5b04 	ldr.w	r5, [r6], #4
 8016dfe:	061f      	lsls	r7, r3, #24
 8016e00:	600e      	str	r6, [r1, #0]
 8016e02:	d514      	bpl.n	8016e2e <_printf_i+0x1ae>
 8016e04:	07d9      	lsls	r1, r3, #31
 8016e06:	bf44      	itt	mi
 8016e08:	f043 0320 	orrmi.w	r3, r3, #32
 8016e0c:	6023      	strmi	r3, [r4, #0]
 8016e0e:	b91d      	cbnz	r5, 8016e18 <_printf_i+0x198>
 8016e10:	6823      	ldr	r3, [r4, #0]
 8016e12:	f023 0320 	bic.w	r3, r3, #32
 8016e16:	6023      	str	r3, [r4, #0]
 8016e18:	2310      	movs	r3, #16
 8016e1a:	e7af      	b.n	8016d7c <_printf_i+0xfc>
 8016e1c:	6823      	ldr	r3, [r4, #0]
 8016e1e:	f043 0320 	orr.w	r3, r3, #32
 8016e22:	6023      	str	r3, [r4, #0]
 8016e24:	2378      	movs	r3, #120	; 0x78
 8016e26:	4828      	ldr	r0, [pc, #160]	; (8016ec8 <_printf_i+0x248>)
 8016e28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016e2c:	e7e3      	b.n	8016df6 <_printf_i+0x176>
 8016e2e:	065e      	lsls	r6, r3, #25
 8016e30:	bf48      	it	mi
 8016e32:	b2ad      	uxthmi	r5, r5
 8016e34:	e7e6      	b.n	8016e04 <_printf_i+0x184>
 8016e36:	4616      	mov	r6, r2
 8016e38:	e7bb      	b.n	8016db2 <_printf_i+0x132>
 8016e3a:	680b      	ldr	r3, [r1, #0]
 8016e3c:	6826      	ldr	r6, [r4, #0]
 8016e3e:	1d1d      	adds	r5, r3, #4
 8016e40:	6960      	ldr	r0, [r4, #20]
 8016e42:	600d      	str	r5, [r1, #0]
 8016e44:	0635      	lsls	r5, r6, #24
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	d501      	bpl.n	8016e4e <_printf_i+0x1ce>
 8016e4a:	6018      	str	r0, [r3, #0]
 8016e4c:	e002      	b.n	8016e54 <_printf_i+0x1d4>
 8016e4e:	0671      	lsls	r1, r6, #25
 8016e50:	d5fb      	bpl.n	8016e4a <_printf_i+0x1ca>
 8016e52:	8018      	strh	r0, [r3, #0]
 8016e54:	2300      	movs	r3, #0
 8016e56:	4616      	mov	r6, r2
 8016e58:	6123      	str	r3, [r4, #16]
 8016e5a:	e7ba      	b.n	8016dd2 <_printf_i+0x152>
 8016e5c:	680b      	ldr	r3, [r1, #0]
 8016e5e:	1d1a      	adds	r2, r3, #4
 8016e60:	600a      	str	r2, [r1, #0]
 8016e62:	681e      	ldr	r6, [r3, #0]
 8016e64:	2100      	movs	r1, #0
 8016e66:	4630      	mov	r0, r6
 8016e68:	6862      	ldr	r2, [r4, #4]
 8016e6a:	f002 fcb7 	bl	80197dc <memchr>
 8016e6e:	b108      	cbz	r0, 8016e74 <_printf_i+0x1f4>
 8016e70:	1b80      	subs	r0, r0, r6
 8016e72:	6060      	str	r0, [r4, #4]
 8016e74:	6863      	ldr	r3, [r4, #4]
 8016e76:	6123      	str	r3, [r4, #16]
 8016e78:	2300      	movs	r3, #0
 8016e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e7e:	e7a8      	b.n	8016dd2 <_printf_i+0x152>
 8016e80:	4632      	mov	r2, r6
 8016e82:	4649      	mov	r1, r9
 8016e84:	4640      	mov	r0, r8
 8016e86:	6923      	ldr	r3, [r4, #16]
 8016e88:	47d0      	blx	sl
 8016e8a:	3001      	adds	r0, #1
 8016e8c:	d0ab      	beq.n	8016de6 <_printf_i+0x166>
 8016e8e:	6823      	ldr	r3, [r4, #0]
 8016e90:	079b      	lsls	r3, r3, #30
 8016e92:	d413      	bmi.n	8016ebc <_printf_i+0x23c>
 8016e94:	68e0      	ldr	r0, [r4, #12]
 8016e96:	9b03      	ldr	r3, [sp, #12]
 8016e98:	4298      	cmp	r0, r3
 8016e9a:	bfb8      	it	lt
 8016e9c:	4618      	movlt	r0, r3
 8016e9e:	e7a4      	b.n	8016dea <_printf_i+0x16a>
 8016ea0:	2301      	movs	r3, #1
 8016ea2:	4632      	mov	r2, r6
 8016ea4:	4649      	mov	r1, r9
 8016ea6:	4640      	mov	r0, r8
 8016ea8:	47d0      	blx	sl
 8016eaa:	3001      	adds	r0, #1
 8016eac:	d09b      	beq.n	8016de6 <_printf_i+0x166>
 8016eae:	3501      	adds	r5, #1
 8016eb0:	68e3      	ldr	r3, [r4, #12]
 8016eb2:	9903      	ldr	r1, [sp, #12]
 8016eb4:	1a5b      	subs	r3, r3, r1
 8016eb6:	42ab      	cmp	r3, r5
 8016eb8:	dcf2      	bgt.n	8016ea0 <_printf_i+0x220>
 8016eba:	e7eb      	b.n	8016e94 <_printf_i+0x214>
 8016ebc:	2500      	movs	r5, #0
 8016ebe:	f104 0619 	add.w	r6, r4, #25
 8016ec2:	e7f5      	b.n	8016eb0 <_printf_i+0x230>
 8016ec4:	0801adda 	.word	0x0801adda
 8016ec8:	0801adeb 	.word	0x0801adeb

08016ecc <_scanf_float>:
 8016ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ed0:	b087      	sub	sp, #28
 8016ed2:	9303      	str	r3, [sp, #12]
 8016ed4:	688b      	ldr	r3, [r1, #8]
 8016ed6:	4617      	mov	r7, r2
 8016ed8:	1e5a      	subs	r2, r3, #1
 8016eda:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016ede:	bf85      	ittet	hi
 8016ee0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016ee4:	195b      	addhi	r3, r3, r5
 8016ee6:	2300      	movls	r3, #0
 8016ee8:	9302      	strhi	r3, [sp, #8]
 8016eea:	bf88      	it	hi
 8016eec:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016ef0:	468b      	mov	fp, r1
 8016ef2:	f04f 0500 	mov.w	r5, #0
 8016ef6:	bf8c      	ite	hi
 8016ef8:	608b      	strhi	r3, [r1, #8]
 8016efa:	9302      	strls	r3, [sp, #8]
 8016efc:	680b      	ldr	r3, [r1, #0]
 8016efe:	4680      	mov	r8, r0
 8016f00:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016f04:	f84b 3b1c 	str.w	r3, [fp], #28
 8016f08:	460c      	mov	r4, r1
 8016f0a:	465e      	mov	r6, fp
 8016f0c:	46aa      	mov	sl, r5
 8016f0e:	46a9      	mov	r9, r5
 8016f10:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016f14:	9501      	str	r5, [sp, #4]
 8016f16:	68a2      	ldr	r2, [r4, #8]
 8016f18:	b152      	cbz	r2, 8016f30 <_scanf_float+0x64>
 8016f1a:	683b      	ldr	r3, [r7, #0]
 8016f1c:	781b      	ldrb	r3, [r3, #0]
 8016f1e:	2b4e      	cmp	r3, #78	; 0x4e
 8016f20:	d864      	bhi.n	8016fec <_scanf_float+0x120>
 8016f22:	2b40      	cmp	r3, #64	; 0x40
 8016f24:	d83c      	bhi.n	8016fa0 <_scanf_float+0xd4>
 8016f26:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016f2a:	b2c8      	uxtb	r0, r1
 8016f2c:	280e      	cmp	r0, #14
 8016f2e:	d93a      	bls.n	8016fa6 <_scanf_float+0xda>
 8016f30:	f1b9 0f00 	cmp.w	r9, #0
 8016f34:	d003      	beq.n	8016f3e <_scanf_float+0x72>
 8016f36:	6823      	ldr	r3, [r4, #0]
 8016f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016f3c:	6023      	str	r3, [r4, #0]
 8016f3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016f42:	f1ba 0f01 	cmp.w	sl, #1
 8016f46:	f200 8113 	bhi.w	8017170 <_scanf_float+0x2a4>
 8016f4a:	455e      	cmp	r6, fp
 8016f4c:	f200 8105 	bhi.w	801715a <_scanf_float+0x28e>
 8016f50:	2501      	movs	r5, #1
 8016f52:	4628      	mov	r0, r5
 8016f54:	b007      	add	sp, #28
 8016f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f5a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016f5e:	2a0d      	cmp	r2, #13
 8016f60:	d8e6      	bhi.n	8016f30 <_scanf_float+0x64>
 8016f62:	a101      	add	r1, pc, #4	; (adr r1, 8016f68 <_scanf_float+0x9c>)
 8016f64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016f68:	080170a7 	.word	0x080170a7
 8016f6c:	08016f31 	.word	0x08016f31
 8016f70:	08016f31 	.word	0x08016f31
 8016f74:	08016f31 	.word	0x08016f31
 8016f78:	08017107 	.word	0x08017107
 8016f7c:	080170df 	.word	0x080170df
 8016f80:	08016f31 	.word	0x08016f31
 8016f84:	08016f31 	.word	0x08016f31
 8016f88:	080170b5 	.word	0x080170b5
 8016f8c:	08016f31 	.word	0x08016f31
 8016f90:	08016f31 	.word	0x08016f31
 8016f94:	08016f31 	.word	0x08016f31
 8016f98:	08016f31 	.word	0x08016f31
 8016f9c:	0801706d 	.word	0x0801706d
 8016fa0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016fa4:	e7db      	b.n	8016f5e <_scanf_float+0x92>
 8016fa6:	290e      	cmp	r1, #14
 8016fa8:	d8c2      	bhi.n	8016f30 <_scanf_float+0x64>
 8016faa:	a001      	add	r0, pc, #4	; (adr r0, 8016fb0 <_scanf_float+0xe4>)
 8016fac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016fb0:	0801705f 	.word	0x0801705f
 8016fb4:	08016f31 	.word	0x08016f31
 8016fb8:	0801705f 	.word	0x0801705f
 8016fbc:	080170f3 	.word	0x080170f3
 8016fc0:	08016f31 	.word	0x08016f31
 8016fc4:	0801700d 	.word	0x0801700d
 8016fc8:	08017049 	.word	0x08017049
 8016fcc:	08017049 	.word	0x08017049
 8016fd0:	08017049 	.word	0x08017049
 8016fd4:	08017049 	.word	0x08017049
 8016fd8:	08017049 	.word	0x08017049
 8016fdc:	08017049 	.word	0x08017049
 8016fe0:	08017049 	.word	0x08017049
 8016fe4:	08017049 	.word	0x08017049
 8016fe8:	08017049 	.word	0x08017049
 8016fec:	2b6e      	cmp	r3, #110	; 0x6e
 8016fee:	d809      	bhi.n	8017004 <_scanf_float+0x138>
 8016ff0:	2b60      	cmp	r3, #96	; 0x60
 8016ff2:	d8b2      	bhi.n	8016f5a <_scanf_float+0x8e>
 8016ff4:	2b54      	cmp	r3, #84	; 0x54
 8016ff6:	d077      	beq.n	80170e8 <_scanf_float+0x21c>
 8016ff8:	2b59      	cmp	r3, #89	; 0x59
 8016ffa:	d199      	bne.n	8016f30 <_scanf_float+0x64>
 8016ffc:	2d07      	cmp	r5, #7
 8016ffe:	d197      	bne.n	8016f30 <_scanf_float+0x64>
 8017000:	2508      	movs	r5, #8
 8017002:	e029      	b.n	8017058 <_scanf_float+0x18c>
 8017004:	2b74      	cmp	r3, #116	; 0x74
 8017006:	d06f      	beq.n	80170e8 <_scanf_float+0x21c>
 8017008:	2b79      	cmp	r3, #121	; 0x79
 801700a:	e7f6      	b.n	8016ffa <_scanf_float+0x12e>
 801700c:	6821      	ldr	r1, [r4, #0]
 801700e:	05c8      	lsls	r0, r1, #23
 8017010:	d51a      	bpl.n	8017048 <_scanf_float+0x17c>
 8017012:	9b02      	ldr	r3, [sp, #8]
 8017014:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017018:	6021      	str	r1, [r4, #0]
 801701a:	f109 0901 	add.w	r9, r9, #1
 801701e:	b11b      	cbz	r3, 8017028 <_scanf_float+0x15c>
 8017020:	3b01      	subs	r3, #1
 8017022:	3201      	adds	r2, #1
 8017024:	9302      	str	r3, [sp, #8]
 8017026:	60a2      	str	r2, [r4, #8]
 8017028:	68a3      	ldr	r3, [r4, #8]
 801702a:	3b01      	subs	r3, #1
 801702c:	60a3      	str	r3, [r4, #8]
 801702e:	6923      	ldr	r3, [r4, #16]
 8017030:	3301      	adds	r3, #1
 8017032:	6123      	str	r3, [r4, #16]
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	3b01      	subs	r3, #1
 8017038:	2b00      	cmp	r3, #0
 801703a:	607b      	str	r3, [r7, #4]
 801703c:	f340 8084 	ble.w	8017148 <_scanf_float+0x27c>
 8017040:	683b      	ldr	r3, [r7, #0]
 8017042:	3301      	adds	r3, #1
 8017044:	603b      	str	r3, [r7, #0]
 8017046:	e766      	b.n	8016f16 <_scanf_float+0x4a>
 8017048:	eb1a 0f05 	cmn.w	sl, r5
 801704c:	f47f af70 	bne.w	8016f30 <_scanf_float+0x64>
 8017050:	6822      	ldr	r2, [r4, #0]
 8017052:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8017056:	6022      	str	r2, [r4, #0]
 8017058:	f806 3b01 	strb.w	r3, [r6], #1
 801705c:	e7e4      	b.n	8017028 <_scanf_float+0x15c>
 801705e:	6822      	ldr	r2, [r4, #0]
 8017060:	0610      	lsls	r0, r2, #24
 8017062:	f57f af65 	bpl.w	8016f30 <_scanf_float+0x64>
 8017066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801706a:	e7f4      	b.n	8017056 <_scanf_float+0x18a>
 801706c:	f1ba 0f00 	cmp.w	sl, #0
 8017070:	d10e      	bne.n	8017090 <_scanf_float+0x1c4>
 8017072:	f1b9 0f00 	cmp.w	r9, #0
 8017076:	d10e      	bne.n	8017096 <_scanf_float+0x1ca>
 8017078:	6822      	ldr	r2, [r4, #0]
 801707a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801707e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017082:	d108      	bne.n	8017096 <_scanf_float+0x1ca>
 8017084:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017088:	f04f 0a01 	mov.w	sl, #1
 801708c:	6022      	str	r2, [r4, #0]
 801708e:	e7e3      	b.n	8017058 <_scanf_float+0x18c>
 8017090:	f1ba 0f02 	cmp.w	sl, #2
 8017094:	d055      	beq.n	8017142 <_scanf_float+0x276>
 8017096:	2d01      	cmp	r5, #1
 8017098:	d002      	beq.n	80170a0 <_scanf_float+0x1d4>
 801709a:	2d04      	cmp	r5, #4
 801709c:	f47f af48 	bne.w	8016f30 <_scanf_float+0x64>
 80170a0:	3501      	adds	r5, #1
 80170a2:	b2ed      	uxtb	r5, r5
 80170a4:	e7d8      	b.n	8017058 <_scanf_float+0x18c>
 80170a6:	f1ba 0f01 	cmp.w	sl, #1
 80170aa:	f47f af41 	bne.w	8016f30 <_scanf_float+0x64>
 80170ae:	f04f 0a02 	mov.w	sl, #2
 80170b2:	e7d1      	b.n	8017058 <_scanf_float+0x18c>
 80170b4:	b97d      	cbnz	r5, 80170d6 <_scanf_float+0x20a>
 80170b6:	f1b9 0f00 	cmp.w	r9, #0
 80170ba:	f47f af3c 	bne.w	8016f36 <_scanf_float+0x6a>
 80170be:	6822      	ldr	r2, [r4, #0]
 80170c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80170c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80170c8:	f47f af39 	bne.w	8016f3e <_scanf_float+0x72>
 80170cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80170d0:	2501      	movs	r5, #1
 80170d2:	6022      	str	r2, [r4, #0]
 80170d4:	e7c0      	b.n	8017058 <_scanf_float+0x18c>
 80170d6:	2d03      	cmp	r5, #3
 80170d8:	d0e2      	beq.n	80170a0 <_scanf_float+0x1d4>
 80170da:	2d05      	cmp	r5, #5
 80170dc:	e7de      	b.n	801709c <_scanf_float+0x1d0>
 80170de:	2d02      	cmp	r5, #2
 80170e0:	f47f af26 	bne.w	8016f30 <_scanf_float+0x64>
 80170e4:	2503      	movs	r5, #3
 80170e6:	e7b7      	b.n	8017058 <_scanf_float+0x18c>
 80170e8:	2d06      	cmp	r5, #6
 80170ea:	f47f af21 	bne.w	8016f30 <_scanf_float+0x64>
 80170ee:	2507      	movs	r5, #7
 80170f0:	e7b2      	b.n	8017058 <_scanf_float+0x18c>
 80170f2:	6822      	ldr	r2, [r4, #0]
 80170f4:	0591      	lsls	r1, r2, #22
 80170f6:	f57f af1b 	bpl.w	8016f30 <_scanf_float+0x64>
 80170fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80170fe:	6022      	str	r2, [r4, #0]
 8017100:	f8cd 9004 	str.w	r9, [sp, #4]
 8017104:	e7a8      	b.n	8017058 <_scanf_float+0x18c>
 8017106:	6822      	ldr	r2, [r4, #0]
 8017108:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801710c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017110:	d006      	beq.n	8017120 <_scanf_float+0x254>
 8017112:	0550      	lsls	r0, r2, #21
 8017114:	f57f af0c 	bpl.w	8016f30 <_scanf_float+0x64>
 8017118:	f1b9 0f00 	cmp.w	r9, #0
 801711c:	f43f af0f 	beq.w	8016f3e <_scanf_float+0x72>
 8017120:	0591      	lsls	r1, r2, #22
 8017122:	bf58      	it	pl
 8017124:	9901      	ldrpl	r1, [sp, #4]
 8017126:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801712a:	bf58      	it	pl
 801712c:	eba9 0101 	subpl.w	r1, r9, r1
 8017130:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017134:	f04f 0900 	mov.w	r9, #0
 8017138:	bf58      	it	pl
 801713a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801713e:	6022      	str	r2, [r4, #0]
 8017140:	e78a      	b.n	8017058 <_scanf_float+0x18c>
 8017142:	f04f 0a03 	mov.w	sl, #3
 8017146:	e787      	b.n	8017058 <_scanf_float+0x18c>
 8017148:	4639      	mov	r1, r7
 801714a:	4640      	mov	r0, r8
 801714c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017150:	4798      	blx	r3
 8017152:	2800      	cmp	r0, #0
 8017154:	f43f aedf 	beq.w	8016f16 <_scanf_float+0x4a>
 8017158:	e6ea      	b.n	8016f30 <_scanf_float+0x64>
 801715a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801715e:	463a      	mov	r2, r7
 8017160:	4640      	mov	r0, r8
 8017162:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017166:	4798      	blx	r3
 8017168:	6923      	ldr	r3, [r4, #16]
 801716a:	3b01      	subs	r3, #1
 801716c:	6123      	str	r3, [r4, #16]
 801716e:	e6ec      	b.n	8016f4a <_scanf_float+0x7e>
 8017170:	1e6b      	subs	r3, r5, #1
 8017172:	2b06      	cmp	r3, #6
 8017174:	d825      	bhi.n	80171c2 <_scanf_float+0x2f6>
 8017176:	2d02      	cmp	r5, #2
 8017178:	d836      	bhi.n	80171e8 <_scanf_float+0x31c>
 801717a:	455e      	cmp	r6, fp
 801717c:	f67f aee8 	bls.w	8016f50 <_scanf_float+0x84>
 8017180:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017184:	463a      	mov	r2, r7
 8017186:	4640      	mov	r0, r8
 8017188:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801718c:	4798      	blx	r3
 801718e:	6923      	ldr	r3, [r4, #16]
 8017190:	3b01      	subs	r3, #1
 8017192:	6123      	str	r3, [r4, #16]
 8017194:	e7f1      	b.n	801717a <_scanf_float+0x2ae>
 8017196:	9802      	ldr	r0, [sp, #8]
 8017198:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801719c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80171a0:	463a      	mov	r2, r7
 80171a2:	9002      	str	r0, [sp, #8]
 80171a4:	4640      	mov	r0, r8
 80171a6:	4798      	blx	r3
 80171a8:	6923      	ldr	r3, [r4, #16]
 80171aa:	3b01      	subs	r3, #1
 80171ac:	6123      	str	r3, [r4, #16]
 80171ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80171b2:	fa5f fa8a 	uxtb.w	sl, sl
 80171b6:	f1ba 0f02 	cmp.w	sl, #2
 80171ba:	d1ec      	bne.n	8017196 <_scanf_float+0x2ca>
 80171bc:	3d03      	subs	r5, #3
 80171be:	b2ed      	uxtb	r5, r5
 80171c0:	1b76      	subs	r6, r6, r5
 80171c2:	6823      	ldr	r3, [r4, #0]
 80171c4:	05da      	lsls	r2, r3, #23
 80171c6:	d52f      	bpl.n	8017228 <_scanf_float+0x35c>
 80171c8:	055b      	lsls	r3, r3, #21
 80171ca:	d510      	bpl.n	80171ee <_scanf_float+0x322>
 80171cc:	455e      	cmp	r6, fp
 80171ce:	f67f aebf 	bls.w	8016f50 <_scanf_float+0x84>
 80171d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80171d6:	463a      	mov	r2, r7
 80171d8:	4640      	mov	r0, r8
 80171da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80171de:	4798      	blx	r3
 80171e0:	6923      	ldr	r3, [r4, #16]
 80171e2:	3b01      	subs	r3, #1
 80171e4:	6123      	str	r3, [r4, #16]
 80171e6:	e7f1      	b.n	80171cc <_scanf_float+0x300>
 80171e8:	46aa      	mov	sl, r5
 80171ea:	9602      	str	r6, [sp, #8]
 80171ec:	e7df      	b.n	80171ae <_scanf_float+0x2e2>
 80171ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80171f2:	6923      	ldr	r3, [r4, #16]
 80171f4:	2965      	cmp	r1, #101	; 0x65
 80171f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80171fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80171fe:	6123      	str	r3, [r4, #16]
 8017200:	d00c      	beq.n	801721c <_scanf_float+0x350>
 8017202:	2945      	cmp	r1, #69	; 0x45
 8017204:	d00a      	beq.n	801721c <_scanf_float+0x350>
 8017206:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801720a:	463a      	mov	r2, r7
 801720c:	4640      	mov	r0, r8
 801720e:	4798      	blx	r3
 8017210:	6923      	ldr	r3, [r4, #16]
 8017212:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017216:	3b01      	subs	r3, #1
 8017218:	1eb5      	subs	r5, r6, #2
 801721a:	6123      	str	r3, [r4, #16]
 801721c:	463a      	mov	r2, r7
 801721e:	4640      	mov	r0, r8
 8017220:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017224:	4798      	blx	r3
 8017226:	462e      	mov	r6, r5
 8017228:	6825      	ldr	r5, [r4, #0]
 801722a:	f015 0510 	ands.w	r5, r5, #16
 801722e:	d159      	bne.n	80172e4 <_scanf_float+0x418>
 8017230:	7035      	strb	r5, [r6, #0]
 8017232:	6823      	ldr	r3, [r4, #0]
 8017234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801723c:	d11c      	bne.n	8017278 <_scanf_float+0x3ac>
 801723e:	9b01      	ldr	r3, [sp, #4]
 8017240:	454b      	cmp	r3, r9
 8017242:	eba3 0209 	sub.w	r2, r3, r9
 8017246:	d124      	bne.n	8017292 <_scanf_float+0x3c6>
 8017248:	2200      	movs	r2, #0
 801724a:	4659      	mov	r1, fp
 801724c:	4640      	mov	r0, r8
 801724e:	f000 ff47 	bl	80180e0 <_strtod_r>
 8017252:	f8d4 c000 	ldr.w	ip, [r4]
 8017256:	9b03      	ldr	r3, [sp, #12]
 8017258:	f01c 0f02 	tst.w	ip, #2
 801725c:	4606      	mov	r6, r0
 801725e:	460f      	mov	r7, r1
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	d021      	beq.n	80172a8 <_scanf_float+0x3dc>
 8017264:	9903      	ldr	r1, [sp, #12]
 8017266:	1d1a      	adds	r2, r3, #4
 8017268:	600a      	str	r2, [r1, #0]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	e9c3 6700 	strd	r6, r7, [r3]
 8017270:	68e3      	ldr	r3, [r4, #12]
 8017272:	3301      	adds	r3, #1
 8017274:	60e3      	str	r3, [r4, #12]
 8017276:	e66c      	b.n	8016f52 <_scanf_float+0x86>
 8017278:	9b04      	ldr	r3, [sp, #16]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d0e4      	beq.n	8017248 <_scanf_float+0x37c>
 801727e:	9905      	ldr	r1, [sp, #20]
 8017280:	230a      	movs	r3, #10
 8017282:	462a      	mov	r2, r5
 8017284:	4640      	mov	r0, r8
 8017286:	3101      	adds	r1, #1
 8017288:	f000 ffb6 	bl	80181f8 <_strtol_r>
 801728c:	9b04      	ldr	r3, [sp, #16]
 801728e:	9e05      	ldr	r6, [sp, #20]
 8017290:	1ac2      	subs	r2, r0, r3
 8017292:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017296:	429e      	cmp	r6, r3
 8017298:	bf28      	it	cs
 801729a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801729e:	4630      	mov	r0, r6
 80172a0:	4911      	ldr	r1, [pc, #68]	; (80172e8 <_scanf_float+0x41c>)
 80172a2:	f000 f8a3 	bl	80173ec <siprintf>
 80172a6:	e7cf      	b.n	8017248 <_scanf_float+0x37c>
 80172a8:	f01c 0f04 	tst.w	ip, #4
 80172ac:	f103 0e04 	add.w	lr, r3, #4
 80172b0:	d003      	beq.n	80172ba <_scanf_float+0x3ee>
 80172b2:	9903      	ldr	r1, [sp, #12]
 80172b4:	f8c1 e000 	str.w	lr, [r1]
 80172b8:	e7d7      	b.n	801726a <_scanf_float+0x39e>
 80172ba:	9a03      	ldr	r2, [sp, #12]
 80172bc:	f8c2 e000 	str.w	lr, [r2]
 80172c0:	f8d3 8000 	ldr.w	r8, [r3]
 80172c4:	4602      	mov	r2, r0
 80172c6:	460b      	mov	r3, r1
 80172c8:	f7e9 fbea 	bl	8000aa0 <__aeabi_dcmpun>
 80172cc:	b128      	cbz	r0, 80172da <_scanf_float+0x40e>
 80172ce:	4807      	ldr	r0, [pc, #28]	; (80172ec <_scanf_float+0x420>)
 80172d0:	f000 f888 	bl	80173e4 <nanf>
 80172d4:	f8c8 0000 	str.w	r0, [r8]
 80172d8:	e7ca      	b.n	8017270 <_scanf_float+0x3a4>
 80172da:	4630      	mov	r0, r6
 80172dc:	4639      	mov	r1, r7
 80172de:	f7e9 fc3d 	bl	8000b5c <__aeabi_d2f>
 80172e2:	e7f7      	b.n	80172d4 <_scanf_float+0x408>
 80172e4:	2500      	movs	r5, #0
 80172e6:	e634      	b.n	8016f52 <_scanf_float+0x86>
 80172e8:	0801adfc 	.word	0x0801adfc
 80172ec:	0801b218 	.word	0x0801b218

080172f0 <cleanup_glue>:
 80172f0:	b538      	push	{r3, r4, r5, lr}
 80172f2:	460c      	mov	r4, r1
 80172f4:	6809      	ldr	r1, [r1, #0]
 80172f6:	4605      	mov	r5, r0
 80172f8:	b109      	cbz	r1, 80172fe <cleanup_glue+0xe>
 80172fa:	f7ff fff9 	bl	80172f0 <cleanup_glue>
 80172fe:	4621      	mov	r1, r4
 8017300:	4628      	mov	r0, r5
 8017302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017306:	f7ff b8db 	b.w	80164c0 <_free_r>
	...

0801730c <_reclaim_reent>:
 801730c:	4b2c      	ldr	r3, [pc, #176]	; (80173c0 <_reclaim_reent+0xb4>)
 801730e:	b570      	push	{r4, r5, r6, lr}
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	4604      	mov	r4, r0
 8017314:	4283      	cmp	r3, r0
 8017316:	d051      	beq.n	80173bc <_reclaim_reent+0xb0>
 8017318:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801731a:	b143      	cbz	r3, 801732e <_reclaim_reent+0x22>
 801731c:	68db      	ldr	r3, [r3, #12]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d14a      	bne.n	80173b8 <_reclaim_reent+0xac>
 8017322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017324:	6819      	ldr	r1, [r3, #0]
 8017326:	b111      	cbz	r1, 801732e <_reclaim_reent+0x22>
 8017328:	4620      	mov	r0, r4
 801732a:	f7ff f8c9 	bl	80164c0 <_free_r>
 801732e:	6961      	ldr	r1, [r4, #20]
 8017330:	b111      	cbz	r1, 8017338 <_reclaim_reent+0x2c>
 8017332:	4620      	mov	r0, r4
 8017334:	f7ff f8c4 	bl	80164c0 <_free_r>
 8017338:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801733a:	b111      	cbz	r1, 8017342 <_reclaim_reent+0x36>
 801733c:	4620      	mov	r0, r4
 801733e:	f7ff f8bf 	bl	80164c0 <_free_r>
 8017342:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017344:	b111      	cbz	r1, 801734c <_reclaim_reent+0x40>
 8017346:	4620      	mov	r0, r4
 8017348:	f7ff f8ba 	bl	80164c0 <_free_r>
 801734c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801734e:	b111      	cbz	r1, 8017356 <_reclaim_reent+0x4a>
 8017350:	4620      	mov	r0, r4
 8017352:	f7ff f8b5 	bl	80164c0 <_free_r>
 8017356:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017358:	b111      	cbz	r1, 8017360 <_reclaim_reent+0x54>
 801735a:	4620      	mov	r0, r4
 801735c:	f7ff f8b0 	bl	80164c0 <_free_r>
 8017360:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017362:	b111      	cbz	r1, 801736a <_reclaim_reent+0x5e>
 8017364:	4620      	mov	r0, r4
 8017366:	f7ff f8ab 	bl	80164c0 <_free_r>
 801736a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801736c:	b111      	cbz	r1, 8017374 <_reclaim_reent+0x68>
 801736e:	4620      	mov	r0, r4
 8017370:	f7ff f8a6 	bl	80164c0 <_free_r>
 8017374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017376:	b111      	cbz	r1, 801737e <_reclaim_reent+0x72>
 8017378:	4620      	mov	r0, r4
 801737a:	f7ff f8a1 	bl	80164c0 <_free_r>
 801737e:	69a3      	ldr	r3, [r4, #24]
 8017380:	b1e3      	cbz	r3, 80173bc <_reclaim_reent+0xb0>
 8017382:	4620      	mov	r0, r4
 8017384:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017386:	4798      	blx	r3
 8017388:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801738a:	b1b9      	cbz	r1, 80173bc <_reclaim_reent+0xb0>
 801738c:	4620      	mov	r0, r4
 801738e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017392:	f7ff bfad 	b.w	80172f0 <cleanup_glue>
 8017396:	5949      	ldr	r1, [r1, r5]
 8017398:	b941      	cbnz	r1, 80173ac <_reclaim_reent+0xa0>
 801739a:	3504      	adds	r5, #4
 801739c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801739e:	2d80      	cmp	r5, #128	; 0x80
 80173a0:	68d9      	ldr	r1, [r3, #12]
 80173a2:	d1f8      	bne.n	8017396 <_reclaim_reent+0x8a>
 80173a4:	4620      	mov	r0, r4
 80173a6:	f7ff f88b 	bl	80164c0 <_free_r>
 80173aa:	e7ba      	b.n	8017322 <_reclaim_reent+0x16>
 80173ac:	680e      	ldr	r6, [r1, #0]
 80173ae:	4620      	mov	r0, r4
 80173b0:	f7ff f886 	bl	80164c0 <_free_r>
 80173b4:	4631      	mov	r1, r6
 80173b6:	e7ef      	b.n	8017398 <_reclaim_reent+0x8c>
 80173b8:	2500      	movs	r5, #0
 80173ba:	e7ef      	b.n	801739c <_reclaim_reent+0x90>
 80173bc:	bd70      	pop	{r4, r5, r6, pc}
 80173be:	bf00      	nop
 80173c0:	2000023c 	.word	0x2000023c

080173c4 <_sbrk_r>:
 80173c4:	b538      	push	{r3, r4, r5, lr}
 80173c6:	2300      	movs	r3, #0
 80173c8:	4d05      	ldr	r5, [pc, #20]	; (80173e0 <_sbrk_r+0x1c>)
 80173ca:	4604      	mov	r4, r0
 80173cc:	4608      	mov	r0, r1
 80173ce:	602b      	str	r3, [r5, #0]
 80173d0:	f7ee ff4a 	bl	8006268 <_sbrk>
 80173d4:	1c43      	adds	r3, r0, #1
 80173d6:	d102      	bne.n	80173de <_sbrk_r+0x1a>
 80173d8:	682b      	ldr	r3, [r5, #0]
 80173da:	b103      	cbz	r3, 80173de <_sbrk_r+0x1a>
 80173dc:	6023      	str	r3, [r4, #0]
 80173de:	bd38      	pop	{r3, r4, r5, pc}
 80173e0:	20011864 	.word	0x20011864

080173e4 <nanf>:
 80173e4:	4800      	ldr	r0, [pc, #0]	; (80173e8 <nanf+0x4>)
 80173e6:	4770      	bx	lr
 80173e8:	7fc00000 	.word	0x7fc00000

080173ec <siprintf>:
 80173ec:	b40e      	push	{r1, r2, r3}
 80173ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80173f2:	b500      	push	{lr}
 80173f4:	b09c      	sub	sp, #112	; 0x70
 80173f6:	ab1d      	add	r3, sp, #116	; 0x74
 80173f8:	9002      	str	r0, [sp, #8]
 80173fa:	9006      	str	r0, [sp, #24]
 80173fc:	9107      	str	r1, [sp, #28]
 80173fe:	9104      	str	r1, [sp, #16]
 8017400:	4808      	ldr	r0, [pc, #32]	; (8017424 <siprintf+0x38>)
 8017402:	4909      	ldr	r1, [pc, #36]	; (8017428 <siprintf+0x3c>)
 8017404:	f853 2b04 	ldr.w	r2, [r3], #4
 8017408:	9105      	str	r1, [sp, #20]
 801740a:	6800      	ldr	r0, [r0, #0]
 801740c:	a902      	add	r1, sp, #8
 801740e:	9301      	str	r3, [sp, #4]
 8017410:	f002 ff20 	bl	801a254 <_svfiprintf_r>
 8017414:	2200      	movs	r2, #0
 8017416:	9b02      	ldr	r3, [sp, #8]
 8017418:	701a      	strb	r2, [r3, #0]
 801741a:	b01c      	add	sp, #112	; 0x70
 801741c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017420:	b003      	add	sp, #12
 8017422:	4770      	bx	lr
 8017424:	2000023c 	.word	0x2000023c
 8017428:	ffff0208 	.word	0xffff0208

0801742c <__sread>:
 801742c:	b510      	push	{r4, lr}
 801742e:	460c      	mov	r4, r1
 8017430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017434:	f003 f80e 	bl	801a454 <_read_r>
 8017438:	2800      	cmp	r0, #0
 801743a:	bfab      	itete	ge
 801743c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801743e:	89a3      	ldrhlt	r3, [r4, #12]
 8017440:	181b      	addge	r3, r3, r0
 8017442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017446:	bfac      	ite	ge
 8017448:	6563      	strge	r3, [r4, #84]	; 0x54
 801744a:	81a3      	strhlt	r3, [r4, #12]
 801744c:	bd10      	pop	{r4, pc}

0801744e <__swrite>:
 801744e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017452:	461f      	mov	r7, r3
 8017454:	898b      	ldrh	r3, [r1, #12]
 8017456:	4605      	mov	r5, r0
 8017458:	05db      	lsls	r3, r3, #23
 801745a:	460c      	mov	r4, r1
 801745c:	4616      	mov	r6, r2
 801745e:	d505      	bpl.n	801746c <__swrite+0x1e>
 8017460:	2302      	movs	r3, #2
 8017462:	2200      	movs	r2, #0
 8017464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017468:	f002 f994 	bl	8019794 <_lseek_r>
 801746c:	89a3      	ldrh	r3, [r4, #12]
 801746e:	4632      	mov	r2, r6
 8017470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017474:	81a3      	strh	r3, [r4, #12]
 8017476:	4628      	mov	r0, r5
 8017478:	463b      	mov	r3, r7
 801747a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801747e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017482:	f000 bebb 	b.w	80181fc <_write_r>

08017486 <__sseek>:
 8017486:	b510      	push	{r4, lr}
 8017488:	460c      	mov	r4, r1
 801748a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801748e:	f002 f981 	bl	8019794 <_lseek_r>
 8017492:	1c43      	adds	r3, r0, #1
 8017494:	89a3      	ldrh	r3, [r4, #12]
 8017496:	bf15      	itete	ne
 8017498:	6560      	strne	r0, [r4, #84]	; 0x54
 801749a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801749e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80174a2:	81a3      	strheq	r3, [r4, #12]
 80174a4:	bf18      	it	ne
 80174a6:	81a3      	strhne	r3, [r4, #12]
 80174a8:	bd10      	pop	{r4, pc}

080174aa <__sclose>:
 80174aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174ae:	f000 beb7 	b.w	8018220 <_close_r>

080174b2 <sulp>:
 80174b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174b6:	460f      	mov	r7, r1
 80174b8:	4690      	mov	r8, r2
 80174ba:	f002 fd19 	bl	8019ef0 <__ulp>
 80174be:	4604      	mov	r4, r0
 80174c0:	460d      	mov	r5, r1
 80174c2:	f1b8 0f00 	cmp.w	r8, #0
 80174c6:	d011      	beq.n	80174ec <sulp+0x3a>
 80174c8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80174cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	dd0b      	ble.n	80174ec <sulp+0x3a>
 80174d4:	2400      	movs	r4, #0
 80174d6:	051b      	lsls	r3, r3, #20
 80174d8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80174dc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80174e0:	4622      	mov	r2, r4
 80174e2:	462b      	mov	r3, r5
 80174e4:	f7e9 f842 	bl	800056c <__aeabi_dmul>
 80174e8:	4604      	mov	r4, r0
 80174ea:	460d      	mov	r5, r1
 80174ec:	4620      	mov	r0, r4
 80174ee:	4629      	mov	r1, r5
 80174f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174f4:	0000      	movs	r0, r0
	...

080174f8 <_strtod_l>:
 80174f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174fc:	469b      	mov	fp, r3
 80174fe:	2300      	movs	r3, #0
 8017500:	b0a1      	sub	sp, #132	; 0x84
 8017502:	931c      	str	r3, [sp, #112]	; 0x70
 8017504:	4ba1      	ldr	r3, [pc, #644]	; (801778c <_strtod_l+0x294>)
 8017506:	4682      	mov	sl, r0
 8017508:	681f      	ldr	r7, [r3, #0]
 801750a:	460e      	mov	r6, r1
 801750c:	4638      	mov	r0, r7
 801750e:	9217      	str	r2, [sp, #92]	; 0x5c
 8017510:	f7e8 fe68 	bl	80001e4 <strlen>
 8017514:	f04f 0800 	mov.w	r8, #0
 8017518:	4604      	mov	r4, r0
 801751a:	f04f 0900 	mov.w	r9, #0
 801751e:	961b      	str	r6, [sp, #108]	; 0x6c
 8017520:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017522:	781a      	ldrb	r2, [r3, #0]
 8017524:	2a2b      	cmp	r2, #43	; 0x2b
 8017526:	d04c      	beq.n	80175c2 <_strtod_l+0xca>
 8017528:	d83a      	bhi.n	80175a0 <_strtod_l+0xa8>
 801752a:	2a0d      	cmp	r2, #13
 801752c:	d833      	bhi.n	8017596 <_strtod_l+0x9e>
 801752e:	2a08      	cmp	r2, #8
 8017530:	d833      	bhi.n	801759a <_strtod_l+0xa2>
 8017532:	2a00      	cmp	r2, #0
 8017534:	d03d      	beq.n	80175b2 <_strtod_l+0xba>
 8017536:	2300      	movs	r3, #0
 8017538:	930c      	str	r3, [sp, #48]	; 0x30
 801753a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801753c:	782b      	ldrb	r3, [r5, #0]
 801753e:	2b30      	cmp	r3, #48	; 0x30
 8017540:	f040 80af 	bne.w	80176a2 <_strtod_l+0x1aa>
 8017544:	786b      	ldrb	r3, [r5, #1]
 8017546:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801754a:	2b58      	cmp	r3, #88	; 0x58
 801754c:	d16c      	bne.n	8017628 <_strtod_l+0x130>
 801754e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017550:	4650      	mov	r0, sl
 8017552:	9301      	str	r3, [sp, #4]
 8017554:	ab1c      	add	r3, sp, #112	; 0x70
 8017556:	9300      	str	r3, [sp, #0]
 8017558:	4a8d      	ldr	r2, [pc, #564]	; (8017790 <_strtod_l+0x298>)
 801755a:	f8cd b008 	str.w	fp, [sp, #8]
 801755e:	ab1d      	add	r3, sp, #116	; 0x74
 8017560:	a91b      	add	r1, sp, #108	; 0x6c
 8017562:	f001 fe15 	bl	8019190 <__gethex>
 8017566:	f010 0607 	ands.w	r6, r0, #7
 801756a:	4604      	mov	r4, r0
 801756c:	d005      	beq.n	801757a <_strtod_l+0x82>
 801756e:	2e06      	cmp	r6, #6
 8017570:	d129      	bne.n	80175c6 <_strtod_l+0xce>
 8017572:	2300      	movs	r3, #0
 8017574:	3501      	adds	r5, #1
 8017576:	951b      	str	r5, [sp, #108]	; 0x6c
 8017578:	930c      	str	r3, [sp, #48]	; 0x30
 801757a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801757c:	2b00      	cmp	r3, #0
 801757e:	f040 8596 	bne.w	80180ae <_strtod_l+0xbb6>
 8017582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017584:	b1d3      	cbz	r3, 80175bc <_strtod_l+0xc4>
 8017586:	4642      	mov	r2, r8
 8017588:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801758c:	4610      	mov	r0, r2
 801758e:	4619      	mov	r1, r3
 8017590:	b021      	add	sp, #132	; 0x84
 8017592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017596:	2a20      	cmp	r2, #32
 8017598:	d1cd      	bne.n	8017536 <_strtod_l+0x3e>
 801759a:	3301      	adds	r3, #1
 801759c:	931b      	str	r3, [sp, #108]	; 0x6c
 801759e:	e7bf      	b.n	8017520 <_strtod_l+0x28>
 80175a0:	2a2d      	cmp	r2, #45	; 0x2d
 80175a2:	d1c8      	bne.n	8017536 <_strtod_l+0x3e>
 80175a4:	2201      	movs	r2, #1
 80175a6:	920c      	str	r2, [sp, #48]	; 0x30
 80175a8:	1c5a      	adds	r2, r3, #1
 80175aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80175ac:	785b      	ldrb	r3, [r3, #1]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d1c3      	bne.n	801753a <_strtod_l+0x42>
 80175b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80175b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	f040 8577 	bne.w	80180aa <_strtod_l+0xbb2>
 80175bc:	4642      	mov	r2, r8
 80175be:	464b      	mov	r3, r9
 80175c0:	e7e4      	b.n	801758c <_strtod_l+0x94>
 80175c2:	2200      	movs	r2, #0
 80175c4:	e7ef      	b.n	80175a6 <_strtod_l+0xae>
 80175c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80175c8:	b13a      	cbz	r2, 80175da <_strtod_l+0xe2>
 80175ca:	2135      	movs	r1, #53	; 0x35
 80175cc:	a81e      	add	r0, sp, #120	; 0x78
 80175ce:	f002 fd93 	bl	801a0f8 <__copybits>
 80175d2:	4650      	mov	r0, sl
 80175d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80175d6:	f002 f95b 	bl	8019890 <_Bfree>
 80175da:	3e01      	subs	r6, #1
 80175dc:	2e05      	cmp	r6, #5
 80175de:	d807      	bhi.n	80175f0 <_strtod_l+0xf8>
 80175e0:	e8df f006 	tbb	[pc, r6]
 80175e4:	1d180b0e 	.word	0x1d180b0e
 80175e8:	030e      	.short	0x030e
 80175ea:	f04f 0900 	mov.w	r9, #0
 80175ee:	46c8      	mov	r8, r9
 80175f0:	0721      	lsls	r1, r4, #28
 80175f2:	d5c2      	bpl.n	801757a <_strtod_l+0x82>
 80175f4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80175f8:	e7bf      	b.n	801757a <_strtod_l+0x82>
 80175fa:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80175fe:	e7f7      	b.n	80175f0 <_strtod_l+0xf8>
 8017600:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017602:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8017606:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801760a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801760e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8017612:	e7ed      	b.n	80175f0 <_strtod_l+0xf8>
 8017614:	f04f 0800 	mov.w	r8, #0
 8017618:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017794 <_strtod_l+0x29c>
 801761c:	e7e8      	b.n	80175f0 <_strtod_l+0xf8>
 801761e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8017622:	f04f 38ff 	mov.w	r8, #4294967295
 8017626:	e7e3      	b.n	80175f0 <_strtod_l+0xf8>
 8017628:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801762a:	1c5a      	adds	r2, r3, #1
 801762c:	921b      	str	r2, [sp, #108]	; 0x6c
 801762e:	785b      	ldrb	r3, [r3, #1]
 8017630:	2b30      	cmp	r3, #48	; 0x30
 8017632:	d0f9      	beq.n	8017628 <_strtod_l+0x130>
 8017634:	2b00      	cmp	r3, #0
 8017636:	d0a0      	beq.n	801757a <_strtod_l+0x82>
 8017638:	2301      	movs	r3, #1
 801763a:	9307      	str	r3, [sp, #28]
 801763c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801763e:	220a      	movs	r2, #10
 8017640:	9308      	str	r3, [sp, #32]
 8017642:	2300      	movs	r3, #0
 8017644:	469b      	mov	fp, r3
 8017646:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801764a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801764c:	7805      	ldrb	r5, [r0, #0]
 801764e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8017652:	b2d9      	uxtb	r1, r3
 8017654:	2909      	cmp	r1, #9
 8017656:	d926      	bls.n	80176a6 <_strtod_l+0x1ae>
 8017658:	4622      	mov	r2, r4
 801765a:	4639      	mov	r1, r7
 801765c:	f002 ff12 	bl	801a484 <strncmp>
 8017660:	2800      	cmp	r0, #0
 8017662:	d032      	beq.n	80176ca <_strtod_l+0x1d2>
 8017664:	2000      	movs	r0, #0
 8017666:	462b      	mov	r3, r5
 8017668:	465c      	mov	r4, fp
 801766a:	4602      	mov	r2, r0
 801766c:	9004      	str	r0, [sp, #16]
 801766e:	2b65      	cmp	r3, #101	; 0x65
 8017670:	d001      	beq.n	8017676 <_strtod_l+0x17e>
 8017672:	2b45      	cmp	r3, #69	; 0x45
 8017674:	d113      	bne.n	801769e <_strtod_l+0x1a6>
 8017676:	b91c      	cbnz	r4, 8017680 <_strtod_l+0x188>
 8017678:	9b07      	ldr	r3, [sp, #28]
 801767a:	4303      	orrs	r3, r0
 801767c:	d099      	beq.n	80175b2 <_strtod_l+0xba>
 801767e:	2400      	movs	r4, #0
 8017680:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8017682:	1c73      	adds	r3, r6, #1
 8017684:	931b      	str	r3, [sp, #108]	; 0x6c
 8017686:	7873      	ldrb	r3, [r6, #1]
 8017688:	2b2b      	cmp	r3, #43	; 0x2b
 801768a:	d078      	beq.n	801777e <_strtod_l+0x286>
 801768c:	2b2d      	cmp	r3, #45	; 0x2d
 801768e:	d07b      	beq.n	8017788 <_strtod_l+0x290>
 8017690:	2700      	movs	r7, #0
 8017692:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017696:	2909      	cmp	r1, #9
 8017698:	f240 8082 	bls.w	80177a0 <_strtod_l+0x2a8>
 801769c:	961b      	str	r6, [sp, #108]	; 0x6c
 801769e:	2500      	movs	r5, #0
 80176a0:	e09e      	b.n	80177e0 <_strtod_l+0x2e8>
 80176a2:	2300      	movs	r3, #0
 80176a4:	e7c9      	b.n	801763a <_strtod_l+0x142>
 80176a6:	f1bb 0f08 	cmp.w	fp, #8
 80176aa:	bfd5      	itete	le
 80176ac:	9906      	ldrle	r1, [sp, #24]
 80176ae:	9905      	ldrgt	r1, [sp, #20]
 80176b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80176b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80176b8:	f100 0001 	add.w	r0, r0, #1
 80176bc:	bfd4      	ite	le
 80176be:	9306      	strle	r3, [sp, #24]
 80176c0:	9305      	strgt	r3, [sp, #20]
 80176c2:	f10b 0b01 	add.w	fp, fp, #1
 80176c6:	901b      	str	r0, [sp, #108]	; 0x6c
 80176c8:	e7bf      	b.n	801764a <_strtod_l+0x152>
 80176ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80176cc:	191a      	adds	r2, r3, r4
 80176ce:	921b      	str	r2, [sp, #108]	; 0x6c
 80176d0:	5d1b      	ldrb	r3, [r3, r4]
 80176d2:	f1bb 0f00 	cmp.w	fp, #0
 80176d6:	d036      	beq.n	8017746 <_strtod_l+0x24e>
 80176d8:	465c      	mov	r4, fp
 80176da:	9004      	str	r0, [sp, #16]
 80176dc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80176e0:	2a09      	cmp	r2, #9
 80176e2:	d912      	bls.n	801770a <_strtod_l+0x212>
 80176e4:	2201      	movs	r2, #1
 80176e6:	e7c2      	b.n	801766e <_strtod_l+0x176>
 80176e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80176ea:	3001      	adds	r0, #1
 80176ec:	1c5a      	adds	r2, r3, #1
 80176ee:	921b      	str	r2, [sp, #108]	; 0x6c
 80176f0:	785b      	ldrb	r3, [r3, #1]
 80176f2:	2b30      	cmp	r3, #48	; 0x30
 80176f4:	d0f8      	beq.n	80176e8 <_strtod_l+0x1f0>
 80176f6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80176fa:	2a08      	cmp	r2, #8
 80176fc:	f200 84dc 	bhi.w	80180b8 <_strtod_l+0xbc0>
 8017700:	9004      	str	r0, [sp, #16]
 8017702:	2000      	movs	r0, #0
 8017704:	4604      	mov	r4, r0
 8017706:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017708:	9208      	str	r2, [sp, #32]
 801770a:	3b30      	subs	r3, #48	; 0x30
 801770c:	f100 0201 	add.w	r2, r0, #1
 8017710:	d013      	beq.n	801773a <_strtod_l+0x242>
 8017712:	9904      	ldr	r1, [sp, #16]
 8017714:	1905      	adds	r5, r0, r4
 8017716:	4411      	add	r1, r2
 8017718:	9104      	str	r1, [sp, #16]
 801771a:	4622      	mov	r2, r4
 801771c:	210a      	movs	r1, #10
 801771e:	42aa      	cmp	r2, r5
 8017720:	d113      	bne.n	801774a <_strtod_l+0x252>
 8017722:	1822      	adds	r2, r4, r0
 8017724:	2a08      	cmp	r2, #8
 8017726:	f104 0401 	add.w	r4, r4, #1
 801772a:	4404      	add	r4, r0
 801772c:	dc1b      	bgt.n	8017766 <_strtod_l+0x26e>
 801772e:	220a      	movs	r2, #10
 8017730:	9906      	ldr	r1, [sp, #24]
 8017732:	fb02 3301 	mla	r3, r2, r1, r3
 8017736:	9306      	str	r3, [sp, #24]
 8017738:	2200      	movs	r2, #0
 801773a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801773c:	4610      	mov	r0, r2
 801773e:	1c59      	adds	r1, r3, #1
 8017740:	911b      	str	r1, [sp, #108]	; 0x6c
 8017742:	785b      	ldrb	r3, [r3, #1]
 8017744:	e7ca      	b.n	80176dc <_strtod_l+0x1e4>
 8017746:	4658      	mov	r0, fp
 8017748:	e7d3      	b.n	80176f2 <_strtod_l+0x1fa>
 801774a:	2a08      	cmp	r2, #8
 801774c:	dc04      	bgt.n	8017758 <_strtod_l+0x260>
 801774e:	9f06      	ldr	r7, [sp, #24]
 8017750:	434f      	muls	r7, r1
 8017752:	9706      	str	r7, [sp, #24]
 8017754:	3201      	adds	r2, #1
 8017756:	e7e2      	b.n	801771e <_strtod_l+0x226>
 8017758:	1c57      	adds	r7, r2, #1
 801775a:	2f10      	cmp	r7, #16
 801775c:	bfde      	ittt	le
 801775e:	9f05      	ldrle	r7, [sp, #20]
 8017760:	434f      	mulle	r7, r1
 8017762:	9705      	strle	r7, [sp, #20]
 8017764:	e7f6      	b.n	8017754 <_strtod_l+0x25c>
 8017766:	2c10      	cmp	r4, #16
 8017768:	bfdf      	itttt	le
 801776a:	220a      	movle	r2, #10
 801776c:	9905      	ldrle	r1, [sp, #20]
 801776e:	fb02 3301 	mlale	r3, r2, r1, r3
 8017772:	9305      	strle	r3, [sp, #20]
 8017774:	e7e0      	b.n	8017738 <_strtod_l+0x240>
 8017776:	2300      	movs	r3, #0
 8017778:	2201      	movs	r2, #1
 801777a:	9304      	str	r3, [sp, #16]
 801777c:	e77c      	b.n	8017678 <_strtod_l+0x180>
 801777e:	2700      	movs	r7, #0
 8017780:	1cb3      	adds	r3, r6, #2
 8017782:	931b      	str	r3, [sp, #108]	; 0x6c
 8017784:	78b3      	ldrb	r3, [r6, #2]
 8017786:	e784      	b.n	8017692 <_strtod_l+0x19a>
 8017788:	2701      	movs	r7, #1
 801778a:	e7f9      	b.n	8017780 <_strtod_l+0x288>
 801778c:	0801b058 	.word	0x0801b058
 8017790:	0801ae04 	.word	0x0801ae04
 8017794:	7ff00000 	.word	0x7ff00000
 8017798:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801779a:	1c59      	adds	r1, r3, #1
 801779c:	911b      	str	r1, [sp, #108]	; 0x6c
 801779e:	785b      	ldrb	r3, [r3, #1]
 80177a0:	2b30      	cmp	r3, #48	; 0x30
 80177a2:	d0f9      	beq.n	8017798 <_strtod_l+0x2a0>
 80177a4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80177a8:	2908      	cmp	r1, #8
 80177aa:	f63f af78 	bhi.w	801769e <_strtod_l+0x1a6>
 80177ae:	f04f 0e0a 	mov.w	lr, #10
 80177b2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80177b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80177b8:	9309      	str	r3, [sp, #36]	; 0x24
 80177ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80177bc:	1c59      	adds	r1, r3, #1
 80177be:	911b      	str	r1, [sp, #108]	; 0x6c
 80177c0:	785b      	ldrb	r3, [r3, #1]
 80177c2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80177c6:	2d09      	cmp	r5, #9
 80177c8:	d935      	bls.n	8017836 <_strtod_l+0x33e>
 80177ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80177cc:	1b49      	subs	r1, r1, r5
 80177ce:	2908      	cmp	r1, #8
 80177d0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80177d4:	dc02      	bgt.n	80177dc <_strtod_l+0x2e4>
 80177d6:	4565      	cmp	r5, ip
 80177d8:	bfa8      	it	ge
 80177da:	4665      	movge	r5, ip
 80177dc:	b107      	cbz	r7, 80177e0 <_strtod_l+0x2e8>
 80177de:	426d      	negs	r5, r5
 80177e0:	2c00      	cmp	r4, #0
 80177e2:	d14c      	bne.n	801787e <_strtod_l+0x386>
 80177e4:	9907      	ldr	r1, [sp, #28]
 80177e6:	4301      	orrs	r1, r0
 80177e8:	f47f aec7 	bne.w	801757a <_strtod_l+0x82>
 80177ec:	2a00      	cmp	r2, #0
 80177ee:	f47f aee0 	bne.w	80175b2 <_strtod_l+0xba>
 80177f2:	2b69      	cmp	r3, #105	; 0x69
 80177f4:	d026      	beq.n	8017844 <_strtod_l+0x34c>
 80177f6:	dc23      	bgt.n	8017840 <_strtod_l+0x348>
 80177f8:	2b49      	cmp	r3, #73	; 0x49
 80177fa:	d023      	beq.n	8017844 <_strtod_l+0x34c>
 80177fc:	2b4e      	cmp	r3, #78	; 0x4e
 80177fe:	f47f aed8 	bne.w	80175b2 <_strtod_l+0xba>
 8017802:	499c      	ldr	r1, [pc, #624]	; (8017a74 <_strtod_l+0x57c>)
 8017804:	a81b      	add	r0, sp, #108	; 0x6c
 8017806:	f001 ff11 	bl	801962c <__match>
 801780a:	2800      	cmp	r0, #0
 801780c:	f43f aed1 	beq.w	80175b2 <_strtod_l+0xba>
 8017810:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017812:	781b      	ldrb	r3, [r3, #0]
 8017814:	2b28      	cmp	r3, #40	; 0x28
 8017816:	d12c      	bne.n	8017872 <_strtod_l+0x37a>
 8017818:	4997      	ldr	r1, [pc, #604]	; (8017a78 <_strtod_l+0x580>)
 801781a:	aa1e      	add	r2, sp, #120	; 0x78
 801781c:	a81b      	add	r0, sp, #108	; 0x6c
 801781e:	f001 ff19 	bl	8019654 <__hexnan>
 8017822:	2805      	cmp	r0, #5
 8017824:	d125      	bne.n	8017872 <_strtod_l+0x37a>
 8017826:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017828:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801782c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8017830:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8017834:	e6a1      	b.n	801757a <_strtod_l+0x82>
 8017836:	fb0e 3c0c 	mla	ip, lr, ip, r3
 801783a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801783e:	e7bc      	b.n	80177ba <_strtod_l+0x2c2>
 8017840:	2b6e      	cmp	r3, #110	; 0x6e
 8017842:	e7dc      	b.n	80177fe <_strtod_l+0x306>
 8017844:	498d      	ldr	r1, [pc, #564]	; (8017a7c <_strtod_l+0x584>)
 8017846:	a81b      	add	r0, sp, #108	; 0x6c
 8017848:	f001 fef0 	bl	801962c <__match>
 801784c:	2800      	cmp	r0, #0
 801784e:	f43f aeb0 	beq.w	80175b2 <_strtod_l+0xba>
 8017852:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017854:	498a      	ldr	r1, [pc, #552]	; (8017a80 <_strtod_l+0x588>)
 8017856:	3b01      	subs	r3, #1
 8017858:	a81b      	add	r0, sp, #108	; 0x6c
 801785a:	931b      	str	r3, [sp, #108]	; 0x6c
 801785c:	f001 fee6 	bl	801962c <__match>
 8017860:	b910      	cbnz	r0, 8017868 <_strtod_l+0x370>
 8017862:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017864:	3301      	adds	r3, #1
 8017866:	931b      	str	r3, [sp, #108]	; 0x6c
 8017868:	f04f 0800 	mov.w	r8, #0
 801786c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8017a90 <_strtod_l+0x598>
 8017870:	e683      	b.n	801757a <_strtod_l+0x82>
 8017872:	4884      	ldr	r0, [pc, #528]	; (8017a84 <_strtod_l+0x58c>)
 8017874:	f002 fe00 	bl	801a478 <nan>
 8017878:	4680      	mov	r8, r0
 801787a:	4689      	mov	r9, r1
 801787c:	e67d      	b.n	801757a <_strtod_l+0x82>
 801787e:	9b04      	ldr	r3, [sp, #16]
 8017880:	f1bb 0f00 	cmp.w	fp, #0
 8017884:	bf08      	it	eq
 8017886:	46a3      	moveq	fp, r4
 8017888:	1aeb      	subs	r3, r5, r3
 801788a:	2c10      	cmp	r4, #16
 801788c:	9806      	ldr	r0, [sp, #24]
 801788e:	4626      	mov	r6, r4
 8017890:	9307      	str	r3, [sp, #28]
 8017892:	bfa8      	it	ge
 8017894:	2610      	movge	r6, #16
 8017896:	f7e8 fdef 	bl	8000478 <__aeabi_ui2d>
 801789a:	2c09      	cmp	r4, #9
 801789c:	4680      	mov	r8, r0
 801789e:	4689      	mov	r9, r1
 80178a0:	dd13      	ble.n	80178ca <_strtod_l+0x3d2>
 80178a2:	4b79      	ldr	r3, [pc, #484]	; (8017a88 <_strtod_l+0x590>)
 80178a4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80178a8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80178ac:	f7e8 fe5e 	bl	800056c <__aeabi_dmul>
 80178b0:	4680      	mov	r8, r0
 80178b2:	9805      	ldr	r0, [sp, #20]
 80178b4:	4689      	mov	r9, r1
 80178b6:	f7e8 fddf 	bl	8000478 <__aeabi_ui2d>
 80178ba:	4602      	mov	r2, r0
 80178bc:	460b      	mov	r3, r1
 80178be:	4640      	mov	r0, r8
 80178c0:	4649      	mov	r1, r9
 80178c2:	f7e8 fc9d 	bl	8000200 <__adddf3>
 80178c6:	4680      	mov	r8, r0
 80178c8:	4689      	mov	r9, r1
 80178ca:	2c0f      	cmp	r4, #15
 80178cc:	dc36      	bgt.n	801793c <_strtod_l+0x444>
 80178ce:	9b07      	ldr	r3, [sp, #28]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	f43f ae52 	beq.w	801757a <_strtod_l+0x82>
 80178d6:	dd22      	ble.n	801791e <_strtod_l+0x426>
 80178d8:	2b16      	cmp	r3, #22
 80178da:	dc09      	bgt.n	80178f0 <_strtod_l+0x3f8>
 80178dc:	4c6a      	ldr	r4, [pc, #424]	; (8017a88 <_strtod_l+0x590>)
 80178de:	4642      	mov	r2, r8
 80178e0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80178e4:	464b      	mov	r3, r9
 80178e6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80178ea:	f7e8 fe3f 	bl	800056c <__aeabi_dmul>
 80178ee:	e7c3      	b.n	8017878 <_strtod_l+0x380>
 80178f0:	9a07      	ldr	r2, [sp, #28]
 80178f2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80178f6:	4293      	cmp	r3, r2
 80178f8:	db20      	blt.n	801793c <_strtod_l+0x444>
 80178fa:	4d63      	ldr	r5, [pc, #396]	; (8017a88 <_strtod_l+0x590>)
 80178fc:	f1c4 040f 	rsb	r4, r4, #15
 8017900:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8017904:	4642      	mov	r2, r8
 8017906:	e9d1 0100 	ldrd	r0, r1, [r1]
 801790a:	464b      	mov	r3, r9
 801790c:	f7e8 fe2e 	bl	800056c <__aeabi_dmul>
 8017910:	9b07      	ldr	r3, [sp, #28]
 8017912:	1b1c      	subs	r4, r3, r4
 8017914:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8017918:	e9d5 2300 	ldrd	r2, r3, [r5]
 801791c:	e7e5      	b.n	80178ea <_strtod_l+0x3f2>
 801791e:	9b07      	ldr	r3, [sp, #28]
 8017920:	3316      	adds	r3, #22
 8017922:	db0b      	blt.n	801793c <_strtod_l+0x444>
 8017924:	9b04      	ldr	r3, [sp, #16]
 8017926:	4a58      	ldr	r2, [pc, #352]	; (8017a88 <_strtod_l+0x590>)
 8017928:	1b5d      	subs	r5, r3, r5
 801792a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801792e:	4640      	mov	r0, r8
 8017930:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017934:	4649      	mov	r1, r9
 8017936:	f7e8 ff43 	bl	80007c0 <__aeabi_ddiv>
 801793a:	e79d      	b.n	8017878 <_strtod_l+0x380>
 801793c:	9b07      	ldr	r3, [sp, #28]
 801793e:	1ba6      	subs	r6, r4, r6
 8017940:	441e      	add	r6, r3
 8017942:	2e00      	cmp	r6, #0
 8017944:	dd71      	ble.n	8017a2a <_strtod_l+0x532>
 8017946:	f016 030f 	ands.w	r3, r6, #15
 801794a:	d00a      	beq.n	8017962 <_strtod_l+0x46a>
 801794c:	494e      	ldr	r1, [pc, #312]	; (8017a88 <_strtod_l+0x590>)
 801794e:	4642      	mov	r2, r8
 8017950:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017958:	464b      	mov	r3, r9
 801795a:	f7e8 fe07 	bl	800056c <__aeabi_dmul>
 801795e:	4680      	mov	r8, r0
 8017960:	4689      	mov	r9, r1
 8017962:	f036 060f 	bics.w	r6, r6, #15
 8017966:	d050      	beq.n	8017a0a <_strtod_l+0x512>
 8017968:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 801796c:	dd27      	ble.n	80179be <_strtod_l+0x4c6>
 801796e:	f04f 0b00 	mov.w	fp, #0
 8017972:	f8cd b010 	str.w	fp, [sp, #16]
 8017976:	f8cd b020 	str.w	fp, [sp, #32]
 801797a:	f8cd b018 	str.w	fp, [sp, #24]
 801797e:	2322      	movs	r3, #34	; 0x22
 8017980:	f04f 0800 	mov.w	r8, #0
 8017984:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8017a90 <_strtod_l+0x598>
 8017988:	f8ca 3000 	str.w	r3, [sl]
 801798c:	9b08      	ldr	r3, [sp, #32]
 801798e:	2b00      	cmp	r3, #0
 8017990:	f43f adf3 	beq.w	801757a <_strtod_l+0x82>
 8017994:	4650      	mov	r0, sl
 8017996:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017998:	f001 ff7a 	bl	8019890 <_Bfree>
 801799c:	4650      	mov	r0, sl
 801799e:	9906      	ldr	r1, [sp, #24]
 80179a0:	f001 ff76 	bl	8019890 <_Bfree>
 80179a4:	4650      	mov	r0, sl
 80179a6:	9904      	ldr	r1, [sp, #16]
 80179a8:	f001 ff72 	bl	8019890 <_Bfree>
 80179ac:	4650      	mov	r0, sl
 80179ae:	9908      	ldr	r1, [sp, #32]
 80179b0:	f001 ff6e 	bl	8019890 <_Bfree>
 80179b4:	4659      	mov	r1, fp
 80179b6:	4650      	mov	r0, sl
 80179b8:	f001 ff6a 	bl	8019890 <_Bfree>
 80179bc:	e5dd      	b.n	801757a <_strtod_l+0x82>
 80179be:	2300      	movs	r3, #0
 80179c0:	4640      	mov	r0, r8
 80179c2:	4649      	mov	r1, r9
 80179c4:	461f      	mov	r7, r3
 80179c6:	1136      	asrs	r6, r6, #4
 80179c8:	2e01      	cmp	r6, #1
 80179ca:	dc21      	bgt.n	8017a10 <_strtod_l+0x518>
 80179cc:	b10b      	cbz	r3, 80179d2 <_strtod_l+0x4da>
 80179ce:	4680      	mov	r8, r0
 80179d0:	4689      	mov	r9, r1
 80179d2:	4b2e      	ldr	r3, [pc, #184]	; (8017a8c <_strtod_l+0x594>)
 80179d4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80179d8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80179dc:	4642      	mov	r2, r8
 80179de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80179e2:	464b      	mov	r3, r9
 80179e4:	f7e8 fdc2 	bl	800056c <__aeabi_dmul>
 80179e8:	4b29      	ldr	r3, [pc, #164]	; (8017a90 <_strtod_l+0x598>)
 80179ea:	460a      	mov	r2, r1
 80179ec:	400b      	ands	r3, r1
 80179ee:	4929      	ldr	r1, [pc, #164]	; (8017a94 <_strtod_l+0x59c>)
 80179f0:	4680      	mov	r8, r0
 80179f2:	428b      	cmp	r3, r1
 80179f4:	d8bb      	bhi.n	801796e <_strtod_l+0x476>
 80179f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80179fa:	428b      	cmp	r3, r1
 80179fc:	bf86      	itte	hi
 80179fe:	f04f 38ff 	movhi.w	r8, #4294967295
 8017a02:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8017a98 <_strtod_l+0x5a0>
 8017a06:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	9305      	str	r3, [sp, #20]
 8017a0e:	e07e      	b.n	8017b0e <_strtod_l+0x616>
 8017a10:	07f2      	lsls	r2, r6, #31
 8017a12:	d507      	bpl.n	8017a24 <_strtod_l+0x52c>
 8017a14:	4b1d      	ldr	r3, [pc, #116]	; (8017a8c <_strtod_l+0x594>)
 8017a16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a1e:	f7e8 fda5 	bl	800056c <__aeabi_dmul>
 8017a22:	2301      	movs	r3, #1
 8017a24:	3701      	adds	r7, #1
 8017a26:	1076      	asrs	r6, r6, #1
 8017a28:	e7ce      	b.n	80179c8 <_strtod_l+0x4d0>
 8017a2a:	d0ee      	beq.n	8017a0a <_strtod_l+0x512>
 8017a2c:	4276      	negs	r6, r6
 8017a2e:	f016 020f 	ands.w	r2, r6, #15
 8017a32:	d00a      	beq.n	8017a4a <_strtod_l+0x552>
 8017a34:	4b14      	ldr	r3, [pc, #80]	; (8017a88 <_strtod_l+0x590>)
 8017a36:	4640      	mov	r0, r8
 8017a38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017a3c:	4649      	mov	r1, r9
 8017a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a42:	f7e8 febd 	bl	80007c0 <__aeabi_ddiv>
 8017a46:	4680      	mov	r8, r0
 8017a48:	4689      	mov	r9, r1
 8017a4a:	1136      	asrs	r6, r6, #4
 8017a4c:	d0dd      	beq.n	8017a0a <_strtod_l+0x512>
 8017a4e:	2e1f      	cmp	r6, #31
 8017a50:	dd24      	ble.n	8017a9c <_strtod_l+0x5a4>
 8017a52:	f04f 0b00 	mov.w	fp, #0
 8017a56:	f8cd b010 	str.w	fp, [sp, #16]
 8017a5a:	f8cd b020 	str.w	fp, [sp, #32]
 8017a5e:	f8cd b018 	str.w	fp, [sp, #24]
 8017a62:	2322      	movs	r3, #34	; 0x22
 8017a64:	f04f 0800 	mov.w	r8, #0
 8017a68:	f04f 0900 	mov.w	r9, #0
 8017a6c:	f8ca 3000 	str.w	r3, [sl]
 8017a70:	e78c      	b.n	801798c <_strtod_l+0x494>
 8017a72:	bf00      	nop
 8017a74:	0801add5 	.word	0x0801add5
 8017a78:	0801ae18 	.word	0x0801ae18
 8017a7c:	0801adcd 	.word	0x0801adcd
 8017a80:	0801af5c 	.word	0x0801af5c
 8017a84:	0801b218 	.word	0x0801b218
 8017a88:	0801b0f8 	.word	0x0801b0f8
 8017a8c:	0801b0d0 	.word	0x0801b0d0
 8017a90:	7ff00000 	.word	0x7ff00000
 8017a94:	7ca00000 	.word	0x7ca00000
 8017a98:	7fefffff 	.word	0x7fefffff
 8017a9c:	f016 0310 	ands.w	r3, r6, #16
 8017aa0:	bf18      	it	ne
 8017aa2:	236a      	movne	r3, #106	; 0x6a
 8017aa4:	4640      	mov	r0, r8
 8017aa6:	9305      	str	r3, [sp, #20]
 8017aa8:	4649      	mov	r1, r9
 8017aaa:	2300      	movs	r3, #0
 8017aac:	4fb2      	ldr	r7, [pc, #712]	; (8017d78 <_strtod_l+0x880>)
 8017aae:	07f2      	lsls	r2, r6, #31
 8017ab0:	d504      	bpl.n	8017abc <_strtod_l+0x5c4>
 8017ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017ab6:	f7e8 fd59 	bl	800056c <__aeabi_dmul>
 8017aba:	2301      	movs	r3, #1
 8017abc:	1076      	asrs	r6, r6, #1
 8017abe:	f107 0708 	add.w	r7, r7, #8
 8017ac2:	d1f4      	bne.n	8017aae <_strtod_l+0x5b6>
 8017ac4:	b10b      	cbz	r3, 8017aca <_strtod_l+0x5d2>
 8017ac6:	4680      	mov	r8, r0
 8017ac8:	4689      	mov	r9, r1
 8017aca:	9b05      	ldr	r3, [sp, #20]
 8017acc:	b1bb      	cbz	r3, 8017afe <_strtod_l+0x606>
 8017ace:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8017ad2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	4649      	mov	r1, r9
 8017ada:	dd10      	ble.n	8017afe <_strtod_l+0x606>
 8017adc:	2b1f      	cmp	r3, #31
 8017ade:	f340 812b 	ble.w	8017d38 <_strtod_l+0x840>
 8017ae2:	2b34      	cmp	r3, #52	; 0x34
 8017ae4:	bfd8      	it	le
 8017ae6:	f04f 32ff 	movle.w	r2, #4294967295
 8017aea:	f04f 0800 	mov.w	r8, #0
 8017aee:	bfcf      	iteee	gt
 8017af0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8017af4:	3b20      	suble	r3, #32
 8017af6:	fa02 f303 	lslle.w	r3, r2, r3
 8017afa:	ea03 0901 	andle.w	r9, r3, r1
 8017afe:	2200      	movs	r2, #0
 8017b00:	2300      	movs	r3, #0
 8017b02:	4640      	mov	r0, r8
 8017b04:	4649      	mov	r1, r9
 8017b06:	f7e8 ff99 	bl	8000a3c <__aeabi_dcmpeq>
 8017b0a:	2800      	cmp	r0, #0
 8017b0c:	d1a1      	bne.n	8017a52 <_strtod_l+0x55a>
 8017b0e:	9b06      	ldr	r3, [sp, #24]
 8017b10:	465a      	mov	r2, fp
 8017b12:	9300      	str	r3, [sp, #0]
 8017b14:	4650      	mov	r0, sl
 8017b16:	4623      	mov	r3, r4
 8017b18:	9908      	ldr	r1, [sp, #32]
 8017b1a:	f001 ff25 	bl	8019968 <__s2b>
 8017b1e:	9008      	str	r0, [sp, #32]
 8017b20:	2800      	cmp	r0, #0
 8017b22:	f43f af24 	beq.w	801796e <_strtod_l+0x476>
 8017b26:	9b04      	ldr	r3, [sp, #16]
 8017b28:	f04f 0b00 	mov.w	fp, #0
 8017b2c:	1b5d      	subs	r5, r3, r5
 8017b2e:	9b07      	ldr	r3, [sp, #28]
 8017b30:	f8cd b010 	str.w	fp, [sp, #16]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	bfb4      	ite	lt
 8017b38:	462b      	movlt	r3, r5
 8017b3a:	2300      	movge	r3, #0
 8017b3c:	930e      	str	r3, [sp, #56]	; 0x38
 8017b3e:	9b07      	ldr	r3, [sp, #28]
 8017b40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b44:	9316      	str	r3, [sp, #88]	; 0x58
 8017b46:	9b08      	ldr	r3, [sp, #32]
 8017b48:	4650      	mov	r0, sl
 8017b4a:	6859      	ldr	r1, [r3, #4]
 8017b4c:	f001 fe60 	bl	8019810 <_Balloc>
 8017b50:	9006      	str	r0, [sp, #24]
 8017b52:	2800      	cmp	r0, #0
 8017b54:	f43f af13 	beq.w	801797e <_strtod_l+0x486>
 8017b58:	9b08      	ldr	r3, [sp, #32]
 8017b5a:	300c      	adds	r0, #12
 8017b5c:	691a      	ldr	r2, [r3, #16]
 8017b5e:	f103 010c 	add.w	r1, r3, #12
 8017b62:	3202      	adds	r2, #2
 8017b64:	0092      	lsls	r2, r2, #2
 8017b66:	f7fe fc95 	bl	8016494 <memcpy>
 8017b6a:	ab1e      	add	r3, sp, #120	; 0x78
 8017b6c:	9301      	str	r3, [sp, #4]
 8017b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8017b70:	9300      	str	r3, [sp, #0]
 8017b72:	4642      	mov	r2, r8
 8017b74:	464b      	mov	r3, r9
 8017b76:	4650      	mov	r0, sl
 8017b78:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8017b7c:	f002 fa32 	bl	8019fe4 <__d2b>
 8017b80:	901c      	str	r0, [sp, #112]	; 0x70
 8017b82:	2800      	cmp	r0, #0
 8017b84:	f43f aefb 	beq.w	801797e <_strtod_l+0x486>
 8017b88:	2101      	movs	r1, #1
 8017b8a:	4650      	mov	r0, sl
 8017b8c:	f001 ff84 	bl	8019a98 <__i2b>
 8017b90:	4603      	mov	r3, r0
 8017b92:	9004      	str	r0, [sp, #16]
 8017b94:	2800      	cmp	r0, #0
 8017b96:	f43f aef2 	beq.w	801797e <_strtod_l+0x486>
 8017b9a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8017b9c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017b9e:	2d00      	cmp	r5, #0
 8017ba0:	bfab      	itete	ge
 8017ba2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8017ba4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017ba6:	18ee      	addge	r6, r5, r3
 8017ba8:	1b5c      	sublt	r4, r3, r5
 8017baa:	9b05      	ldr	r3, [sp, #20]
 8017bac:	bfa8      	it	ge
 8017bae:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8017bb0:	eba5 0503 	sub.w	r5, r5, r3
 8017bb4:	4415      	add	r5, r2
 8017bb6:	4b71      	ldr	r3, [pc, #452]	; (8017d7c <_strtod_l+0x884>)
 8017bb8:	f105 35ff 	add.w	r5, r5, #4294967295
 8017bbc:	bfb8      	it	lt
 8017bbe:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8017bc0:	429d      	cmp	r5, r3
 8017bc2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017bc6:	f280 80c9 	bge.w	8017d5c <_strtod_l+0x864>
 8017bca:	1b5b      	subs	r3, r3, r5
 8017bcc:	2b1f      	cmp	r3, #31
 8017bce:	f04f 0701 	mov.w	r7, #1
 8017bd2:	eba2 0203 	sub.w	r2, r2, r3
 8017bd6:	f300 80b6 	bgt.w	8017d46 <_strtod_l+0x84e>
 8017bda:	2500      	movs	r5, #0
 8017bdc:	fa07 f303 	lsl.w	r3, r7, r3
 8017be0:	930f      	str	r3, [sp, #60]	; 0x3c
 8017be2:	18b7      	adds	r7, r6, r2
 8017be4:	9b05      	ldr	r3, [sp, #20]
 8017be6:	42be      	cmp	r6, r7
 8017be8:	4414      	add	r4, r2
 8017bea:	441c      	add	r4, r3
 8017bec:	4633      	mov	r3, r6
 8017bee:	bfa8      	it	ge
 8017bf0:	463b      	movge	r3, r7
 8017bf2:	42a3      	cmp	r3, r4
 8017bf4:	bfa8      	it	ge
 8017bf6:	4623      	movge	r3, r4
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	bfc2      	ittt	gt
 8017bfc:	1aff      	subgt	r7, r7, r3
 8017bfe:	1ae4      	subgt	r4, r4, r3
 8017c00:	1af6      	subgt	r6, r6, r3
 8017c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	dd17      	ble.n	8017c38 <_strtod_l+0x740>
 8017c08:	461a      	mov	r2, r3
 8017c0a:	4650      	mov	r0, sl
 8017c0c:	9904      	ldr	r1, [sp, #16]
 8017c0e:	f001 fffd 	bl	8019c0c <__pow5mult>
 8017c12:	9004      	str	r0, [sp, #16]
 8017c14:	2800      	cmp	r0, #0
 8017c16:	f43f aeb2 	beq.w	801797e <_strtod_l+0x486>
 8017c1a:	4601      	mov	r1, r0
 8017c1c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017c1e:	4650      	mov	r0, sl
 8017c20:	f001 ff50 	bl	8019ac4 <__multiply>
 8017c24:	9009      	str	r0, [sp, #36]	; 0x24
 8017c26:	2800      	cmp	r0, #0
 8017c28:	f43f aea9 	beq.w	801797e <_strtod_l+0x486>
 8017c2c:	4650      	mov	r0, sl
 8017c2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017c30:	f001 fe2e 	bl	8019890 <_Bfree>
 8017c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c36:	931c      	str	r3, [sp, #112]	; 0x70
 8017c38:	2f00      	cmp	r7, #0
 8017c3a:	f300 8093 	bgt.w	8017d64 <_strtod_l+0x86c>
 8017c3e:	9b07      	ldr	r3, [sp, #28]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	dd08      	ble.n	8017c56 <_strtod_l+0x75e>
 8017c44:	4650      	mov	r0, sl
 8017c46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017c48:	9906      	ldr	r1, [sp, #24]
 8017c4a:	f001 ffdf 	bl	8019c0c <__pow5mult>
 8017c4e:	9006      	str	r0, [sp, #24]
 8017c50:	2800      	cmp	r0, #0
 8017c52:	f43f ae94 	beq.w	801797e <_strtod_l+0x486>
 8017c56:	2c00      	cmp	r4, #0
 8017c58:	dd08      	ble.n	8017c6c <_strtod_l+0x774>
 8017c5a:	4622      	mov	r2, r4
 8017c5c:	4650      	mov	r0, sl
 8017c5e:	9906      	ldr	r1, [sp, #24]
 8017c60:	f002 f82e 	bl	8019cc0 <__lshift>
 8017c64:	9006      	str	r0, [sp, #24]
 8017c66:	2800      	cmp	r0, #0
 8017c68:	f43f ae89 	beq.w	801797e <_strtod_l+0x486>
 8017c6c:	2e00      	cmp	r6, #0
 8017c6e:	dd08      	ble.n	8017c82 <_strtod_l+0x78a>
 8017c70:	4632      	mov	r2, r6
 8017c72:	4650      	mov	r0, sl
 8017c74:	9904      	ldr	r1, [sp, #16]
 8017c76:	f002 f823 	bl	8019cc0 <__lshift>
 8017c7a:	9004      	str	r0, [sp, #16]
 8017c7c:	2800      	cmp	r0, #0
 8017c7e:	f43f ae7e 	beq.w	801797e <_strtod_l+0x486>
 8017c82:	4650      	mov	r0, sl
 8017c84:	9a06      	ldr	r2, [sp, #24]
 8017c86:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017c88:	f002 f8a2 	bl	8019dd0 <__mdiff>
 8017c8c:	4683      	mov	fp, r0
 8017c8e:	2800      	cmp	r0, #0
 8017c90:	f43f ae75 	beq.w	801797e <_strtod_l+0x486>
 8017c94:	2400      	movs	r4, #0
 8017c96:	68c3      	ldr	r3, [r0, #12]
 8017c98:	9904      	ldr	r1, [sp, #16]
 8017c9a:	60c4      	str	r4, [r0, #12]
 8017c9c:	930d      	str	r3, [sp, #52]	; 0x34
 8017c9e:	f002 f87b 	bl	8019d98 <__mcmp>
 8017ca2:	42a0      	cmp	r0, r4
 8017ca4:	da70      	bge.n	8017d88 <_strtod_l+0x890>
 8017ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ca8:	ea53 0308 	orrs.w	r3, r3, r8
 8017cac:	f040 8096 	bne.w	8017ddc <_strtod_l+0x8e4>
 8017cb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	f040 8091 	bne.w	8017ddc <_strtod_l+0x8e4>
 8017cba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017cbe:	0d1b      	lsrs	r3, r3, #20
 8017cc0:	051b      	lsls	r3, r3, #20
 8017cc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017cc6:	f240 8089 	bls.w	8017ddc <_strtod_l+0x8e4>
 8017cca:	f8db 3014 	ldr.w	r3, [fp, #20]
 8017cce:	b923      	cbnz	r3, 8017cda <_strtod_l+0x7e2>
 8017cd0:	f8db 3010 	ldr.w	r3, [fp, #16]
 8017cd4:	2b01      	cmp	r3, #1
 8017cd6:	f340 8081 	ble.w	8017ddc <_strtod_l+0x8e4>
 8017cda:	4659      	mov	r1, fp
 8017cdc:	2201      	movs	r2, #1
 8017cde:	4650      	mov	r0, sl
 8017ce0:	f001 ffee 	bl	8019cc0 <__lshift>
 8017ce4:	9904      	ldr	r1, [sp, #16]
 8017ce6:	4683      	mov	fp, r0
 8017ce8:	f002 f856 	bl	8019d98 <__mcmp>
 8017cec:	2800      	cmp	r0, #0
 8017cee:	dd75      	ble.n	8017ddc <_strtod_l+0x8e4>
 8017cf0:	9905      	ldr	r1, [sp, #20]
 8017cf2:	464b      	mov	r3, r9
 8017cf4:	4a22      	ldr	r2, [pc, #136]	; (8017d80 <_strtod_l+0x888>)
 8017cf6:	2900      	cmp	r1, #0
 8017cf8:	f000 8091 	beq.w	8017e1e <_strtod_l+0x926>
 8017cfc:	ea02 0109 	and.w	r1, r2, r9
 8017d00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017d04:	f300 808b 	bgt.w	8017e1e <_strtod_l+0x926>
 8017d08:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017d0c:	f77f aea9 	ble.w	8017a62 <_strtod_l+0x56a>
 8017d10:	2300      	movs	r3, #0
 8017d12:	4a1c      	ldr	r2, [pc, #112]	; (8017d84 <_strtod_l+0x88c>)
 8017d14:	4640      	mov	r0, r8
 8017d16:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017d1a:	4649      	mov	r1, r9
 8017d1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017d20:	f7e8 fc24 	bl	800056c <__aeabi_dmul>
 8017d24:	460b      	mov	r3, r1
 8017d26:	4303      	orrs	r3, r0
 8017d28:	bf08      	it	eq
 8017d2a:	2322      	moveq	r3, #34	; 0x22
 8017d2c:	4680      	mov	r8, r0
 8017d2e:	4689      	mov	r9, r1
 8017d30:	bf08      	it	eq
 8017d32:	f8ca 3000 	streq.w	r3, [sl]
 8017d36:	e62d      	b.n	8017994 <_strtod_l+0x49c>
 8017d38:	f04f 32ff 	mov.w	r2, #4294967295
 8017d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8017d40:	ea03 0808 	and.w	r8, r3, r8
 8017d44:	e6db      	b.n	8017afe <_strtod_l+0x606>
 8017d46:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8017d4a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8017d4e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8017d52:	35e2      	adds	r5, #226	; 0xe2
 8017d54:	fa07 f505 	lsl.w	r5, r7, r5
 8017d58:	970f      	str	r7, [sp, #60]	; 0x3c
 8017d5a:	e742      	b.n	8017be2 <_strtod_l+0x6ea>
 8017d5c:	2301      	movs	r3, #1
 8017d5e:	2500      	movs	r5, #0
 8017d60:	930f      	str	r3, [sp, #60]	; 0x3c
 8017d62:	e73e      	b.n	8017be2 <_strtod_l+0x6ea>
 8017d64:	463a      	mov	r2, r7
 8017d66:	4650      	mov	r0, sl
 8017d68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017d6a:	f001 ffa9 	bl	8019cc0 <__lshift>
 8017d6e:	901c      	str	r0, [sp, #112]	; 0x70
 8017d70:	2800      	cmp	r0, #0
 8017d72:	f47f af64 	bne.w	8017c3e <_strtod_l+0x746>
 8017d76:	e602      	b.n	801797e <_strtod_l+0x486>
 8017d78:	0801ae30 	.word	0x0801ae30
 8017d7c:	fffffc02 	.word	0xfffffc02
 8017d80:	7ff00000 	.word	0x7ff00000
 8017d84:	39500000 	.word	0x39500000
 8017d88:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017d8c:	d166      	bne.n	8017e5c <_strtod_l+0x964>
 8017d8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017d94:	b35a      	cbz	r2, 8017dee <_strtod_l+0x8f6>
 8017d96:	4a9c      	ldr	r2, [pc, #624]	; (8018008 <_strtod_l+0xb10>)
 8017d98:	4293      	cmp	r3, r2
 8017d9a:	d12c      	bne.n	8017df6 <_strtod_l+0x8fe>
 8017d9c:	9b05      	ldr	r3, [sp, #20]
 8017d9e:	4640      	mov	r0, r8
 8017da0:	b303      	cbz	r3, 8017de4 <_strtod_l+0x8ec>
 8017da2:	464b      	mov	r3, r9
 8017da4:	4a99      	ldr	r2, [pc, #612]	; (801800c <_strtod_l+0xb14>)
 8017da6:	f04f 31ff 	mov.w	r1, #4294967295
 8017daa:	401a      	ands	r2, r3
 8017dac:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017db0:	d81b      	bhi.n	8017dea <_strtod_l+0x8f2>
 8017db2:	0d12      	lsrs	r2, r2, #20
 8017db4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017db8:	fa01 f303 	lsl.w	r3, r1, r3
 8017dbc:	4298      	cmp	r0, r3
 8017dbe:	d11a      	bne.n	8017df6 <_strtod_l+0x8fe>
 8017dc0:	4b93      	ldr	r3, [pc, #588]	; (8018010 <_strtod_l+0xb18>)
 8017dc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017dc4:	429a      	cmp	r2, r3
 8017dc6:	d102      	bne.n	8017dce <_strtod_l+0x8d6>
 8017dc8:	3001      	adds	r0, #1
 8017dca:	f43f add8 	beq.w	801797e <_strtod_l+0x486>
 8017dce:	f04f 0800 	mov.w	r8, #0
 8017dd2:	4b8e      	ldr	r3, [pc, #568]	; (801800c <_strtod_l+0xb14>)
 8017dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017dd6:	401a      	ands	r2, r3
 8017dd8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8017ddc:	9b05      	ldr	r3, [sp, #20]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d196      	bne.n	8017d10 <_strtod_l+0x818>
 8017de2:	e5d7      	b.n	8017994 <_strtod_l+0x49c>
 8017de4:	f04f 33ff 	mov.w	r3, #4294967295
 8017de8:	e7e8      	b.n	8017dbc <_strtod_l+0x8c4>
 8017dea:	460b      	mov	r3, r1
 8017dec:	e7e6      	b.n	8017dbc <_strtod_l+0x8c4>
 8017dee:	ea53 0308 	orrs.w	r3, r3, r8
 8017df2:	f43f af7d 	beq.w	8017cf0 <_strtod_l+0x7f8>
 8017df6:	b1e5      	cbz	r5, 8017e32 <_strtod_l+0x93a>
 8017df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dfa:	421d      	tst	r5, r3
 8017dfc:	d0ee      	beq.n	8017ddc <_strtod_l+0x8e4>
 8017dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e00:	4640      	mov	r0, r8
 8017e02:	4649      	mov	r1, r9
 8017e04:	9a05      	ldr	r2, [sp, #20]
 8017e06:	b1c3      	cbz	r3, 8017e3a <_strtod_l+0x942>
 8017e08:	f7ff fb53 	bl	80174b2 <sulp>
 8017e0c:	4602      	mov	r2, r0
 8017e0e:	460b      	mov	r3, r1
 8017e10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017e14:	f7e8 f9f4 	bl	8000200 <__adddf3>
 8017e18:	4680      	mov	r8, r0
 8017e1a:	4689      	mov	r9, r1
 8017e1c:	e7de      	b.n	8017ddc <_strtod_l+0x8e4>
 8017e1e:	4013      	ands	r3, r2
 8017e20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017e24:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8017e28:	f04f 38ff 	mov.w	r8, #4294967295
 8017e2c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017e30:	e7d4      	b.n	8017ddc <_strtod_l+0x8e4>
 8017e32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e34:	ea13 0f08 	tst.w	r3, r8
 8017e38:	e7e0      	b.n	8017dfc <_strtod_l+0x904>
 8017e3a:	f7ff fb3a 	bl	80174b2 <sulp>
 8017e3e:	4602      	mov	r2, r0
 8017e40:	460b      	mov	r3, r1
 8017e42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017e46:	f7e8 f9d9 	bl	80001fc <__aeabi_dsub>
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	4680      	mov	r8, r0
 8017e50:	4689      	mov	r9, r1
 8017e52:	f7e8 fdf3 	bl	8000a3c <__aeabi_dcmpeq>
 8017e56:	2800      	cmp	r0, #0
 8017e58:	d0c0      	beq.n	8017ddc <_strtod_l+0x8e4>
 8017e5a:	e602      	b.n	8017a62 <_strtod_l+0x56a>
 8017e5c:	4658      	mov	r0, fp
 8017e5e:	9904      	ldr	r1, [sp, #16]
 8017e60:	f002 f91c 	bl	801a09c <__ratio>
 8017e64:	2200      	movs	r2, #0
 8017e66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017e6a:	4606      	mov	r6, r0
 8017e6c:	460f      	mov	r7, r1
 8017e6e:	f7e8 fdf9 	bl	8000a64 <__aeabi_dcmple>
 8017e72:	2800      	cmp	r0, #0
 8017e74:	d075      	beq.n	8017f62 <_strtod_l+0xa6a>
 8017e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d047      	beq.n	8017f0c <_strtod_l+0xa14>
 8017e7c:	2600      	movs	r6, #0
 8017e7e:	4f65      	ldr	r7, [pc, #404]	; (8018014 <_strtod_l+0xb1c>)
 8017e80:	4d64      	ldr	r5, [pc, #400]	; (8018014 <_strtod_l+0xb1c>)
 8017e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017e88:	0d1b      	lsrs	r3, r3, #20
 8017e8a:	051b      	lsls	r3, r3, #20
 8017e8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017e90:	4b61      	ldr	r3, [pc, #388]	; (8018018 <_strtod_l+0xb20>)
 8017e92:	429a      	cmp	r2, r3
 8017e94:	f040 80c8 	bne.w	8018028 <_strtod_l+0xb30>
 8017e98:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017e9c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ea2:	4640      	mov	r0, r8
 8017ea4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8017ea8:	4649      	mov	r1, r9
 8017eaa:	f002 f821 	bl	8019ef0 <__ulp>
 8017eae:	4602      	mov	r2, r0
 8017eb0:	460b      	mov	r3, r1
 8017eb2:	4630      	mov	r0, r6
 8017eb4:	4639      	mov	r1, r7
 8017eb6:	f7e8 fb59 	bl	800056c <__aeabi_dmul>
 8017eba:	4642      	mov	r2, r8
 8017ebc:	464b      	mov	r3, r9
 8017ebe:	f7e8 f99f 	bl	8000200 <__adddf3>
 8017ec2:	460b      	mov	r3, r1
 8017ec4:	4951      	ldr	r1, [pc, #324]	; (801800c <_strtod_l+0xb14>)
 8017ec6:	4a55      	ldr	r2, [pc, #340]	; (801801c <_strtod_l+0xb24>)
 8017ec8:	4019      	ands	r1, r3
 8017eca:	4291      	cmp	r1, r2
 8017ecc:	4680      	mov	r8, r0
 8017ece:	d95e      	bls.n	8017f8e <_strtod_l+0xa96>
 8017ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ed2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017ed6:	4293      	cmp	r3, r2
 8017ed8:	d103      	bne.n	8017ee2 <_strtod_l+0x9ea>
 8017eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017edc:	3301      	adds	r3, #1
 8017ede:	f43f ad4e 	beq.w	801797e <_strtod_l+0x486>
 8017ee2:	f04f 38ff 	mov.w	r8, #4294967295
 8017ee6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8018010 <_strtod_l+0xb18>
 8017eea:	4650      	mov	r0, sl
 8017eec:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017eee:	f001 fccf 	bl	8019890 <_Bfree>
 8017ef2:	4650      	mov	r0, sl
 8017ef4:	9906      	ldr	r1, [sp, #24]
 8017ef6:	f001 fccb 	bl	8019890 <_Bfree>
 8017efa:	4650      	mov	r0, sl
 8017efc:	9904      	ldr	r1, [sp, #16]
 8017efe:	f001 fcc7 	bl	8019890 <_Bfree>
 8017f02:	4659      	mov	r1, fp
 8017f04:	4650      	mov	r0, sl
 8017f06:	f001 fcc3 	bl	8019890 <_Bfree>
 8017f0a:	e61c      	b.n	8017b46 <_strtod_l+0x64e>
 8017f0c:	f1b8 0f00 	cmp.w	r8, #0
 8017f10:	d119      	bne.n	8017f46 <_strtod_l+0xa4e>
 8017f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017f18:	b9e3      	cbnz	r3, 8017f54 <_strtod_l+0xa5c>
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	4630      	mov	r0, r6
 8017f1e:	4639      	mov	r1, r7
 8017f20:	4b3c      	ldr	r3, [pc, #240]	; (8018014 <_strtod_l+0xb1c>)
 8017f22:	f7e8 fd95 	bl	8000a50 <__aeabi_dcmplt>
 8017f26:	b9c8      	cbnz	r0, 8017f5c <_strtod_l+0xa64>
 8017f28:	2200      	movs	r2, #0
 8017f2a:	4630      	mov	r0, r6
 8017f2c:	4639      	mov	r1, r7
 8017f2e:	4b3c      	ldr	r3, [pc, #240]	; (8018020 <_strtod_l+0xb28>)
 8017f30:	f7e8 fb1c 	bl	800056c <__aeabi_dmul>
 8017f34:	4604      	mov	r4, r0
 8017f36:	460d      	mov	r5, r1
 8017f38:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8017f3c:	9418      	str	r4, [sp, #96]	; 0x60
 8017f3e:	9319      	str	r3, [sp, #100]	; 0x64
 8017f40:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8017f44:	e79d      	b.n	8017e82 <_strtod_l+0x98a>
 8017f46:	f1b8 0f01 	cmp.w	r8, #1
 8017f4a:	d103      	bne.n	8017f54 <_strtod_l+0xa5c>
 8017f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	f43f ad87 	beq.w	8017a62 <_strtod_l+0x56a>
 8017f54:	2600      	movs	r6, #0
 8017f56:	2400      	movs	r4, #0
 8017f58:	4f32      	ldr	r7, [pc, #200]	; (8018024 <_strtod_l+0xb2c>)
 8017f5a:	e791      	b.n	8017e80 <_strtod_l+0x988>
 8017f5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017f5e:	4d30      	ldr	r5, [pc, #192]	; (8018020 <_strtod_l+0xb28>)
 8017f60:	e7ea      	b.n	8017f38 <_strtod_l+0xa40>
 8017f62:	4b2f      	ldr	r3, [pc, #188]	; (8018020 <_strtod_l+0xb28>)
 8017f64:	2200      	movs	r2, #0
 8017f66:	4630      	mov	r0, r6
 8017f68:	4639      	mov	r1, r7
 8017f6a:	f7e8 faff 	bl	800056c <__aeabi_dmul>
 8017f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f70:	4604      	mov	r4, r0
 8017f72:	460d      	mov	r5, r1
 8017f74:	b933      	cbnz	r3, 8017f84 <_strtod_l+0xa8c>
 8017f76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017f7a:	9010      	str	r0, [sp, #64]	; 0x40
 8017f7c:	9311      	str	r3, [sp, #68]	; 0x44
 8017f7e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8017f82:	e77e      	b.n	8017e82 <_strtod_l+0x98a>
 8017f84:	4602      	mov	r2, r0
 8017f86:	460b      	mov	r3, r1
 8017f88:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8017f8c:	e7f7      	b.n	8017f7e <_strtod_l+0xa86>
 8017f8e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8017f92:	9b05      	ldr	r3, [sp, #20]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d1a8      	bne.n	8017eea <_strtod_l+0x9f2>
 8017f98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017f9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f9e:	0d1b      	lsrs	r3, r3, #20
 8017fa0:	051b      	lsls	r3, r3, #20
 8017fa2:	429a      	cmp	r2, r3
 8017fa4:	d1a1      	bne.n	8017eea <_strtod_l+0x9f2>
 8017fa6:	4620      	mov	r0, r4
 8017fa8:	4629      	mov	r1, r5
 8017faa:	f7e8 fe3f 	bl	8000c2c <__aeabi_d2lz>
 8017fae:	f7e8 faaf 	bl	8000510 <__aeabi_l2d>
 8017fb2:	4602      	mov	r2, r0
 8017fb4:	460b      	mov	r3, r1
 8017fb6:	4620      	mov	r0, r4
 8017fb8:	4629      	mov	r1, r5
 8017fba:	f7e8 f91f 	bl	80001fc <__aeabi_dsub>
 8017fbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017fc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017fc4:	ea43 0308 	orr.w	r3, r3, r8
 8017fc8:	4313      	orrs	r3, r2
 8017fca:	4604      	mov	r4, r0
 8017fcc:	460d      	mov	r5, r1
 8017fce:	d066      	beq.n	801809e <_strtod_l+0xba6>
 8017fd0:	a309      	add	r3, pc, #36	; (adr r3, 8017ff8 <_strtod_l+0xb00>)
 8017fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fd6:	f7e8 fd3b 	bl	8000a50 <__aeabi_dcmplt>
 8017fda:	2800      	cmp	r0, #0
 8017fdc:	f47f acda 	bne.w	8017994 <_strtod_l+0x49c>
 8017fe0:	a307      	add	r3, pc, #28	; (adr r3, 8018000 <_strtod_l+0xb08>)
 8017fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fe6:	4620      	mov	r0, r4
 8017fe8:	4629      	mov	r1, r5
 8017fea:	f7e8 fd4f 	bl	8000a8c <__aeabi_dcmpgt>
 8017fee:	2800      	cmp	r0, #0
 8017ff0:	f43f af7b 	beq.w	8017eea <_strtod_l+0x9f2>
 8017ff4:	e4ce      	b.n	8017994 <_strtod_l+0x49c>
 8017ff6:	bf00      	nop
 8017ff8:	94a03595 	.word	0x94a03595
 8017ffc:	3fdfffff 	.word	0x3fdfffff
 8018000:	35afe535 	.word	0x35afe535
 8018004:	3fe00000 	.word	0x3fe00000
 8018008:	000fffff 	.word	0x000fffff
 801800c:	7ff00000 	.word	0x7ff00000
 8018010:	7fefffff 	.word	0x7fefffff
 8018014:	3ff00000 	.word	0x3ff00000
 8018018:	7fe00000 	.word	0x7fe00000
 801801c:	7c9fffff 	.word	0x7c9fffff
 8018020:	3fe00000 	.word	0x3fe00000
 8018024:	bff00000 	.word	0xbff00000
 8018028:	9b05      	ldr	r3, [sp, #20]
 801802a:	b313      	cbz	r3, 8018072 <_strtod_l+0xb7a>
 801802c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801802e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018032:	d81e      	bhi.n	8018072 <_strtod_l+0xb7a>
 8018034:	a326      	add	r3, pc, #152	; (adr r3, 80180d0 <_strtod_l+0xbd8>)
 8018036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801803a:	4620      	mov	r0, r4
 801803c:	4629      	mov	r1, r5
 801803e:	f7e8 fd11 	bl	8000a64 <__aeabi_dcmple>
 8018042:	b190      	cbz	r0, 801806a <_strtod_l+0xb72>
 8018044:	4629      	mov	r1, r5
 8018046:	4620      	mov	r0, r4
 8018048:	f7e8 fd68 	bl	8000b1c <__aeabi_d2uiz>
 801804c:	2801      	cmp	r0, #1
 801804e:	bf38      	it	cc
 8018050:	2001      	movcc	r0, #1
 8018052:	f7e8 fa11 	bl	8000478 <__aeabi_ui2d>
 8018056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018058:	4604      	mov	r4, r0
 801805a:	460d      	mov	r5, r1
 801805c:	b9d3      	cbnz	r3, 8018094 <_strtod_l+0xb9c>
 801805e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018062:	9012      	str	r0, [sp, #72]	; 0x48
 8018064:	9313      	str	r3, [sp, #76]	; 0x4c
 8018066:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801806a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801806c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8018070:	1a9f      	subs	r7, r3, r2
 8018072:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018076:	f001 ff3b 	bl	8019ef0 <__ulp>
 801807a:	4602      	mov	r2, r0
 801807c:	460b      	mov	r3, r1
 801807e:	4630      	mov	r0, r6
 8018080:	4639      	mov	r1, r7
 8018082:	f7e8 fa73 	bl	800056c <__aeabi_dmul>
 8018086:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801808a:	f7e8 f8b9 	bl	8000200 <__adddf3>
 801808e:	4680      	mov	r8, r0
 8018090:	4689      	mov	r9, r1
 8018092:	e77e      	b.n	8017f92 <_strtod_l+0xa9a>
 8018094:	4602      	mov	r2, r0
 8018096:	460b      	mov	r3, r1
 8018098:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 801809c:	e7e3      	b.n	8018066 <_strtod_l+0xb6e>
 801809e:	a30e      	add	r3, pc, #56	; (adr r3, 80180d8 <_strtod_l+0xbe0>)
 80180a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180a4:	f7e8 fcd4 	bl	8000a50 <__aeabi_dcmplt>
 80180a8:	e7a1      	b.n	8017fee <_strtod_l+0xaf6>
 80180aa:	2300      	movs	r3, #0
 80180ac:	930c      	str	r3, [sp, #48]	; 0x30
 80180ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80180b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80180b2:	6013      	str	r3, [r2, #0]
 80180b4:	f7ff ba65 	b.w	8017582 <_strtod_l+0x8a>
 80180b8:	2b65      	cmp	r3, #101	; 0x65
 80180ba:	f43f ab5c 	beq.w	8017776 <_strtod_l+0x27e>
 80180be:	2b45      	cmp	r3, #69	; 0x45
 80180c0:	f43f ab59 	beq.w	8017776 <_strtod_l+0x27e>
 80180c4:	2201      	movs	r2, #1
 80180c6:	f7ff bb8d 	b.w	80177e4 <_strtod_l+0x2ec>
 80180ca:	bf00      	nop
 80180cc:	f3af 8000 	nop.w
 80180d0:	ffc00000 	.word	0xffc00000
 80180d4:	41dfffff 	.word	0x41dfffff
 80180d8:	94a03595 	.word	0x94a03595
 80180dc:	3fcfffff 	.word	0x3fcfffff

080180e0 <_strtod_r>:
 80180e0:	4b01      	ldr	r3, [pc, #4]	; (80180e8 <_strtod_r+0x8>)
 80180e2:	f7ff ba09 	b.w	80174f8 <_strtod_l>
 80180e6:	bf00      	nop
 80180e8:	200002a4 	.word	0x200002a4

080180ec <_strtol_l.isra.0>:
 80180ec:	2b01      	cmp	r3, #1
 80180ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180f2:	4686      	mov	lr, r0
 80180f4:	d001      	beq.n	80180fa <_strtol_l.isra.0+0xe>
 80180f6:	2b24      	cmp	r3, #36	; 0x24
 80180f8:	d906      	bls.n	8018108 <_strtol_l.isra.0+0x1c>
 80180fa:	f7fe f897 	bl	801622c <__errno>
 80180fe:	2316      	movs	r3, #22
 8018100:	6003      	str	r3, [r0, #0]
 8018102:	2000      	movs	r0, #0
 8018104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018108:	468c      	mov	ip, r1
 801810a:	4e3a      	ldr	r6, [pc, #232]	; (80181f4 <_strtol_l.isra.0+0x108>)
 801810c:	4660      	mov	r0, ip
 801810e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8018112:	5da5      	ldrb	r5, [r4, r6]
 8018114:	f015 0508 	ands.w	r5, r5, #8
 8018118:	d1f8      	bne.n	801810c <_strtol_l.isra.0+0x20>
 801811a:	2c2d      	cmp	r4, #45	; 0x2d
 801811c:	d133      	bne.n	8018186 <_strtol_l.isra.0+0x9a>
 801811e:	f04f 0801 	mov.w	r8, #1
 8018122:	f89c 4000 	ldrb.w	r4, [ip]
 8018126:	f100 0c02 	add.w	ip, r0, #2
 801812a:	2b00      	cmp	r3, #0
 801812c:	d05d      	beq.n	80181ea <_strtol_l.isra.0+0xfe>
 801812e:	2b10      	cmp	r3, #16
 8018130:	d10c      	bne.n	801814c <_strtol_l.isra.0+0x60>
 8018132:	2c30      	cmp	r4, #48	; 0x30
 8018134:	d10a      	bne.n	801814c <_strtol_l.isra.0+0x60>
 8018136:	f89c 0000 	ldrb.w	r0, [ip]
 801813a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801813e:	2858      	cmp	r0, #88	; 0x58
 8018140:	d14e      	bne.n	80181e0 <_strtol_l.isra.0+0xf4>
 8018142:	2310      	movs	r3, #16
 8018144:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8018148:	f10c 0c02 	add.w	ip, ip, #2
 801814c:	2500      	movs	r5, #0
 801814e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8018152:	3f01      	subs	r7, #1
 8018154:	fbb7 f9f3 	udiv	r9, r7, r3
 8018158:	4628      	mov	r0, r5
 801815a:	fb03 7a19 	mls	sl, r3, r9, r7
 801815e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8018162:	2e09      	cmp	r6, #9
 8018164:	d818      	bhi.n	8018198 <_strtol_l.isra.0+0xac>
 8018166:	4634      	mov	r4, r6
 8018168:	42a3      	cmp	r3, r4
 801816a:	dd24      	ble.n	80181b6 <_strtol_l.isra.0+0xca>
 801816c:	2d00      	cmp	r5, #0
 801816e:	db1f      	blt.n	80181b0 <_strtol_l.isra.0+0xc4>
 8018170:	4581      	cmp	r9, r0
 8018172:	d31d      	bcc.n	80181b0 <_strtol_l.isra.0+0xc4>
 8018174:	d101      	bne.n	801817a <_strtol_l.isra.0+0x8e>
 8018176:	45a2      	cmp	sl, r4
 8018178:	db1a      	blt.n	80181b0 <_strtol_l.isra.0+0xc4>
 801817a:	2501      	movs	r5, #1
 801817c:	fb00 4003 	mla	r0, r0, r3, r4
 8018180:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8018184:	e7eb      	b.n	801815e <_strtol_l.isra.0+0x72>
 8018186:	2c2b      	cmp	r4, #43	; 0x2b
 8018188:	bf08      	it	eq
 801818a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801818e:	46a8      	mov	r8, r5
 8018190:	bf08      	it	eq
 8018192:	f100 0c02 	addeq.w	ip, r0, #2
 8018196:	e7c8      	b.n	801812a <_strtol_l.isra.0+0x3e>
 8018198:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801819c:	2e19      	cmp	r6, #25
 801819e:	d801      	bhi.n	80181a4 <_strtol_l.isra.0+0xb8>
 80181a0:	3c37      	subs	r4, #55	; 0x37
 80181a2:	e7e1      	b.n	8018168 <_strtol_l.isra.0+0x7c>
 80181a4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80181a8:	2e19      	cmp	r6, #25
 80181aa:	d804      	bhi.n	80181b6 <_strtol_l.isra.0+0xca>
 80181ac:	3c57      	subs	r4, #87	; 0x57
 80181ae:	e7db      	b.n	8018168 <_strtol_l.isra.0+0x7c>
 80181b0:	f04f 35ff 	mov.w	r5, #4294967295
 80181b4:	e7e4      	b.n	8018180 <_strtol_l.isra.0+0x94>
 80181b6:	2d00      	cmp	r5, #0
 80181b8:	da08      	bge.n	80181cc <_strtol_l.isra.0+0xe0>
 80181ba:	2322      	movs	r3, #34	; 0x22
 80181bc:	4638      	mov	r0, r7
 80181be:	f8ce 3000 	str.w	r3, [lr]
 80181c2:	2a00      	cmp	r2, #0
 80181c4:	d09e      	beq.n	8018104 <_strtol_l.isra.0+0x18>
 80181c6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80181ca:	e007      	b.n	80181dc <_strtol_l.isra.0+0xf0>
 80181cc:	f1b8 0f00 	cmp.w	r8, #0
 80181d0:	d000      	beq.n	80181d4 <_strtol_l.isra.0+0xe8>
 80181d2:	4240      	negs	r0, r0
 80181d4:	2a00      	cmp	r2, #0
 80181d6:	d095      	beq.n	8018104 <_strtol_l.isra.0+0x18>
 80181d8:	2d00      	cmp	r5, #0
 80181da:	d1f4      	bne.n	80181c6 <_strtol_l.isra.0+0xda>
 80181dc:	6011      	str	r1, [r2, #0]
 80181de:	e791      	b.n	8018104 <_strtol_l.isra.0+0x18>
 80181e0:	2430      	movs	r4, #48	; 0x30
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d1b2      	bne.n	801814c <_strtol_l.isra.0+0x60>
 80181e6:	2308      	movs	r3, #8
 80181e8:	e7b0      	b.n	801814c <_strtol_l.isra.0+0x60>
 80181ea:	2c30      	cmp	r4, #48	; 0x30
 80181ec:	d0a3      	beq.n	8018136 <_strtol_l.isra.0+0x4a>
 80181ee:	230a      	movs	r3, #10
 80181f0:	e7ac      	b.n	801814c <_strtol_l.isra.0+0x60>
 80181f2:	bf00      	nop
 80181f4:	0801ae59 	.word	0x0801ae59

080181f8 <_strtol_r>:
 80181f8:	f7ff bf78 	b.w	80180ec <_strtol_l.isra.0>

080181fc <_write_r>:
 80181fc:	b538      	push	{r3, r4, r5, lr}
 80181fe:	4604      	mov	r4, r0
 8018200:	4608      	mov	r0, r1
 8018202:	4611      	mov	r1, r2
 8018204:	2200      	movs	r2, #0
 8018206:	4d05      	ldr	r5, [pc, #20]	; (801821c <_write_r+0x20>)
 8018208:	602a      	str	r2, [r5, #0]
 801820a:	461a      	mov	r2, r3
 801820c:	f7ed ffe0 	bl	80061d0 <_write>
 8018210:	1c43      	adds	r3, r0, #1
 8018212:	d102      	bne.n	801821a <_write_r+0x1e>
 8018214:	682b      	ldr	r3, [r5, #0]
 8018216:	b103      	cbz	r3, 801821a <_write_r+0x1e>
 8018218:	6023      	str	r3, [r4, #0]
 801821a:	bd38      	pop	{r3, r4, r5, pc}
 801821c:	20011864 	.word	0x20011864

08018220 <_close_r>:
 8018220:	b538      	push	{r3, r4, r5, lr}
 8018222:	2300      	movs	r3, #0
 8018224:	4d05      	ldr	r5, [pc, #20]	; (801823c <_close_r+0x1c>)
 8018226:	4604      	mov	r4, r0
 8018228:	4608      	mov	r0, r1
 801822a:	602b      	str	r3, [r5, #0]
 801822c:	f7ed ffec 	bl	8006208 <_close>
 8018230:	1c43      	adds	r3, r0, #1
 8018232:	d102      	bne.n	801823a <_close_r+0x1a>
 8018234:	682b      	ldr	r3, [r5, #0]
 8018236:	b103      	cbz	r3, 801823a <_close_r+0x1a>
 8018238:	6023      	str	r3, [r4, #0]
 801823a:	bd38      	pop	{r3, r4, r5, pc}
 801823c:	20011864 	.word	0x20011864

08018240 <quorem>:
 8018240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018244:	6903      	ldr	r3, [r0, #16]
 8018246:	690c      	ldr	r4, [r1, #16]
 8018248:	4607      	mov	r7, r0
 801824a:	42a3      	cmp	r3, r4
 801824c:	f2c0 8083 	blt.w	8018356 <quorem+0x116>
 8018250:	3c01      	subs	r4, #1
 8018252:	f100 0514 	add.w	r5, r0, #20
 8018256:	f101 0814 	add.w	r8, r1, #20
 801825a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801825e:	9301      	str	r3, [sp, #4]
 8018260:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018264:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018268:	3301      	adds	r3, #1
 801826a:	429a      	cmp	r2, r3
 801826c:	fbb2 f6f3 	udiv	r6, r2, r3
 8018270:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018274:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018278:	d332      	bcc.n	80182e0 <quorem+0xa0>
 801827a:	f04f 0e00 	mov.w	lr, #0
 801827e:	4640      	mov	r0, r8
 8018280:	46ac      	mov	ip, r5
 8018282:	46f2      	mov	sl, lr
 8018284:	f850 2b04 	ldr.w	r2, [r0], #4
 8018288:	b293      	uxth	r3, r2
 801828a:	fb06 e303 	mla	r3, r6, r3, lr
 801828e:	0c12      	lsrs	r2, r2, #16
 8018290:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018294:	fb06 e202 	mla	r2, r6, r2, lr
 8018298:	b29b      	uxth	r3, r3
 801829a:	ebaa 0303 	sub.w	r3, sl, r3
 801829e:	f8dc a000 	ldr.w	sl, [ip]
 80182a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80182a6:	fa1f fa8a 	uxth.w	sl, sl
 80182aa:	4453      	add	r3, sl
 80182ac:	fa1f fa82 	uxth.w	sl, r2
 80182b0:	f8dc 2000 	ldr.w	r2, [ip]
 80182b4:	4581      	cmp	r9, r0
 80182b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80182ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80182be:	b29b      	uxth	r3, r3
 80182c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80182c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80182c8:	f84c 3b04 	str.w	r3, [ip], #4
 80182cc:	d2da      	bcs.n	8018284 <quorem+0x44>
 80182ce:	f855 300b 	ldr.w	r3, [r5, fp]
 80182d2:	b92b      	cbnz	r3, 80182e0 <quorem+0xa0>
 80182d4:	9b01      	ldr	r3, [sp, #4]
 80182d6:	3b04      	subs	r3, #4
 80182d8:	429d      	cmp	r5, r3
 80182da:	461a      	mov	r2, r3
 80182dc:	d32f      	bcc.n	801833e <quorem+0xfe>
 80182de:	613c      	str	r4, [r7, #16]
 80182e0:	4638      	mov	r0, r7
 80182e2:	f001 fd59 	bl	8019d98 <__mcmp>
 80182e6:	2800      	cmp	r0, #0
 80182e8:	db25      	blt.n	8018336 <quorem+0xf6>
 80182ea:	4628      	mov	r0, r5
 80182ec:	f04f 0c00 	mov.w	ip, #0
 80182f0:	3601      	adds	r6, #1
 80182f2:	f858 1b04 	ldr.w	r1, [r8], #4
 80182f6:	f8d0 e000 	ldr.w	lr, [r0]
 80182fa:	b28b      	uxth	r3, r1
 80182fc:	ebac 0303 	sub.w	r3, ip, r3
 8018300:	fa1f f28e 	uxth.w	r2, lr
 8018304:	4413      	add	r3, r2
 8018306:	0c0a      	lsrs	r2, r1, #16
 8018308:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801830c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018310:	b29b      	uxth	r3, r3
 8018312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018316:	45c1      	cmp	r9, r8
 8018318:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801831c:	f840 3b04 	str.w	r3, [r0], #4
 8018320:	d2e7      	bcs.n	80182f2 <quorem+0xb2>
 8018322:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801832a:	b922      	cbnz	r2, 8018336 <quorem+0xf6>
 801832c:	3b04      	subs	r3, #4
 801832e:	429d      	cmp	r5, r3
 8018330:	461a      	mov	r2, r3
 8018332:	d30a      	bcc.n	801834a <quorem+0x10a>
 8018334:	613c      	str	r4, [r7, #16]
 8018336:	4630      	mov	r0, r6
 8018338:	b003      	add	sp, #12
 801833a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801833e:	6812      	ldr	r2, [r2, #0]
 8018340:	3b04      	subs	r3, #4
 8018342:	2a00      	cmp	r2, #0
 8018344:	d1cb      	bne.n	80182de <quorem+0x9e>
 8018346:	3c01      	subs	r4, #1
 8018348:	e7c6      	b.n	80182d8 <quorem+0x98>
 801834a:	6812      	ldr	r2, [r2, #0]
 801834c:	3b04      	subs	r3, #4
 801834e:	2a00      	cmp	r2, #0
 8018350:	d1f0      	bne.n	8018334 <quorem+0xf4>
 8018352:	3c01      	subs	r4, #1
 8018354:	e7eb      	b.n	801832e <quorem+0xee>
 8018356:	2000      	movs	r0, #0
 8018358:	e7ee      	b.n	8018338 <quorem+0xf8>
 801835a:	0000      	movs	r0, r0
 801835c:	0000      	movs	r0, r0
	...

08018360 <_dtoa_r>:
 8018360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018364:	4616      	mov	r6, r2
 8018366:	461f      	mov	r7, r3
 8018368:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801836a:	b099      	sub	sp, #100	; 0x64
 801836c:	4605      	mov	r5, r0
 801836e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018372:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8018376:	b974      	cbnz	r4, 8018396 <_dtoa_r+0x36>
 8018378:	2010      	movs	r0, #16
 801837a:	f7fe f87b 	bl	8016474 <malloc>
 801837e:	4602      	mov	r2, r0
 8018380:	6268      	str	r0, [r5, #36]	; 0x24
 8018382:	b920      	cbnz	r0, 801838e <_dtoa_r+0x2e>
 8018384:	21ea      	movs	r1, #234	; 0xea
 8018386:	4bae      	ldr	r3, [pc, #696]	; (8018640 <_dtoa_r+0x2e0>)
 8018388:	48ae      	ldr	r0, [pc, #696]	; (8018644 <_dtoa_r+0x2e4>)
 801838a:	f002 f89b 	bl	801a4c4 <__assert_func>
 801838e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018392:	6004      	str	r4, [r0, #0]
 8018394:	60c4      	str	r4, [r0, #12]
 8018396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018398:	6819      	ldr	r1, [r3, #0]
 801839a:	b151      	cbz	r1, 80183b2 <_dtoa_r+0x52>
 801839c:	685a      	ldr	r2, [r3, #4]
 801839e:	2301      	movs	r3, #1
 80183a0:	4093      	lsls	r3, r2
 80183a2:	604a      	str	r2, [r1, #4]
 80183a4:	608b      	str	r3, [r1, #8]
 80183a6:	4628      	mov	r0, r5
 80183a8:	f001 fa72 	bl	8019890 <_Bfree>
 80183ac:	2200      	movs	r2, #0
 80183ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80183b0:	601a      	str	r2, [r3, #0]
 80183b2:	1e3b      	subs	r3, r7, #0
 80183b4:	bfaf      	iteee	ge
 80183b6:	2300      	movge	r3, #0
 80183b8:	2201      	movlt	r2, #1
 80183ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80183be:	9305      	strlt	r3, [sp, #20]
 80183c0:	bfa8      	it	ge
 80183c2:	f8c8 3000 	strge.w	r3, [r8]
 80183c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80183ca:	4b9f      	ldr	r3, [pc, #636]	; (8018648 <_dtoa_r+0x2e8>)
 80183cc:	bfb8      	it	lt
 80183ce:	f8c8 2000 	strlt.w	r2, [r8]
 80183d2:	ea33 0309 	bics.w	r3, r3, r9
 80183d6:	d119      	bne.n	801840c <_dtoa_r+0xac>
 80183d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80183dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80183de:	6013      	str	r3, [r2, #0]
 80183e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80183e4:	4333      	orrs	r3, r6
 80183e6:	f000 8580 	beq.w	8018eea <_dtoa_r+0xb8a>
 80183ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80183ec:	b953      	cbnz	r3, 8018404 <_dtoa_r+0xa4>
 80183ee:	4b97      	ldr	r3, [pc, #604]	; (801864c <_dtoa_r+0x2ec>)
 80183f0:	e022      	b.n	8018438 <_dtoa_r+0xd8>
 80183f2:	4b97      	ldr	r3, [pc, #604]	; (8018650 <_dtoa_r+0x2f0>)
 80183f4:	9308      	str	r3, [sp, #32]
 80183f6:	3308      	adds	r3, #8
 80183f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80183fa:	6013      	str	r3, [r2, #0]
 80183fc:	9808      	ldr	r0, [sp, #32]
 80183fe:	b019      	add	sp, #100	; 0x64
 8018400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018404:	4b91      	ldr	r3, [pc, #580]	; (801864c <_dtoa_r+0x2ec>)
 8018406:	9308      	str	r3, [sp, #32]
 8018408:	3303      	adds	r3, #3
 801840a:	e7f5      	b.n	80183f8 <_dtoa_r+0x98>
 801840c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8018410:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8018414:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018418:	2200      	movs	r2, #0
 801841a:	2300      	movs	r3, #0
 801841c:	f7e8 fb0e 	bl	8000a3c <__aeabi_dcmpeq>
 8018420:	4680      	mov	r8, r0
 8018422:	b158      	cbz	r0, 801843c <_dtoa_r+0xdc>
 8018424:	2301      	movs	r3, #1
 8018426:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018428:	6013      	str	r3, [r2, #0]
 801842a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801842c:	2b00      	cmp	r3, #0
 801842e:	f000 8559 	beq.w	8018ee4 <_dtoa_r+0xb84>
 8018432:	4888      	ldr	r0, [pc, #544]	; (8018654 <_dtoa_r+0x2f4>)
 8018434:	6018      	str	r0, [r3, #0]
 8018436:	1e43      	subs	r3, r0, #1
 8018438:	9308      	str	r3, [sp, #32]
 801843a:	e7df      	b.n	80183fc <_dtoa_r+0x9c>
 801843c:	ab16      	add	r3, sp, #88	; 0x58
 801843e:	9301      	str	r3, [sp, #4]
 8018440:	ab17      	add	r3, sp, #92	; 0x5c
 8018442:	9300      	str	r3, [sp, #0]
 8018444:	4628      	mov	r0, r5
 8018446:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801844a:	f001 fdcb 	bl	8019fe4 <__d2b>
 801844e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018452:	4682      	mov	sl, r0
 8018454:	2c00      	cmp	r4, #0
 8018456:	d07e      	beq.n	8018556 <_dtoa_r+0x1f6>
 8018458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801845c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801845e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8018462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018466:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801846a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801846e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8018472:	2200      	movs	r2, #0
 8018474:	4b78      	ldr	r3, [pc, #480]	; (8018658 <_dtoa_r+0x2f8>)
 8018476:	f7e7 fec1 	bl	80001fc <__aeabi_dsub>
 801847a:	a36b      	add	r3, pc, #428	; (adr r3, 8018628 <_dtoa_r+0x2c8>)
 801847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018480:	f7e8 f874 	bl	800056c <__aeabi_dmul>
 8018484:	a36a      	add	r3, pc, #424	; (adr r3, 8018630 <_dtoa_r+0x2d0>)
 8018486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801848a:	f7e7 feb9 	bl	8000200 <__adddf3>
 801848e:	4606      	mov	r6, r0
 8018490:	4620      	mov	r0, r4
 8018492:	460f      	mov	r7, r1
 8018494:	f7e8 f800 	bl	8000498 <__aeabi_i2d>
 8018498:	a367      	add	r3, pc, #412	; (adr r3, 8018638 <_dtoa_r+0x2d8>)
 801849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801849e:	f7e8 f865 	bl	800056c <__aeabi_dmul>
 80184a2:	4602      	mov	r2, r0
 80184a4:	460b      	mov	r3, r1
 80184a6:	4630      	mov	r0, r6
 80184a8:	4639      	mov	r1, r7
 80184aa:	f7e7 fea9 	bl	8000200 <__adddf3>
 80184ae:	4606      	mov	r6, r0
 80184b0:	460f      	mov	r7, r1
 80184b2:	f7e8 fb0b 	bl	8000acc <__aeabi_d2iz>
 80184b6:	2200      	movs	r2, #0
 80184b8:	4681      	mov	r9, r0
 80184ba:	2300      	movs	r3, #0
 80184bc:	4630      	mov	r0, r6
 80184be:	4639      	mov	r1, r7
 80184c0:	f7e8 fac6 	bl	8000a50 <__aeabi_dcmplt>
 80184c4:	b148      	cbz	r0, 80184da <_dtoa_r+0x17a>
 80184c6:	4648      	mov	r0, r9
 80184c8:	f7e7 ffe6 	bl	8000498 <__aeabi_i2d>
 80184cc:	4632      	mov	r2, r6
 80184ce:	463b      	mov	r3, r7
 80184d0:	f7e8 fab4 	bl	8000a3c <__aeabi_dcmpeq>
 80184d4:	b908      	cbnz	r0, 80184da <_dtoa_r+0x17a>
 80184d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80184da:	f1b9 0f16 	cmp.w	r9, #22
 80184de:	d857      	bhi.n	8018590 <_dtoa_r+0x230>
 80184e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80184e4:	4b5d      	ldr	r3, [pc, #372]	; (801865c <_dtoa_r+0x2fc>)
 80184e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80184ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184ee:	f7e8 faaf 	bl	8000a50 <__aeabi_dcmplt>
 80184f2:	2800      	cmp	r0, #0
 80184f4:	d04e      	beq.n	8018594 <_dtoa_r+0x234>
 80184f6:	2300      	movs	r3, #0
 80184f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80184fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80184fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018500:	1b1c      	subs	r4, r3, r4
 8018502:	1e63      	subs	r3, r4, #1
 8018504:	9309      	str	r3, [sp, #36]	; 0x24
 8018506:	bf49      	itett	mi
 8018508:	f1c4 0301 	rsbmi	r3, r4, #1
 801850c:	2300      	movpl	r3, #0
 801850e:	9306      	strmi	r3, [sp, #24]
 8018510:	2300      	movmi	r3, #0
 8018512:	bf54      	ite	pl
 8018514:	9306      	strpl	r3, [sp, #24]
 8018516:	9309      	strmi	r3, [sp, #36]	; 0x24
 8018518:	f1b9 0f00 	cmp.w	r9, #0
 801851c:	db3c      	blt.n	8018598 <_dtoa_r+0x238>
 801851e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018520:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8018524:	444b      	add	r3, r9
 8018526:	9309      	str	r3, [sp, #36]	; 0x24
 8018528:	2300      	movs	r3, #0
 801852a:	930a      	str	r3, [sp, #40]	; 0x28
 801852c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801852e:	2b09      	cmp	r3, #9
 8018530:	d86c      	bhi.n	801860c <_dtoa_r+0x2ac>
 8018532:	2b05      	cmp	r3, #5
 8018534:	bfc4      	itt	gt
 8018536:	3b04      	subgt	r3, #4
 8018538:	9322      	strgt	r3, [sp, #136]	; 0x88
 801853a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801853c:	bfc8      	it	gt
 801853e:	2400      	movgt	r4, #0
 8018540:	f1a3 0302 	sub.w	r3, r3, #2
 8018544:	bfd8      	it	le
 8018546:	2401      	movle	r4, #1
 8018548:	2b03      	cmp	r3, #3
 801854a:	f200 808b 	bhi.w	8018664 <_dtoa_r+0x304>
 801854e:	e8df f003 	tbb	[pc, r3]
 8018552:	4f2d      	.short	0x4f2d
 8018554:	5b4d      	.short	0x5b4d
 8018556:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 801855a:	441c      	add	r4, r3
 801855c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8018560:	2b20      	cmp	r3, #32
 8018562:	bfc3      	ittte	gt
 8018564:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018568:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801856c:	fa09 f303 	lslgt.w	r3, r9, r3
 8018570:	f1c3 0320 	rsble	r3, r3, #32
 8018574:	bfc6      	itte	gt
 8018576:	fa26 f000 	lsrgt.w	r0, r6, r0
 801857a:	4318      	orrgt	r0, r3
 801857c:	fa06 f003 	lslle.w	r0, r6, r3
 8018580:	f7e7 ff7a 	bl	8000478 <__aeabi_ui2d>
 8018584:	2301      	movs	r3, #1
 8018586:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801858a:	3c01      	subs	r4, #1
 801858c:	9313      	str	r3, [sp, #76]	; 0x4c
 801858e:	e770      	b.n	8018472 <_dtoa_r+0x112>
 8018590:	2301      	movs	r3, #1
 8018592:	e7b3      	b.n	80184fc <_dtoa_r+0x19c>
 8018594:	900f      	str	r0, [sp, #60]	; 0x3c
 8018596:	e7b2      	b.n	80184fe <_dtoa_r+0x19e>
 8018598:	9b06      	ldr	r3, [sp, #24]
 801859a:	eba3 0309 	sub.w	r3, r3, r9
 801859e:	9306      	str	r3, [sp, #24]
 80185a0:	f1c9 0300 	rsb	r3, r9, #0
 80185a4:	930a      	str	r3, [sp, #40]	; 0x28
 80185a6:	2300      	movs	r3, #0
 80185a8:	930e      	str	r3, [sp, #56]	; 0x38
 80185aa:	e7bf      	b.n	801852c <_dtoa_r+0x1cc>
 80185ac:	2300      	movs	r3, #0
 80185ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80185b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	dc59      	bgt.n	801866a <_dtoa_r+0x30a>
 80185b6:	f04f 0b01 	mov.w	fp, #1
 80185ba:	465b      	mov	r3, fp
 80185bc:	f8cd b008 	str.w	fp, [sp, #8]
 80185c0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80185c4:	2200      	movs	r2, #0
 80185c6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80185c8:	6042      	str	r2, [r0, #4]
 80185ca:	2204      	movs	r2, #4
 80185cc:	f102 0614 	add.w	r6, r2, #20
 80185d0:	429e      	cmp	r6, r3
 80185d2:	6841      	ldr	r1, [r0, #4]
 80185d4:	d94f      	bls.n	8018676 <_dtoa_r+0x316>
 80185d6:	4628      	mov	r0, r5
 80185d8:	f001 f91a 	bl	8019810 <_Balloc>
 80185dc:	9008      	str	r0, [sp, #32]
 80185de:	2800      	cmp	r0, #0
 80185e0:	d14d      	bne.n	801867e <_dtoa_r+0x31e>
 80185e2:	4602      	mov	r2, r0
 80185e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80185e8:	4b1d      	ldr	r3, [pc, #116]	; (8018660 <_dtoa_r+0x300>)
 80185ea:	e6cd      	b.n	8018388 <_dtoa_r+0x28>
 80185ec:	2301      	movs	r3, #1
 80185ee:	e7de      	b.n	80185ae <_dtoa_r+0x24e>
 80185f0:	2300      	movs	r3, #0
 80185f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80185f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80185f6:	eb09 0b03 	add.w	fp, r9, r3
 80185fa:	f10b 0301 	add.w	r3, fp, #1
 80185fe:	2b01      	cmp	r3, #1
 8018600:	9302      	str	r3, [sp, #8]
 8018602:	bfb8      	it	lt
 8018604:	2301      	movlt	r3, #1
 8018606:	e7dd      	b.n	80185c4 <_dtoa_r+0x264>
 8018608:	2301      	movs	r3, #1
 801860a:	e7f2      	b.n	80185f2 <_dtoa_r+0x292>
 801860c:	2401      	movs	r4, #1
 801860e:	2300      	movs	r3, #0
 8018610:	940b      	str	r4, [sp, #44]	; 0x2c
 8018612:	9322      	str	r3, [sp, #136]	; 0x88
 8018614:	f04f 3bff 	mov.w	fp, #4294967295
 8018618:	2200      	movs	r2, #0
 801861a:	2312      	movs	r3, #18
 801861c:	f8cd b008 	str.w	fp, [sp, #8]
 8018620:	9223      	str	r2, [sp, #140]	; 0x8c
 8018622:	e7cf      	b.n	80185c4 <_dtoa_r+0x264>
 8018624:	f3af 8000 	nop.w
 8018628:	636f4361 	.word	0x636f4361
 801862c:	3fd287a7 	.word	0x3fd287a7
 8018630:	8b60c8b3 	.word	0x8b60c8b3
 8018634:	3fc68a28 	.word	0x3fc68a28
 8018638:	509f79fb 	.word	0x509f79fb
 801863c:	3fd34413 	.word	0x3fd34413
 8018640:	0801af66 	.word	0x0801af66
 8018644:	0801af7d 	.word	0x0801af7d
 8018648:	7ff00000 	.word	0x7ff00000
 801864c:	0801af62 	.word	0x0801af62
 8018650:	0801af59 	.word	0x0801af59
 8018654:	0801add9 	.word	0x0801add9
 8018658:	3ff80000 	.word	0x3ff80000
 801865c:	0801b0f8 	.word	0x0801b0f8
 8018660:	0801afdc 	.word	0x0801afdc
 8018664:	2301      	movs	r3, #1
 8018666:	930b      	str	r3, [sp, #44]	; 0x2c
 8018668:	e7d4      	b.n	8018614 <_dtoa_r+0x2b4>
 801866a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801866e:	465b      	mov	r3, fp
 8018670:	f8cd b008 	str.w	fp, [sp, #8]
 8018674:	e7a6      	b.n	80185c4 <_dtoa_r+0x264>
 8018676:	3101      	adds	r1, #1
 8018678:	6041      	str	r1, [r0, #4]
 801867a:	0052      	lsls	r2, r2, #1
 801867c:	e7a6      	b.n	80185cc <_dtoa_r+0x26c>
 801867e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018680:	9a08      	ldr	r2, [sp, #32]
 8018682:	601a      	str	r2, [r3, #0]
 8018684:	9b02      	ldr	r3, [sp, #8]
 8018686:	2b0e      	cmp	r3, #14
 8018688:	f200 80a8 	bhi.w	80187dc <_dtoa_r+0x47c>
 801868c:	2c00      	cmp	r4, #0
 801868e:	f000 80a5 	beq.w	80187dc <_dtoa_r+0x47c>
 8018692:	f1b9 0f00 	cmp.w	r9, #0
 8018696:	dd34      	ble.n	8018702 <_dtoa_r+0x3a2>
 8018698:	4a9a      	ldr	r2, [pc, #616]	; (8018904 <_dtoa_r+0x5a4>)
 801869a:	f009 030f 	and.w	r3, r9, #15
 801869e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80186a2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80186a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80186aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80186ae:	ea4f 1429 	mov.w	r4, r9, asr #4
 80186b2:	d016      	beq.n	80186e2 <_dtoa_r+0x382>
 80186b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80186b8:	4b93      	ldr	r3, [pc, #588]	; (8018908 <_dtoa_r+0x5a8>)
 80186ba:	2703      	movs	r7, #3
 80186bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80186c0:	f7e8 f87e 	bl	80007c0 <__aeabi_ddiv>
 80186c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80186c8:	f004 040f 	and.w	r4, r4, #15
 80186cc:	4e8e      	ldr	r6, [pc, #568]	; (8018908 <_dtoa_r+0x5a8>)
 80186ce:	b954      	cbnz	r4, 80186e6 <_dtoa_r+0x386>
 80186d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80186d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80186d8:	f7e8 f872 	bl	80007c0 <__aeabi_ddiv>
 80186dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80186e0:	e029      	b.n	8018736 <_dtoa_r+0x3d6>
 80186e2:	2702      	movs	r7, #2
 80186e4:	e7f2      	b.n	80186cc <_dtoa_r+0x36c>
 80186e6:	07e1      	lsls	r1, r4, #31
 80186e8:	d508      	bpl.n	80186fc <_dtoa_r+0x39c>
 80186ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80186ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80186f2:	f7e7 ff3b 	bl	800056c <__aeabi_dmul>
 80186f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80186fa:	3701      	adds	r7, #1
 80186fc:	1064      	asrs	r4, r4, #1
 80186fe:	3608      	adds	r6, #8
 8018700:	e7e5      	b.n	80186ce <_dtoa_r+0x36e>
 8018702:	f000 80a5 	beq.w	8018850 <_dtoa_r+0x4f0>
 8018706:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801870a:	f1c9 0400 	rsb	r4, r9, #0
 801870e:	4b7d      	ldr	r3, [pc, #500]	; (8018904 <_dtoa_r+0x5a4>)
 8018710:	f004 020f 	and.w	r2, r4, #15
 8018714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801871c:	f7e7 ff26 	bl	800056c <__aeabi_dmul>
 8018720:	2702      	movs	r7, #2
 8018722:	2300      	movs	r3, #0
 8018724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018728:	4e77      	ldr	r6, [pc, #476]	; (8018908 <_dtoa_r+0x5a8>)
 801872a:	1124      	asrs	r4, r4, #4
 801872c:	2c00      	cmp	r4, #0
 801872e:	f040 8084 	bne.w	801883a <_dtoa_r+0x4da>
 8018732:	2b00      	cmp	r3, #0
 8018734:	d1d2      	bne.n	80186dc <_dtoa_r+0x37c>
 8018736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018738:	2b00      	cmp	r3, #0
 801873a:	f000 808b 	beq.w	8018854 <_dtoa_r+0x4f4>
 801873e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8018742:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8018746:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801874a:	2200      	movs	r2, #0
 801874c:	4b6f      	ldr	r3, [pc, #444]	; (801890c <_dtoa_r+0x5ac>)
 801874e:	f7e8 f97f 	bl	8000a50 <__aeabi_dcmplt>
 8018752:	2800      	cmp	r0, #0
 8018754:	d07e      	beq.n	8018854 <_dtoa_r+0x4f4>
 8018756:	9b02      	ldr	r3, [sp, #8]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d07b      	beq.n	8018854 <_dtoa_r+0x4f4>
 801875c:	f1bb 0f00 	cmp.w	fp, #0
 8018760:	dd38      	ble.n	80187d4 <_dtoa_r+0x474>
 8018762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018766:	2200      	movs	r2, #0
 8018768:	4b69      	ldr	r3, [pc, #420]	; (8018910 <_dtoa_r+0x5b0>)
 801876a:	f7e7 feff 	bl	800056c <__aeabi_dmul>
 801876e:	465c      	mov	r4, fp
 8018770:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018774:	f109 38ff 	add.w	r8, r9, #4294967295
 8018778:	3701      	adds	r7, #1
 801877a:	4638      	mov	r0, r7
 801877c:	f7e7 fe8c 	bl	8000498 <__aeabi_i2d>
 8018780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018784:	f7e7 fef2 	bl	800056c <__aeabi_dmul>
 8018788:	2200      	movs	r2, #0
 801878a:	4b62      	ldr	r3, [pc, #392]	; (8018914 <_dtoa_r+0x5b4>)
 801878c:	f7e7 fd38 	bl	8000200 <__adddf3>
 8018790:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8018794:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018798:	9611      	str	r6, [sp, #68]	; 0x44
 801879a:	2c00      	cmp	r4, #0
 801879c:	d15d      	bne.n	801885a <_dtoa_r+0x4fa>
 801879e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80187a2:	2200      	movs	r2, #0
 80187a4:	4b5c      	ldr	r3, [pc, #368]	; (8018918 <_dtoa_r+0x5b8>)
 80187a6:	f7e7 fd29 	bl	80001fc <__aeabi_dsub>
 80187aa:	4602      	mov	r2, r0
 80187ac:	460b      	mov	r3, r1
 80187ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80187b2:	4633      	mov	r3, r6
 80187b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80187b6:	f7e8 f969 	bl	8000a8c <__aeabi_dcmpgt>
 80187ba:	2800      	cmp	r0, #0
 80187bc:	f040 829e 	bne.w	8018cfc <_dtoa_r+0x99c>
 80187c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80187c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80187c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80187ca:	f7e8 f941 	bl	8000a50 <__aeabi_dcmplt>
 80187ce:	2800      	cmp	r0, #0
 80187d0:	f040 8292 	bne.w	8018cf8 <_dtoa_r+0x998>
 80187d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80187d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80187dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80187de:	2b00      	cmp	r3, #0
 80187e0:	f2c0 8153 	blt.w	8018a8a <_dtoa_r+0x72a>
 80187e4:	f1b9 0f0e 	cmp.w	r9, #14
 80187e8:	f300 814f 	bgt.w	8018a8a <_dtoa_r+0x72a>
 80187ec:	4b45      	ldr	r3, [pc, #276]	; (8018904 <_dtoa_r+0x5a4>)
 80187ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80187f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80187f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80187fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	f280 80db 	bge.w	80189b8 <_dtoa_r+0x658>
 8018802:	9b02      	ldr	r3, [sp, #8]
 8018804:	2b00      	cmp	r3, #0
 8018806:	f300 80d7 	bgt.w	80189b8 <_dtoa_r+0x658>
 801880a:	f040 8274 	bne.w	8018cf6 <_dtoa_r+0x996>
 801880e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018812:	2200      	movs	r2, #0
 8018814:	4b40      	ldr	r3, [pc, #256]	; (8018918 <_dtoa_r+0x5b8>)
 8018816:	f7e7 fea9 	bl	800056c <__aeabi_dmul>
 801881a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801881e:	f7e8 f92b 	bl	8000a78 <__aeabi_dcmpge>
 8018822:	9c02      	ldr	r4, [sp, #8]
 8018824:	4626      	mov	r6, r4
 8018826:	2800      	cmp	r0, #0
 8018828:	f040 824a 	bne.w	8018cc0 <_dtoa_r+0x960>
 801882c:	2331      	movs	r3, #49	; 0x31
 801882e:	9f08      	ldr	r7, [sp, #32]
 8018830:	f109 0901 	add.w	r9, r9, #1
 8018834:	f807 3b01 	strb.w	r3, [r7], #1
 8018838:	e246      	b.n	8018cc8 <_dtoa_r+0x968>
 801883a:	07e2      	lsls	r2, r4, #31
 801883c:	d505      	bpl.n	801884a <_dtoa_r+0x4ea>
 801883e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018842:	f7e7 fe93 	bl	800056c <__aeabi_dmul>
 8018846:	2301      	movs	r3, #1
 8018848:	3701      	adds	r7, #1
 801884a:	1064      	asrs	r4, r4, #1
 801884c:	3608      	adds	r6, #8
 801884e:	e76d      	b.n	801872c <_dtoa_r+0x3cc>
 8018850:	2702      	movs	r7, #2
 8018852:	e770      	b.n	8018736 <_dtoa_r+0x3d6>
 8018854:	46c8      	mov	r8, r9
 8018856:	9c02      	ldr	r4, [sp, #8]
 8018858:	e78f      	b.n	801877a <_dtoa_r+0x41a>
 801885a:	9908      	ldr	r1, [sp, #32]
 801885c:	4b29      	ldr	r3, [pc, #164]	; (8018904 <_dtoa_r+0x5a4>)
 801885e:	4421      	add	r1, r4
 8018860:	9112      	str	r1, [sp, #72]	; 0x48
 8018862:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018864:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018868:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801886c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018870:	2900      	cmp	r1, #0
 8018872:	d055      	beq.n	8018920 <_dtoa_r+0x5c0>
 8018874:	2000      	movs	r0, #0
 8018876:	4929      	ldr	r1, [pc, #164]	; (801891c <_dtoa_r+0x5bc>)
 8018878:	f7e7 ffa2 	bl	80007c0 <__aeabi_ddiv>
 801887c:	463b      	mov	r3, r7
 801887e:	4632      	mov	r2, r6
 8018880:	f7e7 fcbc 	bl	80001fc <__aeabi_dsub>
 8018884:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018888:	9f08      	ldr	r7, [sp, #32]
 801888a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801888e:	f7e8 f91d 	bl	8000acc <__aeabi_d2iz>
 8018892:	4604      	mov	r4, r0
 8018894:	f7e7 fe00 	bl	8000498 <__aeabi_i2d>
 8018898:	4602      	mov	r2, r0
 801889a:	460b      	mov	r3, r1
 801889c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80188a0:	f7e7 fcac 	bl	80001fc <__aeabi_dsub>
 80188a4:	4602      	mov	r2, r0
 80188a6:	460b      	mov	r3, r1
 80188a8:	3430      	adds	r4, #48	; 0x30
 80188aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80188ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80188b2:	f807 4b01 	strb.w	r4, [r7], #1
 80188b6:	f7e8 f8cb 	bl	8000a50 <__aeabi_dcmplt>
 80188ba:	2800      	cmp	r0, #0
 80188bc:	d174      	bne.n	80189a8 <_dtoa_r+0x648>
 80188be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80188c2:	2000      	movs	r0, #0
 80188c4:	4911      	ldr	r1, [pc, #68]	; (801890c <_dtoa_r+0x5ac>)
 80188c6:	f7e7 fc99 	bl	80001fc <__aeabi_dsub>
 80188ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80188ce:	f7e8 f8bf 	bl	8000a50 <__aeabi_dcmplt>
 80188d2:	2800      	cmp	r0, #0
 80188d4:	f040 80b6 	bne.w	8018a44 <_dtoa_r+0x6e4>
 80188d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80188da:	429f      	cmp	r7, r3
 80188dc:	f43f af7a 	beq.w	80187d4 <_dtoa_r+0x474>
 80188e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80188e4:	2200      	movs	r2, #0
 80188e6:	4b0a      	ldr	r3, [pc, #40]	; (8018910 <_dtoa_r+0x5b0>)
 80188e8:	f7e7 fe40 	bl	800056c <__aeabi_dmul>
 80188ec:	2200      	movs	r2, #0
 80188ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80188f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80188f6:	4b06      	ldr	r3, [pc, #24]	; (8018910 <_dtoa_r+0x5b0>)
 80188f8:	f7e7 fe38 	bl	800056c <__aeabi_dmul>
 80188fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018900:	e7c3      	b.n	801888a <_dtoa_r+0x52a>
 8018902:	bf00      	nop
 8018904:	0801b0f8 	.word	0x0801b0f8
 8018908:	0801b0d0 	.word	0x0801b0d0
 801890c:	3ff00000 	.word	0x3ff00000
 8018910:	40240000 	.word	0x40240000
 8018914:	401c0000 	.word	0x401c0000
 8018918:	40140000 	.word	0x40140000
 801891c:	3fe00000 	.word	0x3fe00000
 8018920:	4630      	mov	r0, r6
 8018922:	4639      	mov	r1, r7
 8018924:	f7e7 fe22 	bl	800056c <__aeabi_dmul>
 8018928:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801892a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801892e:	9c08      	ldr	r4, [sp, #32]
 8018930:	9314      	str	r3, [sp, #80]	; 0x50
 8018932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018936:	f7e8 f8c9 	bl	8000acc <__aeabi_d2iz>
 801893a:	9015      	str	r0, [sp, #84]	; 0x54
 801893c:	f7e7 fdac 	bl	8000498 <__aeabi_i2d>
 8018940:	4602      	mov	r2, r0
 8018942:	460b      	mov	r3, r1
 8018944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018948:	f7e7 fc58 	bl	80001fc <__aeabi_dsub>
 801894c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801894e:	4606      	mov	r6, r0
 8018950:	3330      	adds	r3, #48	; 0x30
 8018952:	f804 3b01 	strb.w	r3, [r4], #1
 8018956:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018958:	460f      	mov	r7, r1
 801895a:	429c      	cmp	r4, r3
 801895c:	f04f 0200 	mov.w	r2, #0
 8018960:	d124      	bne.n	80189ac <_dtoa_r+0x64c>
 8018962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018966:	4bb3      	ldr	r3, [pc, #716]	; (8018c34 <_dtoa_r+0x8d4>)
 8018968:	f7e7 fc4a 	bl	8000200 <__adddf3>
 801896c:	4602      	mov	r2, r0
 801896e:	460b      	mov	r3, r1
 8018970:	4630      	mov	r0, r6
 8018972:	4639      	mov	r1, r7
 8018974:	f7e8 f88a 	bl	8000a8c <__aeabi_dcmpgt>
 8018978:	2800      	cmp	r0, #0
 801897a:	d162      	bne.n	8018a42 <_dtoa_r+0x6e2>
 801897c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018980:	2000      	movs	r0, #0
 8018982:	49ac      	ldr	r1, [pc, #688]	; (8018c34 <_dtoa_r+0x8d4>)
 8018984:	f7e7 fc3a 	bl	80001fc <__aeabi_dsub>
 8018988:	4602      	mov	r2, r0
 801898a:	460b      	mov	r3, r1
 801898c:	4630      	mov	r0, r6
 801898e:	4639      	mov	r1, r7
 8018990:	f7e8 f85e 	bl	8000a50 <__aeabi_dcmplt>
 8018994:	2800      	cmp	r0, #0
 8018996:	f43f af1d 	beq.w	80187d4 <_dtoa_r+0x474>
 801899a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801899c:	1e7b      	subs	r3, r7, #1
 801899e:	9314      	str	r3, [sp, #80]	; 0x50
 80189a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80189a4:	2b30      	cmp	r3, #48	; 0x30
 80189a6:	d0f8      	beq.n	801899a <_dtoa_r+0x63a>
 80189a8:	46c1      	mov	r9, r8
 80189aa:	e03a      	b.n	8018a22 <_dtoa_r+0x6c2>
 80189ac:	4ba2      	ldr	r3, [pc, #648]	; (8018c38 <_dtoa_r+0x8d8>)
 80189ae:	f7e7 fddd 	bl	800056c <__aeabi_dmul>
 80189b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80189b6:	e7bc      	b.n	8018932 <_dtoa_r+0x5d2>
 80189b8:	9f08      	ldr	r7, [sp, #32]
 80189ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80189be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80189c2:	f7e7 fefd 	bl	80007c0 <__aeabi_ddiv>
 80189c6:	f7e8 f881 	bl	8000acc <__aeabi_d2iz>
 80189ca:	4604      	mov	r4, r0
 80189cc:	f7e7 fd64 	bl	8000498 <__aeabi_i2d>
 80189d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80189d4:	f7e7 fdca 	bl	800056c <__aeabi_dmul>
 80189d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80189dc:	460b      	mov	r3, r1
 80189de:	4602      	mov	r2, r0
 80189e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80189e4:	f7e7 fc0a 	bl	80001fc <__aeabi_dsub>
 80189e8:	f807 6b01 	strb.w	r6, [r7], #1
 80189ec:	9e08      	ldr	r6, [sp, #32]
 80189ee:	9b02      	ldr	r3, [sp, #8]
 80189f0:	1bbe      	subs	r6, r7, r6
 80189f2:	42b3      	cmp	r3, r6
 80189f4:	d13a      	bne.n	8018a6c <_dtoa_r+0x70c>
 80189f6:	4602      	mov	r2, r0
 80189f8:	460b      	mov	r3, r1
 80189fa:	f7e7 fc01 	bl	8000200 <__adddf3>
 80189fe:	4602      	mov	r2, r0
 8018a00:	460b      	mov	r3, r1
 8018a02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018a06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018a0a:	f7e8 f83f 	bl	8000a8c <__aeabi_dcmpgt>
 8018a0e:	bb58      	cbnz	r0, 8018a68 <_dtoa_r+0x708>
 8018a10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018a18:	f7e8 f810 	bl	8000a3c <__aeabi_dcmpeq>
 8018a1c:	b108      	cbz	r0, 8018a22 <_dtoa_r+0x6c2>
 8018a1e:	07e1      	lsls	r1, r4, #31
 8018a20:	d422      	bmi.n	8018a68 <_dtoa_r+0x708>
 8018a22:	4628      	mov	r0, r5
 8018a24:	4651      	mov	r1, sl
 8018a26:	f000 ff33 	bl	8019890 <_Bfree>
 8018a2a:	2300      	movs	r3, #0
 8018a2c:	703b      	strb	r3, [r7, #0]
 8018a2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018a30:	f109 0001 	add.w	r0, r9, #1
 8018a34:	6018      	str	r0, [r3, #0]
 8018a36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	f43f acdf 	beq.w	80183fc <_dtoa_r+0x9c>
 8018a3e:	601f      	str	r7, [r3, #0]
 8018a40:	e4dc      	b.n	80183fc <_dtoa_r+0x9c>
 8018a42:	4627      	mov	r7, r4
 8018a44:	463b      	mov	r3, r7
 8018a46:	461f      	mov	r7, r3
 8018a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018a4c:	2a39      	cmp	r2, #57	; 0x39
 8018a4e:	d107      	bne.n	8018a60 <_dtoa_r+0x700>
 8018a50:	9a08      	ldr	r2, [sp, #32]
 8018a52:	429a      	cmp	r2, r3
 8018a54:	d1f7      	bne.n	8018a46 <_dtoa_r+0x6e6>
 8018a56:	2230      	movs	r2, #48	; 0x30
 8018a58:	9908      	ldr	r1, [sp, #32]
 8018a5a:	f108 0801 	add.w	r8, r8, #1
 8018a5e:	700a      	strb	r2, [r1, #0]
 8018a60:	781a      	ldrb	r2, [r3, #0]
 8018a62:	3201      	adds	r2, #1
 8018a64:	701a      	strb	r2, [r3, #0]
 8018a66:	e79f      	b.n	80189a8 <_dtoa_r+0x648>
 8018a68:	46c8      	mov	r8, r9
 8018a6a:	e7eb      	b.n	8018a44 <_dtoa_r+0x6e4>
 8018a6c:	2200      	movs	r2, #0
 8018a6e:	4b72      	ldr	r3, [pc, #456]	; (8018c38 <_dtoa_r+0x8d8>)
 8018a70:	f7e7 fd7c 	bl	800056c <__aeabi_dmul>
 8018a74:	4602      	mov	r2, r0
 8018a76:	460b      	mov	r3, r1
 8018a78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018a7c:	2200      	movs	r2, #0
 8018a7e:	2300      	movs	r3, #0
 8018a80:	f7e7 ffdc 	bl	8000a3c <__aeabi_dcmpeq>
 8018a84:	2800      	cmp	r0, #0
 8018a86:	d098      	beq.n	80189ba <_dtoa_r+0x65a>
 8018a88:	e7cb      	b.n	8018a22 <_dtoa_r+0x6c2>
 8018a8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018a8c:	2a00      	cmp	r2, #0
 8018a8e:	f000 80cd 	beq.w	8018c2c <_dtoa_r+0x8cc>
 8018a92:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018a94:	2a01      	cmp	r2, #1
 8018a96:	f300 80af 	bgt.w	8018bf8 <_dtoa_r+0x898>
 8018a9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018a9c:	2a00      	cmp	r2, #0
 8018a9e:	f000 80a7 	beq.w	8018bf0 <_dtoa_r+0x890>
 8018aa2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018aa6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018aa8:	9f06      	ldr	r7, [sp, #24]
 8018aaa:	9a06      	ldr	r2, [sp, #24]
 8018aac:	2101      	movs	r1, #1
 8018aae:	441a      	add	r2, r3
 8018ab0:	9206      	str	r2, [sp, #24]
 8018ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ab4:	4628      	mov	r0, r5
 8018ab6:	441a      	add	r2, r3
 8018ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8018aba:	f000 ffed 	bl	8019a98 <__i2b>
 8018abe:	4606      	mov	r6, r0
 8018ac0:	2f00      	cmp	r7, #0
 8018ac2:	dd0c      	ble.n	8018ade <_dtoa_r+0x77e>
 8018ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	dd09      	ble.n	8018ade <_dtoa_r+0x77e>
 8018aca:	42bb      	cmp	r3, r7
 8018acc:	bfa8      	it	ge
 8018ace:	463b      	movge	r3, r7
 8018ad0:	9a06      	ldr	r2, [sp, #24]
 8018ad2:	1aff      	subs	r7, r7, r3
 8018ad4:	1ad2      	subs	r2, r2, r3
 8018ad6:	9206      	str	r2, [sp, #24]
 8018ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ada:	1ad3      	subs	r3, r2, r3
 8018adc:	9309      	str	r3, [sp, #36]	; 0x24
 8018ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ae0:	b1f3      	cbz	r3, 8018b20 <_dtoa_r+0x7c0>
 8018ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	f000 80a9 	beq.w	8018c3c <_dtoa_r+0x8dc>
 8018aea:	2c00      	cmp	r4, #0
 8018aec:	dd10      	ble.n	8018b10 <_dtoa_r+0x7b0>
 8018aee:	4631      	mov	r1, r6
 8018af0:	4622      	mov	r2, r4
 8018af2:	4628      	mov	r0, r5
 8018af4:	f001 f88a 	bl	8019c0c <__pow5mult>
 8018af8:	4652      	mov	r2, sl
 8018afa:	4601      	mov	r1, r0
 8018afc:	4606      	mov	r6, r0
 8018afe:	4628      	mov	r0, r5
 8018b00:	f000 ffe0 	bl	8019ac4 <__multiply>
 8018b04:	4680      	mov	r8, r0
 8018b06:	4651      	mov	r1, sl
 8018b08:	4628      	mov	r0, r5
 8018b0a:	f000 fec1 	bl	8019890 <_Bfree>
 8018b0e:	46c2      	mov	sl, r8
 8018b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018b12:	1b1a      	subs	r2, r3, r4
 8018b14:	d004      	beq.n	8018b20 <_dtoa_r+0x7c0>
 8018b16:	4651      	mov	r1, sl
 8018b18:	4628      	mov	r0, r5
 8018b1a:	f001 f877 	bl	8019c0c <__pow5mult>
 8018b1e:	4682      	mov	sl, r0
 8018b20:	2101      	movs	r1, #1
 8018b22:	4628      	mov	r0, r5
 8018b24:	f000 ffb8 	bl	8019a98 <__i2b>
 8018b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b2a:	4604      	mov	r4, r0
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	f340 8087 	ble.w	8018c40 <_dtoa_r+0x8e0>
 8018b32:	461a      	mov	r2, r3
 8018b34:	4601      	mov	r1, r0
 8018b36:	4628      	mov	r0, r5
 8018b38:	f001 f868 	bl	8019c0c <__pow5mult>
 8018b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018b3e:	4604      	mov	r4, r0
 8018b40:	2b01      	cmp	r3, #1
 8018b42:	f340 8080 	ble.w	8018c46 <_dtoa_r+0x8e6>
 8018b46:	f04f 0800 	mov.w	r8, #0
 8018b4a:	6923      	ldr	r3, [r4, #16]
 8018b4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018b50:	6918      	ldr	r0, [r3, #16]
 8018b52:	f000 ff53 	bl	80199fc <__hi0bits>
 8018b56:	f1c0 0020 	rsb	r0, r0, #32
 8018b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b5c:	4418      	add	r0, r3
 8018b5e:	f010 001f 	ands.w	r0, r0, #31
 8018b62:	f000 8092 	beq.w	8018c8a <_dtoa_r+0x92a>
 8018b66:	f1c0 0320 	rsb	r3, r0, #32
 8018b6a:	2b04      	cmp	r3, #4
 8018b6c:	f340 808a 	ble.w	8018c84 <_dtoa_r+0x924>
 8018b70:	f1c0 001c 	rsb	r0, r0, #28
 8018b74:	9b06      	ldr	r3, [sp, #24]
 8018b76:	4407      	add	r7, r0
 8018b78:	4403      	add	r3, r0
 8018b7a:	9306      	str	r3, [sp, #24]
 8018b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b7e:	4403      	add	r3, r0
 8018b80:	9309      	str	r3, [sp, #36]	; 0x24
 8018b82:	9b06      	ldr	r3, [sp, #24]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	dd05      	ble.n	8018b94 <_dtoa_r+0x834>
 8018b88:	4651      	mov	r1, sl
 8018b8a:	461a      	mov	r2, r3
 8018b8c:	4628      	mov	r0, r5
 8018b8e:	f001 f897 	bl	8019cc0 <__lshift>
 8018b92:	4682      	mov	sl, r0
 8018b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	dd05      	ble.n	8018ba6 <_dtoa_r+0x846>
 8018b9a:	4621      	mov	r1, r4
 8018b9c:	461a      	mov	r2, r3
 8018b9e:	4628      	mov	r0, r5
 8018ba0:	f001 f88e 	bl	8019cc0 <__lshift>
 8018ba4:	4604      	mov	r4, r0
 8018ba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d070      	beq.n	8018c8e <_dtoa_r+0x92e>
 8018bac:	4621      	mov	r1, r4
 8018bae:	4650      	mov	r0, sl
 8018bb0:	f001 f8f2 	bl	8019d98 <__mcmp>
 8018bb4:	2800      	cmp	r0, #0
 8018bb6:	da6a      	bge.n	8018c8e <_dtoa_r+0x92e>
 8018bb8:	2300      	movs	r3, #0
 8018bba:	4651      	mov	r1, sl
 8018bbc:	220a      	movs	r2, #10
 8018bbe:	4628      	mov	r0, r5
 8018bc0:	f000 fe88 	bl	80198d4 <__multadd>
 8018bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018bc6:	4682      	mov	sl, r0
 8018bc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	f000 8193 	beq.w	8018ef8 <_dtoa_r+0xb98>
 8018bd2:	4631      	mov	r1, r6
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	220a      	movs	r2, #10
 8018bd8:	4628      	mov	r0, r5
 8018bda:	f000 fe7b 	bl	80198d4 <__multadd>
 8018bde:	f1bb 0f00 	cmp.w	fp, #0
 8018be2:	4606      	mov	r6, r0
 8018be4:	f300 8093 	bgt.w	8018d0e <_dtoa_r+0x9ae>
 8018be8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018bea:	2b02      	cmp	r3, #2
 8018bec:	dc57      	bgt.n	8018c9e <_dtoa_r+0x93e>
 8018bee:	e08e      	b.n	8018d0e <_dtoa_r+0x9ae>
 8018bf0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018bf2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018bf6:	e756      	b.n	8018aa6 <_dtoa_r+0x746>
 8018bf8:	9b02      	ldr	r3, [sp, #8]
 8018bfa:	1e5c      	subs	r4, r3, #1
 8018bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018bfe:	42a3      	cmp	r3, r4
 8018c00:	bfb7      	itett	lt
 8018c02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8018c04:	1b1c      	subge	r4, r3, r4
 8018c06:	1ae2      	sublt	r2, r4, r3
 8018c08:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8018c0a:	bfbe      	ittt	lt
 8018c0c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8018c0e:	189b      	addlt	r3, r3, r2
 8018c10:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018c12:	9b02      	ldr	r3, [sp, #8]
 8018c14:	bfb8      	it	lt
 8018c16:	2400      	movlt	r4, #0
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	bfbb      	ittet	lt
 8018c1c:	9b06      	ldrlt	r3, [sp, #24]
 8018c1e:	9a02      	ldrlt	r2, [sp, #8]
 8018c20:	9f06      	ldrge	r7, [sp, #24]
 8018c22:	1a9f      	sublt	r7, r3, r2
 8018c24:	bfac      	ite	ge
 8018c26:	9b02      	ldrge	r3, [sp, #8]
 8018c28:	2300      	movlt	r3, #0
 8018c2a:	e73e      	b.n	8018aaa <_dtoa_r+0x74a>
 8018c2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018c2e:	9f06      	ldr	r7, [sp, #24]
 8018c30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8018c32:	e745      	b.n	8018ac0 <_dtoa_r+0x760>
 8018c34:	3fe00000 	.word	0x3fe00000
 8018c38:	40240000 	.word	0x40240000
 8018c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018c3e:	e76a      	b.n	8018b16 <_dtoa_r+0x7b6>
 8018c40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018c42:	2b01      	cmp	r3, #1
 8018c44:	dc19      	bgt.n	8018c7a <_dtoa_r+0x91a>
 8018c46:	9b04      	ldr	r3, [sp, #16]
 8018c48:	b9bb      	cbnz	r3, 8018c7a <_dtoa_r+0x91a>
 8018c4a:	9b05      	ldr	r3, [sp, #20]
 8018c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018c50:	b99b      	cbnz	r3, 8018c7a <_dtoa_r+0x91a>
 8018c52:	9b05      	ldr	r3, [sp, #20]
 8018c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018c58:	0d1b      	lsrs	r3, r3, #20
 8018c5a:	051b      	lsls	r3, r3, #20
 8018c5c:	b183      	cbz	r3, 8018c80 <_dtoa_r+0x920>
 8018c5e:	f04f 0801 	mov.w	r8, #1
 8018c62:	9b06      	ldr	r3, [sp, #24]
 8018c64:	3301      	adds	r3, #1
 8018c66:	9306      	str	r3, [sp, #24]
 8018c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c6a:	3301      	adds	r3, #1
 8018c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8018c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	f47f af6a 	bne.w	8018b4a <_dtoa_r+0x7ea>
 8018c76:	2001      	movs	r0, #1
 8018c78:	e76f      	b.n	8018b5a <_dtoa_r+0x7fa>
 8018c7a:	f04f 0800 	mov.w	r8, #0
 8018c7e:	e7f6      	b.n	8018c6e <_dtoa_r+0x90e>
 8018c80:	4698      	mov	r8, r3
 8018c82:	e7f4      	b.n	8018c6e <_dtoa_r+0x90e>
 8018c84:	f43f af7d 	beq.w	8018b82 <_dtoa_r+0x822>
 8018c88:	4618      	mov	r0, r3
 8018c8a:	301c      	adds	r0, #28
 8018c8c:	e772      	b.n	8018b74 <_dtoa_r+0x814>
 8018c8e:	9b02      	ldr	r3, [sp, #8]
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	dc36      	bgt.n	8018d02 <_dtoa_r+0x9a2>
 8018c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018c96:	2b02      	cmp	r3, #2
 8018c98:	dd33      	ble.n	8018d02 <_dtoa_r+0x9a2>
 8018c9a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8018c9e:	f1bb 0f00 	cmp.w	fp, #0
 8018ca2:	d10d      	bne.n	8018cc0 <_dtoa_r+0x960>
 8018ca4:	4621      	mov	r1, r4
 8018ca6:	465b      	mov	r3, fp
 8018ca8:	2205      	movs	r2, #5
 8018caa:	4628      	mov	r0, r5
 8018cac:	f000 fe12 	bl	80198d4 <__multadd>
 8018cb0:	4601      	mov	r1, r0
 8018cb2:	4604      	mov	r4, r0
 8018cb4:	4650      	mov	r0, sl
 8018cb6:	f001 f86f 	bl	8019d98 <__mcmp>
 8018cba:	2800      	cmp	r0, #0
 8018cbc:	f73f adb6 	bgt.w	801882c <_dtoa_r+0x4cc>
 8018cc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018cc2:	9f08      	ldr	r7, [sp, #32]
 8018cc4:	ea6f 0903 	mvn.w	r9, r3
 8018cc8:	f04f 0800 	mov.w	r8, #0
 8018ccc:	4621      	mov	r1, r4
 8018cce:	4628      	mov	r0, r5
 8018cd0:	f000 fdde 	bl	8019890 <_Bfree>
 8018cd4:	2e00      	cmp	r6, #0
 8018cd6:	f43f aea4 	beq.w	8018a22 <_dtoa_r+0x6c2>
 8018cda:	f1b8 0f00 	cmp.w	r8, #0
 8018cde:	d005      	beq.n	8018cec <_dtoa_r+0x98c>
 8018ce0:	45b0      	cmp	r8, r6
 8018ce2:	d003      	beq.n	8018cec <_dtoa_r+0x98c>
 8018ce4:	4641      	mov	r1, r8
 8018ce6:	4628      	mov	r0, r5
 8018ce8:	f000 fdd2 	bl	8019890 <_Bfree>
 8018cec:	4631      	mov	r1, r6
 8018cee:	4628      	mov	r0, r5
 8018cf0:	f000 fdce 	bl	8019890 <_Bfree>
 8018cf4:	e695      	b.n	8018a22 <_dtoa_r+0x6c2>
 8018cf6:	2400      	movs	r4, #0
 8018cf8:	4626      	mov	r6, r4
 8018cfa:	e7e1      	b.n	8018cc0 <_dtoa_r+0x960>
 8018cfc:	46c1      	mov	r9, r8
 8018cfe:	4626      	mov	r6, r4
 8018d00:	e594      	b.n	801882c <_dtoa_r+0x4cc>
 8018d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d04:	f8dd b008 	ldr.w	fp, [sp, #8]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	f000 80fc 	beq.w	8018f06 <_dtoa_r+0xba6>
 8018d0e:	2f00      	cmp	r7, #0
 8018d10:	dd05      	ble.n	8018d1e <_dtoa_r+0x9be>
 8018d12:	4631      	mov	r1, r6
 8018d14:	463a      	mov	r2, r7
 8018d16:	4628      	mov	r0, r5
 8018d18:	f000 ffd2 	bl	8019cc0 <__lshift>
 8018d1c:	4606      	mov	r6, r0
 8018d1e:	f1b8 0f00 	cmp.w	r8, #0
 8018d22:	d05c      	beq.n	8018dde <_dtoa_r+0xa7e>
 8018d24:	4628      	mov	r0, r5
 8018d26:	6871      	ldr	r1, [r6, #4]
 8018d28:	f000 fd72 	bl	8019810 <_Balloc>
 8018d2c:	4607      	mov	r7, r0
 8018d2e:	b928      	cbnz	r0, 8018d3c <_dtoa_r+0x9dc>
 8018d30:	4602      	mov	r2, r0
 8018d32:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018d36:	4b7e      	ldr	r3, [pc, #504]	; (8018f30 <_dtoa_r+0xbd0>)
 8018d38:	f7ff bb26 	b.w	8018388 <_dtoa_r+0x28>
 8018d3c:	6932      	ldr	r2, [r6, #16]
 8018d3e:	f106 010c 	add.w	r1, r6, #12
 8018d42:	3202      	adds	r2, #2
 8018d44:	0092      	lsls	r2, r2, #2
 8018d46:	300c      	adds	r0, #12
 8018d48:	f7fd fba4 	bl	8016494 <memcpy>
 8018d4c:	2201      	movs	r2, #1
 8018d4e:	4639      	mov	r1, r7
 8018d50:	4628      	mov	r0, r5
 8018d52:	f000 ffb5 	bl	8019cc0 <__lshift>
 8018d56:	46b0      	mov	r8, r6
 8018d58:	4606      	mov	r6, r0
 8018d5a:	9b08      	ldr	r3, [sp, #32]
 8018d5c:	3301      	adds	r3, #1
 8018d5e:	9302      	str	r3, [sp, #8]
 8018d60:	9b08      	ldr	r3, [sp, #32]
 8018d62:	445b      	add	r3, fp
 8018d64:	930a      	str	r3, [sp, #40]	; 0x28
 8018d66:	9b04      	ldr	r3, [sp, #16]
 8018d68:	f003 0301 	and.w	r3, r3, #1
 8018d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8018d6e:	9b02      	ldr	r3, [sp, #8]
 8018d70:	4621      	mov	r1, r4
 8018d72:	4650      	mov	r0, sl
 8018d74:	f103 3bff 	add.w	fp, r3, #4294967295
 8018d78:	f7ff fa62 	bl	8018240 <quorem>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	4641      	mov	r1, r8
 8018d80:	3330      	adds	r3, #48	; 0x30
 8018d82:	9004      	str	r0, [sp, #16]
 8018d84:	4650      	mov	r0, sl
 8018d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8018d88:	f001 f806 	bl	8019d98 <__mcmp>
 8018d8c:	4632      	mov	r2, r6
 8018d8e:	9006      	str	r0, [sp, #24]
 8018d90:	4621      	mov	r1, r4
 8018d92:	4628      	mov	r0, r5
 8018d94:	f001 f81c 	bl	8019dd0 <__mdiff>
 8018d98:	68c2      	ldr	r2, [r0, #12]
 8018d9a:	4607      	mov	r7, r0
 8018d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d9e:	bb02      	cbnz	r2, 8018de2 <_dtoa_r+0xa82>
 8018da0:	4601      	mov	r1, r0
 8018da2:	4650      	mov	r0, sl
 8018da4:	f000 fff8 	bl	8019d98 <__mcmp>
 8018da8:	4602      	mov	r2, r0
 8018daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018dac:	4639      	mov	r1, r7
 8018dae:	4628      	mov	r0, r5
 8018db0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8018db4:	f000 fd6c 	bl	8019890 <_Bfree>
 8018db8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018dba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018dbc:	9f02      	ldr	r7, [sp, #8]
 8018dbe:	ea43 0102 	orr.w	r1, r3, r2
 8018dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dc4:	430b      	orrs	r3, r1
 8018dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018dc8:	d10d      	bne.n	8018de6 <_dtoa_r+0xa86>
 8018dca:	2b39      	cmp	r3, #57	; 0x39
 8018dcc:	d027      	beq.n	8018e1e <_dtoa_r+0xabe>
 8018dce:	9a06      	ldr	r2, [sp, #24]
 8018dd0:	2a00      	cmp	r2, #0
 8018dd2:	dd01      	ble.n	8018dd8 <_dtoa_r+0xa78>
 8018dd4:	9b04      	ldr	r3, [sp, #16]
 8018dd6:	3331      	adds	r3, #49	; 0x31
 8018dd8:	f88b 3000 	strb.w	r3, [fp]
 8018ddc:	e776      	b.n	8018ccc <_dtoa_r+0x96c>
 8018dde:	4630      	mov	r0, r6
 8018de0:	e7b9      	b.n	8018d56 <_dtoa_r+0x9f6>
 8018de2:	2201      	movs	r2, #1
 8018de4:	e7e2      	b.n	8018dac <_dtoa_r+0xa4c>
 8018de6:	9906      	ldr	r1, [sp, #24]
 8018de8:	2900      	cmp	r1, #0
 8018dea:	db04      	blt.n	8018df6 <_dtoa_r+0xa96>
 8018dec:	9822      	ldr	r0, [sp, #136]	; 0x88
 8018dee:	4301      	orrs	r1, r0
 8018df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018df2:	4301      	orrs	r1, r0
 8018df4:	d120      	bne.n	8018e38 <_dtoa_r+0xad8>
 8018df6:	2a00      	cmp	r2, #0
 8018df8:	ddee      	ble.n	8018dd8 <_dtoa_r+0xa78>
 8018dfa:	4651      	mov	r1, sl
 8018dfc:	2201      	movs	r2, #1
 8018dfe:	4628      	mov	r0, r5
 8018e00:	9302      	str	r3, [sp, #8]
 8018e02:	f000 ff5d 	bl	8019cc0 <__lshift>
 8018e06:	4621      	mov	r1, r4
 8018e08:	4682      	mov	sl, r0
 8018e0a:	f000 ffc5 	bl	8019d98 <__mcmp>
 8018e0e:	2800      	cmp	r0, #0
 8018e10:	9b02      	ldr	r3, [sp, #8]
 8018e12:	dc02      	bgt.n	8018e1a <_dtoa_r+0xaba>
 8018e14:	d1e0      	bne.n	8018dd8 <_dtoa_r+0xa78>
 8018e16:	07da      	lsls	r2, r3, #31
 8018e18:	d5de      	bpl.n	8018dd8 <_dtoa_r+0xa78>
 8018e1a:	2b39      	cmp	r3, #57	; 0x39
 8018e1c:	d1da      	bne.n	8018dd4 <_dtoa_r+0xa74>
 8018e1e:	2339      	movs	r3, #57	; 0x39
 8018e20:	f88b 3000 	strb.w	r3, [fp]
 8018e24:	463b      	mov	r3, r7
 8018e26:	461f      	mov	r7, r3
 8018e28:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8018e2c:	3b01      	subs	r3, #1
 8018e2e:	2a39      	cmp	r2, #57	; 0x39
 8018e30:	d050      	beq.n	8018ed4 <_dtoa_r+0xb74>
 8018e32:	3201      	adds	r2, #1
 8018e34:	701a      	strb	r2, [r3, #0]
 8018e36:	e749      	b.n	8018ccc <_dtoa_r+0x96c>
 8018e38:	2a00      	cmp	r2, #0
 8018e3a:	dd03      	ble.n	8018e44 <_dtoa_r+0xae4>
 8018e3c:	2b39      	cmp	r3, #57	; 0x39
 8018e3e:	d0ee      	beq.n	8018e1e <_dtoa_r+0xabe>
 8018e40:	3301      	adds	r3, #1
 8018e42:	e7c9      	b.n	8018dd8 <_dtoa_r+0xa78>
 8018e44:	9a02      	ldr	r2, [sp, #8]
 8018e46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018e48:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018e4c:	428a      	cmp	r2, r1
 8018e4e:	d02a      	beq.n	8018ea6 <_dtoa_r+0xb46>
 8018e50:	4651      	mov	r1, sl
 8018e52:	2300      	movs	r3, #0
 8018e54:	220a      	movs	r2, #10
 8018e56:	4628      	mov	r0, r5
 8018e58:	f000 fd3c 	bl	80198d4 <__multadd>
 8018e5c:	45b0      	cmp	r8, r6
 8018e5e:	4682      	mov	sl, r0
 8018e60:	f04f 0300 	mov.w	r3, #0
 8018e64:	f04f 020a 	mov.w	r2, #10
 8018e68:	4641      	mov	r1, r8
 8018e6a:	4628      	mov	r0, r5
 8018e6c:	d107      	bne.n	8018e7e <_dtoa_r+0xb1e>
 8018e6e:	f000 fd31 	bl	80198d4 <__multadd>
 8018e72:	4680      	mov	r8, r0
 8018e74:	4606      	mov	r6, r0
 8018e76:	9b02      	ldr	r3, [sp, #8]
 8018e78:	3301      	adds	r3, #1
 8018e7a:	9302      	str	r3, [sp, #8]
 8018e7c:	e777      	b.n	8018d6e <_dtoa_r+0xa0e>
 8018e7e:	f000 fd29 	bl	80198d4 <__multadd>
 8018e82:	4631      	mov	r1, r6
 8018e84:	4680      	mov	r8, r0
 8018e86:	2300      	movs	r3, #0
 8018e88:	220a      	movs	r2, #10
 8018e8a:	4628      	mov	r0, r5
 8018e8c:	f000 fd22 	bl	80198d4 <__multadd>
 8018e90:	4606      	mov	r6, r0
 8018e92:	e7f0      	b.n	8018e76 <_dtoa_r+0xb16>
 8018e94:	f1bb 0f00 	cmp.w	fp, #0
 8018e98:	bfcc      	ite	gt
 8018e9a:	465f      	movgt	r7, fp
 8018e9c:	2701      	movle	r7, #1
 8018e9e:	f04f 0800 	mov.w	r8, #0
 8018ea2:	9a08      	ldr	r2, [sp, #32]
 8018ea4:	4417      	add	r7, r2
 8018ea6:	4651      	mov	r1, sl
 8018ea8:	2201      	movs	r2, #1
 8018eaa:	4628      	mov	r0, r5
 8018eac:	9302      	str	r3, [sp, #8]
 8018eae:	f000 ff07 	bl	8019cc0 <__lshift>
 8018eb2:	4621      	mov	r1, r4
 8018eb4:	4682      	mov	sl, r0
 8018eb6:	f000 ff6f 	bl	8019d98 <__mcmp>
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	dcb2      	bgt.n	8018e24 <_dtoa_r+0xac4>
 8018ebe:	d102      	bne.n	8018ec6 <_dtoa_r+0xb66>
 8018ec0:	9b02      	ldr	r3, [sp, #8]
 8018ec2:	07db      	lsls	r3, r3, #31
 8018ec4:	d4ae      	bmi.n	8018e24 <_dtoa_r+0xac4>
 8018ec6:	463b      	mov	r3, r7
 8018ec8:	461f      	mov	r7, r3
 8018eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018ece:	2a30      	cmp	r2, #48	; 0x30
 8018ed0:	d0fa      	beq.n	8018ec8 <_dtoa_r+0xb68>
 8018ed2:	e6fb      	b.n	8018ccc <_dtoa_r+0x96c>
 8018ed4:	9a08      	ldr	r2, [sp, #32]
 8018ed6:	429a      	cmp	r2, r3
 8018ed8:	d1a5      	bne.n	8018e26 <_dtoa_r+0xac6>
 8018eda:	2331      	movs	r3, #49	; 0x31
 8018edc:	f109 0901 	add.w	r9, r9, #1
 8018ee0:	7013      	strb	r3, [r2, #0]
 8018ee2:	e6f3      	b.n	8018ccc <_dtoa_r+0x96c>
 8018ee4:	4b13      	ldr	r3, [pc, #76]	; (8018f34 <_dtoa_r+0xbd4>)
 8018ee6:	f7ff baa7 	b.w	8018438 <_dtoa_r+0xd8>
 8018eea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	f47f aa80 	bne.w	80183f2 <_dtoa_r+0x92>
 8018ef2:	4b11      	ldr	r3, [pc, #68]	; (8018f38 <_dtoa_r+0xbd8>)
 8018ef4:	f7ff baa0 	b.w	8018438 <_dtoa_r+0xd8>
 8018ef8:	f1bb 0f00 	cmp.w	fp, #0
 8018efc:	dc03      	bgt.n	8018f06 <_dtoa_r+0xba6>
 8018efe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018f00:	2b02      	cmp	r3, #2
 8018f02:	f73f aecc 	bgt.w	8018c9e <_dtoa_r+0x93e>
 8018f06:	9f08      	ldr	r7, [sp, #32]
 8018f08:	4621      	mov	r1, r4
 8018f0a:	4650      	mov	r0, sl
 8018f0c:	f7ff f998 	bl	8018240 <quorem>
 8018f10:	9a08      	ldr	r2, [sp, #32]
 8018f12:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018f16:	f807 3b01 	strb.w	r3, [r7], #1
 8018f1a:	1aba      	subs	r2, r7, r2
 8018f1c:	4593      	cmp	fp, r2
 8018f1e:	ddb9      	ble.n	8018e94 <_dtoa_r+0xb34>
 8018f20:	4651      	mov	r1, sl
 8018f22:	2300      	movs	r3, #0
 8018f24:	220a      	movs	r2, #10
 8018f26:	4628      	mov	r0, r5
 8018f28:	f000 fcd4 	bl	80198d4 <__multadd>
 8018f2c:	4682      	mov	sl, r0
 8018f2e:	e7eb      	b.n	8018f08 <_dtoa_r+0xba8>
 8018f30:	0801afdc 	.word	0x0801afdc
 8018f34:	0801add8 	.word	0x0801add8
 8018f38:	0801af59 	.word	0x0801af59

08018f3c <__sflush_r>:
 8018f3c:	898a      	ldrh	r2, [r1, #12]
 8018f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f42:	4605      	mov	r5, r0
 8018f44:	0710      	lsls	r0, r2, #28
 8018f46:	460c      	mov	r4, r1
 8018f48:	d458      	bmi.n	8018ffc <__sflush_r+0xc0>
 8018f4a:	684b      	ldr	r3, [r1, #4]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	dc05      	bgt.n	8018f5c <__sflush_r+0x20>
 8018f50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	dc02      	bgt.n	8018f5c <__sflush_r+0x20>
 8018f56:	2000      	movs	r0, #0
 8018f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018f5e:	2e00      	cmp	r6, #0
 8018f60:	d0f9      	beq.n	8018f56 <__sflush_r+0x1a>
 8018f62:	2300      	movs	r3, #0
 8018f64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018f68:	682f      	ldr	r7, [r5, #0]
 8018f6a:	602b      	str	r3, [r5, #0]
 8018f6c:	d032      	beq.n	8018fd4 <__sflush_r+0x98>
 8018f6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018f70:	89a3      	ldrh	r3, [r4, #12]
 8018f72:	075a      	lsls	r2, r3, #29
 8018f74:	d505      	bpl.n	8018f82 <__sflush_r+0x46>
 8018f76:	6863      	ldr	r3, [r4, #4]
 8018f78:	1ac0      	subs	r0, r0, r3
 8018f7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018f7c:	b10b      	cbz	r3, 8018f82 <__sflush_r+0x46>
 8018f7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018f80:	1ac0      	subs	r0, r0, r3
 8018f82:	2300      	movs	r3, #0
 8018f84:	4602      	mov	r2, r0
 8018f86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018f88:	4628      	mov	r0, r5
 8018f8a:	6a21      	ldr	r1, [r4, #32]
 8018f8c:	47b0      	blx	r6
 8018f8e:	1c43      	adds	r3, r0, #1
 8018f90:	89a3      	ldrh	r3, [r4, #12]
 8018f92:	d106      	bne.n	8018fa2 <__sflush_r+0x66>
 8018f94:	6829      	ldr	r1, [r5, #0]
 8018f96:	291d      	cmp	r1, #29
 8018f98:	d82c      	bhi.n	8018ff4 <__sflush_r+0xb8>
 8018f9a:	4a2a      	ldr	r2, [pc, #168]	; (8019044 <__sflush_r+0x108>)
 8018f9c:	40ca      	lsrs	r2, r1
 8018f9e:	07d6      	lsls	r6, r2, #31
 8018fa0:	d528      	bpl.n	8018ff4 <__sflush_r+0xb8>
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	6062      	str	r2, [r4, #4]
 8018fa6:	6922      	ldr	r2, [r4, #16]
 8018fa8:	04d9      	lsls	r1, r3, #19
 8018faa:	6022      	str	r2, [r4, #0]
 8018fac:	d504      	bpl.n	8018fb8 <__sflush_r+0x7c>
 8018fae:	1c42      	adds	r2, r0, #1
 8018fb0:	d101      	bne.n	8018fb6 <__sflush_r+0x7a>
 8018fb2:	682b      	ldr	r3, [r5, #0]
 8018fb4:	b903      	cbnz	r3, 8018fb8 <__sflush_r+0x7c>
 8018fb6:	6560      	str	r0, [r4, #84]	; 0x54
 8018fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018fba:	602f      	str	r7, [r5, #0]
 8018fbc:	2900      	cmp	r1, #0
 8018fbe:	d0ca      	beq.n	8018f56 <__sflush_r+0x1a>
 8018fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018fc4:	4299      	cmp	r1, r3
 8018fc6:	d002      	beq.n	8018fce <__sflush_r+0x92>
 8018fc8:	4628      	mov	r0, r5
 8018fca:	f7fd fa79 	bl	80164c0 <_free_r>
 8018fce:	2000      	movs	r0, #0
 8018fd0:	6360      	str	r0, [r4, #52]	; 0x34
 8018fd2:	e7c1      	b.n	8018f58 <__sflush_r+0x1c>
 8018fd4:	6a21      	ldr	r1, [r4, #32]
 8018fd6:	2301      	movs	r3, #1
 8018fd8:	4628      	mov	r0, r5
 8018fda:	47b0      	blx	r6
 8018fdc:	1c41      	adds	r1, r0, #1
 8018fde:	d1c7      	bne.n	8018f70 <__sflush_r+0x34>
 8018fe0:	682b      	ldr	r3, [r5, #0]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d0c4      	beq.n	8018f70 <__sflush_r+0x34>
 8018fe6:	2b1d      	cmp	r3, #29
 8018fe8:	d001      	beq.n	8018fee <__sflush_r+0xb2>
 8018fea:	2b16      	cmp	r3, #22
 8018fec:	d101      	bne.n	8018ff2 <__sflush_r+0xb6>
 8018fee:	602f      	str	r7, [r5, #0]
 8018ff0:	e7b1      	b.n	8018f56 <__sflush_r+0x1a>
 8018ff2:	89a3      	ldrh	r3, [r4, #12]
 8018ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018ff8:	81a3      	strh	r3, [r4, #12]
 8018ffa:	e7ad      	b.n	8018f58 <__sflush_r+0x1c>
 8018ffc:	690f      	ldr	r7, [r1, #16]
 8018ffe:	2f00      	cmp	r7, #0
 8019000:	d0a9      	beq.n	8018f56 <__sflush_r+0x1a>
 8019002:	0793      	lsls	r3, r2, #30
 8019004:	bf18      	it	ne
 8019006:	2300      	movne	r3, #0
 8019008:	680e      	ldr	r6, [r1, #0]
 801900a:	bf08      	it	eq
 801900c:	694b      	ldreq	r3, [r1, #20]
 801900e:	eba6 0807 	sub.w	r8, r6, r7
 8019012:	600f      	str	r7, [r1, #0]
 8019014:	608b      	str	r3, [r1, #8]
 8019016:	f1b8 0f00 	cmp.w	r8, #0
 801901a:	dd9c      	ble.n	8018f56 <__sflush_r+0x1a>
 801901c:	4643      	mov	r3, r8
 801901e:	463a      	mov	r2, r7
 8019020:	4628      	mov	r0, r5
 8019022:	6a21      	ldr	r1, [r4, #32]
 8019024:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019026:	47b0      	blx	r6
 8019028:	2800      	cmp	r0, #0
 801902a:	dc06      	bgt.n	801903a <__sflush_r+0xfe>
 801902c:	89a3      	ldrh	r3, [r4, #12]
 801902e:	f04f 30ff 	mov.w	r0, #4294967295
 8019032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019036:	81a3      	strh	r3, [r4, #12]
 8019038:	e78e      	b.n	8018f58 <__sflush_r+0x1c>
 801903a:	4407      	add	r7, r0
 801903c:	eba8 0800 	sub.w	r8, r8, r0
 8019040:	e7e9      	b.n	8019016 <__sflush_r+0xda>
 8019042:	bf00      	nop
 8019044:	20400001 	.word	0x20400001

08019048 <_fflush_r>:
 8019048:	b538      	push	{r3, r4, r5, lr}
 801904a:	690b      	ldr	r3, [r1, #16]
 801904c:	4605      	mov	r5, r0
 801904e:	460c      	mov	r4, r1
 8019050:	b913      	cbnz	r3, 8019058 <_fflush_r+0x10>
 8019052:	2500      	movs	r5, #0
 8019054:	4628      	mov	r0, r5
 8019056:	bd38      	pop	{r3, r4, r5, pc}
 8019058:	b118      	cbz	r0, 8019062 <_fflush_r+0x1a>
 801905a:	6983      	ldr	r3, [r0, #24]
 801905c:	b90b      	cbnz	r3, 8019062 <_fflush_r+0x1a>
 801905e:	f7fd f943 	bl	80162e8 <__sinit>
 8019062:	4b14      	ldr	r3, [pc, #80]	; (80190b4 <_fflush_r+0x6c>)
 8019064:	429c      	cmp	r4, r3
 8019066:	d11b      	bne.n	80190a0 <_fflush_r+0x58>
 8019068:	686c      	ldr	r4, [r5, #4]
 801906a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d0ef      	beq.n	8019052 <_fflush_r+0xa>
 8019072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019074:	07d0      	lsls	r0, r2, #31
 8019076:	d404      	bmi.n	8019082 <_fflush_r+0x3a>
 8019078:	0599      	lsls	r1, r3, #22
 801907a:	d402      	bmi.n	8019082 <_fflush_r+0x3a>
 801907c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801907e:	f7fd f9f6 	bl	801646e <__retarget_lock_acquire_recursive>
 8019082:	4628      	mov	r0, r5
 8019084:	4621      	mov	r1, r4
 8019086:	f7ff ff59 	bl	8018f3c <__sflush_r>
 801908a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801908c:	4605      	mov	r5, r0
 801908e:	07da      	lsls	r2, r3, #31
 8019090:	d4e0      	bmi.n	8019054 <_fflush_r+0xc>
 8019092:	89a3      	ldrh	r3, [r4, #12]
 8019094:	059b      	lsls	r3, r3, #22
 8019096:	d4dd      	bmi.n	8019054 <_fflush_r+0xc>
 8019098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801909a:	f7fd f9e9 	bl	8016470 <__retarget_lock_release_recursive>
 801909e:	e7d9      	b.n	8019054 <_fflush_r+0xc>
 80190a0:	4b05      	ldr	r3, [pc, #20]	; (80190b8 <_fflush_r+0x70>)
 80190a2:	429c      	cmp	r4, r3
 80190a4:	d101      	bne.n	80190aa <_fflush_r+0x62>
 80190a6:	68ac      	ldr	r4, [r5, #8]
 80190a8:	e7df      	b.n	801906a <_fflush_r+0x22>
 80190aa:	4b04      	ldr	r3, [pc, #16]	; (80190bc <_fflush_r+0x74>)
 80190ac:	429c      	cmp	r4, r3
 80190ae:	bf08      	it	eq
 80190b0:	68ec      	ldreq	r4, [r5, #12]
 80190b2:	e7da      	b.n	801906a <_fflush_r+0x22>
 80190b4:	0801ad84 	.word	0x0801ad84
 80190b8:	0801ada4 	.word	0x0801ada4
 80190bc:	0801ad64 	.word	0x0801ad64

080190c0 <rshift>:
 80190c0:	6903      	ldr	r3, [r0, #16]
 80190c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80190c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80190ca:	f100 0414 	add.w	r4, r0, #20
 80190ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80190d2:	dd46      	ble.n	8019162 <rshift+0xa2>
 80190d4:	f011 011f 	ands.w	r1, r1, #31
 80190d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80190dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80190e0:	d10c      	bne.n	80190fc <rshift+0x3c>
 80190e2:	4629      	mov	r1, r5
 80190e4:	f100 0710 	add.w	r7, r0, #16
 80190e8:	42b1      	cmp	r1, r6
 80190ea:	d335      	bcc.n	8019158 <rshift+0x98>
 80190ec:	1a9b      	subs	r3, r3, r2
 80190ee:	009b      	lsls	r3, r3, #2
 80190f0:	1eea      	subs	r2, r5, #3
 80190f2:	4296      	cmp	r6, r2
 80190f4:	bf38      	it	cc
 80190f6:	2300      	movcc	r3, #0
 80190f8:	4423      	add	r3, r4
 80190fa:	e015      	b.n	8019128 <rshift+0x68>
 80190fc:	46a1      	mov	r9, r4
 80190fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019102:	f1c1 0820 	rsb	r8, r1, #32
 8019106:	40cf      	lsrs	r7, r1
 8019108:	f105 0e04 	add.w	lr, r5, #4
 801910c:	4576      	cmp	r6, lr
 801910e:	46f4      	mov	ip, lr
 8019110:	d816      	bhi.n	8019140 <rshift+0x80>
 8019112:	1a9b      	subs	r3, r3, r2
 8019114:	009a      	lsls	r2, r3, #2
 8019116:	3a04      	subs	r2, #4
 8019118:	3501      	adds	r5, #1
 801911a:	42ae      	cmp	r6, r5
 801911c:	bf38      	it	cc
 801911e:	2200      	movcc	r2, #0
 8019120:	18a3      	adds	r3, r4, r2
 8019122:	50a7      	str	r7, [r4, r2]
 8019124:	b107      	cbz	r7, 8019128 <rshift+0x68>
 8019126:	3304      	adds	r3, #4
 8019128:	42a3      	cmp	r3, r4
 801912a:	eba3 0204 	sub.w	r2, r3, r4
 801912e:	bf08      	it	eq
 8019130:	2300      	moveq	r3, #0
 8019132:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019136:	6102      	str	r2, [r0, #16]
 8019138:	bf08      	it	eq
 801913a:	6143      	streq	r3, [r0, #20]
 801913c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019140:	f8dc c000 	ldr.w	ip, [ip]
 8019144:	fa0c fc08 	lsl.w	ip, ip, r8
 8019148:	ea4c 0707 	orr.w	r7, ip, r7
 801914c:	f849 7b04 	str.w	r7, [r9], #4
 8019150:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019154:	40cf      	lsrs	r7, r1
 8019156:	e7d9      	b.n	801910c <rshift+0x4c>
 8019158:	f851 cb04 	ldr.w	ip, [r1], #4
 801915c:	f847 cf04 	str.w	ip, [r7, #4]!
 8019160:	e7c2      	b.n	80190e8 <rshift+0x28>
 8019162:	4623      	mov	r3, r4
 8019164:	e7e0      	b.n	8019128 <rshift+0x68>

08019166 <__hexdig_fun>:
 8019166:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801916a:	2b09      	cmp	r3, #9
 801916c:	d802      	bhi.n	8019174 <__hexdig_fun+0xe>
 801916e:	3820      	subs	r0, #32
 8019170:	b2c0      	uxtb	r0, r0
 8019172:	4770      	bx	lr
 8019174:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019178:	2b05      	cmp	r3, #5
 801917a:	d801      	bhi.n	8019180 <__hexdig_fun+0x1a>
 801917c:	3847      	subs	r0, #71	; 0x47
 801917e:	e7f7      	b.n	8019170 <__hexdig_fun+0xa>
 8019180:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019184:	2b05      	cmp	r3, #5
 8019186:	d801      	bhi.n	801918c <__hexdig_fun+0x26>
 8019188:	3827      	subs	r0, #39	; 0x27
 801918a:	e7f1      	b.n	8019170 <__hexdig_fun+0xa>
 801918c:	2000      	movs	r0, #0
 801918e:	4770      	bx	lr

08019190 <__gethex>:
 8019190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019194:	b08b      	sub	sp, #44	; 0x2c
 8019196:	9306      	str	r3, [sp, #24]
 8019198:	4bb9      	ldr	r3, [pc, #740]	; (8019480 <__gethex+0x2f0>)
 801919a:	9002      	str	r0, [sp, #8]
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	468b      	mov	fp, r1
 80191a0:	4618      	mov	r0, r3
 80191a2:	4690      	mov	r8, r2
 80191a4:	9303      	str	r3, [sp, #12]
 80191a6:	f7e7 f81d 	bl	80001e4 <strlen>
 80191aa:	4682      	mov	sl, r0
 80191ac:	9b03      	ldr	r3, [sp, #12]
 80191ae:	f8db 2000 	ldr.w	r2, [fp]
 80191b2:	4403      	add	r3, r0
 80191b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80191b8:	9307      	str	r3, [sp, #28]
 80191ba:	1c93      	adds	r3, r2, #2
 80191bc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80191c0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80191c4:	32fe      	adds	r2, #254	; 0xfe
 80191c6:	18d1      	adds	r1, r2, r3
 80191c8:	461f      	mov	r7, r3
 80191ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80191ce:	9101      	str	r1, [sp, #4]
 80191d0:	2830      	cmp	r0, #48	; 0x30
 80191d2:	d0f8      	beq.n	80191c6 <__gethex+0x36>
 80191d4:	f7ff ffc7 	bl	8019166 <__hexdig_fun>
 80191d8:	4604      	mov	r4, r0
 80191da:	2800      	cmp	r0, #0
 80191dc:	d13a      	bne.n	8019254 <__gethex+0xc4>
 80191de:	4652      	mov	r2, sl
 80191e0:	4638      	mov	r0, r7
 80191e2:	9903      	ldr	r1, [sp, #12]
 80191e4:	f001 f94e 	bl	801a484 <strncmp>
 80191e8:	4605      	mov	r5, r0
 80191ea:	2800      	cmp	r0, #0
 80191ec:	d166      	bne.n	80192bc <__gethex+0x12c>
 80191ee:	f817 000a 	ldrb.w	r0, [r7, sl]
 80191f2:	eb07 060a 	add.w	r6, r7, sl
 80191f6:	f7ff ffb6 	bl	8019166 <__hexdig_fun>
 80191fa:	2800      	cmp	r0, #0
 80191fc:	d060      	beq.n	80192c0 <__gethex+0x130>
 80191fe:	4633      	mov	r3, r6
 8019200:	7818      	ldrb	r0, [r3, #0]
 8019202:	461f      	mov	r7, r3
 8019204:	2830      	cmp	r0, #48	; 0x30
 8019206:	f103 0301 	add.w	r3, r3, #1
 801920a:	d0f9      	beq.n	8019200 <__gethex+0x70>
 801920c:	f7ff ffab 	bl	8019166 <__hexdig_fun>
 8019210:	2301      	movs	r3, #1
 8019212:	fab0 f480 	clz	r4, r0
 8019216:	4635      	mov	r5, r6
 8019218:	0964      	lsrs	r4, r4, #5
 801921a:	9301      	str	r3, [sp, #4]
 801921c:	463a      	mov	r2, r7
 801921e:	4616      	mov	r6, r2
 8019220:	7830      	ldrb	r0, [r6, #0]
 8019222:	3201      	adds	r2, #1
 8019224:	f7ff ff9f 	bl	8019166 <__hexdig_fun>
 8019228:	2800      	cmp	r0, #0
 801922a:	d1f8      	bne.n	801921e <__gethex+0x8e>
 801922c:	4652      	mov	r2, sl
 801922e:	4630      	mov	r0, r6
 8019230:	9903      	ldr	r1, [sp, #12]
 8019232:	f001 f927 	bl	801a484 <strncmp>
 8019236:	b980      	cbnz	r0, 801925a <__gethex+0xca>
 8019238:	b94d      	cbnz	r5, 801924e <__gethex+0xbe>
 801923a:	eb06 050a 	add.w	r5, r6, sl
 801923e:	462a      	mov	r2, r5
 8019240:	4616      	mov	r6, r2
 8019242:	7830      	ldrb	r0, [r6, #0]
 8019244:	3201      	adds	r2, #1
 8019246:	f7ff ff8e 	bl	8019166 <__hexdig_fun>
 801924a:	2800      	cmp	r0, #0
 801924c:	d1f8      	bne.n	8019240 <__gethex+0xb0>
 801924e:	1bad      	subs	r5, r5, r6
 8019250:	00ad      	lsls	r5, r5, #2
 8019252:	e004      	b.n	801925e <__gethex+0xce>
 8019254:	2400      	movs	r4, #0
 8019256:	4625      	mov	r5, r4
 8019258:	e7e0      	b.n	801921c <__gethex+0x8c>
 801925a:	2d00      	cmp	r5, #0
 801925c:	d1f7      	bne.n	801924e <__gethex+0xbe>
 801925e:	7833      	ldrb	r3, [r6, #0]
 8019260:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019264:	2b50      	cmp	r3, #80	; 0x50
 8019266:	d139      	bne.n	80192dc <__gethex+0x14c>
 8019268:	7873      	ldrb	r3, [r6, #1]
 801926a:	2b2b      	cmp	r3, #43	; 0x2b
 801926c:	d02a      	beq.n	80192c4 <__gethex+0x134>
 801926e:	2b2d      	cmp	r3, #45	; 0x2d
 8019270:	d02c      	beq.n	80192cc <__gethex+0x13c>
 8019272:	f04f 0900 	mov.w	r9, #0
 8019276:	1c71      	adds	r1, r6, #1
 8019278:	7808      	ldrb	r0, [r1, #0]
 801927a:	f7ff ff74 	bl	8019166 <__hexdig_fun>
 801927e:	1e43      	subs	r3, r0, #1
 8019280:	b2db      	uxtb	r3, r3
 8019282:	2b18      	cmp	r3, #24
 8019284:	d82a      	bhi.n	80192dc <__gethex+0x14c>
 8019286:	f1a0 0210 	sub.w	r2, r0, #16
 801928a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801928e:	f7ff ff6a 	bl	8019166 <__hexdig_fun>
 8019292:	1e43      	subs	r3, r0, #1
 8019294:	b2db      	uxtb	r3, r3
 8019296:	2b18      	cmp	r3, #24
 8019298:	d91b      	bls.n	80192d2 <__gethex+0x142>
 801929a:	f1b9 0f00 	cmp.w	r9, #0
 801929e:	d000      	beq.n	80192a2 <__gethex+0x112>
 80192a0:	4252      	negs	r2, r2
 80192a2:	4415      	add	r5, r2
 80192a4:	f8cb 1000 	str.w	r1, [fp]
 80192a8:	b1d4      	cbz	r4, 80192e0 <__gethex+0x150>
 80192aa:	9b01      	ldr	r3, [sp, #4]
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	bf14      	ite	ne
 80192b0:	2700      	movne	r7, #0
 80192b2:	2706      	moveq	r7, #6
 80192b4:	4638      	mov	r0, r7
 80192b6:	b00b      	add	sp, #44	; 0x2c
 80192b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192bc:	463e      	mov	r6, r7
 80192be:	4625      	mov	r5, r4
 80192c0:	2401      	movs	r4, #1
 80192c2:	e7cc      	b.n	801925e <__gethex+0xce>
 80192c4:	f04f 0900 	mov.w	r9, #0
 80192c8:	1cb1      	adds	r1, r6, #2
 80192ca:	e7d5      	b.n	8019278 <__gethex+0xe8>
 80192cc:	f04f 0901 	mov.w	r9, #1
 80192d0:	e7fa      	b.n	80192c8 <__gethex+0x138>
 80192d2:	230a      	movs	r3, #10
 80192d4:	fb03 0202 	mla	r2, r3, r2, r0
 80192d8:	3a10      	subs	r2, #16
 80192da:	e7d6      	b.n	801928a <__gethex+0xfa>
 80192dc:	4631      	mov	r1, r6
 80192de:	e7e1      	b.n	80192a4 <__gethex+0x114>
 80192e0:	4621      	mov	r1, r4
 80192e2:	1bf3      	subs	r3, r6, r7
 80192e4:	3b01      	subs	r3, #1
 80192e6:	2b07      	cmp	r3, #7
 80192e8:	dc0a      	bgt.n	8019300 <__gethex+0x170>
 80192ea:	9802      	ldr	r0, [sp, #8]
 80192ec:	f000 fa90 	bl	8019810 <_Balloc>
 80192f0:	4604      	mov	r4, r0
 80192f2:	b940      	cbnz	r0, 8019306 <__gethex+0x176>
 80192f4:	4602      	mov	r2, r0
 80192f6:	21de      	movs	r1, #222	; 0xde
 80192f8:	4b62      	ldr	r3, [pc, #392]	; (8019484 <__gethex+0x2f4>)
 80192fa:	4863      	ldr	r0, [pc, #396]	; (8019488 <__gethex+0x2f8>)
 80192fc:	f001 f8e2 	bl	801a4c4 <__assert_func>
 8019300:	3101      	adds	r1, #1
 8019302:	105b      	asrs	r3, r3, #1
 8019304:	e7ef      	b.n	80192e6 <__gethex+0x156>
 8019306:	f04f 0b00 	mov.w	fp, #0
 801930a:	f100 0914 	add.w	r9, r0, #20
 801930e:	f1ca 0301 	rsb	r3, sl, #1
 8019312:	f8cd 9010 	str.w	r9, [sp, #16]
 8019316:	f8cd b004 	str.w	fp, [sp, #4]
 801931a:	9308      	str	r3, [sp, #32]
 801931c:	42b7      	cmp	r7, r6
 801931e:	d33f      	bcc.n	80193a0 <__gethex+0x210>
 8019320:	9f04      	ldr	r7, [sp, #16]
 8019322:	9b01      	ldr	r3, [sp, #4]
 8019324:	f847 3b04 	str.w	r3, [r7], #4
 8019328:	eba7 0709 	sub.w	r7, r7, r9
 801932c:	10bf      	asrs	r7, r7, #2
 801932e:	6127      	str	r7, [r4, #16]
 8019330:	4618      	mov	r0, r3
 8019332:	f000 fb63 	bl	80199fc <__hi0bits>
 8019336:	017f      	lsls	r7, r7, #5
 8019338:	f8d8 6000 	ldr.w	r6, [r8]
 801933c:	1a3f      	subs	r7, r7, r0
 801933e:	42b7      	cmp	r7, r6
 8019340:	dd62      	ble.n	8019408 <__gethex+0x278>
 8019342:	1bbf      	subs	r7, r7, r6
 8019344:	4639      	mov	r1, r7
 8019346:	4620      	mov	r0, r4
 8019348:	f000 fef9 	bl	801a13e <__any_on>
 801934c:	4682      	mov	sl, r0
 801934e:	b1a8      	cbz	r0, 801937c <__gethex+0x1ec>
 8019350:	f04f 0a01 	mov.w	sl, #1
 8019354:	1e7b      	subs	r3, r7, #1
 8019356:	1159      	asrs	r1, r3, #5
 8019358:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801935c:	f003 021f 	and.w	r2, r3, #31
 8019360:	fa0a f202 	lsl.w	r2, sl, r2
 8019364:	420a      	tst	r2, r1
 8019366:	d009      	beq.n	801937c <__gethex+0x1ec>
 8019368:	4553      	cmp	r3, sl
 801936a:	dd05      	ble.n	8019378 <__gethex+0x1e8>
 801936c:	4620      	mov	r0, r4
 801936e:	1eb9      	subs	r1, r7, #2
 8019370:	f000 fee5 	bl	801a13e <__any_on>
 8019374:	2800      	cmp	r0, #0
 8019376:	d144      	bne.n	8019402 <__gethex+0x272>
 8019378:	f04f 0a02 	mov.w	sl, #2
 801937c:	4639      	mov	r1, r7
 801937e:	4620      	mov	r0, r4
 8019380:	f7ff fe9e 	bl	80190c0 <rshift>
 8019384:	443d      	add	r5, r7
 8019386:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801938a:	42ab      	cmp	r3, r5
 801938c:	da4a      	bge.n	8019424 <__gethex+0x294>
 801938e:	4621      	mov	r1, r4
 8019390:	9802      	ldr	r0, [sp, #8]
 8019392:	f000 fa7d 	bl	8019890 <_Bfree>
 8019396:	2300      	movs	r3, #0
 8019398:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801939a:	27a3      	movs	r7, #163	; 0xa3
 801939c:	6013      	str	r3, [r2, #0]
 801939e:	e789      	b.n	80192b4 <__gethex+0x124>
 80193a0:	1e73      	subs	r3, r6, #1
 80193a2:	9a07      	ldr	r2, [sp, #28]
 80193a4:	9305      	str	r3, [sp, #20]
 80193a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80193aa:	4293      	cmp	r3, r2
 80193ac:	d019      	beq.n	80193e2 <__gethex+0x252>
 80193ae:	f1bb 0f20 	cmp.w	fp, #32
 80193b2:	d107      	bne.n	80193c4 <__gethex+0x234>
 80193b4:	9b04      	ldr	r3, [sp, #16]
 80193b6:	9a01      	ldr	r2, [sp, #4]
 80193b8:	f843 2b04 	str.w	r2, [r3], #4
 80193bc:	9304      	str	r3, [sp, #16]
 80193be:	2300      	movs	r3, #0
 80193c0:	469b      	mov	fp, r3
 80193c2:	9301      	str	r3, [sp, #4]
 80193c4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80193c8:	f7ff fecd 	bl	8019166 <__hexdig_fun>
 80193cc:	9b01      	ldr	r3, [sp, #4]
 80193ce:	f000 000f 	and.w	r0, r0, #15
 80193d2:	fa00 f00b 	lsl.w	r0, r0, fp
 80193d6:	4303      	orrs	r3, r0
 80193d8:	9301      	str	r3, [sp, #4]
 80193da:	f10b 0b04 	add.w	fp, fp, #4
 80193de:	9b05      	ldr	r3, [sp, #20]
 80193e0:	e00d      	b.n	80193fe <__gethex+0x26e>
 80193e2:	9b05      	ldr	r3, [sp, #20]
 80193e4:	9a08      	ldr	r2, [sp, #32]
 80193e6:	4413      	add	r3, r2
 80193e8:	42bb      	cmp	r3, r7
 80193ea:	d3e0      	bcc.n	80193ae <__gethex+0x21e>
 80193ec:	4618      	mov	r0, r3
 80193ee:	4652      	mov	r2, sl
 80193f0:	9903      	ldr	r1, [sp, #12]
 80193f2:	9309      	str	r3, [sp, #36]	; 0x24
 80193f4:	f001 f846 	bl	801a484 <strncmp>
 80193f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193fa:	2800      	cmp	r0, #0
 80193fc:	d1d7      	bne.n	80193ae <__gethex+0x21e>
 80193fe:	461e      	mov	r6, r3
 8019400:	e78c      	b.n	801931c <__gethex+0x18c>
 8019402:	f04f 0a03 	mov.w	sl, #3
 8019406:	e7b9      	b.n	801937c <__gethex+0x1ec>
 8019408:	da09      	bge.n	801941e <__gethex+0x28e>
 801940a:	1bf7      	subs	r7, r6, r7
 801940c:	4621      	mov	r1, r4
 801940e:	463a      	mov	r2, r7
 8019410:	9802      	ldr	r0, [sp, #8]
 8019412:	f000 fc55 	bl	8019cc0 <__lshift>
 8019416:	4604      	mov	r4, r0
 8019418:	1bed      	subs	r5, r5, r7
 801941a:	f100 0914 	add.w	r9, r0, #20
 801941e:	f04f 0a00 	mov.w	sl, #0
 8019422:	e7b0      	b.n	8019386 <__gethex+0x1f6>
 8019424:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019428:	42a8      	cmp	r0, r5
 801942a:	dd71      	ble.n	8019510 <__gethex+0x380>
 801942c:	1b45      	subs	r5, r0, r5
 801942e:	42ae      	cmp	r6, r5
 8019430:	dc34      	bgt.n	801949c <__gethex+0x30c>
 8019432:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019436:	2b02      	cmp	r3, #2
 8019438:	d028      	beq.n	801948c <__gethex+0x2fc>
 801943a:	2b03      	cmp	r3, #3
 801943c:	d02a      	beq.n	8019494 <__gethex+0x304>
 801943e:	2b01      	cmp	r3, #1
 8019440:	d115      	bne.n	801946e <__gethex+0x2de>
 8019442:	42ae      	cmp	r6, r5
 8019444:	d113      	bne.n	801946e <__gethex+0x2de>
 8019446:	2e01      	cmp	r6, #1
 8019448:	d10b      	bne.n	8019462 <__gethex+0x2d2>
 801944a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801944e:	9a06      	ldr	r2, [sp, #24]
 8019450:	2762      	movs	r7, #98	; 0x62
 8019452:	6013      	str	r3, [r2, #0]
 8019454:	2301      	movs	r3, #1
 8019456:	6123      	str	r3, [r4, #16]
 8019458:	f8c9 3000 	str.w	r3, [r9]
 801945c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801945e:	601c      	str	r4, [r3, #0]
 8019460:	e728      	b.n	80192b4 <__gethex+0x124>
 8019462:	4620      	mov	r0, r4
 8019464:	1e71      	subs	r1, r6, #1
 8019466:	f000 fe6a 	bl	801a13e <__any_on>
 801946a:	2800      	cmp	r0, #0
 801946c:	d1ed      	bne.n	801944a <__gethex+0x2ba>
 801946e:	4621      	mov	r1, r4
 8019470:	9802      	ldr	r0, [sp, #8]
 8019472:	f000 fa0d 	bl	8019890 <_Bfree>
 8019476:	2300      	movs	r3, #0
 8019478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801947a:	2750      	movs	r7, #80	; 0x50
 801947c:	6013      	str	r3, [r2, #0]
 801947e:	e719      	b.n	80192b4 <__gethex+0x124>
 8019480:	0801b058 	.word	0x0801b058
 8019484:	0801afdc 	.word	0x0801afdc
 8019488:	0801afed 	.word	0x0801afed
 801948c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801948e:	2b00      	cmp	r3, #0
 8019490:	d1ed      	bne.n	801946e <__gethex+0x2de>
 8019492:	e7da      	b.n	801944a <__gethex+0x2ba>
 8019494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019496:	2b00      	cmp	r3, #0
 8019498:	d1d7      	bne.n	801944a <__gethex+0x2ba>
 801949a:	e7e8      	b.n	801946e <__gethex+0x2de>
 801949c:	1e6f      	subs	r7, r5, #1
 801949e:	f1ba 0f00 	cmp.w	sl, #0
 80194a2:	d132      	bne.n	801950a <__gethex+0x37a>
 80194a4:	b127      	cbz	r7, 80194b0 <__gethex+0x320>
 80194a6:	4639      	mov	r1, r7
 80194a8:	4620      	mov	r0, r4
 80194aa:	f000 fe48 	bl	801a13e <__any_on>
 80194ae:	4682      	mov	sl, r0
 80194b0:	2101      	movs	r1, #1
 80194b2:	117b      	asrs	r3, r7, #5
 80194b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80194b8:	f007 071f 	and.w	r7, r7, #31
 80194bc:	fa01 f707 	lsl.w	r7, r1, r7
 80194c0:	421f      	tst	r7, r3
 80194c2:	f04f 0702 	mov.w	r7, #2
 80194c6:	4629      	mov	r1, r5
 80194c8:	4620      	mov	r0, r4
 80194ca:	bf18      	it	ne
 80194cc:	f04a 0a02 	orrne.w	sl, sl, #2
 80194d0:	1b76      	subs	r6, r6, r5
 80194d2:	f7ff fdf5 	bl	80190c0 <rshift>
 80194d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80194da:	f1ba 0f00 	cmp.w	sl, #0
 80194de:	d048      	beq.n	8019572 <__gethex+0x3e2>
 80194e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80194e4:	2b02      	cmp	r3, #2
 80194e6:	d015      	beq.n	8019514 <__gethex+0x384>
 80194e8:	2b03      	cmp	r3, #3
 80194ea:	d017      	beq.n	801951c <__gethex+0x38c>
 80194ec:	2b01      	cmp	r3, #1
 80194ee:	d109      	bne.n	8019504 <__gethex+0x374>
 80194f0:	f01a 0f02 	tst.w	sl, #2
 80194f4:	d006      	beq.n	8019504 <__gethex+0x374>
 80194f6:	f8d9 0000 	ldr.w	r0, [r9]
 80194fa:	ea4a 0a00 	orr.w	sl, sl, r0
 80194fe:	f01a 0f01 	tst.w	sl, #1
 8019502:	d10e      	bne.n	8019522 <__gethex+0x392>
 8019504:	f047 0710 	orr.w	r7, r7, #16
 8019508:	e033      	b.n	8019572 <__gethex+0x3e2>
 801950a:	f04f 0a01 	mov.w	sl, #1
 801950e:	e7cf      	b.n	80194b0 <__gethex+0x320>
 8019510:	2701      	movs	r7, #1
 8019512:	e7e2      	b.n	80194da <__gethex+0x34a>
 8019514:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019516:	f1c3 0301 	rsb	r3, r3, #1
 801951a:	9315      	str	r3, [sp, #84]	; 0x54
 801951c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801951e:	2b00      	cmp	r3, #0
 8019520:	d0f0      	beq.n	8019504 <__gethex+0x374>
 8019522:	f04f 0c00 	mov.w	ip, #0
 8019526:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801952a:	f104 0314 	add.w	r3, r4, #20
 801952e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019532:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019536:	4618      	mov	r0, r3
 8019538:	f853 2b04 	ldr.w	r2, [r3], #4
 801953c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019540:	d01c      	beq.n	801957c <__gethex+0x3ec>
 8019542:	3201      	adds	r2, #1
 8019544:	6002      	str	r2, [r0, #0]
 8019546:	2f02      	cmp	r7, #2
 8019548:	f104 0314 	add.w	r3, r4, #20
 801954c:	d13d      	bne.n	80195ca <__gethex+0x43a>
 801954e:	f8d8 2000 	ldr.w	r2, [r8]
 8019552:	3a01      	subs	r2, #1
 8019554:	42b2      	cmp	r2, r6
 8019556:	d10a      	bne.n	801956e <__gethex+0x3de>
 8019558:	2201      	movs	r2, #1
 801955a:	1171      	asrs	r1, r6, #5
 801955c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019560:	f006 061f 	and.w	r6, r6, #31
 8019564:	fa02 f606 	lsl.w	r6, r2, r6
 8019568:	421e      	tst	r6, r3
 801956a:	bf18      	it	ne
 801956c:	4617      	movne	r7, r2
 801956e:	f047 0720 	orr.w	r7, r7, #32
 8019572:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019574:	601c      	str	r4, [r3, #0]
 8019576:	9b06      	ldr	r3, [sp, #24]
 8019578:	601d      	str	r5, [r3, #0]
 801957a:	e69b      	b.n	80192b4 <__gethex+0x124>
 801957c:	4299      	cmp	r1, r3
 801957e:	f843 cc04 	str.w	ip, [r3, #-4]
 8019582:	d8d8      	bhi.n	8019536 <__gethex+0x3a6>
 8019584:	68a3      	ldr	r3, [r4, #8]
 8019586:	459b      	cmp	fp, r3
 8019588:	db17      	blt.n	80195ba <__gethex+0x42a>
 801958a:	6861      	ldr	r1, [r4, #4]
 801958c:	9802      	ldr	r0, [sp, #8]
 801958e:	3101      	adds	r1, #1
 8019590:	f000 f93e 	bl	8019810 <_Balloc>
 8019594:	4681      	mov	r9, r0
 8019596:	b918      	cbnz	r0, 80195a0 <__gethex+0x410>
 8019598:	4602      	mov	r2, r0
 801959a:	2184      	movs	r1, #132	; 0x84
 801959c:	4b19      	ldr	r3, [pc, #100]	; (8019604 <__gethex+0x474>)
 801959e:	e6ac      	b.n	80192fa <__gethex+0x16a>
 80195a0:	6922      	ldr	r2, [r4, #16]
 80195a2:	f104 010c 	add.w	r1, r4, #12
 80195a6:	3202      	adds	r2, #2
 80195a8:	0092      	lsls	r2, r2, #2
 80195aa:	300c      	adds	r0, #12
 80195ac:	f7fc ff72 	bl	8016494 <memcpy>
 80195b0:	4621      	mov	r1, r4
 80195b2:	9802      	ldr	r0, [sp, #8]
 80195b4:	f000 f96c 	bl	8019890 <_Bfree>
 80195b8:	464c      	mov	r4, r9
 80195ba:	6923      	ldr	r3, [r4, #16]
 80195bc:	1c5a      	adds	r2, r3, #1
 80195be:	6122      	str	r2, [r4, #16]
 80195c0:	2201      	movs	r2, #1
 80195c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80195c6:	615a      	str	r2, [r3, #20]
 80195c8:	e7bd      	b.n	8019546 <__gethex+0x3b6>
 80195ca:	6922      	ldr	r2, [r4, #16]
 80195cc:	455a      	cmp	r2, fp
 80195ce:	dd0b      	ble.n	80195e8 <__gethex+0x458>
 80195d0:	2101      	movs	r1, #1
 80195d2:	4620      	mov	r0, r4
 80195d4:	f7ff fd74 	bl	80190c0 <rshift>
 80195d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80195dc:	3501      	adds	r5, #1
 80195de:	42ab      	cmp	r3, r5
 80195e0:	f6ff aed5 	blt.w	801938e <__gethex+0x1fe>
 80195e4:	2701      	movs	r7, #1
 80195e6:	e7c2      	b.n	801956e <__gethex+0x3de>
 80195e8:	f016 061f 	ands.w	r6, r6, #31
 80195ec:	d0fa      	beq.n	80195e4 <__gethex+0x454>
 80195ee:	449a      	add	sl, r3
 80195f0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80195f4:	f000 fa02 	bl	80199fc <__hi0bits>
 80195f8:	f1c6 0620 	rsb	r6, r6, #32
 80195fc:	42b0      	cmp	r0, r6
 80195fe:	dbe7      	blt.n	80195d0 <__gethex+0x440>
 8019600:	e7f0      	b.n	80195e4 <__gethex+0x454>
 8019602:	bf00      	nop
 8019604:	0801afdc 	.word	0x0801afdc

08019608 <L_shift>:
 8019608:	f1c2 0208 	rsb	r2, r2, #8
 801960c:	0092      	lsls	r2, r2, #2
 801960e:	b570      	push	{r4, r5, r6, lr}
 8019610:	f1c2 0620 	rsb	r6, r2, #32
 8019614:	6843      	ldr	r3, [r0, #4]
 8019616:	6804      	ldr	r4, [r0, #0]
 8019618:	fa03 f506 	lsl.w	r5, r3, r6
 801961c:	432c      	orrs	r4, r5
 801961e:	40d3      	lsrs	r3, r2
 8019620:	6004      	str	r4, [r0, #0]
 8019622:	f840 3f04 	str.w	r3, [r0, #4]!
 8019626:	4288      	cmp	r0, r1
 8019628:	d3f4      	bcc.n	8019614 <L_shift+0xc>
 801962a:	bd70      	pop	{r4, r5, r6, pc}

0801962c <__match>:
 801962c:	b530      	push	{r4, r5, lr}
 801962e:	6803      	ldr	r3, [r0, #0]
 8019630:	3301      	adds	r3, #1
 8019632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019636:	b914      	cbnz	r4, 801963e <__match+0x12>
 8019638:	6003      	str	r3, [r0, #0]
 801963a:	2001      	movs	r0, #1
 801963c:	bd30      	pop	{r4, r5, pc}
 801963e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019642:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019646:	2d19      	cmp	r5, #25
 8019648:	bf98      	it	ls
 801964a:	3220      	addls	r2, #32
 801964c:	42a2      	cmp	r2, r4
 801964e:	d0f0      	beq.n	8019632 <__match+0x6>
 8019650:	2000      	movs	r0, #0
 8019652:	e7f3      	b.n	801963c <__match+0x10>

08019654 <__hexnan>:
 8019654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019658:	2500      	movs	r5, #0
 801965a:	680b      	ldr	r3, [r1, #0]
 801965c:	4682      	mov	sl, r0
 801965e:	115e      	asrs	r6, r3, #5
 8019660:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019664:	f013 031f 	ands.w	r3, r3, #31
 8019668:	bf18      	it	ne
 801966a:	3604      	addne	r6, #4
 801966c:	1f37      	subs	r7, r6, #4
 801966e:	4690      	mov	r8, r2
 8019670:	46b9      	mov	r9, r7
 8019672:	463c      	mov	r4, r7
 8019674:	46ab      	mov	fp, r5
 8019676:	b087      	sub	sp, #28
 8019678:	6801      	ldr	r1, [r0, #0]
 801967a:	9301      	str	r3, [sp, #4]
 801967c:	f846 5c04 	str.w	r5, [r6, #-4]
 8019680:	9502      	str	r5, [sp, #8]
 8019682:	784a      	ldrb	r2, [r1, #1]
 8019684:	1c4b      	adds	r3, r1, #1
 8019686:	9303      	str	r3, [sp, #12]
 8019688:	b342      	cbz	r2, 80196dc <__hexnan+0x88>
 801968a:	4610      	mov	r0, r2
 801968c:	9105      	str	r1, [sp, #20]
 801968e:	9204      	str	r2, [sp, #16]
 8019690:	f7ff fd69 	bl	8019166 <__hexdig_fun>
 8019694:	2800      	cmp	r0, #0
 8019696:	d14f      	bne.n	8019738 <__hexnan+0xe4>
 8019698:	9a04      	ldr	r2, [sp, #16]
 801969a:	9905      	ldr	r1, [sp, #20]
 801969c:	2a20      	cmp	r2, #32
 801969e:	d818      	bhi.n	80196d2 <__hexnan+0x7e>
 80196a0:	9b02      	ldr	r3, [sp, #8]
 80196a2:	459b      	cmp	fp, r3
 80196a4:	dd13      	ble.n	80196ce <__hexnan+0x7a>
 80196a6:	454c      	cmp	r4, r9
 80196a8:	d206      	bcs.n	80196b8 <__hexnan+0x64>
 80196aa:	2d07      	cmp	r5, #7
 80196ac:	dc04      	bgt.n	80196b8 <__hexnan+0x64>
 80196ae:	462a      	mov	r2, r5
 80196b0:	4649      	mov	r1, r9
 80196b2:	4620      	mov	r0, r4
 80196b4:	f7ff ffa8 	bl	8019608 <L_shift>
 80196b8:	4544      	cmp	r4, r8
 80196ba:	d950      	bls.n	801975e <__hexnan+0x10a>
 80196bc:	2300      	movs	r3, #0
 80196be:	f1a4 0904 	sub.w	r9, r4, #4
 80196c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80196c6:	461d      	mov	r5, r3
 80196c8:	464c      	mov	r4, r9
 80196ca:	f8cd b008 	str.w	fp, [sp, #8]
 80196ce:	9903      	ldr	r1, [sp, #12]
 80196d0:	e7d7      	b.n	8019682 <__hexnan+0x2e>
 80196d2:	2a29      	cmp	r2, #41	; 0x29
 80196d4:	d156      	bne.n	8019784 <__hexnan+0x130>
 80196d6:	3102      	adds	r1, #2
 80196d8:	f8ca 1000 	str.w	r1, [sl]
 80196dc:	f1bb 0f00 	cmp.w	fp, #0
 80196e0:	d050      	beq.n	8019784 <__hexnan+0x130>
 80196e2:	454c      	cmp	r4, r9
 80196e4:	d206      	bcs.n	80196f4 <__hexnan+0xa0>
 80196e6:	2d07      	cmp	r5, #7
 80196e8:	dc04      	bgt.n	80196f4 <__hexnan+0xa0>
 80196ea:	462a      	mov	r2, r5
 80196ec:	4649      	mov	r1, r9
 80196ee:	4620      	mov	r0, r4
 80196f0:	f7ff ff8a 	bl	8019608 <L_shift>
 80196f4:	4544      	cmp	r4, r8
 80196f6:	d934      	bls.n	8019762 <__hexnan+0x10e>
 80196f8:	4623      	mov	r3, r4
 80196fa:	f1a8 0204 	sub.w	r2, r8, #4
 80196fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8019702:	429f      	cmp	r7, r3
 8019704:	f842 1f04 	str.w	r1, [r2, #4]!
 8019708:	d2f9      	bcs.n	80196fe <__hexnan+0xaa>
 801970a:	1b3b      	subs	r3, r7, r4
 801970c:	f023 0303 	bic.w	r3, r3, #3
 8019710:	3304      	adds	r3, #4
 8019712:	3401      	adds	r4, #1
 8019714:	3e03      	subs	r6, #3
 8019716:	42b4      	cmp	r4, r6
 8019718:	bf88      	it	hi
 801971a:	2304      	movhi	r3, #4
 801971c:	2200      	movs	r2, #0
 801971e:	4443      	add	r3, r8
 8019720:	f843 2b04 	str.w	r2, [r3], #4
 8019724:	429f      	cmp	r7, r3
 8019726:	d2fb      	bcs.n	8019720 <__hexnan+0xcc>
 8019728:	683b      	ldr	r3, [r7, #0]
 801972a:	b91b      	cbnz	r3, 8019734 <__hexnan+0xe0>
 801972c:	4547      	cmp	r7, r8
 801972e:	d127      	bne.n	8019780 <__hexnan+0x12c>
 8019730:	2301      	movs	r3, #1
 8019732:	603b      	str	r3, [r7, #0]
 8019734:	2005      	movs	r0, #5
 8019736:	e026      	b.n	8019786 <__hexnan+0x132>
 8019738:	3501      	adds	r5, #1
 801973a:	2d08      	cmp	r5, #8
 801973c:	f10b 0b01 	add.w	fp, fp, #1
 8019740:	dd06      	ble.n	8019750 <__hexnan+0xfc>
 8019742:	4544      	cmp	r4, r8
 8019744:	d9c3      	bls.n	80196ce <__hexnan+0x7a>
 8019746:	2300      	movs	r3, #0
 8019748:	2501      	movs	r5, #1
 801974a:	f844 3c04 	str.w	r3, [r4, #-4]
 801974e:	3c04      	subs	r4, #4
 8019750:	6822      	ldr	r2, [r4, #0]
 8019752:	f000 000f 	and.w	r0, r0, #15
 8019756:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801975a:	6022      	str	r2, [r4, #0]
 801975c:	e7b7      	b.n	80196ce <__hexnan+0x7a>
 801975e:	2508      	movs	r5, #8
 8019760:	e7b5      	b.n	80196ce <__hexnan+0x7a>
 8019762:	9b01      	ldr	r3, [sp, #4]
 8019764:	2b00      	cmp	r3, #0
 8019766:	d0df      	beq.n	8019728 <__hexnan+0xd4>
 8019768:	f04f 32ff 	mov.w	r2, #4294967295
 801976c:	f1c3 0320 	rsb	r3, r3, #32
 8019770:	fa22 f303 	lsr.w	r3, r2, r3
 8019774:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019778:	401a      	ands	r2, r3
 801977a:	f846 2c04 	str.w	r2, [r6, #-4]
 801977e:	e7d3      	b.n	8019728 <__hexnan+0xd4>
 8019780:	3f04      	subs	r7, #4
 8019782:	e7d1      	b.n	8019728 <__hexnan+0xd4>
 8019784:	2004      	movs	r0, #4
 8019786:	b007      	add	sp, #28
 8019788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801978c <_localeconv_r>:
 801978c:	4800      	ldr	r0, [pc, #0]	; (8019790 <_localeconv_r+0x4>)
 801978e:	4770      	bx	lr
 8019790:	20000394 	.word	0x20000394

08019794 <_lseek_r>:
 8019794:	b538      	push	{r3, r4, r5, lr}
 8019796:	4604      	mov	r4, r0
 8019798:	4608      	mov	r0, r1
 801979a:	4611      	mov	r1, r2
 801979c:	2200      	movs	r2, #0
 801979e:	4d05      	ldr	r5, [pc, #20]	; (80197b4 <_lseek_r+0x20>)
 80197a0:	602a      	str	r2, [r5, #0]
 80197a2:	461a      	mov	r2, r3
 80197a4:	f7ec fd54 	bl	8006250 <_lseek>
 80197a8:	1c43      	adds	r3, r0, #1
 80197aa:	d102      	bne.n	80197b2 <_lseek_r+0x1e>
 80197ac:	682b      	ldr	r3, [r5, #0]
 80197ae:	b103      	cbz	r3, 80197b2 <_lseek_r+0x1e>
 80197b0:	6023      	str	r3, [r4, #0]
 80197b2:	bd38      	pop	{r3, r4, r5, pc}
 80197b4:	20011864 	.word	0x20011864

080197b8 <__ascii_mbtowc>:
 80197b8:	b082      	sub	sp, #8
 80197ba:	b901      	cbnz	r1, 80197be <__ascii_mbtowc+0x6>
 80197bc:	a901      	add	r1, sp, #4
 80197be:	b142      	cbz	r2, 80197d2 <__ascii_mbtowc+0x1a>
 80197c0:	b14b      	cbz	r3, 80197d6 <__ascii_mbtowc+0x1e>
 80197c2:	7813      	ldrb	r3, [r2, #0]
 80197c4:	600b      	str	r3, [r1, #0]
 80197c6:	7812      	ldrb	r2, [r2, #0]
 80197c8:	1e10      	subs	r0, r2, #0
 80197ca:	bf18      	it	ne
 80197cc:	2001      	movne	r0, #1
 80197ce:	b002      	add	sp, #8
 80197d0:	4770      	bx	lr
 80197d2:	4610      	mov	r0, r2
 80197d4:	e7fb      	b.n	80197ce <__ascii_mbtowc+0x16>
 80197d6:	f06f 0001 	mvn.w	r0, #1
 80197da:	e7f8      	b.n	80197ce <__ascii_mbtowc+0x16>

080197dc <memchr>:
 80197dc:	4603      	mov	r3, r0
 80197de:	b510      	push	{r4, lr}
 80197e0:	b2c9      	uxtb	r1, r1
 80197e2:	4402      	add	r2, r0
 80197e4:	4293      	cmp	r3, r2
 80197e6:	4618      	mov	r0, r3
 80197e8:	d101      	bne.n	80197ee <memchr+0x12>
 80197ea:	2000      	movs	r0, #0
 80197ec:	e003      	b.n	80197f6 <memchr+0x1a>
 80197ee:	7804      	ldrb	r4, [r0, #0]
 80197f0:	3301      	adds	r3, #1
 80197f2:	428c      	cmp	r4, r1
 80197f4:	d1f6      	bne.n	80197e4 <memchr+0x8>
 80197f6:	bd10      	pop	{r4, pc}

080197f8 <__malloc_lock>:
 80197f8:	4801      	ldr	r0, [pc, #4]	; (8019800 <__malloc_lock+0x8>)
 80197fa:	f7fc be38 	b.w	801646e <__retarget_lock_acquire_recursive>
 80197fe:	bf00      	nop
 8019800:	2001185c 	.word	0x2001185c

08019804 <__malloc_unlock>:
 8019804:	4801      	ldr	r0, [pc, #4]	; (801980c <__malloc_unlock+0x8>)
 8019806:	f7fc be33 	b.w	8016470 <__retarget_lock_release_recursive>
 801980a:	bf00      	nop
 801980c:	2001185c 	.word	0x2001185c

08019810 <_Balloc>:
 8019810:	b570      	push	{r4, r5, r6, lr}
 8019812:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019814:	4604      	mov	r4, r0
 8019816:	460d      	mov	r5, r1
 8019818:	b976      	cbnz	r6, 8019838 <_Balloc+0x28>
 801981a:	2010      	movs	r0, #16
 801981c:	f7fc fe2a 	bl	8016474 <malloc>
 8019820:	4602      	mov	r2, r0
 8019822:	6260      	str	r0, [r4, #36]	; 0x24
 8019824:	b920      	cbnz	r0, 8019830 <_Balloc+0x20>
 8019826:	2166      	movs	r1, #102	; 0x66
 8019828:	4b17      	ldr	r3, [pc, #92]	; (8019888 <_Balloc+0x78>)
 801982a:	4818      	ldr	r0, [pc, #96]	; (801988c <_Balloc+0x7c>)
 801982c:	f000 fe4a 	bl	801a4c4 <__assert_func>
 8019830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019834:	6006      	str	r6, [r0, #0]
 8019836:	60c6      	str	r6, [r0, #12]
 8019838:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801983a:	68f3      	ldr	r3, [r6, #12]
 801983c:	b183      	cbz	r3, 8019860 <_Balloc+0x50>
 801983e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019840:	68db      	ldr	r3, [r3, #12]
 8019842:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019846:	b9b8      	cbnz	r0, 8019878 <_Balloc+0x68>
 8019848:	2101      	movs	r1, #1
 801984a:	fa01 f605 	lsl.w	r6, r1, r5
 801984e:	1d72      	adds	r2, r6, #5
 8019850:	4620      	mov	r0, r4
 8019852:	0092      	lsls	r2, r2, #2
 8019854:	f000 fc94 	bl	801a180 <_calloc_r>
 8019858:	b160      	cbz	r0, 8019874 <_Balloc+0x64>
 801985a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801985e:	e00e      	b.n	801987e <_Balloc+0x6e>
 8019860:	2221      	movs	r2, #33	; 0x21
 8019862:	2104      	movs	r1, #4
 8019864:	4620      	mov	r0, r4
 8019866:	f000 fc8b 	bl	801a180 <_calloc_r>
 801986a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801986c:	60f0      	str	r0, [r6, #12]
 801986e:	68db      	ldr	r3, [r3, #12]
 8019870:	2b00      	cmp	r3, #0
 8019872:	d1e4      	bne.n	801983e <_Balloc+0x2e>
 8019874:	2000      	movs	r0, #0
 8019876:	bd70      	pop	{r4, r5, r6, pc}
 8019878:	6802      	ldr	r2, [r0, #0]
 801987a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801987e:	2300      	movs	r3, #0
 8019880:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019884:	e7f7      	b.n	8019876 <_Balloc+0x66>
 8019886:	bf00      	nop
 8019888:	0801af66 	.word	0x0801af66
 801988c:	0801b06c 	.word	0x0801b06c

08019890 <_Bfree>:
 8019890:	b570      	push	{r4, r5, r6, lr}
 8019892:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019894:	4605      	mov	r5, r0
 8019896:	460c      	mov	r4, r1
 8019898:	b976      	cbnz	r6, 80198b8 <_Bfree+0x28>
 801989a:	2010      	movs	r0, #16
 801989c:	f7fc fdea 	bl	8016474 <malloc>
 80198a0:	4602      	mov	r2, r0
 80198a2:	6268      	str	r0, [r5, #36]	; 0x24
 80198a4:	b920      	cbnz	r0, 80198b0 <_Bfree+0x20>
 80198a6:	218a      	movs	r1, #138	; 0x8a
 80198a8:	4b08      	ldr	r3, [pc, #32]	; (80198cc <_Bfree+0x3c>)
 80198aa:	4809      	ldr	r0, [pc, #36]	; (80198d0 <_Bfree+0x40>)
 80198ac:	f000 fe0a 	bl	801a4c4 <__assert_func>
 80198b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80198b4:	6006      	str	r6, [r0, #0]
 80198b6:	60c6      	str	r6, [r0, #12]
 80198b8:	b13c      	cbz	r4, 80198ca <_Bfree+0x3a>
 80198ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80198bc:	6862      	ldr	r2, [r4, #4]
 80198be:	68db      	ldr	r3, [r3, #12]
 80198c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80198c4:	6021      	str	r1, [r4, #0]
 80198c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80198ca:	bd70      	pop	{r4, r5, r6, pc}
 80198cc:	0801af66 	.word	0x0801af66
 80198d0:	0801b06c 	.word	0x0801b06c

080198d4 <__multadd>:
 80198d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198d8:	4698      	mov	r8, r3
 80198da:	460c      	mov	r4, r1
 80198dc:	2300      	movs	r3, #0
 80198de:	690e      	ldr	r6, [r1, #16]
 80198e0:	4607      	mov	r7, r0
 80198e2:	f101 0014 	add.w	r0, r1, #20
 80198e6:	6805      	ldr	r5, [r0, #0]
 80198e8:	3301      	adds	r3, #1
 80198ea:	b2a9      	uxth	r1, r5
 80198ec:	fb02 8101 	mla	r1, r2, r1, r8
 80198f0:	0c2d      	lsrs	r5, r5, #16
 80198f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80198f6:	fb02 c505 	mla	r5, r2, r5, ip
 80198fa:	b289      	uxth	r1, r1
 80198fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019900:	429e      	cmp	r6, r3
 8019902:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019906:	f840 1b04 	str.w	r1, [r0], #4
 801990a:	dcec      	bgt.n	80198e6 <__multadd+0x12>
 801990c:	f1b8 0f00 	cmp.w	r8, #0
 8019910:	d022      	beq.n	8019958 <__multadd+0x84>
 8019912:	68a3      	ldr	r3, [r4, #8]
 8019914:	42b3      	cmp	r3, r6
 8019916:	dc19      	bgt.n	801994c <__multadd+0x78>
 8019918:	6861      	ldr	r1, [r4, #4]
 801991a:	4638      	mov	r0, r7
 801991c:	3101      	adds	r1, #1
 801991e:	f7ff ff77 	bl	8019810 <_Balloc>
 8019922:	4605      	mov	r5, r0
 8019924:	b928      	cbnz	r0, 8019932 <__multadd+0x5e>
 8019926:	4602      	mov	r2, r0
 8019928:	21b5      	movs	r1, #181	; 0xb5
 801992a:	4b0d      	ldr	r3, [pc, #52]	; (8019960 <__multadd+0x8c>)
 801992c:	480d      	ldr	r0, [pc, #52]	; (8019964 <__multadd+0x90>)
 801992e:	f000 fdc9 	bl	801a4c4 <__assert_func>
 8019932:	6922      	ldr	r2, [r4, #16]
 8019934:	f104 010c 	add.w	r1, r4, #12
 8019938:	3202      	adds	r2, #2
 801993a:	0092      	lsls	r2, r2, #2
 801993c:	300c      	adds	r0, #12
 801993e:	f7fc fda9 	bl	8016494 <memcpy>
 8019942:	4621      	mov	r1, r4
 8019944:	4638      	mov	r0, r7
 8019946:	f7ff ffa3 	bl	8019890 <_Bfree>
 801994a:	462c      	mov	r4, r5
 801994c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019950:	3601      	adds	r6, #1
 8019952:	f8c3 8014 	str.w	r8, [r3, #20]
 8019956:	6126      	str	r6, [r4, #16]
 8019958:	4620      	mov	r0, r4
 801995a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801995e:	bf00      	nop
 8019960:	0801afdc 	.word	0x0801afdc
 8019964:	0801b06c 	.word	0x0801b06c

08019968 <__s2b>:
 8019968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801996c:	4615      	mov	r5, r2
 801996e:	2209      	movs	r2, #9
 8019970:	461f      	mov	r7, r3
 8019972:	3308      	adds	r3, #8
 8019974:	460c      	mov	r4, r1
 8019976:	fb93 f3f2 	sdiv	r3, r3, r2
 801997a:	4606      	mov	r6, r0
 801997c:	2201      	movs	r2, #1
 801997e:	2100      	movs	r1, #0
 8019980:	429a      	cmp	r2, r3
 8019982:	db09      	blt.n	8019998 <__s2b+0x30>
 8019984:	4630      	mov	r0, r6
 8019986:	f7ff ff43 	bl	8019810 <_Balloc>
 801998a:	b940      	cbnz	r0, 801999e <__s2b+0x36>
 801998c:	4602      	mov	r2, r0
 801998e:	21ce      	movs	r1, #206	; 0xce
 8019990:	4b18      	ldr	r3, [pc, #96]	; (80199f4 <__s2b+0x8c>)
 8019992:	4819      	ldr	r0, [pc, #100]	; (80199f8 <__s2b+0x90>)
 8019994:	f000 fd96 	bl	801a4c4 <__assert_func>
 8019998:	0052      	lsls	r2, r2, #1
 801999a:	3101      	adds	r1, #1
 801999c:	e7f0      	b.n	8019980 <__s2b+0x18>
 801999e:	9b08      	ldr	r3, [sp, #32]
 80199a0:	2d09      	cmp	r5, #9
 80199a2:	6143      	str	r3, [r0, #20]
 80199a4:	f04f 0301 	mov.w	r3, #1
 80199a8:	6103      	str	r3, [r0, #16]
 80199aa:	dd16      	ble.n	80199da <__s2b+0x72>
 80199ac:	f104 0909 	add.w	r9, r4, #9
 80199b0:	46c8      	mov	r8, r9
 80199b2:	442c      	add	r4, r5
 80199b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80199b8:	4601      	mov	r1, r0
 80199ba:	220a      	movs	r2, #10
 80199bc:	4630      	mov	r0, r6
 80199be:	3b30      	subs	r3, #48	; 0x30
 80199c0:	f7ff ff88 	bl	80198d4 <__multadd>
 80199c4:	45a0      	cmp	r8, r4
 80199c6:	d1f5      	bne.n	80199b4 <__s2b+0x4c>
 80199c8:	f1a5 0408 	sub.w	r4, r5, #8
 80199cc:	444c      	add	r4, r9
 80199ce:	1b2d      	subs	r5, r5, r4
 80199d0:	1963      	adds	r3, r4, r5
 80199d2:	42bb      	cmp	r3, r7
 80199d4:	db04      	blt.n	80199e0 <__s2b+0x78>
 80199d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199da:	2509      	movs	r5, #9
 80199dc:	340a      	adds	r4, #10
 80199de:	e7f6      	b.n	80199ce <__s2b+0x66>
 80199e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80199e4:	4601      	mov	r1, r0
 80199e6:	220a      	movs	r2, #10
 80199e8:	4630      	mov	r0, r6
 80199ea:	3b30      	subs	r3, #48	; 0x30
 80199ec:	f7ff ff72 	bl	80198d4 <__multadd>
 80199f0:	e7ee      	b.n	80199d0 <__s2b+0x68>
 80199f2:	bf00      	nop
 80199f4:	0801afdc 	.word	0x0801afdc
 80199f8:	0801b06c 	.word	0x0801b06c

080199fc <__hi0bits>:
 80199fc:	0c02      	lsrs	r2, r0, #16
 80199fe:	0412      	lsls	r2, r2, #16
 8019a00:	4603      	mov	r3, r0
 8019a02:	b9ca      	cbnz	r2, 8019a38 <__hi0bits+0x3c>
 8019a04:	0403      	lsls	r3, r0, #16
 8019a06:	2010      	movs	r0, #16
 8019a08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019a0c:	bf04      	itt	eq
 8019a0e:	021b      	lsleq	r3, r3, #8
 8019a10:	3008      	addeq	r0, #8
 8019a12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019a16:	bf04      	itt	eq
 8019a18:	011b      	lsleq	r3, r3, #4
 8019a1a:	3004      	addeq	r0, #4
 8019a1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019a20:	bf04      	itt	eq
 8019a22:	009b      	lsleq	r3, r3, #2
 8019a24:	3002      	addeq	r0, #2
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	db05      	blt.n	8019a36 <__hi0bits+0x3a>
 8019a2a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8019a2e:	f100 0001 	add.w	r0, r0, #1
 8019a32:	bf08      	it	eq
 8019a34:	2020      	moveq	r0, #32
 8019a36:	4770      	bx	lr
 8019a38:	2000      	movs	r0, #0
 8019a3a:	e7e5      	b.n	8019a08 <__hi0bits+0xc>

08019a3c <__lo0bits>:
 8019a3c:	6803      	ldr	r3, [r0, #0]
 8019a3e:	4602      	mov	r2, r0
 8019a40:	f013 0007 	ands.w	r0, r3, #7
 8019a44:	d00b      	beq.n	8019a5e <__lo0bits+0x22>
 8019a46:	07d9      	lsls	r1, r3, #31
 8019a48:	d422      	bmi.n	8019a90 <__lo0bits+0x54>
 8019a4a:	0798      	lsls	r0, r3, #30
 8019a4c:	bf49      	itett	mi
 8019a4e:	085b      	lsrmi	r3, r3, #1
 8019a50:	089b      	lsrpl	r3, r3, #2
 8019a52:	2001      	movmi	r0, #1
 8019a54:	6013      	strmi	r3, [r2, #0]
 8019a56:	bf5c      	itt	pl
 8019a58:	2002      	movpl	r0, #2
 8019a5a:	6013      	strpl	r3, [r2, #0]
 8019a5c:	4770      	bx	lr
 8019a5e:	b299      	uxth	r1, r3
 8019a60:	b909      	cbnz	r1, 8019a66 <__lo0bits+0x2a>
 8019a62:	2010      	movs	r0, #16
 8019a64:	0c1b      	lsrs	r3, r3, #16
 8019a66:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019a6a:	bf04      	itt	eq
 8019a6c:	0a1b      	lsreq	r3, r3, #8
 8019a6e:	3008      	addeq	r0, #8
 8019a70:	0719      	lsls	r1, r3, #28
 8019a72:	bf04      	itt	eq
 8019a74:	091b      	lsreq	r3, r3, #4
 8019a76:	3004      	addeq	r0, #4
 8019a78:	0799      	lsls	r1, r3, #30
 8019a7a:	bf04      	itt	eq
 8019a7c:	089b      	lsreq	r3, r3, #2
 8019a7e:	3002      	addeq	r0, #2
 8019a80:	07d9      	lsls	r1, r3, #31
 8019a82:	d403      	bmi.n	8019a8c <__lo0bits+0x50>
 8019a84:	085b      	lsrs	r3, r3, #1
 8019a86:	f100 0001 	add.w	r0, r0, #1
 8019a8a:	d003      	beq.n	8019a94 <__lo0bits+0x58>
 8019a8c:	6013      	str	r3, [r2, #0]
 8019a8e:	4770      	bx	lr
 8019a90:	2000      	movs	r0, #0
 8019a92:	4770      	bx	lr
 8019a94:	2020      	movs	r0, #32
 8019a96:	4770      	bx	lr

08019a98 <__i2b>:
 8019a98:	b510      	push	{r4, lr}
 8019a9a:	460c      	mov	r4, r1
 8019a9c:	2101      	movs	r1, #1
 8019a9e:	f7ff feb7 	bl	8019810 <_Balloc>
 8019aa2:	4602      	mov	r2, r0
 8019aa4:	b928      	cbnz	r0, 8019ab2 <__i2b+0x1a>
 8019aa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019aaa:	4b04      	ldr	r3, [pc, #16]	; (8019abc <__i2b+0x24>)
 8019aac:	4804      	ldr	r0, [pc, #16]	; (8019ac0 <__i2b+0x28>)
 8019aae:	f000 fd09 	bl	801a4c4 <__assert_func>
 8019ab2:	2301      	movs	r3, #1
 8019ab4:	6144      	str	r4, [r0, #20]
 8019ab6:	6103      	str	r3, [r0, #16]
 8019ab8:	bd10      	pop	{r4, pc}
 8019aba:	bf00      	nop
 8019abc:	0801afdc 	.word	0x0801afdc
 8019ac0:	0801b06c 	.word	0x0801b06c

08019ac4 <__multiply>:
 8019ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ac8:	4614      	mov	r4, r2
 8019aca:	690a      	ldr	r2, [r1, #16]
 8019acc:	6923      	ldr	r3, [r4, #16]
 8019ace:	460d      	mov	r5, r1
 8019ad0:	429a      	cmp	r2, r3
 8019ad2:	bfbe      	ittt	lt
 8019ad4:	460b      	movlt	r3, r1
 8019ad6:	4625      	movlt	r5, r4
 8019ad8:	461c      	movlt	r4, r3
 8019ada:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019ade:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019ae2:	68ab      	ldr	r3, [r5, #8]
 8019ae4:	6869      	ldr	r1, [r5, #4]
 8019ae6:	eb0a 0709 	add.w	r7, sl, r9
 8019aea:	42bb      	cmp	r3, r7
 8019aec:	b085      	sub	sp, #20
 8019aee:	bfb8      	it	lt
 8019af0:	3101      	addlt	r1, #1
 8019af2:	f7ff fe8d 	bl	8019810 <_Balloc>
 8019af6:	b930      	cbnz	r0, 8019b06 <__multiply+0x42>
 8019af8:	4602      	mov	r2, r0
 8019afa:	f240 115d 	movw	r1, #349	; 0x15d
 8019afe:	4b41      	ldr	r3, [pc, #260]	; (8019c04 <__multiply+0x140>)
 8019b00:	4841      	ldr	r0, [pc, #260]	; (8019c08 <__multiply+0x144>)
 8019b02:	f000 fcdf 	bl	801a4c4 <__assert_func>
 8019b06:	f100 0614 	add.w	r6, r0, #20
 8019b0a:	4633      	mov	r3, r6
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019b12:	4543      	cmp	r3, r8
 8019b14:	d31e      	bcc.n	8019b54 <__multiply+0x90>
 8019b16:	f105 0c14 	add.w	ip, r5, #20
 8019b1a:	f104 0314 	add.w	r3, r4, #20
 8019b1e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019b22:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019b26:	9202      	str	r2, [sp, #8]
 8019b28:	ebac 0205 	sub.w	r2, ip, r5
 8019b2c:	3a15      	subs	r2, #21
 8019b2e:	f022 0203 	bic.w	r2, r2, #3
 8019b32:	3204      	adds	r2, #4
 8019b34:	f105 0115 	add.w	r1, r5, #21
 8019b38:	458c      	cmp	ip, r1
 8019b3a:	bf38      	it	cc
 8019b3c:	2204      	movcc	r2, #4
 8019b3e:	9201      	str	r2, [sp, #4]
 8019b40:	9a02      	ldr	r2, [sp, #8]
 8019b42:	9303      	str	r3, [sp, #12]
 8019b44:	429a      	cmp	r2, r3
 8019b46:	d808      	bhi.n	8019b5a <__multiply+0x96>
 8019b48:	2f00      	cmp	r7, #0
 8019b4a:	dc55      	bgt.n	8019bf8 <__multiply+0x134>
 8019b4c:	6107      	str	r7, [r0, #16]
 8019b4e:	b005      	add	sp, #20
 8019b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b54:	f843 2b04 	str.w	r2, [r3], #4
 8019b58:	e7db      	b.n	8019b12 <__multiply+0x4e>
 8019b5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8019b5e:	f1ba 0f00 	cmp.w	sl, #0
 8019b62:	d020      	beq.n	8019ba6 <__multiply+0xe2>
 8019b64:	46b1      	mov	r9, r6
 8019b66:	2200      	movs	r2, #0
 8019b68:	f105 0e14 	add.w	lr, r5, #20
 8019b6c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019b70:	f8d9 b000 	ldr.w	fp, [r9]
 8019b74:	b2a1      	uxth	r1, r4
 8019b76:	fa1f fb8b 	uxth.w	fp, fp
 8019b7a:	fb0a b101 	mla	r1, sl, r1, fp
 8019b7e:	4411      	add	r1, r2
 8019b80:	f8d9 2000 	ldr.w	r2, [r9]
 8019b84:	0c24      	lsrs	r4, r4, #16
 8019b86:	0c12      	lsrs	r2, r2, #16
 8019b88:	fb0a 2404 	mla	r4, sl, r4, r2
 8019b8c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019b90:	b289      	uxth	r1, r1
 8019b92:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019b96:	45f4      	cmp	ip, lr
 8019b98:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019b9c:	f849 1b04 	str.w	r1, [r9], #4
 8019ba0:	d8e4      	bhi.n	8019b6c <__multiply+0xa8>
 8019ba2:	9901      	ldr	r1, [sp, #4]
 8019ba4:	5072      	str	r2, [r6, r1]
 8019ba6:	9a03      	ldr	r2, [sp, #12]
 8019ba8:	3304      	adds	r3, #4
 8019baa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019bae:	f1b9 0f00 	cmp.w	r9, #0
 8019bb2:	d01f      	beq.n	8019bf4 <__multiply+0x130>
 8019bb4:	46b6      	mov	lr, r6
 8019bb6:	f04f 0a00 	mov.w	sl, #0
 8019bba:	6834      	ldr	r4, [r6, #0]
 8019bbc:	f105 0114 	add.w	r1, r5, #20
 8019bc0:	880a      	ldrh	r2, [r1, #0]
 8019bc2:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019bc6:	b2a4      	uxth	r4, r4
 8019bc8:	fb09 b202 	mla	r2, r9, r2, fp
 8019bcc:	4492      	add	sl, r2
 8019bce:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019bd2:	f84e 4b04 	str.w	r4, [lr], #4
 8019bd6:	f851 4b04 	ldr.w	r4, [r1], #4
 8019bda:	f8be 2000 	ldrh.w	r2, [lr]
 8019bde:	0c24      	lsrs	r4, r4, #16
 8019be0:	fb09 2404 	mla	r4, r9, r4, r2
 8019be4:	458c      	cmp	ip, r1
 8019be6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019bea:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019bee:	d8e7      	bhi.n	8019bc0 <__multiply+0xfc>
 8019bf0:	9a01      	ldr	r2, [sp, #4]
 8019bf2:	50b4      	str	r4, [r6, r2]
 8019bf4:	3604      	adds	r6, #4
 8019bf6:	e7a3      	b.n	8019b40 <__multiply+0x7c>
 8019bf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d1a5      	bne.n	8019b4c <__multiply+0x88>
 8019c00:	3f01      	subs	r7, #1
 8019c02:	e7a1      	b.n	8019b48 <__multiply+0x84>
 8019c04:	0801afdc 	.word	0x0801afdc
 8019c08:	0801b06c 	.word	0x0801b06c

08019c0c <__pow5mult>:
 8019c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c10:	4615      	mov	r5, r2
 8019c12:	f012 0203 	ands.w	r2, r2, #3
 8019c16:	4606      	mov	r6, r0
 8019c18:	460f      	mov	r7, r1
 8019c1a:	d007      	beq.n	8019c2c <__pow5mult+0x20>
 8019c1c:	4c25      	ldr	r4, [pc, #148]	; (8019cb4 <__pow5mult+0xa8>)
 8019c1e:	3a01      	subs	r2, #1
 8019c20:	2300      	movs	r3, #0
 8019c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019c26:	f7ff fe55 	bl	80198d4 <__multadd>
 8019c2a:	4607      	mov	r7, r0
 8019c2c:	10ad      	asrs	r5, r5, #2
 8019c2e:	d03d      	beq.n	8019cac <__pow5mult+0xa0>
 8019c30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019c32:	b97c      	cbnz	r4, 8019c54 <__pow5mult+0x48>
 8019c34:	2010      	movs	r0, #16
 8019c36:	f7fc fc1d 	bl	8016474 <malloc>
 8019c3a:	4602      	mov	r2, r0
 8019c3c:	6270      	str	r0, [r6, #36]	; 0x24
 8019c3e:	b928      	cbnz	r0, 8019c4c <__pow5mult+0x40>
 8019c40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019c44:	4b1c      	ldr	r3, [pc, #112]	; (8019cb8 <__pow5mult+0xac>)
 8019c46:	481d      	ldr	r0, [pc, #116]	; (8019cbc <__pow5mult+0xb0>)
 8019c48:	f000 fc3c 	bl	801a4c4 <__assert_func>
 8019c4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019c50:	6004      	str	r4, [r0, #0]
 8019c52:	60c4      	str	r4, [r0, #12]
 8019c54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019c58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019c5c:	b94c      	cbnz	r4, 8019c72 <__pow5mult+0x66>
 8019c5e:	f240 2171 	movw	r1, #625	; 0x271
 8019c62:	4630      	mov	r0, r6
 8019c64:	f7ff ff18 	bl	8019a98 <__i2b>
 8019c68:	2300      	movs	r3, #0
 8019c6a:	4604      	mov	r4, r0
 8019c6c:	f8c8 0008 	str.w	r0, [r8, #8]
 8019c70:	6003      	str	r3, [r0, #0]
 8019c72:	f04f 0900 	mov.w	r9, #0
 8019c76:	07eb      	lsls	r3, r5, #31
 8019c78:	d50a      	bpl.n	8019c90 <__pow5mult+0x84>
 8019c7a:	4639      	mov	r1, r7
 8019c7c:	4622      	mov	r2, r4
 8019c7e:	4630      	mov	r0, r6
 8019c80:	f7ff ff20 	bl	8019ac4 <__multiply>
 8019c84:	4680      	mov	r8, r0
 8019c86:	4639      	mov	r1, r7
 8019c88:	4630      	mov	r0, r6
 8019c8a:	f7ff fe01 	bl	8019890 <_Bfree>
 8019c8e:	4647      	mov	r7, r8
 8019c90:	106d      	asrs	r5, r5, #1
 8019c92:	d00b      	beq.n	8019cac <__pow5mult+0xa0>
 8019c94:	6820      	ldr	r0, [r4, #0]
 8019c96:	b938      	cbnz	r0, 8019ca8 <__pow5mult+0x9c>
 8019c98:	4622      	mov	r2, r4
 8019c9a:	4621      	mov	r1, r4
 8019c9c:	4630      	mov	r0, r6
 8019c9e:	f7ff ff11 	bl	8019ac4 <__multiply>
 8019ca2:	6020      	str	r0, [r4, #0]
 8019ca4:	f8c0 9000 	str.w	r9, [r0]
 8019ca8:	4604      	mov	r4, r0
 8019caa:	e7e4      	b.n	8019c76 <__pow5mult+0x6a>
 8019cac:	4638      	mov	r0, r7
 8019cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cb2:	bf00      	nop
 8019cb4:	0801b1c0 	.word	0x0801b1c0
 8019cb8:	0801af66 	.word	0x0801af66
 8019cbc:	0801b06c 	.word	0x0801b06c

08019cc0 <__lshift>:
 8019cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019cc4:	460c      	mov	r4, r1
 8019cc6:	4607      	mov	r7, r0
 8019cc8:	4691      	mov	r9, r2
 8019cca:	6923      	ldr	r3, [r4, #16]
 8019ccc:	6849      	ldr	r1, [r1, #4]
 8019cce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019cd2:	68a3      	ldr	r3, [r4, #8]
 8019cd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019cd8:	f108 0601 	add.w	r6, r8, #1
 8019cdc:	42b3      	cmp	r3, r6
 8019cde:	db0b      	blt.n	8019cf8 <__lshift+0x38>
 8019ce0:	4638      	mov	r0, r7
 8019ce2:	f7ff fd95 	bl	8019810 <_Balloc>
 8019ce6:	4605      	mov	r5, r0
 8019ce8:	b948      	cbnz	r0, 8019cfe <__lshift+0x3e>
 8019cea:	4602      	mov	r2, r0
 8019cec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019cf0:	4b27      	ldr	r3, [pc, #156]	; (8019d90 <__lshift+0xd0>)
 8019cf2:	4828      	ldr	r0, [pc, #160]	; (8019d94 <__lshift+0xd4>)
 8019cf4:	f000 fbe6 	bl	801a4c4 <__assert_func>
 8019cf8:	3101      	adds	r1, #1
 8019cfa:	005b      	lsls	r3, r3, #1
 8019cfc:	e7ee      	b.n	8019cdc <__lshift+0x1c>
 8019cfe:	2300      	movs	r3, #0
 8019d00:	f100 0114 	add.w	r1, r0, #20
 8019d04:	f100 0210 	add.w	r2, r0, #16
 8019d08:	4618      	mov	r0, r3
 8019d0a:	4553      	cmp	r3, sl
 8019d0c:	db33      	blt.n	8019d76 <__lshift+0xb6>
 8019d0e:	6920      	ldr	r0, [r4, #16]
 8019d10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019d14:	f104 0314 	add.w	r3, r4, #20
 8019d18:	f019 091f 	ands.w	r9, r9, #31
 8019d1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019d20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019d24:	d02b      	beq.n	8019d7e <__lshift+0xbe>
 8019d26:	468a      	mov	sl, r1
 8019d28:	2200      	movs	r2, #0
 8019d2a:	f1c9 0e20 	rsb	lr, r9, #32
 8019d2e:	6818      	ldr	r0, [r3, #0]
 8019d30:	fa00 f009 	lsl.w	r0, r0, r9
 8019d34:	4302      	orrs	r2, r0
 8019d36:	f84a 2b04 	str.w	r2, [sl], #4
 8019d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d3e:	459c      	cmp	ip, r3
 8019d40:	fa22 f20e 	lsr.w	r2, r2, lr
 8019d44:	d8f3      	bhi.n	8019d2e <__lshift+0x6e>
 8019d46:	ebac 0304 	sub.w	r3, ip, r4
 8019d4a:	3b15      	subs	r3, #21
 8019d4c:	f023 0303 	bic.w	r3, r3, #3
 8019d50:	3304      	adds	r3, #4
 8019d52:	f104 0015 	add.w	r0, r4, #21
 8019d56:	4584      	cmp	ip, r0
 8019d58:	bf38      	it	cc
 8019d5a:	2304      	movcc	r3, #4
 8019d5c:	50ca      	str	r2, [r1, r3]
 8019d5e:	b10a      	cbz	r2, 8019d64 <__lshift+0xa4>
 8019d60:	f108 0602 	add.w	r6, r8, #2
 8019d64:	3e01      	subs	r6, #1
 8019d66:	4638      	mov	r0, r7
 8019d68:	4621      	mov	r1, r4
 8019d6a:	612e      	str	r6, [r5, #16]
 8019d6c:	f7ff fd90 	bl	8019890 <_Bfree>
 8019d70:	4628      	mov	r0, r5
 8019d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d76:	f842 0f04 	str.w	r0, [r2, #4]!
 8019d7a:	3301      	adds	r3, #1
 8019d7c:	e7c5      	b.n	8019d0a <__lshift+0x4a>
 8019d7e:	3904      	subs	r1, #4
 8019d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d84:	459c      	cmp	ip, r3
 8019d86:	f841 2f04 	str.w	r2, [r1, #4]!
 8019d8a:	d8f9      	bhi.n	8019d80 <__lshift+0xc0>
 8019d8c:	e7ea      	b.n	8019d64 <__lshift+0xa4>
 8019d8e:	bf00      	nop
 8019d90:	0801afdc 	.word	0x0801afdc
 8019d94:	0801b06c 	.word	0x0801b06c

08019d98 <__mcmp>:
 8019d98:	4603      	mov	r3, r0
 8019d9a:	690a      	ldr	r2, [r1, #16]
 8019d9c:	6900      	ldr	r0, [r0, #16]
 8019d9e:	b530      	push	{r4, r5, lr}
 8019da0:	1a80      	subs	r0, r0, r2
 8019da2:	d10d      	bne.n	8019dc0 <__mcmp+0x28>
 8019da4:	3314      	adds	r3, #20
 8019da6:	3114      	adds	r1, #20
 8019da8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019dac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019db0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019db4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019db8:	4295      	cmp	r5, r2
 8019dba:	d002      	beq.n	8019dc2 <__mcmp+0x2a>
 8019dbc:	d304      	bcc.n	8019dc8 <__mcmp+0x30>
 8019dbe:	2001      	movs	r0, #1
 8019dc0:	bd30      	pop	{r4, r5, pc}
 8019dc2:	42a3      	cmp	r3, r4
 8019dc4:	d3f4      	bcc.n	8019db0 <__mcmp+0x18>
 8019dc6:	e7fb      	b.n	8019dc0 <__mcmp+0x28>
 8019dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8019dcc:	e7f8      	b.n	8019dc0 <__mcmp+0x28>
	...

08019dd0 <__mdiff>:
 8019dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dd4:	460c      	mov	r4, r1
 8019dd6:	4606      	mov	r6, r0
 8019dd8:	4611      	mov	r1, r2
 8019dda:	4620      	mov	r0, r4
 8019ddc:	4692      	mov	sl, r2
 8019dde:	f7ff ffdb 	bl	8019d98 <__mcmp>
 8019de2:	1e05      	subs	r5, r0, #0
 8019de4:	d111      	bne.n	8019e0a <__mdiff+0x3a>
 8019de6:	4629      	mov	r1, r5
 8019de8:	4630      	mov	r0, r6
 8019dea:	f7ff fd11 	bl	8019810 <_Balloc>
 8019dee:	4602      	mov	r2, r0
 8019df0:	b928      	cbnz	r0, 8019dfe <__mdiff+0x2e>
 8019df2:	f240 2132 	movw	r1, #562	; 0x232
 8019df6:	4b3c      	ldr	r3, [pc, #240]	; (8019ee8 <__mdiff+0x118>)
 8019df8:	483c      	ldr	r0, [pc, #240]	; (8019eec <__mdiff+0x11c>)
 8019dfa:	f000 fb63 	bl	801a4c4 <__assert_func>
 8019dfe:	2301      	movs	r3, #1
 8019e00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019e04:	4610      	mov	r0, r2
 8019e06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e0a:	bfa4      	itt	ge
 8019e0c:	4653      	movge	r3, sl
 8019e0e:	46a2      	movge	sl, r4
 8019e10:	4630      	mov	r0, r6
 8019e12:	f8da 1004 	ldr.w	r1, [sl, #4]
 8019e16:	bfa6      	itte	ge
 8019e18:	461c      	movge	r4, r3
 8019e1a:	2500      	movge	r5, #0
 8019e1c:	2501      	movlt	r5, #1
 8019e1e:	f7ff fcf7 	bl	8019810 <_Balloc>
 8019e22:	4602      	mov	r2, r0
 8019e24:	b918      	cbnz	r0, 8019e2e <__mdiff+0x5e>
 8019e26:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019e2a:	4b2f      	ldr	r3, [pc, #188]	; (8019ee8 <__mdiff+0x118>)
 8019e2c:	e7e4      	b.n	8019df8 <__mdiff+0x28>
 8019e2e:	f100 0814 	add.w	r8, r0, #20
 8019e32:	f8da 7010 	ldr.w	r7, [sl, #16]
 8019e36:	60c5      	str	r5, [r0, #12]
 8019e38:	f04f 0c00 	mov.w	ip, #0
 8019e3c:	f10a 0514 	add.w	r5, sl, #20
 8019e40:	f10a 0010 	add.w	r0, sl, #16
 8019e44:	46c2      	mov	sl, r8
 8019e46:	6926      	ldr	r6, [r4, #16]
 8019e48:	f104 0914 	add.w	r9, r4, #20
 8019e4c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8019e50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019e54:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8019e58:	f859 3b04 	ldr.w	r3, [r9], #4
 8019e5c:	fa1f f18b 	uxth.w	r1, fp
 8019e60:	4461      	add	r1, ip
 8019e62:	fa1f fc83 	uxth.w	ip, r3
 8019e66:	0c1b      	lsrs	r3, r3, #16
 8019e68:	eba1 010c 	sub.w	r1, r1, ip
 8019e6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019e70:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8019e74:	b289      	uxth	r1, r1
 8019e76:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8019e7a:	454e      	cmp	r6, r9
 8019e7c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8019e80:	f84a 3b04 	str.w	r3, [sl], #4
 8019e84:	d8e6      	bhi.n	8019e54 <__mdiff+0x84>
 8019e86:	1b33      	subs	r3, r6, r4
 8019e88:	3b15      	subs	r3, #21
 8019e8a:	f023 0303 	bic.w	r3, r3, #3
 8019e8e:	3415      	adds	r4, #21
 8019e90:	3304      	adds	r3, #4
 8019e92:	42a6      	cmp	r6, r4
 8019e94:	bf38      	it	cc
 8019e96:	2304      	movcc	r3, #4
 8019e98:	441d      	add	r5, r3
 8019e9a:	4443      	add	r3, r8
 8019e9c:	461e      	mov	r6, r3
 8019e9e:	462c      	mov	r4, r5
 8019ea0:	4574      	cmp	r4, lr
 8019ea2:	d30e      	bcc.n	8019ec2 <__mdiff+0xf2>
 8019ea4:	f10e 0103 	add.w	r1, lr, #3
 8019ea8:	1b49      	subs	r1, r1, r5
 8019eaa:	f021 0103 	bic.w	r1, r1, #3
 8019eae:	3d03      	subs	r5, #3
 8019eb0:	45ae      	cmp	lr, r5
 8019eb2:	bf38      	it	cc
 8019eb4:	2100      	movcc	r1, #0
 8019eb6:	4419      	add	r1, r3
 8019eb8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8019ebc:	b18b      	cbz	r3, 8019ee2 <__mdiff+0x112>
 8019ebe:	6117      	str	r7, [r2, #16]
 8019ec0:	e7a0      	b.n	8019e04 <__mdiff+0x34>
 8019ec2:	f854 8b04 	ldr.w	r8, [r4], #4
 8019ec6:	fa1f f188 	uxth.w	r1, r8
 8019eca:	4461      	add	r1, ip
 8019ecc:	1408      	asrs	r0, r1, #16
 8019ece:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8019ed2:	b289      	uxth	r1, r1
 8019ed4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8019ed8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019edc:	f846 1b04 	str.w	r1, [r6], #4
 8019ee0:	e7de      	b.n	8019ea0 <__mdiff+0xd0>
 8019ee2:	3f01      	subs	r7, #1
 8019ee4:	e7e8      	b.n	8019eb8 <__mdiff+0xe8>
 8019ee6:	bf00      	nop
 8019ee8:	0801afdc 	.word	0x0801afdc
 8019eec:	0801b06c 	.word	0x0801b06c

08019ef0 <__ulp>:
 8019ef0:	4b11      	ldr	r3, [pc, #68]	; (8019f38 <__ulp+0x48>)
 8019ef2:	400b      	ands	r3, r1
 8019ef4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	dd02      	ble.n	8019f02 <__ulp+0x12>
 8019efc:	2000      	movs	r0, #0
 8019efe:	4619      	mov	r1, r3
 8019f00:	4770      	bx	lr
 8019f02:	425b      	negs	r3, r3
 8019f04:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8019f08:	f04f 0000 	mov.w	r0, #0
 8019f0c:	f04f 0100 	mov.w	r1, #0
 8019f10:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019f14:	da04      	bge.n	8019f20 <__ulp+0x30>
 8019f16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019f1a:	fa43 f102 	asr.w	r1, r3, r2
 8019f1e:	4770      	bx	lr
 8019f20:	f1a2 0314 	sub.w	r3, r2, #20
 8019f24:	2b1e      	cmp	r3, #30
 8019f26:	bfd6      	itet	le
 8019f28:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8019f2c:	2301      	movgt	r3, #1
 8019f2e:	fa22 f303 	lsrle.w	r3, r2, r3
 8019f32:	4618      	mov	r0, r3
 8019f34:	4770      	bx	lr
 8019f36:	bf00      	nop
 8019f38:	7ff00000 	.word	0x7ff00000

08019f3c <__b2d>:
 8019f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f40:	6907      	ldr	r7, [r0, #16]
 8019f42:	f100 0914 	add.w	r9, r0, #20
 8019f46:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8019f4a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8019f4e:	f1a7 0804 	sub.w	r8, r7, #4
 8019f52:	4630      	mov	r0, r6
 8019f54:	f7ff fd52 	bl	80199fc <__hi0bits>
 8019f58:	f1c0 0320 	rsb	r3, r0, #32
 8019f5c:	280a      	cmp	r0, #10
 8019f5e:	600b      	str	r3, [r1, #0]
 8019f60:	491f      	ldr	r1, [pc, #124]	; (8019fe0 <__b2d+0xa4>)
 8019f62:	dc17      	bgt.n	8019f94 <__b2d+0x58>
 8019f64:	45c1      	cmp	r9, r8
 8019f66:	bf28      	it	cs
 8019f68:	2200      	movcs	r2, #0
 8019f6a:	f1c0 0c0b 	rsb	ip, r0, #11
 8019f6e:	fa26 f30c 	lsr.w	r3, r6, ip
 8019f72:	bf38      	it	cc
 8019f74:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8019f78:	ea43 0501 	orr.w	r5, r3, r1
 8019f7c:	f100 0315 	add.w	r3, r0, #21
 8019f80:	fa06 f303 	lsl.w	r3, r6, r3
 8019f84:	fa22 f20c 	lsr.w	r2, r2, ip
 8019f88:	ea43 0402 	orr.w	r4, r3, r2
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	4629      	mov	r1, r5
 8019f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f94:	45c1      	cmp	r9, r8
 8019f96:	bf2e      	itee	cs
 8019f98:	2200      	movcs	r2, #0
 8019f9a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8019f9e:	f1a7 0808 	subcc.w	r8, r7, #8
 8019fa2:	f1b0 030b 	subs.w	r3, r0, #11
 8019fa6:	d016      	beq.n	8019fd6 <__b2d+0x9a>
 8019fa8:	f1c3 0720 	rsb	r7, r3, #32
 8019fac:	fa22 f107 	lsr.w	r1, r2, r7
 8019fb0:	45c8      	cmp	r8, r9
 8019fb2:	fa06 f603 	lsl.w	r6, r6, r3
 8019fb6:	ea46 0601 	orr.w	r6, r6, r1
 8019fba:	bf94      	ite	ls
 8019fbc:	2100      	movls	r1, #0
 8019fbe:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8019fc2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8019fc6:	fa02 f003 	lsl.w	r0, r2, r3
 8019fca:	40f9      	lsrs	r1, r7
 8019fcc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019fd0:	ea40 0401 	orr.w	r4, r0, r1
 8019fd4:	e7da      	b.n	8019f8c <__b2d+0x50>
 8019fd6:	4614      	mov	r4, r2
 8019fd8:	ea46 0501 	orr.w	r5, r6, r1
 8019fdc:	e7d6      	b.n	8019f8c <__b2d+0x50>
 8019fde:	bf00      	nop
 8019fe0:	3ff00000 	.word	0x3ff00000

08019fe4 <__d2b>:
 8019fe4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019fe8:	2101      	movs	r1, #1
 8019fea:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8019fee:	4690      	mov	r8, r2
 8019ff0:	461d      	mov	r5, r3
 8019ff2:	f7ff fc0d 	bl	8019810 <_Balloc>
 8019ff6:	4604      	mov	r4, r0
 8019ff8:	b930      	cbnz	r0, 801a008 <__d2b+0x24>
 8019ffa:	4602      	mov	r2, r0
 8019ffc:	f240 310a 	movw	r1, #778	; 0x30a
 801a000:	4b24      	ldr	r3, [pc, #144]	; (801a094 <__d2b+0xb0>)
 801a002:	4825      	ldr	r0, [pc, #148]	; (801a098 <__d2b+0xb4>)
 801a004:	f000 fa5e 	bl	801a4c4 <__assert_func>
 801a008:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801a00c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801a010:	bb2d      	cbnz	r5, 801a05e <__d2b+0x7a>
 801a012:	9301      	str	r3, [sp, #4]
 801a014:	f1b8 0300 	subs.w	r3, r8, #0
 801a018:	d026      	beq.n	801a068 <__d2b+0x84>
 801a01a:	4668      	mov	r0, sp
 801a01c:	9300      	str	r3, [sp, #0]
 801a01e:	f7ff fd0d 	bl	8019a3c <__lo0bits>
 801a022:	9900      	ldr	r1, [sp, #0]
 801a024:	b1f0      	cbz	r0, 801a064 <__d2b+0x80>
 801a026:	9a01      	ldr	r2, [sp, #4]
 801a028:	f1c0 0320 	rsb	r3, r0, #32
 801a02c:	fa02 f303 	lsl.w	r3, r2, r3
 801a030:	430b      	orrs	r3, r1
 801a032:	40c2      	lsrs	r2, r0
 801a034:	6163      	str	r3, [r4, #20]
 801a036:	9201      	str	r2, [sp, #4]
 801a038:	9b01      	ldr	r3, [sp, #4]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	bf14      	ite	ne
 801a03e:	2102      	movne	r1, #2
 801a040:	2101      	moveq	r1, #1
 801a042:	61a3      	str	r3, [r4, #24]
 801a044:	6121      	str	r1, [r4, #16]
 801a046:	b1c5      	cbz	r5, 801a07a <__d2b+0x96>
 801a048:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a04c:	4405      	add	r5, r0
 801a04e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a052:	603d      	str	r5, [r7, #0]
 801a054:	6030      	str	r0, [r6, #0]
 801a056:	4620      	mov	r0, r4
 801a058:	b002      	add	sp, #8
 801a05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a05e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a062:	e7d6      	b.n	801a012 <__d2b+0x2e>
 801a064:	6161      	str	r1, [r4, #20]
 801a066:	e7e7      	b.n	801a038 <__d2b+0x54>
 801a068:	a801      	add	r0, sp, #4
 801a06a:	f7ff fce7 	bl	8019a3c <__lo0bits>
 801a06e:	2101      	movs	r1, #1
 801a070:	9b01      	ldr	r3, [sp, #4]
 801a072:	6121      	str	r1, [r4, #16]
 801a074:	6163      	str	r3, [r4, #20]
 801a076:	3020      	adds	r0, #32
 801a078:	e7e5      	b.n	801a046 <__d2b+0x62>
 801a07a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801a07e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a082:	6038      	str	r0, [r7, #0]
 801a084:	6918      	ldr	r0, [r3, #16]
 801a086:	f7ff fcb9 	bl	80199fc <__hi0bits>
 801a08a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801a08e:	6031      	str	r1, [r6, #0]
 801a090:	e7e1      	b.n	801a056 <__d2b+0x72>
 801a092:	bf00      	nop
 801a094:	0801afdc 	.word	0x0801afdc
 801a098:	0801b06c 	.word	0x0801b06c

0801a09c <__ratio>:
 801a09c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0a0:	4688      	mov	r8, r1
 801a0a2:	4669      	mov	r1, sp
 801a0a4:	4681      	mov	r9, r0
 801a0a6:	f7ff ff49 	bl	8019f3c <__b2d>
 801a0aa:	460f      	mov	r7, r1
 801a0ac:	4604      	mov	r4, r0
 801a0ae:	460d      	mov	r5, r1
 801a0b0:	4640      	mov	r0, r8
 801a0b2:	a901      	add	r1, sp, #4
 801a0b4:	f7ff ff42 	bl	8019f3c <__b2d>
 801a0b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a0bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a0c0:	468b      	mov	fp, r1
 801a0c2:	eba3 0c02 	sub.w	ip, r3, r2
 801a0c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a0ca:	1a9b      	subs	r3, r3, r2
 801a0cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	bfd5      	itete	le
 801a0d4:	460a      	movle	r2, r1
 801a0d6:	462a      	movgt	r2, r5
 801a0d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a0dc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a0e0:	bfd8      	it	le
 801a0e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801a0e6:	465b      	mov	r3, fp
 801a0e8:	4602      	mov	r2, r0
 801a0ea:	4639      	mov	r1, r7
 801a0ec:	4620      	mov	r0, r4
 801a0ee:	f7e6 fb67 	bl	80007c0 <__aeabi_ddiv>
 801a0f2:	b003      	add	sp, #12
 801a0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a0f8 <__copybits>:
 801a0f8:	3901      	subs	r1, #1
 801a0fa:	b570      	push	{r4, r5, r6, lr}
 801a0fc:	1149      	asrs	r1, r1, #5
 801a0fe:	6914      	ldr	r4, [r2, #16]
 801a100:	3101      	adds	r1, #1
 801a102:	f102 0314 	add.w	r3, r2, #20
 801a106:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a10a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a10e:	1f05      	subs	r5, r0, #4
 801a110:	42a3      	cmp	r3, r4
 801a112:	d30c      	bcc.n	801a12e <__copybits+0x36>
 801a114:	1aa3      	subs	r3, r4, r2
 801a116:	3b11      	subs	r3, #17
 801a118:	f023 0303 	bic.w	r3, r3, #3
 801a11c:	3211      	adds	r2, #17
 801a11e:	42a2      	cmp	r2, r4
 801a120:	bf88      	it	hi
 801a122:	2300      	movhi	r3, #0
 801a124:	4418      	add	r0, r3
 801a126:	2300      	movs	r3, #0
 801a128:	4288      	cmp	r0, r1
 801a12a:	d305      	bcc.n	801a138 <__copybits+0x40>
 801a12c:	bd70      	pop	{r4, r5, r6, pc}
 801a12e:	f853 6b04 	ldr.w	r6, [r3], #4
 801a132:	f845 6f04 	str.w	r6, [r5, #4]!
 801a136:	e7eb      	b.n	801a110 <__copybits+0x18>
 801a138:	f840 3b04 	str.w	r3, [r0], #4
 801a13c:	e7f4      	b.n	801a128 <__copybits+0x30>

0801a13e <__any_on>:
 801a13e:	f100 0214 	add.w	r2, r0, #20
 801a142:	6900      	ldr	r0, [r0, #16]
 801a144:	114b      	asrs	r3, r1, #5
 801a146:	4298      	cmp	r0, r3
 801a148:	b510      	push	{r4, lr}
 801a14a:	db11      	blt.n	801a170 <__any_on+0x32>
 801a14c:	dd0a      	ble.n	801a164 <__any_on+0x26>
 801a14e:	f011 011f 	ands.w	r1, r1, #31
 801a152:	d007      	beq.n	801a164 <__any_on+0x26>
 801a154:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a158:	fa24 f001 	lsr.w	r0, r4, r1
 801a15c:	fa00 f101 	lsl.w	r1, r0, r1
 801a160:	428c      	cmp	r4, r1
 801a162:	d10b      	bne.n	801a17c <__any_on+0x3e>
 801a164:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a168:	4293      	cmp	r3, r2
 801a16a:	d803      	bhi.n	801a174 <__any_on+0x36>
 801a16c:	2000      	movs	r0, #0
 801a16e:	bd10      	pop	{r4, pc}
 801a170:	4603      	mov	r3, r0
 801a172:	e7f7      	b.n	801a164 <__any_on+0x26>
 801a174:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a178:	2900      	cmp	r1, #0
 801a17a:	d0f5      	beq.n	801a168 <__any_on+0x2a>
 801a17c:	2001      	movs	r0, #1
 801a17e:	e7f6      	b.n	801a16e <__any_on+0x30>

0801a180 <_calloc_r>:
 801a180:	b538      	push	{r3, r4, r5, lr}
 801a182:	fb02 f501 	mul.w	r5, r2, r1
 801a186:	4629      	mov	r1, r5
 801a188:	f7fc f9e6 	bl	8016558 <_malloc_r>
 801a18c:	4604      	mov	r4, r0
 801a18e:	b118      	cbz	r0, 801a198 <_calloc_r+0x18>
 801a190:	462a      	mov	r2, r5
 801a192:	2100      	movs	r1, #0
 801a194:	f7fc f98c 	bl	80164b0 <memset>
 801a198:	4620      	mov	r0, r4
 801a19a:	bd38      	pop	{r3, r4, r5, pc}

0801a19c <__ssputs_r>:
 801a19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1a0:	688e      	ldr	r6, [r1, #8]
 801a1a2:	4682      	mov	sl, r0
 801a1a4:	429e      	cmp	r6, r3
 801a1a6:	460c      	mov	r4, r1
 801a1a8:	4690      	mov	r8, r2
 801a1aa:	461f      	mov	r7, r3
 801a1ac:	d838      	bhi.n	801a220 <__ssputs_r+0x84>
 801a1ae:	898a      	ldrh	r2, [r1, #12]
 801a1b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a1b4:	d032      	beq.n	801a21c <__ssputs_r+0x80>
 801a1b6:	6825      	ldr	r5, [r4, #0]
 801a1b8:	6909      	ldr	r1, [r1, #16]
 801a1ba:	3301      	adds	r3, #1
 801a1bc:	eba5 0901 	sub.w	r9, r5, r1
 801a1c0:	6965      	ldr	r5, [r4, #20]
 801a1c2:	444b      	add	r3, r9
 801a1c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a1c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a1cc:	106d      	asrs	r5, r5, #1
 801a1ce:	429d      	cmp	r5, r3
 801a1d0:	bf38      	it	cc
 801a1d2:	461d      	movcc	r5, r3
 801a1d4:	0553      	lsls	r3, r2, #21
 801a1d6:	d531      	bpl.n	801a23c <__ssputs_r+0xa0>
 801a1d8:	4629      	mov	r1, r5
 801a1da:	f7fc f9bd 	bl	8016558 <_malloc_r>
 801a1de:	4606      	mov	r6, r0
 801a1e0:	b950      	cbnz	r0, 801a1f8 <__ssputs_r+0x5c>
 801a1e2:	230c      	movs	r3, #12
 801a1e4:	f04f 30ff 	mov.w	r0, #4294967295
 801a1e8:	f8ca 3000 	str.w	r3, [sl]
 801a1ec:	89a3      	ldrh	r3, [r4, #12]
 801a1ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1f2:	81a3      	strh	r3, [r4, #12]
 801a1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1f8:	464a      	mov	r2, r9
 801a1fa:	6921      	ldr	r1, [r4, #16]
 801a1fc:	f7fc f94a 	bl	8016494 <memcpy>
 801a200:	89a3      	ldrh	r3, [r4, #12]
 801a202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a20a:	81a3      	strh	r3, [r4, #12]
 801a20c:	6126      	str	r6, [r4, #16]
 801a20e:	444e      	add	r6, r9
 801a210:	6026      	str	r6, [r4, #0]
 801a212:	463e      	mov	r6, r7
 801a214:	6165      	str	r5, [r4, #20]
 801a216:	eba5 0509 	sub.w	r5, r5, r9
 801a21a:	60a5      	str	r5, [r4, #8]
 801a21c:	42be      	cmp	r6, r7
 801a21e:	d900      	bls.n	801a222 <__ssputs_r+0x86>
 801a220:	463e      	mov	r6, r7
 801a222:	4632      	mov	r2, r6
 801a224:	4641      	mov	r1, r8
 801a226:	6820      	ldr	r0, [r4, #0]
 801a228:	f000 f97c 	bl	801a524 <memmove>
 801a22c:	68a3      	ldr	r3, [r4, #8]
 801a22e:	6822      	ldr	r2, [r4, #0]
 801a230:	1b9b      	subs	r3, r3, r6
 801a232:	4432      	add	r2, r6
 801a234:	2000      	movs	r0, #0
 801a236:	60a3      	str	r3, [r4, #8]
 801a238:	6022      	str	r2, [r4, #0]
 801a23a:	e7db      	b.n	801a1f4 <__ssputs_r+0x58>
 801a23c:	462a      	mov	r2, r5
 801a23e:	f000 f98b 	bl	801a558 <_realloc_r>
 801a242:	4606      	mov	r6, r0
 801a244:	2800      	cmp	r0, #0
 801a246:	d1e1      	bne.n	801a20c <__ssputs_r+0x70>
 801a248:	4650      	mov	r0, sl
 801a24a:	6921      	ldr	r1, [r4, #16]
 801a24c:	f7fc f938 	bl	80164c0 <_free_r>
 801a250:	e7c7      	b.n	801a1e2 <__ssputs_r+0x46>
	...

0801a254 <_svfiprintf_r>:
 801a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a258:	4698      	mov	r8, r3
 801a25a:	898b      	ldrh	r3, [r1, #12]
 801a25c:	4607      	mov	r7, r0
 801a25e:	061b      	lsls	r3, r3, #24
 801a260:	460d      	mov	r5, r1
 801a262:	4614      	mov	r4, r2
 801a264:	b09d      	sub	sp, #116	; 0x74
 801a266:	d50e      	bpl.n	801a286 <_svfiprintf_r+0x32>
 801a268:	690b      	ldr	r3, [r1, #16]
 801a26a:	b963      	cbnz	r3, 801a286 <_svfiprintf_r+0x32>
 801a26c:	2140      	movs	r1, #64	; 0x40
 801a26e:	f7fc f973 	bl	8016558 <_malloc_r>
 801a272:	6028      	str	r0, [r5, #0]
 801a274:	6128      	str	r0, [r5, #16]
 801a276:	b920      	cbnz	r0, 801a282 <_svfiprintf_r+0x2e>
 801a278:	230c      	movs	r3, #12
 801a27a:	603b      	str	r3, [r7, #0]
 801a27c:	f04f 30ff 	mov.w	r0, #4294967295
 801a280:	e0d1      	b.n	801a426 <_svfiprintf_r+0x1d2>
 801a282:	2340      	movs	r3, #64	; 0x40
 801a284:	616b      	str	r3, [r5, #20]
 801a286:	2300      	movs	r3, #0
 801a288:	9309      	str	r3, [sp, #36]	; 0x24
 801a28a:	2320      	movs	r3, #32
 801a28c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a290:	2330      	movs	r3, #48	; 0x30
 801a292:	f04f 0901 	mov.w	r9, #1
 801a296:	f8cd 800c 	str.w	r8, [sp, #12]
 801a29a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801a440 <_svfiprintf_r+0x1ec>
 801a29e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a2a2:	4623      	mov	r3, r4
 801a2a4:	469a      	mov	sl, r3
 801a2a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a2aa:	b10a      	cbz	r2, 801a2b0 <_svfiprintf_r+0x5c>
 801a2ac:	2a25      	cmp	r2, #37	; 0x25
 801a2ae:	d1f9      	bne.n	801a2a4 <_svfiprintf_r+0x50>
 801a2b0:	ebba 0b04 	subs.w	fp, sl, r4
 801a2b4:	d00b      	beq.n	801a2ce <_svfiprintf_r+0x7a>
 801a2b6:	465b      	mov	r3, fp
 801a2b8:	4622      	mov	r2, r4
 801a2ba:	4629      	mov	r1, r5
 801a2bc:	4638      	mov	r0, r7
 801a2be:	f7ff ff6d 	bl	801a19c <__ssputs_r>
 801a2c2:	3001      	adds	r0, #1
 801a2c4:	f000 80aa 	beq.w	801a41c <_svfiprintf_r+0x1c8>
 801a2c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a2ca:	445a      	add	r2, fp
 801a2cc:	9209      	str	r2, [sp, #36]	; 0x24
 801a2ce:	f89a 3000 	ldrb.w	r3, [sl]
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	f000 80a2 	beq.w	801a41c <_svfiprintf_r+0x1c8>
 801a2d8:	2300      	movs	r3, #0
 801a2da:	f04f 32ff 	mov.w	r2, #4294967295
 801a2de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a2e2:	f10a 0a01 	add.w	sl, sl, #1
 801a2e6:	9304      	str	r3, [sp, #16]
 801a2e8:	9307      	str	r3, [sp, #28]
 801a2ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a2ee:	931a      	str	r3, [sp, #104]	; 0x68
 801a2f0:	4654      	mov	r4, sl
 801a2f2:	2205      	movs	r2, #5
 801a2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2f8:	4851      	ldr	r0, [pc, #324]	; (801a440 <_svfiprintf_r+0x1ec>)
 801a2fa:	f7ff fa6f 	bl	80197dc <memchr>
 801a2fe:	9a04      	ldr	r2, [sp, #16]
 801a300:	b9d8      	cbnz	r0, 801a33a <_svfiprintf_r+0xe6>
 801a302:	06d0      	lsls	r0, r2, #27
 801a304:	bf44      	itt	mi
 801a306:	2320      	movmi	r3, #32
 801a308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a30c:	0711      	lsls	r1, r2, #28
 801a30e:	bf44      	itt	mi
 801a310:	232b      	movmi	r3, #43	; 0x2b
 801a312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a316:	f89a 3000 	ldrb.w	r3, [sl]
 801a31a:	2b2a      	cmp	r3, #42	; 0x2a
 801a31c:	d015      	beq.n	801a34a <_svfiprintf_r+0xf6>
 801a31e:	4654      	mov	r4, sl
 801a320:	2000      	movs	r0, #0
 801a322:	f04f 0c0a 	mov.w	ip, #10
 801a326:	9a07      	ldr	r2, [sp, #28]
 801a328:	4621      	mov	r1, r4
 801a32a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a32e:	3b30      	subs	r3, #48	; 0x30
 801a330:	2b09      	cmp	r3, #9
 801a332:	d94e      	bls.n	801a3d2 <_svfiprintf_r+0x17e>
 801a334:	b1b0      	cbz	r0, 801a364 <_svfiprintf_r+0x110>
 801a336:	9207      	str	r2, [sp, #28]
 801a338:	e014      	b.n	801a364 <_svfiprintf_r+0x110>
 801a33a:	eba0 0308 	sub.w	r3, r0, r8
 801a33e:	fa09 f303 	lsl.w	r3, r9, r3
 801a342:	4313      	orrs	r3, r2
 801a344:	46a2      	mov	sl, r4
 801a346:	9304      	str	r3, [sp, #16]
 801a348:	e7d2      	b.n	801a2f0 <_svfiprintf_r+0x9c>
 801a34a:	9b03      	ldr	r3, [sp, #12]
 801a34c:	1d19      	adds	r1, r3, #4
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	9103      	str	r1, [sp, #12]
 801a352:	2b00      	cmp	r3, #0
 801a354:	bfbb      	ittet	lt
 801a356:	425b      	neglt	r3, r3
 801a358:	f042 0202 	orrlt.w	r2, r2, #2
 801a35c:	9307      	strge	r3, [sp, #28]
 801a35e:	9307      	strlt	r3, [sp, #28]
 801a360:	bfb8      	it	lt
 801a362:	9204      	strlt	r2, [sp, #16]
 801a364:	7823      	ldrb	r3, [r4, #0]
 801a366:	2b2e      	cmp	r3, #46	; 0x2e
 801a368:	d10c      	bne.n	801a384 <_svfiprintf_r+0x130>
 801a36a:	7863      	ldrb	r3, [r4, #1]
 801a36c:	2b2a      	cmp	r3, #42	; 0x2a
 801a36e:	d135      	bne.n	801a3dc <_svfiprintf_r+0x188>
 801a370:	9b03      	ldr	r3, [sp, #12]
 801a372:	3402      	adds	r4, #2
 801a374:	1d1a      	adds	r2, r3, #4
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	9203      	str	r2, [sp, #12]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	bfb8      	it	lt
 801a37e:	f04f 33ff 	movlt.w	r3, #4294967295
 801a382:	9305      	str	r3, [sp, #20]
 801a384:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a450 <_svfiprintf_r+0x1fc>
 801a388:	2203      	movs	r2, #3
 801a38a:	4650      	mov	r0, sl
 801a38c:	7821      	ldrb	r1, [r4, #0]
 801a38e:	f7ff fa25 	bl	80197dc <memchr>
 801a392:	b140      	cbz	r0, 801a3a6 <_svfiprintf_r+0x152>
 801a394:	2340      	movs	r3, #64	; 0x40
 801a396:	eba0 000a 	sub.w	r0, r0, sl
 801a39a:	fa03 f000 	lsl.w	r0, r3, r0
 801a39e:	9b04      	ldr	r3, [sp, #16]
 801a3a0:	3401      	adds	r4, #1
 801a3a2:	4303      	orrs	r3, r0
 801a3a4:	9304      	str	r3, [sp, #16]
 801a3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3aa:	2206      	movs	r2, #6
 801a3ac:	4825      	ldr	r0, [pc, #148]	; (801a444 <_svfiprintf_r+0x1f0>)
 801a3ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a3b2:	f7ff fa13 	bl	80197dc <memchr>
 801a3b6:	2800      	cmp	r0, #0
 801a3b8:	d038      	beq.n	801a42c <_svfiprintf_r+0x1d8>
 801a3ba:	4b23      	ldr	r3, [pc, #140]	; (801a448 <_svfiprintf_r+0x1f4>)
 801a3bc:	bb1b      	cbnz	r3, 801a406 <_svfiprintf_r+0x1b2>
 801a3be:	9b03      	ldr	r3, [sp, #12]
 801a3c0:	3307      	adds	r3, #7
 801a3c2:	f023 0307 	bic.w	r3, r3, #7
 801a3c6:	3308      	adds	r3, #8
 801a3c8:	9303      	str	r3, [sp, #12]
 801a3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3cc:	4433      	add	r3, r6
 801a3ce:	9309      	str	r3, [sp, #36]	; 0x24
 801a3d0:	e767      	b.n	801a2a2 <_svfiprintf_r+0x4e>
 801a3d2:	460c      	mov	r4, r1
 801a3d4:	2001      	movs	r0, #1
 801a3d6:	fb0c 3202 	mla	r2, ip, r2, r3
 801a3da:	e7a5      	b.n	801a328 <_svfiprintf_r+0xd4>
 801a3dc:	2300      	movs	r3, #0
 801a3de:	f04f 0c0a 	mov.w	ip, #10
 801a3e2:	4619      	mov	r1, r3
 801a3e4:	3401      	adds	r4, #1
 801a3e6:	9305      	str	r3, [sp, #20]
 801a3e8:	4620      	mov	r0, r4
 801a3ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a3ee:	3a30      	subs	r2, #48	; 0x30
 801a3f0:	2a09      	cmp	r2, #9
 801a3f2:	d903      	bls.n	801a3fc <_svfiprintf_r+0x1a8>
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d0c5      	beq.n	801a384 <_svfiprintf_r+0x130>
 801a3f8:	9105      	str	r1, [sp, #20]
 801a3fa:	e7c3      	b.n	801a384 <_svfiprintf_r+0x130>
 801a3fc:	4604      	mov	r4, r0
 801a3fe:	2301      	movs	r3, #1
 801a400:	fb0c 2101 	mla	r1, ip, r1, r2
 801a404:	e7f0      	b.n	801a3e8 <_svfiprintf_r+0x194>
 801a406:	ab03      	add	r3, sp, #12
 801a408:	9300      	str	r3, [sp, #0]
 801a40a:	462a      	mov	r2, r5
 801a40c:	4638      	mov	r0, r7
 801a40e:	4b0f      	ldr	r3, [pc, #60]	; (801a44c <_svfiprintf_r+0x1f8>)
 801a410:	a904      	add	r1, sp, #16
 801a412:	f7fc f999 	bl	8016748 <_printf_float>
 801a416:	1c42      	adds	r2, r0, #1
 801a418:	4606      	mov	r6, r0
 801a41a:	d1d6      	bne.n	801a3ca <_svfiprintf_r+0x176>
 801a41c:	89ab      	ldrh	r3, [r5, #12]
 801a41e:	065b      	lsls	r3, r3, #25
 801a420:	f53f af2c 	bmi.w	801a27c <_svfiprintf_r+0x28>
 801a424:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a426:	b01d      	add	sp, #116	; 0x74
 801a428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a42c:	ab03      	add	r3, sp, #12
 801a42e:	9300      	str	r3, [sp, #0]
 801a430:	462a      	mov	r2, r5
 801a432:	4638      	mov	r0, r7
 801a434:	4b05      	ldr	r3, [pc, #20]	; (801a44c <_svfiprintf_r+0x1f8>)
 801a436:	a904      	add	r1, sp, #16
 801a438:	f7fc fc22 	bl	8016c80 <_printf_i>
 801a43c:	e7eb      	b.n	801a416 <_svfiprintf_r+0x1c2>
 801a43e:	bf00      	nop
 801a440:	0801b1cc 	.word	0x0801b1cc
 801a444:	0801b1d6 	.word	0x0801b1d6
 801a448:	08016749 	.word	0x08016749
 801a44c:	0801a19d 	.word	0x0801a19d
 801a450:	0801b1d2 	.word	0x0801b1d2

0801a454 <_read_r>:
 801a454:	b538      	push	{r3, r4, r5, lr}
 801a456:	4604      	mov	r4, r0
 801a458:	4608      	mov	r0, r1
 801a45a:	4611      	mov	r1, r2
 801a45c:	2200      	movs	r2, #0
 801a45e:	4d05      	ldr	r5, [pc, #20]	; (801a474 <_read_r+0x20>)
 801a460:	602a      	str	r2, [r5, #0]
 801a462:	461a      	mov	r2, r3
 801a464:	f7eb fe97 	bl	8006196 <_read>
 801a468:	1c43      	adds	r3, r0, #1
 801a46a:	d102      	bne.n	801a472 <_read_r+0x1e>
 801a46c:	682b      	ldr	r3, [r5, #0]
 801a46e:	b103      	cbz	r3, 801a472 <_read_r+0x1e>
 801a470:	6023      	str	r3, [r4, #0]
 801a472:	bd38      	pop	{r3, r4, r5, pc}
 801a474:	20011864 	.word	0x20011864

0801a478 <nan>:
 801a478:	2000      	movs	r0, #0
 801a47a:	4901      	ldr	r1, [pc, #4]	; (801a480 <nan+0x8>)
 801a47c:	4770      	bx	lr
 801a47e:	bf00      	nop
 801a480:	7ff80000 	.word	0x7ff80000

0801a484 <strncmp>:
 801a484:	b510      	push	{r4, lr}
 801a486:	b16a      	cbz	r2, 801a4a4 <strncmp+0x20>
 801a488:	3901      	subs	r1, #1
 801a48a:	1884      	adds	r4, r0, r2
 801a48c:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a490:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a494:	4293      	cmp	r3, r2
 801a496:	d103      	bne.n	801a4a0 <strncmp+0x1c>
 801a498:	42a0      	cmp	r0, r4
 801a49a:	d001      	beq.n	801a4a0 <strncmp+0x1c>
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d1f5      	bne.n	801a48c <strncmp+0x8>
 801a4a0:	1a98      	subs	r0, r3, r2
 801a4a2:	bd10      	pop	{r4, pc}
 801a4a4:	4610      	mov	r0, r2
 801a4a6:	e7fc      	b.n	801a4a2 <strncmp+0x1e>

0801a4a8 <__ascii_wctomb>:
 801a4a8:	4603      	mov	r3, r0
 801a4aa:	4608      	mov	r0, r1
 801a4ac:	b141      	cbz	r1, 801a4c0 <__ascii_wctomb+0x18>
 801a4ae:	2aff      	cmp	r2, #255	; 0xff
 801a4b0:	d904      	bls.n	801a4bc <__ascii_wctomb+0x14>
 801a4b2:	228a      	movs	r2, #138	; 0x8a
 801a4b4:	f04f 30ff 	mov.w	r0, #4294967295
 801a4b8:	601a      	str	r2, [r3, #0]
 801a4ba:	4770      	bx	lr
 801a4bc:	2001      	movs	r0, #1
 801a4be:	700a      	strb	r2, [r1, #0]
 801a4c0:	4770      	bx	lr
	...

0801a4c4 <__assert_func>:
 801a4c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a4c6:	4614      	mov	r4, r2
 801a4c8:	461a      	mov	r2, r3
 801a4ca:	4b09      	ldr	r3, [pc, #36]	; (801a4f0 <__assert_func+0x2c>)
 801a4cc:	4605      	mov	r5, r0
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	68d8      	ldr	r0, [r3, #12]
 801a4d2:	b14c      	cbz	r4, 801a4e8 <__assert_func+0x24>
 801a4d4:	4b07      	ldr	r3, [pc, #28]	; (801a4f4 <__assert_func+0x30>)
 801a4d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a4da:	9100      	str	r1, [sp, #0]
 801a4dc:	462b      	mov	r3, r5
 801a4de:	4906      	ldr	r1, [pc, #24]	; (801a4f8 <__assert_func+0x34>)
 801a4e0:	f000 f80e 	bl	801a500 <fiprintf>
 801a4e4:	f000 fa76 	bl	801a9d4 <abort>
 801a4e8:	4b04      	ldr	r3, [pc, #16]	; (801a4fc <__assert_func+0x38>)
 801a4ea:	461c      	mov	r4, r3
 801a4ec:	e7f3      	b.n	801a4d6 <__assert_func+0x12>
 801a4ee:	bf00      	nop
 801a4f0:	2000023c 	.word	0x2000023c
 801a4f4:	0801b1dd 	.word	0x0801b1dd
 801a4f8:	0801b1ea 	.word	0x0801b1ea
 801a4fc:	0801b218 	.word	0x0801b218

0801a500 <fiprintf>:
 801a500:	b40e      	push	{r1, r2, r3}
 801a502:	b503      	push	{r0, r1, lr}
 801a504:	4601      	mov	r1, r0
 801a506:	ab03      	add	r3, sp, #12
 801a508:	4805      	ldr	r0, [pc, #20]	; (801a520 <fiprintf+0x20>)
 801a50a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a50e:	6800      	ldr	r0, [r0, #0]
 801a510:	9301      	str	r3, [sp, #4]
 801a512:	f000 f86f 	bl	801a5f4 <_vfiprintf_r>
 801a516:	b002      	add	sp, #8
 801a518:	f85d eb04 	ldr.w	lr, [sp], #4
 801a51c:	b003      	add	sp, #12
 801a51e:	4770      	bx	lr
 801a520:	2000023c 	.word	0x2000023c

0801a524 <memmove>:
 801a524:	4288      	cmp	r0, r1
 801a526:	b510      	push	{r4, lr}
 801a528:	eb01 0402 	add.w	r4, r1, r2
 801a52c:	d902      	bls.n	801a534 <memmove+0x10>
 801a52e:	4284      	cmp	r4, r0
 801a530:	4623      	mov	r3, r4
 801a532:	d807      	bhi.n	801a544 <memmove+0x20>
 801a534:	1e43      	subs	r3, r0, #1
 801a536:	42a1      	cmp	r1, r4
 801a538:	d008      	beq.n	801a54c <memmove+0x28>
 801a53a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a53e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a542:	e7f8      	b.n	801a536 <memmove+0x12>
 801a544:	4601      	mov	r1, r0
 801a546:	4402      	add	r2, r0
 801a548:	428a      	cmp	r2, r1
 801a54a:	d100      	bne.n	801a54e <memmove+0x2a>
 801a54c:	bd10      	pop	{r4, pc}
 801a54e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a556:	e7f7      	b.n	801a548 <memmove+0x24>

0801a558 <_realloc_r>:
 801a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a55a:	4607      	mov	r7, r0
 801a55c:	4614      	mov	r4, r2
 801a55e:	460e      	mov	r6, r1
 801a560:	b921      	cbnz	r1, 801a56c <_realloc_r+0x14>
 801a562:	4611      	mov	r1, r2
 801a564:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a568:	f7fb bff6 	b.w	8016558 <_malloc_r>
 801a56c:	b922      	cbnz	r2, 801a578 <_realloc_r+0x20>
 801a56e:	f7fb ffa7 	bl	80164c0 <_free_r>
 801a572:	4625      	mov	r5, r4
 801a574:	4628      	mov	r0, r5
 801a576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a578:	f000 fa98 	bl	801aaac <_malloc_usable_size_r>
 801a57c:	42a0      	cmp	r0, r4
 801a57e:	d20f      	bcs.n	801a5a0 <_realloc_r+0x48>
 801a580:	4621      	mov	r1, r4
 801a582:	4638      	mov	r0, r7
 801a584:	f7fb ffe8 	bl	8016558 <_malloc_r>
 801a588:	4605      	mov	r5, r0
 801a58a:	2800      	cmp	r0, #0
 801a58c:	d0f2      	beq.n	801a574 <_realloc_r+0x1c>
 801a58e:	4631      	mov	r1, r6
 801a590:	4622      	mov	r2, r4
 801a592:	f7fb ff7f 	bl	8016494 <memcpy>
 801a596:	4631      	mov	r1, r6
 801a598:	4638      	mov	r0, r7
 801a59a:	f7fb ff91 	bl	80164c0 <_free_r>
 801a59e:	e7e9      	b.n	801a574 <_realloc_r+0x1c>
 801a5a0:	4635      	mov	r5, r6
 801a5a2:	e7e7      	b.n	801a574 <_realloc_r+0x1c>

0801a5a4 <__sfputc_r>:
 801a5a4:	6893      	ldr	r3, [r2, #8]
 801a5a6:	b410      	push	{r4}
 801a5a8:	3b01      	subs	r3, #1
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	6093      	str	r3, [r2, #8]
 801a5ae:	da07      	bge.n	801a5c0 <__sfputc_r+0x1c>
 801a5b0:	6994      	ldr	r4, [r2, #24]
 801a5b2:	42a3      	cmp	r3, r4
 801a5b4:	db01      	blt.n	801a5ba <__sfputc_r+0x16>
 801a5b6:	290a      	cmp	r1, #10
 801a5b8:	d102      	bne.n	801a5c0 <__sfputc_r+0x1c>
 801a5ba:	bc10      	pop	{r4}
 801a5bc:	f000 b94a 	b.w	801a854 <__swbuf_r>
 801a5c0:	6813      	ldr	r3, [r2, #0]
 801a5c2:	1c58      	adds	r0, r3, #1
 801a5c4:	6010      	str	r0, [r2, #0]
 801a5c6:	7019      	strb	r1, [r3, #0]
 801a5c8:	4608      	mov	r0, r1
 801a5ca:	bc10      	pop	{r4}
 801a5cc:	4770      	bx	lr

0801a5ce <__sfputs_r>:
 801a5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5d0:	4606      	mov	r6, r0
 801a5d2:	460f      	mov	r7, r1
 801a5d4:	4614      	mov	r4, r2
 801a5d6:	18d5      	adds	r5, r2, r3
 801a5d8:	42ac      	cmp	r4, r5
 801a5da:	d101      	bne.n	801a5e0 <__sfputs_r+0x12>
 801a5dc:	2000      	movs	r0, #0
 801a5de:	e007      	b.n	801a5f0 <__sfputs_r+0x22>
 801a5e0:	463a      	mov	r2, r7
 801a5e2:	4630      	mov	r0, r6
 801a5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5e8:	f7ff ffdc 	bl	801a5a4 <__sfputc_r>
 801a5ec:	1c43      	adds	r3, r0, #1
 801a5ee:	d1f3      	bne.n	801a5d8 <__sfputs_r+0xa>
 801a5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a5f4 <_vfiprintf_r>:
 801a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5f8:	460d      	mov	r5, r1
 801a5fa:	4614      	mov	r4, r2
 801a5fc:	4698      	mov	r8, r3
 801a5fe:	4606      	mov	r6, r0
 801a600:	b09d      	sub	sp, #116	; 0x74
 801a602:	b118      	cbz	r0, 801a60c <_vfiprintf_r+0x18>
 801a604:	6983      	ldr	r3, [r0, #24]
 801a606:	b90b      	cbnz	r3, 801a60c <_vfiprintf_r+0x18>
 801a608:	f7fb fe6e 	bl	80162e8 <__sinit>
 801a60c:	4b89      	ldr	r3, [pc, #548]	; (801a834 <_vfiprintf_r+0x240>)
 801a60e:	429d      	cmp	r5, r3
 801a610:	d11b      	bne.n	801a64a <_vfiprintf_r+0x56>
 801a612:	6875      	ldr	r5, [r6, #4]
 801a614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a616:	07d9      	lsls	r1, r3, #31
 801a618:	d405      	bmi.n	801a626 <_vfiprintf_r+0x32>
 801a61a:	89ab      	ldrh	r3, [r5, #12]
 801a61c:	059a      	lsls	r2, r3, #22
 801a61e:	d402      	bmi.n	801a626 <_vfiprintf_r+0x32>
 801a620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a622:	f7fb ff24 	bl	801646e <__retarget_lock_acquire_recursive>
 801a626:	89ab      	ldrh	r3, [r5, #12]
 801a628:	071b      	lsls	r3, r3, #28
 801a62a:	d501      	bpl.n	801a630 <_vfiprintf_r+0x3c>
 801a62c:	692b      	ldr	r3, [r5, #16]
 801a62e:	b9eb      	cbnz	r3, 801a66c <_vfiprintf_r+0x78>
 801a630:	4629      	mov	r1, r5
 801a632:	4630      	mov	r0, r6
 801a634:	f000 f960 	bl	801a8f8 <__swsetup_r>
 801a638:	b1c0      	cbz	r0, 801a66c <_vfiprintf_r+0x78>
 801a63a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a63c:	07dc      	lsls	r4, r3, #31
 801a63e:	d50e      	bpl.n	801a65e <_vfiprintf_r+0x6a>
 801a640:	f04f 30ff 	mov.w	r0, #4294967295
 801a644:	b01d      	add	sp, #116	; 0x74
 801a646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a64a:	4b7b      	ldr	r3, [pc, #492]	; (801a838 <_vfiprintf_r+0x244>)
 801a64c:	429d      	cmp	r5, r3
 801a64e:	d101      	bne.n	801a654 <_vfiprintf_r+0x60>
 801a650:	68b5      	ldr	r5, [r6, #8]
 801a652:	e7df      	b.n	801a614 <_vfiprintf_r+0x20>
 801a654:	4b79      	ldr	r3, [pc, #484]	; (801a83c <_vfiprintf_r+0x248>)
 801a656:	429d      	cmp	r5, r3
 801a658:	bf08      	it	eq
 801a65a:	68f5      	ldreq	r5, [r6, #12]
 801a65c:	e7da      	b.n	801a614 <_vfiprintf_r+0x20>
 801a65e:	89ab      	ldrh	r3, [r5, #12]
 801a660:	0598      	lsls	r0, r3, #22
 801a662:	d4ed      	bmi.n	801a640 <_vfiprintf_r+0x4c>
 801a664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a666:	f7fb ff03 	bl	8016470 <__retarget_lock_release_recursive>
 801a66a:	e7e9      	b.n	801a640 <_vfiprintf_r+0x4c>
 801a66c:	2300      	movs	r3, #0
 801a66e:	9309      	str	r3, [sp, #36]	; 0x24
 801a670:	2320      	movs	r3, #32
 801a672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a676:	2330      	movs	r3, #48	; 0x30
 801a678:	f04f 0901 	mov.w	r9, #1
 801a67c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a680:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801a840 <_vfiprintf_r+0x24c>
 801a684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a688:	4623      	mov	r3, r4
 801a68a:	469a      	mov	sl, r3
 801a68c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a690:	b10a      	cbz	r2, 801a696 <_vfiprintf_r+0xa2>
 801a692:	2a25      	cmp	r2, #37	; 0x25
 801a694:	d1f9      	bne.n	801a68a <_vfiprintf_r+0x96>
 801a696:	ebba 0b04 	subs.w	fp, sl, r4
 801a69a:	d00b      	beq.n	801a6b4 <_vfiprintf_r+0xc0>
 801a69c:	465b      	mov	r3, fp
 801a69e:	4622      	mov	r2, r4
 801a6a0:	4629      	mov	r1, r5
 801a6a2:	4630      	mov	r0, r6
 801a6a4:	f7ff ff93 	bl	801a5ce <__sfputs_r>
 801a6a8:	3001      	adds	r0, #1
 801a6aa:	f000 80aa 	beq.w	801a802 <_vfiprintf_r+0x20e>
 801a6ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a6b0:	445a      	add	r2, fp
 801a6b2:	9209      	str	r2, [sp, #36]	; 0x24
 801a6b4:	f89a 3000 	ldrb.w	r3, [sl]
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	f000 80a2 	beq.w	801a802 <_vfiprintf_r+0x20e>
 801a6be:	2300      	movs	r3, #0
 801a6c0:	f04f 32ff 	mov.w	r2, #4294967295
 801a6c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a6c8:	f10a 0a01 	add.w	sl, sl, #1
 801a6cc:	9304      	str	r3, [sp, #16]
 801a6ce:	9307      	str	r3, [sp, #28]
 801a6d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a6d4:	931a      	str	r3, [sp, #104]	; 0x68
 801a6d6:	4654      	mov	r4, sl
 801a6d8:	2205      	movs	r2, #5
 801a6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a6de:	4858      	ldr	r0, [pc, #352]	; (801a840 <_vfiprintf_r+0x24c>)
 801a6e0:	f7ff f87c 	bl	80197dc <memchr>
 801a6e4:	9a04      	ldr	r2, [sp, #16]
 801a6e6:	b9d8      	cbnz	r0, 801a720 <_vfiprintf_r+0x12c>
 801a6e8:	06d1      	lsls	r1, r2, #27
 801a6ea:	bf44      	itt	mi
 801a6ec:	2320      	movmi	r3, #32
 801a6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a6f2:	0713      	lsls	r3, r2, #28
 801a6f4:	bf44      	itt	mi
 801a6f6:	232b      	movmi	r3, #43	; 0x2b
 801a6f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a6fc:	f89a 3000 	ldrb.w	r3, [sl]
 801a700:	2b2a      	cmp	r3, #42	; 0x2a
 801a702:	d015      	beq.n	801a730 <_vfiprintf_r+0x13c>
 801a704:	4654      	mov	r4, sl
 801a706:	2000      	movs	r0, #0
 801a708:	f04f 0c0a 	mov.w	ip, #10
 801a70c:	9a07      	ldr	r2, [sp, #28]
 801a70e:	4621      	mov	r1, r4
 801a710:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a714:	3b30      	subs	r3, #48	; 0x30
 801a716:	2b09      	cmp	r3, #9
 801a718:	d94e      	bls.n	801a7b8 <_vfiprintf_r+0x1c4>
 801a71a:	b1b0      	cbz	r0, 801a74a <_vfiprintf_r+0x156>
 801a71c:	9207      	str	r2, [sp, #28]
 801a71e:	e014      	b.n	801a74a <_vfiprintf_r+0x156>
 801a720:	eba0 0308 	sub.w	r3, r0, r8
 801a724:	fa09 f303 	lsl.w	r3, r9, r3
 801a728:	4313      	orrs	r3, r2
 801a72a:	46a2      	mov	sl, r4
 801a72c:	9304      	str	r3, [sp, #16]
 801a72e:	e7d2      	b.n	801a6d6 <_vfiprintf_r+0xe2>
 801a730:	9b03      	ldr	r3, [sp, #12]
 801a732:	1d19      	adds	r1, r3, #4
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	9103      	str	r1, [sp, #12]
 801a738:	2b00      	cmp	r3, #0
 801a73a:	bfbb      	ittet	lt
 801a73c:	425b      	neglt	r3, r3
 801a73e:	f042 0202 	orrlt.w	r2, r2, #2
 801a742:	9307      	strge	r3, [sp, #28]
 801a744:	9307      	strlt	r3, [sp, #28]
 801a746:	bfb8      	it	lt
 801a748:	9204      	strlt	r2, [sp, #16]
 801a74a:	7823      	ldrb	r3, [r4, #0]
 801a74c:	2b2e      	cmp	r3, #46	; 0x2e
 801a74e:	d10c      	bne.n	801a76a <_vfiprintf_r+0x176>
 801a750:	7863      	ldrb	r3, [r4, #1]
 801a752:	2b2a      	cmp	r3, #42	; 0x2a
 801a754:	d135      	bne.n	801a7c2 <_vfiprintf_r+0x1ce>
 801a756:	9b03      	ldr	r3, [sp, #12]
 801a758:	3402      	adds	r4, #2
 801a75a:	1d1a      	adds	r2, r3, #4
 801a75c:	681b      	ldr	r3, [r3, #0]
 801a75e:	9203      	str	r2, [sp, #12]
 801a760:	2b00      	cmp	r3, #0
 801a762:	bfb8      	it	lt
 801a764:	f04f 33ff 	movlt.w	r3, #4294967295
 801a768:	9305      	str	r3, [sp, #20]
 801a76a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a850 <_vfiprintf_r+0x25c>
 801a76e:	2203      	movs	r2, #3
 801a770:	4650      	mov	r0, sl
 801a772:	7821      	ldrb	r1, [r4, #0]
 801a774:	f7ff f832 	bl	80197dc <memchr>
 801a778:	b140      	cbz	r0, 801a78c <_vfiprintf_r+0x198>
 801a77a:	2340      	movs	r3, #64	; 0x40
 801a77c:	eba0 000a 	sub.w	r0, r0, sl
 801a780:	fa03 f000 	lsl.w	r0, r3, r0
 801a784:	9b04      	ldr	r3, [sp, #16]
 801a786:	3401      	adds	r4, #1
 801a788:	4303      	orrs	r3, r0
 801a78a:	9304      	str	r3, [sp, #16]
 801a78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a790:	2206      	movs	r2, #6
 801a792:	482c      	ldr	r0, [pc, #176]	; (801a844 <_vfiprintf_r+0x250>)
 801a794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a798:	f7ff f820 	bl	80197dc <memchr>
 801a79c:	2800      	cmp	r0, #0
 801a79e:	d03f      	beq.n	801a820 <_vfiprintf_r+0x22c>
 801a7a0:	4b29      	ldr	r3, [pc, #164]	; (801a848 <_vfiprintf_r+0x254>)
 801a7a2:	bb1b      	cbnz	r3, 801a7ec <_vfiprintf_r+0x1f8>
 801a7a4:	9b03      	ldr	r3, [sp, #12]
 801a7a6:	3307      	adds	r3, #7
 801a7a8:	f023 0307 	bic.w	r3, r3, #7
 801a7ac:	3308      	adds	r3, #8
 801a7ae:	9303      	str	r3, [sp, #12]
 801a7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7b2:	443b      	add	r3, r7
 801a7b4:	9309      	str	r3, [sp, #36]	; 0x24
 801a7b6:	e767      	b.n	801a688 <_vfiprintf_r+0x94>
 801a7b8:	460c      	mov	r4, r1
 801a7ba:	2001      	movs	r0, #1
 801a7bc:	fb0c 3202 	mla	r2, ip, r2, r3
 801a7c0:	e7a5      	b.n	801a70e <_vfiprintf_r+0x11a>
 801a7c2:	2300      	movs	r3, #0
 801a7c4:	f04f 0c0a 	mov.w	ip, #10
 801a7c8:	4619      	mov	r1, r3
 801a7ca:	3401      	adds	r4, #1
 801a7cc:	9305      	str	r3, [sp, #20]
 801a7ce:	4620      	mov	r0, r4
 801a7d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a7d4:	3a30      	subs	r2, #48	; 0x30
 801a7d6:	2a09      	cmp	r2, #9
 801a7d8:	d903      	bls.n	801a7e2 <_vfiprintf_r+0x1ee>
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d0c5      	beq.n	801a76a <_vfiprintf_r+0x176>
 801a7de:	9105      	str	r1, [sp, #20]
 801a7e0:	e7c3      	b.n	801a76a <_vfiprintf_r+0x176>
 801a7e2:	4604      	mov	r4, r0
 801a7e4:	2301      	movs	r3, #1
 801a7e6:	fb0c 2101 	mla	r1, ip, r1, r2
 801a7ea:	e7f0      	b.n	801a7ce <_vfiprintf_r+0x1da>
 801a7ec:	ab03      	add	r3, sp, #12
 801a7ee:	9300      	str	r3, [sp, #0]
 801a7f0:	462a      	mov	r2, r5
 801a7f2:	4630      	mov	r0, r6
 801a7f4:	4b15      	ldr	r3, [pc, #84]	; (801a84c <_vfiprintf_r+0x258>)
 801a7f6:	a904      	add	r1, sp, #16
 801a7f8:	f7fb ffa6 	bl	8016748 <_printf_float>
 801a7fc:	4607      	mov	r7, r0
 801a7fe:	1c78      	adds	r0, r7, #1
 801a800:	d1d6      	bne.n	801a7b0 <_vfiprintf_r+0x1bc>
 801a802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a804:	07d9      	lsls	r1, r3, #31
 801a806:	d405      	bmi.n	801a814 <_vfiprintf_r+0x220>
 801a808:	89ab      	ldrh	r3, [r5, #12]
 801a80a:	059a      	lsls	r2, r3, #22
 801a80c:	d402      	bmi.n	801a814 <_vfiprintf_r+0x220>
 801a80e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a810:	f7fb fe2e 	bl	8016470 <__retarget_lock_release_recursive>
 801a814:	89ab      	ldrh	r3, [r5, #12]
 801a816:	065b      	lsls	r3, r3, #25
 801a818:	f53f af12 	bmi.w	801a640 <_vfiprintf_r+0x4c>
 801a81c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a81e:	e711      	b.n	801a644 <_vfiprintf_r+0x50>
 801a820:	ab03      	add	r3, sp, #12
 801a822:	9300      	str	r3, [sp, #0]
 801a824:	462a      	mov	r2, r5
 801a826:	4630      	mov	r0, r6
 801a828:	4b08      	ldr	r3, [pc, #32]	; (801a84c <_vfiprintf_r+0x258>)
 801a82a:	a904      	add	r1, sp, #16
 801a82c:	f7fc fa28 	bl	8016c80 <_printf_i>
 801a830:	e7e4      	b.n	801a7fc <_vfiprintf_r+0x208>
 801a832:	bf00      	nop
 801a834:	0801ad84 	.word	0x0801ad84
 801a838:	0801ada4 	.word	0x0801ada4
 801a83c:	0801ad64 	.word	0x0801ad64
 801a840:	0801b1cc 	.word	0x0801b1cc
 801a844:	0801b1d6 	.word	0x0801b1d6
 801a848:	08016749 	.word	0x08016749
 801a84c:	0801a5cf 	.word	0x0801a5cf
 801a850:	0801b1d2 	.word	0x0801b1d2

0801a854 <__swbuf_r>:
 801a854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a856:	460e      	mov	r6, r1
 801a858:	4614      	mov	r4, r2
 801a85a:	4605      	mov	r5, r0
 801a85c:	b118      	cbz	r0, 801a866 <__swbuf_r+0x12>
 801a85e:	6983      	ldr	r3, [r0, #24]
 801a860:	b90b      	cbnz	r3, 801a866 <__swbuf_r+0x12>
 801a862:	f7fb fd41 	bl	80162e8 <__sinit>
 801a866:	4b21      	ldr	r3, [pc, #132]	; (801a8ec <__swbuf_r+0x98>)
 801a868:	429c      	cmp	r4, r3
 801a86a:	d12b      	bne.n	801a8c4 <__swbuf_r+0x70>
 801a86c:	686c      	ldr	r4, [r5, #4]
 801a86e:	69a3      	ldr	r3, [r4, #24]
 801a870:	60a3      	str	r3, [r4, #8]
 801a872:	89a3      	ldrh	r3, [r4, #12]
 801a874:	071a      	lsls	r2, r3, #28
 801a876:	d52f      	bpl.n	801a8d8 <__swbuf_r+0x84>
 801a878:	6923      	ldr	r3, [r4, #16]
 801a87a:	b36b      	cbz	r3, 801a8d8 <__swbuf_r+0x84>
 801a87c:	6923      	ldr	r3, [r4, #16]
 801a87e:	6820      	ldr	r0, [r4, #0]
 801a880:	b2f6      	uxtb	r6, r6
 801a882:	1ac0      	subs	r0, r0, r3
 801a884:	6963      	ldr	r3, [r4, #20]
 801a886:	4637      	mov	r7, r6
 801a888:	4283      	cmp	r3, r0
 801a88a:	dc04      	bgt.n	801a896 <__swbuf_r+0x42>
 801a88c:	4621      	mov	r1, r4
 801a88e:	4628      	mov	r0, r5
 801a890:	f7fe fbda 	bl	8019048 <_fflush_r>
 801a894:	bb30      	cbnz	r0, 801a8e4 <__swbuf_r+0x90>
 801a896:	68a3      	ldr	r3, [r4, #8]
 801a898:	3001      	adds	r0, #1
 801a89a:	3b01      	subs	r3, #1
 801a89c:	60a3      	str	r3, [r4, #8]
 801a89e:	6823      	ldr	r3, [r4, #0]
 801a8a0:	1c5a      	adds	r2, r3, #1
 801a8a2:	6022      	str	r2, [r4, #0]
 801a8a4:	701e      	strb	r6, [r3, #0]
 801a8a6:	6963      	ldr	r3, [r4, #20]
 801a8a8:	4283      	cmp	r3, r0
 801a8aa:	d004      	beq.n	801a8b6 <__swbuf_r+0x62>
 801a8ac:	89a3      	ldrh	r3, [r4, #12]
 801a8ae:	07db      	lsls	r3, r3, #31
 801a8b0:	d506      	bpl.n	801a8c0 <__swbuf_r+0x6c>
 801a8b2:	2e0a      	cmp	r6, #10
 801a8b4:	d104      	bne.n	801a8c0 <__swbuf_r+0x6c>
 801a8b6:	4621      	mov	r1, r4
 801a8b8:	4628      	mov	r0, r5
 801a8ba:	f7fe fbc5 	bl	8019048 <_fflush_r>
 801a8be:	b988      	cbnz	r0, 801a8e4 <__swbuf_r+0x90>
 801a8c0:	4638      	mov	r0, r7
 801a8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8c4:	4b0a      	ldr	r3, [pc, #40]	; (801a8f0 <__swbuf_r+0x9c>)
 801a8c6:	429c      	cmp	r4, r3
 801a8c8:	d101      	bne.n	801a8ce <__swbuf_r+0x7a>
 801a8ca:	68ac      	ldr	r4, [r5, #8]
 801a8cc:	e7cf      	b.n	801a86e <__swbuf_r+0x1a>
 801a8ce:	4b09      	ldr	r3, [pc, #36]	; (801a8f4 <__swbuf_r+0xa0>)
 801a8d0:	429c      	cmp	r4, r3
 801a8d2:	bf08      	it	eq
 801a8d4:	68ec      	ldreq	r4, [r5, #12]
 801a8d6:	e7ca      	b.n	801a86e <__swbuf_r+0x1a>
 801a8d8:	4621      	mov	r1, r4
 801a8da:	4628      	mov	r0, r5
 801a8dc:	f000 f80c 	bl	801a8f8 <__swsetup_r>
 801a8e0:	2800      	cmp	r0, #0
 801a8e2:	d0cb      	beq.n	801a87c <__swbuf_r+0x28>
 801a8e4:	f04f 37ff 	mov.w	r7, #4294967295
 801a8e8:	e7ea      	b.n	801a8c0 <__swbuf_r+0x6c>
 801a8ea:	bf00      	nop
 801a8ec:	0801ad84 	.word	0x0801ad84
 801a8f0:	0801ada4 	.word	0x0801ada4
 801a8f4:	0801ad64 	.word	0x0801ad64

0801a8f8 <__swsetup_r>:
 801a8f8:	4b32      	ldr	r3, [pc, #200]	; (801a9c4 <__swsetup_r+0xcc>)
 801a8fa:	b570      	push	{r4, r5, r6, lr}
 801a8fc:	681d      	ldr	r5, [r3, #0]
 801a8fe:	4606      	mov	r6, r0
 801a900:	460c      	mov	r4, r1
 801a902:	b125      	cbz	r5, 801a90e <__swsetup_r+0x16>
 801a904:	69ab      	ldr	r3, [r5, #24]
 801a906:	b913      	cbnz	r3, 801a90e <__swsetup_r+0x16>
 801a908:	4628      	mov	r0, r5
 801a90a:	f7fb fced 	bl	80162e8 <__sinit>
 801a90e:	4b2e      	ldr	r3, [pc, #184]	; (801a9c8 <__swsetup_r+0xd0>)
 801a910:	429c      	cmp	r4, r3
 801a912:	d10f      	bne.n	801a934 <__swsetup_r+0x3c>
 801a914:	686c      	ldr	r4, [r5, #4]
 801a916:	89a3      	ldrh	r3, [r4, #12]
 801a918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a91c:	0719      	lsls	r1, r3, #28
 801a91e:	d42c      	bmi.n	801a97a <__swsetup_r+0x82>
 801a920:	06dd      	lsls	r5, r3, #27
 801a922:	d411      	bmi.n	801a948 <__swsetup_r+0x50>
 801a924:	2309      	movs	r3, #9
 801a926:	6033      	str	r3, [r6, #0]
 801a928:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a92c:	f04f 30ff 	mov.w	r0, #4294967295
 801a930:	81a3      	strh	r3, [r4, #12]
 801a932:	e03e      	b.n	801a9b2 <__swsetup_r+0xba>
 801a934:	4b25      	ldr	r3, [pc, #148]	; (801a9cc <__swsetup_r+0xd4>)
 801a936:	429c      	cmp	r4, r3
 801a938:	d101      	bne.n	801a93e <__swsetup_r+0x46>
 801a93a:	68ac      	ldr	r4, [r5, #8]
 801a93c:	e7eb      	b.n	801a916 <__swsetup_r+0x1e>
 801a93e:	4b24      	ldr	r3, [pc, #144]	; (801a9d0 <__swsetup_r+0xd8>)
 801a940:	429c      	cmp	r4, r3
 801a942:	bf08      	it	eq
 801a944:	68ec      	ldreq	r4, [r5, #12]
 801a946:	e7e6      	b.n	801a916 <__swsetup_r+0x1e>
 801a948:	0758      	lsls	r0, r3, #29
 801a94a:	d512      	bpl.n	801a972 <__swsetup_r+0x7a>
 801a94c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a94e:	b141      	cbz	r1, 801a962 <__swsetup_r+0x6a>
 801a950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a954:	4299      	cmp	r1, r3
 801a956:	d002      	beq.n	801a95e <__swsetup_r+0x66>
 801a958:	4630      	mov	r0, r6
 801a95a:	f7fb fdb1 	bl	80164c0 <_free_r>
 801a95e:	2300      	movs	r3, #0
 801a960:	6363      	str	r3, [r4, #52]	; 0x34
 801a962:	89a3      	ldrh	r3, [r4, #12]
 801a964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a968:	81a3      	strh	r3, [r4, #12]
 801a96a:	2300      	movs	r3, #0
 801a96c:	6063      	str	r3, [r4, #4]
 801a96e:	6923      	ldr	r3, [r4, #16]
 801a970:	6023      	str	r3, [r4, #0]
 801a972:	89a3      	ldrh	r3, [r4, #12]
 801a974:	f043 0308 	orr.w	r3, r3, #8
 801a978:	81a3      	strh	r3, [r4, #12]
 801a97a:	6923      	ldr	r3, [r4, #16]
 801a97c:	b94b      	cbnz	r3, 801a992 <__swsetup_r+0x9a>
 801a97e:	89a3      	ldrh	r3, [r4, #12]
 801a980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a988:	d003      	beq.n	801a992 <__swsetup_r+0x9a>
 801a98a:	4621      	mov	r1, r4
 801a98c:	4630      	mov	r0, r6
 801a98e:	f000 f84d 	bl	801aa2c <__smakebuf_r>
 801a992:	89a0      	ldrh	r0, [r4, #12]
 801a994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a998:	f010 0301 	ands.w	r3, r0, #1
 801a99c:	d00a      	beq.n	801a9b4 <__swsetup_r+0xbc>
 801a99e:	2300      	movs	r3, #0
 801a9a0:	60a3      	str	r3, [r4, #8]
 801a9a2:	6963      	ldr	r3, [r4, #20]
 801a9a4:	425b      	negs	r3, r3
 801a9a6:	61a3      	str	r3, [r4, #24]
 801a9a8:	6923      	ldr	r3, [r4, #16]
 801a9aa:	b943      	cbnz	r3, 801a9be <__swsetup_r+0xc6>
 801a9ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a9b0:	d1ba      	bne.n	801a928 <__swsetup_r+0x30>
 801a9b2:	bd70      	pop	{r4, r5, r6, pc}
 801a9b4:	0781      	lsls	r1, r0, #30
 801a9b6:	bf58      	it	pl
 801a9b8:	6963      	ldrpl	r3, [r4, #20]
 801a9ba:	60a3      	str	r3, [r4, #8]
 801a9bc:	e7f4      	b.n	801a9a8 <__swsetup_r+0xb0>
 801a9be:	2000      	movs	r0, #0
 801a9c0:	e7f7      	b.n	801a9b2 <__swsetup_r+0xba>
 801a9c2:	bf00      	nop
 801a9c4:	2000023c 	.word	0x2000023c
 801a9c8:	0801ad84 	.word	0x0801ad84
 801a9cc:	0801ada4 	.word	0x0801ada4
 801a9d0:	0801ad64 	.word	0x0801ad64

0801a9d4 <abort>:
 801a9d4:	2006      	movs	r0, #6
 801a9d6:	b508      	push	{r3, lr}
 801a9d8:	f000 f898 	bl	801ab0c <raise>
 801a9dc:	2001      	movs	r0, #1
 801a9de:	f7eb fbd0 	bl	8006182 <_exit>

0801a9e2 <__swhatbuf_r>:
 801a9e2:	b570      	push	{r4, r5, r6, lr}
 801a9e4:	460e      	mov	r6, r1
 801a9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9ea:	4614      	mov	r4, r2
 801a9ec:	2900      	cmp	r1, #0
 801a9ee:	461d      	mov	r5, r3
 801a9f0:	b096      	sub	sp, #88	; 0x58
 801a9f2:	da07      	bge.n	801aa04 <__swhatbuf_r+0x22>
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	602b      	str	r3, [r5, #0]
 801a9f8:	89b3      	ldrh	r3, [r6, #12]
 801a9fa:	061a      	lsls	r2, r3, #24
 801a9fc:	d410      	bmi.n	801aa20 <__swhatbuf_r+0x3e>
 801a9fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aa02:	e00e      	b.n	801aa22 <__swhatbuf_r+0x40>
 801aa04:	466a      	mov	r2, sp
 801aa06:	f000 f89d 	bl	801ab44 <_fstat_r>
 801aa0a:	2800      	cmp	r0, #0
 801aa0c:	dbf2      	blt.n	801a9f4 <__swhatbuf_r+0x12>
 801aa0e:	9a01      	ldr	r2, [sp, #4]
 801aa10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801aa14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801aa18:	425a      	negs	r2, r3
 801aa1a:	415a      	adcs	r2, r3
 801aa1c:	602a      	str	r2, [r5, #0]
 801aa1e:	e7ee      	b.n	801a9fe <__swhatbuf_r+0x1c>
 801aa20:	2340      	movs	r3, #64	; 0x40
 801aa22:	2000      	movs	r0, #0
 801aa24:	6023      	str	r3, [r4, #0]
 801aa26:	b016      	add	sp, #88	; 0x58
 801aa28:	bd70      	pop	{r4, r5, r6, pc}
	...

0801aa2c <__smakebuf_r>:
 801aa2c:	898b      	ldrh	r3, [r1, #12]
 801aa2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aa30:	079d      	lsls	r5, r3, #30
 801aa32:	4606      	mov	r6, r0
 801aa34:	460c      	mov	r4, r1
 801aa36:	d507      	bpl.n	801aa48 <__smakebuf_r+0x1c>
 801aa38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801aa3c:	6023      	str	r3, [r4, #0]
 801aa3e:	6123      	str	r3, [r4, #16]
 801aa40:	2301      	movs	r3, #1
 801aa42:	6163      	str	r3, [r4, #20]
 801aa44:	b002      	add	sp, #8
 801aa46:	bd70      	pop	{r4, r5, r6, pc}
 801aa48:	466a      	mov	r2, sp
 801aa4a:	ab01      	add	r3, sp, #4
 801aa4c:	f7ff ffc9 	bl	801a9e2 <__swhatbuf_r>
 801aa50:	9900      	ldr	r1, [sp, #0]
 801aa52:	4605      	mov	r5, r0
 801aa54:	4630      	mov	r0, r6
 801aa56:	f7fb fd7f 	bl	8016558 <_malloc_r>
 801aa5a:	b948      	cbnz	r0, 801aa70 <__smakebuf_r+0x44>
 801aa5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa60:	059a      	lsls	r2, r3, #22
 801aa62:	d4ef      	bmi.n	801aa44 <__smakebuf_r+0x18>
 801aa64:	f023 0303 	bic.w	r3, r3, #3
 801aa68:	f043 0302 	orr.w	r3, r3, #2
 801aa6c:	81a3      	strh	r3, [r4, #12]
 801aa6e:	e7e3      	b.n	801aa38 <__smakebuf_r+0xc>
 801aa70:	4b0d      	ldr	r3, [pc, #52]	; (801aaa8 <__smakebuf_r+0x7c>)
 801aa72:	62b3      	str	r3, [r6, #40]	; 0x28
 801aa74:	89a3      	ldrh	r3, [r4, #12]
 801aa76:	6020      	str	r0, [r4, #0]
 801aa78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aa7c:	81a3      	strh	r3, [r4, #12]
 801aa7e:	9b00      	ldr	r3, [sp, #0]
 801aa80:	6120      	str	r0, [r4, #16]
 801aa82:	6163      	str	r3, [r4, #20]
 801aa84:	9b01      	ldr	r3, [sp, #4]
 801aa86:	b15b      	cbz	r3, 801aaa0 <__smakebuf_r+0x74>
 801aa88:	4630      	mov	r0, r6
 801aa8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aa8e:	f000 f86b 	bl	801ab68 <_isatty_r>
 801aa92:	b128      	cbz	r0, 801aaa0 <__smakebuf_r+0x74>
 801aa94:	89a3      	ldrh	r3, [r4, #12]
 801aa96:	f023 0303 	bic.w	r3, r3, #3
 801aa9a:	f043 0301 	orr.w	r3, r3, #1
 801aa9e:	81a3      	strh	r3, [r4, #12]
 801aaa0:	89a0      	ldrh	r0, [r4, #12]
 801aaa2:	4305      	orrs	r5, r0
 801aaa4:	81a5      	strh	r5, [r4, #12]
 801aaa6:	e7cd      	b.n	801aa44 <__smakebuf_r+0x18>
 801aaa8:	08016281 	.word	0x08016281

0801aaac <_malloc_usable_size_r>:
 801aaac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aab0:	1f18      	subs	r0, r3, #4
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	bfbc      	itt	lt
 801aab6:	580b      	ldrlt	r3, [r1, r0]
 801aab8:	18c0      	addlt	r0, r0, r3
 801aaba:	4770      	bx	lr

0801aabc <_raise_r>:
 801aabc:	291f      	cmp	r1, #31
 801aabe:	b538      	push	{r3, r4, r5, lr}
 801aac0:	4604      	mov	r4, r0
 801aac2:	460d      	mov	r5, r1
 801aac4:	d904      	bls.n	801aad0 <_raise_r+0x14>
 801aac6:	2316      	movs	r3, #22
 801aac8:	6003      	str	r3, [r0, #0]
 801aaca:	f04f 30ff 	mov.w	r0, #4294967295
 801aace:	bd38      	pop	{r3, r4, r5, pc}
 801aad0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801aad2:	b112      	cbz	r2, 801aada <_raise_r+0x1e>
 801aad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801aad8:	b94b      	cbnz	r3, 801aaee <_raise_r+0x32>
 801aada:	4620      	mov	r0, r4
 801aadc:	f000 f830 	bl	801ab40 <_getpid_r>
 801aae0:	462a      	mov	r2, r5
 801aae2:	4601      	mov	r1, r0
 801aae4:	4620      	mov	r0, r4
 801aae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aaea:	f000 b817 	b.w	801ab1c <_kill_r>
 801aaee:	2b01      	cmp	r3, #1
 801aaf0:	d00a      	beq.n	801ab08 <_raise_r+0x4c>
 801aaf2:	1c59      	adds	r1, r3, #1
 801aaf4:	d103      	bne.n	801aafe <_raise_r+0x42>
 801aaf6:	2316      	movs	r3, #22
 801aaf8:	6003      	str	r3, [r0, #0]
 801aafa:	2001      	movs	r0, #1
 801aafc:	e7e7      	b.n	801aace <_raise_r+0x12>
 801aafe:	2400      	movs	r4, #0
 801ab00:	4628      	mov	r0, r5
 801ab02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ab06:	4798      	blx	r3
 801ab08:	2000      	movs	r0, #0
 801ab0a:	e7e0      	b.n	801aace <_raise_r+0x12>

0801ab0c <raise>:
 801ab0c:	4b02      	ldr	r3, [pc, #8]	; (801ab18 <raise+0xc>)
 801ab0e:	4601      	mov	r1, r0
 801ab10:	6818      	ldr	r0, [r3, #0]
 801ab12:	f7ff bfd3 	b.w	801aabc <_raise_r>
 801ab16:	bf00      	nop
 801ab18:	2000023c 	.word	0x2000023c

0801ab1c <_kill_r>:
 801ab1c:	b538      	push	{r3, r4, r5, lr}
 801ab1e:	2300      	movs	r3, #0
 801ab20:	4d06      	ldr	r5, [pc, #24]	; (801ab3c <_kill_r+0x20>)
 801ab22:	4604      	mov	r4, r0
 801ab24:	4608      	mov	r0, r1
 801ab26:	4611      	mov	r1, r2
 801ab28:	602b      	str	r3, [r5, #0]
 801ab2a:	f7eb fb1a 	bl	8006162 <_kill>
 801ab2e:	1c43      	adds	r3, r0, #1
 801ab30:	d102      	bne.n	801ab38 <_kill_r+0x1c>
 801ab32:	682b      	ldr	r3, [r5, #0]
 801ab34:	b103      	cbz	r3, 801ab38 <_kill_r+0x1c>
 801ab36:	6023      	str	r3, [r4, #0]
 801ab38:	bd38      	pop	{r3, r4, r5, pc}
 801ab3a:	bf00      	nop
 801ab3c:	20011864 	.word	0x20011864

0801ab40 <_getpid_r>:
 801ab40:	f7eb bb08 	b.w	8006154 <_getpid>

0801ab44 <_fstat_r>:
 801ab44:	b538      	push	{r3, r4, r5, lr}
 801ab46:	2300      	movs	r3, #0
 801ab48:	4d06      	ldr	r5, [pc, #24]	; (801ab64 <_fstat_r+0x20>)
 801ab4a:	4604      	mov	r4, r0
 801ab4c:	4608      	mov	r0, r1
 801ab4e:	4611      	mov	r1, r2
 801ab50:	602b      	str	r3, [r5, #0]
 801ab52:	f7eb fb64 	bl	800621e <_fstat>
 801ab56:	1c43      	adds	r3, r0, #1
 801ab58:	d102      	bne.n	801ab60 <_fstat_r+0x1c>
 801ab5a:	682b      	ldr	r3, [r5, #0]
 801ab5c:	b103      	cbz	r3, 801ab60 <_fstat_r+0x1c>
 801ab5e:	6023      	str	r3, [r4, #0]
 801ab60:	bd38      	pop	{r3, r4, r5, pc}
 801ab62:	bf00      	nop
 801ab64:	20011864 	.word	0x20011864

0801ab68 <_isatty_r>:
 801ab68:	b538      	push	{r3, r4, r5, lr}
 801ab6a:	2300      	movs	r3, #0
 801ab6c:	4d05      	ldr	r5, [pc, #20]	; (801ab84 <_isatty_r+0x1c>)
 801ab6e:	4604      	mov	r4, r0
 801ab70:	4608      	mov	r0, r1
 801ab72:	602b      	str	r3, [r5, #0]
 801ab74:	f7eb fb62 	bl	800623c <_isatty>
 801ab78:	1c43      	adds	r3, r0, #1
 801ab7a:	d102      	bne.n	801ab82 <_isatty_r+0x1a>
 801ab7c:	682b      	ldr	r3, [r5, #0]
 801ab7e:	b103      	cbz	r3, 801ab82 <_isatty_r+0x1a>
 801ab80:	6023      	str	r3, [r4, #0]
 801ab82:	bd38      	pop	{r3, r4, r5, pc}
 801ab84:	20011864 	.word	0x20011864

0801ab88 <_init>:
 801ab88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab8a:	bf00      	nop
 801ab8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab8e:	bc08      	pop	{r3}
 801ab90:	469e      	mov	lr, r3
 801ab92:	4770      	bx	lr

0801ab94 <_fini>:
 801ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab96:	bf00      	nop
 801ab98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab9a:	bc08      	pop	{r3}
 801ab9c:	469e      	mov	lr, r3
 801ab9e:	4770      	bx	lr
