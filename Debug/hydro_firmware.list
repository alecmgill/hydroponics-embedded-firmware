
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111f0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  08011378  08011378  00021378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119fc  080119fc  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  080119fc  080119fc  000219fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a04  08011a04  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a04  08011a04  00021a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a08  08011a08  00021a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08011a0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002de4  200000a8  08011ab4  000300a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20002e8c  08011ab4  00032e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046a9e  00000000  00000000  000300d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006edb  00000000  00000000  00076b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  0007da50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  0007f3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028810  00000000  00000000  00080a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027749  00000000  00000000  000a9268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0c37  00000000  00000000  000d09b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a15e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dd4  00000000  00000000  001a163c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08011360 	.word	0x08011360

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	08011360 	.word	0x08011360

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2f>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b30:	bf24      	itt	cs
 8000b32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_d2f+0x30>
 8000b3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b5c:	d121      	bne.n	8000ba2 <__aeabi_d2f+0x7a>
 8000b5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b62:	bfbc      	itt	lt
 8000b64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	4770      	bxlt	lr
 8000b6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b72:	f1c2 0218 	rsb	r2, r2, #24
 8000b76:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b82:	bf18      	it	ne
 8000b84:	f040 0001 	orrne.w	r0, r0, #1
 8000b88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b94:	ea40 000c 	orr.w	r0, r0, ip
 8000b98:	fa23 f302 	lsr.w	r3, r3, r2
 8000b9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba0:	e7cc      	b.n	8000b3c <__aeabi_d2f+0x14>
 8000ba2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba6:	d107      	bne.n	8000bb8 <__aeabi_d2f+0x90>
 8000ba8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bac:	bf1e      	ittt	ne
 8000bae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb6:	4770      	bxne	lr
 8000bb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_frsub>:
 8000bc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	e002      	b.n	8000bd4 <__addsf3>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fsub>:
 8000bd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd4 <__addsf3>:
 8000bd4:	0042      	lsls	r2, r0, #1
 8000bd6:	bf1f      	itttt	ne
 8000bd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bdc:	ea92 0f03 	teqne	r2, r3
 8000be0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be8:	d06a      	beq.n	8000cc0 <__addsf3+0xec>
 8000bea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bf2:	bfc1      	itttt	gt
 8000bf4:	18d2      	addgt	r2, r2, r3
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	4048      	eorgt	r0, r1
 8000bfa:	4041      	eorgt	r1, r0
 8000bfc:	bfb8      	it	lt
 8000bfe:	425b      	neglt	r3, r3
 8000c00:	2b19      	cmp	r3, #25
 8000c02:	bf88      	it	hi
 8000c04:	4770      	bxhi	lr
 8000c06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c12:	bf18      	it	ne
 8000c14:	4240      	negne	r0, r0
 8000c16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c22:	bf18      	it	ne
 8000c24:	4249      	negne	r1, r1
 8000c26:	ea92 0f03 	teq	r2, r3
 8000c2a:	d03f      	beq.n	8000cac <__addsf3+0xd8>
 8000c2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c30:	fa41 fc03 	asr.w	ip, r1, r3
 8000c34:	eb10 000c 	adds.w	r0, r0, ip
 8000c38:	f1c3 0320 	rsb	r3, r3, #32
 8000c3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c44:	d502      	bpl.n	8000c4c <__addsf3+0x78>
 8000c46:	4249      	negs	r1, r1
 8000c48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c50:	d313      	bcc.n	8000c7a <__addsf3+0xa6>
 8000c52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c56:	d306      	bcc.n	8000c66 <__addsf3+0x92>
 8000c58:	0840      	lsrs	r0, r0, #1
 8000c5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5e:	f102 0201 	add.w	r2, r2, #1
 8000c62:	2afe      	cmp	r2, #254	; 0xfe
 8000c64:	d251      	bcs.n	8000d0a <__addsf3+0x136>
 8000c66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6e:	bf08      	it	eq
 8000c70:	f020 0001 	biceq.w	r0, r0, #1
 8000c74:	ea40 0003 	orr.w	r0, r0, r3
 8000c78:	4770      	bx	lr
 8000c7a:	0049      	lsls	r1, r1, #1
 8000c7c:	eb40 0000 	adc.w	r0, r0, r0
 8000c80:	3a01      	subs	r2, #1
 8000c82:	bf28      	it	cs
 8000c84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c88:	d2ed      	bcs.n	8000c66 <__addsf3+0x92>
 8000c8a:	fab0 fc80 	clz	ip, r0
 8000c8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c92:	ebb2 020c 	subs.w	r2, r2, ip
 8000c96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c9a:	bfaa      	itet	ge
 8000c9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca0:	4252      	neglt	r2, r2
 8000ca2:	4318      	orrge	r0, r3
 8000ca4:	bfbc      	itt	lt
 8000ca6:	40d0      	lsrlt	r0, r2
 8000ca8:	4318      	orrlt	r0, r3
 8000caa:	4770      	bx	lr
 8000cac:	f092 0f00 	teq	r2, #0
 8000cb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb4:	bf06      	itte	eq
 8000cb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cba:	3201      	addeq	r2, #1
 8000cbc:	3b01      	subne	r3, #1
 8000cbe:	e7b5      	b.n	8000c2c <__addsf3+0x58>
 8000cc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc8:	bf18      	it	ne
 8000cca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cce:	d021      	beq.n	8000d14 <__addsf3+0x140>
 8000cd0:	ea92 0f03 	teq	r2, r3
 8000cd4:	d004      	beq.n	8000ce0 <__addsf3+0x10c>
 8000cd6:	f092 0f00 	teq	r2, #0
 8000cda:	bf08      	it	eq
 8000cdc:	4608      	moveq	r0, r1
 8000cde:	4770      	bx	lr
 8000ce0:	ea90 0f01 	teq	r0, r1
 8000ce4:	bf1c      	itt	ne
 8000ce6:	2000      	movne	r0, #0
 8000ce8:	4770      	bxne	lr
 8000cea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cee:	d104      	bne.n	8000cfa <__addsf3+0x126>
 8000cf0:	0040      	lsls	r0, r0, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	4770      	bx	lr
 8000cfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfe:	bf3c      	itt	cc
 8000d00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bxcc	lr
 8000d06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d12:	4770      	bx	lr
 8000d14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d18:	bf16      	itet	ne
 8000d1a:	4608      	movne	r0, r1
 8000d1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d20:	4601      	movne	r1, r0
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	bf06      	itte	eq
 8000d26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d2a:	ea90 0f01 	teqeq	r0, r1
 8000d2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_ui2f>:
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e004      	b.n	8000d44 <__aeabi_i2f+0x8>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_i2f>:
 8000d3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d40:	bf48      	it	mi
 8000d42:	4240      	negmi	r0, r0
 8000d44:	ea5f 0c00 	movs.w	ip, r0
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d50:	4601      	mov	r1, r0
 8000d52:	f04f 0000 	mov.w	r0, #0
 8000d56:	e01c      	b.n	8000d92 <__aeabi_l2f+0x2a>

08000d58 <__aeabi_ul2f>:
 8000d58:	ea50 0201 	orrs.w	r2, r0, r1
 8000d5c:	bf08      	it	eq
 8000d5e:	4770      	bxeq	lr
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e00a      	b.n	8000d7c <__aeabi_l2f+0x14>
 8000d66:	bf00      	nop

08000d68 <__aeabi_l2f>:
 8000d68:	ea50 0201 	orrs.w	r2, r0, r1
 8000d6c:	bf08      	it	eq
 8000d6e:	4770      	bxeq	lr
 8000d70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d74:	d502      	bpl.n	8000d7c <__aeabi_l2f+0x14>
 8000d76:	4240      	negs	r0, r0
 8000d78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d7c:	ea5f 0c01 	movs.w	ip, r1
 8000d80:	bf02      	ittt	eq
 8000d82:	4684      	moveq	ip, r0
 8000d84:	4601      	moveq	r1, r0
 8000d86:	2000      	moveq	r0, #0
 8000d88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d8c:	bf08      	it	eq
 8000d8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d96:	fabc f28c 	clz	r2, ip
 8000d9a:	3a08      	subs	r2, #8
 8000d9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da0:	db10      	blt.n	8000dc4 <__aeabi_l2f+0x5c>
 8000da2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da6:	4463      	add	r3, ip
 8000da8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db4:	fa20 f202 	lsr.w	r2, r0, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	f020 0001 	biceq.w	r0, r0, #1
 8000dc2:	4770      	bx	lr
 8000dc4:	f102 0220 	add.w	r2, r2, #32
 8000dc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de2:	4770      	bx	lr

08000de4 <__aeabi_fmul>:
 8000de4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dec:	bf1e      	ittt	ne
 8000dee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df2:	ea92 0f0c 	teqne	r2, ip
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d06f      	beq.n	8000edc <__aeabi_fmul+0xf8>
 8000dfc:	441a      	add	r2, r3
 8000dfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000e02:	0240      	lsls	r0, r0, #9
 8000e04:	bf18      	it	ne
 8000e06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e0a:	d01e      	beq.n	8000e4a <__aeabi_fmul+0x66>
 8000e0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e18:	fba0 3101 	umull	r3, r1, r0, r1
 8000e1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e24:	bf3e      	ittt	cc
 8000e26:	0049      	lslcc	r1, r1, #1
 8000e28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e2c:	005b      	lslcc	r3, r3, #1
 8000e2e:	ea40 0001 	orr.w	r0, r0, r1
 8000e32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e36:	2afd      	cmp	r2, #253	; 0xfd
 8000e38:	d81d      	bhi.n	8000e76 <__aeabi_fmul+0x92>
 8000e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e42:	bf08      	it	eq
 8000e44:	f020 0001 	biceq.w	r0, r0, #1
 8000e48:	4770      	bx	lr
 8000e4a:	f090 0f00 	teq	r0, #0
 8000e4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e52:	bf08      	it	eq
 8000e54:	0249      	lsleq	r1, r1, #9
 8000e56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5e:	3a7f      	subs	r2, #127	; 0x7f
 8000e60:	bfc2      	ittt	gt
 8000e62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e6a:	4770      	bxgt	lr
 8000e6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	3a01      	subs	r2, #1
 8000e76:	dc5d      	bgt.n	8000f34 <__aeabi_fmul+0x150>
 8000e78:	f112 0f19 	cmn.w	r2, #25
 8000e7c:	bfdc      	itt	le
 8000e7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e82:	4770      	bxle	lr
 8000e84:	f1c2 0200 	rsb	r2, r2, #0
 8000e88:	0041      	lsls	r1, r0, #1
 8000e8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8e:	f1c2 0220 	rsb	r2, r2, #32
 8000e92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e9a:	f140 0000 	adc.w	r0, r0, #0
 8000e9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ea2:	bf08      	it	eq
 8000ea4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea8:	4770      	bx	lr
 8000eaa:	f092 0f00 	teq	r2, #0
 8000eae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0040      	lsleq	r0, r0, #1
 8000eb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eba:	3a01      	subeq	r2, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fmul+0xce>
 8000ebe:	ea40 000c 	orr.w	r0, r0, ip
 8000ec2:	f093 0f00 	teq	r3, #0
 8000ec6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0049      	lsleq	r1, r1, #1
 8000ece:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ed2:	3b01      	subeq	r3, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fmul+0xe6>
 8000ed6:	ea41 010c 	orr.w	r1, r1, ip
 8000eda:	e78f      	b.n	8000dfc <__aeabi_fmul+0x18>
 8000edc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee0:	ea92 0f0c 	teq	r2, ip
 8000ee4:	bf18      	it	ne
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d00a      	beq.n	8000f02 <__aeabi_fmul+0x11e>
 8000eec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ef0:	bf18      	it	ne
 8000ef2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef6:	d1d8      	bne.n	8000eaa <__aeabi_fmul+0xc6>
 8000ef8:	ea80 0001 	eor.w	r0, r0, r1
 8000efc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f00:	4770      	bx	lr
 8000f02:	f090 0f00 	teq	r0, #0
 8000f06:	bf17      	itett	ne
 8000f08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f0c:	4608      	moveq	r0, r1
 8000f0e:	f091 0f00 	teqne	r1, #0
 8000f12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f16:	d014      	beq.n	8000f42 <__aeabi_fmul+0x15e>
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	d101      	bne.n	8000f22 <__aeabi_fmul+0x13e>
 8000f1e:	0242      	lsls	r2, r0, #9
 8000f20:	d10f      	bne.n	8000f42 <__aeabi_fmul+0x15e>
 8000f22:	ea93 0f0c 	teq	r3, ip
 8000f26:	d103      	bne.n	8000f30 <__aeabi_fmul+0x14c>
 8000f28:	024b      	lsls	r3, r1, #9
 8000f2a:	bf18      	it	ne
 8000f2c:	4608      	movne	r0, r1
 8000f2e:	d108      	bne.n	8000f42 <__aeabi_fmul+0x15e>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f40:	4770      	bx	lr
 8000f42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f4a:	4770      	bx	lr

08000f4c <__aeabi_fdiv>:
 8000f4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f54:	bf1e      	ittt	ne
 8000f56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f5a:	ea92 0f0c 	teqne	r2, ip
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d069      	beq.n	8001038 <__aeabi_fdiv+0xec>
 8000f64:	eba2 0203 	sub.w	r2, r2, r3
 8000f68:	ea80 0c01 	eor.w	ip, r0, r1
 8000f6c:	0249      	lsls	r1, r1, #9
 8000f6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f72:	d037      	beq.n	8000fe4 <__aeabi_fdiv+0x98>
 8000f74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f84:	428b      	cmp	r3, r1
 8000f86:	bf38      	it	cc
 8000f88:	005b      	lslcc	r3, r3, #1
 8000f8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f92:	428b      	cmp	r3, r1
 8000f94:	bf24      	itt	cs
 8000f96:	1a5b      	subcs	r3, r3, r1
 8000f98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fa0:	bf24      	itt	cs
 8000fa2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000faa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fae:	bf24      	itt	cs
 8000fb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fbc:	bf24      	itt	cs
 8000fbe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fc2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	bf18      	it	ne
 8000fca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fce:	d1e0      	bne.n	8000f92 <__aeabi_fdiv+0x46>
 8000fd0:	2afd      	cmp	r2, #253	; 0xfd
 8000fd2:	f63f af50 	bhi.w	8000e76 <__aeabi_fmul+0x92>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fdc:	bf08      	it	eq
 8000fde:	f020 0001 	biceq.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fe8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fec:	327f      	adds	r2, #127	; 0x7f
 8000fee:	bfc2      	ittt	gt
 8000ff0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff8:	4770      	bxgt	lr
 8000ffa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	3a01      	subs	r2, #1
 8001004:	e737      	b.n	8000e76 <__aeabi_fmul+0x92>
 8001006:	f092 0f00 	teq	r2, #0
 800100a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800100e:	bf02      	ittt	eq
 8001010:	0040      	lsleq	r0, r0, #1
 8001012:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001016:	3a01      	subeq	r2, #1
 8001018:	d0f9      	beq.n	800100e <__aeabi_fdiv+0xc2>
 800101a:	ea40 000c 	orr.w	r0, r0, ip
 800101e:	f093 0f00 	teq	r3, #0
 8001022:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001026:	bf02      	ittt	eq
 8001028:	0049      	lsleq	r1, r1, #1
 800102a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800102e:	3b01      	subeq	r3, #1
 8001030:	d0f9      	beq.n	8001026 <__aeabi_fdiv+0xda>
 8001032:	ea41 010c 	orr.w	r1, r1, ip
 8001036:	e795      	b.n	8000f64 <__aeabi_fdiv+0x18>
 8001038:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800103c:	ea92 0f0c 	teq	r2, ip
 8001040:	d108      	bne.n	8001054 <__aeabi_fdiv+0x108>
 8001042:	0242      	lsls	r2, r0, #9
 8001044:	f47f af7d 	bne.w	8000f42 <__aeabi_fmul+0x15e>
 8001048:	ea93 0f0c 	teq	r3, ip
 800104c:	f47f af70 	bne.w	8000f30 <__aeabi_fmul+0x14c>
 8001050:	4608      	mov	r0, r1
 8001052:	e776      	b.n	8000f42 <__aeabi_fmul+0x15e>
 8001054:	ea93 0f0c 	teq	r3, ip
 8001058:	d104      	bne.n	8001064 <__aeabi_fdiv+0x118>
 800105a:	024b      	lsls	r3, r1, #9
 800105c:	f43f af4c 	beq.w	8000ef8 <__aeabi_fmul+0x114>
 8001060:	4608      	mov	r0, r1
 8001062:	e76e      	b.n	8000f42 <__aeabi_fmul+0x15e>
 8001064:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001068:	bf18      	it	ne
 800106a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800106e:	d1ca      	bne.n	8001006 <__aeabi_fdiv+0xba>
 8001070:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001074:	f47f af5c 	bne.w	8000f30 <__aeabi_fmul+0x14c>
 8001078:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800107c:	f47f af3c 	bne.w	8000ef8 <__aeabi_fmul+0x114>
 8001080:	e75f      	b.n	8000f42 <__aeabi_fmul+0x15e>
 8001082:	bf00      	nop

08001084 <__gesf2>:
 8001084:	f04f 3cff 	mov.w	ip, #4294967295
 8001088:	e006      	b.n	8001098 <__cmpsf2+0x4>
 800108a:	bf00      	nop

0800108c <__lesf2>:
 800108c:	f04f 0c01 	mov.w	ip, #1
 8001090:	e002      	b.n	8001098 <__cmpsf2+0x4>
 8001092:	bf00      	nop

08001094 <__cmpsf2>:
 8001094:	f04f 0c01 	mov.w	ip, #1
 8001098:	f84d cd04 	str.w	ip, [sp, #-4]!
 800109c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	bf18      	it	ne
 80010aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ae:	d011      	beq.n	80010d4 <__cmpsf2+0x40>
 80010b0:	b001      	add	sp, #4
 80010b2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b6:	bf18      	it	ne
 80010b8:	ea90 0f01 	teqne	r0, r1
 80010bc:	bf58      	it	pl
 80010be:	ebb2 0003 	subspl.w	r0, r2, r3
 80010c2:	bf88      	it	hi
 80010c4:	17c8      	asrhi	r0, r1, #31
 80010c6:	bf38      	it	cc
 80010c8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010cc:	bf18      	it	ne
 80010ce:	f040 0001 	orrne.w	r0, r0, #1
 80010d2:	4770      	bx	lr
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	d102      	bne.n	80010e0 <__cmpsf2+0x4c>
 80010da:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010de:	d105      	bne.n	80010ec <__cmpsf2+0x58>
 80010e0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e4:	d1e4      	bne.n	80010b0 <__cmpsf2+0x1c>
 80010e6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ea:	d0e1      	beq.n	80010b0 <__cmpsf2+0x1c>
 80010ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <__aeabi_cfrcmple>:
 80010f4:	4684      	mov	ip, r0
 80010f6:	4608      	mov	r0, r1
 80010f8:	4661      	mov	r1, ip
 80010fa:	e7ff      	b.n	80010fc <__aeabi_cfcmpeq>

080010fc <__aeabi_cfcmpeq>:
 80010fc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fe:	f7ff ffc9 	bl	8001094 <__cmpsf2>
 8001102:	2800      	cmp	r0, #0
 8001104:	bf48      	it	mi
 8001106:	f110 0f00 	cmnmi.w	r0, #0
 800110a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800110c <__aeabi_fcmpeq>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff fff4 	bl	80010fc <__aeabi_cfcmpeq>
 8001114:	bf0c      	ite	eq
 8001116:	2001      	moveq	r0, #1
 8001118:	2000      	movne	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmplt>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffea 	bl	80010fc <__aeabi_cfcmpeq>
 8001128:	bf34      	ite	cc
 800112a:	2001      	movcc	r0, #1
 800112c:	2000      	movcs	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmple>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffe0 	bl	80010fc <__aeabi_cfcmpeq>
 800113c:	bf94      	ite	ls
 800113e:	2001      	movls	r0, #1
 8001140:	2000      	movhi	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_fcmpge>:
 8001148:	f84d ed08 	str.w	lr, [sp, #-8]!
 800114c:	f7ff ffd2 	bl	80010f4 <__aeabi_cfrcmple>
 8001150:	bf94      	ite	ls
 8001152:	2001      	movls	r0, #1
 8001154:	2000      	movhi	r0, #0
 8001156:	f85d fb08 	ldr.w	pc, [sp], #8
 800115a:	bf00      	nop

0800115c <__aeabi_fcmpgt>:
 800115c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001160:	f7ff ffc8 	bl	80010f4 <__aeabi_cfrcmple>
 8001164:	bf34      	ite	cc
 8001166:	2001      	movcc	r0, #1
 8001168:	2000      	movcs	r0, #0
 800116a:	f85d fb08 	ldr.w	pc, [sp], #8
 800116e:	bf00      	nop

08001170 <__aeabi_f2iz>:
 8001170:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001178:	d30f      	bcc.n	800119a <__aeabi_f2iz+0x2a>
 800117a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001182:	d90d      	bls.n	80011a0 <__aeabi_f2iz+0x30>
 8001184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800118c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001190:	fa23 f002 	lsr.w	r0, r3, r2
 8001194:	bf18      	it	ne
 8001196:	4240      	negne	r0, r0
 8001198:	4770      	bx	lr
 800119a:	f04f 0000 	mov.w	r0, #0
 800119e:	4770      	bx	lr
 80011a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a4:	d101      	bne.n	80011aa <__aeabi_f2iz+0x3a>
 80011a6:	0242      	lsls	r2, r0, #9
 80011a8:	d105      	bne.n	80011b6 <__aeabi_f2iz+0x46>
 80011aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011ae:	bf08      	it	eq
 80011b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b4:	4770      	bx	lr
 80011b6:	f04f 0000 	mov.w	r0, #0
 80011ba:	4770      	bx	lr

080011bc <__aeabi_f2uiz>:
 80011bc:	0042      	lsls	r2, r0, #1
 80011be:	d20e      	bcs.n	80011de <__aeabi_f2uiz+0x22>
 80011c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c4:	d30b      	bcc.n	80011de <__aeabi_f2uiz+0x22>
 80011c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ce:	d409      	bmi.n	80011e4 <__aeabi_f2uiz+0x28>
 80011d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d8:	fa23 f002 	lsr.w	r0, r3, r2
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr
 80011e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e8:	d101      	bne.n	80011ee <__aeabi_f2uiz+0x32>
 80011ea:	0242      	lsls	r2, r0, #9
 80011ec:	d102      	bne.n	80011f4 <__aeabi_f2uiz+0x38>
 80011ee:	f04f 30ff 	mov.w	r0, #4294967295
 80011f2:	4770      	bx	lr
 80011f4:	f04f 0000 	mov.w	r0, #0
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <__aeabi_uldivmod>:
 80011fc:	b953      	cbnz	r3, 8001214 <__aeabi_uldivmod+0x18>
 80011fe:	b94a      	cbnz	r2, 8001214 <__aeabi_uldivmod+0x18>
 8001200:	2900      	cmp	r1, #0
 8001202:	bf08      	it	eq
 8001204:	2800      	cmpeq	r0, #0
 8001206:	bf1c      	itt	ne
 8001208:	f04f 31ff 	movne.w	r1, #4294967295
 800120c:	f04f 30ff 	movne.w	r0, #4294967295
 8001210:	f000 b96e 	b.w	80014f0 <__aeabi_idiv0>
 8001214:	f1ad 0c08 	sub.w	ip, sp, #8
 8001218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800121c:	f000 f806 	bl	800122c <__udivmoddi4>
 8001220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001228:	b004      	add	sp, #16
 800122a:	4770      	bx	lr

0800122c <__udivmoddi4>:
 800122c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001230:	9e08      	ldr	r6, [sp, #32]
 8001232:	460d      	mov	r5, r1
 8001234:	4604      	mov	r4, r0
 8001236:	468e      	mov	lr, r1
 8001238:	2b00      	cmp	r3, #0
 800123a:	f040 8083 	bne.w	8001344 <__udivmoddi4+0x118>
 800123e:	428a      	cmp	r2, r1
 8001240:	4617      	mov	r7, r2
 8001242:	d947      	bls.n	80012d4 <__udivmoddi4+0xa8>
 8001244:	fab2 f382 	clz	r3, r2
 8001248:	b14b      	cbz	r3, 800125e <__udivmoddi4+0x32>
 800124a:	f1c3 0120 	rsb	r1, r3, #32
 800124e:	fa05 fe03 	lsl.w	lr, r5, r3
 8001252:	fa20 f101 	lsr.w	r1, r0, r1
 8001256:	409f      	lsls	r7, r3
 8001258:	ea41 0e0e 	orr.w	lr, r1, lr
 800125c:	409c      	lsls	r4, r3
 800125e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001262:	fbbe fcf8 	udiv	ip, lr, r8
 8001266:	fa1f f987 	uxth.w	r9, r7
 800126a:	fb08 e21c 	mls	r2, r8, ip, lr
 800126e:	fb0c f009 	mul.w	r0, ip, r9
 8001272:	0c21      	lsrs	r1, r4, #16
 8001274:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001278:	4290      	cmp	r0, r2
 800127a:	d90a      	bls.n	8001292 <__udivmoddi4+0x66>
 800127c:	18ba      	adds	r2, r7, r2
 800127e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001282:	f080 8118 	bcs.w	80014b6 <__udivmoddi4+0x28a>
 8001286:	4290      	cmp	r0, r2
 8001288:	f240 8115 	bls.w	80014b6 <__udivmoddi4+0x28a>
 800128c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001290:	443a      	add	r2, r7
 8001292:	1a12      	subs	r2, r2, r0
 8001294:	fbb2 f0f8 	udiv	r0, r2, r8
 8001298:	fb08 2210 	mls	r2, r8, r0, r2
 800129c:	fb00 f109 	mul.w	r1, r0, r9
 80012a0:	b2a4      	uxth	r4, r4
 80012a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012a6:	42a1      	cmp	r1, r4
 80012a8:	d909      	bls.n	80012be <__udivmoddi4+0x92>
 80012aa:	193c      	adds	r4, r7, r4
 80012ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80012b0:	f080 8103 	bcs.w	80014ba <__udivmoddi4+0x28e>
 80012b4:	42a1      	cmp	r1, r4
 80012b6:	f240 8100 	bls.w	80014ba <__udivmoddi4+0x28e>
 80012ba:	3802      	subs	r0, #2
 80012bc:	443c      	add	r4, r7
 80012be:	1a64      	subs	r4, r4, r1
 80012c0:	2100      	movs	r1, #0
 80012c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012c6:	b11e      	cbz	r6, 80012d0 <__udivmoddi4+0xa4>
 80012c8:	2200      	movs	r2, #0
 80012ca:	40dc      	lsrs	r4, r3
 80012cc:	e9c6 4200 	strd	r4, r2, [r6]
 80012d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d4:	b902      	cbnz	r2, 80012d8 <__udivmoddi4+0xac>
 80012d6:	deff      	udf	#255	; 0xff
 80012d8:	fab2 f382 	clz	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d14f      	bne.n	8001380 <__udivmoddi4+0x154>
 80012e0:	1a8d      	subs	r5, r1, r2
 80012e2:	2101      	movs	r1, #1
 80012e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80012e8:	fa1f f882 	uxth.w	r8, r2
 80012ec:	fbb5 fcfe 	udiv	ip, r5, lr
 80012f0:	fb0e 551c 	mls	r5, lr, ip, r5
 80012f4:	fb08 f00c 	mul.w	r0, r8, ip
 80012f8:	0c22      	lsrs	r2, r4, #16
 80012fa:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80012fe:	42a8      	cmp	r0, r5
 8001300:	d907      	bls.n	8001312 <__udivmoddi4+0xe6>
 8001302:	197d      	adds	r5, r7, r5
 8001304:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001308:	d202      	bcs.n	8001310 <__udivmoddi4+0xe4>
 800130a:	42a8      	cmp	r0, r5
 800130c:	f200 80e9 	bhi.w	80014e2 <__udivmoddi4+0x2b6>
 8001310:	4694      	mov	ip, r2
 8001312:	1a2d      	subs	r5, r5, r0
 8001314:	fbb5 f0fe 	udiv	r0, r5, lr
 8001318:	fb0e 5510 	mls	r5, lr, r0, r5
 800131c:	fb08 f800 	mul.w	r8, r8, r0
 8001320:	b2a4      	uxth	r4, r4
 8001322:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001326:	45a0      	cmp	r8, r4
 8001328:	d907      	bls.n	800133a <__udivmoddi4+0x10e>
 800132a:	193c      	adds	r4, r7, r4
 800132c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001330:	d202      	bcs.n	8001338 <__udivmoddi4+0x10c>
 8001332:	45a0      	cmp	r8, r4
 8001334:	f200 80d9 	bhi.w	80014ea <__udivmoddi4+0x2be>
 8001338:	4610      	mov	r0, r2
 800133a:	eba4 0408 	sub.w	r4, r4, r8
 800133e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001342:	e7c0      	b.n	80012c6 <__udivmoddi4+0x9a>
 8001344:	428b      	cmp	r3, r1
 8001346:	d908      	bls.n	800135a <__udivmoddi4+0x12e>
 8001348:	2e00      	cmp	r6, #0
 800134a:	f000 80b1 	beq.w	80014b0 <__udivmoddi4+0x284>
 800134e:	2100      	movs	r1, #0
 8001350:	e9c6 0500 	strd	r0, r5, [r6]
 8001354:	4608      	mov	r0, r1
 8001356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800135a:	fab3 f183 	clz	r1, r3
 800135e:	2900      	cmp	r1, #0
 8001360:	d14b      	bne.n	80013fa <__udivmoddi4+0x1ce>
 8001362:	42ab      	cmp	r3, r5
 8001364:	d302      	bcc.n	800136c <__udivmoddi4+0x140>
 8001366:	4282      	cmp	r2, r0
 8001368:	f200 80b9 	bhi.w	80014de <__udivmoddi4+0x2b2>
 800136c:	1a84      	subs	r4, r0, r2
 800136e:	eb65 0303 	sbc.w	r3, r5, r3
 8001372:	2001      	movs	r0, #1
 8001374:	469e      	mov	lr, r3
 8001376:	2e00      	cmp	r6, #0
 8001378:	d0aa      	beq.n	80012d0 <__udivmoddi4+0xa4>
 800137a:	e9c6 4e00 	strd	r4, lr, [r6]
 800137e:	e7a7      	b.n	80012d0 <__udivmoddi4+0xa4>
 8001380:	409f      	lsls	r7, r3
 8001382:	f1c3 0220 	rsb	r2, r3, #32
 8001386:	40d1      	lsrs	r1, r2
 8001388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800138c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001390:	fa1f f887 	uxth.w	r8, r7
 8001394:	fb0e 1110 	mls	r1, lr, r0, r1
 8001398:	fa24 f202 	lsr.w	r2, r4, r2
 800139c:	409d      	lsls	r5, r3
 800139e:	fb00 fc08 	mul.w	ip, r0, r8
 80013a2:	432a      	orrs	r2, r5
 80013a4:	0c15      	lsrs	r5, r2, #16
 80013a6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013aa:	45ac      	cmp	ip, r5
 80013ac:	fa04 f403 	lsl.w	r4, r4, r3
 80013b0:	d909      	bls.n	80013c6 <__udivmoddi4+0x19a>
 80013b2:	197d      	adds	r5, r7, r5
 80013b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80013b8:	f080 808f 	bcs.w	80014da <__udivmoddi4+0x2ae>
 80013bc:	45ac      	cmp	ip, r5
 80013be:	f240 808c 	bls.w	80014da <__udivmoddi4+0x2ae>
 80013c2:	3802      	subs	r0, #2
 80013c4:	443d      	add	r5, r7
 80013c6:	eba5 050c 	sub.w	r5, r5, ip
 80013ca:	fbb5 f1fe 	udiv	r1, r5, lr
 80013ce:	fb0e 5c11 	mls	ip, lr, r1, r5
 80013d2:	fb01 f908 	mul.w	r9, r1, r8
 80013d6:	b295      	uxth	r5, r2
 80013d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80013dc:	45a9      	cmp	r9, r5
 80013de:	d907      	bls.n	80013f0 <__udivmoddi4+0x1c4>
 80013e0:	197d      	adds	r5, r7, r5
 80013e2:	f101 32ff 	add.w	r2, r1, #4294967295
 80013e6:	d274      	bcs.n	80014d2 <__udivmoddi4+0x2a6>
 80013e8:	45a9      	cmp	r9, r5
 80013ea:	d972      	bls.n	80014d2 <__udivmoddi4+0x2a6>
 80013ec:	3902      	subs	r1, #2
 80013ee:	443d      	add	r5, r7
 80013f0:	eba5 0509 	sub.w	r5, r5, r9
 80013f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f8:	e778      	b.n	80012ec <__udivmoddi4+0xc0>
 80013fa:	f1c1 0720 	rsb	r7, r1, #32
 80013fe:	408b      	lsls	r3, r1
 8001400:	fa22 fc07 	lsr.w	ip, r2, r7
 8001404:	ea4c 0c03 	orr.w	ip, ip, r3
 8001408:	fa25 f407 	lsr.w	r4, r5, r7
 800140c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001410:	fbb4 f9fe 	udiv	r9, r4, lr
 8001414:	fa1f f88c 	uxth.w	r8, ip
 8001418:	fb0e 4419 	mls	r4, lr, r9, r4
 800141c:	fa20 f307 	lsr.w	r3, r0, r7
 8001420:	fb09 fa08 	mul.w	sl, r9, r8
 8001424:	408d      	lsls	r5, r1
 8001426:	431d      	orrs	r5, r3
 8001428:	0c2b      	lsrs	r3, r5, #16
 800142a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800142e:	45a2      	cmp	sl, r4
 8001430:	fa02 f201 	lsl.w	r2, r2, r1
 8001434:	fa00 f301 	lsl.w	r3, r0, r1
 8001438:	d909      	bls.n	800144e <__udivmoddi4+0x222>
 800143a:	eb1c 0404 	adds.w	r4, ip, r4
 800143e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001442:	d248      	bcs.n	80014d6 <__udivmoddi4+0x2aa>
 8001444:	45a2      	cmp	sl, r4
 8001446:	d946      	bls.n	80014d6 <__udivmoddi4+0x2aa>
 8001448:	f1a9 0902 	sub.w	r9, r9, #2
 800144c:	4464      	add	r4, ip
 800144e:	eba4 040a 	sub.w	r4, r4, sl
 8001452:	fbb4 f0fe 	udiv	r0, r4, lr
 8001456:	fb0e 4410 	mls	r4, lr, r0, r4
 800145a:	fb00 fa08 	mul.w	sl, r0, r8
 800145e:	b2ad      	uxth	r5, r5
 8001460:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001464:	45a2      	cmp	sl, r4
 8001466:	d908      	bls.n	800147a <__udivmoddi4+0x24e>
 8001468:	eb1c 0404 	adds.w	r4, ip, r4
 800146c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001470:	d22d      	bcs.n	80014ce <__udivmoddi4+0x2a2>
 8001472:	45a2      	cmp	sl, r4
 8001474:	d92b      	bls.n	80014ce <__udivmoddi4+0x2a2>
 8001476:	3802      	subs	r0, #2
 8001478:	4464      	add	r4, ip
 800147a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800147e:	fba0 8902 	umull	r8, r9, r0, r2
 8001482:	eba4 040a 	sub.w	r4, r4, sl
 8001486:	454c      	cmp	r4, r9
 8001488:	46c6      	mov	lr, r8
 800148a:	464d      	mov	r5, r9
 800148c:	d319      	bcc.n	80014c2 <__udivmoddi4+0x296>
 800148e:	d016      	beq.n	80014be <__udivmoddi4+0x292>
 8001490:	b15e      	cbz	r6, 80014aa <__udivmoddi4+0x27e>
 8001492:	ebb3 020e 	subs.w	r2, r3, lr
 8001496:	eb64 0405 	sbc.w	r4, r4, r5
 800149a:	fa04 f707 	lsl.w	r7, r4, r7
 800149e:	fa22 f301 	lsr.w	r3, r2, r1
 80014a2:	431f      	orrs	r7, r3
 80014a4:	40cc      	lsrs	r4, r1
 80014a6:	e9c6 7400 	strd	r7, r4, [r6]
 80014aa:	2100      	movs	r1, #0
 80014ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014b0:	4631      	mov	r1, r6
 80014b2:	4630      	mov	r0, r6
 80014b4:	e70c      	b.n	80012d0 <__udivmoddi4+0xa4>
 80014b6:	468c      	mov	ip, r1
 80014b8:	e6eb      	b.n	8001292 <__udivmoddi4+0x66>
 80014ba:	4610      	mov	r0, r2
 80014bc:	e6ff      	b.n	80012be <__udivmoddi4+0x92>
 80014be:	4543      	cmp	r3, r8
 80014c0:	d2e6      	bcs.n	8001490 <__udivmoddi4+0x264>
 80014c2:	ebb8 0e02 	subs.w	lr, r8, r2
 80014c6:	eb69 050c 	sbc.w	r5, r9, ip
 80014ca:	3801      	subs	r0, #1
 80014cc:	e7e0      	b.n	8001490 <__udivmoddi4+0x264>
 80014ce:	4628      	mov	r0, r5
 80014d0:	e7d3      	b.n	800147a <__udivmoddi4+0x24e>
 80014d2:	4611      	mov	r1, r2
 80014d4:	e78c      	b.n	80013f0 <__udivmoddi4+0x1c4>
 80014d6:	4681      	mov	r9, r0
 80014d8:	e7b9      	b.n	800144e <__udivmoddi4+0x222>
 80014da:	4608      	mov	r0, r1
 80014dc:	e773      	b.n	80013c6 <__udivmoddi4+0x19a>
 80014de:	4608      	mov	r0, r1
 80014e0:	e749      	b.n	8001376 <__udivmoddi4+0x14a>
 80014e2:	f1ac 0c02 	sub.w	ip, ip, #2
 80014e6:	443d      	add	r5, r7
 80014e8:	e713      	b.n	8001312 <__udivmoddi4+0xe6>
 80014ea:	3802      	subs	r0, #2
 80014ec:	443c      	add	r4, r7
 80014ee:	e724      	b.n	800133a <__udivmoddi4+0x10e>

080014f0 <__aeabi_idiv0>:
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <get_ADC_values>:
#include "main.h"
#include "ADC_driver.h"
#include "sensors.h"

float get_ADC_values(int pH_or_nutrients) // 1 = nutrients 0 = pH
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	//if(pH_or_nutrients == 0)
	//{
		HAL_ADC_Start(&hadc2);
 80014fc:	4809      	ldr	r0, [pc, #36]	; (8001524 <get_ADC_values+0x30>)
 80014fe:	f002 fb01 	bl	8003b04 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 100);
 8001502:	2164      	movs	r1, #100	; 0x64
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <get_ADC_values+0x30>)
 8001506:	f002 fbad 	bl	8003c64 <HAL_ADC_PollForConversion>
		return HAL_ADC_GetValue(&hadc2);//Read value
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <get_ADC_values+0x30>)
 800150c:	f002 fc2e 	bl	8003d6c <HAL_ADC_GetValue>
 8001510:	4603      	mov	r3, r0
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fc0e 	bl	8000d34 <__aeabi_ui2f>
 8001518:	4603      	mov	r3, r0
	{
		HAL_ADC_Start(&hadc3);
		HAL_ADC_PollForConversion(&hadc3, 100);
		return HAL_ADC_GetValue(&hadc);//Read value
	}*/
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000420 	.word	0x20000420

08001528 <Mount_USB>:
uint32_t total, free_space;



void Mount_USB (void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 800152c:	2201      	movs	r2, #1
 800152e:	4905      	ldr	r1, [pc, #20]	; (8001544 <Mount_USB+0x1c>)
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <Mount_USB+0x20>)
 8001532:	f00d fbf7 	bl	800ed24 <f_mount>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <Mount_USB+0x24>)
 800153c:	701a      	strb	r2, [r3, #0]
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000744 	.word	0x20000744
 8001548:	20001774 	.word	0x20001774
 800154c:	200003b0 	.word	0x200003b0

08001550 <Unmount_USB>:

void Unmount_USB (void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8001554:	2201      	movs	r2, #1
 8001556:	4905      	ldr	r1, [pc, #20]	; (800156c <Unmount_USB+0x1c>)
 8001558:	2000      	movs	r0, #0
 800155a:	f00d fbe3 	bl	800ed24 <f_mount>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b03      	ldr	r3, [pc, #12]	; (8001570 <Unmount_USB+0x20>)
 8001564:	701a      	strb	r2, [r3, #0]

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000744 	.word	0x20000744
 8001570:	200003b0 	.word	0x200003b0

08001574 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800157a:	af00      	add	r7, sp, #0
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	3b1c      	subs	r3, #28
 8001582:	6018      	str	r0, [r3, #0]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8001584:	2014      	movs	r0, #20
 8001586:	f00f fa99 	bl	8010abc <malloc>
 800158a:	4603      	mov	r3, r0
 800158c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001590:	f102 021c 	add.w	r2, r2, #28
 8001594:	6013      	str	r3, [r2, #0]

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	3b18      	subs	r3, #24
 800159c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80015a0:	f102 021c 	add.w	r2, r2, #28
 80015a4:	6811      	ldr	r1, [r2, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f00e fabc 	bl	800fb24 <f_opendir>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b58      	ldr	r3, [pc, #352]	; (8001714 <Scan_USB+0x1a0>)
 80015b2:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80015b4:	4b57      	ldr	r3, [pc, #348]	; (8001714 <Scan_USB+0x1a0>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f040 809c 	bne.w	80016f6 <Scan_USB+0x182>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	3b18      	subs	r3, #24
 80015c4:	4954      	ldr	r1, [pc, #336]	; (8001718 <Scan_USB+0x1a4>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f00e fb78 	bl	800fcbc <f_readdir>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <Scan_USB+0x1a0>)
 80015d2:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 80015d4:	4b4f      	ldr	r3, [pc, #316]	; (8001714 <Scan_USB+0x1a0>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f040 8086 	bne.w	80016ea <Scan_USB+0x176>
 80015de:	4b4e      	ldr	r3, [pc, #312]	; (8001718 <Scan_USB+0x1a4>)
 80015e0:	7a5b      	ldrb	r3, [r3, #9]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8081 	beq.w	80016ea <Scan_USB+0x176>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 80015e8:	4b4b      	ldr	r3, [pc, #300]	; (8001718 <Scan_USB+0x1a4>)
 80015ea:	7a1b      	ldrb	r3, [r3, #8]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d056      	beq.n	80016a2 <Scan_USB+0x12e>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 80015f4:	4949      	ldr	r1, [pc, #292]	; (800171c <Scan_USB+0x1a8>)
 80015f6:	484a      	ldr	r0, [pc, #296]	; (8001720 <Scan_USB+0x1ac>)
 80015f8:	f7fe fde6 	bl	80001c8 <strcmp>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d06e      	beq.n	80016e0 <Scan_USB+0x16c>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8001602:	4946      	ldr	r1, [pc, #280]	; (800171c <Scan_USB+0x1a8>)
 8001604:	4847      	ldr	r0, [pc, #284]	; (8001724 <Scan_USB+0x1b0>)
 8001606:	f7fe fddf 	bl	80001c8 <strcmp>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d069      	beq.n	80016e4 <Scan_USB+0x170>
            	char *buf = malloc(30*sizeof(char));
 8001610:	201e      	movs	r0, #30
 8001612:	f00f fa53 	bl	8010abc <malloc>
 8001616:	4603      	mov	r3, r0
 8001618:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800161c:	f102 0214 	add.w	r2, r2, #20
 8001620:	6013      	str	r3, [r2, #0]
            	free(buf);
 8001622:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001626:	f103 0314 	add.w	r3, r3, #20
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	f00f fa4e 	bl	8010acc <free>
                i = strlen(path);
 8001630:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001634:	f103 031c 	add.w	r3, r3, #28
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	f7fe fdcf 	bl	80001dc <strlen>
 800163e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001642:	f103 0310 	add.w	r3, r3, #16
 8001646:	6018      	str	r0, [r3, #0]
                sprintf(&path[i], "/%s", USBHfno.fname);
 8001648:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800164c:	f103 031c 	add.w	r3, r3, #28
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001656:	f103 0310 	add.w	r3, r3, #16
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4413      	add	r3, r2
 800165e:	4a2f      	ldr	r2, [pc, #188]	; (800171c <Scan_USB+0x1a8>)
 8001660:	4931      	ldr	r1, [pc, #196]	; (8001728 <Scan_USB+0x1b4>)
 8001662:	4618      	mov	r0, r3
 8001664:	f00f fb06 	bl	8010c74 <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8001668:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800166c:	f103 031c 	add.w	r3, r3, #28
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	f7ff ff7f 	bl	8001574 <Scan_USB>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <Scan_USB+0x1a0>)
 800167c:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <Scan_USB+0x1a0>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d130      	bne.n	80016e8 <Scan_USB+0x174>
                path[i] = 0;
 8001686:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800168a:	f103 031c 	add.w	r3, r3, #28
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001694:	f103 0310 	add.w	r3, r3, #16
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	e78d      	b.n	80015be <Scan_USB+0x4a>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 80016a2:	201e      	movs	r0, #30
 80016a4:	f00f fa0a 	bl	8010abc <malloc>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80016ae:	f102 0218 	add.w	r2, r2, #24
 80016b2:	6013      	str	r3, [r2, #0]
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <Scan_USB+0x1a8>)
 80016b6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80016ba:	f102 021c 	add.w	r2, r2, #28
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	491a      	ldr	r1, [pc, #104]	; (800172c <Scan_USB+0x1b8>)
 80016c2:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 80016c6:	f100 0018 	add.w	r0, r0, #24
 80016ca:	6800      	ldr	r0, [r0, #0]
 80016cc:	f00f fad2 	bl	8010c74 <siprintf>
               free(buf);
 80016d0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80016d4:	f103 0318 	add.w	r3, r3, #24
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	f00f f9f7 	bl	8010acc <free>
 80016de:	e76e      	b.n	80015be <Scan_USB+0x4a>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 80016e0:	bf00      	nop
 80016e2:	e76c      	b.n	80015be <Scan_USB+0x4a>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 80016e4:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80016e6:	e76a      	b.n	80015be <Scan_USB+0x4a>
                if (fresult != FR_OK) break;
 80016e8:	bf00      	nop
            }
        }
        f_closedir(&dir);
 80016ea:	f107 0320 	add.w	r3, r7, #32
 80016ee:	3b18      	subs	r3, #24
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00e fab9 	bl	800fc68 <f_closedir>
    }
    free(path);
 80016f6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80016fa:	f103 031c 	add.w	r3, r3, #28
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	f00f f9e4 	bl	8010acc <free>
    return fresult;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <Scan_USB+0x1a0>)
 8001706:	781b      	ldrb	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200003b0 	.word	0x200003b0
 8001718:	200003b4 	.word	0x200003b4
 800171c:	200003bd 	.word	0x200003bd
 8001720:	08011378 	.word	0x08011378
 8001724:	08011384 	.word	0x08011384
 8001728:	080113a0 	.word	0x080113a0
 800172c:	080113a4 	.word	0x080113a4

08001730 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 800173a:	4924      	ldr	r1, [pc, #144]	; (80017cc <Write_File+0x9c>)
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f00e fb11 	bl	800fd64 <f_stat>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <Write_File+0xa0>)
 8001748:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <Write_File+0xa0>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00a      	beq.n	8001768 <Write_File+0x38>
	{
		char *buf = malloc(100*sizeof(char));
 8001752:	2064      	movs	r0, #100	; 0x64
 8001754:	f00f f9b2 	bl	8010abc <malloc>
 8001758:	4603      	mov	r3, r0
 800175a:	60bb      	str	r3, [r7, #8]
	    free(buf);
 800175c:	68b8      	ldr	r0, [r7, #8]
 800175e:	f00f f9b5 	bl	8010acc <free>
	    return fresult;
 8001762:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <Write_File+0xa0>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	e02d      	b.n	80017c4 <Write_File+0x94>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8001768:	2202      	movs	r2, #2
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4819      	ldr	r0, [pc, #100]	; (80017d4 <Write_File+0xa4>)
 800176e:	f00d fb23 	bl	800edb8 <f_open>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <Write_File+0xa0>)
 8001778:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <Write_File+0xa0>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00a      	beq.n	8001798 <Write_File+0x68>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001782:	2064      	movs	r0, #100	; 0x64
 8001784:	f00f f99a 	bl	8010abc <malloc>
 8001788:	4603      	mov	r3, r0
 800178a:	60fb      	str	r3, [r7, #12]
	        free(buf);
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f00f f99d 	bl	8010acc <free>
	        return fresult;
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <Write_File+0xa0>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	e015      	b.n	80017c4 <Write_File+0x94>
	    }

	    else
	    {
	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8001798:	6838      	ldr	r0, [r7, #0]
 800179a:	f7fe fd1f 	bl	80001dc <strlen>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <Write_File+0xa8>)
 80017a2:	6839      	ldr	r1, [r7, #0]
 80017a4:	480b      	ldr	r0, [pc, #44]	; (80017d4 <Write_File+0xa4>)
 80017a6:	f00d fe41 	bl	800f42c <f_write>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <Write_File+0xa0>)
 80017b0:	701a      	strb	r2, [r3, #0]


	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 80017b2:	4808      	ldr	r0, [pc, #32]	; (80017d4 <Write_File+0xa4>)
 80017b4:	f00e f98b 	bl	800face <f_close>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <Write_File+0xa0>)
 80017be:	701a      	strb	r2, [r3, #0]

	    }
	    return fresult;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <Write_File+0xa0>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
	}
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200003b4 	.word	0x200003b4
 80017d0:	200003b0 	.word	0x200003b0
 80017d4:	20000748 	.word	0x20000748
 80017d8:	200003ac 	.word	0x200003ac

080017dc <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 80017e4:	4915      	ldr	r1, [pc, #84]	; (800183c <Create_File+0x60>)
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f00e fabc 	bl	800fd64 <f_stat>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <Create_File+0x64>)
 80017f2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <Create_File+0x64>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <Create_File+0x26>
	{
	    return fresult;
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <Create_File+0x64>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	e018      	b.n	8001834 <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001802:	220b      	movs	r2, #11
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	480f      	ldr	r0, [pc, #60]	; (8001844 <Create_File+0x68>)
 8001808:	f00d fad6 	bl	800edb8 <f_open>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <Create_File+0x64>)
 8001812:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <Create_File+0x64>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <Create_File+0x46>
		{
		    return fresult;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <Create_File+0x64>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	e008      	b.n	8001834 <Create_File+0x58>
		}


		fresult = f_close(&USBHFile);
 8001822:	4808      	ldr	r0, [pc, #32]	; (8001844 <Create_File+0x68>)
 8001824:	f00e f953 	bl	800face <f_close>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <Create_File+0x64>)
 800182e:	701a      	strb	r2, [r3, #0]
	}
    return fresult;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <Create_File+0x64>)
 8001832:	781b      	ldrb	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200003b4 	.word	0x200003b4
 8001840:	200003b0 	.word	0x200003b0
 8001844:	20000748 	.word	0x20000748

08001848 <Check_USB_Details>:
    fresult = f_mkdir(name);
    return fresult;
}

void Check_USB_Details (void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 800184c:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <Check_USB_Details+0x8c>)
 800184e:	4922      	ldr	r1, [pc, #136]	; (80018d8 <Check_USB_Details+0x90>)
 8001850:	4822      	ldr	r0, [pc, #136]	; (80018dc <Check_USB_Details+0x94>)
 8001852:	f00e fafb 	bl	800fe4c <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <Check_USB_Details+0x8c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185e:	3314      	adds	r3, #20
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	1e9a      	subs	r2, r3, #2
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <Check_USB_Details+0x8c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186c:	3302      	adds	r3, #2
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	fb03 f302 	mul.w	r3, r3, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fdfb 	bl	8000470 <__aeabi_ui2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <Check_USB_Details+0x98>)
 8001880:	f7fe fe70 	bl	8000564 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff f92c 	bl	8000ae8 <__aeabi_d2uiz>
 8001890:	4603      	mov	r3, r0
 8001892:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <Check_USB_Details+0x9c>)
 8001894:	6013      	str	r3, [r2, #0]

    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <Check_USB_Details+0x8c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189e:	3302      	adds	r3, #2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <Check_USB_Details+0x90>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fb03 f302 	mul.w	r3, r3, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fddf 	bl	8000470 <__aeabi_ui2d>
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <Check_USB_Details+0x98>)
 80018b8:	f7fe fe54 	bl	8000564 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f910 	bl	8000ae8 <__aeabi_d2uiz>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <Check_USB_Details+0xa0>)
 80018cc:	6013      	str	r3, [r2, #0]

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200003a4 	.word	0x200003a4
 80018d8:	2000039c 	.word	0x2000039c
 80018dc:	080113d4 	.word	0x080113d4
 80018e0:	3fe00000 	.word	0x3fe00000
 80018e4:	200003d4 	.word	0x200003d4
 80018e8:	200003a8 	.word	0x200003a8

080018ec <getTime>:
#include "RTC_driver.h"
#include "light_driver.h"


void getTime(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
 80018f0:	2200      	movs	r2, #0
 80018f2:	4905      	ldr	r1, [pc, #20]	; (8001908 <getTime+0x1c>)
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <getTime+0x20>)
 80018f6:	f005 faf7 	bl	8006ee8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate,RTC_FORMAT_BIN);
 80018fa:	2200      	movs	r2, #0
 80018fc:	4904      	ldr	r1, [pc, #16]	; (8001910 <getTime+0x24>)
 80018fe:	4803      	ldr	r0, [pc, #12]	; (800190c <getTime+0x20>)
 8001900:	f005 fbe4 	bl	80070cc <HAL_RTC_GetDate>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000108 	.word	0x20000108
 800190c:	200004b0 	.word	0x200004b0
 8001910:	20000114 	.word	0x20000114

08001914 <setTimeDate>:

void setTimeDate(uint8_t month, uint8_t day, uint8_t year, uint8_t hours, uint8_t min, uint8_t sec)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4604      	mov	r4, r0
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4623      	mov	r3, r4
 8001924:	71fb      	strb	r3, [r7, #7]
 8001926:	4603      	mov	r3, r0
 8001928:	71bb      	strb	r3, [r7, #6]
 800192a:	460b      	mov	r3, r1
 800192c:	717b      	strb	r3, [r7, #5]
 800192e:	4613      	mov	r3, r2
 8001930:	713b      	strb	r3, [r7, #4]
	sTime.Hours = hours;
 8001932:	4a19      	ldr	r2, [pc, #100]	; (8001998 <setTimeDate+0x84>)
 8001934:	793b      	ldrb	r3, [r7, #4]
 8001936:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 8001938:	4a17      	ldr	r2, [pc, #92]	; (8001998 <setTimeDate+0x84>)
 800193a:	7e3b      	ldrb	r3, [r7, #24]
 800193c:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 800193e:	4a16      	ldr	r2, [pc, #88]	; (8001998 <setTimeDate+0x84>)
 8001940:	7f3b      	ldrb	r3, [r7, #28]
 8001942:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <setTimeDate+0x84>)
 8001946:	2200      	movs	r2, #0
 8001948:	605a      	str	r2, [r3, #4]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <setTimeDate+0x84>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
	if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 8001950:	2201      	movs	r2, #1
 8001952:	4911      	ldr	r1, [pc, #68]	; (8001998 <setTimeDate+0x84>)
 8001954:	4811      	ldr	r0, [pc, #68]	; (800199c <setTimeDate+0x88>)
 8001956:	f005 fa11 	bl	8006d7c <HAL_RTC_SetTime>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <setTimeDate+0x50>
 8001960:	f000 fe4c 	bl	80025fc <Error_Handler>

	sDate.WeekDay = 0x01;
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <setTimeDate+0x8c>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
	sDate.Month = month;
 800196a:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <setTimeDate+0x8c>)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	7053      	strb	r3, [r2, #1]
	sDate.Date = day;
 8001970:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <setTimeDate+0x8c>)
 8001972:	79bb      	ldrb	r3, [r7, #6]
 8001974:	7093      	strb	r3, [r2, #2]
	sDate.Year = year;
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <setTimeDate+0x8c>)
 8001978:	797b      	ldrb	r3, [r7, #5]
 800197a:	70d3      	strb	r3, [r2, #3]
	if(HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 800197c:	2201      	movs	r2, #1
 800197e:	4908      	ldr	r1, [pc, #32]	; (80019a0 <setTimeDate+0x8c>)
 8001980:	4806      	ldr	r0, [pc, #24]	; (800199c <setTimeDate+0x88>)
 8001982:	f005 fb03 	bl	8006f8c <HAL_RTC_SetDate>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <setTimeDate+0x7c>
 800198c:	f000 fe36 	bl	80025fc <Error_Handler>
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	20000108 	.word	0x20000108
 800199c:	200004b0 	.word	0x200004b0
 80019a0:	20000114 	.word	0x20000114

080019a4 <getMedianNum>:
#include "TDS_driver.h"
#include "main.h"
#include "sensors.h"

int getMedianNum(int bArray[], int iFilterLen)
{
 80019a4:	b4b0      	push	{r4, r5, r7}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	466b      	mov	r3, sp
 80019b0:	461d      	mov	r5, r3
      int bTab[iFilterLen];
 80019b2:	683c      	ldr	r4, [r7, #0]
 80019b4:	1e63      	subs	r3, r4, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	4623      	mov	r3, r4
 80019ba:	4618      	mov	r0, r3
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	014b      	lsls	r3, r1, #5
 80019ca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019ce:	0142      	lsls	r2, r0, #5
 80019d0:	4623      	mov	r3, r4
 80019d2:	4618      	mov	r0, r3
 80019d4:	f04f 0100 	mov.w	r1, #0
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	014b      	lsls	r3, r1, #5
 80019e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019e6:	0142      	lsls	r2, r0, #5
 80019e8:	4623      	mov	r3, r4
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	3307      	adds	r3, #7
 80019ee:	08db      	lsrs	r3, r3, #3
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	ebad 0d03 	sub.w	sp, sp, r3
 80019f6:	466b      	mov	r3, sp
 80019f8:	3303      	adds	r3, #3
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	60bb      	str	r3, [r7, #8]
      for (char i = 0; i<iFilterLen; i++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	74fb      	strb	r3, [r7, #19]
 8001a04:	e00b      	b.n	8001a1e <getMedianNum+0x7a>
      bTab[i] = bArray[i];
 8001a06:	7cfb      	ldrb	r3, [r7, #19]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	7cfa      	ldrb	r2, [r7, #19]
 8001a10:	6819      	ldr	r1, [r3, #0]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (char i = 0; i<iFilterLen; i++)
 8001a18:	7cfb      	ldrb	r3, [r7, #19]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	74fb      	strb	r3, [r7, #19]
 8001a1e:	7cfb      	ldrb	r3, [r7, #19]
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	dcef      	bgt.n	8001a06 <getMedianNum+0x62>
      int i, j, bTemp;
      for (j = 0; j < iFilterLen - 1; j++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	e02e      	b.n	8001a8a <getMedianNum+0xe6>
      {
      for (i = 0; i < iFilterLen - j - 1; i++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e021      	b.n	8001a76 <getMedianNum+0xd2>
          {
        if (bTab[i] > bTab[i + 1])
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	1c59      	adds	r1, r3, #1
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dd13      	ble.n	8001a70 <getMedianNum+0xcc>
            {
        bTemp = bTab[i];
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a50:	61fb      	str	r3, [r7, #28]
            bTab[i] = bTab[i + 1];
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        bTab[i + 1] = bTemp;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	69f9      	ldr	r1, [r7, #28]
 8001a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (i = 0; i < iFilterLen - j - 1; i++)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3301      	adds	r3, #1
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dbd6      	blt.n	8001a32 <getMedianNum+0x8e>
      for (j = 0; j < iFilterLen - 1; j++)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	3301      	adds	r3, #1
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbcb      	blt.n	8001a2c <getMedianNum+0x88>
         }
      }
      }
      if ((iFilterLen & 1) > 0)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	dd0a      	ble.n	8001ab4 <getMedianNum+0x110>
    bTemp = bTab[(iFilterLen - 1) / 2];
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	0fda      	lsrs	r2, r3, #31
 8001aa4:	4413      	add	r3, r2
 8001aa6:	105b      	asrs	r3, r3, #1
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	e014      	b.n	8001ade <getMedianNum+0x13a>
      else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	0fda      	lsrs	r2, r3, #31
 8001ab8:	4413      	add	r3, r2
 8001aba:	105b      	asrs	r3, r3, #1
 8001abc:	461a      	mov	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	0fd9      	lsrs	r1, r3, #31
 8001ac8:	440b      	add	r3, r1
 8001aca:	105b      	asrs	r3, r3, #1
 8001acc:	1e59      	subs	r1, r3, #1
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	0fda      	lsrs	r2, r3, #31
 8001ad8:	4413      	add	r3, r2
 8001ada:	105b      	asrs	r3, r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
      return bTemp;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	46ad      	mov	sp, r5
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bcb0      	pop	{r4, r5, r7}
 8001aea:	4770      	bx	lr

08001aec <fanOn>:

float system_fan_sp = 5.5;
float plant_fan_sp = 3.5;
float heat_cool_fan_sp = 3.5; // set default fan speed values
void fanOn()
{
 8001aec:	b598      	push	{r3, r4, r7, lr}
 8001aee:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// start heater cooler fan control
 8001af0:	2100      	movs	r1, #0
 8001af2:	482f      	ldr	r0, [pc, #188]	; (8001bb0 <fanOn+0xc4>)
 8001af4:	f005 fe6e 	bl	80077d4 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <fanOn+0xc8>)
 8001afa:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;	// sets the fan speed
 8001b00:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <fanOn+0xc8>)
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f915 	bl	8000d34 <__aeabi_ui2f>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <fanOn+0xcc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f7ff fa1a 	bl	8000f4c <__aeabi_fdiv>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4c26      	ldr	r4, [pc, #152]	; (8001bb4 <fanOn+0xc8>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fb4d 	bl	80011bc <__aeabi_f2uiz>
 8001b22:	4603      	mov	r3, r0
 8001b24:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 8001b26:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <fanOn+0xc8>)
 8001b28:	f245 0214 	movw	r2, #20500	; 0x5014
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// start system fan control
 8001b2e:	2108      	movs	r1, #8
 8001b30:	481f      	ldr	r0, [pc, #124]	; (8001bb0 <fanOn+0xc4>)
 8001b32:	f005 fe4f 	bl	80077d4 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <fanOn+0xc8>)
 8001b38:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR3 = (TIM1->ARR)/system_fan_sp;		// sets the fan speed
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <fanOn+0xc8>)
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f8f6 	bl	8000d34 <__aeabi_ui2f>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <fanOn+0xd0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4610      	mov	r0, r2
 8001b52:	f7ff f9fb 	bl	8000f4c <__aeabi_fdiv>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4c16      	ldr	r4, [pc, #88]	; (8001bb4 <fanOn+0xc8>)
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fb2e 	bl	80011bc <__aeabi_f2uiz>
 8001b60:	4603      	mov	r3, r0
 8001b62:	63e3      	str	r3, [r4, #60]	; 0x3c
   TIM1->CNT = 20500;
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <fanOn+0xc8>)
 8001b66:	f245 0214 	movw	r2, #20500	; 0x5014
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);	// start plant fan control
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <fanOn+0xd4>)
 8001b70:	f005 fe30 	bl	80077d4 <HAL_TIM_PWM_Start>
   TIM10->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <fanOn+0xd8>)
 8001b76:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM10->CCR1 = (TIM10->ARR)/plant_fan_sp;		// sets the fan speed
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <fanOn+0xd8>)
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f8d7 	bl	8000d34 <__aeabi_ui2f>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <fanOn+0xdc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f7ff f9dc 	bl	8000f4c <__aeabi_fdiv>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4c0b      	ldr	r4, [pc, #44]	; (8001bc4 <fanOn+0xd8>)
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fb0f 	bl	80011bc <__aeabi_f2uiz>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6363      	str	r3, [r4, #52]	; 0x34
   TIM10->CNT = 20500;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <fanOn+0xd8>)
 8001ba4:	f245 0214 	movw	r2, #20500	; 0x5014
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001baa:	bf00      	nop
 8001bac:	bd98      	pop	{r3, r4, r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200004e4 	.word	0x200004e4
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000468 	.word	0x20000468
 8001bc4:	40014400 	.word	0x40014400
 8001bc8:	20000004 	.word	0x20000004

08001bcc <systemControl>:
extern void Write_File();
extern void MX_USB_HOST_Process(void);
double pH_up_dose = 0, pH_down_dose = 0, nutrient_dose = 0;
float nutrient_set_point = 500.0, pH_set_point = 6.5, water_temp_set_point = 20.0, water_temp = 0, TDS = 0, pH = 0;
void systemControl()
{
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af02      	add	r7, sp, #8
	int runOnce = 1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	607b      	str	r3, [r7, #4]
	setTimeDate(0x01, 0x08, 0x22, 0x19, 0x09, 0x00); // MUST BE HEX BUT NOT CONVERTED i,e,(the 22 day of the month is represented as 0x22 NOT 0x16) (month, day, year, hours, min, sec)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	2309      	movs	r3, #9
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	2319      	movs	r3, #25
 8001be0:	2222      	movs	r2, #34	; 0x22
 8001be2:	2108      	movs	r1, #8
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff fe95 	bl	8001914 <setTimeDate>
	setLightCyle(19, 9, 19, 10); 			   		 // MUST BE INT (start hour, start min, start sec, end hour, end min)
 8001bea:	230a      	movs	r3, #10
 8001bec:	2213      	movs	r2, #19
 8001bee:	2109      	movs	r1, #9
 8001bf0:	2013      	movs	r0, #19
 8001bf2:	f000 f8a1 	bl	8001d38 <setLightCyle>
	fanOn();
 8001bf6:	f7ff ff79 	bl	8001aec <fanOn>
	Create_File("/calibration_data.txt");
 8001bfa:	4835      	ldr	r0, [pc, #212]	; (8001cd0 <systemControl+0x104>)
 8001bfc:	f7ff fdee 	bl	80017dc <Create_File>
	Write_File("/calibration_data.txt","Calibration data:\n");
 8001c00:	4934      	ldr	r1, [pc, #208]	; (8001cd4 <systemControl+0x108>)
 8001c02:	4833      	ldr	r0, [pc, #204]	; (8001cd0 <systemControl+0x104>)
 8001c04:	f7ff fd94 	bl	8001730 <Write_File>
	while (1)
	{
		MX_USB_HOST_Process();
 8001c08:	f00e fc16 	bl	8010438 <MX_USB_HOST_Process>

						    // check if its time to turn lights on or off

		water_temp	  = readWaterTemp();
 8001c0c:	f001 f9b4 	bl	8002f78 <readWaterTemp>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe ff86 	bl	8000b28 <__aeabi_d2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a2e      	ldr	r2, [pc, #184]	; (8001cd8 <systemControl+0x10c>)
 8001c20:	6013      	str	r3, [r2, #0]
		TDS 		  = readWaterTDS();
 8001c22:	f001 fa15 	bl	8003050 <readWaterTDS>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4a2c      	ldr	r2, [pc, #176]	; (8001cdc <systemControl+0x110>)
 8001c2a:	6013      	str	r3, [r2, #0]
		pH 		 	  = readPH();
 8001c2c:	f001 fb44 	bl	80032b8 <readPH>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4a2b      	ldr	r2, [pc, #172]	; (8001ce0 <systemControl+0x114>)
 8001c34:	6013      	str	r3, [r2, #0]

   		pH_up_dose 	  = calcPhUpDose(TDS,pH);
 8001c36:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <systemControl+0x110>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a29      	ldr	r2, [pc, #164]	; (8001ce0 <systemControl+0x114>)
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 fd0d 	bl	8002660 <calcPhUpDose>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4926      	ldr	r1, [pc, #152]	; (8001ce4 <systemControl+0x118>)
 8001c4c:	e9c1 2300 	strd	r2, r3, [r1]
		pH_down_dose  = calcPhDownDose(TDS,pH);
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <systemControl+0x110>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <systemControl+0x114>)
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fd10 	bl	8002680 <calcPhDownDose>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4920      	ldr	r1, [pc, #128]	; (8001ce8 <systemControl+0x11c>)
 8001c66:	e9c1 2300 	strd	r2, r3, [r1]
        nutrient_dose = calcNutrientDose(TDS,pH);
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <systemControl+0x110>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <systemControl+0x114>)
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fd13 	bl	80026a0 <calcNutrientDose>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	491b      	ldr	r1, [pc, #108]	; (8001cec <systemControl+0x120>)
 8001c80:	e9c1 2300 	strd	r2, r3, [r1]

    //	Update_File("/calibration_data.txt",water_temp,TDS,pH,"\n");
    	checkLightCycle();
 8001c84:	f000 f87c 	bl	8001d80 <checkLightCycle>

		if(runOnce != 0)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0bc      	beq.n	8001c08 <systemControl+0x3c>
		{
			doseWater(pH_down_dose, pH_up_dose, nutrient_dose);		// step the pump motors (pHDown,pHup,nutrient_dose)
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <systemControl+0x11c>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7fe ff46 	bl	8000b28 <__aeabi_d2f>
 8001c9c:	4604      	mov	r4, r0
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <systemControl+0x118>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe ff3e 	bl	8000b28 <__aeabi_d2f>
 8001cac:	4605      	mov	r5, r0
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <systemControl+0x120>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7fe ff36 	bl	8000b28 <__aeabi_d2f>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f000 fc9f 	bl	8002606 <doseWater>
			runOnce = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
		MX_USB_HOST_Process();
 8001ccc:	e79c      	b.n	8001c08 <systemControl+0x3c>
 8001cce:	bf00      	nop
 8001cd0:	080113d8 	.word	0x080113d8
 8001cd4:	080113f0 	.word	0x080113f0
 8001cd8:	200000e0 	.word	0x200000e0
 8001cdc:	200000e4 	.word	0x200000e4
 8001ce0:	200000e8 	.word	0x200000e8
 8001ce4:	200000c8 	.word	0x200000c8
 8001ce8:	200000d0 	.word	0x200000d0
 8001cec:	200000d8 	.word	0x200000d8

08001cf0 <lightOn>:
RTC_TimeTypeDef light_off_time = {0};
RTC_DateTypeDef light_off_date = {0};
int day_or_night = 0; // 0=night 1=day

void lightOn()
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,grow_light_Pin,GPIO_PIN_SET);		// turn on grow light
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cfa:	4804      	ldr	r0, [pc, #16]	; (8001d0c <lightOn+0x1c>)
 8001cfc:	f002 fd2b 	bl	8004756 <HAL_GPIO_WritePin>
	day_or_night = 1;											// it just turned to daytime so set day status
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <lightOn+0x20>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	20000104 	.word	0x20000104

08001d14 <lightOff>:

void lightOff()
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,grow_light_Pin,GPIO_PIN_RESET);		// turn off grow light
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d1e:	4804      	ldr	r0, [pc, #16]	; (8001d30 <lightOff+0x1c>)
 8001d20:	f002 fd19 	bl	8004756 <HAL_GPIO_WritePin>
	day_or_night = 0;											// it just turned to night time so set night status
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <lightOff+0x20>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	20000104 	.word	0x20000104

08001d38 <setLightCyle>:

void setLightCyle(uint8_t start_hour, uint8_t start_min, uint8_t end_hours, uint8_t end_min)
{
 8001d38:	b490      	push	{r4, r7}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4604      	mov	r4, r0
 8001d40:	4608      	mov	r0, r1
 8001d42:	4611      	mov	r1, r2
 8001d44:	461a      	mov	r2, r3
 8001d46:	4623      	mov	r3, r4
 8001d48:	71fb      	strb	r3, [r7, #7]
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71bb      	strb	r3, [r7, #6]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	717b      	strb	r3, [r7, #5]
 8001d52:	4613      	mov	r3, r2
 8001d54:	713b      	strb	r3, [r7, #4]
	light_on_time.Hours = start_hour;
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <setLightCyle+0x40>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	7013      	strb	r3, [r2, #0]
	light_on_time.Minutes = start_min;
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <setLightCyle+0x40>)
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	7053      	strb	r3, [r2, #1]

	light_off_time.Hours = end_hours;
 8001d62:	4a06      	ldr	r2, [pc, #24]	; (8001d7c <setLightCyle+0x44>)
 8001d64:	797b      	ldrb	r3, [r7, #5]
 8001d66:	7013      	strb	r3, [r2, #0]
	light_off_time.Minutes = end_min;
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <setLightCyle+0x44>)
 8001d6a:	793b      	ldrb	r3, [r7, #4]
 8001d6c:	7053      	strb	r3, [r2, #1]
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc90      	pop	{r4, r7}
 8001d76:	4770      	bx	lr
 8001d78:	200000ec 	.word	0x200000ec
 8001d7c:	200000f8 	.word	0x200000f8

08001d80 <checkLightCycle>:

void checkLightCycle() // checks to see if its time to turn lights on or off
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	getTime();		   // get the current system time sets global variables sTime and sDate in RTC_driver.c
 8001d84:	f7ff fdb2 	bl	80018ec <getTime>
	if((sTime.Hours == light_on_time.Hours) && (sTime.Minutes == light_on_time.Minutes) && day_or_night == 0)        lightOn();
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <checkLightCycle+0x58>)
 8001d8a:	781a      	ldrb	r2, [r3, #0]
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <checkLightCycle+0x5c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d10c      	bne.n	8001dae <checkLightCycle+0x2e>
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <checkLightCycle+0x58>)
 8001d96:	785a      	ldrb	r2, [r3, #1]
 8001d98:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <checkLightCycle+0x5c>)
 8001d9a:	785b      	ldrb	r3, [r3, #1]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d106      	bne.n	8001dae <checkLightCycle+0x2e>
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <checkLightCycle+0x60>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <checkLightCycle+0x2e>
 8001da8:	f7ff ffa2 	bl	8001cf0 <lightOn>
	else if((sTime.Hours == light_off_time.Hours) && (sTime.Minutes == light_off_time.Minutes) && day_or_night == 1) lightOff();
}
 8001dac:	e011      	b.n	8001dd2 <checkLightCycle+0x52>
	else if((sTime.Hours == light_off_time.Hours) && (sTime.Minutes == light_off_time.Minutes) && day_or_night == 1) lightOff();
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <checkLightCycle+0x58>)
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <checkLightCycle+0x64>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d10b      	bne.n	8001dd2 <checkLightCycle+0x52>
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <checkLightCycle+0x58>)
 8001dbc:	785a      	ldrb	r2, [r3, #1]
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <checkLightCycle+0x64>)
 8001dc0:	785b      	ldrb	r3, [r3, #1]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d105      	bne.n	8001dd2 <checkLightCycle+0x52>
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <checkLightCycle+0x60>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <checkLightCycle+0x52>
 8001dce:	f7ff ffa1 	bl	8001d14 <lightOff>
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000108 	.word	0x20000108
 8001ddc:	200000ec 	.word	0x200000ec
 8001de0:	20000104 	.word	0x20000104
 8001de4:	200000f8 	.word	0x200000f8

08001de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dec:	f001 fdb4 	bl	8003958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df0:	f000 f817 	bl	8001e22 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df4:	f000 fb3c 	bl	8002470 <MX_GPIO_Init>
  MX_ADC2_Init();
 8001df8:	f000 f874 	bl	8001ee4 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001dfc:	f000 f96a 	bl	80020d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e00:	f000 fa14 	bl	800222c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001e04:	f000 fa5e 	bl	80022c4 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001e08:	f000 faaa 	bl	8002360 <MX_TIM10_Init>
  MX_RTC_Init();
 8001e0c:	f000 f8d0 	bl	8001fb0 <MX_RTC_Init>
  MX_TIM12_Init();
 8001e10:	f000 faf4 	bl	80023fc <MX_TIM12_Init>
  MX_FATFS_Init();
 8001e14:	f007 fa94 	bl	8009340 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001e18:	f00e fae8 	bl	80103ec <MX_USB_HOST_Init>


  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);*/
  while (1)
  {
	  systemControl();
 8001e1c:	f7ff fed6 	bl	8001bcc <systemControl>
 8001e20:	e7fc      	b.n	8001e1c <main+0x34>

08001e22 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b096      	sub	sp, #88	; 0x58
 8001e26:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e2c:	2230      	movs	r2, #48	; 0x30
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f00e fe61 	bl	8010af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
 8001e44:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e46:	463b      	mov	r3, r7
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e54:	230a      	movs	r3, #10
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e60:	2301      	movs	r3, #1
 8001e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e64:	2302      	movs	r3, #2
 8001e66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001e70:	23d8      	movs	r3, #216	; 0xd8
 8001e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001e74:	2306      	movs	r3, #6
 8001e76:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001e78:	2309      	movs	r3, #9
 8001e7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 f9ff 	bl	8006284 <HAL_RCC_OscConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001e8c:	f000 fbb6 	bl	80025fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e90:	230f      	movs	r3, #15
 8001e92:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e94:	2302      	movs	r3, #2
 8001e96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ea0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2102      	movs	r1, #2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f004 fc38 	bl	8006724 <HAL_RCC_ClockConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001eba:	f000 fb9f 	bl	80025fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ec8:	463b      	mov	r3, r7
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 fdd6 	bl	8006a7c <HAL_RCCEx_PeriphCLKConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001ed6:	f000 fb91 	bl	80025fc <Error_Handler>
  }
}
 8001eda:	bf00      	nop
 8001edc:	3758      	adds	r7, #88	; 0x58
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eea:	463b      	mov	r3, r7
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC2_Init 1 */
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	761a      	strb	r2, [r3, #24]
  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001efe:	4a2a      	ldr	r2, [pc, #168]	; (8001fa8 <MX_ADC2_Init+0xc4>)
 8001f00:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f02:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001f0e:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001f14:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f28:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f30:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <MX_ADC2_Init+0xc8>)
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001f4e:	4815      	ldr	r0, [pc, #84]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f50:	f001 fd94 	bl	8003a7c <HAL_ADC_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8001f5a:	f000 fb4f 	bl	80025fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f70:	f001 ff08 	bl	8003d84 <HAL_ADC_ConfigChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_ADC2_Init+0x9a>
  {
    Error_Handler();
 8001f7a:	f000 fb3f 	bl	80025fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001f7e:	2305      	movs	r3, #5
 8001f80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f82:	2302      	movs	r3, #2
 8001f84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f86:	463b      	mov	r3, r7
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4806      	ldr	r0, [pc, #24]	; (8001fa4 <MX_ADC2_Init+0xc0>)
 8001f8c:	f001 fefa 	bl	8003d84 <HAL_ADC_ConfigChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001f96:	f000 fb31 	bl	80025fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000420 	.word	0x20000420
 8001fa8:	40012100 	.word	0x40012100
 8001fac:	0f000001 	.word	0x0f000001

08001fb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08c      	sub	sp, #48	; 0x30
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
 8001fd4:	615a      	str	r2, [r3, #20]
 8001fd6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001fd8:	4b3c      	ldr	r3, [pc, #240]	; (80020cc <MX_RTC_Init+0x11c>)
 8001fda:	4a3d      	ldr	r2, [pc, #244]	; (80020d0 <MX_RTC_Init+0x120>)
 8001fdc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001fde:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <MX_RTC_Init+0x11c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001fe4:	4b39      	ldr	r3, [pc, #228]	; (80020cc <MX_RTC_Init+0x11c>)
 8001fe6:	227f      	movs	r2, #127	; 0x7f
 8001fe8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001fea:	4b38      	ldr	r3, [pc, #224]	; (80020cc <MX_RTC_Init+0x11c>)
 8001fec:	22ff      	movs	r2, #255	; 0xff
 8001fee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <MX_RTC_Init+0x11c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ff6:	4b35      	ldr	r3, [pc, #212]	; (80020cc <MX_RTC_Init+0x11c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ffc:	4b33      	ldr	r3, [pc, #204]	; (80020cc <MX_RTC_Init+0x11c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002002:	4832      	ldr	r0, [pc, #200]	; (80020cc <MX_RTC_Init+0x11c>)
 8002004:	f004 fe30 	bl	8006c68 <HAL_RTC_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800200e:	f000 faf5 	bl	80025fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0x0;
 8002018:	2300      	movs	r3, #0
 800201a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0x0;
 800201e:	2300      	movs	r3, #0
 8002020:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002024:	2300      	movs	r3, #0
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002028:	2300      	movs	r3, #0
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800202c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002030:	2201      	movs	r2, #1
 8002032:	4619      	mov	r1, r3
 8002034:	4825      	ldr	r0, [pc, #148]	; (80020cc <MX_RTC_Init+0x11c>)
 8002036:	f004 fea1 	bl	8006d7c <HAL_RTC_SetTime>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002040:	f000 fadc 	bl	80025fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002044:	2301      	movs	r3, #1
 8002046:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 0x1;
 8002050:	2301      	movs	r3, #1
 8002052:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 0x0;
 8002056:	2300      	movs	r3, #0
 8002058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800205c:	f107 0320 	add.w	r3, r7, #32
 8002060:	2201      	movs	r2, #1
 8002062:	4619      	mov	r1, r3
 8002064:	4819      	ldr	r0, [pc, #100]	; (80020cc <MX_RTC_Init+0x11c>)
 8002066:	f004 ff91 	bl	8006f8c <HAL_RTC_SetDate>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8002070:	f000 fac4 	bl	80025fc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002074:	2300      	movs	r3, #0
 8002076:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002078:	2300      	movs	r3, #0
 800207a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800207c:	2300      	movs	r3, #0
 800207e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002090:	2301      	movs	r3, #1
 8002092:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8002094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002098:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	2201      	movs	r2, #1
 800209e:	4619      	mov	r1, r3
 80020a0:	480a      	ldr	r0, [pc, #40]	; (80020cc <MX_RTC_Init+0x11c>)
 80020a2:	f005 f862 	bl	800716a <HAL_RTC_SetAlarm>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 80020ac:	f000 faa6 	bl	80025fc <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	4805      	ldr	r0, [pc, #20]	; (80020cc <MX_RTC_Init+0x11c>)
 80020b6:	f005 f9ec 	bl	8007492 <HAL_RTCEx_SetWakeUpTimer>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 80020c0:	f000 fa9c 	bl	80025fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	3730      	adds	r7, #48	; 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200004b0 	.word	0x200004b0
 80020d0:	40002800 	.word	0x40002800

080020d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b096      	sub	sp, #88	; 0x58
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]
 8002102:	615a      	str	r2, [r3, #20]
 8002104:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	2220      	movs	r2, #32
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f00e fcf3 	bl	8010af8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002112:	4b44      	ldr	r3, [pc, #272]	; (8002224 <MX_TIM1_Init+0x150>)
 8002114:	4a44      	ldr	r2, [pc, #272]	; (8002228 <MX_TIM1_Init+0x154>)
 8002116:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002118:	4b42      	ldr	r3, [pc, #264]	; (8002224 <MX_TIM1_Init+0x150>)
 800211a:	2200      	movs	r2, #0
 800211c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b41      	ldr	r3, [pc, #260]	; (8002224 <MX_TIM1_Init+0x150>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002124:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <MX_TIM1_Init+0x150>)
 8002126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800212a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212c:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <MX_TIM1_Init+0x150>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002132:	4b3c      	ldr	r3, [pc, #240]	; (8002224 <MX_TIM1_Init+0x150>)
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002138:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <MX_TIM1_Init+0x150>)
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800213e:	4839      	ldr	r0, [pc, #228]	; (8002224 <MX_TIM1_Init+0x150>)
 8002140:	f005 fa3b 	bl	80075ba <HAL_TIM_Base_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800214a:	f000 fa57 	bl	80025fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800214e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002152:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002154:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002158:	4619      	mov	r1, r3
 800215a:	4832      	ldr	r0, [pc, #200]	; (8002224 <MX_TIM1_Init+0x150>)
 800215c:	f005 fcc0 	bl	8007ae0 <HAL_TIM_ConfigClockSource>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002166:	f000 fa49 	bl	80025fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800216a:	482e      	ldr	r0, [pc, #184]	; (8002224 <MX_TIM1_Init+0x150>)
 800216c:	f005 fada 	bl	8007724 <HAL_TIM_PWM_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002176:	f000 fa41 	bl	80025fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002186:	4619      	mov	r1, r3
 8002188:	4826      	ldr	r0, [pc, #152]	; (8002224 <MX_TIM1_Init+0x150>)
 800218a:	f006 f871 	bl	8008270 <HAL_TIMEx_MasterConfigSynchronization>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002194:	f000 fa32 	bl	80025fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002198:	2360      	movs	r3, #96	; 0x60
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021a4:	2300      	movs	r3, #0
 80021a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80021a8:	2304      	movs	r3, #4
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021b0:	2300      	movs	r3, #0
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b8:	2200      	movs	r2, #0
 80021ba:	4619      	mov	r1, r3
 80021bc:	4819      	ldr	r0, [pc, #100]	; (8002224 <MX_TIM1_Init+0x150>)
 80021be:	f005 fbd1 	bl	8007964 <HAL_TIM_PWM_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80021c8:	f000 fa18 	bl	80025fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	2208      	movs	r2, #8
 80021d2:	4619      	mov	r1, r3
 80021d4:	4813      	ldr	r0, [pc, #76]	; (8002224 <MX_TIM1_Init+0x150>)
 80021d6:	f005 fbc5 	bl	8007964 <HAL_TIM_PWM_ConfigChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80021e0:	f000 fa0c 	bl	80025fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4807      	ldr	r0, [pc, #28]	; (8002224 <MX_TIM1_Init+0x150>)
 8002208:	f006 f8ac 	bl	8008364 <HAL_TIMEx_ConfigBreakDeadTime>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002212:	f000 f9f3 	bl	80025fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002216:	4803      	ldr	r0, [pc, #12]	; (8002224 <MX_TIM1_Init+0x150>)
 8002218:	f001 f95c 	bl	80034d4 <HAL_TIM_MspPostInit>

}
 800221c:	bf00      	nop
 800221e:	3758      	adds	r7, #88	; 0x58
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	200004e4 	.word	0x200004e4
 8002228:	40010000 	.word	0x40010000

0800222c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002232:	f107 0308 	add.w	r3, r7, #8
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002240:	463b      	mov	r3, r7
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <MX_TIM2_Init+0x94>)
 800224a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800224e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <MX_TIM2_Init+0x94>)
 8002252:	2223      	movs	r2, #35	; 0x23
 8002254:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <MX_TIM2_Init+0x94>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 800225c:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <MX_TIM2_Init+0x94>)
 800225e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002262:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <MX_TIM2_Init+0x94>)
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <MX_TIM2_Init+0x94>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002270:	4813      	ldr	r0, [pc, #76]	; (80022c0 <MX_TIM2_Init+0x94>)
 8002272:	f005 f9a2 	bl	80075ba <HAL_TIM_Base_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800227c:	f000 f9be 	bl	80025fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002284:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002286:	f107 0308 	add.w	r3, r7, #8
 800228a:	4619      	mov	r1, r3
 800228c:	480c      	ldr	r0, [pc, #48]	; (80022c0 <MX_TIM2_Init+0x94>)
 800228e:	f005 fc27 	bl	8007ae0 <HAL_TIM_ConfigClockSource>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002298:	f000 f9b0 	bl	80025fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800229c:	2300      	movs	r3, #0
 800229e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022a4:	463b      	mov	r3, r7
 80022a6:	4619      	mov	r1, r3
 80022a8:	4805      	ldr	r0, [pc, #20]	; (80022c0 <MX_TIM2_Init+0x94>)
 80022aa:	f005 ffe1 	bl	8008270 <HAL_TIMEx_MasterConfigSynchronization>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80022b4:	f000 f9a2 	bl	80025fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022b8:	bf00      	nop
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	2000052c 	.word	0x2000052c

080022c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ca:	f107 0308 	add.w	r3, r7, #8
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d8:	463b      	mov	r3, r7
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <MX_TIM4_Init+0x94>)
 80022e2:	4a1e      	ldr	r2, [pc, #120]	; (800235c <MX_TIM4_Init+0x98>)
 80022e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <MX_TIM4_Init+0x94>)
 80022e8:	2223      	movs	r2, #35	; 0x23
 80022ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <MX_TIM4_Init+0x94>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <MX_TIM4_Init+0x94>)
 80022f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80022f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <MX_TIM4_Init+0x94>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <MX_TIM4_Init+0x94>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002306:	4814      	ldr	r0, [pc, #80]	; (8002358 <MX_TIM4_Init+0x94>)
 8002308:	f005 f957 	bl	80075ba <HAL_TIM_Base_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002312:	f000 f973 	bl	80025fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800231a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800231c:	f107 0308 	add.w	r3, r7, #8
 8002320:	4619      	mov	r1, r3
 8002322:	480d      	ldr	r0, [pc, #52]	; (8002358 <MX_TIM4_Init+0x94>)
 8002324:	f005 fbdc 	bl	8007ae0 <HAL_TIM_ConfigClockSource>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800232e:	f000 f965 	bl	80025fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800233a:	463b      	mov	r3, r7
 800233c:	4619      	mov	r1, r3
 800233e:	4806      	ldr	r0, [pc, #24]	; (8002358 <MX_TIM4_Init+0x94>)
 8002340:	f005 ff96 	bl	8008270 <HAL_TIMEx_MasterConfigSynchronization>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800234a:	f000 f957 	bl	80025fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	200003d8 	.word	0x200003d8
 800235c:	40000800 	.word	0x40000800

08002360 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
 8002374:	615a      	str	r2, [r3, #20]
 8002376:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <MX_TIM10_Init+0x94>)
 800237a:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <MX_TIM10_Init+0x98>)
 800237c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <MX_TIM10_Init+0x94>)
 8002380:	2200      	movs	r2, #0
 8002382:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <MX_TIM10_Init+0x94>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <MX_TIM10_Init+0x94>)
 800238c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002390:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <MX_TIM10_Init+0x94>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <MX_TIM10_Init+0x94>)
 800239a:	2280      	movs	r2, #128	; 0x80
 800239c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800239e:	4815      	ldr	r0, [pc, #84]	; (80023f4 <MX_TIM10_Init+0x94>)
 80023a0:	f005 f90b 	bl	80075ba <HAL_TIM_Base_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80023aa:	f000 f927 	bl	80025fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80023ae:	4811      	ldr	r0, [pc, #68]	; (80023f4 <MX_TIM10_Init+0x94>)
 80023b0:	f005 f9b8 	bl	8007724 <HAL_TIM_PWM_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80023ba:	f000 f91f 	bl	80025fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023be:	2360      	movs	r3, #96	; 0x60
 80023c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	2200      	movs	r2, #0
 80023d2:	4619      	mov	r1, r3
 80023d4:	4807      	ldr	r0, [pc, #28]	; (80023f4 <MX_TIM10_Init+0x94>)
 80023d6:	f005 fac5 	bl	8007964 <HAL_TIM_PWM_ConfigChannel>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80023e0:	f000 f90c 	bl	80025fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80023e4:	4803      	ldr	r0, [pc, #12]	; (80023f4 <MX_TIM10_Init+0x94>)
 80023e6:	f001 f875 	bl	80034d4 <HAL_TIM_MspPostInit>

}
 80023ea:	bf00      	nop
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000468 	.word	0x20000468
 80023f8:	40014400 	.word	0x40014400

080023fc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002402:	463b      	mov	r3, r7
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <MX_TIM12_Init+0x6c>)
 8002410:	4a16      	ldr	r2, [pc, #88]	; (800246c <MX_TIM12_Init+0x70>)
 8002412:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1000;
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <MX_TIM12_Init+0x6c>)
 8002416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800241a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <MX_TIM12_Init+0x6c>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 36000;
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <MX_TIM12_Init+0x6c>)
 8002424:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8002428:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <MX_TIM12_Init+0x6c>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <MX_TIM12_Init+0x6c>)
 8002432:	2200      	movs	r2, #0
 8002434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002436:	480c      	ldr	r0, [pc, #48]	; (8002468 <MX_TIM12_Init+0x6c>)
 8002438:	f005 f8bf 	bl	80075ba <HAL_TIM_Base_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8002442:	f000 f8db 	bl	80025fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800244c:	463b      	mov	r3, r7
 800244e:	4619      	mov	r1, r3
 8002450:	4805      	ldr	r0, [pc, #20]	; (8002468 <MX_TIM12_Init+0x6c>)
 8002452:	f005 fb45 	bl	8007ae0 <HAL_TIM_ConfigClockSource>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 800245c:	f000 f8ce 	bl	80025fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000574 	.word	0x20000574
 800246c:	40001800 	.word	0x40001800

08002470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08c      	sub	sp, #48	; 0x30
 8002474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002476:	f107 031c 	add.w	r3, r7, #28
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	60da      	str	r2, [r3, #12]
 8002484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	4b58      	ldr	r3, [pc, #352]	; (80025ec <MX_GPIO_Init+0x17c>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a57      	ldr	r2, [pc, #348]	; (80025ec <MX_GPIO_Init+0x17c>)
 8002490:	f043 0310 	orr.w	r3, r3, #16
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b55      	ldr	r3, [pc, #340]	; (80025ec <MX_GPIO_Init+0x17c>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	61bb      	str	r3, [r7, #24]
 80024a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	4b51      	ldr	r3, [pc, #324]	; (80025ec <MX_GPIO_Init+0x17c>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a50      	ldr	r2, [pc, #320]	; (80025ec <MX_GPIO_Init+0x17c>)
 80024ac:	f043 0320 	orr.w	r3, r3, #32
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b4e      	ldr	r3, [pc, #312]	; (80025ec <MX_GPIO_Init+0x17c>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	4b4a      	ldr	r3, [pc, #296]	; (80025ec <MX_GPIO_Init+0x17c>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a49      	ldr	r2, [pc, #292]	; (80025ec <MX_GPIO_Init+0x17c>)
 80024c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <MX_GPIO_Init+0x17c>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b43      	ldr	r3, [pc, #268]	; (80025ec <MX_GPIO_Init+0x17c>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a42      	ldr	r2, [pc, #264]	; (80025ec <MX_GPIO_Init+0x17c>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b40      	ldr	r3, [pc, #256]	; (80025ec <MX_GPIO_Init+0x17c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	4b3c      	ldr	r3, [pc, #240]	; (80025ec <MX_GPIO_Init+0x17c>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a3b      	ldr	r2, [pc, #236]	; (80025ec <MX_GPIO_Init+0x17c>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b39      	ldr	r3, [pc, #228]	; (80025ec <MX_GPIO_Init+0x17c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	4b35      	ldr	r3, [pc, #212]	; (80025ec <MX_GPIO_Init+0x17c>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a34      	ldr	r2, [pc, #208]	; (80025ec <MX_GPIO_Init+0x17c>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b32      	ldr	r3, [pc, #200]	; (80025ec <MX_GPIO_Init+0x17c>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 800252e:	2201      	movs	r2, #1
 8002530:	21fc      	movs	r1, #252	; 0xfc
 8002532:	482f      	ldr	r0, [pc, #188]	; (80025f0 <MX_GPIO_Init+0x180>)
 8002534:	f002 f90f 	bl	8004756 <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8002538:	2200      	movs	r2, #0
 800253a:	2104      	movs	r1, #4
 800253c:	482d      	ldr	r0, [pc, #180]	; (80025f4 <MX_GPIO_Init+0x184>)
 800253e:	f002 f90a 	bl	8004756 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 8002542:	2200      	movs	r2, #0
 8002544:	2104      	movs	r1, #4
 8002546:	482c      	ldr	r0, [pc, #176]	; (80025f8 <MX_GPIO_Init+0x188>)
 8002548:	f002 f905 	bl	8004756 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, water_heat_cool_Pin|grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin, GPIO_PIN_RESET);
 800254c:	2200      	movs	r2, #0
 800254e:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8002552:	4827      	ldr	r0, [pc, #156]	; (80025f0 <MX_GPIO_Init+0x180>)
 8002554:	f002 f8ff 	bl	8004756 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 8002558:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800255c:	61fb      	str	r3, [r7, #28]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255e:	2301      	movs	r3, #1
 8002560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800256a:	f107 031c 	add.w	r3, r7, #28
 800256e:	4619      	mov	r1, r3
 8002570:	481f      	ldr	r0, [pc, #124]	; (80025f0 <MX_GPIO_Init+0x180>)
 8002572:	f001 ff3b 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002576:	2304      	movs	r3, #4
 8002578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257a:	2301      	movs	r3, #1
 800257c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	4619      	mov	r1, r3
 800258c:	4819      	ldr	r0, [pc, #100]	; (80025f4 <MX_GPIO_Init+0x184>)
 800258e:	f001 ff2d 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 8002592:	2304      	movs	r3, #4
 8002594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002596:	2301      	movs	r3, #1
 8002598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	4619      	mov	r1, r3
 80025a8:	4813      	ldr	r0, [pc, #76]	; (80025f8 <MX_GPIO_Init+0x188>)
 80025aa:	f001 ff1f 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin water_heat_cool_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin;
 80025ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80025b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b4:	2301      	movs	r3, #1
 80025b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	4619      	mov	r1, r3
 80025c6:	480a      	ldr	r0, [pc, #40]	; (80025f0 <MX_GPIO_Init+0x180>)
 80025c8:	f001 ff10 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 80025cc:	2302      	movs	r3, #2
 80025ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d0:	2300      	movs	r3, #0
 80025d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	4619      	mov	r1, r3
 80025de:	4804      	ldr	r0, [pc, #16]	; (80025f0 <MX_GPIO_Init+0x180>)
 80025e0:	f001 ff04 	bl	80043ec <HAL_GPIO_Init>

}
 80025e4:	bf00      	nop
 80025e6:	3730      	adds	r7, #48	; 0x30
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40020400 	.word	0x40020400

080025fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002600:	b672      	cpsid	i
}
 8002602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002604:	e7fe      	b.n	8002604 <Error_Handler+0x8>

08002606 <doseWater>:
#include "main.h"



void doseWater(float acid_ml, float base_ml, float nutrient_ml)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b088      	sub	sp, #32
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
	int ph_down_steps = calc_dose_steps(acid_ml);
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7fd ff4e 	bl	80004b4 <__aeabi_f2d>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f000 fa6e 	bl	8002b00 <calc_dose_steps>
 8002624:	61f8      	str	r0, [r7, #28]
	int ph_up_steps = calc_dose_steps(base_ml);
 8002626:	68b8      	ldr	r0, [r7, #8]
 8002628:	f7fd ff44 	bl	80004b4 <__aeabi_f2d>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	f000 fa64 	bl	8002b00 <calc_dose_steps>
 8002638:	61b8      	str	r0, [r7, #24]
	int nutrient_steps = calc_dose_steps(nutrient_ml);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fd ff3a 	bl	80004b4 <__aeabi_f2d>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f000 fa5a 	bl	8002b00 <calc_dose_steps>
 800264c:	6178      	str	r0, [r7, #20]
	step(nutrient_steps,ph_up_steps, ph_down_steps);
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	69b9      	ldr	r1, [r7, #24]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f000 fc2a 	bl	8002eac <step>
}
 8002658:	bf00      	nop
 800265a:	3720      	adds	r7, #32
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <calcPhUpDose>:

double calcPhUpDose(float TDS, float pH)      // following dose methods return a double in milliliters.
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
	//if(pH > (pH_set_point+0.8))
	return 0;
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
}
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
	...

08002680 <calcPhDownDose>:

double calcPhDownDose(float TDS, float pH)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
	return 3.0;
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4b03      	ldr	r3, [pc, #12]	; (800269c <calcPhDownDose+0x1c>)
}
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	40080000 	.word	0x40080000

080026a0 <calcNutrientDose>:

double calcNutrientDose(float TDS, float pH)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
	return 0;
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
}
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
	...

080026c0 <read_voltage>:
float value;

float voltage_mV, volt_avg_len = 30, pH_low_cal = 2004.0, pH_mid_cal = 1515.0, pH_high_cal= 1123.0;

float read_voltage()
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
	phAverage = 0;
 80026c6:	4b44      	ldr	r3, [pc, #272]	; (80027d8 <read_voltage+0x118>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
	ph_Value = 0;
 80026cc:	4b43      	ldr	r3, [pc, #268]	; (80027dc <read_voltage+0x11c>)
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<32; i++)
 80026d4:	2300      	movs	r3, #0
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	e01d      	b.n	8002716 <read_voltage+0x56>
	{
		get_nutrient_ph_value();
 80026da:	f000 fdd3 	bl	8003284 <get_nutrient_ph_value>
		value = nutrient_ph_values[0];
 80026de:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <read_voltage+0x120>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fb26 	bl	8000d34 <__aeabi_ui2f>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a3e      	ldr	r2, [pc, #248]	; (80027e4 <read_voltage+0x124>)
 80026ec:	6013      	str	r3, [r2, #0]
		if(i>1) phBuffer[i-2] = value;   // skip first 2 samples for accuracy
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	dd0a      	ble.n	800270a <read_voltage+0x4a>
 80026f4:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <read_voltage+0x124>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	1e9c      	subs	r4, r3, #2
 80026fc:	4610      	mov	r0, r2
 80026fe:	f7fe fd37 	bl	8001170 <__aeabi_f2iz>
 8002702:	4603      	mov	r3, r0
 8002704:	4a38      	ldr	r2, [pc, #224]	; (80027e8 <read_voltage+0x128>)
 8002706:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		HAL_Delay(1);
 800270a:	2001      	movs	r0, #1
 800270c:	f001 f992 	bl	8003a34 <HAL_Delay>
	for(int i = 0; i<32; i++)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3301      	adds	r3, #1
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b1f      	cmp	r3, #31
 800271a:	ddde      	ble.n	80026da <read_voltage+0x1a>
	}
	for(j=0;j<30;j++) ph_Value = phBuffer[j] + ph_Value;
 800271c:	4b33      	ldr	r3, [pc, #204]	; (80027ec <read_voltage+0x12c>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e017      	b.n	8002754 <read_voltage+0x94>
 8002724:	4b31      	ldr	r3, [pc, #196]	; (80027ec <read_voltage+0x12c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a2f      	ldr	r2, [pc, #188]	; (80027e8 <read_voltage+0x128>)
 800272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fb04 	bl	8000d3c <__aeabi_i2f>
 8002734:	4602      	mov	r2, r0
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <read_voltage+0x11c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4619      	mov	r1, r3
 800273c:	4610      	mov	r0, r2
 800273e:	f7fe fa49 	bl	8000bd4 <__addsf3>
 8002742:	4603      	mov	r3, r0
 8002744:	461a      	mov	r2, r3
 8002746:	4b25      	ldr	r3, [pc, #148]	; (80027dc <read_voltage+0x11c>)
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	4b28      	ldr	r3, [pc, #160]	; (80027ec <read_voltage+0x12c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	4a26      	ldr	r2, [pc, #152]	; (80027ec <read_voltage+0x12c>)
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b25      	ldr	r3, [pc, #148]	; (80027ec <read_voltage+0x12c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b1d      	cmp	r3, #29
 800275a:	dde3      	ble.n	8002724 <read_voltage+0x64>
	phAverage = ph_Value/30;
 800275c:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <read_voltage+0x11c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4923      	ldr	r1, [pc, #140]	; (80027f0 <read_voltage+0x130>)
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fbf2 	bl	8000f4c <__aeabi_fdiv>
 8002768:	4603      	mov	r3, r0
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fd00 	bl	8001170 <__aeabi_f2iz>
 8002770:	4603      	mov	r3, r0
 8002772:	4a19      	ldr	r2, [pc, #100]	; (80027d8 <read_voltage+0x118>)
 8002774:	6013      	str	r3, [r2, #0]
	mili_Voltage = ((phAverage/4096.0)*3.3)*1000;
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <read_voltage+0x118>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fd fe88 	bl	8000490 <__aeabi_i2d>
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <read_voltage+0x134>)
 8002786:	f7fe f817 	bl	80007b8 <__aeabi_ddiv>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	a30f      	add	r3, pc, #60	; (adr r3, 80027d0 <read_voltage+0x110>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f7fd fee4 	bl	8000564 <__aeabi_dmul>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4610      	mov	r0, r2
 80027a2:	4619      	mov	r1, r3
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <read_voltage+0x138>)
 80027aa:	f7fd fedb 	bl	8000564 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	f7fe f9b7 	bl	8000b28 <__aeabi_d2f>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <read_voltage+0x13c>)
 80027be:	6013      	str	r3, [r2, #0]
	return mili_Voltage;
 80027c0:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <read_voltage+0x13c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd90      	pop	{r4, r7, pc}
 80027cc:	f3af 8000 	nop.w
 80027d0:	66666666 	.word	0x66666666
 80027d4:	400a6666 	.word	0x400a6666
 80027d8:	20000124 	.word	0x20000124
 80027dc:	20000120 	.word	0x20000120
 80027e0:	20000118 	.word	0x20000118
 80027e4:	2000063c 	.word	0x2000063c
 80027e8:	200005c0 	.word	0x200005c0
 80027ec:	20000128 	.word	0x20000128
 80027f0:	41f00000 	.word	0x41f00000
 80027f4:	40b00000 	.word	0x40b00000
 80027f8:	408f4000 	.word	0x408f4000
 80027fc:	20000638 	.word	0x20000638

08002800 <convert_ph>:

float convert_ph(float voltage_mV)	// converts voltage to pH value based on three point calibration
{
 8002800:	b5b0      	push	{r4, r5, r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	if(voltage_mV>pH_mid_cal) 		// if the solution is basic
 8002808:	4bad      	ldr	r3, [pc, #692]	; (8002ac0 <convert_ph+0x2c0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fca4 	bl	800115c <__aeabi_fcmpgt>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 809f 	beq.w	800295a <convert_ph+0x15a>
	{
		float slope = (7.0-4.0)/((pH_mid_cal-1500.0)/3.0 - (pH_low_cal-1500.0)/3.0);
 800281c:	4ba8      	ldr	r3, [pc, #672]	; (8002ac0 <convert_ph+0x2c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7fd fe47 	bl	80004b4 <__aeabi_f2d>
 8002826:	a3a4      	add	r3, pc, #656	; (adr r3, 8002ab8 <convert_ph+0x2b8>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fd fce2 	bl	80001f4 <__aeabi_dsub>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4610      	mov	r0, r2
 8002836:	4619      	mov	r1, r3
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	4ba1      	ldr	r3, [pc, #644]	; (8002ac4 <convert_ph+0x2c4>)
 800283e:	f7fd ffbb 	bl	80007b8 <__aeabi_ddiv>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4614      	mov	r4, r2
 8002848:	461d      	mov	r5, r3
 800284a:	4b9f      	ldr	r3, [pc, #636]	; (8002ac8 <convert_ph+0x2c8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe30 	bl	80004b4 <__aeabi_f2d>
 8002854:	a398      	add	r3, pc, #608	; (adr r3, 8002ab8 <convert_ph+0x2b8>)
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	f7fd fccb 	bl	80001f4 <__aeabi_dsub>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4b96      	ldr	r3, [pc, #600]	; (8002ac4 <convert_ph+0x2c4>)
 800286c:	f7fd ffa4 	bl	80007b8 <__aeabi_ddiv>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4620      	mov	r0, r4
 8002876:	4629      	mov	r1, r5
 8002878:	f7fd fcbc 	bl	80001f4 <__aeabi_dsub>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	f04f 0000 	mov.w	r0, #0
 8002884:	498f      	ldr	r1, [pc, #572]	; (8002ac4 <convert_ph+0x2c4>)
 8002886:	f7fd ff97 	bl	80007b8 <__aeabi_ddiv>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	f7fe f949 	bl	8000b28 <__aeabi_d2f>
 8002896:	4603      	mov	r3, r0
 8002898:	613b      	str	r3, [r7, #16]
		float intercept =  7.0 - slope*(pH_mid_cal-1500.0)/3.0;
 800289a:	6938      	ldr	r0, [r7, #16]
 800289c:	f7fd fe0a 	bl	80004b4 <__aeabi_f2d>
 80028a0:	4604      	mov	r4, r0
 80028a2:	460d      	mov	r5, r1
 80028a4:	4b86      	ldr	r3, [pc, #536]	; (8002ac0 <convert_ph+0x2c0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe03 	bl	80004b4 <__aeabi_f2d>
 80028ae:	a382      	add	r3, pc, #520	; (adr r3, 8002ab8 <convert_ph+0x2b8>)
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	f7fd fc9e 	bl	80001f4 <__aeabi_dsub>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4620      	mov	r0, r4
 80028be:	4629      	mov	r1, r5
 80028c0:	f7fd fe50 	bl	8000564 <__aeabi_dmul>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	4b7c      	ldr	r3, [pc, #496]	; (8002ac4 <convert_ph+0x2c4>)
 80028d2:	f7fd ff71 	bl	80007b8 <__aeabi_ddiv>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	f04f 0000 	mov.w	r0, #0
 80028de:	497b      	ldr	r1, [pc, #492]	; (8002acc <convert_ph+0x2cc>)
 80028e0:	f7fd fc88 	bl	80001f4 <__aeabi_dsub>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7fe f91c 	bl	8000b28 <__aeabi_d2f>
 80028f0:	4603      	mov	r3, r0
 80028f2:	60fb      	str	r3, [r7, #12]
		float phValue = slope*(voltage_mV-1500.0)/3.0+intercept;  //y = k*x + b
 80028f4:	6938      	ldr	r0, [r7, #16]
 80028f6:	f7fd fddd 	bl	80004b4 <__aeabi_f2d>
 80028fa:	4604      	mov	r4, r0
 80028fc:	460d      	mov	r5, r1
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fd fdd8 	bl	80004b4 <__aeabi_f2d>
 8002904:	a36c      	add	r3, pc, #432	; (adr r3, 8002ab8 <convert_ph+0x2b8>)
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	f7fd fc73 	bl	80001f4 <__aeabi_dsub>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4620      	mov	r0, r4
 8002914:	4629      	mov	r1, r5
 8002916:	f7fd fe25 	bl	8000564 <__aeabi_dmul>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	4b67      	ldr	r3, [pc, #412]	; (8002ac4 <convert_ph+0x2c4>)
 8002928:	f7fd ff46 	bl	80007b8 <__aeabi_ddiv>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4614      	mov	r4, r2
 8002932:	461d      	mov	r5, r3
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7fd fdbd 	bl	80004b4 <__aeabi_f2d>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4620      	mov	r0, r4
 8002940:	4629      	mov	r1, r5
 8002942:	f7fd fc59 	bl	80001f8 <__adddf3>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	f7fe f8eb 	bl	8000b28 <__aeabi_d2f>
 8002952:	4603      	mov	r3, r0
 8002954:	60bb      	str	r3, [r7, #8]
		return phValue;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	e0a8      	b.n	8002aac <convert_ph+0x2ac>
	}
	if(voltage_mV<pH_mid_cal) 		// if the solution is acidic
 800295a:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <convert_ph+0x2c0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7fe fbdd 	bl	8001120 <__aeabi_fcmplt>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 809f 	beq.w	8002aac <convert_ph+0x2ac>
	{
		float slope = (7.0-4.0)/((pH_mid_cal-1500.0)/3.0 - (pH_low_cal-1500.0)/3.0);
 800296e:	4b54      	ldr	r3, [pc, #336]	; (8002ac0 <convert_ph+0x2c0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd fd9e 	bl	80004b4 <__aeabi_f2d>
 8002978:	a34f      	add	r3, pc, #316	; (adr r3, 8002ab8 <convert_ph+0x2b8>)
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f7fd fc39 	bl	80001f4 <__aeabi_dsub>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	4b4d      	ldr	r3, [pc, #308]	; (8002ac4 <convert_ph+0x2c4>)
 8002990:	f7fd ff12 	bl	80007b8 <__aeabi_ddiv>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4614      	mov	r4, r2
 800299a:	461d      	mov	r5, r3
 800299c:	4b4a      	ldr	r3, [pc, #296]	; (8002ac8 <convert_ph+0x2c8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fd87 	bl	80004b4 <__aeabi_f2d>
 80029a6:	a344      	add	r3, pc, #272	; (adr r3, 8002ab8 <convert_ph+0x2b8>)
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	f7fd fc22 	bl	80001f4 <__aeabi_dsub>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	4b41      	ldr	r3, [pc, #260]	; (8002ac4 <convert_ph+0x2c4>)
 80029be:	f7fd fefb 	bl	80007b8 <__aeabi_ddiv>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4620      	mov	r0, r4
 80029c8:	4629      	mov	r1, r5
 80029ca:	f7fd fc13 	bl	80001f4 <__aeabi_dsub>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	f04f 0000 	mov.w	r0, #0
 80029d6:	493b      	ldr	r1, [pc, #236]	; (8002ac4 <convert_ph+0x2c4>)
 80029d8:	f7fd feee 	bl	80007b8 <__aeabi_ddiv>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	f7fe f8a0 	bl	8000b28 <__aeabi_d2f>
 80029e8:	4603      	mov	r3, r0
 80029ea:	61fb      	str	r3, [r7, #28]
		float intercept =  7.0 - slope*(pH_mid_cal-1500.0)/3.0;
 80029ec:	69f8      	ldr	r0, [r7, #28]
 80029ee:	f7fd fd61 	bl	80004b4 <__aeabi_f2d>
 80029f2:	4604      	mov	r4, r0
 80029f4:	460d      	mov	r5, r1
 80029f6:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <convert_ph+0x2c0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd fd5a 	bl	80004b4 <__aeabi_f2d>
 8002a00:	a32d      	add	r3, pc, #180	; (adr r3, 8002ab8 <convert_ph+0x2b8>)
 8002a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a06:	f7fd fbf5 	bl	80001f4 <__aeabi_dsub>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4620      	mov	r0, r4
 8002a10:	4629      	mov	r1, r5
 8002a12:	f7fd fda7 	bl	8000564 <__aeabi_dmul>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <convert_ph+0x2c4>)
 8002a24:	f7fd fec8 	bl	80007b8 <__aeabi_ddiv>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	f04f 0000 	mov.w	r0, #0
 8002a30:	4926      	ldr	r1, [pc, #152]	; (8002acc <convert_ph+0x2cc>)
 8002a32:	f7fd fbdf 	bl	80001f4 <__aeabi_dsub>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f7fe f873 	bl	8000b28 <__aeabi_d2f>
 8002a42:	4603      	mov	r3, r0
 8002a44:	61bb      	str	r3, [r7, #24]
		float phValue = slope*(voltage_mV-1500.0)/3.0+intercept;  //y = k*x + b
 8002a46:	69f8      	ldr	r0, [r7, #28]
 8002a48:	f7fd fd34 	bl	80004b4 <__aeabi_f2d>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	460d      	mov	r5, r1
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7fd fd2f 	bl	80004b4 <__aeabi_f2d>
 8002a56:	a318      	add	r3, pc, #96	; (adr r3, 8002ab8 <convert_ph+0x2b8>)
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f7fd fbca 	bl	80001f4 <__aeabi_dsub>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4620      	mov	r0, r4
 8002a66:	4629      	mov	r1, r5
 8002a68:	f7fd fd7c 	bl	8000564 <__aeabi_dmul>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <convert_ph+0x2c4>)
 8002a7a:	f7fd fe9d 	bl	80007b8 <__aeabi_ddiv>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4614      	mov	r4, r2
 8002a84:	461d      	mov	r5, r3
 8002a86:	69b8      	ldr	r0, [r7, #24]
 8002a88:	f7fd fd14 	bl	80004b4 <__aeabi_f2d>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4620      	mov	r0, r4
 8002a92:	4629      	mov	r1, r5
 8002a94:	f7fd fbb0 	bl	80001f8 <__adddf3>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f7fe f842 	bl	8000b28 <__aeabi_d2f>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	617b      	str	r3, [r7, #20]
		return phValue;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	e7ff      	b.n	8002aac <convert_ph+0x2ac>
	}
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab4:	f3af 8000 	nop.w
 8002ab8:	00000000 	.word	0x00000000
 8002abc:	40977000 	.word	0x40977000
 8002ac0:	20000010 	.word	0x20000010
 8002ac4:	40080000 	.word	0x40080000
 8002ac8:	2000000c 	.word	0x2000000c
 8002acc:	401c0000 	.word	0x401c0000

08002ad0 <delay_Stepper>:
#include "peristaltic_driver.h"
#include "main.h"
//extern TIM_HandleTypeDef step_timer;

void delay_Stepper(uint16_t us)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COUNTER(&htim2,0);  			 // set the counter value a 0
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <delay_Stepper+0x2c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8002ae2:	bf00      	nop
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <delay_Stepper+0x2c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d3f9      	bcc.n	8002ae4 <delay_Stepper+0x14>
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	2000052c 	.word	0x2000052c

08002b00 <calc_dose_steps>:
double steps = 0;
int calc_dose_steps(double miliLiters)	// takes a dose in mls and returns the number of steps for that volume
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	e9c7 0100 	strd	r0, r1, [r7]
	if	   (miliLiters > 0 && miliLiters <= 1)	steps = (1/0.221)*(miliLiters+0.2012)*(1745);
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b16:	f7fd ffb5 	bl	8000a84 <__aeabi_dcmpgt>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d028      	beq.n	8002b72 <calc_dose_steps+0x72>
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	4bbe      	ldr	r3, [pc, #760]	; (8002e20 <calc_dose_steps+0x320>)
 8002b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b2a:	f7fd ff97 	bl	8000a5c <__aeabi_dcmple>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01e      	beq.n	8002b72 <calc_dose_steps+0x72>
 8002b34:	a3ae      	add	r3, pc, #696	; (adr r3, 8002df0 <calc_dose_steps+0x2f0>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b3e:	f7fd fb5b 	bl	80001f8 <__adddf3>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	a3ab      	add	r3, pc, #684	; (adr r3, 8002df8 <calc_dose_steps+0x2f8>)
 8002b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b50:	f7fd fd08 	bl	8000564 <__aeabi_dmul>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	a3a8      	add	r3, pc, #672	; (adr r3, 8002e00 <calc_dose_steps+0x300>)
 8002b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b62:	f7fd fcff 	bl	8000564 <__aeabi_dmul>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	49ae      	ldr	r1, [pc, #696]	; (8002e24 <calc_dose_steps+0x324>)
 8002b6c:	e9c1 2300 	strd	r2, r3, [r1]
 8002b70:	e131      	b.n	8002dd6 <calc_dose_steps+0x2d6>
	else if(miliLiters > 1 && miliLiters <= 2)	steps = (1/0.221)*(miliLiters+0.2012)*(1790);
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	4baa      	ldr	r3, [pc, #680]	; (8002e20 <calc_dose_steps+0x320>)
 8002b78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b7c:	f7fd ff82 	bl	8000a84 <__aeabi_dcmpgt>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d029      	beq.n	8002bda <calc_dose_steps+0xda>
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b92:	f7fd ff63 	bl	8000a5c <__aeabi_dcmple>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01e      	beq.n	8002bda <calc_dose_steps+0xda>
 8002b9c:	a394      	add	r3, pc, #592	; (adr r3, 8002df0 <calc_dose_steps+0x2f0>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ba6:	f7fd fb27 	bl	80001f8 <__adddf3>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	a391      	add	r3, pc, #580	; (adr r3, 8002df8 <calc_dose_steps+0x2f8>)
 8002bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb8:	f7fd fcd4 	bl	8000564 <__aeabi_dmul>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	a390      	add	r3, pc, #576	; (adr r3, 8002e08 <calc_dose_steps+0x308>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	f7fd fccb 	bl	8000564 <__aeabi_dmul>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4994      	ldr	r1, [pc, #592]	; (8002e24 <calc_dose_steps+0x324>)
 8002bd4:	e9c1 2300 	strd	r2, r3, [r1]
 8002bd8:	e0fd      	b.n	8002dd6 <calc_dose_steps+0x2d6>
	else if(miliLiters > 2 && miliLiters <= 3)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002be6:	f7fd ff4d 	bl	8000a84 <__aeabi_dcmpgt>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d028      	beq.n	8002c42 <calc_dose_steps+0x142>
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	4b8c      	ldr	r3, [pc, #560]	; (8002e28 <calc_dose_steps+0x328>)
 8002bf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bfa:	f7fd ff2f 	bl	8000a5c <__aeabi_dcmple>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01e      	beq.n	8002c42 <calc_dose_steps+0x142>
 8002c04:	a37a      	add	r3, pc, #488	; (adr r3, 8002df0 <calc_dose_steps+0x2f0>)
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c0e:	f7fd faf3 	bl	80001f8 <__adddf3>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4610      	mov	r0, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	a377      	add	r3, pc, #476	; (adr r3, 8002df8 <calc_dose_steps+0x2f8>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f7fd fca0 	bl	8000564 <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	a378      	add	r3, pc, #480	; (adr r3, 8002e10 <calc_dose_steps+0x310>)
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	f7fd fc97 	bl	8000564 <__aeabi_dmul>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	497a      	ldr	r1, [pc, #488]	; (8002e24 <calc_dose_steps+0x324>)
 8002c3c:	e9c1 2300 	strd	r2, r3, [r1]
 8002c40:	e0c9      	b.n	8002dd6 <calc_dose_steps+0x2d6>
	else if(miliLiters > 3 && miliLiters <= 4)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	4b78      	ldr	r3, [pc, #480]	; (8002e28 <calc_dose_steps+0x328>)
 8002c48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c4c:	f7fd ff1a 	bl	8000a84 <__aeabi_dcmpgt>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d028      	beq.n	8002ca8 <calc_dose_steps+0x1a8>
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	4b74      	ldr	r3, [pc, #464]	; (8002e2c <calc_dose_steps+0x32c>)
 8002c5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c60:	f7fd fefc 	bl	8000a5c <__aeabi_dcmple>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01e      	beq.n	8002ca8 <calc_dose_steps+0x1a8>
 8002c6a:	a361      	add	r3, pc, #388	; (adr r3, 8002df0 <calc_dose_steps+0x2f0>)
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c74:	f7fd fac0 	bl	80001f8 <__adddf3>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	a35d      	add	r3, pc, #372	; (adr r3, 8002df8 <calc_dose_steps+0x2f8>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f7fd fc6d 	bl	8000564 <__aeabi_dmul>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	a35f      	add	r3, pc, #380	; (adr r3, 8002e10 <calc_dose_steps+0x310>)
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f7fd fc64 	bl	8000564 <__aeabi_dmul>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4960      	ldr	r1, [pc, #384]	; (8002e24 <calc_dose_steps+0x324>)
 8002ca2:	e9c1 2300 	strd	r2, r3, [r1]
 8002ca6:	e096      	b.n	8002dd6 <calc_dose_steps+0x2d6>
	else if(miliLiters > 4 && miliLiters <= 5)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	4b5f      	ldr	r3, [pc, #380]	; (8002e2c <calc_dose_steps+0x32c>)
 8002cae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cb2:	f7fd fee7 	bl	8000a84 <__aeabi_dcmpgt>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d028      	beq.n	8002d0e <calc_dose_steps+0x20e>
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	4b5b      	ldr	r3, [pc, #364]	; (8002e30 <calc_dose_steps+0x330>)
 8002cc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cc6:	f7fd fec9 	bl	8000a5c <__aeabi_dcmple>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01e      	beq.n	8002d0e <calc_dose_steps+0x20e>
 8002cd0:	a347      	add	r3, pc, #284	; (adr r3, 8002df0 <calc_dose_steps+0x2f0>)
 8002cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cda:	f7fd fa8d 	bl	80001f8 <__adddf3>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	a344      	add	r3, pc, #272	; (adr r3, 8002df8 <calc_dose_steps+0x2f8>)
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	f7fd fc3a 	bl	8000564 <__aeabi_dmul>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	a345      	add	r3, pc, #276	; (adr r3, 8002e10 <calc_dose_steps+0x310>)
 8002cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfe:	f7fd fc31 	bl	8000564 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4947      	ldr	r1, [pc, #284]	; (8002e24 <calc_dose_steps+0x324>)
 8002d08:	e9c1 2300 	strd	r2, r3, [r1]
 8002d0c:	e063      	b.n	8002dd6 <calc_dose_steps+0x2d6>
	else if(miliLiters > 5 && miliLiters <= 30) steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <calc_dose_steps+0x330>)
 8002d14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d18:	f7fd feb4 	bl	8000a84 <__aeabi_dcmpgt>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d028      	beq.n	8002d74 <calc_dose_steps+0x274>
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	4b43      	ldr	r3, [pc, #268]	; (8002e34 <calc_dose_steps+0x334>)
 8002d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d2c:	f7fd fe96 	bl	8000a5c <__aeabi_dcmple>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01e      	beq.n	8002d74 <calc_dose_steps+0x274>
 8002d36:	a32e      	add	r3, pc, #184	; (adr r3, 8002df0 <calc_dose_steps+0x2f0>)
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d40:	f7fd fa5a 	bl	80001f8 <__adddf3>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	a32a      	add	r3, pc, #168	; (adr r3, 8002df8 <calc_dose_steps+0x2f8>)
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	f7fd fc07 	bl	8000564 <__aeabi_dmul>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	a32c      	add	r3, pc, #176	; (adr r3, 8002e10 <calc_dose_steps+0x310>)
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	f7fd fbfe 	bl	8000564 <__aeabi_dmul>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	492d      	ldr	r1, [pc, #180]	; (8002e24 <calc_dose_steps+0x324>)
 8002d6e:	e9c1 2300 	strd	r2, r3, [r1]
 8002d72:	e030      	b.n	8002dd6 <calc_dose_steps+0x2d6>
	else if(miliLiters == 0) steps = 0;
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d80:	f7fd fe58 	bl	8000a34 <__aeabi_dcmpeq>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d007      	beq.n	8002d9a <calc_dose_steps+0x29a>
 8002d8a:	4926      	ldr	r1, [pc, #152]	; (8002e24 <calc_dose_steps+0x324>)
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9c1 2300 	strd	r2, r3, [r1]
 8002d98:	e01d      	b.n	8002dd6 <calc_dose_steps+0x2d6>
	else steps = (1/0.221)*(miliLiters+0.2012)*(1915);
 8002d9a:	a315      	add	r3, pc, #84	; (adr r3, 8002df0 <calc_dose_steps+0x2f0>)
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002da4:	f7fd fa28 	bl	80001f8 <__adddf3>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	a311      	add	r3, pc, #68	; (adr r3, 8002df8 <calc_dose_steps+0x2f8>)
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db6:	f7fd fbd5 	bl	8000564 <__aeabi_dmul>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	a315      	add	r3, pc, #84	; (adr r3, 8002e18 <calc_dose_steps+0x318>)
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	f7fd fbcc 	bl	8000564 <__aeabi_dmul>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4914      	ldr	r1, [pc, #80]	; (8002e24 <calc_dose_steps+0x324>)
 8002dd2:	e9c1 2300 	strd	r2, r3, [r1]
	return (int)steps;
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <calc_dose_steps+0x324>)
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	f7fd fe5a 	bl	8000a98 <__aeabi_d2iz>
 8002de4:	4603      	mov	r3, r0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	edfa43fe 	.word	0xedfa43fe
 8002df4:	3fc9c0eb 	.word	0x3fc9c0eb
 8002df8:	f2197bf2 	.word	0xf2197bf2
 8002dfc:	4012197b 	.word	0x4012197b
 8002e00:	00000000 	.word	0x00000000
 8002e04:	409b4400 	.word	0x409b4400
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	409bf800 	.word	0x409bf800
 8002e10:	00000000 	.word	0x00000000
 8002e14:	409ef000 	.word	0x409ef000
 8002e18:	00000000 	.word	0x00000000
 8002e1c:	409dec00 	.word	0x409dec00
 8002e20:	3ff00000 	.word	0x3ff00000
 8002e24:	20000130 	.word	0x20000130
 8002e28:	40080000 	.word	0x40080000
 8002e2c:	40100000 	.word	0x40100000
 8002e30:	40140000 	.word	0x40140000
 8002e34:	403e0000 	.word	0x403e0000

08002e38 <disablePumps>:

void disablePumps()	// disable all pumps
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_SET);
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	4807      	ldr	r0, [pc, #28]	; (8002e60 <disablePumps+0x28>)
 8002e42:	f001 fc88 	bl	8004756 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_SET);
 8002e46:	2201      	movs	r2, #1
 8002e48:	2140      	movs	r1, #64	; 0x40
 8002e4a:	4805      	ldr	r0, [pc, #20]	; (8002e60 <disablePumps+0x28>)
 8002e4c:	f001 fc83 	bl	8004756 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_SET);
 8002e50:	2201      	movs	r2, #1
 8002e52:	2120      	movs	r1, #32
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <disablePumps+0x28>)
 8002e56:	f001 fc7e 	bl	8004756 <HAL_GPIO_WritePin>

}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000

08002e64 <enablePumps>:

void enablePumps(int nutrient_steps, int ph_up_steps, int ph_down_steps)	// enable only the pumps that are going to dose
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
	if(nutrient_steps>0)HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_RESET);		// enable nutrient pump
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	dd04      	ble.n	8002e80 <enablePumps+0x1c>
 8002e76:	2200      	movs	r2, #0
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	480b      	ldr	r0, [pc, #44]	; (8002ea8 <enablePumps+0x44>)
 8002e7c:	f001 fc6b 	bl	8004756 <HAL_GPIO_WritePin>
	if(ph_down_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_RESET);			// enable ph down pump
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	dd04      	ble.n	8002e90 <enablePumps+0x2c>
 8002e86:	2200      	movs	r2, #0
 8002e88:	2140      	movs	r1, #64	; 0x40
 8002e8a:	4807      	ldr	r0, [pc, #28]	; (8002ea8 <enablePumps+0x44>)
 8002e8c:	f001 fc63 	bl	8004756 <HAL_GPIO_WritePin>
	if(ph_up_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_RESET);			// enable ph up pump
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	dd04      	ble.n	8002ea0 <enablePumps+0x3c>
 8002e96:	2200      	movs	r2, #0
 8002e98:	2120      	movs	r1, #32
 8002e9a:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <enablePumps+0x44>)
 8002e9c:	f001 fc5b 	bl	8004756 <HAL_GPIO_WritePin>
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40021000 	.word	0x40021000

08002eac <step>:

void step(int nutrient_steps, int ph_up_steps, int ph_down_steps)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
	int most_steps = nutrient_steps;										// find the largest dose in steps. Will be used in step loop
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	617b      	str	r3, [r7, #20]
	if(ph_up_steps>most_steps) most_steps 	= ph_up_steps;
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	dd01      	ble.n	8002ec8 <step+0x1c>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	617b      	str	r3, [r7, #20]
	if(ph_down_steps>most_steps) most_steps = ph_down_steps;
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dd01      	ble.n	8002ed4 <step+0x28>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	617b      	str	r3, [r7, #20]
	enablePumps(nutrient_steps,ph_up_steps,ph_down_steps);					// enable only the pumps that are going to dose
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff ffc3 	bl	8002e64 <enablePumps>
	HAL_TIM_Base_Start(&htim2);
 8002ede:	4824      	ldr	r0, [pc, #144]	; (8002f70 <step+0xc4>)
 8002ee0:	f004 fbba 	bl	8007658 <HAL_TIM_Base_Start>
	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	e038      	b.n	8002f5c <step+0xb0>
	{
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	da03      	bge.n	8002efa <step+0x4e>
 8002ef2:	2110      	movs	r1, #16
 8002ef4:	481f      	ldr	r0, [pc, #124]	; (8002f74 <step+0xc8>)
 8002ef6:	f001 fc46 	bl	8004786 <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	da03      	bge.n	8002f0a <step+0x5e>
 8002f02:	2104      	movs	r1, #4
 8002f04:	481b      	ldr	r0, [pc, #108]	; (8002f74 <step+0xc8>)
 8002f06:	f001 fc3e 	bl	8004786 <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	da03      	bge.n	8002f1a <step+0x6e>
 8002f12:	2108      	movs	r1, #8
 8002f14:	4817      	ldr	r0, [pc, #92]	; (8002f74 <step+0xc8>)
 8002f16:	f001 fc36 	bl	8004786 <HAL_GPIO_TogglePin>
		delay_Stepper(40);
 8002f1a:	2028      	movs	r0, #40	; 0x28
 8002f1c:	f7ff fdd8 	bl	8002ad0 <delay_Stepper>
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	da03      	bge.n	8002f30 <step+0x84>
 8002f28:	2110      	movs	r1, #16
 8002f2a:	4812      	ldr	r0, [pc, #72]	; (8002f74 <step+0xc8>)
 8002f2c:	f001 fc2b 	bl	8004786 <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	da03      	bge.n	8002f40 <step+0x94>
 8002f38:	2104      	movs	r1, #4
 8002f3a:	480e      	ldr	r0, [pc, #56]	; (8002f74 <step+0xc8>)
 8002f3c:	f001 fc23 	bl	8004786 <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	da03      	bge.n	8002f50 <step+0xa4>
 8002f48:	2108      	movs	r1, #8
 8002f4a:	480a      	ldr	r0, [pc, #40]	; (8002f74 <step+0xc8>)
 8002f4c:	f001 fc1b 	bl	8004786 <HAL_GPIO_TogglePin>
		delay_Stepper(40);
 8002f50:	2028      	movs	r0, #40	; 0x28
 8002f52:	f7ff fdbd 	bl	8002ad0 <delay_Stepper>
	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	dbc2      	blt.n	8002eea <step+0x3e>
	}
	disablePumps();
 8002f64:	f7ff ff68 	bl	8002e38 <disablePumps>
}
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	2000052c 	.word	0x2000052c
 8002f74:	40021000 	.word	0x40021000

08002f78 <readWaterTemp>:
uint16_t TEMP;
double Temperature = 0;
float Humidity = 0;

double readWaterTemp(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
	 DWT_Delay_Init();
 8002f7c:	f000 fb7a 	bl	8003674 <DWT_Delay_Init>

	 //Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
	 HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 1);
 8002f80:	2201      	movs	r2, #1
 8002f82:	2104      	movs	r1, #4
 8002f84:	482b      	ldr	r0, [pc, #172]	; (8003034 <readWaterTemp+0xbc>)
 8002f86:	f001 fbe6 	bl	8004756 <HAL_GPIO_WritePin>
	 DWT_Delay_us(100);
 8002f8a:	2064      	movs	r0, #100	; 0x64
 8002f8c:	f000 fba2 	bl	80036d4 <DWT_Delay_us>
	 Presence = DS18B20_Start();
 8002f90:	f000 fbc8 	bl	8003724 <DS18B20_Start>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b27      	ldr	r3, [pc, #156]	; (8003038 <readWaterTemp+0xc0>)
 8002f9a:	701a      	strb	r2, [r3, #0]

	 DWT_Delay_us (300);
 8002f9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fa0:	f000 fb98 	bl	80036d4 <DWT_Delay_us>
	 DS18B20_Write (0xCC);  // skip ROM
 8002fa4:	20cc      	movs	r0, #204	; 0xcc
 8002fa6:	f000 fbed 	bl	8003784 <DS18B20_Write>
	 DS18B20_Write (0x44);  // convert t
 8002faa:	2044      	movs	r0, #68	; 0x44
 8002fac:	f000 fbea 	bl	8003784 <DS18B20_Write>

	 Presence = DS18B20_Start();
 8002fb0:	f000 fbb8 	bl	8003724 <DS18B20_Start>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <readWaterTemp+0xc0>)
 8002fba:	701a      	strb	r2, [r3, #0]
	 DWT_Delay_us (300);
 8002fbc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fc0:	f000 fb88 	bl	80036d4 <DWT_Delay_us>
	 DS18B20_Write (0xCC);  // skip ROM
 8002fc4:	20cc      	movs	r0, #204	; 0xcc
 8002fc6:	f000 fbdd 	bl	8003784 <DS18B20_Write>
	 DS18B20_Write (0xBE);  // Read Scratch-pad
 8002fca:	20be      	movs	r0, #190	; 0xbe
 8002fcc:	f000 fbda 	bl	8003784 <DS18B20_Write>

	 Temp_byte1 = DS18B20_Read();
 8002fd0:	f000 fc1e 	bl	8003810 <DS18B20_Read>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <readWaterTemp+0xc4>)
 8002fda:	701a      	strb	r2, [r3, #0]
	 Temp_byte2 = DS18B20_Read();
 8002fdc:	f000 fc18 	bl	8003810 <DS18B20_Read>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4b16      	ldr	r3, [pc, #88]	; (8003040 <readWaterTemp+0xc8>)
 8002fe6:	701a      	strb	r2, [r3, #0]
	 TEMP = (Temp_byte2<<8)|Temp_byte1;
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <readWaterTemp+0xc8>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	b21a      	sxth	r2, r3
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <readWaterTemp+0xc4>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	b21b      	sxth	r3, r3
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	b21b      	sxth	r3, r3
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <readWaterTemp+0xcc>)
 8002ffe:	801a      	strh	r2, [r3, #0]
	 Temperature = (float)TEMP/16;
 8003000:	4b10      	ldr	r3, [pc, #64]	; (8003044 <readWaterTemp+0xcc>)
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fe95 	bl	8000d34 <__aeabi_ui2f>
 800300a:	4603      	mov	r3, r0
 800300c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd ff9b 	bl	8000f4c <__aeabi_fdiv>
 8003016:	4603      	mov	r3, r0
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fa4b 	bl	80004b4 <__aeabi_f2d>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4909      	ldr	r1, [pc, #36]	; (8003048 <readWaterTemp+0xd0>)
 8003024:	e9c1 2300 	strd	r2, r3, [r1]
	 return Temperature;
 8003028:	4b07      	ldr	r3, [pc, #28]	; (8003048 <readWaterTemp+0xd0>)
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40020400 	.word	0x40020400
 8003038:	20000138 	.word	0x20000138
 800303c:	200006bc 	.word	0x200006bc
 8003040:	2000073c 	.word	0x2000073c
 8003044:	20000640 	.word	0x20000640
 8003048:	20000140 	.word	0x20000140
 800304c:	00000000 	.word	0x00000000

08003050 <readWaterTDS>:
#define SCOUNT  30           	// sum of sample point
int nutrientBuffer[SCOUNT],analogBufferTemp[SCOUNT], copyIndex = 0;  // store the analog value in the array, read from ADC
float averageVoltage = 0,tdsValue = 0,temperature = 25,compensationCoefficient = 0,compensationVolatge = 0;

float readWaterTDS() // Get nutrient level
{
 8003050:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
	for(int i = 0; i<SCOUNT+10; i++)
 8003058:	2300      	movs	r3, #0
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	e012      	b.n	8003084 <readWaterTDS+0x34>
	{
		get_nutrient_ph_value();
 800305e:	f000 f911 	bl	8003284 <get_nutrient_ph_value>
		if(i>9)nutrientBuffer[i-10] = nutrient_ph_values[1];  		 // skip first 10 values since they are way off (pH: position 0 Nutrient: position 1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b09      	cmp	r3, #9
 8003066:	dd07      	ble.n	8003078 <readWaterTDS+0x28>
 8003068:	4b79      	ldr	r3, [pc, #484]	; (8003250 <readWaterTDS+0x200>)
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3b0a      	subs	r3, #10
 8003070:	4611      	mov	r1, r2
 8003072:	4a78      	ldr	r2, [pc, #480]	; (8003254 <readWaterTDS+0x204>)
 8003074:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    HAL_Delay(1);
 8003078:	2001      	movs	r0, #1
 800307a:	f000 fcdb 	bl	8003a34 <HAL_Delay>
	for(int i = 0; i<SCOUNT+10; i++)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3301      	adds	r3, #1
 8003082:	607b      	str	r3, [r7, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b27      	cmp	r3, #39	; 0x27
 8003088:	dde9      	ble.n	800305e <readWaterTDS+0xe>
	}

    for(copyIndex=0;copyIndex<SCOUNT;copyIndex++) analogBufferTemp[copyIndex]= nutrientBuffer[copyIndex];
 800308a:	4b73      	ldr	r3, [pc, #460]	; (8003258 <readWaterTDS+0x208>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e00e      	b.n	80030b0 <readWaterTDS+0x60>
 8003092:	4b71      	ldr	r3, [pc, #452]	; (8003258 <readWaterTDS+0x208>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b70      	ldr	r3, [pc, #448]	; (8003258 <readWaterTDS+0x208>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	496e      	ldr	r1, [pc, #440]	; (8003254 <readWaterTDS+0x204>)
 800309c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80030a0:	496e      	ldr	r1, [pc, #440]	; (800325c <readWaterTDS+0x20c>)
 80030a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80030a6:	4b6c      	ldr	r3, [pc, #432]	; (8003258 <readWaterTDS+0x208>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	4a6a      	ldr	r2, [pc, #424]	; (8003258 <readWaterTDS+0x208>)
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b69      	ldr	r3, [pc, #420]	; (8003258 <readWaterTDS+0x208>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b1d      	cmp	r3, #29
 80030b6:	ddec      	ble.n	8003092 <readWaterTDS+0x42>
    averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)0.000805664; 																					// read the analog value more stable by averaging and convert to voltage value
 80030b8:	211e      	movs	r1, #30
 80030ba:	4868      	ldr	r0, [pc, #416]	; (800325c <readWaterTDS+0x20c>)
 80030bc:	f7fe fc72 	bl	80019a4 <getMedianNum>
 80030c0:	4603      	mov	r3, r0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fe3a 	bl	8000d3c <__aeabi_i2f>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4965      	ldr	r1, [pc, #404]	; (8003260 <readWaterTDS+0x210>)
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd fe89 	bl	8000de4 <__aeabi_fmul>
 80030d2:	4603      	mov	r3, r0
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b63      	ldr	r3, [pc, #396]	; (8003264 <readWaterTDS+0x214>)
 80030d8:	601a      	str	r2, [r3, #0]
    compensationCoefficient=1.0+0.02*(temperature-25.0);   																								    //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 80030da:	4b63      	ldr	r3, [pc, #396]	; (8003268 <readWaterTDS+0x218>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd f9e8 	bl	80004b4 <__aeabi_f2d>
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	4b60      	ldr	r3, [pc, #384]	; (800326c <readWaterTDS+0x21c>)
 80030ea:	f7fd f883 	bl	80001f4 <__aeabi_dsub>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	a34e      	add	r3, pc, #312	; (adr r3, 8003230 <readWaterTDS+0x1e0>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f7fd fa32 	bl	8000564 <__aeabi_dmul>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	4b58      	ldr	r3, [pc, #352]	; (8003270 <readWaterTDS+0x220>)
 800310e:	f7fd f873 	bl	80001f8 <__adddf3>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	f7fd fd05 	bl	8000b28 <__aeabi_d2f>
 800311e:	4603      	mov	r3, r0
 8003120:	4a54      	ldr	r2, [pc, #336]	; (8003274 <readWaterTDS+0x224>)
 8003122:	6013      	str	r3, [r2, #0]
    compensationVolatge=averageVoltage/compensationCoefficient;  																								//temperature compensation
 8003124:	4b4f      	ldr	r3, [pc, #316]	; (8003264 <readWaterTDS+0x214>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a52      	ldr	r2, [pc, #328]	; (8003274 <readWaterTDS+0x224>)
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd ff0c 	bl	8000f4c <__aeabi_fdiv>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	4b4f      	ldr	r3, [pc, #316]	; (8003278 <readWaterTDS+0x228>)
 800313a:	601a      	str	r2, [r3, #0]
    tdsValue=(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
 800313c:	4b4e      	ldr	r3, [pc, #312]	; (8003278 <readWaterTDS+0x228>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd f9b7 	bl	80004b4 <__aeabi_f2d>
 8003146:	a33c      	add	r3, pc, #240	; (adr r3, 8003238 <readWaterTDS+0x1e8>)
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	f7fd fa0a 	bl	8000564 <__aeabi_dmul>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4614      	mov	r4, r2
 8003156:	461d      	mov	r5, r3
 8003158:	4b47      	ldr	r3, [pc, #284]	; (8003278 <readWaterTDS+0x228>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd f9a9 	bl	80004b4 <__aeabi_f2d>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4620      	mov	r0, r4
 8003168:	4629      	mov	r1, r5
 800316a:	f7fd f9fb 	bl	8000564 <__aeabi_dmul>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4614      	mov	r4, r2
 8003174:	461d      	mov	r5, r3
 8003176:	4b40      	ldr	r3, [pc, #256]	; (8003278 <readWaterTDS+0x228>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd f99a 	bl	80004b4 <__aeabi_f2d>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4620      	mov	r0, r4
 8003186:	4629      	mov	r1, r5
 8003188:	f7fd f9ec 	bl	8000564 <__aeabi_dmul>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4614      	mov	r4, r2
 8003192:	461d      	mov	r5, r3
 8003194:	4b38      	ldr	r3, [pc, #224]	; (8003278 <readWaterTDS+0x228>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7fd f98b 	bl	80004b4 <__aeabi_f2d>
 800319e:	a328      	add	r3, pc, #160	; (adr r3, 8003240 <readWaterTDS+0x1f0>)
 80031a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a4:	f7fd f9de 	bl	8000564 <__aeabi_dmul>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4690      	mov	r8, r2
 80031ae:	4699      	mov	r9, r3
 80031b0:	4b31      	ldr	r3, [pc, #196]	; (8003278 <readWaterTDS+0x228>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd f97d 	bl	80004b4 <__aeabi_f2d>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4640      	mov	r0, r8
 80031c0:	4649      	mov	r1, r9
 80031c2:	f7fd f9cf 	bl	8000564 <__aeabi_dmul>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4620      	mov	r0, r4
 80031cc:	4629      	mov	r1, r5
 80031ce:	f7fd f811 	bl	80001f4 <__aeabi_dsub>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4614      	mov	r4, r2
 80031d8:	461d      	mov	r5, r3
 80031da:	4b27      	ldr	r3, [pc, #156]	; (8003278 <readWaterTDS+0x228>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f968 	bl	80004b4 <__aeabi_f2d>
 80031e4:	a318      	add	r3, pc, #96	; (adr r3, 8003248 <readWaterTDS+0x1f8>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f7fd f9bb 	bl	8000564 <__aeabi_dmul>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4620      	mov	r0, r4
 80031f4:	4629      	mov	r1, r5
 80031f6:	f7fc ffff 	bl	80001f8 <__adddf3>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	4b1d      	ldr	r3, [pc, #116]	; (800327c <readWaterTDS+0x22c>)
 8003208:	f7fd f9ac 	bl	8000564 <__aeabi_dmul>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f7fd fc88 	bl	8000b28 <__aeabi_d2f>
 8003218:	4603      	mov	r3, r0
 800321a:	4a19      	ldr	r2, [pc, #100]	; (8003280 <readWaterTDS+0x230>)
 800321c:	6013      	str	r3, [r2, #0]
    return tdsValue;
 800321e:	4b18      	ldr	r3, [pc, #96]	; (8003280 <readWaterTDS+0x230>)
 8003220:	681b      	ldr	r3, [r3, #0]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800322c:	f3af 8000 	nop.w
 8003230:	47ae147b 	.word	0x47ae147b
 8003234:	3f947ae1 	.word	0x3f947ae1
 8003238:	a3d70a3d 	.word	0xa3d70a3d
 800323c:	4060ad70 	.word	0x4060ad70
 8003240:	1eb851ec 	.word	0x1eb851ec
 8003244:	406ffb85 	.word	0x406ffb85
 8003248:	b851eb85 	.word	0xb851eb85
 800324c:	408acb1e 	.word	0x408acb1e
 8003250:	20000118 	.word	0x20000118
 8003254:	20000644 	.word	0x20000644
 8003258:	20000148 	.word	0x20000148
 800325c:	200006c4 	.word	0x200006c4
 8003260:	3a533332 	.word	0x3a533332
 8003264:	2000014c 	.word	0x2000014c
 8003268:	20000014 	.word	0x20000014
 800326c:	40390000 	.word	0x40390000
 8003270:	3ff00000 	.word	0x3ff00000
 8003274:	20000154 	.word	0x20000154
 8003278:	20000158 	.word	0x20000158
 800327c:	3fe00000 	.word	0x3fe00000
 8003280:	20000150 	.word	0x20000150

08003284 <get_nutrient_ph_value>:

void get_nutrient_ph_value()	// gets nutrient and ph values from the ADC and places it in a buffer
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
	nutrient_ph_values[0] = get_ADC_values(1);
 8003288:	2001      	movs	r0, #1
 800328a:	f7fe f933 	bl	80014f4 <get_ADC_values>
 800328e:	4603      	mov	r3, r0
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd ff93 	bl	80011bc <__aeabi_f2uiz>
 8003296:	4603      	mov	r3, r0
 8003298:	4a06      	ldr	r2, [pc, #24]	; (80032b4 <get_nutrient_ph_value+0x30>)
 800329a:	6013      	str	r3, [r2, #0]
	nutrient_ph_values[1] = get_ADC_values(0);
 800329c:	2000      	movs	r0, #0
 800329e:	f7fe f929 	bl	80014f4 <get_ADC_values>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd ff89 	bl	80011bc <__aeabi_f2uiz>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4a01      	ldr	r2, [pc, #4]	; (80032b4 <get_nutrient_ph_value+0x30>)
 80032ae:	6053      	str	r3, [r2, #4]
}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000118 	.word	0x20000118

080032b8 <readPH>:
{

}
float mili_voltage,ph_value = 0;
float readPH()
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	mili_voltage = read_voltage();
 80032bc:	f7ff fa00 	bl	80026c0 <read_voltage>
 80032c0:	4603      	mov	r3, r0
 80032c2:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <readPH+0x28>)
 80032c4:	6013      	str	r3, [r2, #0]
	ph_value = convert_ph(mili_voltage);
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <readPH+0x28>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fa98 	bl	8002800 <convert_ph>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <readPH+0x2c>)
 80032d4:	6013      	str	r3, [r2, #0]
	return ph_value;
 80032d6:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <readPH+0x2c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	200006c0 	.word	0x200006c0
 80032e4:	2000015c 	.word	0x2000015c

080032e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_MspInit+0x48>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <HAL_MspInit+0x48>)
 80032f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fc:	6453      	str	r3, [r2, #68]	; 0x44
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_MspInit+0x48>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_MspInit+0x48>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a07      	ldr	r2, [pc, #28]	; (8003330 <HAL_MspInit+0x48>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_MspInit+0x48>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <HAL_ADC_MspInit+0x7c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d127      	bne.n	80033a6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <HAL_ADC_MspInit+0x80>)
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	4a15      	ldr	r2, [pc, #84]	; (80033b4 <HAL_ADC_MspInit+0x80>)
 8003360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003364:	6453      	str	r3, [r2, #68]	; 0x44
 8003366:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <HAL_ADC_MspInit+0x80>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <HAL_ADC_MspInit+0x80>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a0e      	ldr	r2, [pc, #56]	; (80033b4 <HAL_ADC_MspInit+0x80>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <HAL_ADC_MspInit+0x80>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN4
    PA5     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = water_ph_Pin|nutrient_level_Pin;
 800338e:	2330      	movs	r3, #48	; 0x30
 8003390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003392:	2303      	movs	r3, #3
 8003394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339a:	f107 0314 	add.w	r3, r7, #20
 800339e:	4619      	mov	r1, r3
 80033a0:	4805      	ldr	r0, [pc, #20]	; (80033b8 <HAL_ADC_MspInit+0x84>)
 80033a2:	f001 f823 	bl	80043ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80033a6:	bf00      	nop
 80033a8:	3728      	adds	r7, #40	; 0x28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40012100 	.word	0x40012100
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40020000 	.word	0x40020000

080033bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a05      	ldr	r2, [pc, #20]	; (80033e0 <HAL_RTC_MspInit+0x24>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d102      	bne.n	80033d4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RTC_MspInit+0x28>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40002800 	.word	0x40002800
 80033e4:	42470e3c 	.word	0x42470e3c

080033e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a32      	ldr	r2, [pc, #200]	; (80034c0 <HAL_TIM_Base_MspInit+0xd8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d10e      	bne.n	8003418 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	4a30      	ldr	r2, [pc, #192]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6453      	str	r3, [r2, #68]	; 0x44
 800340a:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003416:	e04e      	b.n	80034b6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003420:	d10e      	bne.n	8003440 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	4a26      	ldr	r2, [pc, #152]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	6413      	str	r3, [r2, #64]	; 0x40
 8003432:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	69bb      	ldr	r3, [r7, #24]
}
 800343e:	e03a      	b.n	80034b6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a20      	ldr	r2, [pc, #128]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d10e      	bne.n	8003468 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	4a1c      	ldr	r2, [pc, #112]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
 800345a:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]
}
 8003466:	e026      	b.n	80034b6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_TIM_Base_MspInit+0xe4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	4a12      	ldr	r2, [pc, #72]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 800347c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003480:	6453      	str	r3, [r2, #68]	; 0x44
 8003482:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
}
 800348e:	e012      	b.n	80034b6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM12)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <HAL_TIM_Base_MspInit+0xe8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10d      	bne.n	80034b6 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 80034a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a8:	6413      	str	r3, [r2, #64]	; 0x40
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
}
 80034b6:	bf00      	nop
 80034b8:	3724      	adds	r7, #36	; 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr
 80034c0:	40010000 	.word	0x40010000
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40000800 	.word	0x40000800
 80034cc:	40014400 	.word	0x40014400
 80034d0:	40001800 	.word	0x40001800

080034d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a24      	ldr	r2, [pc, #144]	; (8003584 <HAL_TIM_MspPostInit+0xb0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d11f      	bne.n	8003536 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	4b23      	ldr	r3, [pc, #140]	; (8003588 <HAL_TIM_MspPostInit+0xb4>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a22      	ldr	r2, [pc, #136]	; (8003588 <HAL_TIM_MspPostInit+0xb4>)
 8003500:	f043 0310 	orr.w	r3, r3, #16
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_TIM_MspPostInit+0xb4>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin|system_fan_speed_Pin;
 8003512:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8003516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003518:	2302      	movs	r3, #2
 800351a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003520:	2300      	movs	r3, #0
 8003522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003524:	2301      	movs	r3, #1
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	4619      	mov	r1, r3
 800352e:	4817      	ldr	r0, [pc, #92]	; (800358c <HAL_TIM_MspPostInit+0xb8>)
 8003530:	f000 ff5c 	bl	80043ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8003534:	e022      	b.n	800357c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a15      	ldr	r2, [pc, #84]	; (8003590 <HAL_TIM_MspPostInit+0xbc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d11d      	bne.n	800357c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	4b10      	ldr	r3, [pc, #64]	; (8003588 <HAL_TIM_MspPostInit+0xb4>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	4a0f      	ldr	r2, [pc, #60]	; (8003588 <HAL_TIM_MspPostInit+0xb4>)
 800354a:	f043 0320 	orr.w	r3, r3, #32
 800354e:	6313      	str	r3, [r2, #48]	; 0x30
 8003550:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <HAL_TIM_MspPostInit+0xb4>)
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 800355c:	2340      	movs	r3, #64	; 0x40
 800355e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003560:	2302      	movs	r3, #2
 8003562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003568:	2300      	movs	r3, #0
 800356a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800356c:	2303      	movs	r3, #3
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	4619      	mov	r1, r3
 8003576:	4807      	ldr	r0, [pc, #28]	; (8003594 <HAL_TIM_MspPostInit+0xc0>)
 8003578:	f000 ff38 	bl	80043ec <HAL_GPIO_Init>
}
 800357c:	bf00      	nop
 800357e:	3728      	adds	r7, #40	; 0x28
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40010000 	.word	0x40010000
 8003588:	40023800 	.word	0x40023800
 800358c:	40021000 	.word	0x40021000
 8003590:	40014400 	.word	0x40014400
 8003594:	40021400 	.word	0x40021400

08003598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800359c:	e7fe      	b.n	800359c <NMI_Handler+0x4>

0800359e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035a2:	e7fe      	b.n	80035a2 <HardFault_Handler+0x4>

080035a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035a8:	e7fe      	b.n	80035a8 <MemManage_Handler+0x4>

080035aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035ae:	e7fe      	b.n	80035ae <BusFault_Handler+0x4>

080035b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035b4:	e7fe      	b.n	80035b4 <UsageFault_Handler+0x4>

080035b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035b6:	b480      	push	{r7}
 80035b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035c2:	b480      	push	{r7}
 80035c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr

080035ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ce:	b480      	push	{r7}
 80035d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035de:	f000 fa0d 	bl	80039fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80035ec:	4802      	ldr	r0, [pc, #8]	; (80035f8 <OTG_FS_IRQHandler+0x10>)
 80035ee:	f001 fb4d 	bl	8004c8c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20002b78 	.word	0x20002b78

080035fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003604:	4a14      	ldr	r2, [pc, #80]	; (8003658 <_sbrk+0x5c>)
 8003606:	4b15      	ldr	r3, [pc, #84]	; (800365c <_sbrk+0x60>)
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003610:	4b13      	ldr	r3, [pc, #76]	; (8003660 <_sbrk+0x64>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003618:	4b11      	ldr	r3, [pc, #68]	; (8003660 <_sbrk+0x64>)
 800361a:	4a12      	ldr	r2, [pc, #72]	; (8003664 <_sbrk+0x68>)
 800361c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <_sbrk+0x64>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	429a      	cmp	r2, r3
 800362a:	d207      	bcs.n	800363c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800362c:	f00d fa1c 	bl	8010a68 <__errno>
 8003630:	4603      	mov	r3, r0
 8003632:	220c      	movs	r2, #12
 8003634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003636:	f04f 33ff 	mov.w	r3, #4294967295
 800363a:	e009      	b.n	8003650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <_sbrk+0x64>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003642:	4b07      	ldr	r3, [pc, #28]	; (8003660 <_sbrk+0x64>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	4a05      	ldr	r2, [pc, #20]	; (8003660 <_sbrk+0x64>)
 800364c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	2001c000 	.word	0x2001c000
 800365c:	00000800 	.word	0x00000800
 8003660:	20000160 	.word	0x20000160
 8003664:	20002e90 	.word	0x20002e90

08003668 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <DWT_Delay_Init>:
#include "main.h"
#include "sensors.h"
#include "water_temp_driver.h"

uint32_t DWT_Delay_Init(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8003678:	4b14      	ldr	r3, [pc, #80]	; (80036cc <DWT_Delay_Init+0x58>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4a13      	ldr	r2, [pc, #76]	; (80036cc <DWT_Delay_Init+0x58>)
 800367e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003682:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <DWT_Delay_Init+0x58>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a10      	ldr	r2, [pc, #64]	; (80036cc <DWT_Delay_Init+0x58>)
 800368a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800368e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8003690:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <DWT_Delay_Init+0x5c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0e      	ldr	r2, [pc, #56]	; (80036d0 <DWT_Delay_Init+0x5c>)
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <DWT_Delay_Init+0x5c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0b      	ldr	r2, [pc, #44]	; (80036d0 <DWT_Delay_Init+0x5c>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80036a8:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <DWT_Delay_Init+0x5c>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80036ae:	bf00      	nop
    __ASM volatile ("NOP");
 80036b0:	bf00      	nop
    __ASM volatile ("NOP");
 80036b2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <DWT_Delay_Init+0x5c>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80036bc:	2300      	movs	r3, #0
 80036be:	e000      	b.n	80036c2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80036c0:	2301      	movs	r3, #1
    }
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000edf0 	.word	0xe000edf0
 80036d0:	e0001000 	.word	0xe0001000

080036d4 <DWT_Delay_us>:

 void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <DWT_Delay_us+0x48>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80036e2:	f003 f9c1 	bl	8006a68 <HAL_RCC_GetHCLKFreq>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <DWT_Delay_us+0x4c>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	0c9b      	lsrs	r3, r3, #18
 80036f0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80036fc:	bf00      	nop
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <DWT_Delay_us+0x48>)
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad2      	subs	r2, r2, r3
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	1acb      	subs	r3, r1, r3
 800370c:	429a      	cmp	r2, r3
 800370e:	d3f6      	bcc.n	80036fe <DWT_Delay_us+0x2a>
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	e0001000 	.word	0xe0001000
 8003720:	431bde83 	.word	0x431bde83

08003724 <DS18B20_Start>:


uint8_t DS18B20_Start (void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
 800372e:	2104      	movs	r1, #4
 8003730:	4813      	ldr	r0, [pc, #76]	; (8003780 <DS18B20_Start+0x5c>)
 8003732:	f000 f8ab 	bl	800388c <Set_Pin_Output>
	HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin low
 8003736:	2200      	movs	r2, #0
 8003738:	2104      	movs	r1, #4
 800373a:	4811      	ldr	r0, [pc, #68]	; (8003780 <DS18B20_Start+0x5c>)
 800373c:	f001 f80b 	bl	8004756 <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 8003740:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003744:	f7ff ffc6 	bl	80036d4 <DWT_Delay_us>

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);    // set the pin as input
 8003748:	2104      	movs	r1, #4
 800374a:	480d      	ldr	r0, [pc, #52]	; (8003780 <DS18B20_Start+0x5c>)
 800374c:	f000 f8bc 	bl	80038c8 <Set_Pin_Input>
	DWT_Delay_us (80);    // delay according to datasheet
 8003750:	2050      	movs	r0, #80	; 0x50
 8003752:	f7ff ffbf 	bl	80036d4 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8003756:	2104      	movs	r1, #4
 8003758:	4809      	ldr	r0, [pc, #36]	; (8003780 <DS18B20_Start+0x5c>)
 800375a:	f000 ffe5 	bl	8004728 <HAL_GPIO_ReadPin>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <DS18B20_Start+0x46>
 8003764:	2301      	movs	r3, #1
 8003766:	71fb      	strb	r3, [r7, #7]
 8003768:	e001      	b.n	800376e <DS18B20_Start+0x4a>
	else Response = -1;
 800376a:	23ff      	movs	r3, #255	; 0xff
 800376c:	71fb      	strb	r3, [r7, #7]

	DWT_Delay_us (400); // 480 us delay totally.
 800376e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003772:	f7ff ffaf 	bl	80036d4 <DWT_Delay_us>

	return Response;
 8003776:	79fb      	ldrb	r3, [r7, #7]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40020400 	.word	0x40020400

08003784 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 800378e:	2104      	movs	r1, #4
 8003790:	481e      	ldr	r0, [pc, #120]	; (800380c <DS18B20_Write+0x88>)
 8003792:	f000 f87b 	bl	800388c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e02e      	b.n	80037fa <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 800379c:	79fa      	ldrb	r2, [r7, #7]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	fa42 f303 	asr.w	r3, r2, r3
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 80037ac:	2104      	movs	r1, #4
 80037ae:	4817      	ldr	r0, [pc, #92]	; (800380c <DS18B20_Write+0x88>)
 80037b0:	f000 f86c 	bl	800388c <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 80037b4:	2200      	movs	r2, #0
 80037b6:	2104      	movs	r1, #4
 80037b8:	4814      	ldr	r0, [pc, #80]	; (800380c <DS18B20_Write+0x88>)
 80037ba:	f000 ffcc 	bl	8004756 <HAL_GPIO_WritePin>
			DWT_Delay_us (5);  // wait for 1 us
 80037be:	2005      	movs	r0, #5
 80037c0:	f7ff ff88 	bl	80036d4 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 80037c4:	2104      	movs	r1, #4
 80037c6:	4811      	ldr	r0, [pc, #68]	; (800380c <DS18B20_Write+0x88>)
 80037c8:	f000 f87e 	bl	80038c8 <Set_Pin_Input>
			DWT_Delay_us (65);  // wait for 60 us
 80037cc:	2041      	movs	r0, #65	; 0x41
 80037ce:	f7ff ff81 	bl	80036d4 <DWT_Delay_us>
 80037d2:	e00f      	b.n	80037f4 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);
 80037d4:	2104      	movs	r1, #4
 80037d6:	480d      	ldr	r0, [pc, #52]	; (800380c <DS18B20_Write+0x88>)
 80037d8:	f000 f858 	bl	800388c <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 80037dc:	2200      	movs	r2, #0
 80037de:	2104      	movs	r1, #4
 80037e0:	480a      	ldr	r0, [pc, #40]	; (800380c <DS18B20_Write+0x88>)
 80037e2:	f000 ffb8 	bl	8004756 <HAL_GPIO_WritePin>
			DWT_Delay_us (65);  // wait for 60 us
 80037e6:	2041      	movs	r0, #65	; 0x41
 80037e8:	f7ff ff74 	bl	80036d4 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 80037ec:	2104      	movs	r1, #4
 80037ee:	4807      	ldr	r0, [pc, #28]	; (800380c <DS18B20_Write+0x88>)
 80037f0:	f000 f86a 	bl	80038c8 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3301      	adds	r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b07      	cmp	r3, #7
 80037fe:	ddcd      	ble.n	800379c <DS18B20_Write+0x18>
		}
	}
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40020400 	.word	0x40020400

08003810 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8003816:	2300      	movs	r3, #0
 8003818:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 800381a:	2104      	movs	r1, #4
 800381c:	481a      	ldr	r0, [pc, #104]	; (8003888 <DS18B20_Read+0x78>)
 800381e:	f000 f853 	bl	80038c8 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8003822:	2300      	movs	r3, #0
 8003824:	603b      	str	r3, [r7, #0]
 8003826:	e026      	b.n	8003876 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set as output
 8003828:	2104      	movs	r1, #4
 800382a:	4817      	ldr	r0, [pc, #92]	; (8003888 <DS18B20_Read+0x78>)
 800382c:	f000 f82e 	bl	800388c <Set_Pin_Output>

		HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the data pin LOW
 8003830:	2200      	movs	r2, #0
 8003832:	2104      	movs	r1, #4
 8003834:	4814      	ldr	r0, [pc, #80]	; (8003888 <DS18B20_Read+0x78>)
 8003836:	f000 ff8e 	bl	8004756 <HAL_GPIO_WritePin>
		DWT_Delay_us (5);  // wait for > 1us
 800383a:	2005      	movs	r0, #5
 800383c:	f7ff ff4a 	bl	80036d4 <DWT_Delay_us>

		Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 8003840:	2104      	movs	r1, #4
 8003842:	4811      	ldr	r0, [pc, #68]	; (8003888 <DS18B20_Read+0x78>)
 8003844:	f000 f840 	bl	80038c8 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))  // if the pin is HIGH
 8003848:	2104      	movs	r1, #4
 800384a:	480f      	ldr	r0, [pc, #60]	; (8003888 <DS18B20_Read+0x78>)
 800384c:	f000 ff6c 	bl	8004728 <HAL_GPIO_ReadPin>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8003856:	2201      	movs	r2, #1
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	b25a      	sxtb	r2, r3
 8003860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003864:	4313      	orrs	r3, r2
 8003866:	b25b      	sxtb	r3, r3
 8003868:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (50);  // wait for 60 us
 800386a:	2032      	movs	r0, #50	; 0x32
 800386c:	f7ff ff32 	bl	80036d4 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	3301      	adds	r3, #1
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b07      	cmp	r3, #7
 800387a:	ddd5      	ble.n	8003828 <DS18B20_Read+0x18>
	}
	return value;
 800387c:	79fb      	ldrb	r3, [r7, #7]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40020400 	.word	0x40020400

0800388c <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003898:	f107 030c 	add.w	r3, r7, #12
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	60da      	str	r2, [r3, #12]
 80038a6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80038a8:	887b      	ldrh	r3, [r7, #2]
 80038aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ac:	2301      	movs	r3, #1
 80038ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80038b4:	f107 030c 	add.w	r3, r7, #12
 80038b8:	4619      	mov	r1, r3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fd96 	bl	80043ec <HAL_GPIO_Init>
}
 80038c0:	bf00      	nop
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80038e4:	887b      	ldrh	r3, [r7, #2]
 80038e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038ec:	2301      	movs	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80038f0:	f107 030c 	add.w	r3, r7, #12
 80038f4:	4619      	mov	r1, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fd78 	bl	80043ec <HAL_GPIO_Init>
}
 80038fc:	bf00      	nop
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800393c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003908:	480d      	ldr	r0, [pc, #52]	; (8003940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800390a:	490e      	ldr	r1, [pc, #56]	; (8003944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800390c:	4a0e      	ldr	r2, [pc, #56]	; (8003948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800390e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003910:	e002      	b.n	8003918 <LoopCopyDataInit>

08003912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003916:	3304      	adds	r3, #4

08003918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800391a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800391c:	d3f9      	bcc.n	8003912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800391e:	4a0b      	ldr	r2, [pc, #44]	; (800394c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003920:	4c0b      	ldr	r4, [pc, #44]	; (8003950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003924:	e001      	b.n	800392a <LoopFillZerobss>

08003926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003928:	3204      	adds	r2, #4

0800392a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800392a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800392c:	d3fb      	bcc.n	8003926 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800392e:	f7ff fe9b 	bl	8003668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003932:	f00d f89f 	bl	8010a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003936:	f7fe fa57 	bl	8001de8 <main>
  bx  lr
 800393a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800393c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003944:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8003948:	08011a0c 	.word	0x08011a0c
  ldr r2, =_sbss
 800394c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003950:	20002e8c 	.word	0x20002e8c

08003954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003954:	e7fe      	b.n	8003954 <ADC_IRQHandler>
	...

08003958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <HAL_Init+0x40>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0d      	ldr	r2, [pc, #52]	; (8003998 <HAL_Init+0x40>)
 8003962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_Init+0x40>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <HAL_Init+0x40>)
 800396e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <HAL_Init+0x40>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a07      	ldr	r2, [pc, #28]	; (8003998 <HAL_Init+0x40>)
 800397a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003980:	2003      	movs	r0, #3
 8003982:	f000 fcf1 	bl	8004368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003986:	200f      	movs	r0, #15
 8003988:	f000 f808 	bl	800399c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800398c:	f7ff fcac 	bl	80032e8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023c00 	.word	0x40023c00

0800399c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039a4:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <HAL_InitTick+0x54>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_InitTick+0x58>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	4619      	mov	r1, r3
 80039ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80039b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fd09 	bl	80043d2 <HAL_SYSTICK_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e00e      	b.n	80039e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b0f      	cmp	r3, #15
 80039ce:	d80a      	bhi.n	80039e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039d0:	2200      	movs	r2, #0
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	f000 fcd1 	bl	800437e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039dc:	4a06      	ldr	r2, [pc, #24]	; (80039f8 <HAL_InitTick+0x5c>)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e000      	b.n	80039e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000018 	.word	0x20000018
 80039f4:	20000020 	.word	0x20000020
 80039f8:	2000001c 	.word	0x2000001c

080039fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_IncTick+0x1c>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_IncTick+0x20>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	4a03      	ldr	r2, [pc, #12]	; (8003a1c <HAL_IncTick+0x20>)
 8003a0e:	6013      	str	r3, [r2, #0]
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	20000020 	.word	0x20000020
 8003a1c:	20000740 	.word	0x20000740

08003a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return uwTick;
 8003a24:	4b02      	ldr	r3, [pc, #8]	; (8003a30 <HAL_GetTick+0x10>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	20000740 	.word	0x20000740

08003a34 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a3c:	f7ff fff0 	bl	8003a20 <HAL_GetTick>
 8003a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d005      	beq.n	8003a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_Delay+0x44>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4413      	add	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a5a:	bf00      	nop
 8003a5c:	f7ff ffe0 	bl	8003a20 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d8f7      	bhi.n	8003a5c <HAL_Delay+0x28>
  {
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000020 	.word	0x20000020

08003a7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e033      	b.n	8003afa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff fc4a 	bl	8003334 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d118      	bne.n	8003aec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ac2:	f023 0302 	bic.w	r3, r3, #2
 8003ac6:	f043 0202 	orr.w	r2, r3, #2
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa78 	bl	8003fc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8003aea:	e001      	b.n	8003af0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_ADC_Start+0x1a>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e095      	b.n	8003c4a <HAL_ADC_Start+0x146>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d018      	beq.n	8003b66 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b44:	4b43      	ldr	r3, [pc, #268]	; (8003c54 <HAL_ADC_Start+0x150>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a43      	ldr	r2, [pc, #268]	; (8003c58 <HAL_ADC_Start+0x154>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	0c9a      	lsrs	r2, r3, #18
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8003b58:	e002      	b.n	8003b60 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f9      	bne.n	8003b5a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d15d      	bne.n	8003c30 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb2:	d106      	bne.n	8003bc2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb8:	f023 0206 	bic.w	r2, r3, #6
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	645a      	str	r2, [r3, #68]	; 0x44
 8003bc0:	e002      	b.n	8003bc8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003bd8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003bda:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <HAL_ADC_Start+0x158>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10f      	bne.n	8003c06 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d129      	bne.n	8003c48 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	e020      	b.n	8003c48 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <HAL_ADC_Start+0x15c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d11b      	bne.n	8003c48 <HAL_ADC_Start+0x144>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d114      	bne.n	8003c48 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	e00b      	b.n	8003c48 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f043 0210 	orr.w	r2, r3, #16
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	f043 0201 	orr.w	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr
 8003c54:	20000018 	.word	0x20000018
 8003c58:	431bde83 	.word	0x431bde83
 8003c5c:	40012300 	.word	0x40012300
 8003c60:	40012000 	.word	0x40012000

08003c64 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c80:	d113      	bne.n	8003caa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c90:	d10b      	bne.n	8003caa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f043 0220 	orr.w	r2, r3, #32
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e05c      	b.n	8003d64 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003caa:	f7ff feb9 	bl	8003a20 <HAL_GetTick>
 8003cae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003cb0:	e01a      	b.n	8003ce8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d016      	beq.n	8003ce8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <HAL_ADC_PollForConversion+0x6c>
 8003cc0:	f7ff feae 	bl	8003a20 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d20b      	bcs.n	8003ce8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f043 0204 	orr.w	r2, r3, #4
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e03d      	b.n	8003d64 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d1dd      	bne.n	8003cb2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f06f 0212 	mvn.w	r2, #18
 8003cfe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d123      	bne.n	8003d62 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d11f      	bne.n	8003d62 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d111      	bne.n	8003d62 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d105      	bne.n	8003d62 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f043 0201 	orr.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x1c>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e103      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x224>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b09      	cmp	r3, #9
 8003dae:	d925      	bls.n	8003dfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68d9      	ldr	r1, [r3, #12]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3b1e      	subs	r3, #30
 8003dc6:	2207      	movs	r2, #7
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43da      	mvns	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	400a      	ands	r2, r1
 8003dd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68d9      	ldr	r1, [r3, #12]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	4618      	mov	r0, r3
 8003de8:	4603      	mov	r3, r0
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	4403      	add	r3, r0
 8003dee:	3b1e      	subs	r3, #30
 8003df0:	409a      	lsls	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	e022      	b.n	8003e42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6919      	ldr	r1, [r3, #16]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	2207      	movs	r2, #7
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	400a      	ands	r2, r1
 8003e1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6919      	ldr	r1, [r3, #16]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	4618      	mov	r0, r3
 8003e32:	4603      	mov	r3, r0
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	4403      	add	r3, r0
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d824      	bhi.n	8003e94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	3b05      	subs	r3, #5
 8003e5c:	221f      	movs	r2, #31
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43da      	mvns	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	400a      	ands	r2, r1
 8003e6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	4618      	mov	r0, r3
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	3b05      	subs	r3, #5
 8003e86:	fa00 f203 	lsl.w	r2, r0, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	635a      	str	r2, [r3, #52]	; 0x34
 8003e92:	e04c      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b0c      	cmp	r3, #12
 8003e9a:	d824      	bhi.n	8003ee6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	3b23      	subs	r3, #35	; 0x23
 8003eae:	221f      	movs	r2, #31
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	43da      	mvns	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	400a      	ands	r2, r1
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	4618      	mov	r0, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3b23      	subs	r3, #35	; 0x23
 8003ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ee4:	e023      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3b41      	subs	r3, #65	; 0x41
 8003ef8:	221f      	movs	r2, #31
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43da      	mvns	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	400a      	ands	r2, r1
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	4618      	mov	r0, r3
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	3b41      	subs	r3, #65	; 0x41
 8003f22:	fa00 f203 	lsl.w	r2, r0, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a20      	ldr	r2, [pc, #128]	; (8003fb4 <HAL_ADC_ConfigChannel+0x230>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d109      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x1c8>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b12      	cmp	r3, #18
 8003f3e:	d105      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_ADC_ConfigChannel+0x234>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <HAL_ADC_ConfigChannel+0x234>)
 8003f46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f4a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <HAL_ADC_ConfigChannel+0x230>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d123      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x21a>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b10      	cmp	r3, #16
 8003f5c:	d003      	beq.n	8003f66 <HAL_ADC_ConfigChannel+0x1e2>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b11      	cmp	r3, #17
 8003f64:	d11b      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003f66:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <HAL_ADC_ConfigChannel+0x234>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4a13      	ldr	r2, [pc, #76]	; (8003fb8 <HAL_ADC_ConfigChannel+0x234>)
 8003f6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f70:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d111      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f7a:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <HAL_ADC_ConfigChannel+0x238>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a10      	ldr	r2, [pc, #64]	; (8003fc0 <HAL_ADC_ConfigChannel+0x23c>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	0c9a      	lsrs	r2, r3, #18
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003f90:	e002      	b.n	8003f98 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3b01      	subs	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f9      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40012000 	.word	0x40012000
 8003fb8:	40012300 	.word	0x40012300
 8003fbc:	20000018 	.word	0x20000018
 8003fc0:	431bde83 	.word	0x431bde83

08003fc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003fcc:	4b7e      	ldr	r3, [pc, #504]	; (80041c8 <ADC_Init+0x204>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4a7d      	ldr	r2, [pc, #500]	; (80041c8 <ADC_Init+0x204>)
 8003fd2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003fd6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003fd8:	4b7b      	ldr	r3, [pc, #492]	; (80041c8 <ADC_Init+0x204>)
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4979      	ldr	r1, [pc, #484]	; (80041c8 <ADC_Init+0x204>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ff4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6859      	ldr	r1, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	021a      	lsls	r2, r3, #8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800403a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6899      	ldr	r1, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	4a5e      	ldr	r2, [pc, #376]	; (80041cc <ADC_Init+0x208>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d022      	beq.n	800409e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004066:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6899      	ldr	r1, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004088:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6899      	ldr	r1, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	e00f      	b.n	80040be <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0202 	bic.w	r2, r2, #2
 80040cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6899      	ldr	r1, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7e1b      	ldrb	r3, [r3, #24]
 80040d8:	005a      	lsls	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d027      	beq.n	800413c <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800410a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	3b01      	subs	r3, #1
 8004112:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004116:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	fa92 f2a2 	rbit	r2, r2
 800411e:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	fab2 f282 	clz	r2, r2
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	fa03 f102 	lsl.w	r1, r3, r2
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	e007      	b.n	800414c <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800414a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800415a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	3b01      	subs	r3, #1
 8004168:	051a      	lsls	r2, r3, #20
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004180:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800418e:	025a      	lsls	r2, r3, #9
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6899      	ldr	r1, [r3, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	029a      	lsls	r2, r3, #10
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
}
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40012300 	.word	0x40012300
 80041cc:	0f000001 	.word	0x0f000001

080041d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041e0:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <__NVIC_SetPriorityGrouping+0x44>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041ec:	4013      	ands	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004202:	4a04      	ldr	r2, [pc, #16]	; (8004214 <__NVIC_SetPriorityGrouping+0x44>)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	60d3      	str	r3, [r2, #12]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <__NVIC_GetPriorityGrouping+0x18>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	f003 0307 	and.w	r3, r3, #7
}
 8004226:	4618      	mov	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	2b00      	cmp	r3, #0
 8004244:	db0b      	blt.n	800425e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	f003 021f 	and.w	r2, r3, #31
 800424c:	4906      	ldr	r1, [pc, #24]	; (8004268 <__NVIC_EnableIRQ+0x34>)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	2001      	movs	r0, #1
 8004256:	fa00 f202 	lsl.w	r2, r0, r2
 800425a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	e000e100 	.word	0xe000e100

0800426c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	6039      	str	r1, [r7, #0]
 8004276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427c:	2b00      	cmp	r3, #0
 800427e:	db0a      	blt.n	8004296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	490c      	ldr	r1, [pc, #48]	; (80042b8 <__NVIC_SetPriority+0x4c>)
 8004286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428a:	0112      	lsls	r2, r2, #4
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	440b      	add	r3, r1
 8004290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004294:	e00a      	b.n	80042ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	4908      	ldr	r1, [pc, #32]	; (80042bc <__NVIC_SetPriority+0x50>)
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	3b04      	subs	r3, #4
 80042a4:	0112      	lsls	r2, r2, #4
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	440b      	add	r3, r1
 80042aa:	761a      	strb	r2, [r3, #24]
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	e000e100 	.word	0xe000e100
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b089      	sub	sp, #36	; 0x24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f1c3 0307 	rsb	r3, r3, #7
 80042da:	2b04      	cmp	r3, #4
 80042dc:	bf28      	it	cs
 80042de:	2304      	movcs	r3, #4
 80042e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3304      	adds	r3, #4
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d902      	bls.n	80042f0 <NVIC_EncodePriority+0x30>
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3b03      	subs	r3, #3
 80042ee:	e000      	b.n	80042f2 <NVIC_EncodePriority+0x32>
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f4:	f04f 32ff 	mov.w	r2, #4294967295
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43da      	mvns	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	401a      	ands	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004308:	f04f 31ff 	mov.w	r1, #4294967295
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	fa01 f303 	lsl.w	r3, r1, r3
 8004312:	43d9      	mvns	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004318:	4313      	orrs	r3, r2
         );
}
 800431a:	4618      	mov	r0, r3
 800431c:	3724      	adds	r7, #36	; 0x24
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr

08004324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3b01      	subs	r3, #1
 8004330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004334:	d301      	bcc.n	800433a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004336:	2301      	movs	r3, #1
 8004338:	e00f      	b.n	800435a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800433a:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <SysTick_Config+0x40>)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3b01      	subs	r3, #1
 8004340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004342:	210f      	movs	r1, #15
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	f7ff ff90 	bl	800426c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <SysTick_Config+0x40>)
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004352:	4b04      	ldr	r3, [pc, #16]	; (8004364 <SysTick_Config+0x40>)
 8004354:	2207      	movs	r2, #7
 8004356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	e000e010 	.word	0xe000e010

08004368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ff2d 	bl	80041d0 <__NVIC_SetPriorityGrouping>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800437e:	b580      	push	{r7, lr}
 8004380:	b086      	sub	sp, #24
 8004382:	af00      	add	r7, sp, #0
 8004384:	4603      	mov	r3, r0
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004390:	f7ff ff42 	bl	8004218 <__NVIC_GetPriorityGrouping>
 8004394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	6978      	ldr	r0, [r7, #20]
 800439c:	f7ff ff90 	bl	80042c0 <NVIC_EncodePriority>
 80043a0:	4602      	mov	r2, r0
 80043a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff5f 	bl	800426c <__NVIC_SetPriority>
}
 80043ae:	bf00      	nop
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	4603      	mov	r3, r0
 80043be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ff35 	bl	8004234 <__NVIC_EnableIRQ>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ffa2 	bl	8004324 <SysTick_Config>
 80043e0:	4603      	mov	r3, r0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043fa:	e16f      	b.n	80046dc <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	2101      	movs	r1, #1
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	4013      	ands	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 8161 	beq.w	80046d6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b01      	cmp	r3, #1
 800441e:	d005      	beq.n	800442c <HAL_GPIO_Init+0x40>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d130      	bne.n	800448e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	2203      	movs	r2, #3
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	4013      	ands	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004462:	2201      	movs	r2, #1
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4013      	ands	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	091b      	lsrs	r3, r3, #4
 8004478:	f003 0201 	and.w	r2, r3, #1
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b03      	cmp	r3, #3
 8004498:	d017      	beq.n	80044ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	2203      	movs	r2, #3
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4013      	ands	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d123      	bne.n	800451e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	08da      	lsrs	r2, r3, #3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3208      	adds	r2, #8
 80044de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	220f      	movs	r2, #15
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4013      	ands	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	08da      	lsrs	r2, r3, #3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3208      	adds	r2, #8
 8004518:	6939      	ldr	r1, [r7, #16]
 800451a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	2203      	movs	r2, #3
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43db      	mvns	r3, r3
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4013      	ands	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f003 0203 	and.w	r2, r3, #3
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 80bb 	beq.w	80046d6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004560:	2300      	movs	r3, #0
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	4b64      	ldr	r3, [pc, #400]	; (80046f8 <HAL_GPIO_Init+0x30c>)
 8004566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004568:	4a63      	ldr	r2, [pc, #396]	; (80046f8 <HAL_GPIO_Init+0x30c>)
 800456a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800456e:	6453      	str	r3, [r2, #68]	; 0x44
 8004570:	4b61      	ldr	r3, [pc, #388]	; (80046f8 <HAL_GPIO_Init+0x30c>)
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800457c:	4a5f      	ldr	r2, [pc, #380]	; (80046fc <HAL_GPIO_Init+0x310>)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	3302      	adds	r3, #2
 8004584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	220f      	movs	r2, #15
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4013      	ands	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a57      	ldr	r2, [pc, #348]	; (8004700 <HAL_GPIO_Init+0x314>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d031      	beq.n	800460c <HAL_GPIO_Init+0x220>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a56      	ldr	r2, [pc, #344]	; (8004704 <HAL_GPIO_Init+0x318>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d02b      	beq.n	8004608 <HAL_GPIO_Init+0x21c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a55      	ldr	r2, [pc, #340]	; (8004708 <HAL_GPIO_Init+0x31c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d025      	beq.n	8004604 <HAL_GPIO_Init+0x218>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a54      	ldr	r2, [pc, #336]	; (800470c <HAL_GPIO_Init+0x320>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d01f      	beq.n	8004600 <HAL_GPIO_Init+0x214>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a53      	ldr	r2, [pc, #332]	; (8004710 <HAL_GPIO_Init+0x324>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d019      	beq.n	80045fc <HAL_GPIO_Init+0x210>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a52      	ldr	r2, [pc, #328]	; (8004714 <HAL_GPIO_Init+0x328>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d013      	beq.n	80045f8 <HAL_GPIO_Init+0x20c>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a51      	ldr	r2, [pc, #324]	; (8004718 <HAL_GPIO_Init+0x32c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00d      	beq.n	80045f4 <HAL_GPIO_Init+0x208>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a50      	ldr	r2, [pc, #320]	; (800471c <HAL_GPIO_Init+0x330>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d007      	beq.n	80045f0 <HAL_GPIO_Init+0x204>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a4f      	ldr	r2, [pc, #316]	; (8004720 <HAL_GPIO_Init+0x334>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d101      	bne.n	80045ec <HAL_GPIO_Init+0x200>
 80045e8:	2308      	movs	r3, #8
 80045ea:	e010      	b.n	800460e <HAL_GPIO_Init+0x222>
 80045ec:	2309      	movs	r3, #9
 80045ee:	e00e      	b.n	800460e <HAL_GPIO_Init+0x222>
 80045f0:	2307      	movs	r3, #7
 80045f2:	e00c      	b.n	800460e <HAL_GPIO_Init+0x222>
 80045f4:	2306      	movs	r3, #6
 80045f6:	e00a      	b.n	800460e <HAL_GPIO_Init+0x222>
 80045f8:	2305      	movs	r3, #5
 80045fa:	e008      	b.n	800460e <HAL_GPIO_Init+0x222>
 80045fc:	2304      	movs	r3, #4
 80045fe:	e006      	b.n	800460e <HAL_GPIO_Init+0x222>
 8004600:	2303      	movs	r3, #3
 8004602:	e004      	b.n	800460e <HAL_GPIO_Init+0x222>
 8004604:	2302      	movs	r3, #2
 8004606:	e002      	b.n	800460e <HAL_GPIO_Init+0x222>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <HAL_GPIO_Init+0x222>
 800460c:	2300      	movs	r3, #0
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	f002 0203 	and.w	r2, r2, #3
 8004614:	0092      	lsls	r2, r2, #2
 8004616:	4093      	lsls	r3, r2
 8004618:	461a      	mov	r2, r3
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004620:	4936      	ldr	r1, [pc, #216]	; (80046fc <HAL_GPIO_Init+0x310>)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	3302      	adds	r3, #2
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800462e:	4b3d      	ldr	r3, [pc, #244]	; (8004724 <HAL_GPIO_Init+0x338>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	43db      	mvns	r3, r3
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4013      	ands	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004652:	4a34      	ldr	r2, [pc, #208]	; (8004724 <HAL_GPIO_Init+0x338>)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004658:	4b32      	ldr	r3, [pc, #200]	; (8004724 <HAL_GPIO_Init+0x338>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	43db      	mvns	r3, r3
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4013      	ands	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800467c:	4a29      	ldr	r2, [pc, #164]	; (8004724 <HAL_GPIO_Init+0x338>)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004682:	4b28      	ldr	r3, [pc, #160]	; (8004724 <HAL_GPIO_Init+0x338>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	43db      	mvns	r3, r3
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80046a6:	4a1f      	ldr	r2, [pc, #124]	; (8004724 <HAL_GPIO_Init+0x338>)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046ac:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <HAL_GPIO_Init+0x338>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80046d0:	4a14      	ldr	r2, [pc, #80]	; (8004724 <HAL_GPIO_Init+0x338>)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	3301      	adds	r3, #1
 80046da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	fa22 f303 	lsr.w	r3, r2, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f47f ae88 	bne.w	80043fc <HAL_GPIO_Init+0x10>
  }
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	371c      	adds	r7, #28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40013800 	.word	0x40013800
 8004700:	40020000 	.word	0x40020000
 8004704:	40020400 	.word	0x40020400
 8004708:	40020800 	.word	0x40020800
 800470c:	40020c00 	.word	0x40020c00
 8004710:	40021000 	.word	0x40021000
 8004714:	40021400 	.word	0x40021400
 8004718:	40021800 	.word	0x40021800
 800471c:	40021c00 	.word	0x40021c00
 8004720:	40022000 	.word	0x40022000
 8004724:	40013c00 	.word	0x40013c00

08004728 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	887b      	ldrh	r3, [r7, #2]
 800473a:	4013      	ands	r3, r2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
 8004744:	e001      	b.n	800474a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800474a:	7bfb      	ldrb	r3, [r7, #15]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	807b      	strh	r3, [r7, #2]
 8004762:	4613      	mov	r3, r2
 8004764:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004766:	787b      	ldrb	r3, [r7, #1]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800476c:	887a      	ldrh	r2, [r7, #2]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004772:	e003      	b.n	800477c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004774:	887b      	ldrh	r3, [r7, #2]
 8004776:	041a      	lsls	r2, r3, #16
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	619a      	str	r2, [r3, #24]
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	460b      	mov	r3, r1
 8004790:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004798:	887a      	ldrh	r2, [r7, #2]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4013      	ands	r3, r2
 800479e:	041a      	lsls	r2, r3, #16
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	43d9      	mvns	r1, r3
 80047a4:	887b      	ldrh	r3, [r7, #2]
 80047a6:	400b      	ands	r3, r1
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	619a      	str	r2, [r3, #24]
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80047b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ba:	b08f      	sub	sp, #60	; 0x3c
 80047bc:	af0a      	add	r7, sp, #40	; 0x28
 80047be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e054      	b.n	8004874 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f00b fe67 	bl	80104b8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f003 fe63 	bl	80084d4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	687e      	ldr	r6, [r7, #4]
 8004816:	466d      	mov	r5, sp
 8004818:	f106 0410 	add.w	r4, r6, #16
 800481c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800481e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004828:	e885 0003 	stmia.w	r5, {r0, r1}
 800482c:	1d33      	adds	r3, r6, #4
 800482e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004830:	6838      	ldr	r0, [r7, #0]
 8004832:	f003 fde8 	bl	8008406 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2101      	movs	r1, #1
 800483c:	4618      	mov	r0, r3
 800483e:	f003 fe59 	bl	80084f4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	687e      	ldr	r6, [r7, #4]
 800484a:	466d      	mov	r5, sp
 800484c:	f106 0410 	add.w	r4, r6, #16
 8004850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004858:	e894 0003 	ldmia.w	r4, {r0, r1}
 800485c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004860:	1d33      	adds	r3, r6, #4
 8004862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004864:	6838      	ldr	r0, [r7, #0]
 8004866:	f003 ffbb 	bl	80087e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800487c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800487c:	b590      	push	{r4, r7, lr}
 800487e:	b089      	sub	sp, #36	; 0x24
 8004880:	af04      	add	r7, sp, #16
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	4608      	mov	r0, r1
 8004886:	4611      	mov	r1, r2
 8004888:	461a      	mov	r2, r3
 800488a:	4603      	mov	r3, r0
 800488c:	70fb      	strb	r3, [r7, #3]
 800488e:	460b      	mov	r3, r1
 8004890:	70bb      	strb	r3, [r7, #2]
 8004892:	4613      	mov	r3, r2
 8004894:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_HCD_HC_Init+0x28>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e076      	b.n	8004992 <HAL_HCD_HC_Init+0x116>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	212c      	movs	r1, #44	; 0x2c
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	333d      	adds	r3, #61	; 0x3d
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	212c      	movs	r1, #44	; 0x2c
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	4413      	add	r3, r2
 80048ca:	3338      	adds	r3, #56	; 0x38
 80048cc:	787a      	ldrb	r2, [r7, #1]
 80048ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	212c      	movs	r1, #44	; 0x2c
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	4413      	add	r3, r2
 80048dc:	3340      	adds	r3, #64	; 0x40
 80048de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80048e0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	212c      	movs	r1, #44	; 0x2c
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	3339      	adds	r3, #57	; 0x39
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	212c      	movs	r1, #44	; 0x2c
 80048fa:	fb01 f303 	mul.w	r3, r1, r3
 80048fe:	4413      	add	r3, r2
 8004900:	333f      	adds	r3, #63	; 0x3f
 8004902:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004906:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	78ba      	ldrb	r2, [r7, #2]
 800490c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004910:	b2d0      	uxtb	r0, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	212c      	movs	r1, #44	; 0x2c
 8004916:	fb01 f303 	mul.w	r3, r1, r3
 800491a:	4413      	add	r3, r2
 800491c:	333a      	adds	r3, #58	; 0x3a
 800491e:	4602      	mov	r2, r0
 8004920:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004922:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004926:	2b00      	cmp	r3, #0
 8004928:	da09      	bge.n	800493e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	212c      	movs	r1, #44	; 0x2c
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	4413      	add	r3, r2
 8004936:	333b      	adds	r3, #59	; 0x3b
 8004938:	2201      	movs	r2, #1
 800493a:	701a      	strb	r2, [r3, #0]
 800493c:	e008      	b.n	8004950 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	212c      	movs	r1, #44	; 0x2c
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	4413      	add	r3, r2
 800494a:	333b      	adds	r3, #59	; 0x3b
 800494c:	2200      	movs	r2, #0
 800494e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	212c      	movs	r1, #44	; 0x2c
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	4413      	add	r3, r2
 800495c:	333c      	adds	r3, #60	; 0x3c
 800495e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004962:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	787c      	ldrb	r4, [r7, #1]
 800496a:	78ba      	ldrb	r2, [r7, #2]
 800496c:	78f9      	ldrb	r1, [r7, #3]
 800496e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004970:	9302      	str	r3, [sp, #8]
 8004972:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	f897 3020 	ldrb.w	r3, [r7, #32]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4623      	mov	r3, r4
 8004980:	f004 f8a4 	bl	8008acc <USB_HC_Init>
 8004984:	4603      	mov	r3, r0
 8004986:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bd90      	pop	{r4, r7, pc}

0800499a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	460b      	mov	r3, r1
 80049a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_HCD_HC_Halt+0x1e>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e00f      	b.n	80049d8 <HAL_HCD_HC_Halt+0x3e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f004 fadf 	bl	8008f8c <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	4608      	mov	r0, r1
 80049ea:	4611      	mov	r1, r2
 80049ec:	461a      	mov	r2, r3
 80049ee:	4603      	mov	r3, r0
 80049f0:	70fb      	strb	r3, [r7, #3]
 80049f2:	460b      	mov	r3, r1
 80049f4:	70bb      	strb	r3, [r7, #2]
 80049f6:	4613      	mov	r3, r2
 80049f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	212c      	movs	r1, #44	; 0x2c
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	333b      	adds	r3, #59	; 0x3b
 8004a08:	78ba      	ldrb	r2, [r7, #2]
 8004a0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	212c      	movs	r1, #44	; 0x2c
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	4413      	add	r3, r2
 8004a18:	333f      	adds	r3, #63	; 0x3f
 8004a1a:	787a      	ldrb	r2, [r7, #1]
 8004a1c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004a1e:	7c3b      	ldrb	r3, [r7, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d112      	bne.n	8004a4a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	212c      	movs	r1, #44	; 0x2c
 8004a2a:	fb01 f303 	mul.w	r3, r1, r3
 8004a2e:	4413      	add	r3, r2
 8004a30:	3342      	adds	r3, #66	; 0x42
 8004a32:	2203      	movs	r2, #3
 8004a34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	212c      	movs	r1, #44	; 0x2c
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	333d      	adds	r3, #61	; 0x3d
 8004a44:	7f3a      	ldrb	r2, [r7, #28]
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	e008      	b.n	8004a5c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	212c      	movs	r1, #44	; 0x2c
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	4413      	add	r3, r2
 8004a56:	3342      	adds	r3, #66	; 0x42
 8004a58:	2202      	movs	r2, #2
 8004a5a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004a5c:	787b      	ldrb	r3, [r7, #1]
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	f200 80c6 	bhi.w	8004bf0 <HAL_HCD_HC_SubmitRequest+0x210>
 8004a64:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6a:	bf00      	nop
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004bdd 	.word	0x08004bdd
 8004a74:	08004ae1 	.word	0x08004ae1
 8004a78:	08004b5f 	.word	0x08004b5f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004a7c:	7c3b      	ldrb	r3, [r7, #16]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	f040 80b8 	bne.w	8004bf4 <HAL_HCD_HC_SubmitRequest+0x214>
 8004a84:	78bb      	ldrb	r3, [r7, #2]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f040 80b4 	bne.w	8004bf4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004a8c:	8b3b      	ldrh	r3, [r7, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d108      	bne.n	8004aa4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	212c      	movs	r1, #44	; 0x2c
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3355      	adds	r3, #85	; 0x55
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	212c      	movs	r1, #44	; 0x2c
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	3355      	adds	r3, #85	; 0x55
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d109      	bne.n	8004acc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	212c      	movs	r1, #44	; 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3342      	adds	r3, #66	; 0x42
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004aca:	e093      	b.n	8004bf4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	212c      	movs	r1, #44	; 0x2c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3342      	adds	r3, #66	; 0x42
 8004ada:	2202      	movs	r2, #2
 8004adc:	701a      	strb	r2, [r3, #0]
      break;
 8004ade:	e089      	b.n	8004bf4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004ae0:	78bb      	ldrb	r3, [r7, #2]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d11d      	bne.n	8004b22 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	212c      	movs	r1, #44	; 0x2c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	3355      	adds	r3, #85	; 0x55
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	212c      	movs	r1, #44	; 0x2c
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	4413      	add	r3, r2
 8004b06:	3342      	adds	r3, #66	; 0x42
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004b0c:	e073      	b.n	8004bf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	212c      	movs	r1, #44	; 0x2c
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	3342      	adds	r3, #66	; 0x42
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	701a      	strb	r2, [r3, #0]
      break;
 8004b20:	e069      	b.n	8004bf6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	212c      	movs	r1, #44	; 0x2c
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3354      	adds	r3, #84	; 0x54
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	212c      	movs	r1, #44	; 0x2c
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	3342      	adds	r3, #66	; 0x42
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
      break;
 8004b48:	e055      	b.n	8004bf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	212c      	movs	r1, #44	; 0x2c
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	4413      	add	r3, r2
 8004b56:	3342      	adds	r3, #66	; 0x42
 8004b58:	2202      	movs	r2, #2
 8004b5a:	701a      	strb	r2, [r3, #0]
      break;
 8004b5c:	e04b      	b.n	8004bf6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004b5e:	78bb      	ldrb	r3, [r7, #2]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d11d      	bne.n	8004ba0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	212c      	movs	r1, #44	; 0x2c
 8004b6a:	fb01 f303 	mul.w	r3, r1, r3
 8004b6e:	4413      	add	r3, r2
 8004b70:	3355      	adds	r3, #85	; 0x55
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	212c      	movs	r1, #44	; 0x2c
 8004b7e:	fb01 f303 	mul.w	r3, r1, r3
 8004b82:	4413      	add	r3, r2
 8004b84:	3342      	adds	r3, #66	; 0x42
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004b8a:	e034      	b.n	8004bf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	212c      	movs	r1, #44	; 0x2c
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	4413      	add	r3, r2
 8004b98:	3342      	adds	r3, #66	; 0x42
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	701a      	strb	r2, [r3, #0]
      break;
 8004b9e:	e02a      	b.n	8004bf6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	212c      	movs	r1, #44	; 0x2c
 8004ba6:	fb01 f303 	mul.w	r3, r1, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	3354      	adds	r3, #84	; 0x54
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d109      	bne.n	8004bc8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	212c      	movs	r1, #44	; 0x2c
 8004bba:	fb01 f303 	mul.w	r3, r1, r3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3342      	adds	r3, #66	; 0x42
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
      break;
 8004bc6:	e016      	b.n	8004bf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	212c      	movs	r1, #44	; 0x2c
 8004bce:	fb01 f303 	mul.w	r3, r1, r3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3342      	adds	r3, #66	; 0x42
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	701a      	strb	r2, [r3, #0]
      break;
 8004bda:	e00c      	b.n	8004bf6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	3342      	adds	r3, #66	; 0x42
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
      break;
 8004bee:	e002      	b.n	8004bf6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004bf0:	bf00      	nop
 8004bf2:	e000      	b.n	8004bf6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004bf4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	212c      	movs	r1, #44	; 0x2c
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	3344      	adds	r3, #68	; 0x44
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	8b3a      	ldrh	r2, [r7, #24]
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	202c      	movs	r0, #44	; 0x2c
 8004c10:	fb00 f303 	mul.w	r3, r0, r3
 8004c14:	440b      	add	r3, r1
 8004c16:	334c      	adds	r3, #76	; 0x4c
 8004c18:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	212c      	movs	r1, #44	; 0x2c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	3360      	adds	r3, #96	; 0x60
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	212c      	movs	r1, #44	; 0x2c
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3350      	adds	r3, #80	; 0x50
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	212c      	movs	r1, #44	; 0x2c
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	4413      	add	r3, r2
 8004c4a:	3339      	adds	r3, #57	; 0x39
 8004c4c:	78fa      	ldrb	r2, [r7, #3]
 8004c4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	212c      	movs	r1, #44	; 0x2c
 8004c56:	fb01 f303 	mul.w	r3, r1, r3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3361      	adds	r3, #97	; 0x61
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	222c      	movs	r2, #44	; 0x2c
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	3338      	adds	r3, #56	; 0x38
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	18d1      	adds	r1, r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f004 f834 	bl	8008ce8 <USB_HC_StartXfer>
 8004c80:	4603      	mov	r3, r0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop

08004c8c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f003 fd5c 	bl	8008760 <USB_GetMode>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	f040 80ef 	bne.w	8004e8e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f003 fd41 	bl	800873c <USB_ReadInterrupts>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80e5 	beq.w	8004e8c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f003 fd38 	bl	800873c <USB_ReadInterrupts>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cd6:	d104      	bne.n	8004ce2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ce0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f003 fd28 	bl	800873c <USB_ReadInterrupts>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf6:	d104      	bne.n	8004d02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f003 fd18 	bl	800873c <USB_ReadInterrupts>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d16:	d104      	bne.n	8004d22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004d20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f003 fd08 	bl	800873c <USB_ReadInterrupts>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d103      	bne.n	8004d3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f003 fcfa 	bl	800873c <USB_ReadInterrupts>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d52:	d115      	bne.n	8004d80 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d108      	bne.n	8004d80 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f00b fc20 	bl	80105b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2101      	movs	r1, #1
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f003 fde4 	bl	8008948 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f003 fcd9 	bl	800873c <USB_ReadInterrupts>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d94:	d102      	bne.n	8004d9c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f001 fa01 	bl	800619e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f003 fccb 	bl	800873c <USB_ReadInterrupts>
 8004da6:	4603      	mov	r3, r0
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d106      	bne.n	8004dbe <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f00b fbe3 	bl	801057c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2208      	movs	r2, #8
 8004dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f003 fcba 	bl	800873c <USB_ReadInterrupts>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d101      	bne.n	8004dd6 <HAL_HCD_IRQHandler+0x14a>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <HAL_HCD_IRQHandler+0x14c>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d012      	beq.n	8004e02 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0210 	bic.w	r2, r2, #16
 8004dea:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f001 f904 	bl	8005ffa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699a      	ldr	r2, [r3, #24]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0210 	orr.w	r2, r2, #16
 8004e00:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f003 fc98 	bl	800873c <USB_ReadInterrupts>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e16:	d13a      	bne.n	8004e8e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f004 f8a5 	bl	8008f6c <USB_HC_ReadInterrupt>
 8004e22:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	e025      	b.n	8004e76 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	fa22 f303 	lsr.w	r3, r2, r3
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d018      	beq.n	8004e70 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e54:	d106      	bne.n	8004e64 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f8a9 	bl	8004fb4 <HCD_HC_IN_IRQHandler>
 8004e62:	e005      	b.n	8004e70 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fcc4 	bl	80057f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	3301      	adds	r3, #1
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d3d4      	bcc.n	8004e2a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e88:	615a      	str	r2, [r3, #20]
 8004e8a:	e000      	b.n	8004e8e <HAL_HCD_IRQHandler+0x202>
      return;
 8004e8c:	bf00      	nop
    }
  }
}
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_HCD_Start+0x16>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e013      	b.n	8004ed2 <HAL_HCD_Start+0x3e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f003 fda8 	bl	8008a0e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f003 faf6 	bl	80084b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_HCD_Stop+0x16>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e00d      	b.n	8004f0c <HAL_HCD_Stop+0x32>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f004 f99b 	bl	8009238 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f003 fd4a 	bl	80089ba <USB_ResetPort>
 8004f26:	4603      	mov	r3, r0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	212c      	movs	r1, #44	; 0x2c
 8004f42:	fb01 f303 	mul.w	r3, r1, r3
 8004f46:	4413      	add	r3, r2
 8004f48:	3360      	adds	r3, #96	; 0x60
 8004f4a:	781b      	ldrb	r3, [r3, #0]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr

08004f56 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	212c      	movs	r1, #44	; 0x2c
 8004f68:	fb01 f303 	mul.w	r3, r1, r3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3350      	adds	r3, #80	; 0x50
 8004f70:	681b      	ldr	r3, [r3, #0]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr

08004f7c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f003 fd8e 	bl	8008aaa <USB_GetCurrentFrame>
 8004f8e:	4603      	mov	r3, r0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f003 fd6a 	bl	8008a7e <USB_GetHostSpeed>
 8004faa:	4603      	mov	r3, r0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d119      	bne.n	8005018 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2304      	movs	r3, #4
 8004ff4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	440a      	add	r2, r1
 800500c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005010:	f043 0302 	orr.w	r3, r3, #2
 8005014:	60d3      	str	r3, [r2, #12]
 8005016:	e101      	b.n	800521c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	4413      	add	r3, r2
 8005020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502e:	d12b      	bne.n	8005088 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503c:	461a      	mov	r2, r3
 800503e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005042:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	212c      	movs	r1, #44	; 0x2c
 800504a:	fb01 f303 	mul.w	r3, r1, r3
 800504e:	4413      	add	r3, r2
 8005050:	3361      	adds	r3, #97	; 0x61
 8005052:	2207      	movs	r2, #7
 8005054:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4413      	add	r3, r2
 800505e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	0151      	lsls	r1, r2, #5
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	440a      	add	r2, r1
 800506c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005070:	f043 0302 	orr.w	r3, r3, #2
 8005074:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f003 ff83 	bl	8008f8c <USB_HC_Halt>
 8005086:	e0c9      	b.n	800521c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4413      	add	r3, r2
 8005090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b20      	cmp	r3, #32
 800509c:	d109      	bne.n	80050b2 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050aa:	461a      	mov	r2, r3
 80050ac:	2320      	movs	r3, #32
 80050ae:	6093      	str	r3, [r2, #8]
 80050b0:	e0b4      	b.n	800521c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d133      	bne.n	8005130 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050e2:	f043 0302 	orr.w	r3, r3, #2
 80050e6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	212c      	movs	r1, #44	; 0x2c
 80050ee:	fb01 f303 	mul.w	r3, r1, r3
 80050f2:	4413      	add	r3, r2
 80050f4:	3361      	adds	r3, #97	; 0x61
 80050f6:	2205      	movs	r2, #5
 80050f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4413      	add	r3, r2
 8005102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005106:	461a      	mov	r2, r3
 8005108:	2310      	movs	r3, #16
 800510a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	4413      	add	r3, r2
 8005114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005118:	461a      	mov	r2, r3
 800511a:	2308      	movs	r3, #8
 800511c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	4611      	mov	r1, r2
 8005128:	4618      	mov	r0, r3
 800512a:	f003 ff2f 	bl	8008f8c <USB_HC_Halt>
 800512e:	e075      	b.n	800521c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005146:	d134      	bne.n	80051b2 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4413      	add	r3, r2
 8005150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	440a      	add	r2, r1
 800515e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005162:	f043 0302 	orr.w	r3, r3, #2
 8005166:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	212c      	movs	r1, #44	; 0x2c
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	4413      	add	r3, r2
 8005174:	3361      	adds	r3, #97	; 0x61
 8005176:	2208      	movs	r2, #8
 8005178:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	461a      	mov	r2, r3
 8005188:	2310      	movs	r3, #16
 800518a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4413      	add	r3, r2
 8005194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005198:	461a      	mov	r2, r3
 800519a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800519e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	4611      	mov	r1, r2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f003 feee 	bl	8008f8c <USB_HC_Halt>
 80051b0:	e034      	b.n	800521c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c4:	2b80      	cmp	r3, #128	; 0x80
 80051c6:	d129      	bne.n	800521c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	0151      	lsls	r1, r2, #5
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	440a      	add	r2, r1
 80051de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e2:	f043 0302 	orr.w	r3, r3, #2
 80051e6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	212c      	movs	r1, #44	; 0x2c
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	3361      	adds	r3, #97	; 0x61
 80051f6:	2206      	movs	r2, #6
 80051f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	4611      	mov	r1, r2
 8005204:	4618      	mov	r0, r3
 8005206:	f003 fec1 	bl	8008f8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005216:	461a      	mov	r2, r3
 8005218:	2380      	movs	r3, #128	; 0x80
 800521a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4413      	add	r3, r2
 8005224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800522e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005232:	d122      	bne.n	800527a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4413      	add	r3, r2
 800523c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	440a      	add	r2, r1
 800524a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800524e:	f043 0302 	orr.w	r3, r3, #2
 8005252:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	4611      	mov	r1, r2
 800525e:	4618      	mov	r0, r3
 8005260:	f003 fe94 	bl	8008f8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005270:	461a      	mov	r2, r3
 8005272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005276:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005278:	e2ba      	b.n	80057f0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4413      	add	r3, r2
 8005282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b01      	cmp	r3, #1
 800528e:	f040 811b 	bne.w	80054c8 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d019      	beq.n	80052ce <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	212c      	movs	r1, #44	; 0x2c
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	4413      	add	r3, r2
 80052a6:	3348      	adds	r3, #72	; 0x48
 80052a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	0159      	lsls	r1, r3, #5
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	440b      	add	r3, r1
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80052bc:	1ad2      	subs	r2, r2, r3
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	202c      	movs	r0, #44	; 0x2c
 80052c4:	fb00 f303 	mul.w	r3, r0, r3
 80052c8:	440b      	add	r3, r1
 80052ca:	3350      	adds	r3, #80	; 0x50
 80052cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	212c      	movs	r1, #44	; 0x2c
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	4413      	add	r3, r2
 80052da:	3361      	adds	r3, #97	; 0x61
 80052dc:	2201      	movs	r2, #1
 80052de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	212c      	movs	r1, #44	; 0x2c
 80052e6:	fb01 f303 	mul.w	r3, r1, r3
 80052ea:	4413      	add	r3, r2
 80052ec:	335c      	adds	r3, #92	; 0x5c
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fe:	461a      	mov	r2, r3
 8005300:	2301      	movs	r3, #1
 8005302:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	212c      	movs	r1, #44	; 0x2c
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	4413      	add	r3, r2
 8005310:	333f      	adds	r3, #63	; 0x3f
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d009      	beq.n	800532c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	212c      	movs	r1, #44	; 0x2c
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	4413      	add	r3, r2
 8005324:	333f      	adds	r3, #63	; 0x3f
 8005326:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005328:	2b02      	cmp	r3, #2
 800532a:	d121      	bne.n	8005370 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4413      	add	r3, r2
 8005334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	0151      	lsls	r1, r2, #5
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	440a      	add	r2, r1
 8005342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005346:	f043 0302 	orr.w	r3, r3, #2
 800534a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	4611      	mov	r1, r2
 8005356:	4618      	mov	r0, r3
 8005358:	f003 fe18 	bl	8008f8c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005368:	461a      	mov	r2, r3
 800536a:	2310      	movs	r3, #16
 800536c:	6093      	str	r3, [r2, #8]
 800536e:	e066      	b.n	800543e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	212c      	movs	r1, #44	; 0x2c
 8005376:	fb01 f303 	mul.w	r3, r1, r3
 800537a:	4413      	add	r3, r2
 800537c:	333f      	adds	r3, #63	; 0x3f
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b03      	cmp	r3, #3
 8005382:	d127      	bne.n	80053d4 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4413      	add	r3, r2
 800538c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	440a      	add	r2, r1
 800539a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800539e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053a2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	212c      	movs	r1, #44	; 0x2c
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	4413      	add	r3, r2
 80053b0:	3360      	adds	r3, #96	; 0x60
 80053b2:	2201      	movs	r2, #1
 80053b4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	b2d9      	uxtb	r1, r3
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	202c      	movs	r0, #44	; 0x2c
 80053c0:	fb00 f303 	mul.w	r3, r0, r3
 80053c4:	4413      	add	r3, r2
 80053c6:	3360      	adds	r3, #96	; 0x60
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f00b f8ff 	bl	80105d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80053d2:	e034      	b.n	800543e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	212c      	movs	r1, #44	; 0x2c
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	4413      	add	r3, r2
 80053e0:	333f      	adds	r3, #63	; 0x3f
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d12a      	bne.n	800543e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	212c      	movs	r1, #44	; 0x2c
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	4413      	add	r3, r2
 80053f4:	3360      	adds	r3, #96	; 0x60
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	212c      	movs	r1, #44	; 0x2c
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	4413      	add	r3, r2
 8005406:	3354      	adds	r3, #84	; 0x54
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	f083 0301 	eor.w	r3, r3, #1
 800540e:	b2d8      	uxtb	r0, r3
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	212c      	movs	r1, #44	; 0x2c
 8005416:	fb01 f303 	mul.w	r3, r1, r3
 800541a:	4413      	add	r3, r2
 800541c:	3354      	adds	r3, #84	; 0x54
 800541e:	4602      	mov	r2, r0
 8005420:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	b2d9      	uxtb	r1, r3
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	202c      	movs	r0, #44	; 0x2c
 800542c:	fb00 f303 	mul.w	r3, r0, r3
 8005430:	4413      	add	r3, r2
 8005432:	3360      	adds	r3, #96	; 0x60
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f00b f8c9 	bl	80105d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d12b      	bne.n	800549e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	212c      	movs	r1, #44	; 0x2c
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	4413      	add	r3, r2
 8005452:	3348      	adds	r3, #72	; 0x48
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	202c      	movs	r0, #44	; 0x2c
 800545c:	fb00 f202 	mul.w	r2, r0, r2
 8005460:	440a      	add	r2, r1
 8005462:	3240      	adds	r2, #64	; 0x40
 8005464:	8812      	ldrh	r2, [r2, #0]
 8005466:	fbb3 f3f2 	udiv	r3, r3, r2
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 81be 	beq.w	80057f0 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	212c      	movs	r1, #44	; 0x2c
 800547a:	fb01 f303 	mul.w	r3, r1, r3
 800547e:	4413      	add	r3, r2
 8005480:	3354      	adds	r3, #84	; 0x54
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	f083 0301 	eor.w	r3, r3, #1
 8005488:	b2d8      	uxtb	r0, r3
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	212c      	movs	r1, #44	; 0x2c
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	4413      	add	r3, r2
 8005496:	3354      	adds	r3, #84	; 0x54
 8005498:	4602      	mov	r2, r0
 800549a:	701a      	strb	r2, [r3, #0]
}
 800549c:	e1a8      	b.n	80057f0 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	212c      	movs	r1, #44	; 0x2c
 80054a4:	fb01 f303 	mul.w	r3, r1, r3
 80054a8:	4413      	add	r3, r2
 80054aa:	3354      	adds	r3, #84	; 0x54
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	f083 0301 	eor.w	r3, r3, #1
 80054b2:	b2d8      	uxtb	r0, r3
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	212c      	movs	r1, #44	; 0x2c
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	4413      	add	r3, r2
 80054c0:	3354      	adds	r3, #84	; 0x54
 80054c2:	4602      	mov	r2, r0
 80054c4:	701a      	strb	r2, [r3, #0]
}
 80054c6:	e193      	b.n	80057f0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b02      	cmp	r3, #2
 80054dc:	f040 8106 	bne.w	80056ec <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054fa:	f023 0302 	bic.w	r3, r3, #2
 80054fe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	212c      	movs	r1, #44	; 0x2c
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	4413      	add	r3, r2
 800550c:	3361      	adds	r3, #97	; 0x61
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d109      	bne.n	8005528 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	212c      	movs	r1, #44	; 0x2c
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	4413      	add	r3, r2
 8005520:	3360      	adds	r3, #96	; 0x60
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	e0c9      	b.n	80056bc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	212c      	movs	r1, #44	; 0x2c
 800552e:	fb01 f303 	mul.w	r3, r1, r3
 8005532:	4413      	add	r3, r2
 8005534:	3361      	adds	r3, #97	; 0x61
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b05      	cmp	r3, #5
 800553a:	d109      	bne.n	8005550 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	212c      	movs	r1, #44	; 0x2c
 8005542:	fb01 f303 	mul.w	r3, r1, r3
 8005546:	4413      	add	r3, r2
 8005548:	3360      	adds	r3, #96	; 0x60
 800554a:	2205      	movs	r2, #5
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e0b5      	b.n	80056bc <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	212c      	movs	r1, #44	; 0x2c
 8005556:	fb01 f303 	mul.w	r3, r1, r3
 800555a:	4413      	add	r3, r2
 800555c:	3361      	adds	r3, #97	; 0x61
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b06      	cmp	r3, #6
 8005562:	d009      	beq.n	8005578 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	212c      	movs	r1, #44	; 0x2c
 800556a:	fb01 f303 	mul.w	r3, r1, r3
 800556e:	4413      	add	r3, r2
 8005570:	3361      	adds	r3, #97	; 0x61
 8005572:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005574:	2b08      	cmp	r3, #8
 8005576:	d150      	bne.n	800561a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	212c      	movs	r1, #44	; 0x2c
 800557e:	fb01 f303 	mul.w	r3, r1, r3
 8005582:	4413      	add	r3, r2
 8005584:	335c      	adds	r3, #92	; 0x5c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	202c      	movs	r0, #44	; 0x2c
 8005590:	fb00 f303 	mul.w	r3, r0, r3
 8005594:	440b      	add	r3, r1
 8005596:	335c      	adds	r3, #92	; 0x5c
 8005598:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	212c      	movs	r1, #44	; 0x2c
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	4413      	add	r3, r2
 80055a6:	335c      	adds	r3, #92	; 0x5c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d912      	bls.n	80055d4 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	212c      	movs	r1, #44	; 0x2c
 80055b4:	fb01 f303 	mul.w	r3, r1, r3
 80055b8:	4413      	add	r3, r2
 80055ba:	335c      	adds	r3, #92	; 0x5c
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	212c      	movs	r1, #44	; 0x2c
 80055c6:	fb01 f303 	mul.w	r3, r1, r3
 80055ca:	4413      	add	r3, r2
 80055cc:	3360      	adds	r3, #96	; 0x60
 80055ce:	2204      	movs	r2, #4
 80055d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80055d2:	e073      	b.n	80056bc <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	212c      	movs	r1, #44	; 0x2c
 80055da:	fb01 f303 	mul.w	r3, r1, r3
 80055de:	4413      	add	r3, r2
 80055e0:	3360      	adds	r3, #96	; 0x60
 80055e2:	2202      	movs	r2, #2
 80055e4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055fc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005604:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005612:	461a      	mov	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005618:	e050      	b.n	80056bc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	212c      	movs	r1, #44	; 0x2c
 8005620:	fb01 f303 	mul.w	r3, r1, r3
 8005624:	4413      	add	r3, r2
 8005626:	3361      	adds	r3, #97	; 0x61
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b03      	cmp	r3, #3
 800562c:	d122      	bne.n	8005674 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	212c      	movs	r1, #44	; 0x2c
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	4413      	add	r3, r2
 800563a:	3360      	adds	r3, #96	; 0x60
 800563c:	2202      	movs	r2, #2
 800563e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4413      	add	r3, r2
 8005648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005656:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800565e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4413      	add	r3, r2
 8005668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566c:	461a      	mov	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	e023      	b.n	80056bc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	212c      	movs	r1, #44	; 0x2c
 800567a:	fb01 f303 	mul.w	r3, r1, r3
 800567e:	4413      	add	r3, r2
 8005680:	3361      	adds	r3, #97	; 0x61
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b07      	cmp	r3, #7
 8005686:	d119      	bne.n	80056bc <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	212c      	movs	r1, #44	; 0x2c
 800568e:	fb01 f303 	mul.w	r3, r1, r3
 8005692:	4413      	add	r3, r2
 8005694:	335c      	adds	r3, #92	; 0x5c
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	202c      	movs	r0, #44	; 0x2c
 80056a0:	fb00 f303 	mul.w	r3, r0, r3
 80056a4:	440b      	add	r3, r1
 80056a6:	335c      	adds	r3, #92	; 0x5c
 80056a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	212c      	movs	r1, #44	; 0x2c
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	4413      	add	r3, r2
 80056b6:	3360      	adds	r3, #96	; 0x60
 80056b8:	2204      	movs	r2, #4
 80056ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c8:	461a      	mov	r2, r3
 80056ca:	2302      	movs	r3, #2
 80056cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	b2d9      	uxtb	r1, r3
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	202c      	movs	r0, #44	; 0x2c
 80056d8:	fb00 f303 	mul.w	r3, r0, r3
 80056dc:	4413      	add	r3, r2
 80056de:	3360      	adds	r3, #96	; 0x60
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f00a ff73 	bl	80105d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80056ea:	e081      	b.n	80057f0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b10      	cmp	r3, #16
 8005700:	d176      	bne.n	80057f0 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	212c      	movs	r1, #44	; 0x2c
 8005708:	fb01 f303 	mul.w	r3, r1, r3
 800570c:	4413      	add	r3, r2
 800570e:	333f      	adds	r3, #63	; 0x3f
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b03      	cmp	r3, #3
 8005714:	d121      	bne.n	800575a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	212c      	movs	r1, #44	; 0x2c
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	4413      	add	r3, r2
 8005722:	335c      	adds	r3, #92	; 0x5c
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4413      	add	r3, r2
 8005730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	440a      	add	r2, r1
 800573e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005742:	f043 0302 	orr.w	r3, r3, #2
 8005746:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	4611      	mov	r1, r2
 8005752:	4618      	mov	r0, r3
 8005754:	f003 fc1a 	bl	8008f8c <USB_HC_Halt>
 8005758:	e041      	b.n	80057de <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	212c      	movs	r1, #44	; 0x2c
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	4413      	add	r3, r2
 8005766:	333f      	adds	r3, #63	; 0x3f
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	212c      	movs	r1, #44	; 0x2c
 8005774:	fb01 f303 	mul.w	r3, r1, r3
 8005778:	4413      	add	r3, r2
 800577a:	333f      	adds	r3, #63	; 0x3f
 800577c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800577e:	2b02      	cmp	r3, #2
 8005780:	d12d      	bne.n	80057de <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	212c      	movs	r1, #44	; 0x2c
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	4413      	add	r3, r2
 800578e:	335c      	adds	r3, #92	; 0x5c
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d120      	bne.n	80057de <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	212c      	movs	r1, #44	; 0x2c
 80057a2:	fb01 f303 	mul.w	r3, r1, r3
 80057a6:	4413      	add	r3, r2
 80057a8:	3361      	adds	r3, #97	; 0x61
 80057aa:	2203      	movs	r2, #3
 80057ac:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c8:	f043 0302 	orr.w	r3, r3, #2
 80057cc:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	4611      	mov	r1, r2
 80057d8:	4618      	mov	r0, r3
 80057da:	f003 fbd7 	bl	8008f8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ea:	461a      	mov	r2, r3
 80057ec:	2310      	movs	r3, #16
 80057ee:	6093      	str	r3, [r2, #8]
}
 80057f0:	bf00      	nop
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800580e:	78fb      	ldrb	r3, [r7, #3]
 8005810:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	4413      	add	r3, r2
 800581a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b04      	cmp	r3, #4
 8005826:	d119      	bne.n	800585c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005834:	461a      	mov	r2, r3
 8005836:	2304      	movs	r3, #4
 8005838:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	4413      	add	r3, r2
 8005842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	440a      	add	r2, r1
 8005850:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005854:	f043 0302 	orr.w	r3, r3, #2
 8005858:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800585a:	e3ca      	b.n	8005ff2 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	4413      	add	r3, r2
 8005864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b20      	cmp	r3, #32
 8005870:	d13e      	bne.n	80058f0 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	4413      	add	r3, r2
 800587a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587e:	461a      	mov	r2, r3
 8005880:	2320      	movs	r3, #32
 8005882:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	212c      	movs	r1, #44	; 0x2c
 800588a:	fb01 f303 	mul.w	r3, r1, r3
 800588e:	4413      	add	r3, r2
 8005890:	333d      	adds	r3, #61	; 0x3d
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b01      	cmp	r3, #1
 8005896:	f040 83ac 	bne.w	8005ff2 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	212c      	movs	r1, #44	; 0x2c
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	333d      	adds	r3, #61	; 0x3d
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	212c      	movs	r1, #44	; 0x2c
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	4413      	add	r3, r2
 80058b8:	3360      	adds	r3, #96	; 0x60
 80058ba:	2202      	movs	r2, #2
 80058bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058d8:	f043 0302 	orr.w	r3, r3, #2
 80058dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f003 fb4f 	bl	8008f8c <USB_HC_Halt>
}
 80058ee:	e380      	b.n	8005ff2 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005906:	d122      	bne.n	800594e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	4413      	add	r3, r2
 8005910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	440a      	add	r2, r1
 800591e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005922:	f043 0302 	orr.w	r3, r3, #2
 8005926:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	4611      	mov	r1, r2
 8005932:	4618      	mov	r0, r3
 8005934:	f003 fb2a 	bl	8008f8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	4413      	add	r3, r2
 8005940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005944:	461a      	mov	r2, r3
 8005946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800594a:	6093      	str	r3, [r2, #8]
}
 800594c:	e351      	b.n	8005ff2 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	4413      	add	r3, r2
 8005956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d150      	bne.n	8005a06 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	212c      	movs	r1, #44	; 0x2c
 800596a:	fb01 f303 	mul.w	r3, r1, r3
 800596e:	4413      	add	r3, r2
 8005970:	335c      	adds	r3, #92	; 0x5c
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	4413      	add	r3, r2
 800597e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	d111      	bne.n	80059b0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	212c      	movs	r1, #44	; 0x2c
 8005992:	fb01 f303 	mul.w	r3, r1, r3
 8005996:	4413      	add	r3, r2
 8005998:	333d      	adds	r3, #61	; 0x3d
 800599a:	2201      	movs	r2, #1
 800599c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059aa:	461a      	mov	r2, r3
 80059ac:	2340      	movs	r3, #64	; 0x40
 80059ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ca:	f043 0302 	orr.w	r3, r3, #2
 80059ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	4611      	mov	r1, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f003 fad6 	bl	8008f8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ec:	461a      	mov	r2, r3
 80059ee:	2301      	movs	r3, #1
 80059f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	212c      	movs	r1, #44	; 0x2c
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	4413      	add	r3, r2
 80059fe:	3361      	adds	r3, #97	; 0x61
 8005a00:	2201      	movs	r2, #1
 8005a02:	701a      	strb	r2, [r3, #0]
}
 8005a04:	e2f5      	b.n	8005ff2 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	d13c      	bne.n	8005a96 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	212c      	movs	r1, #44	; 0x2c
 8005a22:	fb01 f303 	mul.w	r3, r1, r3
 8005a26:	4413      	add	r3, r2
 8005a28:	3361      	adds	r3, #97	; 0x61
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	212c      	movs	r1, #44	; 0x2c
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	4413      	add	r3, r2
 8005a3a:	333d      	adds	r3, #61	; 0x3d
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	212c      	movs	r1, #44	; 0x2c
 8005a46:	fb01 f303 	mul.w	r3, r1, r3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	335c      	adds	r3, #92	; 0x5c
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a6c:	f043 0302 	orr.w	r3, r3, #2
 8005a70:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f003 fa85 	bl	8008f8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8e:	461a      	mov	r2, r3
 8005a90:	2340      	movs	r3, #64	; 0x40
 8005a92:	6093      	str	r3, [r2, #8]
}
 8005a94:	e2ad      	b.n	8005ff2 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d12a      	bne.n	8005b02 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2308      	movs	r3, #8
 8005abc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad8:	f043 0302 	orr.w	r3, r3, #2
 8005adc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f003 fa4f 	bl	8008f8c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	212c      	movs	r1, #44	; 0x2c
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	4413      	add	r3, r2
 8005afa:	3361      	adds	r3, #97	; 0x61
 8005afc:	2205      	movs	r2, #5
 8005afe:	701a      	strb	r2, [r3, #0]
}
 8005b00:	e277      	b.n	8005ff2 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	d150      	bne.n	8005bba <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	212c      	movs	r1, #44	; 0x2c
 8005b1e:	fb01 f303 	mul.w	r3, r1, r3
 8005b22:	4413      	add	r3, r2
 8005b24:	335c      	adds	r3, #92	; 0x5c
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	212c      	movs	r1, #44	; 0x2c
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	4413      	add	r3, r2
 8005b36:	3361      	adds	r3, #97	; 0x61
 8005b38:	2203      	movs	r2, #3
 8005b3a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	212c      	movs	r1, #44	; 0x2c
 8005b42:	fb01 f303 	mul.w	r3, r1, r3
 8005b46:	4413      	add	r3, r2
 8005b48:	333d      	adds	r3, #61	; 0x3d
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d112      	bne.n	8005b76 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	212c      	movs	r1, #44	; 0x2c
 8005b56:	fb01 f303 	mul.w	r3, r1, r3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	333c      	adds	r3, #60	; 0x3c
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d108      	bne.n	8005b76 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	212c      	movs	r1, #44	; 0x2c
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	4413      	add	r3, r2
 8005b70:	333d      	adds	r3, #61	; 0x3d
 8005b72:	2201      	movs	r2, #1
 8005b74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b90:	f043 0302 	orr.w	r3, r3, #2
 8005b94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f003 f9f3 	bl	8008f8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	2310      	movs	r3, #16
 8005bb6:	6093      	str	r3, [r2, #8]
}
 8005bb8:	e21b      	b.n	8005ff2 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bcc:	2b80      	cmp	r3, #128	; 0x80
 8005bce:	d174      	bne.n	8005cba <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d121      	bne.n	8005c1c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	212c      	movs	r1, #44	; 0x2c
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	4413      	add	r3, r2
 8005be4:	3361      	adds	r3, #97	; 0x61
 8005be6:	2206      	movs	r2, #6
 8005be8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c04:	f043 0302 	orr.w	r3, r3, #2
 8005c08:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	4611      	mov	r1, r2
 8005c14:	4618      	mov	r0, r3
 8005c16:	f003 f9b9 	bl	8008f8c <USB_HC_Halt>
 8005c1a:	e044      	b.n	8005ca6 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	212c      	movs	r1, #44	; 0x2c
 8005c22:	fb01 f303 	mul.w	r3, r1, r3
 8005c26:	4413      	add	r3, r2
 8005c28:	335c      	adds	r3, #92	; 0x5c
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	202c      	movs	r0, #44	; 0x2c
 8005c34:	fb00 f303 	mul.w	r3, r0, r3
 8005c38:	440b      	add	r3, r1
 8005c3a:	335c      	adds	r3, #92	; 0x5c
 8005c3c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	212c      	movs	r1, #44	; 0x2c
 8005c44:	fb01 f303 	mul.w	r3, r1, r3
 8005c48:	4413      	add	r3, r2
 8005c4a:	335c      	adds	r3, #92	; 0x5c
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d920      	bls.n	8005c94 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	212c      	movs	r1, #44	; 0x2c
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	335c      	adds	r3, #92	; 0x5c
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	212c      	movs	r1, #44	; 0x2c
 8005c6a:	fb01 f303 	mul.w	r3, r1, r3
 8005c6e:	4413      	add	r3, r2
 8005c70:	3360      	adds	r3, #96	; 0x60
 8005c72:	2204      	movs	r2, #4
 8005c74:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	b2d9      	uxtb	r1, r3
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	202c      	movs	r0, #44	; 0x2c
 8005c80:	fb00 f303 	mul.w	r3, r0, r3
 8005c84:	4413      	add	r3, r2
 8005c86:	3360      	adds	r3, #96	; 0x60
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f00a fc9f 	bl	80105d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005c92:	e008      	b.n	8005ca6 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	212c      	movs	r1, #44	; 0x2c
 8005c9a:	fb01 f303 	mul.w	r3, r1, r3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3360      	adds	r3, #96	; 0x60
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2380      	movs	r3, #128	; 0x80
 8005cb6:	6093      	str	r3, [r2, #8]
}
 8005cb8:	e19b      	b.n	8005ff2 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd0:	d134      	bne.n	8005d3c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	0151      	lsls	r1, r2, #5
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	440a      	add	r2, r1
 8005ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cec:	f043 0302 	orr.w	r3, r3, #2
 8005cf0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f003 f945 	bl	8008f8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2310      	movs	r3, #16
 8005d12:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d20:	461a      	mov	r2, r3
 8005d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	212c      	movs	r1, #44	; 0x2c
 8005d2e:	fb01 f303 	mul.w	r3, r1, r3
 8005d32:	4413      	add	r3, r2
 8005d34:	3361      	adds	r3, #97	; 0x61
 8005d36:	2208      	movs	r2, #8
 8005d38:	701a      	strb	r2, [r3, #0]
}
 8005d3a:	e15a      	b.n	8005ff2 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	f040 814f 	bne.w	8005ff2 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6e:	f023 0302 	bic.w	r3, r3, #2
 8005d72:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	212c      	movs	r1, #44	; 0x2c
 8005d7a:	fb01 f303 	mul.w	r3, r1, r3
 8005d7e:	4413      	add	r3, r2
 8005d80:	3361      	adds	r3, #97	; 0x61
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d17d      	bne.n	8005e84 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	212c      	movs	r1, #44	; 0x2c
 8005d8e:	fb01 f303 	mul.w	r3, r1, r3
 8005d92:	4413      	add	r3, r2
 8005d94:	3360      	adds	r3, #96	; 0x60
 8005d96:	2201      	movs	r2, #1
 8005d98:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	212c      	movs	r1, #44	; 0x2c
 8005da0:	fb01 f303 	mul.w	r3, r1, r3
 8005da4:	4413      	add	r3, r2
 8005da6:	333f      	adds	r3, #63	; 0x3f
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d00a      	beq.n	8005dc4 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	212c      	movs	r1, #44	; 0x2c
 8005db4:	fb01 f303 	mul.w	r3, r1, r3
 8005db8:	4413      	add	r3, r2
 8005dba:	333f      	adds	r3, #63	; 0x3f
 8005dbc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	f040 8100 	bne.w	8005fc4 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d113      	bne.n	8005df4 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	212c      	movs	r1, #44	; 0x2c
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3355      	adds	r3, #85	; 0x55
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f083 0301 	eor.w	r3, r3, #1
 8005de0:	b2d8      	uxtb	r0, r3
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	212c      	movs	r1, #44	; 0x2c
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	4413      	add	r3, r2
 8005dee:	3355      	adds	r3, #85	; 0x55
 8005df0:	4602      	mov	r2, r0
 8005df2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	f040 80e3 	bne.w	8005fc4 <HCD_HC_OUT_IRQHandler+0x7cc>
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	212c      	movs	r1, #44	; 0x2c
 8005e04:	fb01 f303 	mul.w	r3, r1, r3
 8005e08:	4413      	add	r3, r2
 8005e0a:	334c      	adds	r3, #76	; 0x4c
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 80d8 	beq.w	8005fc4 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	212c      	movs	r1, #44	; 0x2c
 8005e1a:	fb01 f303 	mul.w	r3, r1, r3
 8005e1e:	4413      	add	r3, r2
 8005e20:	334c      	adds	r3, #76	; 0x4c
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	202c      	movs	r0, #44	; 0x2c
 8005e2a:	fb00 f202 	mul.w	r2, r0, r2
 8005e2e:	440a      	add	r2, r1
 8005e30:	3240      	adds	r2, #64	; 0x40
 8005e32:	8812      	ldrh	r2, [r2, #0]
 8005e34:	4413      	add	r3, r2
 8005e36:	3b01      	subs	r3, #1
 8005e38:	6879      	ldr	r1, [r7, #4]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	202c      	movs	r0, #44	; 0x2c
 8005e3e:	fb00 f202 	mul.w	r2, r0, r2
 8005e42:	440a      	add	r2, r1
 8005e44:	3240      	adds	r2, #64	; 0x40
 8005e46:	8812      	ldrh	r2, [r2, #0]
 8005e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 80b5 	beq.w	8005fc4 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	212c      	movs	r1, #44	; 0x2c
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	4413      	add	r3, r2
 8005e66:	3355      	adds	r3, #85	; 0x55
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	f083 0301 	eor.w	r3, r3, #1
 8005e6e:	b2d8      	uxtb	r0, r3
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	212c      	movs	r1, #44	; 0x2c
 8005e76:	fb01 f303 	mul.w	r3, r1, r3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	3355      	adds	r3, #85	; 0x55
 8005e7e:	4602      	mov	r2, r0
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	e09f      	b.n	8005fc4 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	212c      	movs	r1, #44	; 0x2c
 8005e8a:	fb01 f303 	mul.w	r3, r1, r3
 8005e8e:	4413      	add	r3, r2
 8005e90:	3361      	adds	r3, #97	; 0x61
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d109      	bne.n	8005eac <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	212c      	movs	r1, #44	; 0x2c
 8005e9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ea2:	4413      	add	r3, r2
 8005ea4:	3360      	adds	r3, #96	; 0x60
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e08b      	b.n	8005fc4 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	212c      	movs	r1, #44	; 0x2c
 8005eb2:	fb01 f303 	mul.w	r3, r1, r3
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3361      	adds	r3, #97	; 0x61
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d109      	bne.n	8005ed4 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	212c      	movs	r1, #44	; 0x2c
 8005ec6:	fb01 f303 	mul.w	r3, r1, r3
 8005eca:	4413      	add	r3, r2
 8005ecc:	3360      	adds	r3, #96	; 0x60
 8005ece:	2202      	movs	r2, #2
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	e077      	b.n	8005fc4 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	212c      	movs	r1, #44	; 0x2c
 8005eda:	fb01 f303 	mul.w	r3, r1, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	3361      	adds	r3, #97	; 0x61
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b05      	cmp	r3, #5
 8005ee6:	d109      	bne.n	8005efc <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	212c      	movs	r1, #44	; 0x2c
 8005eee:	fb01 f303 	mul.w	r3, r1, r3
 8005ef2:	4413      	add	r3, r2
 8005ef4:	3360      	adds	r3, #96	; 0x60
 8005ef6:	2205      	movs	r2, #5
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e063      	b.n	8005fc4 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	212c      	movs	r1, #44	; 0x2c
 8005f02:	fb01 f303 	mul.w	r3, r1, r3
 8005f06:	4413      	add	r3, r2
 8005f08:	3361      	adds	r3, #97	; 0x61
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b06      	cmp	r3, #6
 8005f0e:	d009      	beq.n	8005f24 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	212c      	movs	r1, #44	; 0x2c
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3361      	adds	r3, #97	; 0x61
 8005f1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d14f      	bne.n	8005fc4 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	212c      	movs	r1, #44	; 0x2c
 8005f2a:	fb01 f303 	mul.w	r3, r1, r3
 8005f2e:	4413      	add	r3, r2
 8005f30:	335c      	adds	r3, #92	; 0x5c
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	202c      	movs	r0, #44	; 0x2c
 8005f3c:	fb00 f303 	mul.w	r3, r0, r3
 8005f40:	440b      	add	r3, r1
 8005f42:	335c      	adds	r3, #92	; 0x5c
 8005f44:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	212c      	movs	r1, #44	; 0x2c
 8005f4c:	fb01 f303 	mul.w	r3, r1, r3
 8005f50:	4413      	add	r3, r2
 8005f52:	335c      	adds	r3, #92	; 0x5c
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d912      	bls.n	8005f80 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	212c      	movs	r1, #44	; 0x2c
 8005f60:	fb01 f303 	mul.w	r3, r1, r3
 8005f64:	4413      	add	r3, r2
 8005f66:	335c      	adds	r3, #92	; 0x5c
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	212c      	movs	r1, #44	; 0x2c
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	4413      	add	r3, r2
 8005f78:	3360      	adds	r3, #96	; 0x60
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	701a      	strb	r2, [r3, #0]
 8005f7e:	e021      	b.n	8005fc4 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	212c      	movs	r1, #44	; 0x2c
 8005f86:	fb01 f303 	mul.w	r3, r1, r3
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3360      	adds	r3, #96	; 0x60
 8005f8e:	2202      	movs	r2, #2
 8005f90:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fa8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fb0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	b2d9      	uxtb	r1, r3
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	202c      	movs	r0, #44	; 0x2c
 8005fe0:	fb00 f303 	mul.w	r3, r0, r3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3360      	adds	r3, #96	; 0x60
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f00a faef 	bl	80105d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005ff2:	bf00      	nop
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b08a      	sub	sp, #40	; 0x28
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	0c5b      	lsrs	r3, r3, #17
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	091b      	lsrs	r3, r3, #4
 800602a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800602e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2b02      	cmp	r3, #2
 8006034:	d004      	beq.n	8006040 <HCD_RXQLVL_IRQHandler+0x46>
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b05      	cmp	r3, #5
 800603a:	f000 80a9 	beq.w	8006190 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800603e:	e0aa      	b.n	8006196 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 80a6 	beq.w	8006194 <HCD_RXQLVL_IRQHandler+0x19a>
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	212c      	movs	r1, #44	; 0x2c
 800604e:	fb01 f303 	mul.w	r3, r1, r3
 8006052:	4413      	add	r3, r2
 8006054:	3344      	adds	r3, #68	; 0x44
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 809b 	beq.w	8006194 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	212c      	movs	r1, #44	; 0x2c
 8006064:	fb01 f303 	mul.w	r3, r1, r3
 8006068:	4413      	add	r3, r2
 800606a:	3350      	adds	r3, #80	; 0x50
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	441a      	add	r2, r3
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	202c      	movs	r0, #44	; 0x2c
 8006078:	fb00 f303 	mul.w	r3, r0, r3
 800607c:	440b      	add	r3, r1
 800607e:	334c      	adds	r3, #76	; 0x4c
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d87a      	bhi.n	800617c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	212c      	movs	r1, #44	; 0x2c
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	4413      	add	r3, r2
 8006096:	3344      	adds	r3, #68	; 0x44
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	b292      	uxth	r2, r2
 800609e:	4619      	mov	r1, r3
 80060a0:	f002 faf5 	bl	800868e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	212c      	movs	r1, #44	; 0x2c
 80060aa:	fb01 f303 	mul.w	r3, r1, r3
 80060ae:	4413      	add	r3, r2
 80060b0:	3344      	adds	r3, #68	; 0x44
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	441a      	add	r2, r3
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	202c      	movs	r0, #44	; 0x2c
 80060be:	fb00 f303 	mul.w	r3, r0, r3
 80060c2:	440b      	add	r3, r1
 80060c4:	3344      	adds	r3, #68	; 0x44
 80060c6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	212c      	movs	r1, #44	; 0x2c
 80060ce:	fb01 f303 	mul.w	r3, r1, r3
 80060d2:	4413      	add	r3, r2
 80060d4:	3350      	adds	r3, #80	; 0x50
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	441a      	add	r2, r3
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	202c      	movs	r0, #44	; 0x2c
 80060e2:	fb00 f303 	mul.w	r3, r0, r3
 80060e6:	440b      	add	r3, r1
 80060e8:	3350      	adds	r3, #80	; 0x50
 80060ea:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	0cdb      	lsrs	r3, r3, #19
 80060fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006100:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	212c      	movs	r1, #44	; 0x2c
 8006108:	fb01 f303 	mul.w	r3, r1, r3
 800610c:	4413      	add	r3, r2
 800610e:	3340      	adds	r3, #64	; 0x40
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	4293      	cmp	r3, r2
 8006118:	d13c      	bne.n	8006194 <HCD_RXQLVL_IRQHandler+0x19a>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d039      	beq.n	8006194 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	4413      	add	r3, r2
 8006128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006136:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800613e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	4413      	add	r3, r2
 8006148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614c:	461a      	mov	r2, r3
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	212c      	movs	r1, #44	; 0x2c
 8006158:	fb01 f303 	mul.w	r3, r1, r3
 800615c:	4413      	add	r3, r2
 800615e:	3354      	adds	r3, #84	; 0x54
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	f083 0301 	eor.w	r3, r3, #1
 8006166:	b2d8      	uxtb	r0, r3
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	212c      	movs	r1, #44	; 0x2c
 800616e:	fb01 f303 	mul.w	r3, r1, r3
 8006172:	4413      	add	r3, r2
 8006174:	3354      	adds	r3, #84	; 0x54
 8006176:	4602      	mov	r2, r0
 8006178:	701a      	strb	r2, [r3, #0]
      break;
 800617a:	e00b      	b.n	8006194 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	212c      	movs	r1, #44	; 0x2c
 8006182:	fb01 f303 	mul.w	r3, r1, r3
 8006186:	4413      	add	r3, r2
 8006188:	3360      	adds	r3, #96	; 0x60
 800618a:	2204      	movs	r2, #4
 800618c:	701a      	strb	r2, [r3, #0]
      break;
 800618e:	e001      	b.n	8006194 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006190:	bf00      	nop
 8006192:	e000      	b.n	8006196 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006194:	bf00      	nop
  }
}
 8006196:	bf00      	nop
 8006198:	3728      	adds	r7, #40	; 0x28
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b086      	sub	sp, #24
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061ca:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d10b      	bne.n	80061ee <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d102      	bne.n	80061e6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f00a f9d9 	bl	8010598 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f043 0302 	orr.w	r3, r3, #2
 80061ec:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f003 0308 	and.w	r3, r3, #8
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d132      	bne.n	800625e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f043 0308 	orr.w	r3, r3, #8
 80061fe:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b04      	cmp	r3, #4
 8006208:	d126      	bne.n	8006258 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d113      	bne.n	800623a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006218:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800621c:	d106      	bne.n	800622c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2102      	movs	r1, #2
 8006224:	4618      	mov	r0, r3
 8006226:	f002 fb8f 	bl	8008948 <USB_InitFSLSPClkSel>
 800622a:	e011      	b.n	8006250 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2101      	movs	r1, #1
 8006232:	4618      	mov	r0, r3
 8006234:	f002 fb88 	bl	8008948 <USB_InitFSLSPClkSel>
 8006238:	e00a      	b.n	8006250 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d106      	bne.n	8006250 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006248:	461a      	mov	r2, r3
 800624a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800624e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f00a f9ca 	bl	80105ea <HAL_HCD_PortEnabled_Callback>
 8006256:	e002      	b.n	800625e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f00a f9d4 	bl	8010606 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b20      	cmp	r3, #32
 8006266:	d103      	bne.n	8006270 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f043 0320 	orr.w	r3, r3, #32
 800626e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006276:	461a      	mov	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	6013      	str	r3, [r2, #0]
}
 800627c:	bf00      	nop
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08a      	sub	sp, #40	; 0x28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e237      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d050      	beq.n	8006344 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062a2:	4ba3      	ldr	r3, [pc, #652]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 030c 	and.w	r3, r3, #12
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d00c      	beq.n	80062c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ae:	4ba0      	ldr	r3, [pc, #640]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d112      	bne.n	80062e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ba:	4b9d      	ldr	r3, [pc, #628]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062c6:	d10b      	bne.n	80062e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c8:	4b99      	ldr	r3, [pc, #612]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d036      	beq.n	8006342 <HAL_RCC_OscConfig+0xbe>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d132      	bne.n	8006342 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e212      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	4b93      	ldr	r3, [pc, #588]	; (8006534 <HAL_RCC_OscConfig+0x2b0>)
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d013      	beq.n	800631a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f2:	f7fd fb95 	bl	8003a20 <HAL_GetTick>
 80062f6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062fa:	f7fd fb91 	bl	8003a20 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b64      	cmp	r3, #100	; 0x64
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e1fc      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630c:	4b88      	ldr	r3, [pc, #544]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f0      	beq.n	80062fa <HAL_RCC_OscConfig+0x76>
 8006318:	e014      	b.n	8006344 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631a:	f7fd fb81 	bl	8003a20 <HAL_GetTick>
 800631e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006320:	e008      	b.n	8006334 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006322:	f7fd fb7d 	bl	8003a20 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b64      	cmp	r3, #100	; 0x64
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e1e8      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006334:	4b7e      	ldr	r3, [pc, #504]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1f0      	bne.n	8006322 <HAL_RCC_OscConfig+0x9e>
 8006340:	e000      	b.n	8006344 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006342:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d077      	beq.n	8006440 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006350:	4b77      	ldr	r3, [pc, #476]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 030c 	and.w	r3, r3, #12
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800635c:	4b74      	ldr	r3, [pc, #464]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006364:	2b08      	cmp	r3, #8
 8006366:	d126      	bne.n	80063b6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006368:	4b71      	ldr	r3, [pc, #452]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d120      	bne.n	80063b6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006374:	4b6e      	ldr	r3, [pc, #440]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <HAL_RCC_OscConfig+0x108>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d001      	beq.n	800638c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e1bc      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800638c:	4b68      	ldr	r3, [pc, #416]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	21f8      	movs	r1, #248	; 0xf8
 800639a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800639c:	69b9      	ldr	r1, [r7, #24]
 800639e:	fa91 f1a1 	rbit	r1, r1
 80063a2:	6179      	str	r1, [r7, #20]
  return result;
 80063a4:	6979      	ldr	r1, [r7, #20]
 80063a6:	fab1 f181 	clz	r1, r1
 80063aa:	b2c9      	uxtb	r1, r1
 80063ac:	408b      	lsls	r3, r1
 80063ae:	4960      	ldr	r1, [pc, #384]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b4:	e044      	b.n	8006440 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d02a      	beq.n	8006414 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063be:	4b5e      	ldr	r3, [pc, #376]	; (8006538 <HAL_RCC_OscConfig+0x2b4>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c4:	f7fd fb2c 	bl	8003a20 <HAL_GetTick>
 80063c8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063cc:	f7fd fb28 	bl	8003a20 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e193      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063de:	4b54      	ldr	r3, [pc, #336]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ea:	4b51      	ldr	r3, [pc, #324]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	21f8      	movs	r1, #248	; 0xf8
 80063f8:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063fa:	6939      	ldr	r1, [r7, #16]
 80063fc:	fa91 f1a1 	rbit	r1, r1
 8006400:	60f9      	str	r1, [r7, #12]
  return result;
 8006402:	68f9      	ldr	r1, [r7, #12]
 8006404:	fab1 f181 	clz	r1, r1
 8006408:	b2c9      	uxtb	r1, r1
 800640a:	408b      	lsls	r3, r1
 800640c:	4948      	ldr	r1, [pc, #288]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 800640e:	4313      	orrs	r3, r2
 8006410:	600b      	str	r3, [r1, #0]
 8006412:	e015      	b.n	8006440 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006414:	4b48      	ldr	r3, [pc, #288]	; (8006538 <HAL_RCC_OscConfig+0x2b4>)
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641a:	f7fd fb01 	bl	8003a20 <HAL_GetTick>
 800641e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006420:	e008      	b.n	8006434 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006422:	f7fd fafd 	bl	8003a20 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e168      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006434:	4b3e      	ldr	r3, [pc, #248]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f0      	bne.n	8006422 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d030      	beq.n	80064ae <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d016      	beq.n	8006482 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006454:	4b39      	ldr	r3, [pc, #228]	; (800653c <HAL_RCC_OscConfig+0x2b8>)
 8006456:	2201      	movs	r2, #1
 8006458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800645a:	f7fd fae1 	bl	8003a20 <HAL_GetTick>
 800645e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006462:	f7fd fadd 	bl	8003a20 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e148      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006474:	4b2e      	ldr	r3, [pc, #184]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 8006476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0f0      	beq.n	8006462 <HAL_RCC_OscConfig+0x1de>
 8006480:	e015      	b.n	80064ae <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006482:	4b2e      	ldr	r3, [pc, #184]	; (800653c <HAL_RCC_OscConfig+0x2b8>)
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006488:	f7fd faca 	bl	8003a20 <HAL_GetTick>
 800648c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800648e:	e008      	b.n	80064a2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006490:	f7fd fac6 	bl	8003a20 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b02      	cmp	r3, #2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e131      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a2:	4b23      	ldr	r3, [pc, #140]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 80064a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1f0      	bne.n	8006490 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 8088 	beq.w	80065cc <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064bc:	2300      	movs	r3, #0
 80064be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064c2:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d110      	bne.n	80064f0 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ce:	2300      	movs	r3, #0
 80064d0:	60bb      	str	r3, [r7, #8]
 80064d2:	4b17      	ldr	r3, [pc, #92]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	4a16      	ldr	r2, [pc, #88]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 80064d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064dc:	6413      	str	r3, [r2, #64]	; 0x40
 80064de:	4b14      	ldr	r3, [pc, #80]	; (8006530 <HAL_RCC_OscConfig+0x2ac>)
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e6:	60bb      	str	r3, [r7, #8]
 80064e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80064f0:	4b13      	ldr	r3, [pc, #76]	; (8006540 <HAL_RCC_OscConfig+0x2bc>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a12      	ldr	r2, [pc, #72]	; (8006540 <HAL_RCC_OscConfig+0x2bc>)
 80064f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064fa:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064fc:	4b10      	ldr	r3, [pc, #64]	; (8006540 <HAL_RCC_OscConfig+0x2bc>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d123      	bne.n	8006550 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006508:	4b0d      	ldr	r3, [pc, #52]	; (8006540 <HAL_RCC_OscConfig+0x2bc>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a0c      	ldr	r2, [pc, #48]	; (8006540 <HAL_RCC_OscConfig+0x2bc>)
 800650e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006512:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006514:	f7fd fa84 	bl	8003a20 <HAL_GetTick>
 8006518:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651a:	e013      	b.n	8006544 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800651c:	f7fd fa80 	bl	8003a20 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d90c      	bls.n	8006544 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e0eb      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
 800652e:	bf00      	nop
 8006530:	40023800 	.word	0x40023800
 8006534:	40023802 	.word	0x40023802
 8006538:	42470000 	.word	0x42470000
 800653c:	42470e80 	.word	0x42470e80
 8006540:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006544:	4b72      	ldr	r3, [pc, #456]	; (8006710 <HAL_RCC_OscConfig+0x48c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0e5      	beq.n	800651c <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	4b6f      	ldr	r3, [pc, #444]	; (8006714 <HAL_RCC_OscConfig+0x490>)
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d015      	beq.n	800658e <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006562:	f7fd fa5d 	bl	8003a20 <HAL_GetTick>
 8006566:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006568:	e00a      	b.n	8006580 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800656a:	f7fd fa59 	bl	8003a20 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	f241 3288 	movw	r2, #5000	; 0x1388
 8006578:	4293      	cmp	r3, r2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e0c2      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006580:	4b65      	ldr	r3, [pc, #404]	; (8006718 <HAL_RCC_OscConfig+0x494>)
 8006582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0ee      	beq.n	800656a <HAL_RCC_OscConfig+0x2e6>
 800658c:	e014      	b.n	80065b8 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800658e:	f7fd fa47 	bl	8003a20 <HAL_GetTick>
 8006592:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006594:	e00a      	b.n	80065ac <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006596:	f7fd fa43 	bl	8003a20 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e0ac      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ac:	4b5a      	ldr	r3, [pc, #360]	; (8006718 <HAL_RCC_OscConfig+0x494>)
 80065ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1ee      	bne.n	8006596 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d105      	bne.n	80065cc <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065c0:	4b55      	ldr	r3, [pc, #340]	; (8006718 <HAL_RCC_OscConfig+0x494>)
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	4a54      	ldr	r2, [pc, #336]	; (8006718 <HAL_RCC_OscConfig+0x494>)
 80065c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8097 	beq.w	8006704 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065d6:	4b50      	ldr	r3, [pc, #320]	; (8006718 <HAL_RCC_OscConfig+0x494>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 030c 	and.w	r3, r3, #12
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d061      	beq.n	80066a6 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d146      	bne.n	8006678 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ea:	4b4c      	ldr	r3, [pc, #304]	; (800671c <HAL_RCC_OscConfig+0x498>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f0:	f7fd fa16 	bl	8003a20 <HAL_GetTick>
 80065f4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f8:	f7fd fa12 	bl	8003a20 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b64      	cmp	r3, #100	; 0x64
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e07d      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800660a:	4b43      	ldr	r3, [pc, #268]	; (8006718 <HAL_RCC_OscConfig+0x494>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006616:	4b40      	ldr	r3, [pc, #256]	; (8006718 <HAL_RCC_OscConfig+0x494>)
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	4b41      	ldr	r3, [pc, #260]	; (8006720 <HAL_RCC_OscConfig+0x49c>)
 800661c:	4013      	ands	r3, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	69d1      	ldr	r1, [r2, #28]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6a12      	ldr	r2, [r2, #32]
 8006626:	4311      	orrs	r1, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800662c:	0192      	lsls	r2, r2, #6
 800662e:	4311      	orrs	r1, r2
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006634:	0612      	lsls	r2, r2, #24
 8006636:	4311      	orrs	r1, r2
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800663c:	0852      	lsrs	r2, r2, #1
 800663e:	3a01      	subs	r2, #1
 8006640:	0412      	lsls	r2, r2, #16
 8006642:	430a      	orrs	r2, r1
 8006644:	4934      	ldr	r1, [pc, #208]	; (8006718 <HAL_RCC_OscConfig+0x494>)
 8006646:	4313      	orrs	r3, r2
 8006648:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800664a:	4b34      	ldr	r3, [pc, #208]	; (800671c <HAL_RCC_OscConfig+0x498>)
 800664c:	2201      	movs	r2, #1
 800664e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006650:	f7fd f9e6 	bl	8003a20 <HAL_GetTick>
 8006654:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006658:	f7fd f9e2 	bl	8003a20 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b64      	cmp	r3, #100	; 0x64
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e04d      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800666a:	4b2b      	ldr	r3, [pc, #172]	; (8006718 <HAL_RCC_OscConfig+0x494>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0f0      	beq.n	8006658 <HAL_RCC_OscConfig+0x3d4>
 8006676:	e045      	b.n	8006704 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006678:	4b28      	ldr	r3, [pc, #160]	; (800671c <HAL_RCC_OscConfig+0x498>)
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667e:	f7fd f9cf 	bl	8003a20 <HAL_GetTick>
 8006682:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006686:	f7fd f9cb 	bl	8003a20 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b64      	cmp	r3, #100	; 0x64
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e036      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006698:	4b1f      	ldr	r3, [pc, #124]	; (8006718 <HAL_RCC_OscConfig+0x494>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1f0      	bne.n	8006686 <HAL_RCC_OscConfig+0x402>
 80066a4:	e02e      	b.n	8006704 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e029      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80066b2:	4b19      	ldr	r3, [pc, #100]	; (8006718 <HAL_RCC_OscConfig+0x494>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d11c      	bne.n	8006700 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d115      	bne.n	8006700 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	099b      	lsrs	r3, r3, #6
 80066d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d10d      	bne.n	8006700 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d106      	bne.n	8006700 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3728      	adds	r7, #40	; 0x28
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	40007000 	.word	0x40007000
 8006714:	40023870 	.word	0x40023870
 8006718:	40023800 	.word	0x40023800
 800671c:	42470060 	.word	0x42470060
 8006720:	f0bc8000 	.word	0xf0bc8000

08006724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e0d2      	b.n	80068de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006738:	4b6b      	ldr	r3, [pc, #428]	; (80068e8 <HAL_RCC_ClockConfig+0x1c4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d90c      	bls.n	8006760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006746:	4b68      	ldr	r3, [pc, #416]	; (80068e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800674e:	4b66      	ldr	r3, [pc, #408]	; (80068e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	429a      	cmp	r2, r3
 800675a:	d001      	beq.n	8006760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0be      	b.n	80068de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d020      	beq.n	80067ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006778:	4b5c      	ldr	r3, [pc, #368]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	4a5b      	ldr	r2, [pc, #364]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 800677e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0308 	and.w	r3, r3, #8
 800678c:	2b00      	cmp	r3, #0
 800678e:	d005      	beq.n	800679c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8006790:	4b56      	ldr	r3, [pc, #344]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	4a55      	ldr	r2, [pc, #340]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 8006796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800679a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800679c:	4b53      	ldr	r3, [pc, #332]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	4950      	ldr	r1, [pc, #320]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d040      	beq.n	800683c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d107      	bne.n	80067d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067c2:	4b4a      	ldr	r3, [pc, #296]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d115      	bne.n	80067fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e085      	b.n	80068de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d107      	bne.n	80067ea <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067da:	4b44      	ldr	r3, [pc, #272]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d109      	bne.n	80067fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e079      	b.n	80068de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ea:	4b40      	ldr	r3, [pc, #256]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e071      	b.n	80068de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067fa:	4b3c      	ldr	r3, [pc, #240]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f023 0203 	bic.w	r2, r3, #3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	4939      	ldr	r1, [pc, #228]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 8006808:	4313      	orrs	r3, r2
 800680a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800680c:	f7fd f908 	bl	8003a20 <HAL_GetTick>
 8006810:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006812:	e00a      	b.n	800682a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006814:	f7fd f904 	bl	8003a20 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006822:	4293      	cmp	r3, r2
 8006824:	d901      	bls.n	800682a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e059      	b.n	80068de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800682a:	4b30      	ldr	r3, [pc, #192]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 020c 	and.w	r2, r3, #12
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	429a      	cmp	r2, r3
 800683a:	d1eb      	bne.n	8006814 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800683c:	4b2a      	ldr	r3, [pc, #168]	; (80068e8 <HAL_RCC_ClockConfig+0x1c4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d20c      	bcs.n	8006864 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800684a:	4b27      	ldr	r3, [pc, #156]	; (80068e8 <HAL_RCC_ClockConfig+0x1c4>)
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006852:	4b25      	ldr	r3, [pc, #148]	; (80068e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	429a      	cmp	r2, r3
 800685e:	d001      	beq.n	8006864 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e03c      	b.n	80068de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b00      	cmp	r3, #0
 800686e:	d008      	beq.n	8006882 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006870:	4b1e      	ldr	r3, [pc, #120]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	491b      	ldr	r1, [pc, #108]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 800687e:	4313      	orrs	r3, r2
 8006880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0308 	and.w	r3, r3, #8
 800688a:	2b00      	cmp	r3, #0
 800688c:	d009      	beq.n	80068a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800688e:	4b17      	ldr	r3, [pc, #92]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	4913      	ldr	r1, [pc, #76]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80068a2:	f000 f82b 	bl	80068fc <HAL_RCC_GetSysClockFreq>
 80068a6:	4601      	mov	r1, r0
 80068a8:	4b10      	ldr	r3, [pc, #64]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068b0:	22f0      	movs	r2, #240	; 0xf0
 80068b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	fa92 f2a2 	rbit	r2, r2
 80068ba:	60fa      	str	r2, [r7, #12]
  return result;
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	fab2 f282 	clz	r2, r2
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	40d3      	lsrs	r3, r2
 80068c6:	4a0a      	ldr	r2, [pc, #40]	; (80068f0 <HAL_RCC_ClockConfig+0x1cc>)
 80068c8:	5cd3      	ldrb	r3, [r2, r3]
 80068ca:	fa21 f303 	lsr.w	r3, r1, r3
 80068ce:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <HAL_RCC_ClockConfig+0x1d0>)
 80068d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068d2:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <HAL_RCC_ClockConfig+0x1d4>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fd f860 	bl	800399c <HAL_InitTick>

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	40023c00 	.word	0x40023c00
 80068ec:	40023800 	.word	0x40023800
 80068f0:	08011454 	.word	0x08011454
 80068f4:	20000018 	.word	0x20000018
 80068f8:	2000001c 	.word	0x2000001c

080068fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068fc:	b5b0      	push	{r4, r5, r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006902:	2100      	movs	r1, #0
 8006904:	6079      	str	r1, [r7, #4]
 8006906:	2100      	movs	r1, #0
 8006908:	60f9      	str	r1, [r7, #12]
 800690a:	2100      	movs	r1, #0
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800690e:	2100      	movs	r1, #0
 8006910:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006912:	4952      	ldr	r1, [pc, #328]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8006914:	6889      	ldr	r1, [r1, #8]
 8006916:	f001 010c 	and.w	r1, r1, #12
 800691a:	2908      	cmp	r1, #8
 800691c:	d00d      	beq.n	800693a <HAL_RCC_GetSysClockFreq+0x3e>
 800691e:	2908      	cmp	r1, #8
 8006920:	f200 8094 	bhi.w	8006a4c <HAL_RCC_GetSysClockFreq+0x150>
 8006924:	2900      	cmp	r1, #0
 8006926:	d002      	beq.n	800692e <HAL_RCC_GetSysClockFreq+0x32>
 8006928:	2904      	cmp	r1, #4
 800692a:	d003      	beq.n	8006934 <HAL_RCC_GetSysClockFreq+0x38>
 800692c:	e08e      	b.n	8006a4c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800692e:	4b4c      	ldr	r3, [pc, #304]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x164>)
 8006930:	60bb      	str	r3, [r7, #8]
       break;
 8006932:	e08e      	b.n	8006a52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006934:	4b4b      	ldr	r3, [pc, #300]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x168>)
 8006936:	60bb      	str	r3, [r7, #8]
      break;
 8006938:	e08b      	b.n	8006a52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800693a:	4948      	ldr	r1, [pc, #288]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x160>)
 800693c:	6849      	ldr	r1, [r1, #4]
 800693e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006942:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006944:	4945      	ldr	r1, [pc, #276]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8006946:	6849      	ldr	r1, [r1, #4]
 8006948:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800694c:	2900      	cmp	r1, #0
 800694e:	d024      	beq.n	800699a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006950:	4942      	ldr	r1, [pc, #264]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8006952:	6849      	ldr	r1, [r1, #4]
 8006954:	0989      	lsrs	r1, r1, #6
 8006956:	4608      	mov	r0, r1
 8006958:	f04f 0100 	mov.w	r1, #0
 800695c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006960:	f04f 0500 	mov.w	r5, #0
 8006964:	ea00 0204 	and.w	r2, r0, r4
 8006968:	ea01 0305 	and.w	r3, r1, r5
 800696c:	493d      	ldr	r1, [pc, #244]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x168>)
 800696e:	fb01 f003 	mul.w	r0, r1, r3
 8006972:	2100      	movs	r1, #0
 8006974:	fb01 f102 	mul.w	r1, r1, r2
 8006978:	1844      	adds	r4, r0, r1
 800697a:	493a      	ldr	r1, [pc, #232]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x168>)
 800697c:	fba2 0101 	umull	r0, r1, r2, r1
 8006980:	1863      	adds	r3, r4, r1
 8006982:	4619      	mov	r1, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	461a      	mov	r2, r3
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	f7fa fc36 	bl	80011fc <__aeabi_uldivmod>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4613      	mov	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e04a      	b.n	8006a30 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699a:	4b30      	ldr	r3, [pc, #192]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x160>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	099b      	lsrs	r3, r3, #6
 80069a0:	461a      	mov	r2, r3
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069aa:	f04f 0100 	mov.w	r1, #0
 80069ae:	ea02 0400 	and.w	r4, r2, r0
 80069b2:	ea03 0501 	and.w	r5, r3, r1
 80069b6:	4620      	mov	r0, r4
 80069b8:	4629      	mov	r1, r5
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	f04f 0300 	mov.w	r3, #0
 80069c2:	014b      	lsls	r3, r1, #5
 80069c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069c8:	0142      	lsls	r2, r0, #5
 80069ca:	4610      	mov	r0, r2
 80069cc:	4619      	mov	r1, r3
 80069ce:	1b00      	subs	r0, r0, r4
 80069d0:	eb61 0105 	sbc.w	r1, r1, r5
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	018b      	lsls	r3, r1, #6
 80069de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069e2:	0182      	lsls	r2, r0, #6
 80069e4:	1a12      	subs	r2, r2, r0
 80069e6:	eb63 0301 	sbc.w	r3, r3, r1
 80069ea:	f04f 0000 	mov.w	r0, #0
 80069ee:	f04f 0100 	mov.w	r1, #0
 80069f2:	00d9      	lsls	r1, r3, #3
 80069f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069f8:	00d0      	lsls	r0, r2, #3
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	1912      	adds	r2, r2, r4
 8006a00:	eb45 0303 	adc.w	r3, r5, r3
 8006a04:	f04f 0000 	mov.w	r0, #0
 8006a08:	f04f 0100 	mov.w	r1, #0
 8006a0c:	0299      	lsls	r1, r3, #10
 8006a0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a12:	0290      	lsls	r0, r2, #10
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	f7fa fbea 	bl	80011fc <__aeabi_uldivmod>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a30:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	0c1b      	lsrs	r3, r3, #16
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a48:	60bb      	str	r3, [r7, #8]
      break;
 8006a4a:	e002      	b.n	8006a52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a4c:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x164>)
 8006a4e:	60bb      	str	r3, [r7, #8]
      break;
 8006a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a52:	68bb      	ldr	r3, [r7, #8]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8006a5c:	40023800 	.word	0x40023800
 8006a60:	00f42400 	.word	0x00f42400
 8006a64:	017d7840 	.word	0x017d7840

08006a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a6c:	4b02      	ldr	r3, [pc, #8]	; (8006a78 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bc80      	pop	{r7}
 8006a76:	4770      	bx	lr
 8006a78:	20000018 	.word	0x20000018

08006a7c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	; 0x28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d103      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d14c      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006aa0:	4b6d      	ldr	r3, [pc, #436]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006aa6:	f7fc ffbb 	bl	8003a20 <HAL_GetTick>
 8006aaa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006aae:	f7fc ffb7 	bl	8003a20 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e0c7      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ac0:	4b66      	ldr	r3, [pc, #408]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f0      	bne.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006ad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	fa92 f2a2 	rbit	r2, r2
 8006adc:	613a      	str	r2, [r7, #16]
  return result;
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	fab2 f282 	clz	r2, r2
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	fa03 f202 	lsl.w	r2, r3, r2
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8006af2:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af4:	69f9      	ldr	r1, [r7, #28]
 8006af6:	fa91 f1a1 	rbit	r1, r1
 8006afa:	61b9      	str	r1, [r7, #24]
  return result;
 8006afc:	69b9      	ldr	r1, [r7, #24]
 8006afe:	fab1 f181 	clz	r1, r1
 8006b02:	b2c9      	uxtb	r1, r1
 8006b04:	408b      	lsls	r3, r1
 8006b06:	4955      	ldr	r1, [pc, #340]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b0e:	4b52      	ldr	r3, [pc, #328]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006b10:	2201      	movs	r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b14:	f7fc ff84 	bl	8003a20 <HAL_GetTick>
 8006b18:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b1a:	e008      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b1c:	f7fc ff80 	bl	8003a20 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d901      	bls.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e090      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b2e:	4b4b      	ldr	r3, [pc, #300]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0f0      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 8083 	beq.w	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	4b43      	ldr	r3, [pc, #268]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	4a42      	ldr	r2, [pc, #264]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b56:	6413      	str	r3, [r2, #64]	; 0x40
 8006b58:	4b40      	ldr	r3, [pc, #256]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b64:	4b3e      	ldr	r3, [pc, #248]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a3d      	ldr	r2, [pc, #244]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b6e:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b70:	f7fc ff56 	bl	8003a20 <HAL_GetTick>
 8006b74:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b76:	e008      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b78:	f7fc ff52 	bl	8003a20 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e062      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b8a:	4b35      	ldr	r3, [pc, #212]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f0      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b96:	4b31      	ldr	r3, [pc, #196]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b9e:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d02f      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bae:	6a3a      	ldr	r2, [r7, #32]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d028      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bb4:	4b29      	ldr	r3, [pc, #164]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bbc:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bbe:	4b29      	ldr	r3, [pc, #164]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bc4:	4b27      	ldr	r3, [pc, #156]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006bca:	4a24      	ldr	r2, [pc, #144]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bd0:	4b22      	ldr	r3, [pc, #136]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d114      	bne.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006bdc:	f7fc ff20 	bl	8003a20 <HAL_GetTick>
 8006be0:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be2:	e00a      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006be4:	f7fc ff1c 	bl	8003a20 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e02a      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bfa:	4b18      	ldr	r3, [pc, #96]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0ee      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c12:	d10d      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006c14:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c28:	490c      	ldr	r1, [pc, #48]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	608b      	str	r3, [r1, #8]
 8006c2e:	e005      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006c30:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	4a09      	ldr	r2, [pc, #36]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c3a:	6093      	str	r3, [r2, #8]
 8006c3c:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c48:	4904      	ldr	r1, [pc, #16]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3728      	adds	r7, #40	; 0x28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	42470068 	.word	0x42470068
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	40007000 	.word	0x40007000
 8006c64:	42470e40 	.word	0x42470e40

08006c68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e07c      	b.n	8006d74 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	7f5b      	ldrb	r3, [r3, #29]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d105      	bne.n	8006c90 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fc fb96 	bl	80033bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	22ca      	movs	r2, #202	; 0xca
 8006c9c:	625a      	str	r2, [r3, #36]	; 0x24
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2253      	movs	r2, #83	; 0x53
 8006ca4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fb8d 	bl	80073c6 <RTC_EnterInitMode>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d008      	beq.n	8006cc4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	22ff      	movs	r2, #255	; 0xff
 8006cb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2204      	movs	r2, #4
 8006cbe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e057      	b.n	8006d74 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	6812      	ldr	r2, [r2, #0]
 8006cce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6899      	ldr	r1, [r3, #8]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	68d2      	ldr	r2, [r2, #12]
 8006cfe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6919      	ldr	r1, [r3, #16]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	041a      	lsls	r2, r3, #16
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d22:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fb26 	bl	8007376 <HAL_RTC_WaitForSynchro>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d008      	beq.n	8006d42 <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	22ff      	movs	r2, #255	; 0xff
 8006d36:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2204      	movs	r2, #4
 8006d3c:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e018      	b.n	8006d74 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d50:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699a      	ldr	r2, [r3, #24]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	22ff      	movs	r2, #255	; 0xff
 8006d6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006d72:	2300      	movs	r3, #0
  }
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d7c:	b590      	push	{r4, r7, lr}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	7f1b      	ldrb	r3, [r3, #28]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_RTC_SetTime+0x1c>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e0a3      	b.n	8006ee0 <HAL_RTC_SetTime+0x164>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2202      	movs	r2, #2
 8006da2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d126      	bne.n	8006df8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d102      	bne.n	8006dbe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fb2b 	bl	800741e <RTC_ByteToBcd2>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	785b      	ldrb	r3, [r3, #1]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fb24 	bl	800741e <RTC_ByteToBcd2>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006dda:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	789b      	ldrb	r3, [r3, #2]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fb1c 	bl	800741e <RTC_ByteToBcd2>
 8006de6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006de8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	78db      	ldrb	r3, [r3, #3]
 8006df0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	e018      	b.n	8006e2a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d102      	bne.n	8006e0c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	785b      	ldrb	r3, [r3, #1]
 8006e16:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006e18:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006e1e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	78db      	ldrb	r3, [r3, #3]
 8006e24:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	22ca      	movs	r2, #202	; 0xca
 8006e30:	625a      	str	r2, [r3, #36]	; 0x24
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2253      	movs	r2, #83	; 0x53
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fac3 	bl	80073c6 <RTC_EnterInitMode>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00b      	beq.n	8006e5e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	22ff      	movs	r2, #255	; 0xff
 8006e4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2204      	movs	r2, #4
 8006e52:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e040      	b.n	8006ee0 <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006e68:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006e6c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e7c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6899      	ldr	r1, [r3, #8]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ea4:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fa65 	bl	8007376 <HAL_RTC_WaitForSynchro>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00b      	beq.n	8006eca <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	22ff      	movs	r2, #255	; 0xff
 8006eb8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2204      	movs	r2, #4
 8006ebe:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e00a      	b.n	8006ee0 <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	22ff      	movs	r2, #255	; 0xff
 8006ed0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006ede:	2300      	movs	r3, #0
  }
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd90      	pop	{r4, r7, pc}

08006ee8 <HAL_RTC_GetTime>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006f02:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006f06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	0c1b      	lsrs	r3, r3, #16
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	0c1b      	lsrs	r3, r3, #16
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d11a      	bne.n	8006f82 <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 fa81 	bl	8007458 <RTC_Bcd2ToByte>
 8006f56:	4603      	mov	r3, r0
 8006f58:	461a      	mov	r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	785b      	ldrb	r3, [r3, #1]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fa78 	bl	8007458 <RTC_Bcd2ToByte>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	789b      	ldrb	r3, [r3, #2]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fa6f 	bl	8007458 <RTC_Bcd2ToByte>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006f8c:	b590      	push	{r4, r7, lr}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	7f1b      	ldrb	r3, [r3, #28]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_RTC_SetDate+0x1c>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e08d      	b.n	80070c4 <HAL_RTC_SetDate+0x138>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2201      	movs	r2, #1
 8006fac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10e      	bne.n	8006fd8 <HAL_RTC_SetDate+0x4c>
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d008      	beq.n	8006fd8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	785b      	ldrb	r3, [r3, #1]
 8006fca:	f023 0310 	bic.w	r3, r3, #16
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	330a      	adds	r3, #10
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d11c      	bne.n	8007018 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	78db      	ldrb	r3, [r3, #3]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fa1b 	bl	800741e <RTC_ByteToBcd2>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	785b      	ldrb	r3, [r3, #1]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 fa14 	bl	800741e <RTC_ByteToBcd2>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006ffa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	789b      	ldrb	r3, [r3, #2]
 8007000:	4618      	mov	r0, r3
 8007002:	f000 fa0c 	bl	800741e <RTC_ByteToBcd2>
 8007006:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007008:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e00e      	b.n	8007036 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	78db      	ldrb	r3, [r3, #3]
 800701c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	785b      	ldrb	r3, [r3, #1]
 8007022:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007024:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800702a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	22ca      	movs	r2, #202	; 0xca
 800703c:	625a      	str	r2, [r3, #36]	; 0x24
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2253      	movs	r2, #83	; 0x53
 8007044:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f9bd 	bl	80073c6 <RTC_EnterInitMode>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00b      	beq.n	800706a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	22ff      	movs	r2, #255	; 0xff
 8007058:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2204      	movs	r2, #4
 800705e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e02c      	b.n	80070c4 <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007074:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007078:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007088:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 f973 	bl	8007376 <HAL_RTC_WaitForSynchro>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00b      	beq.n	80070ae <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	22ff      	movs	r2, #255	; 0xff
 800709c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2204      	movs	r2, #4
 80070a2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e00a      	b.n	80070c4 <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	22ff      	movs	r2, #255	; 0xff
 80070b4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80070c2:	2300      	movs	r3, #0
  }
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd90      	pop	{r4, r7, pc}

080070cc <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80070e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80070ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	0c1b      	lsrs	r3, r3, #16
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	0a1b      	lsrs	r3, r3, #8
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f003 031f 	and.w	r3, r3, #31
 8007100:	b2da      	uxtb	r2, r3
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800710e:	b2da      	uxtb	r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	0b5b      	lsrs	r3, r3, #13
 8007118:	b2db      	uxtb	r3, r3
 800711a:	f003 0307 	and.w	r3, r3, #7
 800711e:	b2da      	uxtb	r2, r3
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d11a      	bne.n	8007160 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	78db      	ldrb	r3, [r3, #3]
 800712e:	4618      	mov	r0, r3
 8007130:	f000 f992 	bl	8007458 <RTC_Bcd2ToByte>
 8007134:	4603      	mov	r3, r0
 8007136:	461a      	mov	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	4618      	mov	r0, r3
 8007142:	f000 f989 	bl	8007458 <RTC_Bcd2ToByte>
 8007146:	4603      	mov	r3, r0
 8007148:	461a      	mov	r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	789b      	ldrb	r3, [r3, #2]
 8007152:	4618      	mov	r0, r3
 8007154:	f000 f980 	bl	8007458 <RTC_Bcd2ToByte>
 8007158:	4603      	mov	r3, r0
 800715a:	461a      	mov	r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800716a:	b590      	push	{r4, r7, lr}
 800716c:	b087      	sub	sp, #28
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	7f1b      	ldrb	r3, [r3, #28]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d101      	bne.n	800718a <HAL_RTC_SetAlarm+0x20>
 8007186:	2302      	movs	r3, #2
 8007188:	e0f1      	b.n	800736e <HAL_RTC_SetAlarm+0x204>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2201      	movs	r2, #1
 800718e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2202      	movs	r2, #2
 8007194:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d136      	bne.n	800720a <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d102      	bne.n	80071b0 <HAL_RTC_SetAlarm+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2200      	movs	r2, #0
 80071ae:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 f932 	bl	800741e <RTC_ByteToBcd2>
 80071ba:	4603      	mov	r3, r0
 80071bc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	785b      	ldrb	r3, [r3, #1]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 f92b 	bl	800741e <RTC_ByteToBcd2>
 80071c8:	4603      	mov	r3, r0
 80071ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80071cc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	789b      	ldrb	r3, [r3, #2]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f923 	bl	800741e <RTC_ByteToBcd2>
 80071d8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80071da:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	78db      	ldrb	r3, [r3, #3]
 80071e2:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80071e4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	7d1b      	ldrb	r3, [r3, #20]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 f916 	bl	800741e <RTC_ByteToBcd2>
 80071f2:	4603      	mov	r3, r0
 80071f4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80071f6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80071fe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007204:	4313      	orrs	r3, r2
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	e022      	b.n	8007250 <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2200      	movs	r2, #0
 800721c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	785b      	ldrb	r3, [r3, #1]
 8007228:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800722a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007230:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	78db      	ldrb	r3, [r3, #3]
 8007236:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007238:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	7d1b      	ldrb	r3, [r3, #20]
 800723e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007240:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007246:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800724c:	4313      	orrs	r3, r2
 800724e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	22ca      	movs	r2, #202	; 0xca
 8007256:	625a      	str	r2, [r3, #36]	; 0x24
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2253      	movs	r2, #83	; 0x53
 800725e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007268:	d13b      	bne.n	80072e2 <HAL_RTC_SetAlarm+0x178>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007278:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007288:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800728a:	f7fc fbc9 	bl	8003a20 <HAL_GetTick>
 800728e:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007290:	e013      	b.n	80072ba <HAL_RTC_SetAlarm+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007292:	f7fc fbc5 	bl	8003a20 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072a0:	d90b      	bls.n	80072ba <HAL_RTC_SetAlarm+0x150>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	22ff      	movs	r2, #255	; 0xff
 80072a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2203      	movs	r2, #3
 80072ae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e059      	b.n	800736e <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0e4      	beq.n	8007292 <HAL_RTC_SetAlarm+0x128>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072de:	609a      	str	r2, [r3, #8]
 80072e0:	e03a      	b.n	8007358 <HAL_RTC_SetAlarm+0x1ee>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80072f0:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007300:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007302:	f7fc fb8d 	bl	8003a20 <HAL_GetTick>
 8007306:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007308:	e013      	b.n	8007332 <HAL_RTC_SetAlarm+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800730a:	f7fc fb89 	bl	8003a20 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007318:	d90b      	bls.n	8007332 <HAL_RTC_SetAlarm+0x1c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	22ff      	movs	r2, #255	; 0xff
 8007320:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2203      	movs	r2, #3
 8007326:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e01d      	b.n	800736e <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0e4      	beq.n	800730a <HAL_RTC_SetAlarm+0x1a0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689a      	ldr	r2, [r3, #8]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007356:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	22ff      	movs	r2, #255	; 0xff
 800735e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2201      	movs	r2, #1
 8007364:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	bd90      	pop	{r4, r7, pc}

08007376 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007390:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007392:	f7fc fb45 	bl	8003a20 <HAL_GetTick>
 8007396:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007398:	e009      	b.n	80073ae <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800739a:	f7fc fb41 	bl	8003a20 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073a8:	d901      	bls.n	80073ae <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e007      	b.n	80073be <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f003 0320 	and.w	r3, r3, #32
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0ee      	beq.n	800739a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d119      	bne.n	8007414 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f04f 32ff 	mov.w	r2, #4294967295
 80073e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073ea:	f7fc fb19 	bl	8003a20 <HAL_GetTick>
 80073ee:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80073f0:	e009      	b.n	8007406 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073f2:	f7fc fb15 	bl	8003a20 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007400:	d901      	bls.n	8007406 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e007      	b.n	8007416 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	d0ee      	beq.n	80073f2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800741e:	b480      	push	{r7}
 8007420:	b085      	sub	sp, #20
 8007422:	af00      	add	r7, sp, #0
 8007424:	4603      	mov	r3, r0
 8007426:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 800742c:	e005      	b.n	800743a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3301      	adds	r3, #1
 8007432:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007434:	79fb      	ldrb	r3, [r7, #7]
 8007436:	3b0a      	subs	r3, #10
 8007438:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 800743a:	79fb      	ldrb	r3, [r7, #7]
 800743c:	2b09      	cmp	r3, #9
 800743e:	d8f6      	bhi.n	800742e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	b2db      	uxtb	r3, r3
 8007444:	011b      	lsls	r3, r3, #4
 8007446:	b2da      	uxtb	r2, r3
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	4313      	orrs	r3, r2
 800744c:	b2db      	uxtb	r3, r3
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr

08007458 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007466:	79fb      	ldrb	r3, [r7, #7]
 8007468:	091b      	lsrs	r3, r3, #4
 800746a:	b2db      	uxtb	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	b2da      	uxtb	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	4413      	add	r3, r2
 8007486:	b2db      	uxtb	r3, r3
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr

08007492 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b086      	sub	sp, #24
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	7f1b      	ldrb	r3, [r3, #28]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d101      	bne.n	80074ae <HAL_RTCEx_SetWakeUpTimer+0x1c>
 80074aa:	2302      	movs	r3, #2
 80074ac:	e081      	b.n	80075b2 <HAL_RTCEx_SetWakeUpTimer+0x120>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2202      	movs	r2, #2
 80074b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	22ca      	movs	r2, #202	; 0xca
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2253      	movs	r2, #83	; 0x53
 80074c8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d01e      	beq.n	8007516 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 80074d8:	f7fc faa2 	bl	8003a20 <HAL_GetTick>
 80074dc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80074de:	e013      	b.n	8007508 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074e0:	f7fc fa9e 	bl	8003a20 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ee:	d90b      	bls.n	8007508 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	22ff      	movs	r2, #255	; 0xff
 80074f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2203      	movs	r2, #3
 80074fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e054      	b.n	80075b2 <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f003 0304 	and.w	r3, r3, #4
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e4      	bne.n	80074e0 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007524:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007526:	f7fc fa7b 	bl	8003a20 <HAL_GetTick>
 800752a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800752c:	e013      	b.n	8007556 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800752e:	f7fc fa77 	bl	8003a20 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800753c:	d90b      	bls.n	8007556 <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	22ff      	movs	r2, #255	; 0xff
 8007544:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2203      	movs	r2, #3
 800754a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e02d      	b.n	80075b2 <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0e4      	beq.n	800752e <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0207 	bic.w	r2, r2, #7
 8007572:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6899      	ldr	r1, [r3, #8]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	430a      	orrs	r2, r1
 8007582:	609a      	str	r2, [r3, #8]

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	615a      	str	r2, [r3, #20]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800759a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	22ff      	movs	r2, #255	; 0xff
 80075a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2201      	movs	r2, #1
 80075a8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e041      	b.n	8007650 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d106      	bne.n	80075e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7fb ff01 	bl	80033e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2202      	movs	r2, #2
 80075ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3304      	adds	r3, #4
 80075f6:	4619      	mov	r1, r3
 80075f8:	4610      	mov	r0, r2
 80075fa:	f000 fb35 	bl	8007c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b01      	cmp	r3, #1
 800766a:	d001      	beq.n	8007670 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e046      	b.n	80076fe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a22      	ldr	r2, [pc, #136]	; (8007708 <HAL_TIM_Base_Start+0xb0>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d022      	beq.n	80076c8 <HAL_TIM_Base_Start+0x70>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800768a:	d01d      	beq.n	80076c8 <HAL_TIM_Base_Start+0x70>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a1e      	ldr	r2, [pc, #120]	; (800770c <HAL_TIM_Base_Start+0xb4>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d018      	beq.n	80076c8 <HAL_TIM_Base_Start+0x70>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a1d      	ldr	r2, [pc, #116]	; (8007710 <HAL_TIM_Base_Start+0xb8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d013      	beq.n	80076c8 <HAL_TIM_Base_Start+0x70>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1b      	ldr	r2, [pc, #108]	; (8007714 <HAL_TIM_Base_Start+0xbc>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d00e      	beq.n	80076c8 <HAL_TIM_Base_Start+0x70>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1a      	ldr	r2, [pc, #104]	; (8007718 <HAL_TIM_Base_Start+0xc0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d009      	beq.n	80076c8 <HAL_TIM_Base_Start+0x70>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a18      	ldr	r2, [pc, #96]	; (800771c <HAL_TIM_Base_Start+0xc4>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d004      	beq.n	80076c8 <HAL_TIM_Base_Start+0x70>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a17      	ldr	r2, [pc, #92]	; (8007720 <HAL_TIM_Base_Start+0xc8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d111      	bne.n	80076ec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b06      	cmp	r3, #6
 80076d8:	d010      	beq.n	80076fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0201 	orr.w	r2, r2, #1
 80076e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ea:	e007      	b.n	80076fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0201 	orr.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	bc80      	pop	{r7}
 8007706:	4770      	bx	lr
 8007708:	40010000 	.word	0x40010000
 800770c:	40000400 	.word	0x40000400
 8007710:	40000800 	.word	0x40000800
 8007714:	40000c00 	.word	0x40000c00
 8007718:	40010400 	.word	0x40010400
 800771c:	40014000 	.word	0x40014000
 8007720:	40001800 	.word	0x40001800

08007724 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e041      	b.n	80077ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d106      	bne.n	8007750 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f839 	bl	80077c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3304      	adds	r3, #4
 8007760:	4619      	mov	r1, r3
 8007762:	4610      	mov	r0, r2
 8007764:	f000 fa80 	bl	8007c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr

080077d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d109      	bne.n	80077f8 <HAL_TIM_PWM_Start+0x24>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	bf14      	ite	ne
 80077f0:	2301      	movne	r3, #1
 80077f2:	2300      	moveq	r3, #0
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	e022      	b.n	800783e <HAL_TIM_PWM_Start+0x6a>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d109      	bne.n	8007812 <HAL_TIM_PWM_Start+0x3e>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b01      	cmp	r3, #1
 8007808:	bf14      	ite	ne
 800780a:	2301      	movne	r3, #1
 800780c:	2300      	moveq	r3, #0
 800780e:	b2db      	uxtb	r3, r3
 8007810:	e015      	b.n	800783e <HAL_TIM_PWM_Start+0x6a>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b08      	cmp	r3, #8
 8007816:	d109      	bne.n	800782c <HAL_TIM_PWM_Start+0x58>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b01      	cmp	r3, #1
 8007822:	bf14      	ite	ne
 8007824:	2301      	movne	r3, #1
 8007826:	2300      	moveq	r3, #0
 8007828:	b2db      	uxtb	r3, r3
 800782a:	e008      	b.n	800783e <HAL_TIM_PWM_Start+0x6a>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b01      	cmp	r3, #1
 8007836:	bf14      	ite	ne
 8007838:	2301      	movne	r3, #1
 800783a:	2300      	moveq	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e07c      	b.n	8007940 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d104      	bne.n	8007856 <HAL_TIM_PWM_Start+0x82>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007854:	e013      	b.n	800787e <HAL_TIM_PWM_Start+0xaa>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b04      	cmp	r3, #4
 800785a:	d104      	bne.n	8007866 <HAL_TIM_PWM_Start+0x92>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007864:	e00b      	b.n	800787e <HAL_TIM_PWM_Start+0xaa>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b08      	cmp	r3, #8
 800786a:	d104      	bne.n	8007876 <HAL_TIM_PWM_Start+0xa2>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007874:	e003      	b.n	800787e <HAL_TIM_PWM_Start+0xaa>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2201      	movs	r2, #1
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fcce 	bl	8008228 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a2d      	ldr	r2, [pc, #180]	; (8007948 <HAL_TIM_PWM_Start+0x174>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <HAL_TIM_PWM_Start+0xcc>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a2c      	ldr	r2, [pc, #176]	; (800794c <HAL_TIM_PWM_Start+0x178>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d101      	bne.n	80078a4 <HAL_TIM_PWM_Start+0xd0>
 80078a0:	2301      	movs	r3, #1
 80078a2:	e000      	b.n	80078a6 <HAL_TIM_PWM_Start+0xd2>
 80078a4:	2300      	movs	r3, #0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d007      	beq.n	80078ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a22      	ldr	r2, [pc, #136]	; (8007948 <HAL_TIM_PWM_Start+0x174>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d022      	beq.n	800790a <HAL_TIM_PWM_Start+0x136>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078cc:	d01d      	beq.n	800790a <HAL_TIM_PWM_Start+0x136>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a1f      	ldr	r2, [pc, #124]	; (8007950 <HAL_TIM_PWM_Start+0x17c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d018      	beq.n	800790a <HAL_TIM_PWM_Start+0x136>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1d      	ldr	r2, [pc, #116]	; (8007954 <HAL_TIM_PWM_Start+0x180>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <HAL_TIM_PWM_Start+0x136>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a1c      	ldr	r2, [pc, #112]	; (8007958 <HAL_TIM_PWM_Start+0x184>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d00e      	beq.n	800790a <HAL_TIM_PWM_Start+0x136>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a16      	ldr	r2, [pc, #88]	; (800794c <HAL_TIM_PWM_Start+0x178>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d009      	beq.n	800790a <HAL_TIM_PWM_Start+0x136>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a18      	ldr	r2, [pc, #96]	; (800795c <HAL_TIM_PWM_Start+0x188>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d004      	beq.n	800790a <HAL_TIM_PWM_Start+0x136>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a16      	ldr	r2, [pc, #88]	; (8007960 <HAL_TIM_PWM_Start+0x18c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d111      	bne.n	800792e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b06      	cmp	r3, #6
 800791a:	d010      	beq.n	800793e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0201 	orr.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792c:	e007      	b.n	800793e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0201 	orr.w	r2, r2, #1
 800793c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	40010000 	.word	0x40010000
 800794c:	40010400 	.word	0x40010400
 8007950:	40000400 	.word	0x40000400
 8007954:	40000800 	.word	0x40000800
 8007958:	40000c00 	.word	0x40000c00
 800795c:	40014000 	.word	0x40014000
 8007960:	40001800 	.word	0x40001800

08007964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007976:	2b01      	cmp	r3, #1
 8007978:	d101      	bne.n	800797e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800797a:	2302      	movs	r3, #2
 800797c:	e0ac      	b.n	8007ad8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b0c      	cmp	r3, #12
 800798a:	f200 809f 	bhi.w	8007acc <HAL_TIM_PWM_ConfigChannel+0x168>
 800798e:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007994:	080079c9 	.word	0x080079c9
 8007998:	08007acd 	.word	0x08007acd
 800799c:	08007acd 	.word	0x08007acd
 80079a0:	08007acd 	.word	0x08007acd
 80079a4:	08007a09 	.word	0x08007a09
 80079a8:	08007acd 	.word	0x08007acd
 80079ac:	08007acd 	.word	0x08007acd
 80079b0:	08007acd 	.word	0x08007acd
 80079b4:	08007a4b 	.word	0x08007a4b
 80079b8:	08007acd 	.word	0x08007acd
 80079bc:	08007acd 	.word	0x08007acd
 80079c0:	08007acd 	.word	0x08007acd
 80079c4:	08007a8b 	.word	0x08007a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68b9      	ldr	r1, [r7, #8]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f9e8 	bl	8007da4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	699a      	ldr	r2, [r3, #24]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f042 0208 	orr.w	r2, r2, #8
 80079e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	699a      	ldr	r2, [r3, #24]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0204 	bic.w	r2, r2, #4
 80079f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6999      	ldr	r1, [r3, #24]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	691a      	ldr	r2, [r3, #16]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	619a      	str	r2, [r3, #24]
      break;
 8007a06:	e062      	b.n	8007ace <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68b9      	ldr	r1, [r7, #8]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fa38 	bl	8007e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6999      	ldr	r1, [r3, #24]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	021a      	lsls	r2, r3, #8
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	619a      	str	r2, [r3, #24]
      break;
 8007a48:	e041      	b.n	8007ace <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68b9      	ldr	r1, [r7, #8]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fa8b 	bl	8007f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	69da      	ldr	r2, [r3, #28]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f042 0208 	orr.w	r2, r2, #8
 8007a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69da      	ldr	r2, [r3, #28]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0204 	bic.w	r2, r2, #4
 8007a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	69d9      	ldr	r1, [r3, #28]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	691a      	ldr	r2, [r3, #16]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	61da      	str	r2, [r3, #28]
      break;
 8007a88:	e021      	b.n	8007ace <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68b9      	ldr	r1, [r7, #8]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 fadf 	bl	8008054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69da      	ldr	r2, [r3, #28]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69da      	ldr	r2, [r3, #28]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69d9      	ldr	r1, [r3, #28]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	021a      	lsls	r2, r3, #8
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	61da      	str	r2, [r3, #28]
      break;
 8007aca:	e000      	b.n	8007ace <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007acc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_TIM_ConfigClockSource+0x18>
 8007af4:	2302      	movs	r3, #2
 8007af6:	e0b3      	b.n	8007c60 <HAL_TIM_ConfigClockSource+0x180>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b30:	d03e      	beq.n	8007bb0 <HAL_TIM_ConfigClockSource+0xd0>
 8007b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b36:	f200 8087 	bhi.w	8007c48 <HAL_TIM_ConfigClockSource+0x168>
 8007b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b3e:	f000 8085 	beq.w	8007c4c <HAL_TIM_ConfigClockSource+0x16c>
 8007b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b46:	d87f      	bhi.n	8007c48 <HAL_TIM_ConfigClockSource+0x168>
 8007b48:	2b70      	cmp	r3, #112	; 0x70
 8007b4a:	d01a      	beq.n	8007b82 <HAL_TIM_ConfigClockSource+0xa2>
 8007b4c:	2b70      	cmp	r3, #112	; 0x70
 8007b4e:	d87b      	bhi.n	8007c48 <HAL_TIM_ConfigClockSource+0x168>
 8007b50:	2b60      	cmp	r3, #96	; 0x60
 8007b52:	d050      	beq.n	8007bf6 <HAL_TIM_ConfigClockSource+0x116>
 8007b54:	2b60      	cmp	r3, #96	; 0x60
 8007b56:	d877      	bhi.n	8007c48 <HAL_TIM_ConfigClockSource+0x168>
 8007b58:	2b50      	cmp	r3, #80	; 0x50
 8007b5a:	d03c      	beq.n	8007bd6 <HAL_TIM_ConfigClockSource+0xf6>
 8007b5c:	2b50      	cmp	r3, #80	; 0x50
 8007b5e:	d873      	bhi.n	8007c48 <HAL_TIM_ConfigClockSource+0x168>
 8007b60:	2b40      	cmp	r3, #64	; 0x40
 8007b62:	d058      	beq.n	8007c16 <HAL_TIM_ConfigClockSource+0x136>
 8007b64:	2b40      	cmp	r3, #64	; 0x40
 8007b66:	d86f      	bhi.n	8007c48 <HAL_TIM_ConfigClockSource+0x168>
 8007b68:	2b30      	cmp	r3, #48	; 0x30
 8007b6a:	d064      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0x156>
 8007b6c:	2b30      	cmp	r3, #48	; 0x30
 8007b6e:	d86b      	bhi.n	8007c48 <HAL_TIM_ConfigClockSource+0x168>
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	d060      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0x156>
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d867      	bhi.n	8007c48 <HAL_TIM_ConfigClockSource+0x168>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d05c      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0x156>
 8007b7c:	2b10      	cmp	r3, #16
 8007b7e:	d05a      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007b80:	e062      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	6899      	ldr	r1, [r3, #8]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f000 fb2a 	bl	80081ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ba4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	609a      	str	r2, [r3, #8]
      break;
 8007bae:	e04e      	b.n	8007c4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6818      	ldr	r0, [r3, #0]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	6899      	ldr	r1, [r3, #8]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f000 fb13 	bl	80081ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689a      	ldr	r2, [r3, #8]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bd2:	609a      	str	r2, [r3, #8]
      break;
 8007bd4:	e03b      	b.n	8007c4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	6859      	ldr	r1, [r3, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f000 fa8a 	bl	80080fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2150      	movs	r1, #80	; 0x50
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fae1 	bl	80081b6 <TIM_ITRx_SetConfig>
      break;
 8007bf4:	e02b      	b.n	8007c4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	6859      	ldr	r1, [r3, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f000 faa8 	bl	8008158 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2160      	movs	r1, #96	; 0x60
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 fad1 	bl	80081b6 <TIM_ITRx_SetConfig>
      break;
 8007c14:	e01b      	b.n	8007c4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	6859      	ldr	r1, [r3, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f000 fa6a 	bl	80080fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2140      	movs	r1, #64	; 0x40
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fac1 	bl	80081b6 <TIM_ITRx_SetConfig>
      break;
 8007c34:	e00b      	b.n	8007c4e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4610      	mov	r0, r2
 8007c42:	f000 fab8 	bl	80081b6 <TIM_ITRx_SetConfig>
        break;
 8007c46:	e002      	b.n	8007c4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007c48:	bf00      	nop
 8007c4a:	e000      	b.n	8007c4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007c4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a3f      	ldr	r2, [pc, #252]	; (8007d78 <TIM_Base_SetConfig+0x110>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d013      	beq.n	8007ca8 <TIM_Base_SetConfig+0x40>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c86:	d00f      	beq.n	8007ca8 <TIM_Base_SetConfig+0x40>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a3c      	ldr	r2, [pc, #240]	; (8007d7c <TIM_Base_SetConfig+0x114>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d00b      	beq.n	8007ca8 <TIM_Base_SetConfig+0x40>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a3b      	ldr	r2, [pc, #236]	; (8007d80 <TIM_Base_SetConfig+0x118>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d007      	beq.n	8007ca8 <TIM_Base_SetConfig+0x40>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a3a      	ldr	r2, [pc, #232]	; (8007d84 <TIM_Base_SetConfig+0x11c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d003      	beq.n	8007ca8 <TIM_Base_SetConfig+0x40>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a39      	ldr	r2, [pc, #228]	; (8007d88 <TIM_Base_SetConfig+0x120>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d108      	bne.n	8007cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a2e      	ldr	r2, [pc, #184]	; (8007d78 <TIM_Base_SetConfig+0x110>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d02b      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc8:	d027      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a2b      	ldr	r2, [pc, #172]	; (8007d7c <TIM_Base_SetConfig+0x114>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d023      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a2a      	ldr	r2, [pc, #168]	; (8007d80 <TIM_Base_SetConfig+0x118>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d01f      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a29      	ldr	r2, [pc, #164]	; (8007d84 <TIM_Base_SetConfig+0x11c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d01b      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a28      	ldr	r2, [pc, #160]	; (8007d88 <TIM_Base_SetConfig+0x120>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d017      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a27      	ldr	r2, [pc, #156]	; (8007d8c <TIM_Base_SetConfig+0x124>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d013      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a26      	ldr	r2, [pc, #152]	; (8007d90 <TIM_Base_SetConfig+0x128>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d00f      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a25      	ldr	r2, [pc, #148]	; (8007d94 <TIM_Base_SetConfig+0x12c>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d00b      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a24      	ldr	r2, [pc, #144]	; (8007d98 <TIM_Base_SetConfig+0x130>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d007      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a23      	ldr	r2, [pc, #140]	; (8007d9c <TIM_Base_SetConfig+0x134>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d003      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a22      	ldr	r2, [pc, #136]	; (8007da0 <TIM_Base_SetConfig+0x138>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d108      	bne.n	8007d2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a09      	ldr	r2, [pc, #36]	; (8007d78 <TIM_Base_SetConfig+0x110>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d003      	beq.n	8007d60 <TIM_Base_SetConfig+0xf8>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a0b      	ldr	r2, [pc, #44]	; (8007d88 <TIM_Base_SetConfig+0x120>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d103      	bne.n	8007d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	691a      	ldr	r2, [r3, #16]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	615a      	str	r2, [r3, #20]
}
 8007d6e:	bf00      	nop
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bc80      	pop	{r7}
 8007d76:	4770      	bx	lr
 8007d78:	40010000 	.word	0x40010000
 8007d7c:	40000400 	.word	0x40000400
 8007d80:	40000800 	.word	0x40000800
 8007d84:	40000c00 	.word	0x40000c00
 8007d88:	40010400 	.word	0x40010400
 8007d8c:	40014000 	.word	0x40014000
 8007d90:	40014400 	.word	0x40014400
 8007d94:	40014800 	.word	0x40014800
 8007d98:	40001800 	.word	0x40001800
 8007d9c:	40001c00 	.word	0x40001c00
 8007da0:	40002000 	.word	0x40002000

08007da4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f023 0201 	bic.w	r2, r3, #1
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f023 0302 	bic.w	r3, r3, #2
 8007dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a20      	ldr	r2, [pc, #128]	; (8007e7c <TIM_OC1_SetConfig+0xd8>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d003      	beq.n	8007e08 <TIM_OC1_SetConfig+0x64>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a1f      	ldr	r2, [pc, #124]	; (8007e80 <TIM_OC1_SetConfig+0xdc>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d10c      	bne.n	8007e22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f023 0308 	bic.w	r3, r3, #8
 8007e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f023 0304 	bic.w	r3, r3, #4
 8007e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a15      	ldr	r2, [pc, #84]	; (8007e7c <TIM_OC1_SetConfig+0xd8>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d003      	beq.n	8007e32 <TIM_OC1_SetConfig+0x8e>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a14      	ldr	r2, [pc, #80]	; (8007e80 <TIM_OC1_SetConfig+0xdc>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d111      	bne.n	8007e56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	621a      	str	r2, [r3, #32]
}
 8007e70:	bf00      	nop
 8007e72:	371c      	adds	r7, #28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	40010000 	.word	0x40010000
 8007e80:	40010400 	.word	0x40010400

08007e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	f023 0210 	bic.w	r2, r3, #16
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	021b      	lsls	r3, r3, #8
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f023 0320 	bic.w	r3, r3, #32
 8007ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	011b      	lsls	r3, r3, #4
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a21      	ldr	r2, [pc, #132]	; (8007f64 <TIM_OC2_SetConfig+0xe0>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d003      	beq.n	8007eec <TIM_OC2_SetConfig+0x68>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a20      	ldr	r2, [pc, #128]	; (8007f68 <TIM_OC2_SetConfig+0xe4>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d10d      	bne.n	8007f08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a16      	ldr	r2, [pc, #88]	; (8007f64 <TIM_OC2_SetConfig+0xe0>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d003      	beq.n	8007f18 <TIM_OC2_SetConfig+0x94>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a15      	ldr	r2, [pc, #84]	; (8007f68 <TIM_OC2_SetConfig+0xe4>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d113      	bne.n	8007f40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	621a      	str	r2, [r3, #32]
}
 8007f5a:	bf00      	nop
 8007f5c:	371c      	adds	r7, #28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bc80      	pop	{r7}
 8007f62:	4770      	bx	lr
 8007f64:	40010000 	.word	0x40010000
 8007f68:	40010400 	.word	0x40010400

08007f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f023 0303 	bic.w	r3, r3, #3
 8007fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	021b      	lsls	r3, r3, #8
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a21      	ldr	r2, [pc, #132]	; (800804c <TIM_OC3_SetConfig+0xe0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d003      	beq.n	8007fd2 <TIM_OC3_SetConfig+0x66>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a20      	ldr	r2, [pc, #128]	; (8008050 <TIM_OC3_SetConfig+0xe4>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d10d      	bne.n	8007fee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	021b      	lsls	r3, r3, #8
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a16      	ldr	r2, [pc, #88]	; (800804c <TIM_OC3_SetConfig+0xe0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_OC3_SetConfig+0x92>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a15      	ldr	r2, [pc, #84]	; (8008050 <TIM_OC3_SetConfig+0xe4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d113      	bne.n	8008026 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800800c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	4313      	orrs	r3, r2
 8008018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	011b      	lsls	r3, r3, #4
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	621a      	str	r2, [r3, #32]
}
 8008040:	bf00      	nop
 8008042:	371c      	adds	r7, #28
 8008044:	46bd      	mov	sp, r7
 8008046:	bc80      	pop	{r7}
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	40010000 	.word	0x40010000
 8008050:	40010400 	.word	0x40010400

08008054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800808a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	021b      	lsls	r3, r3, #8
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800809e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	031b      	lsls	r3, r3, #12
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a11      	ldr	r2, [pc, #68]	; (80080f4 <TIM_OC4_SetConfig+0xa0>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d003      	beq.n	80080bc <TIM_OC4_SetConfig+0x68>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a10      	ldr	r2, [pc, #64]	; (80080f8 <TIM_OC4_SetConfig+0xa4>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d109      	bne.n	80080d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	019b      	lsls	r3, r3, #6
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	621a      	str	r2, [r3, #32]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc80      	pop	{r7}
 80080f2:	4770      	bx	lr
 80080f4:	40010000 	.word	0x40010000
 80080f8:	40010400 	.word	0x40010400

080080fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6a1b      	ldr	r3, [r3, #32]
 800810c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	f023 0201 	bic.w	r2, r3, #1
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	011b      	lsls	r3, r3, #4
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	4313      	orrs	r3, r2
 8008130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f023 030a 	bic.w	r3, r3, #10
 8008138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	4313      	orrs	r3, r2
 8008140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	621a      	str	r2, [r3, #32]
}
 800814e:	bf00      	nop
 8008150:	371c      	adds	r7, #28
 8008152:	46bd      	mov	sp, r7
 8008154:	bc80      	pop	{r7}
 8008156:	4770      	bx	lr

08008158 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	f023 0210 	bic.w	r2, r3, #16
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008182:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	031b      	lsls	r3, r3, #12
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008194:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	621a      	str	r2, [r3, #32]
}
 80081ac:	bf00      	nop
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bc80      	pop	{r7}
 80081b4:	4770      	bx	lr

080081b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b085      	sub	sp, #20
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f043 0307 	orr.w	r3, r3, #7
 80081d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	609a      	str	r2, [r3, #8]
}
 80081e0:	bf00      	nop
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bc80      	pop	{r7}
 80081e8:	4770      	bx	lr

080081ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b087      	sub	sp, #28
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	607a      	str	r2, [r7, #4]
 80081f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008204:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	021a      	lsls	r2, r3, #8
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	431a      	orrs	r2, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	4313      	orrs	r3, r2
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	4313      	orrs	r3, r2
 8008216:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	609a      	str	r2, [r3, #8]
}
 800821e:	bf00      	nop
 8008220:	371c      	adds	r7, #28
 8008222:	46bd      	mov	sp, r7
 8008224:	bc80      	pop	{r7}
 8008226:	4770      	bx	lr

08008228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f003 031f 	and.w	r3, r3, #31
 800823a:	2201      	movs	r2, #1
 800823c:	fa02 f303 	lsl.w	r3, r2, r3
 8008240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6a1a      	ldr	r2, [r3, #32]
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	43db      	mvns	r3, r3
 800824a:	401a      	ands	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a1a      	ldr	r2, [r3, #32]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f003 031f 	and.w	r3, r3, #31
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	fa01 f303 	lsl.w	r3, r1, r3
 8008260:	431a      	orrs	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	621a      	str	r2, [r3, #32]
}
 8008266:	bf00      	nop
 8008268:	371c      	adds	r7, #28
 800826a:	46bd      	mov	sp, r7
 800826c:	bc80      	pop	{r7}
 800826e:	4770      	bx	lr

08008270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008284:	2302      	movs	r3, #2
 8008286:	e05a      	b.n	800833e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a20      	ldr	r2, [pc, #128]	; (8008348 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d022      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d4:	d01d      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1c      	ldr	r2, [pc, #112]	; (800834c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d018      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a1a      	ldr	r2, [pc, #104]	; (8008350 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d013      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a19      	ldr	r2, [pc, #100]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00e      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a17      	ldr	r2, [pc, #92]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d009      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a16      	ldr	r2, [pc, #88]	; (800835c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d004      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a14      	ldr	r2, [pc, #80]	; (8008360 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d10c      	bne.n	800832c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	4313      	orrs	r3, r2
 8008322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr
 8008348:	40010000 	.word	0x40010000
 800834c:	40000400 	.word	0x40000400
 8008350:	40000800 	.word	0x40000800
 8008354:	40000c00 	.word	0x40000c00
 8008358:	40010400 	.word	0x40010400
 800835c:	40014000 	.word	0x40014000
 8008360:	40001800 	.word	0x40001800

08008364 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008378:	2b01      	cmp	r3, #1
 800837a:	d101      	bne.n	8008380 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800837c:	2302      	movs	r3, #2
 800837e:	e03d      	b.n	80083fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	bc80      	pop	{r7}
 8008404:	4770      	bx	lr

08008406 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008406:	b084      	sub	sp, #16
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	f107 001c 	add.w	r0, r7, #28
 8008414:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	2b01      	cmp	r3, #1
 800841c:	d122      	bne.n	8008464 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008422:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008448:	2b01      	cmp	r3, #1
 800844a:	d105      	bne.n	8008458 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f98f 	bl	800877c <USB_CoreReset>
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]
 8008462:	e010      	b.n	8008486 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f983 	bl	800877c <USB_CoreReset>
 8008476:	4603      	mov	r3, r0
 8008478:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008488:	2b01      	cmp	r3, #1
 800848a:	d10b      	bne.n	80084a4 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f043 0206 	orr.w	r2, r3, #6
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f043 0220 	orr.w	r2, r3, #32
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084b0:	b004      	add	sp, #16
 80084b2:	4770      	bx	lr

080084b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f043 0201 	orr.w	r2, r3, #1
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bc80      	pop	{r7}
 80084d2:	4770      	bx	lr

080084d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f023 0201 	bic.w	r2, r3, #1
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bc80      	pop	{r7}
 80084f2:	4770      	bx	lr

080084f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008500:	2300      	movs	r3, #0
 8008502:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d115      	bne.n	8008542 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008522:	2001      	movs	r0, #1
 8008524:	f7fb fa86 	bl	8003a34 <HAL_Delay>
      ms++;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3301      	adds	r3, #1
 800852c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f916 	bl	8008760 <USB_GetMode>
 8008534:	4603      	mov	r3, r0
 8008536:	2b01      	cmp	r3, #1
 8008538:	d01e      	beq.n	8008578 <USB_SetCurrentMode+0x84>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2b31      	cmp	r3, #49	; 0x31
 800853e:	d9f0      	bls.n	8008522 <USB_SetCurrentMode+0x2e>
 8008540:	e01a      	b.n	8008578 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008542:	78fb      	ldrb	r3, [r7, #3]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d115      	bne.n	8008574 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008554:	2001      	movs	r0, #1
 8008556:	f7fb fa6d 	bl	8003a34 <HAL_Delay>
      ms++;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3301      	adds	r3, #1
 800855e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f8fd 	bl	8008760 <USB_GetMode>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <USB_SetCurrentMode+0x84>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b31      	cmp	r3, #49	; 0x31
 8008570:	d9f0      	bls.n	8008554 <USB_SetCurrentMode+0x60>
 8008572:	e001      	b.n	8008578 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e005      	b.n	8008584 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b32      	cmp	r3, #50	; 0x32
 800857c:	d101      	bne.n	8008582 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e000      	b.n	8008584 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008596:	2300      	movs	r3, #0
 8008598:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	019b      	lsls	r3, r3, #6
 800859e:	f043 0220 	orr.w	r2, r3, #32
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3301      	adds	r3, #1
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4a08      	ldr	r2, [pc, #32]	; (80085d0 <USB_FlushTxFifo+0x44>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d901      	bls.n	80085b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e006      	b.n	80085c6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	2b20      	cmp	r3, #32
 80085c2:	d0f0      	beq.n	80085a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bc80      	pop	{r7}
 80085ce:	4770      	bx	lr
 80085d0:	00030d40 	.word	0x00030d40

080085d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80085dc:	2300      	movs	r3, #0
 80085de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2210      	movs	r2, #16
 80085e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3301      	adds	r3, #1
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4a08      	ldr	r2, [pc, #32]	; (8008610 <USB_FlushRxFifo+0x3c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d901      	bls.n	80085f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e006      	b.n	8008606 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	f003 0310 	and.w	r3, r3, #16
 8008600:	2b10      	cmp	r3, #16
 8008602:	d0f0      	beq.n	80085e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	bc80      	pop	{r7}
 800860e:	4770      	bx	lr
 8008610:	00030d40 	.word	0x00030d40

08008614 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008614:	b480      	push	{r7}
 8008616:	b089      	sub	sp, #36	; 0x24
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	4611      	mov	r1, r2
 8008620:	461a      	mov	r2, r3
 8008622:	460b      	mov	r3, r1
 8008624:	71fb      	strb	r3, [r7, #7]
 8008626:	4613      	mov	r3, r2
 8008628:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008632:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008636:	2b00      	cmp	r3, #0
 8008638:	d123      	bne.n	8008682 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800863a:	88bb      	ldrh	r3, [r7, #4]
 800863c:	3303      	adds	r3, #3
 800863e:	089b      	lsrs	r3, r3, #2
 8008640:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008642:	2300      	movs	r3, #0
 8008644:	61bb      	str	r3, [r7, #24]
 8008646:	e018      	b.n	800867a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008648:	79fb      	ldrb	r3, [r7, #7]
 800864a:	031a      	lsls	r2, r3, #12
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	4413      	add	r3, r2
 8008650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008654:	461a      	mov	r2, r3
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	3301      	adds	r3, #1
 8008660:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	3301      	adds	r3, #1
 8008666:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	3301      	adds	r3, #1
 800866c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	3301      	adds	r3, #1
 8008672:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	3301      	adds	r3, #1
 8008678:	61bb      	str	r3, [r7, #24]
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	429a      	cmp	r2, r3
 8008680:	d3e2      	bcc.n	8008648 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3724      	adds	r7, #36	; 0x24
 8008688:	46bd      	mov	sp, r7
 800868a:	bc80      	pop	{r7}
 800868c:	4770      	bx	lr

0800868e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800868e:	b480      	push	{r7}
 8008690:	b08b      	sub	sp, #44	; 0x2c
 8008692:	af00      	add	r7, sp, #0
 8008694:	60f8      	str	r0, [r7, #12]
 8008696:	60b9      	str	r1, [r7, #8]
 8008698:	4613      	mov	r3, r2
 800869a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80086a4:	88fb      	ldrh	r3, [r7, #6]
 80086a6:	089b      	lsrs	r3, r3, #2
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80086ac:	88fb      	ldrh	r3, [r7, #6]
 80086ae:	f003 0303 	and.w	r3, r3, #3
 80086b2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80086b4:	2300      	movs	r3, #0
 80086b6:	623b      	str	r3, [r7, #32]
 80086b8:	e014      	b.n	80086e4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	601a      	str	r2, [r3, #0]
    pDest++;
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	3301      	adds	r3, #1
 80086ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	3301      	adds	r3, #1
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	3301      	adds	r3, #1
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	3301      	adds	r3, #1
 80086dc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	3301      	adds	r3, #1
 80086e2:	623b      	str	r3, [r7, #32]
 80086e4:	6a3a      	ldr	r2, [r7, #32]
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d3e6      	bcc.n	80086ba <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80086ec:	8bfb      	ldrh	r3, [r7, #30]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d01e      	beq.n	8008730 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086fc:	461a      	mov	r2, r3
 80086fe:	f107 0310 	add.w	r3, r7, #16
 8008702:	6812      	ldr	r2, [r2, #0]
 8008704:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	b2db      	uxtb	r3, r3
 800870c:	00db      	lsls	r3, r3, #3
 800870e:	fa22 f303 	lsr.w	r3, r2, r3
 8008712:	b2da      	uxtb	r2, r3
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	701a      	strb	r2, [r3, #0]
      i++;
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	3301      	adds	r3, #1
 800871c:	623b      	str	r3, [r7, #32]
      pDest++;
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	3301      	adds	r3, #1
 8008722:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008724:	8bfb      	ldrh	r3, [r7, #30]
 8008726:	3b01      	subs	r3, #1
 8008728:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800872a:	8bfb      	ldrh	r3, [r7, #30]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1ea      	bne.n	8008706 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008732:	4618      	mov	r0, r3
 8008734:	372c      	adds	r7, #44	; 0x2c
 8008736:	46bd      	mov	sp, r7
 8008738:	bc80      	pop	{r7}
 800873a:	4770      	bx	lr

0800873c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4013      	ands	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008754:	68fb      	ldr	r3, [r7, #12]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr

08008760 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	f003 0301 	and.w	r3, r3, #1
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr
	...

0800877c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	3301      	adds	r3, #1
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4a12      	ldr	r2, [pc, #72]	; (80087dc <USB_CoreReset+0x60>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d901      	bls.n	800879a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e01b      	b.n	80087d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	daf2      	bge.n	8008788 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	f043 0201 	orr.w	r2, r3, #1
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3301      	adds	r3, #1
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	4a08      	ldr	r2, [pc, #32]	; (80087dc <USB_CoreReset+0x60>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d901      	bls.n	80087c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e006      	b.n	80087d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d0f0      	beq.n	80087b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bc80      	pop	{r7}
 80087da:	4770      	bx	lr
 80087dc:	00030d40 	.word	0x00030d40

080087e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087e0:	b084      	sub	sp, #16
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	f107 001c 	add.w	r0, r7, #28
 80087ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087fc:	461a      	mov	r2, r3
 80087fe:	2300      	movs	r3, #0
 8008800:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008812:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882e:	2b00      	cmp	r3, #0
 8008830:	d018      	beq.n	8008864 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	2b01      	cmp	r3, #1
 8008836:	d10a      	bne.n	800884e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008846:	f043 0304 	orr.w	r3, r3, #4
 800884a:	6013      	str	r3, [r2, #0]
 800884c:	e014      	b.n	8008878 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800885c:	f023 0304 	bic.w	r3, r3, #4
 8008860:	6013      	str	r3, [r2, #0]
 8008862:	e009      	b.n	8008878 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008872:	f023 0304 	bic.w	r3, r3, #4
 8008876:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008878:	2110      	movs	r1, #16
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7ff fe86 	bl	800858c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff fea7 	bl	80085d4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008886:	2300      	movs	r3, #0
 8008888:	60fb      	str	r3, [r7, #12]
 800888a:	e015      	b.n	80088b8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	4413      	add	r3, r2
 8008894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008898:	461a      	mov	r2, r3
 800889a:	f04f 33ff 	mov.w	r3, #4294967295
 800889e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ac:	461a      	mov	r2, r3
 80088ae:	2300      	movs	r3, #0
 80088b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3301      	adds	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d3e5      	bcc.n	800888c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295
 80088cc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00b      	beq.n	80088f2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a13      	ldr	r2, [pc, #76]	; (8008934 <USB_HostInit+0x154>)
 80088e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a13      	ldr	r2, [pc, #76]	; (8008938 <USB_HostInit+0x158>)
 80088ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80088f0:	e009      	b.n	8008906 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2280      	movs	r2, #128	; 0x80
 80088f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a10      	ldr	r2, [pc, #64]	; (800893c <USB_HostInit+0x15c>)
 80088fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a0f      	ldr	r2, [pc, #60]	; (8008940 <USB_HostInit+0x160>)
 8008902:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008908:	2b00      	cmp	r3, #0
 800890a:	d105      	bne.n	8008918 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	f043 0210 	orr.w	r2, r3, #16
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699a      	ldr	r2, [r3, #24]
 800891c:	4b09      	ldr	r3, [pc, #36]	; (8008944 <USB_HostInit+0x164>)
 800891e:	4313      	orrs	r3, r2
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008930:	b004      	add	sp, #16
 8008932:	4770      	bx	lr
 8008934:	01000200 	.word	0x01000200
 8008938:	00e00300 	.word	0x00e00300
 800893c:	00600080 	.word	0x00600080
 8008940:	004000e0 	.word	0x004000e0
 8008944:	a3200008 	.word	0xa3200008

08008948 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008966:	f023 0303 	bic.w	r3, r3, #3
 800896a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	78fb      	ldrb	r3, [r7, #3]
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	68f9      	ldr	r1, [r7, #12]
 800897c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008980:	4313      	orrs	r3, r2
 8008982:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d107      	bne.n	800899a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008990:	461a      	mov	r2, r3
 8008992:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008996:	6053      	str	r3, [r2, #4]
 8008998:	e009      	b.n	80089ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800899a:	78fb      	ldrb	r3, [r7, #3]
 800899c:	2b02      	cmp	r3, #2
 800899e:	d106      	bne.n	80089ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089a6:	461a      	mov	r2, r3
 80089a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80089ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bc80      	pop	{r7}
 80089b8:	4770      	bx	lr

080089ba <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80089da:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80089e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80089ea:	2064      	movs	r0, #100	; 0x64
 80089ec:	f7fb f822 	bl	8003a34 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80089f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80089fe:	200a      	movs	r0, #10
 8008a00:	f7fb f818 	bl	8003a34 <HAL_Delay>

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b085      	sub	sp, #20
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008a32:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d109      	bne.n	8008a52 <USB_DriveVbus+0x44>
 8008a3e:	78fb      	ldrb	r3, [r7, #3]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d106      	bne.n	8008a52 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008a4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a50:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a5c:	d109      	bne.n	8008a72 <USB_DriveVbus+0x64>
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d106      	bne.n	8008a72 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008a6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a70:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bc80      	pop	{r7}
 8008a7c:	4770      	bx	lr

08008a7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b085      	sub	sp, #20
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	0c5b      	lsrs	r3, r3, #17
 8008a9c:	f003 0303 	and.w	r3, r3, #3
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr

08008aaa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b085      	sub	sp, #20
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	b29b      	uxth	r3, r3
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bc80      	pop	{r7}
 8008ac8:	4770      	bx	lr
	...

08008acc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4603      	mov	r3, r0
 8008adc:	70fb      	strb	r3, [r7, #3]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	70bb      	strb	r3, [r7, #2]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008afa:	461a      	mov	r2, r3
 8008afc:	f04f 33ff 	mov.w	r3, #4294967295
 8008b00:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008b02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d87e      	bhi.n	8008c08 <USB_HC_Init+0x13c>
 8008b0a:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <USB_HC_Init+0x44>)
 8008b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b10:	08008b21 	.word	0x08008b21
 8008b14:	08008bcb 	.word	0x08008bcb
 8008b18:	08008b21 	.word	0x08008b21
 8008b1c:	08008b8d 	.word	0x08008b8d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008b32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008b34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	da10      	bge.n	8008b5e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	78fa      	ldrb	r2, [r7, #3]
 8008b4c:	0151      	lsls	r1, r2, #5
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	440a      	add	r2, r1
 8008b52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b5a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008b5c:	e057      	b.n	8008c0e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d051      	beq.n	8008c0e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008b6a:	78fb      	ldrb	r3, [r7, #3]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	78fa      	ldrb	r2, [r7, #3]
 8008b7a:	0151      	lsls	r1, r2, #5
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	440a      	add	r2, r1
 8008b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008b88:	60d3      	str	r3, [r2, #12]
      break;
 8008b8a:	e040      	b.n	8008c0e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b8c:	78fb      	ldrb	r3, [r7, #3]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b98:	461a      	mov	r2, r3
 8008b9a:	f240 639d 	movw	r3, #1693	; 0x69d
 8008b9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ba0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	da34      	bge.n	8008c12 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ba8:	78fb      	ldrb	r3, [r7, #3]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	78fa      	ldrb	r2, [r7, #3]
 8008bb8:	0151      	lsls	r1, r2, #5
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	440a      	add	r2, r1
 8008bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bc6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008bc8:	e023      	b.n	8008c12 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f240 2325 	movw	r3, #549	; 0x225
 8008bdc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008bde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	da17      	bge.n	8008c16 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008be6:	78fb      	ldrb	r3, [r7, #3]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	78fa      	ldrb	r2, [r7, #3]
 8008bf6:	0151      	lsls	r1, r2, #5
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	440a      	add	r2, r1
 8008bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c00:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008c04:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008c06:	e006      	b.n	8008c16 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	77fb      	strb	r3, [r7, #31]
      break;
 8008c0c:	e004      	b.n	8008c18 <USB_HC_Init+0x14c>
      break;
 8008c0e:	bf00      	nop
 8008c10:	e002      	b.n	8008c18 <USB_HC_Init+0x14c>
      break;
 8008c12:	bf00      	nop
 8008c14:	e000      	b.n	8008c18 <USB_HC_Init+0x14c>
      break;
 8008c16:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c1e:	699a      	ldr	r2, [r3, #24]
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	f003 030f 	and.w	r3, r3, #15
 8008c26:	2101      	movs	r1, #1
 8008c28:	fa01 f303 	lsl.w	r3, r1, r3
 8008c2c:	6939      	ldr	r1, [r7, #16]
 8008c2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008c32:	4313      	orrs	r3, r2
 8008c34:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008c42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	da03      	bge.n	8008c52 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c4e:	61bb      	str	r3, [r7, #24]
 8008c50:	e001      	b.n	8008c56 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7ff ff11 	bl	8008a7e <USB_GetHostSpeed>
 8008c5c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008c5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d106      	bne.n	8008c74 <USB_HC_Init+0x1a8>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d003      	beq.n	8008c74 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c70:	617b      	str	r3, [r7, #20]
 8008c72:	e001      	b.n	8008c78 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c78:	787b      	ldrb	r3, [r7, #1]
 8008c7a:	059b      	lsls	r3, r3, #22
 8008c7c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c80:	78bb      	ldrb	r3, [r7, #2]
 8008c82:	02db      	lsls	r3, r3, #11
 8008c84:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c88:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c8e:	049b      	lsls	r3, r3, #18
 8008c90:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c94:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008c98:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c9c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	0159      	lsls	r1, r3, #5
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	440b      	add	r3, r1
 8008caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008cb4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008cb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d10f      	bne.n	8008cde <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	78fa      	ldrb	r2, [r7, #3]
 8008cce:	0151      	lsls	r1, r2, #5
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	440a      	add	r2, r1
 8008cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cdc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008cde:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3720      	adds	r7, #32
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08c      	sub	sp, #48	; 0x30
 8008cec:	af02      	add	r7, sp, #8
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d04:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d02d      	beq.n	8008d6e <USB_HC_StartXfer+0x86>
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	791b      	ldrb	r3, [r3, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d129      	bne.n	8008d6e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d117      	bne.n	8008d50 <USB_HC_StartXfer+0x68>
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	79db      	ldrb	r3, [r3, #7]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d003      	beq.n	8008d30 <USB_HC_StartXfer+0x48>
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	79db      	ldrb	r3, [r3, #7]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d10f      	bne.n	8008d50 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	69fa      	ldr	r2, [r7, #28]
 8008d40:	0151      	lsls	r1, r2, #5
 8008d42:	6a3a      	ldr	r2, [r7, #32]
 8008d44:	440a      	add	r2, r1
 8008d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <USB_HC_StartXfer+0x86>
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	795b      	ldrb	r3, [r3, #5]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d107      	bne.n	8008d6e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	785b      	ldrb	r3, [r3, #1]
 8008d62:	4619      	mov	r1, r3
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 fa2d 	bl	80091c4 <USB_DoPing>
      return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e0f8      	b.n	8008f60 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d018      	beq.n	8008da8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	8912      	ldrh	r2, [r2, #8]
 8008d7e:	4413      	add	r3, r2
 8008d80:	3b01      	subs	r3, #1
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	8912      	ldrh	r2, [r2, #8]
 8008d86:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d8a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008d8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008d8e:	8b7b      	ldrh	r3, [r7, #26]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d90b      	bls.n	8008dac <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008d94:	8b7b      	ldrh	r3, [r7, #26]
 8008d96:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008d98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	8912      	ldrh	r2, [r2, #8]
 8008d9e:	fb02 f203 	mul.w	r2, r2, r3
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	611a      	str	r2, [r3, #16]
 8008da6:	e001      	b.n	8008dac <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008da8:	2301      	movs	r3, #1
 8008daa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	78db      	ldrb	r3, [r3, #3]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d007      	beq.n	8008dc4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008db4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	8912      	ldrh	r2, [r2, #8]
 8008dba:	fb02 f203 	mul.w	r2, r2, r3
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	611a      	str	r2, [r3, #16]
 8008dc2:	e003      	b.n	8008dcc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	695a      	ldr	r2, [r3, #20]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008dd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008dd6:	04d9      	lsls	r1, r3, #19
 8008dd8:	4b63      	ldr	r3, [pc, #396]	; (8008f68 <USB_HC_StartXfer+0x280>)
 8008dda:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ddc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	7a9b      	ldrb	r3, [r3, #10]
 8008de2:	075b      	lsls	r3, r3, #29
 8008de4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008de8:	69f9      	ldr	r1, [r7, #28]
 8008dea:	0148      	lsls	r0, r1, #5
 8008dec:	6a39      	ldr	r1, [r7, #32]
 8008dee:	4401      	add	r1, r0
 8008df0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008df4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008df6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008df8:	79fb      	ldrb	r3, [r7, #7]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d009      	beq.n	8008e12 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	68d9      	ldr	r1, [r3, #12]
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e0e:	460a      	mov	r2, r1
 8008e10:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	bf0c      	ite	eq
 8008e22:	2301      	moveq	r3, #1
 8008e24:	2300      	movne	r3, #0
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	0151      	lsls	r1, r2, #5
 8008e3c:	6a3a      	ldr	r2, [r7, #32]
 8008e3e:	440a      	add	r2, r1
 8008e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e44:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e48:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	7e7b      	ldrb	r3, [r7, #25]
 8008e5a:	075b      	lsls	r3, r3, #29
 8008e5c:	69f9      	ldr	r1, [r7, #28]
 8008e5e:	0148      	lsls	r0, r1, #5
 8008e60:	6a39      	ldr	r1, [r7, #32]
 8008e62:	4401      	add	r1, r0
 8008e64:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e82:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	78db      	ldrb	r3, [r3, #3]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d004      	beq.n	8008e96 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e92:	613b      	str	r3, [r7, #16]
 8008e94:	e003      	b.n	8008e9e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e9c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ea4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	015a      	lsls	r2, r3, #5
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008eb8:	79fb      	ldrb	r3, [r7, #7]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	e04e      	b.n	8008f60 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	78db      	ldrb	r3, [r3, #3]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d149      	bne.n	8008f5e <USB_HC_StartXfer+0x276>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d045      	beq.n	8008f5e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	79db      	ldrb	r3, [r3, #7]
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d830      	bhi.n	8008f3c <USB_HC_StartXfer+0x254>
 8008eda:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <USB_HC_StartXfer+0x1f8>)
 8008edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee0:	08008ef1 	.word	0x08008ef1
 8008ee4:	08008f15 	.word	0x08008f15
 8008ee8:	08008ef1 	.word	0x08008ef1
 8008eec:	08008f15 	.word	0x08008f15
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	695b      	ldr	r3, [r3, #20]
 8008ef4:	3303      	adds	r3, #3
 8008ef6:	089b      	lsrs	r3, r3, #2
 8008ef8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008efa:	8afa      	ldrh	r2, [r7, #22]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d91c      	bls.n	8008f40 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	f043 0220 	orr.w	r2, r3, #32
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	619a      	str	r2, [r3, #24]
        }
        break;
 8008f12:	e015      	b.n	8008f40 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	3303      	adds	r3, #3
 8008f1a:	089b      	lsrs	r3, r3, #2
 8008f1c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008f1e:	8afa      	ldrh	r2, [r7, #22]
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d90a      	bls.n	8008f44 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	619a      	str	r2, [r3, #24]
        }
        break;
 8008f3a:	e003      	b.n	8008f44 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008f3c:	bf00      	nop
 8008f3e:	e002      	b.n	8008f46 <USB_HC_StartXfer+0x25e>
        break;
 8008f40:	bf00      	nop
 8008f42:	e000      	b.n	8008f46 <USB_HC_StartXfer+0x25e>
        break;
 8008f44:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	68d9      	ldr	r1, [r3, #12]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	785a      	ldrb	r2, [r3, #1]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	2000      	movs	r0, #0
 8008f56:	9000      	str	r0, [sp, #0]
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f7ff fb5b 	bl	8008614 <USB_WritePacket>
  }

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3728      	adds	r7, #40	; 0x28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	1ff80000 	.word	0x1ff80000

08008f6c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	b29b      	uxth	r3, r3
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bc80      	pop	{r7}
 8008f8a:	4770      	bx	lr

08008f8c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b089      	sub	sp, #36	; 0x24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008f9c:	78fb      	ldrb	r3, [r7, #3]
 8008f9e:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	0c9b      	lsrs	r3, r3, #18
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	015a      	lsls	r2, r3, #5
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	0fdb      	lsrs	r3, r3, #31
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f003 0320 	and.w	r3, r3, #32
 8008fd8:	2b20      	cmp	r3, #32
 8008fda:	d104      	bne.n	8008fe6 <USB_HC_Halt+0x5a>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	e0e8      	b.n	80091b8 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <USB_HC_Halt+0x66>
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d173      	bne.n	80090da <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	0151      	lsls	r1, r2, #5
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	440a      	add	r2, r1
 8009008:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800900c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009010:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	f040 80cb 	bne.w	80091b6 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d143      	bne.n	80090b4 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	4413      	add	r3, r2
 8009034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	0151      	lsls	r1, r2, #5
 800903e:	69ba      	ldr	r2, [r7, #24]
 8009040:	440a      	add	r2, r1
 8009042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800904a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	4413      	add	r3, r2
 8009054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	0151      	lsls	r1, r2, #5
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	440a      	add	r2, r1
 8009062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009066:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800906a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	4413      	add	r3, r2
 8009074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	0151      	lsls	r1, r2, #5
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	440a      	add	r2, r1
 8009082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009086:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800908a:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	3301      	adds	r3, #1
 8009090:	61fb      	str	r3, [r7, #28]
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009098:	d81d      	bhi.n	80090d6 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090b0:	d0ec      	beq.n	800908c <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090b2:	e080      	b.n	80091b6 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	0151      	lsls	r1, r2, #5
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	440a      	add	r2, r1
 80090ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090d2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090d4:	e06f      	b.n	80091b6 <USB_HC_Halt+0x22a>
            break;
 80090d6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090d8:	e06d      	b.n	80091b6 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	0151      	lsls	r1, r2, #5
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	440a      	add	r2, r1
 80090f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090f8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d143      	bne.n	8009192 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	4413      	add	r3, r2
 8009112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	0151      	lsls	r1, r2, #5
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	440a      	add	r2, r1
 8009120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009128:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	4413      	add	r3, r2
 8009132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	0151      	lsls	r1, r2, #5
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	440a      	add	r2, r1
 8009140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009148:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	4413      	add	r3, r2
 8009152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	0151      	lsls	r1, r2, #5
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	440a      	add	r2, r1
 8009160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009164:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009168:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	3301      	adds	r3, #1
 800916e:	61fb      	str	r3, [r7, #28]
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009176:	d81d      	bhi.n	80091b4 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	4413      	add	r3, r2
 8009180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800918a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800918e:	d0ec      	beq.n	800916a <USB_HC_Halt+0x1de>
 8009190:	e011      	b.n	80091b6 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	015a      	lsls	r2, r3, #5
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	4413      	add	r3, r2
 800919a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	0151      	lsls	r1, r2, #5
 80091a4:	69ba      	ldr	r2, [r7, #24]
 80091a6:	440a      	add	r2, r1
 80091a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091b0:	6013      	str	r3, [r2, #0]
 80091b2:	e000      	b.n	80091b6 <USB_HC_Halt+0x22a>
          break;
 80091b4:	bf00      	nop
    }
  }

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3724      	adds	r7, #36	; 0x24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bc80      	pop	{r7}
 80091c0:	4770      	bx	lr
	...

080091c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	460b      	mov	r3, r1
 80091ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80091d4:	78fb      	ldrb	r3, [r7, #3]
 80091d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80091d8:	2301      	movs	r3, #1
 80091da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	04da      	lsls	r2, r3, #19
 80091e0:	4b14      	ldr	r3, [pc, #80]	; (8009234 <USB_DoPing+0x70>)
 80091e2:	4013      	ands	r3, r2
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	0151      	lsls	r1, r2, #5
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	440a      	add	r2, r1
 80091ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800920c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009214:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	015a      	lsls	r2, r3, #5
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	4413      	add	r3, r2
 800921e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009222:	461a      	mov	r2, r3
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	371c      	adds	r7, #28
 800922e:	46bd      	mov	sp, r7
 8009230:	bc80      	pop	{r7}
 8009232:	4770      	bx	lr
 8009234:	1ff80000 	.word	0x1ff80000

08009238 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff f943 	bl	80084d4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800924e:	2110      	movs	r1, #16
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff f99b 	bl	800858c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7ff f9bc 	bl	80085d4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800925c:	2300      	movs	r3, #0
 800925e:	613b      	str	r3, [r7, #16]
 8009260:	e01f      	b.n	80092a2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	4413      	add	r3, r2
 800926a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009278:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009280:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009288:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	015a      	lsls	r2, r3, #5
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	4413      	add	r3, r2
 8009292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009296:	461a      	mov	r2, r3
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	3301      	adds	r3, #1
 80092a0:	613b      	str	r3, [r7, #16]
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	2b0f      	cmp	r3, #15
 80092a6:	d9dc      	bls.n	8009262 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80092a8:	2300      	movs	r3, #0
 80092aa:	613b      	str	r3, [r7, #16]
 80092ac:	e034      	b.n	8009318 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	015a      	lsls	r2, r3, #5
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	4413      	add	r3, r2
 80092b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092c4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092d4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092e2:	461a      	mov	r2, r3
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	3301      	adds	r3, #1
 80092ec:	617b      	str	r3, [r7, #20]
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092f4:	d80c      	bhi.n	8009310 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800930c:	d0ec      	beq.n	80092e8 <USB_StopHost+0xb0>
 800930e:	e000      	b.n	8009312 <USB_StopHost+0xda>
        break;
 8009310:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	3301      	adds	r3, #1
 8009316:	613b      	str	r3, [r7, #16]
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	2b0f      	cmp	r3, #15
 800931c:	d9c7      	bls.n	80092ae <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009324:	461a      	mov	r2, r3
 8009326:	f04f 33ff 	mov.w	r3, #4294967295
 800932a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f04f 32ff 	mov.w	r2, #4294967295
 8009332:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009344:	4904      	ldr	r1, [pc, #16]	; (8009358 <MX_FATFS_Init+0x18>)
 8009346:	4805      	ldr	r0, [pc, #20]	; (800935c <MX_FATFS_Init+0x1c>)
 8009348:	f006 feac 	bl	80100a4 <FATFS_LinkDriver>
 800934c:	4603      	mov	r3, r0
 800934e:	461a      	mov	r2, r3
 8009350:	4b03      	ldr	r3, [pc, #12]	; (8009360 <MX_FATFS_Init+0x20>)
 8009352:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009354:	bf00      	nop
 8009356:	bd80      	pop	{r7, pc}
 8009358:	20000744 	.word	0x20000744
 800935c:	080114f4 	.word	0x080114f4
 8009360:	200027a4 	.word	0x200027a4

08009364 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009364:	b480      	push	{r7}
 8009366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009368:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800936a:	4618      	mov	r0, r3
 800936c:	46bd      	mov	sp, r7
 800936e:	bc80      	pop	{r7}
 8009370:	4770      	bx	lr

08009372 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009372:	b590      	push	{r4, r7, lr}
 8009374:	b089      	sub	sp, #36	; 0x24
 8009376:	af04      	add	r7, sp, #16
 8009378:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009380:	7919      	ldrb	r1, [r3, #4]
 8009382:	2350      	movs	r3, #80	; 0x50
 8009384:	2206      	movs	r2, #6
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 fc47 	bl	800ac1a <USBH_FindInterface>
 800938c:	4603      	mov	r3, r0
 800938e:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	2bff      	cmp	r3, #255	; 0xff
 8009394:	d002      	beq.n	800939c <USBH_MSC_InterfaceInit+0x2a>
 8009396:	7bfb      	ldrb	r3, [r7, #15]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d901      	bls.n	80093a0 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800939c:	2302      	movs	r3, #2
 800939e:	e0ef      	b.n	8009580 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 fc1d 	bl	800abe4 <USBH_SelectInterface>
 80093aa:	4603      	mov	r3, r0
 80093ac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80093b4:	2302      	movs	r3, #2
 80093b6:	e0e3      	b.n	8009580 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80093be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80093c2:	f007 fb7b 	bl	8010abc <malloc>
 80093c6:	4603      	mov	r3, r0
 80093c8:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d101      	bne.n	80093de <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80093da:	2302      	movs	r3, #2
 80093dc:	e0d0      	b.n	8009580 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80093de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093e2:	2100      	movs	r1, #0
 80093e4:	68b8      	ldr	r0, [r7, #8]
 80093e6:	f007 fb87 	bl	8010af8 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	211a      	movs	r1, #26
 80093f0:	fb01 f303 	mul.w	r3, r1, r3
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	b25b      	sxtb	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	da16      	bge.n	8009430 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	211a      	movs	r1, #26
 8009408:	fb01 f303 	mul.w	r3, r1, r3
 800940c:	4413      	add	r3, r2
 800940e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009412:	781a      	ldrb	r2, [r3, #0]
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	211a      	movs	r1, #26
 800941e:	fb01 f303 	mul.w	r3, r1, r3
 8009422:	4413      	add	r3, r2
 8009424:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009428:	881a      	ldrh	r2, [r3, #0]
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	815a      	strh	r2, [r3, #10]
 800942e:	e015      	b.n	800945c <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009430:	7bfb      	ldrb	r3, [r7, #15]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	211a      	movs	r1, #26
 8009436:	fb01 f303 	mul.w	r3, r1, r3
 800943a:	4413      	add	r3, r2
 800943c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009440:	781a      	ldrb	r2, [r3, #0]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009446:	7bfb      	ldrb	r3, [r7, #15]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	211a      	movs	r1, #26
 800944c:	fb01 f303 	mul.w	r3, r1, r3
 8009450:	4413      	add	r3, r2
 8009452:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009456:	881a      	ldrh	r2, [r3, #0]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800945c:	7bfb      	ldrb	r3, [r7, #15]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	211a      	movs	r1, #26
 8009462:	fb01 f303 	mul.w	r3, r1, r3
 8009466:	4413      	add	r3, r2
 8009468:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	b25b      	sxtb	r3, r3
 8009470:	2b00      	cmp	r3, #0
 8009472:	da16      	bge.n	80094a2 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	211a      	movs	r1, #26
 800947a:	fb01 f303 	mul.w	r3, r1, r3
 800947e:	4413      	add	r3, r2
 8009480:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8009484:	781a      	ldrb	r2, [r3, #0]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	211a      	movs	r1, #26
 8009490:	fb01 f303 	mul.w	r3, r1, r3
 8009494:	4413      	add	r3, r2
 8009496:	f203 3356 	addw	r3, r3, #854	; 0x356
 800949a:	881a      	ldrh	r2, [r3, #0]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	815a      	strh	r2, [r3, #10]
 80094a0:	e015      	b.n	80094ce <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	211a      	movs	r1, #26
 80094a8:	fb01 f303 	mul.w	r3, r1, r3
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80094b2:	781a      	ldrb	r2, [r3, #0]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	211a      	movs	r1, #26
 80094be:	fb01 f303 	mul.w	r3, r1, r3
 80094c2:	4413      	add	r3, r2
 80094c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80094c8:	881a      	ldrh	r2, [r3, #0]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2200      	movs	r2, #0
 80094d2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2200      	movs	r2, #0
 80094d8:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	2200      	movs	r2, #0
 80094de:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	799b      	ldrb	r3, [r3, #6]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f002 fcab 	bl	800be42 <USBH_AllocPipe>
 80094ec:	4603      	mov	r3, r0
 80094ee:	461a      	mov	r2, r3
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	79db      	ldrb	r3, [r3, #7]
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f002 fca1 	bl	800be42 <USBH_AllocPipe>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fdab 	bl	800a064 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	7959      	ldrb	r1, [r3, #5]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	7998      	ldrb	r0, [r3, #6]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	8912      	ldrh	r2, [r2, #8]
 8009526:	9202      	str	r2, [sp, #8]
 8009528:	2202      	movs	r2, #2
 800952a:	9201      	str	r2, [sp, #4]
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	4623      	mov	r3, r4
 8009530:	4602      	mov	r2, r0
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f002 fc56 	bl	800bde4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	7919      	ldrb	r1, [r3, #4]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	79d8      	ldrb	r0, [r3, #7]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	8952      	ldrh	r2, [r2, #10]
 8009550:	9202      	str	r2, [sp, #8]
 8009552:	2202      	movs	r2, #2
 8009554:	9201      	str	r2, [sp, #4]
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	4623      	mov	r3, r4
 800955a:	4602      	mov	r2, r0
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f002 fc41 	bl	800bde4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	791b      	ldrb	r3, [r3, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f007 f9ca 	bl	8010904 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	795b      	ldrb	r3, [r3, #5]
 8009574:	2200      	movs	r2, #0
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f007 f9c3 	bl	8010904 <USBH_LL_SetToggle>

  return USBH_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	bd90      	pop	{r4, r7, pc}

08009588 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	795b      	ldrb	r3, [r3, #5]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00e      	beq.n	80095c0 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	795b      	ldrb	r3, [r3, #5]
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f002 fc3a 	bl	800be22 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	795b      	ldrb	r3, [r3, #5]
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f002 fc64 	bl	800be82 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	791b      	ldrb	r3, [r3, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00e      	beq.n	80095e6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	791b      	ldrb	r3, [r3, #4]
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f002 fc27 	bl	800be22 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	791b      	ldrb	r3, [r3, #4]
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f002 fc51 	bl	800be82 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00b      	beq.n	800960a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f007 fa66 	bl	8010acc <free>
    phost->pActiveClass->pData = 0U;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009606:	2200      	movs	r2, #0
 8009608:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009626:	2301      	movs	r3, #1
 8009628:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	7b9b      	ldrb	r3, [r3, #14]
 800962e:	2b03      	cmp	r3, #3
 8009630:	d042      	beq.n	80096b8 <USBH_MSC_ClassRequest+0xa4>
 8009632:	2b03      	cmp	r3, #3
 8009634:	dc4c      	bgt.n	80096d0 <USBH_MSC_ClassRequest+0xbc>
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <USBH_MSC_ClassRequest+0x2a>
 800963a:	2b02      	cmp	r3, #2
 800963c:	d148      	bne.n	80096d0 <USBH_MSC_ClassRequest+0xbc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fcef 	bl	800a026 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009648:	4603      	mov	r3, r0
 800964a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	2b03      	cmp	r3, #3
 8009650:	d104      	bne.n	800965c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	2200      	movs	r2, #0
 8009656:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800965c:	7bfb      	ldrb	r3, [r7, #15]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d138      	bne.n	80096d4 <USBH_MSC_ClassRequest+0xc0>
      {
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b02      	cmp	r3, #2
 800966a:	d804      	bhi.n	8009676 <USBH_MSC_ClassRequest+0x62>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	b2db      	uxtb	r3, r3
 8009672:	3301      	adds	r3, #1
 8009674:	e000      	b.n	8009678 <USBH_MSC_ClassRequest+0x64>
 8009676:	2302      	movs	r3, #2
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	6013      	str	r3, [r2, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800967c:	2300      	movs	r3, #0
 800967e:	73bb      	strb	r3, [r7, #14]
 8009680:	e014      	b.n	80096ac <USBH_MSC_ClassRequest+0x98>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009682:	7bbb      	ldrb	r3, [r7, #14]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	2134      	movs	r1, #52	; 0x34
 8009688:	fb01 f303 	mul.w	r3, r1, r3
 800968c:	4413      	add	r3, r2
 800968e:	3392      	adds	r3, #146	; 0x92
 8009690:	2202      	movs	r2, #2
 8009692:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009694:	7bbb      	ldrb	r3, [r7, #14]
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	2134      	movs	r1, #52	; 0x34
 800969a:	fb01 f303 	mul.w	r3, r1, r3
 800969e:	4413      	add	r3, r2
 80096a0:	33c1      	adds	r3, #193	; 0xc1
 80096a2:	2200      	movs	r2, #0
 80096a4:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	3301      	adds	r3, #1
 80096aa:	73bb      	strb	r3, [r7, #14]
 80096ac:	7bba      	ldrb	r2, [r7, #14]
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d3e5      	bcc.n	8009682 <USBH_MSC_ClassRequest+0x6e>
        }
      }
      break;
 80096b6:	e00d      	b.n	80096d4 <USBH_MSC_ClassRequest+0xc0>

    case MSC_REQ_ERROR :
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80096b8:	2100      	movs	r1, #0
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 ff65 	bl	800b58a <USBH_ClrFeature>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d108      	bne.n	80096d8 <USBH_MSC_ClassRequest+0xc4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	7bda      	ldrb	r2, [r3, #15]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	739a      	strb	r2, [r3, #14]
      }
      break;
 80096ce:	e003      	b.n	80096d8 <USBH_MSC_ClassRequest+0xc4>

    default:
      break;
 80096d0:	bf00      	nop
 80096d2:	e002      	b.n	80096da <USBH_MSC_ClassRequest+0xc6>
      break;
 80096d4:	bf00      	nop
 80096d6:	e000      	b.n	80096da <USBH_MSC_ClassRequest+0xc6>
      break;
 80096d8:	bf00      	nop
  }

  return status;
 80096da:	7bfb      	ldrb	r3, [r7, #15]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80096f2:	69db      	ldr	r3, [r3, #28]
 80096f4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80096f6:	2301      	movs	r3, #1
 80096f8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80096fa:	2301      	movs	r3, #1
 80096fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80096fe:	2301      	movs	r3, #1
 8009700:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	7b1b      	ldrb	r3, [r3, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <USBH_MSC_Process+0x2e>
 800970a:	2b01      	cmp	r3, #1
 800970c:	f000 8271 	beq.w	8009bf2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009710:	e272      	b.n	8009bf8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009718:	461a      	mov	r2, r3
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	429a      	cmp	r2, r3
 8009720:	f080 824f 	bcs.w	8009bc2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800972a:	4619      	mov	r1, r3
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	2334      	movs	r3, #52	; 0x34
 8009730:	fb03 f301 	mul.w	r3, r3, r1
 8009734:	4413      	add	r3, r2
 8009736:	3391      	adds	r3, #145	; 0x91
 8009738:	2201      	movs	r2, #1
 800973a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009742:	4619      	mov	r1, r3
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	2334      	movs	r3, #52	; 0x34
 8009748:	fb03 f301 	mul.w	r3, r3, r1
 800974c:	4413      	add	r3, r2
 800974e:	3390      	adds	r3, #144	; 0x90
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	2b08      	cmp	r3, #8
 8009754:	f200 8243 	bhi.w	8009bde <USBH_MSC_Process+0x4fa>
 8009758:	a201      	add	r2, pc, #4	; (adr r2, 8009760 <USBH_MSC_Process+0x7c>)
 800975a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975e:	bf00      	nop
 8009760:	08009785 	.word	0x08009785
 8009764:	08009bdf 	.word	0x08009bdf
 8009768:	0800984d 	.word	0x0800984d
 800976c:	080099d1 	.word	0x080099d1
 8009770:	080097ab 	.word	0x080097ab
 8009774:	08009a9d 	.word	0x08009a9d
 8009778:	08009bdf 	.word	0x08009bdf
 800977c:	08009bdf 	.word	0x08009bdf
 8009780:	08009bb1 	.word	0x08009bb1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800978a:	4619      	mov	r1, r3
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	2334      	movs	r3, #52	; 0x34
 8009790:	fb03 f301 	mul.w	r3, r3, r1
 8009794:	4413      	add	r3, r2
 8009796:	3390      	adds	r3, #144	; 0x90
 8009798:	2204      	movs	r2, #4
 800979a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80097a8:	e222      	b.n	8009bf0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097b0:	b2d9      	uxtb	r1, r3
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097b8:	461a      	mov	r2, r3
 80097ba:	2334      	movs	r3, #52	; 0x34
 80097bc:	fb03 f302 	mul.w	r3, r3, r2
 80097c0:	3398      	adds	r3, #152	; 0x98
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	4413      	add	r3, r2
 80097c6:	3307      	adds	r3, #7
 80097c8:	461a      	mov	r2, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 ff68 	bl	800a6a0 <USBH_MSC_SCSI_Inquiry>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10b      	bne.n	80097f2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097e0:	4619      	mov	r1, r3
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	2334      	movs	r3, #52	; 0x34
 80097e6:	fb03 f301 	mul.w	r3, r3, r1
 80097ea:	4413      	add	r3, r2
 80097ec:	3390      	adds	r3, #144	; 0x90
 80097ee:	2202      	movs	r2, #2
 80097f0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d10c      	bne.n	8009812 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097fe:	4619      	mov	r1, r3
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	2334      	movs	r3, #52	; 0x34
 8009804:	fb03 f301 	mul.w	r3, r3, r1
 8009808:	4413      	add	r3, r2
 800980a:	3390      	adds	r3, #144	; 0x90
 800980c:	2205      	movs	r2, #5
 800980e:	701a      	strb	r2, [r3, #0]
            break;
 8009810:	e1e7      	b.n	8009be2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009812:	7bfb      	ldrb	r3, [r7, #15]
 8009814:	2b04      	cmp	r3, #4
 8009816:	f040 81e4 	bne.w	8009be2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009820:	4619      	mov	r1, r3
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	2334      	movs	r3, #52	; 0x34
 8009826:	fb03 f301 	mul.w	r3, r3, r1
 800982a:	4413      	add	r3, r2
 800982c:	3390      	adds	r3, #144	; 0x90
 800982e:	2201      	movs	r2, #1
 8009830:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009838:	4619      	mov	r1, r3
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	2334      	movs	r3, #52	; 0x34
 800983e:	fb03 f301 	mul.w	r3, r3, r1
 8009842:	4413      	add	r3, r2
 8009844:	3391      	adds	r3, #145	; 0x91
 8009846:	2202      	movs	r2, #2
 8009848:	701a      	strb	r2, [r3, #0]
            break;
 800984a:	e1ca      	b.n	8009be2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009852:	b2db      	uxtb	r3, r3
 8009854:	4619      	mov	r1, r3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fe64 	bl	800a524 <USBH_MSC_SCSI_TestUnitReady>
 800985c:	4603      	mov	r3, r0
 800985e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d149      	bne.n	80098fa <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800986c:	4619      	mov	r1, r3
 800986e:	693a      	ldr	r2, [r7, #16]
 8009870:	2334      	movs	r3, #52	; 0x34
 8009872:	fb03 f301 	mul.w	r3, r3, r1
 8009876:	4413      	add	r3, r2
 8009878:	3392      	adds	r3, #146	; 0x92
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00c      	beq.n	800989a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009886:	4619      	mov	r1, r3
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	2334      	movs	r3, #52	; 0x34
 800988c:	fb03 f301 	mul.w	r3, r3, r1
 8009890:	4413      	add	r3, r2
 8009892:	33c1      	adds	r3, #193	; 0xc1
 8009894:	2201      	movs	r2, #1
 8009896:	701a      	strb	r2, [r3, #0]
 8009898:	e00b      	b.n	80098b2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098a0:	4619      	mov	r1, r3
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	2334      	movs	r3, #52	; 0x34
 80098a6:	fb03 f301 	mul.w	r3, r3, r1
 80098aa:	4413      	add	r3, r2
 80098ac:	33c1      	adds	r3, #193	; 0xc1
 80098ae:	2200      	movs	r2, #0
 80098b0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098b8:	4619      	mov	r1, r3
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	2334      	movs	r3, #52	; 0x34
 80098be:	fb03 f301 	mul.w	r3, r3, r1
 80098c2:	4413      	add	r3, r2
 80098c4:	3390      	adds	r3, #144	; 0x90
 80098c6:	2203      	movs	r2, #3
 80098c8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098d0:	4619      	mov	r1, r3
 80098d2:	693a      	ldr	r2, [r7, #16]
 80098d4:	2334      	movs	r3, #52	; 0x34
 80098d6:	fb03 f301 	mul.w	r3, r3, r1
 80098da:	4413      	add	r3, r2
 80098dc:	3391      	adds	r3, #145	; 0x91
 80098de:	2200      	movs	r2, #0
 80098e0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098e8:	4619      	mov	r1, r3
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	2334      	movs	r3, #52	; 0x34
 80098ee:	fb03 f301 	mul.w	r3, r3, r1
 80098f2:	4413      	add	r3, r2
 80098f4:	3392      	adds	r3, #146	; 0x92
 80098f6:	2200      	movs	r2, #0
 80098f8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80098fa:	7bbb      	ldrb	r3, [r7, #14]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d14a      	bne.n	8009996 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009906:	4619      	mov	r1, r3
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	2334      	movs	r3, #52	; 0x34
 800990c:	fb03 f301 	mul.w	r3, r3, r1
 8009910:	4413      	add	r3, r2
 8009912:	3392      	adds	r3, #146	; 0x92
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2b02      	cmp	r3, #2
 8009918:	d00c      	beq.n	8009934 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009920:	4619      	mov	r1, r3
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	2334      	movs	r3, #52	; 0x34
 8009926:	fb03 f301 	mul.w	r3, r3, r1
 800992a:	4413      	add	r3, r2
 800992c:	33c1      	adds	r3, #193	; 0xc1
 800992e:	2201      	movs	r2, #1
 8009930:	701a      	strb	r2, [r3, #0]
 8009932:	e00b      	b.n	800994c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800993a:	4619      	mov	r1, r3
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	2334      	movs	r3, #52	; 0x34
 8009940:	fb03 f301 	mul.w	r3, r3, r1
 8009944:	4413      	add	r3, r2
 8009946:	33c1      	adds	r3, #193	; 0xc1
 8009948:	2200      	movs	r2, #0
 800994a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009952:	4619      	mov	r1, r3
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	2334      	movs	r3, #52	; 0x34
 8009958:	fb03 f301 	mul.w	r3, r3, r1
 800995c:	4413      	add	r3, r2
 800995e:	3390      	adds	r3, #144	; 0x90
 8009960:	2205      	movs	r2, #5
 8009962:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800996a:	4619      	mov	r1, r3
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	2334      	movs	r3, #52	; 0x34
 8009970:	fb03 f301 	mul.w	r3, r3, r1
 8009974:	4413      	add	r3, r2
 8009976:	3391      	adds	r3, #145	; 0x91
 8009978:	2201      	movs	r2, #1
 800997a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009982:	4619      	mov	r1, r3
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	2334      	movs	r3, #52	; 0x34
 8009988:	fb03 f301 	mul.w	r3, r3, r1
 800998c:	4413      	add	r3, r2
 800998e:	3392      	adds	r3, #146	; 0x92
 8009990:	2202      	movs	r2, #2
 8009992:	701a      	strb	r2, [r3, #0]
            break;
 8009994:	e127      	b.n	8009be6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009996:	7bbb      	ldrb	r3, [r7, #14]
 8009998:	2b04      	cmp	r3, #4
 800999a:	f040 8124 	bne.w	8009be6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099a4:	4619      	mov	r1, r3
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	2334      	movs	r3, #52	; 0x34
 80099aa:	fb03 f301 	mul.w	r3, r3, r1
 80099ae:	4413      	add	r3, r2
 80099b0:	3390      	adds	r3, #144	; 0x90
 80099b2:	2201      	movs	r2, #1
 80099b4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099bc:	4619      	mov	r1, r3
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	2334      	movs	r3, #52	; 0x34
 80099c2:	fb03 f301 	mul.w	r3, r3, r1
 80099c6:	4413      	add	r3, r2
 80099c8:	3391      	adds	r3, #145	; 0x91
 80099ca:	2202      	movs	r2, #2
 80099cc:	701a      	strb	r2, [r3, #0]
            break;
 80099ce:	e10a      	b.n	8009be6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099d6:	b2d9      	uxtb	r1, r3
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099de:	461a      	mov	r2, r3
 80099e0:	2334      	movs	r3, #52	; 0x34
 80099e2:	fb03 f302 	mul.w	r3, r3, r2
 80099e6:	3390      	adds	r3, #144	; 0x90
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	4413      	add	r3, r2
 80099ec:	3304      	adds	r3, #4
 80099ee:	461a      	mov	r2, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fdda 	bl	800a5aa <USBH_MSC_SCSI_ReadCapacity>
 80099f6:	4603      	mov	r3, r0
 80099f8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d120      	bne.n	8009a42 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a06:	4619      	mov	r1, r3
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	2334      	movs	r3, #52	; 0x34
 8009a0c:	fb03 f301 	mul.w	r3, r3, r1
 8009a10:	4413      	add	r3, r2
 8009a12:	3390      	adds	r3, #144	; 0x90
 8009a14:	2201      	movs	r2, #1
 8009a16:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a1e:	4619      	mov	r1, r3
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	2334      	movs	r3, #52	; 0x34
 8009a24:	fb03 f301 	mul.w	r3, r3, r1
 8009a28:	4413      	add	r3, r2
 8009a2a:	3391      	adds	r3, #145	; 0x91
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a36:	3301      	adds	r3, #1
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009a40:	e0d3      	b.n	8009bea <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d10c      	bne.n	8009a62 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a4e:	4619      	mov	r1, r3
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	2334      	movs	r3, #52	; 0x34
 8009a54:	fb03 f301 	mul.w	r3, r3, r1
 8009a58:	4413      	add	r3, r2
 8009a5a:	3390      	adds	r3, #144	; 0x90
 8009a5c:	2205      	movs	r2, #5
 8009a5e:	701a      	strb	r2, [r3, #0]
            break;
 8009a60:	e0c3      	b.n	8009bea <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	2b04      	cmp	r3, #4
 8009a66:	f040 80c0 	bne.w	8009bea <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a70:	4619      	mov	r1, r3
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	2334      	movs	r3, #52	; 0x34
 8009a76:	fb03 f301 	mul.w	r3, r3, r1
 8009a7a:	4413      	add	r3, r2
 8009a7c:	3390      	adds	r3, #144	; 0x90
 8009a7e:	2201      	movs	r2, #1
 8009a80:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a88:	4619      	mov	r1, r3
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	2334      	movs	r3, #52	; 0x34
 8009a8e:	fb03 f301 	mul.w	r3, r3, r1
 8009a92:	4413      	add	r3, r2
 8009a94:	3391      	adds	r3, #145	; 0x91
 8009a96:	2202      	movs	r2, #2
 8009a98:	701a      	strb	r2, [r3, #0]
            break;
 8009a9a:	e0a6      	b.n	8009bea <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009aa2:	b2d9      	uxtb	r1, r3
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009aaa:	461a      	mov	r2, r3
 8009aac:	2334      	movs	r3, #52	; 0x34
 8009aae:	fb03 f302 	mul.w	r3, r3, r2
 8009ab2:	3398      	adds	r3, #152	; 0x98
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	3304      	adds	r3, #4
 8009aba:	461a      	mov	r2, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fe94 	bl	800a7ea <USBH_MSC_SCSI_RequestSense>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d145      	bne.n	8009b58 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	2334      	movs	r3, #52	; 0x34
 8009ad8:	fb03 f301 	mul.w	r3, r3, r1
 8009adc:	4413      	add	r3, r2
 8009ade:	339c      	adds	r3, #156	; 0x9c
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	2b06      	cmp	r3, #6
 8009ae4:	d00c      	beq.n	8009b00 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009aec:	4619      	mov	r1, r3
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	2334      	movs	r3, #52	; 0x34
 8009af2:	fb03 f301 	mul.w	r3, r3, r1
 8009af6:	4413      	add	r3, r2
 8009af8:	339c      	adds	r3, #156	; 0x9c
 8009afa:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d117      	bne.n	8009b30 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d80c      	bhi.n	8009b30 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	2334      	movs	r3, #52	; 0x34
 8009b22:	fb03 f301 	mul.w	r3, r3, r1
 8009b26:	4413      	add	r3, r2
 8009b28:	3390      	adds	r3, #144	; 0x90
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	701a      	strb	r2, [r3, #0]
                  break;
 8009b2e:	e05f      	b.n	8009bf0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b36:	4619      	mov	r1, r3
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	2334      	movs	r3, #52	; 0x34
 8009b3c:	fb03 f301 	mul.w	r3, r3, r1
 8009b40:	4413      	add	r3, r2
 8009b42:	3390      	adds	r3, #144	; 0x90
 8009b44:	2201      	movs	r2, #1
 8009b46:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b4e:	3301      	adds	r3, #1
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d10c      	bne.n	8009b78 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b64:	4619      	mov	r1, r3
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	2334      	movs	r3, #52	; 0x34
 8009b6a:	fb03 f301 	mul.w	r3, r3, r1
 8009b6e:	4413      	add	r3, r2
 8009b70:	3390      	adds	r3, #144	; 0x90
 8009b72:	2208      	movs	r2, #8
 8009b74:	701a      	strb	r2, [r3, #0]
            break;
 8009b76:	e03a      	b.n	8009bee <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	2b04      	cmp	r3, #4
 8009b7c:	d137      	bne.n	8009bee <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b84:	4619      	mov	r1, r3
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	2334      	movs	r3, #52	; 0x34
 8009b8a:	fb03 f301 	mul.w	r3, r3, r1
 8009b8e:	4413      	add	r3, r2
 8009b90:	3390      	adds	r3, #144	; 0x90
 8009b92:	2201      	movs	r2, #1
 8009b94:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	693a      	ldr	r2, [r7, #16]
 8009ba0:	2334      	movs	r3, #52	; 0x34
 8009ba2:	fb03 f301 	mul.w	r3, r3, r1
 8009ba6:	4413      	add	r3, r2
 8009ba8:	3391      	adds	r3, #145	; 0x91
 8009baa:	2202      	movs	r2, #2
 8009bac:	701a      	strb	r2, [r3, #0]
            break;
 8009bae:	e01e      	b.n	8009bee <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009bc0:	e016      	b.n	8009bf0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009bd6:	2102      	movs	r1, #2
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	4798      	blx	r3
      break;
 8009bdc:	e00c      	b.n	8009bf8 <USBH_MSC_Process+0x514>
            break;
 8009bde:	bf00      	nop
 8009be0:	e00a      	b.n	8009bf8 <USBH_MSC_Process+0x514>
            break;
 8009be2:	bf00      	nop
 8009be4:	e008      	b.n	8009bf8 <USBH_MSC_Process+0x514>
            break;
 8009be6:	bf00      	nop
 8009be8:	e006      	b.n	8009bf8 <USBH_MSC_Process+0x514>
            break;
 8009bea:	bf00      	nop
 8009bec:	e004      	b.n	8009bf8 <USBH_MSC_Process+0x514>
            break;
 8009bee:	bf00      	nop
      break;
 8009bf0:	e002      	b.n	8009bf8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf6:	bf00      	nop
  }
  return error;
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3718      	adds	r7, #24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop

08009c04 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bc80      	pop	{r7}
 8009c16:	4770      	bx	lr

08009c18 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af02      	add	r7, sp, #8
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	460b      	mov	r3, r1
 8009c22:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009c32:	2301      	movs	r3, #1
 8009c34:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009c36:	78fb      	ldrb	r3, [r7, #3]
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	2134      	movs	r1, #52	; 0x34
 8009c3c:	fb01 f303 	mul.w	r3, r1, r3
 8009c40:	4413      	add	r3, r2
 8009c42:	3390      	adds	r3, #144	; 0x90
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	2b07      	cmp	r3, #7
 8009c48:	d03c      	beq.n	8009cc4 <USBH_MSC_RdWrProcess+0xac>
 8009c4a:	2b07      	cmp	r3, #7
 8009c4c:	f300 80a7 	bgt.w	8009d9e <USBH_MSC_RdWrProcess+0x186>
 8009c50:	2b05      	cmp	r3, #5
 8009c52:	d06c      	beq.n	8009d2e <USBH_MSC_RdWrProcess+0x116>
 8009c54:	2b06      	cmp	r3, #6
 8009c56:	f040 80a2 	bne.w	8009d9e <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009c5a:	78f9      	ldrb	r1, [r7, #3]
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	2300      	movs	r3, #0
 8009c62:	2200      	movs	r2, #0
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fea4 	bl	800a9b2 <USBH_MSC_SCSI_Read>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009c6e:	7bfb      	ldrb	r3, [r7, #15]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10b      	bne.n	8009c8c <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	2134      	movs	r1, #52	; 0x34
 8009c7a:	fb01 f303 	mul.w	r3, r1, r3
 8009c7e:	4413      	add	r3, r2
 8009c80:	3390      	adds	r3, #144	; 0x90
 8009c82:	2201      	movs	r2, #1
 8009c84:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c8a:	e08a      	b.n	8009da2 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d109      	bne.n	8009ca6 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009c92:	78fb      	ldrb	r3, [r7, #3]
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	2134      	movs	r1, #52	; 0x34
 8009c98:	fb01 f303 	mul.w	r3, r1, r3
 8009c9c:	4413      	add	r3, r2
 8009c9e:	3390      	adds	r3, #144	; 0x90
 8009ca0:	2205      	movs	r2, #5
 8009ca2:	701a      	strb	r2, [r3, #0]
      break;
 8009ca4:	e07d      	b.n	8009da2 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	2b04      	cmp	r3, #4
 8009caa:	d17a      	bne.n	8009da2 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	2134      	movs	r1, #52	; 0x34
 8009cb2:	fb01 f303 	mul.w	r3, r1, r3
 8009cb6:	4413      	add	r3, r2
 8009cb8:	3390      	adds	r3, #144	; 0x90
 8009cba:	2208      	movs	r2, #8
 8009cbc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc2:	e06e      	b.n	8009da2 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009cc4:	78f9      	ldrb	r1, [r7, #3]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	2200      	movs	r2, #0
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fe04 	bl	800a8dc <USBH_MSC_SCSI_Write>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10b      	bne.n	8009cf6 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	2134      	movs	r1, #52	; 0x34
 8009ce4:	fb01 f303 	mul.w	r3, r1, r3
 8009ce8:	4413      	add	r3, r2
 8009cea:	3390      	adds	r3, #144	; 0x90
 8009cec:	2201      	movs	r2, #1
 8009cee:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009cf4:	e057      	b.n	8009da6 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d109      	bne.n	8009d10 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009cfc:	78fb      	ldrb	r3, [r7, #3]
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	2134      	movs	r1, #52	; 0x34
 8009d02:	fb01 f303 	mul.w	r3, r1, r3
 8009d06:	4413      	add	r3, r2
 8009d08:	3390      	adds	r3, #144	; 0x90
 8009d0a:	2205      	movs	r2, #5
 8009d0c:	701a      	strb	r2, [r3, #0]
      break;
 8009d0e:	e04a      	b.n	8009da6 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	2b04      	cmp	r3, #4
 8009d14:	d147      	bne.n	8009da6 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009d16:	78fb      	ldrb	r3, [r7, #3]
 8009d18:	693a      	ldr	r2, [r7, #16]
 8009d1a:	2134      	movs	r1, #52	; 0x34
 8009d1c:	fb01 f303 	mul.w	r3, r1, r3
 8009d20:	4413      	add	r3, r2
 8009d22:	3390      	adds	r3, #144	; 0x90
 8009d24:	2208      	movs	r2, #8
 8009d26:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009d28:	2302      	movs	r3, #2
 8009d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d2c:	e03b      	b.n	8009da6 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009d2e:	78fb      	ldrb	r3, [r7, #3]
 8009d30:	2234      	movs	r2, #52	; 0x34
 8009d32:	fb02 f303 	mul.w	r3, r2, r3
 8009d36:	3398      	adds	r3, #152	; 0x98
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	1d1a      	adds	r2, r3, #4
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fd51 	bl	800a7ea <USBH_MSC_SCSI_RequestSense>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d113      	bne.n	8009d7a <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009d52:	78fb      	ldrb	r3, [r7, #3]
 8009d54:	693a      	ldr	r2, [r7, #16]
 8009d56:	2134      	movs	r1, #52	; 0x34
 8009d58:	fb01 f303 	mul.w	r3, r1, r3
 8009d5c:	4413      	add	r3, r2
 8009d5e:	3390      	adds	r3, #144	; 0x90
 8009d60:	2201      	movs	r2, #1
 8009d62:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009d64:	78fb      	ldrb	r3, [r7, #3]
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	2134      	movs	r1, #52	; 0x34
 8009d6a:	fb01 f303 	mul.w	r3, r1, r3
 8009d6e:	4413      	add	r3, r2
 8009d70:	3391      	adds	r3, #145	; 0x91
 8009d72:	2202      	movs	r2, #2
 8009d74:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009d76:	2302      	movs	r3, #2
 8009d78:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009d7a:	7bfb      	ldrb	r3, [r7, #15]
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d014      	beq.n	8009daa <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	d111      	bne.n	8009daa <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009d86:	78fb      	ldrb	r3, [r7, #3]
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	2134      	movs	r1, #52	; 0x34
 8009d8c:	fb01 f303 	mul.w	r3, r1, r3
 8009d90:	4413      	add	r3, r2
 8009d92:	3390      	adds	r3, #144	; 0x90
 8009d94:	2208      	movs	r2, #8
 8009d96:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009d98:	2302      	movs	r3, #2
 8009d9a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009d9c:	e005      	b.n	8009daa <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009d9e:	bf00      	nop
 8009da0:	e004      	b.n	8009dac <USBH_MSC_RdWrProcess+0x194>
      break;
 8009da2:	bf00      	nop
 8009da4:	e002      	b.n	8009dac <USBH_MSC_RdWrProcess+0x194>
      break;
 8009da6:	bf00      	nop
 8009da8:	e000      	b.n	8009dac <USBH_MSC_RdWrProcess+0x194>
      break;
 8009daa:	bf00      	nop

  }
  return error;
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3718      	adds	r7, #24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b085      	sub	sp, #20
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009dc8:	69db      	ldr	r3, [r3, #28]
 8009dca:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b0b      	cmp	r3, #11
 8009dd4:	d10c      	bne.n	8009df0 <USBH_MSC_UnitIsReady+0x3a>
 8009dd6:	78fb      	ldrb	r3, [r7, #3]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	2134      	movs	r1, #52	; 0x34
 8009ddc:	fb01 f303 	mul.w	r3, r1, r3
 8009de0:	4413      	add	r3, r2
 8009de2:	3391      	adds	r3, #145	; 0x91
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d102      	bne.n	8009df0 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009dea:	2301      	movs	r3, #1
 8009dec:	73fb      	strb	r3, [r7, #15]
 8009dee:	e001      	b.n	8009df4 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009df0:	2300      	movs	r3, #0
 8009df2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bc80      	pop	{r7}
 8009dfe:	4770      	bx	lr

08009e00 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b0b      	cmp	r3, #11
 8009e20:	d10d      	bne.n	8009e3e <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009e22:	7afb      	ldrb	r3, [r7, #11]
 8009e24:	2234      	movs	r2, #52	; 0x34
 8009e26:	fb02 f303 	mul.w	r3, r2, r3
 8009e2a:	3390      	adds	r3, #144	; 0x90
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	4413      	add	r3, r2
 8009e30:	2234      	movs	r2, #52	; 0x34
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f006 fe51 	bl	8010adc <memcpy>
    return USBH_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e000      	b.n	8009e40 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009e3e:	2302      	movs	r3, #2
  }
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af02      	add	r7, sp, #8
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	607a      	str	r2, [r7, #4]
 8009e52:	603b      	str	r3, [r7, #0]
 8009e54:	460b      	mov	r3, r1
 8009e56:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00e      	beq.n	8009e8c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009e74:	2b0b      	cmp	r3, #11
 8009e76:	d109      	bne.n	8009e8c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009e78:	7afb      	ldrb	r3, [r7, #11]
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	2134      	movs	r1, #52	; 0x34
 8009e7e:	fb01 f303 	mul.w	r3, r1, r3
 8009e82:	4413      	add	r3, r2
 8009e84:	3390      	adds	r3, #144	; 0x90
 8009e86:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d001      	beq.n	8009e90 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	e040      	b.n	8009f12 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	2206      	movs	r2, #6
 8009e94:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009e96:	7afb      	ldrb	r3, [r7, #11]
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	2134      	movs	r1, #52	; 0x34
 8009e9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ea0:	4413      	add	r3, r2
 8009ea2:	3390      	adds	r3, #144	; 0x90
 8009ea4:	2206      	movs	r2, #6
 8009ea6:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009ea8:	7afb      	ldrb	r3, [r7, #11]
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009eb2:	7af9      	ldrb	r1, [r7, #11]
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f000 fd78 	bl	800a9b2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009ec8:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009eca:	e016      	b.n	8009efa <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	1ad2      	subs	r2, r2, r3
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	f242 7110 	movw	r1, #10000	; 0x2710
 8009edc:	fb01 f303 	mul.w	r3, r1, r3
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d805      	bhi.n	8009ef0 <USBH_MSC_Read+0xa8>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d104      	bne.n	8009efa <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e00b      	b.n	8009f12 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009efa:	7afb      	ldrb	r3, [r7, #11]
 8009efc:	4619      	mov	r1, r3
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f7ff fe8a 	bl	8009c18 <USBH_MSC_RdWrProcess>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d0e0      	beq.n	8009ecc <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3718      	adds	r7, #24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b088      	sub	sp, #32
 8009f1e:	af02      	add	r7, sp, #8
 8009f20:	60f8      	str	r0, [r7, #12]
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	603b      	str	r3, [r7, #0]
 8009f26:	460b      	mov	r3, r1
 8009f28:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009f30:	69db      	ldr	r3, [r3, #28]
 8009f32:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00e      	beq.n	8009f5e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009f46:	2b0b      	cmp	r3, #11
 8009f48:	d109      	bne.n	8009f5e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009f4a:	7afb      	ldrb	r3, [r7, #11]
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	2134      	movs	r1, #52	; 0x34
 8009f50:	fb01 f303 	mul.w	r3, r1, r3
 8009f54:	4413      	add	r3, r2
 8009f56:	3390      	adds	r3, #144	; 0x90
 8009f58:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d001      	beq.n	8009f62 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009f5e:	2302      	movs	r3, #2
 8009f60:	e040      	b.n	8009fe4 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2207      	movs	r2, #7
 8009f66:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009f68:	7afb      	ldrb	r3, [r7, #11]
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	2134      	movs	r1, #52	; 0x34
 8009f6e:	fb01 f303 	mul.w	r3, r1, r3
 8009f72:	4413      	add	r3, r2
 8009f74:	3390      	adds	r3, #144	; 0x90
 8009f76:	2207      	movs	r2, #7
 8009f78:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009f7a:	7afb      	ldrb	r3, [r7, #11]
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009f84:	7af9      	ldrb	r1, [r7, #11]
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 fca4 	bl	800a8dc <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009f9a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009f9c:	e016      	b.n	8009fcc <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	1ad2      	subs	r2, r2, r3
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	f242 7110 	movw	r1, #10000	; 0x2710
 8009fae:	fb01 f303 	mul.w	r3, r1, r3
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d805      	bhi.n	8009fc2 <USBH_MSC_Write+0xa8>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d104      	bne.n	8009fcc <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009fc8:	2302      	movs	r3, #2
 8009fca:	e00b      	b.n	8009fe4 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff fe21 	bl	8009c18 <USBH_MSC_RdWrProcess>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d0e0      	beq.n	8009f9e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2221      	movs	r2, #33	; 0x21
 8009ff8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	22ff      	movs	r2, #255	; 0xff
 8009ffe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800a012:	2200      	movs	r2, #0
 800a014:	2100      	movs	r1, #0
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f001 fc92 	bl	800b940 <USBH_CtlReq>
 800a01c:	4603      	mov	r3, r0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b082      	sub	sp, #8
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	22a1      	movs	r2, #161	; 0xa1
 800a034:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	22fe      	movs	r2, #254	; 0xfe
 800a03a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a04e:	2201      	movs	r2, #1
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f001 fc74 	bl	800b940 <USBH_CtlReq>
 800a058:	4603      	mov	r3, r0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
	...

0800a064 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	4a09      	ldr	r2, [pc, #36]	; (800a0a0 <USBH_MSC_BOT_Init+0x3c>)
 800a07a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4a09      	ldr	r2, [pc, #36]	; (800a0a4 <USBH_MSC_BOT_Init+0x40>)
 800a080:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	bc80      	pop	{r7}
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	43425355 	.word	0x43425355
 800a0a4:	20304050 	.word	0x20304050

0800a0a8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b088      	sub	sp, #32
 800a0ac:	af02      	add	r7, sp, #8
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	2b0a      	cmp	r3, #10
 800a0dc:	f200 819e 	bhi.w	800a41c <USBH_MSC_BOT_Process+0x374>
 800a0e0:	a201      	add	r2, pc, #4	; (adr r2, 800a0e8 <USBH_MSC_BOT_Process+0x40>)
 800a0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e6:	bf00      	nop
 800a0e8:	0800a115 	.word	0x0800a115
 800a0ec:	0800a13d 	.word	0x0800a13d
 800a0f0:	0800a1a7 	.word	0x0800a1a7
 800a0f4:	0800a1c5 	.word	0x0800a1c5
 800a0f8:	0800a249 	.word	0x0800a249
 800a0fc:	0800a26b 	.word	0x0800a26b
 800a100:	0800a303 	.word	0x0800a303
 800a104:	0800a31f 	.word	0x0800a31f
 800a108:	0800a371 	.word	0x0800a371
 800a10c:	0800a3a1 	.word	0x0800a3a1
 800a110:	0800a403 	.word	0x0800a403
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	78fa      	ldrb	r2, [r7, #3]
 800a118:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	795b      	ldrb	r3, [r3, #5]
 800a12e:	2201      	movs	r2, #1
 800a130:	9200      	str	r2, [sp, #0]
 800a132:	221f      	movs	r2, #31
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f001 fe12 	bl	800bd5e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a13a:	e17e      	b.n	800a43a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	795b      	ldrb	r3, [r3, #5]
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f006 fbb4 	bl	80108b0 <USBH_LL_GetURBState>
 800a148:	4603      	mov	r3, r0
 800a14a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a14c:	7d3b      	ldrb	r3, [r7, #20]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d118      	bne.n	800a184 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00f      	beq.n	800a17a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a160:	b25b      	sxtb	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	da04      	bge.n	800a170 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	2203      	movs	r2, #3
 800a16a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a16e:	e157      	b.n	800a420 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	2205      	movs	r2, #5
 800a174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a178:	e152      	b.n	800a420 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	2207      	movs	r2, #7
 800a17e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a182:	e14d      	b.n	800a420 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a184:	7d3b      	ldrb	r3, [r7, #20]
 800a186:	2b02      	cmp	r3, #2
 800a188:	d104      	bne.n	800a194 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a192:	e145      	b.n	800a420 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a194:	7d3b      	ldrb	r3, [r7, #20]
 800a196:	2b05      	cmp	r3, #5
 800a198:	f040 8142 	bne.w	800a420 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	220a      	movs	r2, #10
 800a1a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a1a4:	e13c      	b.n	800a420 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	895a      	ldrh	r2, [r3, #10]
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	791b      	ldrb	r3, [r3, #4]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f001 fdf7 	bl	800bda8 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2204      	movs	r2, #4
 800a1be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a1c2:	e13a      	b.n	800a43a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	791b      	ldrb	r3, [r3, #4]
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f006 fb70 	bl	80108b0 <USBH_LL_GetURBState>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a1d4:	7d3b      	ldrb	r3, [r7, #20]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d12d      	bne.n	800a236 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	8952      	ldrh	r2, [r2, #10]
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d910      	bls.n	800a208 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	8952      	ldrh	r2, [r2, #10]
 800a1f0:	441a      	add	r2, r3
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	8952      	ldrh	r2, [r2, #10]
 800a200:	1a9a      	subs	r2, r3, r2
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	65da      	str	r2, [r3, #92]	; 0x5c
 800a206:	e002      	b.n	800a20e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	2200      	movs	r2, #0
 800a20c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00a      	beq.n	800a22c <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	895a      	ldrh	r2, [r3, #10]
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	791b      	ldrb	r3, [r3, #4]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f001 fdbf 	bl	800bda8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a22a:	e0fb      	b.n	800a424 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	2207      	movs	r2, #7
 800a230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a234:	e0f6      	b.n	800a424 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a236:	7d3b      	ldrb	r3, [r7, #20]
 800a238:	2b05      	cmp	r3, #5
 800a23a:	f040 80f3 	bne.w	800a424 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	2209      	movs	r2, #9
 800a242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a246:	e0ed      	b.n	800a424 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	891a      	ldrh	r2, [r3, #8]
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	795b      	ldrb	r3, [r3, #5]
 800a256:	2001      	movs	r0, #1
 800a258:	9000      	str	r0, [sp, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f001 fd7f 	bl	800bd5e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	2206      	movs	r2, #6
 800a264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a268:	e0e7      	b.n	800a43a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	795b      	ldrb	r3, [r3, #5]
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f006 fb1d 	bl	80108b0 <USBH_LL_GetURBState>
 800a276:	4603      	mov	r3, r0
 800a278:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a27a:	7d3b      	ldrb	r3, [r7, #20]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d12f      	bne.n	800a2e0 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	8912      	ldrh	r2, [r2, #8]
 800a288:	4293      	cmp	r3, r2
 800a28a:	d910      	bls.n	800a2ae <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	8912      	ldrh	r2, [r2, #8]
 800a296:	441a      	add	r2, r3
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	8912      	ldrh	r2, [r2, #8]
 800a2a6:	1a9a      	subs	r2, r3, r2
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	65da      	str	r2, [r3, #92]	; 0x5c
 800a2ac:	e002      	b.n	800a2b4 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00c      	beq.n	800a2d6 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	891a      	ldrh	r2, [r3, #8]
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	795b      	ldrb	r3, [r3, #5]
 800a2ca:	2001      	movs	r0, #1
 800a2cc:	9000      	str	r0, [sp, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f001 fd45 	bl	800bd5e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a2d4:	e0a8      	b.n	800a428 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	2207      	movs	r2, #7
 800a2da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a2de:	e0a3      	b.n	800a428 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a2e0:	7d3b      	ldrb	r3, [r7, #20]
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d104      	bne.n	800a2f0 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	2205      	movs	r2, #5
 800a2ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a2ee:	e09b      	b.n	800a428 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a2f0:	7d3b      	ldrb	r3, [r7, #20]
 800a2f2:	2b05      	cmp	r3, #5
 800a2f4:	f040 8098 	bne.w	800a428 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	220a      	movs	r2, #10
 800a2fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a300:	e092      	b.n	800a428 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	791b      	ldrb	r3, [r3, #4]
 800a30c:	220d      	movs	r2, #13
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f001 fd4a 	bl	800bda8 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2208      	movs	r2, #8
 800a318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a31c:	e08d      	b.n	800a43a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	791b      	ldrb	r3, [r3, #4]
 800a322:	4619      	mov	r1, r3
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f006 fac3 	bl	80108b0 <USBH_LL_GetURBState>
 800a32a:	4603      	mov	r3, r0
 800a32c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a32e:	7d3b      	ldrb	r3, [r7, #20]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d115      	bne.n	800a360 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f8a9 	bl	800a49c <USBH_MSC_DecodeCSW>
 800a34a:	4603      	mov	r3, r0
 800a34c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a34e:	7d7b      	ldrb	r3, [r7, #21]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d102      	bne.n	800a35a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a358:	e068      	b.n	800a42c <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a35a:	2302      	movs	r3, #2
 800a35c:	75fb      	strb	r3, [r7, #23]
      break;
 800a35e:	e065      	b.n	800a42c <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a360:	7d3b      	ldrb	r3, [r7, #20]
 800a362:	2b05      	cmp	r3, #5
 800a364:	d162      	bne.n	800a42c <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	2209      	movs	r2, #9
 800a36a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a36e:	e05d      	b.n	800a42c <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a370:	78fb      	ldrb	r3, [r7, #3]
 800a372:	2200      	movs	r2, #0
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f864 	bl	800a444 <USBH_MSC_BOT_Abort>
 800a37c:	4603      	mov	r3, r0
 800a37e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a380:	7dbb      	ldrb	r3, [r7, #22]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d104      	bne.n	800a390 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	2207      	movs	r2, #7
 800a38a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a38e:	e04f      	b.n	800a430 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a390:	7dbb      	ldrb	r3, [r7, #22]
 800a392:	2b04      	cmp	r3, #4
 800a394:	d14c      	bne.n	800a430 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	220b      	movs	r2, #11
 800a39a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a39e:	e047      	b.n	800a430 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a3a0:	78fb      	ldrb	r3, [r7, #3]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f84c 	bl	800a444 <USBH_MSC_BOT_Abort>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a3b0:	7dbb      	ldrb	r3, [r7, #22]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d11d      	bne.n	800a3f2 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	795b      	ldrb	r3, [r3, #5]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f006 fad0 	bl	8010962 <USBH_LL_GetToggle>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	7959      	ldrb	r1, [r3, #5]
 800a3ca:	7bfb      	ldrb	r3, [r7, #15]
 800a3cc:	f1c3 0301 	rsb	r3, r3, #1
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f006 fa95 	bl	8010904 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	791b      	ldrb	r3, [r3, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f006 fa8e 	bl	8010904 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	2209      	movs	r2, #9
 800a3ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a3f0:	e020      	b.n	800a434 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a3f2:	7dbb      	ldrb	r3, [r7, #22]
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	d11d      	bne.n	800a434 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	220b      	movs	r2, #11
 800a3fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a400:	e018      	b.n	800a434 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7ff fdf2 	bl	8009fec <USBH_MSC_BOT_REQ_Reset>
 800a408:	4603      	mov	r3, r0
 800a40a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a40c:	7dfb      	ldrb	r3, [r7, #23]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d112      	bne.n	800a438 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a41a:	e00d      	b.n	800a438 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a41c:	bf00      	nop
 800a41e:	e00c      	b.n	800a43a <USBH_MSC_BOT_Process+0x392>
      break;
 800a420:	bf00      	nop
 800a422:	e00a      	b.n	800a43a <USBH_MSC_BOT_Process+0x392>
      break;
 800a424:	bf00      	nop
 800a426:	e008      	b.n	800a43a <USBH_MSC_BOT_Process+0x392>
      break;
 800a428:	bf00      	nop
 800a42a:	e006      	b.n	800a43a <USBH_MSC_BOT_Process+0x392>
      break;
 800a42c:	bf00      	nop
 800a42e:	e004      	b.n	800a43a <USBH_MSC_BOT_Process+0x392>
      break;
 800a430:	bf00      	nop
 800a432:	e002      	b.n	800a43a <USBH_MSC_BOT_Process+0x392>
      break;
 800a434:	bf00      	nop
 800a436:	e000      	b.n	800a43a <USBH_MSC_BOT_Process+0x392>
      break;
 800a438:	bf00      	nop
  }
  return status;
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
 800a450:	4613      	mov	r3, r2
 800a452:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a454:	2302      	movs	r3, #2
 800a456:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a462:	78bb      	ldrb	r3, [r7, #2]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <USBH_MSC_BOT_Abort+0x2a>
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d009      	beq.n	800a480 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a46c:	e011      	b.n	800a492 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	79db      	ldrb	r3, [r3, #7]
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f001 f888 	bl	800b58a <USBH_ClrFeature>
 800a47a:	4603      	mov	r3, r0
 800a47c:	73fb      	strb	r3, [r7, #15]
      break;
 800a47e:	e008      	b.n	800a492 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	799b      	ldrb	r3, [r3, #6]
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f001 f87f 	bl	800b58a <USBH_ClrFeature>
 800a48c:	4603      	mov	r3, r0
 800a48e:	73fb      	strb	r3, [r7, #15]
      break;
 800a490:	bf00      	nop
  }
  return status;
 800a492:	7bfb      	ldrb	r3, [r7, #15]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a4aa:	69db      	ldr	r3, [r3, #28]
 800a4ac:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	791b      	ldrb	r3, [r3, #4]
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f006 f967 	bl	801078c <USBH_LL_GetLastXferSize>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b0d      	cmp	r3, #13
 800a4c2:	d002      	beq.n	800a4ca <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	73fb      	strb	r3, [r7, #15]
 800a4c8:	e024      	b.n	800a514 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4ce:	4a14      	ldr	r2, [pc, #80]	; (800a520 <USBH_MSC_DecodeCSW+0x84>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d11d      	bne.n	800a510 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d119      	bne.n	800a514 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d102      	bne.n	800a4f0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73fb      	strb	r3, [r7, #15]
 800a4ee:	e011      	b.n	800a514 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d102      	bne.n	800a500 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	73fb      	strb	r3, [r7, #15]
 800a4fe:	e009      	b.n	800a514 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a506:	2b02      	cmp	r3, #2
 800a508:	d104      	bne.n	800a514 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a50a:	2302      	movs	r3, #2
 800a50c:	73fb      	strb	r3, [r7, #15]
 800a50e:	e001      	b.n	800a514 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a510:	2302      	movs	r3, #2
 800a512:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a514:	7bfb      	ldrb	r3, [r7, #15]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	53425355 	.word	0x53425355

0800a524 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	460b      	mov	r3, r1
 800a52e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a530:	2302      	movs	r3, #2
 800a532:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a53a:	69db      	ldr	r3, [r3, #28]
 800a53c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a544:	2b01      	cmp	r3, #1
 800a546:	d002      	beq.n	800a54e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d021      	beq.n	800a590 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a54c:	e028      	b.n	800a5a0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	2200      	movs	r2, #0
 800a552:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	220a      	movs	r2, #10
 800a560:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	3363      	adds	r3, #99	; 0x63
 800a568:	2210      	movs	r2, #16
 800a56a:	2100      	movs	r1, #0
 800a56c:	4618      	mov	r0, r3
 800a56e:	f006 fac3 	bl	8010af8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2202      	movs	r2, #2
 800a586:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a58a:	2301      	movs	r3, #1
 800a58c:	73fb      	strb	r3, [r7, #15]
      break;
 800a58e:	e007      	b.n	800a5a0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a590:	78fb      	ldrb	r3, [r7, #3]
 800a592:	4619      	mov	r1, r3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7ff fd87 	bl	800a0a8 <USBH_MSC_BOT_Process>
 800a59a:	4603      	mov	r3, r0
 800a59c:	73fb      	strb	r3, [r7, #15]
      break;
 800a59e:	bf00      	nop
  }

  return error;
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b086      	sub	sp, #24
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	60f8      	str	r0, [r7, #12]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	607a      	str	r2, [r7, #4]
 800a5b6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d002      	beq.n	800a5d6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d027      	beq.n	800a624 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a5d4:	e05f      	b.n	800a696 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	2208      	movs	r2, #8
 800a5da:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	2280      	movs	r2, #128	; 0x80
 800a5e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	220a      	movs	r2, #10
 800a5e8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	3363      	adds	r3, #99	; 0x63
 800a5f0:	2210      	movs	r2, #16
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f006 fa7f 	bl	8010af8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	2225      	movs	r2, #37	; 0x25
 800a5fe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	2202      	movs	r2, #2
 800a60e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	f103 0210 	add.w	r2, r3, #16
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a61e:	2301      	movs	r3, #1
 800a620:	75fb      	strb	r3, [r7, #23]
      break;
 800a622:	e038      	b.n	800a696 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a624:	7afb      	ldrb	r3, [r7, #11]
 800a626:	4619      	mov	r1, r3
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f7ff fd3d 	bl	800a0a8 <USBH_MSC_BOT_Process>
 800a62e:	4603      	mov	r3, r0
 800a630:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a632:	7dfb      	ldrb	r3, [r7, #23]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d12d      	bne.n	800a694 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a63e:	3303      	adds	r3, #3
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	461a      	mov	r2, r3
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a64a:	3302      	adds	r3, #2
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	021b      	lsls	r3, r3, #8
 800a650:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a658:	3301      	adds	r3, #1
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a65e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	061b      	lsls	r3, r3, #24
 800a66a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a676:	3307      	adds	r3, #7
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a682:	3306      	adds	r3, #6
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	b29b      	uxth	r3, r3
 800a688:	021b      	lsls	r3, r3, #8
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	4313      	orrs	r3, r2
 800a68e:	b29a      	uxth	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	809a      	strh	r2, [r3, #4]
      break;
 800a694:	bf00      	nop
  }

  return error;
 800a696:	7dfb      	ldrb	r3, [r7, #23]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3718      	adds	r7, #24
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	607a      	str	r2, [r7, #4]
 800a6ac:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a6b8:	69db      	ldr	r3, [r3, #28]
 800a6ba:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d002      	beq.n	800a6cc <USBH_MSC_SCSI_Inquiry+0x2c>
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d03d      	beq.n	800a746 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a6ca:	e089      	b.n	800a7e0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	2224      	movs	r2, #36	; 0x24
 800a6d0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	2280      	movs	r2, #128	; 0x80
 800a6d6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	220a      	movs	r2, #10
 800a6de:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	3363      	adds	r3, #99	; 0x63
 800a6e6:	220a      	movs	r2, #10
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f006 fa04 	bl	8010af8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	2212      	movs	r2, #18
 800a6f4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a6f8:	7afb      	ldrb	r3, [r7, #11]
 800a6fa:	015b      	lsls	r3, r3, #5
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	2200      	movs	r2, #0
 800a708:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	2224      	movs	r2, #36	; 0x24
 800a718:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	2202      	movs	r2, #2
 800a730:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	f103 0210 	add.w	r2, r3, #16
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a740:	2301      	movs	r3, #1
 800a742:	75fb      	strb	r3, [r7, #23]
      break;
 800a744:	e04c      	b.n	800a7e0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a746:	7afb      	ldrb	r3, [r7, #11]
 800a748:	4619      	mov	r1, r3
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7ff fcac 	bl	800a0a8 <USBH_MSC_BOT_Process>
 800a750:	4603      	mov	r3, r0
 800a752:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a754:	7dfb      	ldrb	r3, [r7, #23]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d141      	bne.n	800a7de <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a75a:	2222      	movs	r2, #34	; 0x22
 800a75c:	2100      	movs	r1, #0
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f006 f9ca 	bl	8010af8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	f003 031f 	and.w	r3, r3, #31
 800a770:	b2da      	uxtb	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	095b      	lsrs	r3, r3, #5
 800a780:	b2da      	uxtb	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a78c:	3301      	adds	r3, #1
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	b25b      	sxtb	r3, r3
 800a792:	2b00      	cmp	r3, #0
 800a794:	da03      	bge.n	800a79e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	709a      	strb	r2, [r3, #2]
 800a79c:	e002      	b.n	800a7a4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	1cd8      	adds	r0, r3, #3
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7ae:	3308      	adds	r3, #8
 800a7b0:	2208      	movs	r2, #8
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	f006 f992 	bl	8010adc <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f103 000c 	add.w	r0, r3, #12
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7c4:	3310      	adds	r3, #16
 800a7c6:	2210      	movs	r2, #16
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	f006 f987 	bl	8010adc <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	331d      	adds	r3, #29
 800a7d2:	693a      	ldr	r2, [r7, #16]
 800a7d4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a7d8:	3220      	adds	r2, #32
 800a7da:	6812      	ldr	r2, [r2, #0]
 800a7dc:	601a      	str	r2, [r3, #0]
      break;
 800a7de:	bf00      	nop
  }

  return error;
 800a7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3718      	adds	r7, #24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b086      	sub	sp, #24
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	60f8      	str	r0, [r7, #12]
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	607a      	str	r2, [r7, #4]
 800a7f6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a802:	69db      	ldr	r3, [r3, #28]
 800a804:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d002      	beq.n	800a816 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a810:	2b02      	cmp	r3, #2
 800a812:	d03d      	beq.n	800a890 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a814:	e05d      	b.n	800a8d2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	220e      	movs	r2, #14
 800a81a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	2280      	movs	r2, #128	; 0x80
 800a820:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	220a      	movs	r2, #10
 800a828:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	3363      	adds	r3, #99	; 0x63
 800a830:	2210      	movs	r2, #16
 800a832:	2100      	movs	r1, #0
 800a834:	4618      	mov	r0, r3
 800a836:	f006 f95f 	bl	8010af8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	2203      	movs	r2, #3
 800a83e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a842:	7afb      	ldrb	r3, [r7, #11]
 800a844:	015b      	lsls	r3, r3, #5
 800a846:	b2da      	uxtb	r2, r3
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	220e      	movs	r2, #14
 800a862:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	2202      	movs	r2, #2
 800a87a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	f103 0210 	add.w	r2, r3, #16
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a88a:	2301      	movs	r3, #1
 800a88c:	75fb      	strb	r3, [r7, #23]
      break;
 800a88e:	e020      	b.n	800a8d2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a890:	7afb      	ldrb	r3, [r7, #11]
 800a892:	4619      	mov	r1, r3
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f7ff fc07 	bl	800a0a8 <USBH_MSC_BOT_Process>
 800a89a:	4603      	mov	r3, r0
 800a89c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a89e:	7dfb      	ldrb	r3, [r7, #23]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d115      	bne.n	800a8d0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8aa:	3302      	adds	r3, #2
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	f003 030f 	and.w	r3, r3, #15
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8be:	7b1a      	ldrb	r2, [r3, #12]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8ca:	7b5a      	ldrb	r2, [r3, #13]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	709a      	strb	r2, [r3, #2]
      break;
 800a8d0:	bf00      	nop
  }

  return error;
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3718      	adds	r7, #24
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	607a      	str	r2, [r7, #4]
 800a8e6:	603b      	str	r3, [r7, #0]
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a900:	2b01      	cmp	r3, #1
 800a902:	d002      	beq.n	800a90a <USBH_MSC_SCSI_Write+0x2e>
 800a904:	2b02      	cmp	r3, #2
 800a906:	d047      	beq.n	800a998 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a908:	e04e      	b.n	800a9a8 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a910:	461a      	mov	r2, r3
 800a912:	6a3b      	ldr	r3, [r7, #32]
 800a914:	fb03 f202 	mul.w	r2, r3, r2
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	220a      	movs	r2, #10
 800a928:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	3363      	adds	r3, #99	; 0x63
 800a930:	2210      	movs	r2, #16
 800a932:	2100      	movs	r1, #0
 800a934:	4618      	mov	r0, r3
 800a936:	f006 f8df 	bl	8010af8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	222a      	movs	r2, #42	; 0x2a
 800a93e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a942:	79fa      	ldrb	r2, [r7, #7]
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a94a:	79ba      	ldrb	r2, [r7, #6]
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a952:	797a      	ldrb	r2, [r7, #5]
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a95a:	1d3b      	adds	r3, r7, #4
 800a95c:	781a      	ldrb	r2, [r3, #0]
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a964:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a96e:	f107 0320 	add.w	r3, r7, #32
 800a972:	781a      	ldrb	r2, [r3, #0]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	2202      	movs	r2, #2
 800a986:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a992:	2301      	movs	r3, #1
 800a994:	75fb      	strb	r3, [r7, #23]
      break;
 800a996:	e007      	b.n	800a9a8 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a998:	7afb      	ldrb	r3, [r7, #11]
 800a99a:	4619      	mov	r1, r3
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f7ff fb83 	bl	800a0a8 <USBH_MSC_BOT_Process>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a9a6:	bf00      	nop
  }

  return error;
 800a9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b086      	sub	sp, #24
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	60f8      	str	r0, [r7, #12]
 800a9ba:	607a      	str	r2, [r7, #4]
 800a9bc:	603b      	str	r3, [r7, #0]
 800a9be:	460b      	mov	r3, r1
 800a9c0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a9c2:	2302      	movs	r3, #2
 800a9c4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a9cc:	69db      	ldr	r3, [r3, #28]
 800a9ce:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d002      	beq.n	800a9e0 <USBH_MSC_SCSI_Read+0x2e>
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d047      	beq.n	800aa6e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a9de:	e04e      	b.n	800aa7e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	6a3b      	ldr	r3, [r7, #32]
 800a9ea:	fb03 f202 	mul.w	r2, r3, r2
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	2280      	movs	r2, #128	; 0x80
 800a9f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	220a      	movs	r2, #10
 800a9fe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	3363      	adds	r3, #99	; 0x63
 800aa06:	2210      	movs	r2, #16
 800aa08:	2100      	movs	r1, #0
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f006 f874 	bl	8010af8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	2228      	movs	r2, #40	; 0x28
 800aa14:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800aa18:	79fa      	ldrb	r2, [r7, #7]
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800aa20:	79ba      	ldrb	r2, [r7, #6]
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800aa28:	797a      	ldrb	r2, [r7, #5]
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800aa30:	1d3b      	adds	r3, r7, #4
 800aa32:	781a      	ldrb	r2, [r3, #0]
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800aa3a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800aa44:	f107 0320 	add.w	r3, r7, #32
 800aa48:	781a      	ldrb	r2, [r3, #0]
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa6c:	e007      	b.n	800aa7e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800aa6e:	7afb      	ldrb	r3, [r7, #11]
 800aa70:	4619      	mov	r1, r3
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f7ff fb18 	bl	800a0a8 <USBH_MSC_BOT_Process>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa7c:	bf00      	nop
  }

  return error;
 800aa7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	4613      	mov	r3, r2
 800aa94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d101      	bne.n	800aaa0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	e029      	b.n	800aaf4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	79fa      	ldrb	r2, [r7, #7]
 800aaa4:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f000 f81f 	bl	800aafc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d003      	beq.n	800aaec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f005 fd99 	bl	8010624 <USBH_LL_Init>

  return USBH_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ab04:	2300      	movs	r3, #0
 800ab06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ab08:	2300      	movs	r3, #0
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	e008      	b.n	800ab20 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	32e0      	adds	r2, #224	; 0xe0
 800ab14:	2100      	movs	r1, #0
 800ab16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b0e      	cmp	r3, #14
 800ab24:	d9f3      	bls.n	800ab0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ab26:	2300      	movs	r3, #0
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	e009      	b.n	800ab40 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	60fb      	str	r3, [r7, #12]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab46:	d3f1      	bcc.n	800ab2c <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2240      	movs	r2, #64	; 0x40
 800ab6c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bc80      	pop	{r7}
 800ab8e:	4770      	bx	lr

0800ab90 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d017      	beq.n	800abd4 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10f      	bne.n	800abce <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abb4:	1c59      	adds	r1, r3, #1
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	33dc      	adds	r3, #220	; 0xdc
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	73fb      	strb	r3, [r7, #15]
 800abcc:	e004      	b.n	800abd8 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800abce:	2302      	movs	r3, #2
 800abd0:	73fb      	strb	r3, [r7, #15]
 800abd2:	e001      	b.n	800abd8 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800abd4:	2302      	movs	r3, #2
 800abd6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3714      	adds	r7, #20
 800abde:	46bd      	mov	sp, r7
 800abe0:	bc80      	pop	{r7}
 800abe2:	4770      	bx	lr

0800abe4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800abfa:	78fa      	ldrb	r2, [r7, #3]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d204      	bcs.n	800ac0a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	78fa      	ldrb	r2, [r7, #3]
 800ac04:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800ac08:	e001      	b.n	800ac0e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bc80      	pop	{r7}
 800ac18:	4770      	bx	lr

0800ac1a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b087      	sub	sp, #28
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	4608      	mov	r0, r1
 800ac24:	4611      	mov	r1, r2
 800ac26:	461a      	mov	r2, r3
 800ac28:	4603      	mov	r3, r0
 800ac2a:	70fb      	strb	r3, [r7, #3]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	70bb      	strb	r3, [r7, #2]
 800ac30:	4613      	mov	r3, r2
 800ac32:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ac34:	2300      	movs	r3, #0
 800ac36:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f203 3336 	addw	r3, r3, #822	; 0x336
 800ac42:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ac44:	e025      	b.n	800ac92 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	221a      	movs	r2, #26
 800ac4a:	fb02 f303 	mul.w	r3, r2, r3
 800ac4e:	3308      	adds	r3, #8
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	4413      	add	r3, r2
 800ac54:	3302      	adds	r3, #2
 800ac56:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	795b      	ldrb	r3, [r3, #5]
 800ac5c:	78fa      	ldrb	r2, [r7, #3]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d002      	beq.n	800ac68 <USBH_FindInterface+0x4e>
 800ac62:	78fb      	ldrb	r3, [r7, #3]
 800ac64:	2bff      	cmp	r3, #255	; 0xff
 800ac66:	d111      	bne.n	800ac8c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ac6c:	78ba      	ldrb	r2, [r7, #2]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d002      	beq.n	800ac78 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac72:	78bb      	ldrb	r3, [r7, #2]
 800ac74:	2bff      	cmp	r3, #255	; 0xff
 800ac76:	d109      	bne.n	800ac8c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac7c:	787a      	ldrb	r2, [r7, #1]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d002      	beq.n	800ac88 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ac82:	787b      	ldrb	r3, [r7, #1]
 800ac84:	2bff      	cmp	r3, #255	; 0xff
 800ac86:	d101      	bne.n	800ac8c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ac88:	7dfb      	ldrb	r3, [r7, #23]
 800ac8a:	e006      	b.n	800ac9a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ac8c:	7dfb      	ldrb	r3, [r7, #23]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ac92:	7dfb      	ldrb	r3, [r7, #23]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d9d6      	bls.n	800ac46 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ac98:	23ff      	movs	r3, #255	; 0xff
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	371c      	adds	r7, #28
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bc80      	pop	{r7}
 800aca2:	4770      	bx	lr

0800aca4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f005 fcf5 	bl	801069c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800acb2:	2101      	movs	r1, #1
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f005 fe0e 	bl	80108d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af04      	add	r7, sp, #16
 800acca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800accc:	2302      	movs	r3, #2
 800acce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800acd0:	2300      	movs	r3, #0
 800acd2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d102      	bne.n	800ace6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2203      	movs	r2, #3
 800ace4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b0b      	cmp	r3, #11
 800acee:	f200 8177 	bhi.w	800afe0 <USBH_Process+0x31c>
 800acf2:	a201      	add	r2, pc, #4	; (adr r2, 800acf8 <USBH_Process+0x34>)
 800acf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf8:	0800ad29 	.word	0x0800ad29
 800acfc:	0800ad4b 	.word	0x0800ad4b
 800ad00:	0800ad5f 	.word	0x0800ad5f
 800ad04:	0800af7b 	.word	0x0800af7b
 800ad08:	0800afe1 	.word	0x0800afe1
 800ad0c:	0800ae03 	.word	0x0800ae03
 800ad10:	0800af31 	.word	0x0800af31
 800ad14:	0800ae33 	.word	0x0800ae33
 800ad18:	0800ae53 	.word	0x0800ae53
 800ad1c:	0800ae73 	.word	0x0800ae73
 800ad20:	0800aea1 	.word	0x0800aea1
 800ad24:	0800af63 	.word	0x0800af63
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 8157 	beq.w	800afe4 <USBH_Process+0x320>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ad3c:	20c8      	movs	r0, #200	; 0xc8
 800ad3e:	f005 fe3f 	bl	80109c0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f005 fd07 	bl	8010756 <USBH_LL_ResetPort>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ad48:	e14c      	b.n	800afe4 <USBH_Process+0x320>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	f040 8149 	bne.w	800afe8 <USBH_Process+0x324>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2202      	movs	r2, #2
 800ad5a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ad5c:	e144      	b.n	800afe8 <USBH_Process+0x324>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d005      	beq.n	800ad74 <USBH_Process+0xb0>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800ad6e:	2104      	movs	r1, #4
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ad74:	2064      	movs	r0, #100	; 0x64
 800ad76:	f005 fe23 	bl	80109c0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f005 fcc4 	bl	8010708 <USBH_LL_GetSpeed>
 800ad80:	4603      	mov	r3, r0
 800ad82:	461a      	mov	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2205      	movs	r2, #5
 800ad8e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ad90:	2100      	movs	r1, #0
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f001 f855 	bl	800be42 <USBH_AllocPipe>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ada0:	2180      	movs	r1, #128	; 0x80
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f001 f84d 	bl	800be42 <USBH_AllocPipe>
 800ada8:	4603      	mov	r3, r0
 800adaa:	461a      	mov	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	7919      	ldrb	r1, [r3, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800adc4:	b292      	uxth	r2, r2
 800adc6:	9202      	str	r2, [sp, #8]
 800adc8:	2200      	movs	r2, #0
 800adca:	9201      	str	r2, [sp, #4]
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	4603      	mov	r3, r0
 800add0:	2280      	movs	r2, #128	; 0x80
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f001 f806 	bl	800bde4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7959      	ldrb	r1, [r3, #5]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800adec:	b292      	uxth	r2, r2
 800adee:	9202      	str	r2, [sp, #8]
 800adf0:	2200      	movs	r2, #0
 800adf2:	9201      	str	r2, [sp, #4]
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	4603      	mov	r3, r0
 800adf8:	2200      	movs	r2, #0
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fff2 	bl	800bde4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae00:	e101      	b.n	800b006 <USBH_Process+0x342>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f904 	bl	800b010 <USBH_HandleEnum>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f040 80ee 	bne.w	800afec <USBH_Process+0x328>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d103      	bne.n	800ae2a <USBH_Process+0x166>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2208      	movs	r2, #8
 800ae26:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 800ae28:	e0e0      	b.n	800afec <USBH_Process+0x328>
          phost->gState = HOST_INPUT;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2207      	movs	r2, #7
 800ae2e:	701a      	strb	r2, [r3, #0]
      break;
 800ae30:	e0dc      	b.n	800afec <USBH_Process+0x328>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f000 80d9 	beq.w	800aff0 <USBH_Process+0x32c>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800ae44:	2101      	movs	r1, #1
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2208      	movs	r2, #8
 800ae4e:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ae50:	e0ce      	b.n	800aff0 <USBH_Process+0x32c>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fb4d 	bl	800b4fc <USBH_SetCfg>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f040 80c5 	bne.w	800aff4 <USBH_Process+0x330>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2209      	movs	r2, #9
 800ae6e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae70:	e0c0      	b.n	800aff4 <USBH_Process+0x330>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ae78:	f003 0320 	and.w	r3, r3, #32
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00b      	beq.n	800ae98 <USBH_Process+0x1d4>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ae80:	2101      	movs	r1, #1
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fb5d 	bl	800b542 <USBH_SetFeature>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f040 80b4 	bne.w	800aff8 <USBH_Process+0x334>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	220a      	movs	r2, #10
 800ae94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae96:	e0af      	b.n	800aff8 <USBH_Process+0x334>
        phost->gState = HOST_CHECK_CLASS;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	220a      	movs	r2, #10
 800ae9c:	701a      	strb	r2, [r3, #0]
      break;
 800ae9e:	e0ab      	b.n	800aff8 <USBH_Process+0x334>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 80a8 	beq.w	800affc <USBH_Process+0x338>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	73fb      	strb	r3, [r7, #15]
 800aeb8:	e017      	b.n	800aeea <USBH_Process+0x226>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	33dc      	adds	r3, #220	; 0xdc
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	791a      	ldrb	r2, [r3, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 800aece:	429a      	cmp	r2, r3
 800aed0:	d108      	bne.n	800aee4 <USBH_Process+0x220>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	33dc      	adds	r3, #220	; 0xdc
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4413      	add	r3, r2
 800aedc:	685a      	ldr	r2, [r3, #4]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	3301      	adds	r3, #1
 800aee8:	73fb      	strb	r3, [r7, #15]
 800aeea:	7bfb      	ldrb	r3, [r7, #15]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0e4      	beq.n	800aeba <USBH_Process+0x1f6>
          }
        }

        if (phost->pActiveClass != NULL)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d016      	beq.n	800af28 <USBH_Process+0x264>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	4798      	blx	r3
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d109      	bne.n	800af20 <USBH_Process+0x25c>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2206      	movs	r2, #6
 800af10:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800af18:	2103      	movs	r1, #3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800af1e:	e06d      	b.n	800affc <USBH_Process+0x338>
            phost->gState = HOST_ABORT_STATE;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	220d      	movs	r2, #13
 800af24:	701a      	strb	r2, [r3, #0]
      break;
 800af26:	e069      	b.n	800affc <USBH_Process+0x338>
          phost->gState = HOST_ABORT_STATE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	220d      	movs	r2, #13
 800af2c:	701a      	strb	r2, [r3, #0]
      break;
 800af2e:	e065      	b.n	800affc <USBH_Process+0x338>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00f      	beq.n	800af5a <USBH_Process+0x296>
      {
        status = phost->pActiveClass->Requests(phost);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	4798      	blx	r3
 800af46:	4603      	mov	r3, r0
 800af48:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800af4a:	7bbb      	ldrb	r3, [r7, #14]
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d156      	bne.n	800b000 <USBH_Process+0x33c>
        {
          phost->gState = HOST_CLASS;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	220b      	movs	r2, #11
 800af56:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800af58:	e052      	b.n	800b000 <USBH_Process+0x33c>
        phost->gState = HOST_ABORT_STATE;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	220d      	movs	r2, #13
 800af5e:	701a      	strb	r2, [r3, #0]
      break;
 800af60:	e04e      	b.n	800b000 <USBH_Process+0x33c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d04b      	beq.n	800b004 <USBH_Process+0x340>
      {
        phost->pActiveClass->BgndProcess(phost);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800af72:	695b      	ldr	r3, [r3, #20]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	4798      	blx	r3
      }
      break;
 800af78:	e044      	b.n	800b004 <USBH_Process+0x340>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7ff fdba 	bl	800aafc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d009      	beq.n	800afa6 <USBH_Process+0x2e2>
      {
        phost->pActiveClass->DeInit(phost);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800afac:	2b00      	cmp	r3, #0
 800afae:	d005      	beq.n	800afbc <USBH_Process+0x2f8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800afb6:	2105      	movs	r1, #5
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d107      	bne.n	800afd8 <USBH_Process+0x314>
      {
        phost->device.is_ReEnumerated = 0U;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f7ff fe67 	bl	800aca4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800afd6:	e016      	b.n	800b006 <USBH_Process+0x342>
        USBH_LL_Start(phost);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f005 fb5f 	bl	801069c <USBH_LL_Start>
      break;
 800afde:	e012      	b.n	800b006 <USBH_Process+0x342>

    case HOST_ABORT_STATE:
    default :
      break;
 800afe0:	bf00      	nop
 800afe2:	e010      	b.n	800b006 <USBH_Process+0x342>
      break;
 800afe4:	bf00      	nop
 800afe6:	e00e      	b.n	800b006 <USBH_Process+0x342>
      break;
 800afe8:	bf00      	nop
 800afea:	e00c      	b.n	800b006 <USBH_Process+0x342>
      break;
 800afec:	bf00      	nop
 800afee:	e00a      	b.n	800b006 <USBH_Process+0x342>
    break;
 800aff0:	bf00      	nop
 800aff2:	e008      	b.n	800b006 <USBH_Process+0x342>
      break;
 800aff4:	bf00      	nop
 800aff6:	e006      	b.n	800b006 <USBH_Process+0x342>
      break;
 800aff8:	bf00      	nop
 800affa:	e004      	b.n	800b006 <USBH_Process+0x342>
      break;
 800affc:	bf00      	nop
 800affe:	e002      	b.n	800b006 <USBH_Process+0x342>
      break;
 800b000:	bf00      	nop
 800b002:	e000      	b.n	800b006 <USBH_Process+0x342>
      break;
 800b004:	bf00      	nop
  }
  return USBH_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af04      	add	r7, sp, #16
 800b016:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b018:	2301      	movs	r3, #1
 800b01a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	785b      	ldrb	r3, [r3, #1]
 800b020:	2b07      	cmp	r3, #7
 800b022:	f200 80f8 	bhi.w	800b216 <USBH_HandleEnum+0x206>
 800b026:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <USBH_HandleEnum+0x1c>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b04d 	.word	0x0800b04d
 800b030:	0800b0bf 	.word	0x0800b0bf
 800b034:	0800b0d7 	.word	0x0800b0d7
 800b038:	0800b14d 	.word	0x0800b14d
 800b03c:	0800b163 	.word	0x0800b163
 800b040:	0800b17f 	.word	0x0800b17f
 800b044:	0800b1b3 	.word	0x0800b1b3
 800b048:	0800b1e7 	.word	0x0800b1e7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800b04c:	2108      	movs	r1, #8
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f984 	bl	800b35c <USBH_Get_DevDesc>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	f040 80df 	bne.w	800b21a <USBH_HandleEnum+0x20a>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2201      	movs	r2, #1
 800b06a:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	7919      	ldrb	r1, [r3, #4]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800b080:	b292      	uxth	r2, r2
 800b082:	9202      	str	r2, [sp, #8]
 800b084:	2200      	movs	r2, #0
 800b086:	9201      	str	r2, [sp, #4]
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	4603      	mov	r3, r0
 800b08c:	2280      	movs	r2, #128	; 0x80
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fea8 	bl	800bde4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	7959      	ldrb	r1, [r3, #5]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800b0a8:	b292      	uxth	r2, r2
 800b0aa:	9202      	str	r2, [sp, #8]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	9201      	str	r2, [sp, #4]
 800b0b0:	9300      	str	r3, [sp, #0]
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fe94 	bl	800bde4 <USBH_OpenPipe>
      }
      break;
 800b0bc:	e0ad      	b.n	800b21a <USBH_HandleEnum+0x20a>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 800b0be:	2112      	movs	r1, #18
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f94b 	bl	800b35c <USBH_Get_DevDesc>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f040 80a8 	bne.w	800b21e <USBH_HandleEnum+0x20e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	705a      	strb	r2, [r3, #1]

      }
      break;
 800b0d4:	e0a3      	b.n	800b21e <USBH_HandleEnum+0x20e>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800b0d6:	2101      	movs	r1, #1
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f9eb 	bl	800b4b4 <USBH_SetAddress>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f040 809e 	bne.w	800b222 <USBH_HandleEnum+0x212>
      {
        USBH_Delay(2U);
 800b0e6:	2002      	movs	r0, #2
 800b0e8:	f005 fc6a 	bl	80109c0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2203      	movs	r2, #3
 800b0f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	7919      	ldrb	r1, [r3, #4]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800b10e:	b292      	uxth	r2, r2
 800b110:	9202      	str	r2, [sp, #8]
 800b112:	2200      	movs	r2, #0
 800b114:	9201      	str	r2, [sp, #4]
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	4603      	mov	r3, r0
 800b11a:	2280      	movs	r2, #128	; 0x80
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fe61 	bl	800bde4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	7959      	ldrb	r1, [r3, #5]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800b136:	b292      	uxth	r2, r2
 800b138:	9202      	str	r2, [sp, #8]
 800b13a:	2200      	movs	r2, #0
 800b13c:	9201      	str	r2, [sp, #4]
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	4603      	mov	r3, r0
 800b142:	2200      	movs	r2, #0
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fe4d 	bl	800bde4 <USBH_OpenPipe>
      }
      break;
 800b14a:	e06a      	b.n	800b222 <USBH_HandleEnum+0x212>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 800b14c:	2109      	movs	r1, #9
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 f92c 	bl	800b3ac <USBH_Get_CfgDesc>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d165      	bne.n	800b226 <USBH_HandleEnum+0x216>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2204      	movs	r2, #4
 800b15e:	705a      	strb	r2, [r3, #1]
      }
      break;
 800b160:	e061      	b.n	800b226 <USBH_HandleEnum+0x216>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f91e 	bl	800b3ac <USBH_Get_CfgDesc>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d159      	bne.n	800b22a <USBH_HandleEnum+0x21a>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2205      	movs	r2, #5
 800b17a:	705a      	strb	r2, [r3, #1]
      }
      break;
 800b17c:	e055      	b.n	800b22a <USBH_HandleEnum+0x21a>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800b184:	2b00      	cmp	r3, #0
 800b186:	d010      	beq.n	800b1aa <USBH_HandleEnum+0x19a>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800b194:	23ff      	movs	r3, #255	; 0xff
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f92c 	bl	800b3f4 <USBH_Get_StringDesc>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d145      	bne.n	800b22e <USBH_HandleEnum+0x21e>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2206      	movs	r2, #6
 800b1a6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b1a8:	e041      	b.n	800b22e <USBH_HandleEnum+0x21e>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2206      	movs	r2, #6
 800b1ae:	705a      	strb	r2, [r3, #1]
      break;
 800b1b0:	e03d      	b.n	800b22e <USBH_HandleEnum+0x21e>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d010      	beq.n	800b1de <USBH_HandleEnum+0x1ce>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800b1c8:	23ff      	movs	r3, #255	; 0xff
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f912 	bl	800b3f4 <USBH_Get_StringDesc>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d12d      	bne.n	800b232 <USBH_HandleEnum+0x222>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2207      	movs	r2, #7
 800b1da:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b1dc:	e029      	b.n	800b232 <USBH_HandleEnum+0x222>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2207      	movs	r2, #7
 800b1e2:	705a      	strb	r2, [r3, #1]
      break;
 800b1e4:	e025      	b.n	800b232 <USBH_HandleEnum+0x222>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00f      	beq.n	800b210 <USBH_HandleEnum+0x200>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800b1fc:	23ff      	movs	r3, #255	; 0xff
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f8f8 	bl	800b3f4 <USBH_Get_StringDesc>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d115      	bne.n	800b236 <USBH_HandleEnum+0x226>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b20e:	e012      	b.n	800b236 <USBH_HandleEnum+0x226>
        Status = USBH_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	73fb      	strb	r3, [r7, #15]
      break;
 800b214:	e00f      	b.n	800b236 <USBH_HandleEnum+0x226>

    default:
      break;
 800b216:	bf00      	nop
 800b218:	e00e      	b.n	800b238 <USBH_HandleEnum+0x228>
      break;
 800b21a:	bf00      	nop
 800b21c:	e00c      	b.n	800b238 <USBH_HandleEnum+0x228>
      break;
 800b21e:	bf00      	nop
 800b220:	e00a      	b.n	800b238 <USBH_HandleEnum+0x228>
      break;
 800b222:	bf00      	nop
 800b224:	e008      	b.n	800b238 <USBH_HandleEnum+0x228>
      break;
 800b226:	bf00      	nop
 800b228:	e006      	b.n	800b238 <USBH_HandleEnum+0x228>
      break;
 800b22a:	bf00      	nop
 800b22c:	e004      	b.n	800b238 <USBH_HandleEnum+0x228>
      break;
 800b22e:	bf00      	nop
 800b230:	e002      	b.n	800b238 <USBH_HandleEnum+0x228>
      break;
 800b232:	bf00      	nop
 800b234:	e000      	b.n	800b238 <USBH_HandleEnum+0x228>
      break;
 800b236:	bf00      	nop
  }
  return Status;
 800b238:	7bfb      	ldrb	r3, [r7, #15]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop

0800b244 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	683a      	ldr	r2, [r7, #0]
 800b252:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800b256:	bf00      	nop
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bc80      	pop	{r7}
 800b25e:	4770      	bx	lr

0800b260 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800b26e:	1c5a      	adds	r2, r3, #1
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f804 	bl	800b284 <USBH_HandleSof>
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	b2db      	uxtb	r3, r3
 800b292:	2b0b      	cmp	r3, #11
 800b294:	d10a      	bne.n	800b2ac <USBH_HandleSof+0x28>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d005      	beq.n	800b2ac <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	4798      	blx	r3
  }
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b2c4:	bf00      	nop
}
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bc80      	pop	{r7}
 800b2cc:	4770      	bx	lr

0800b2ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b083      	sub	sp, #12
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800b2de:	bf00      	nop
}
 800b2e0:	370c      	adds	r7, #12
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bc80      	pop	{r7}
 800b2e6:	4770      	bx	lr

0800b2e8 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	bc80      	pop	{r7}
 800b312:	4770      	bx	lr

0800b314 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f005 f9cc 	bl	80106d2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	791b      	ldrb	r3, [r3, #4]
 800b33e:	4619      	mov	r1, r3
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fd9e 	bl	800be82 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	795b      	ldrb	r3, [r3, #5]
 800b34a:	4619      	mov	r1, r3
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 fd98 	bl	800be82 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af02      	add	r7, sp, #8
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	460b      	mov	r3, r1
 800b366:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b36e:	78fb      	ldrb	r3, [r7, #3]
 800b370:	b29b      	uxth	r3, r3
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	4613      	mov	r3, r2
 800b376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b37a:	2100      	movs	r1, #0
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 f864 	bl	800b44a <USBH_GetDescriptor>
 800b382:	4603      	mov	r3, r0
 800b384:	73fb      	strb	r3, [r7, #15]
 800b386:	7bfb      	ldrb	r3, [r7, #15]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10a      	bne.n	800b3a2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f503 7049 	add.w	r0, r3, #804	; 0x324
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b398:	78fa      	ldrb	r2, [r7, #3]
 800b39a:	b292      	uxth	r2, r2
 800b39c:	4619      	mov	r1, r3
 800b39e:	f000 f918 	bl	800b5d2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af02      	add	r7, sp, #8
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	331c      	adds	r3, #28
 800b3bc:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b3be:	887b      	ldrh	r3, [r7, #2]
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f83d 	bl	800b44a <USBH_GetDescriptor>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	72fb      	strb	r3, [r7, #11]
 800b3d4:	7afb      	ldrb	r3, [r7, #11]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d107      	bne.n	800b3ea <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f203 3336 	addw	r3, r3, #822	; 0x336
 800b3e0:	887a      	ldrh	r2, [r7, #2]
 800b3e2:	68f9      	ldr	r1, [r7, #12]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f000 f963 	bl	800b6b0 <USBH_ParseCfgDesc>
  }

  return status;
 800b3ea:	7afb      	ldrb	r3, [r7, #11]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b088      	sub	sp, #32
 800b3f8:	af02      	add	r7, sp, #8
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	607a      	str	r2, [r7, #4]
 800b3fe:	461a      	mov	r2, r3
 800b400:	460b      	mov	r3, r1
 800b402:	72fb      	strb	r3, [r7, #11]
 800b404:	4613      	mov	r3, r2
 800b406:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b408:	7afb      	ldrb	r3, [r7, #11]
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b410:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b418:	893b      	ldrh	r3, [r7, #8]
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	460b      	mov	r3, r1
 800b41e:	2100      	movs	r1, #0
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f000 f812 	bl	800b44a <USBH_GetDescriptor>
 800b426:	4603      	mov	r3, r0
 800b428:	75fb      	strb	r3, [r7, #23]
 800b42a:	7dfb      	ldrb	r3, [r7, #23]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d107      	bne.n	800b440 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b436:	893a      	ldrh	r2, [r7, #8]
 800b438:	6879      	ldr	r1, [r7, #4]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 fa34 	bl	800b8a8 <USBH_ParseStringDesc>
  }

  return status;
 800b440:	7dfb      	ldrb	r3, [r7, #23]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b084      	sub	sp, #16
 800b44e:	af00      	add	r7, sp, #0
 800b450:	60f8      	str	r0, [r7, #12]
 800b452:	607b      	str	r3, [r7, #4]
 800b454:	460b      	mov	r3, r1
 800b456:	72fb      	strb	r3, [r7, #11]
 800b458:	4613      	mov	r3, r2
 800b45a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	789b      	ldrb	r3, [r3, #2]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d11c      	bne.n	800b49e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b464:	7afb      	ldrb	r3, [r7, #11]
 800b466:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b46a:	b2da      	uxtb	r2, r3
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2206      	movs	r2, #6
 800b474:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	893a      	ldrh	r2, [r7, #8]
 800b47a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b47c:	893b      	ldrh	r3, [r7, #8]
 800b47e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b486:	d104      	bne.n	800b492 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f240 4209 	movw	r2, #1033	; 0x409
 800b48e:	829a      	strh	r2, [r3, #20]
 800b490:	e002      	b.n	800b498 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	8b3a      	ldrh	r2, [r7, #24]
 800b49c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b49e:	8b3b      	ldrh	r3, [r7, #24]
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	6879      	ldr	r1, [r7, #4]
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f000 fa4b 	bl	800b940 <USBH_CtlReq>
 800b4aa:	4603      	mov	r3, r0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	789b      	ldrb	r3, [r3, #2]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d10f      	bne.n	800b4e8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2205      	movs	r2, #5
 800b4d2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b4d4:	78fb      	ldrb	r3, [r7, #3]
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fa27 	bl	800b940 <USBH_CtlReq>
 800b4f2:	4603      	mov	r3, r0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	460b      	mov	r3, r1
 800b506:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	789b      	ldrb	r3, [r3, #2]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d10e      	bne.n	800b52e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2209      	movs	r2, #9
 800b51a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	887a      	ldrh	r2, [r7, #2]
 800b520:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b52e:	2200      	movs	r2, #0
 800b530:	2100      	movs	r1, #0
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fa04 	bl	800b940 <USBH_CtlReq>
 800b538:	4603      	mov	r3, r0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b082      	sub	sp, #8
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
 800b54a:	460b      	mov	r3, r1
 800b54c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	789b      	ldrb	r3, [r3, #2]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d10f      	bne.n	800b576 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2203      	movs	r2, #3
 800b560:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b562:	78fb      	ldrb	r3, [r7, #3]
 800b564:	b29a      	uxth	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b576:	2200      	movs	r2, #0
 800b578:	2100      	movs	r1, #0
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f9e0 	bl	800b940 <USBH_CtlReq>
 800b580:	4603      	mov	r3, r0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b082      	sub	sp, #8
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	460b      	mov	r3, r1
 800b594:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	789b      	ldrb	r3, [r3, #2]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d10f      	bne.n	800b5be <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2202      	movs	r2, #2
 800b5a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b5b0:	78fb      	ldrb	r3, [r7, #3]
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b5be:	2200      	movs	r2, #0
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f9bc 	bl	800b940 <USBH_CtlReq>
 800b5c8:	4603      	mov	r3, r0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b5d2:	b480      	push	{r7}
 800b5d4:	b085      	sub	sp, #20
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	60f8      	str	r0, [r7, #12]
 800b5da:	60b9      	str	r1, [r7, #8]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	781a      	ldrb	r2, [r3, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	785a      	ldrb	r2, [r3, #1]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	3302      	adds	r3, #2
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	3303      	adds	r3, #3
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	021b      	lsls	r3, r3, #8
 800b602:	b29b      	uxth	r3, r3
 800b604:	4313      	orrs	r3, r2
 800b606:	b29a      	uxth	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	791a      	ldrb	r2, [r3, #4]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	795a      	ldrb	r2, [r3, #5]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	799a      	ldrb	r2, [r3, #6]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	79da      	ldrb	r2, [r3, #7]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b62c:	88fb      	ldrh	r3, [r7, #6]
 800b62e:	2b08      	cmp	r3, #8
 800b630:	d939      	bls.n	800b6a6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	3308      	adds	r3, #8
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	b29a      	uxth	r2, r3
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	3309      	adds	r3, #9
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	b29b      	uxth	r3, r3
 800b642:	021b      	lsls	r3, r3, #8
 800b644:	b29b      	uxth	r3, r3
 800b646:	4313      	orrs	r3, r2
 800b648:	b29a      	uxth	r2, r3
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	330a      	adds	r3, #10
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	b29a      	uxth	r2, r3
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	330b      	adds	r3, #11
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	021b      	lsls	r3, r3, #8
 800b660:	b29b      	uxth	r3, r3
 800b662:	4313      	orrs	r3, r2
 800b664:	b29a      	uxth	r2, r3
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	330c      	adds	r3, #12
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	b29a      	uxth	r2, r3
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	330d      	adds	r3, #13
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	021b      	lsls	r3, r3, #8
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	4313      	orrs	r3, r2
 800b680:	b29a      	uxth	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	7b9a      	ldrb	r2, [r3, #14]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	7bda      	ldrb	r2, [r3, #15]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	7c1a      	ldrb	r2, [r3, #16]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	7c5a      	ldrb	r2, [r3, #17]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	745a      	strb	r2, [r3, #17]
  }
}
 800b6a6:	bf00      	nop
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bc80      	pop	{r7}
 800b6ae:	4770      	bx	lr

0800b6b0 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08a      	sub	sp, #40	; 0x28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	781a      	ldrb	r2, [r3, #0]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	785a      	ldrb	r2, [r3, #1]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	3302      	adds	r3, #2
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	3303      	adds	r3, #3
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	021b      	lsls	r3, r3, #8
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	791a      	ldrb	r2, [r3, #4]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	795a      	ldrb	r2, [r3, #5]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	799a      	ldrb	r2, [r3, #6]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	79da      	ldrb	r2, [r3, #7]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	7a1a      	ldrb	r2, [r3, #8]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b726:	88fb      	ldrh	r3, [r7, #6]
 800b728:	2b09      	cmp	r3, #9
 800b72a:	d95f      	bls.n	800b7ec <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b72c:	2309      	movs	r3, #9
 800b72e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b730:	2300      	movs	r3, #0
 800b732:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b734:	e051      	b.n	800b7da <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b736:	f107 0316 	add.w	r3, r7, #22
 800b73a:	4619      	mov	r1, r3
 800b73c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b73e:	f000 f8e5 	bl	800b90c <USBH_GetNextDesc>
 800b742:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	785b      	ldrb	r3, [r3, #1]
 800b748:	2b04      	cmp	r3, #4
 800b74a:	d146      	bne.n	800b7da <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b74c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b750:	221a      	movs	r2, #26
 800b752:	fb02 f303 	mul.w	r3, r2, r3
 800b756:	3308      	adds	r3, #8
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	4413      	add	r3, r2
 800b75c:	3302      	adds	r3, #2
 800b75e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b762:	69f8      	ldr	r0, [r7, #28]
 800b764:	f000 f846 	bl	800b7f4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b768:	2300      	movs	r3, #0
 800b76a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b76e:	2300      	movs	r3, #0
 800b770:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b772:	e022      	b.n	800b7ba <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b774:	f107 0316 	add.w	r3, r7, #22
 800b778:	4619      	mov	r1, r3
 800b77a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b77c:	f000 f8c6 	bl	800b90c <USBH_GetNextDesc>
 800b780:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b784:	785b      	ldrb	r3, [r3, #1]
 800b786:	2b05      	cmp	r3, #5
 800b788:	d117      	bne.n	800b7ba <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b78a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b78e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b792:	3201      	adds	r2, #1
 800b794:	00d2      	lsls	r2, r2, #3
 800b796:	211a      	movs	r1, #26
 800b798:	fb01 f303 	mul.w	r3, r1, r3
 800b79c:	4413      	add	r3, r2
 800b79e:	3308      	adds	r3, #8
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b7a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7aa:	69b8      	ldr	r0, [r7, #24]
 800b7ac:	f000 f850 	bl	800b850 <USBH_ParseEPDesc>
            ep_ix++;
 800b7b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	791b      	ldrb	r3, [r3, #4]
 800b7be:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d204      	bcs.n	800b7d0 <USBH_ParseCfgDesc+0x120>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	885a      	ldrh	r2, [r3, #2]
 800b7ca:	8afb      	ldrh	r3, [r7, #22]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d8d1      	bhi.n	800b774 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b7d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b7da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d804      	bhi.n	800b7ec <USBH_ParseCfgDesc+0x13c>
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	885a      	ldrh	r2, [r3, #2]
 800b7e6:	8afb      	ldrh	r3, [r7, #22]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d8a4      	bhi.n	800b736 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b7ec:	bf00      	nop
 800b7ee:	3728      	adds	r7, #40	; 0x28
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	781a      	ldrb	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	785a      	ldrb	r2, [r3, #1]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	789a      	ldrb	r2, [r3, #2]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	78da      	ldrb	r2, [r3, #3]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	791a      	ldrb	r2, [r3, #4]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	795a      	ldrb	r2, [r3, #5]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	799a      	ldrb	r2, [r3, #6]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	79da      	ldrb	r2, [r3, #7]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	7a1a      	ldrb	r2, [r3, #8]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	721a      	strb	r2, [r3, #8]
}
 800b846:	bf00      	nop
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bc80      	pop	{r7}
 800b84e:	4770      	bx	lr

0800b850 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	781a      	ldrb	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	785a      	ldrb	r2, [r3, #1]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	789a      	ldrb	r2, [r3, #2]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	78da      	ldrb	r2, [r3, #3]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	3304      	adds	r3, #4
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	b29a      	uxth	r2, r3
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	3305      	adds	r3, #5
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	021b      	lsls	r3, r3, #8
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	4313      	orrs	r3, r2
 800b890:	b29a      	uxth	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	799a      	ldrb	r2, [r3, #6]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	719a      	strb	r2, [r3, #6]
}
 800b89e:	bf00      	nop
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bc80      	pop	{r7}
 800b8a6:	4770      	bx	lr

0800b8a8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	d120      	bne.n	800b902 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	1e9a      	subs	r2, r3, #2
 800b8c6:	88fb      	ldrh	r3, [r7, #6]
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	bf28      	it	cs
 800b8cc:	4613      	movcs	r3, r2
 800b8ce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3302      	adds	r3, #2
 800b8d4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	82fb      	strh	r3, [r7, #22]
 800b8da:	e00b      	b.n	800b8f4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b8dc:	8afb      	ldrh	r3, [r7, #22]
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	781a      	ldrb	r2, [r3, #0]
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b8ee:	8afb      	ldrh	r3, [r7, #22]
 800b8f0:	3302      	adds	r3, #2
 800b8f2:	82fb      	strh	r3, [r7, #22]
 800b8f4:	8afa      	ldrh	r2, [r7, #22]
 800b8f6:	8abb      	ldrh	r3, [r7, #20]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d3ef      	bcc.n	800b8dc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2200      	movs	r2, #0
 800b900:	701a      	strb	r2, [r3, #0]
  }
}
 800b902:	bf00      	nop
 800b904:	371c      	adds	r7, #28
 800b906:	46bd      	mov	sp, r7
 800b908:	bc80      	pop	{r7}
 800b90a:	4770      	bx	lr

0800b90c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	881a      	ldrh	r2, [r3, #0]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	b29b      	uxth	r3, r3
 800b920:	4413      	add	r3, r2
 800b922:	b29a      	uxth	r2, r3
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	4413      	add	r3, r2
 800b932:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b934:	68fb      	ldr	r3, [r7, #12]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bc80      	pop	{r7}
 800b93e:	4770      	bx	lr

0800b940 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	4613      	mov	r3, r2
 800b94c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b94e:	2301      	movs	r3, #1
 800b950:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	789b      	ldrb	r3, [r3, #2]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d002      	beq.n	800b960 <USBH_CtlReq+0x20>
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d00f      	beq.n	800b97e <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 800b95e:	e034      	b.n	800b9ca <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	88fa      	ldrh	r2, [r7, #6]
 800b96a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2201      	movs	r2, #1
 800b970:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2202      	movs	r2, #2
 800b976:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b978:	2301      	movs	r3, #1
 800b97a:	75fb      	strb	r3, [r7, #23]
      break;
 800b97c:	e025      	b.n	800b9ca <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f000 f828 	bl	800b9d4 <USBH_HandleControl>
 800b984:	4603      	mov	r3, r0
 800b986:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b988:	7dfb      	ldrb	r3, [r7, #23]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d108      	bne.n	800b9a0 <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2201      	movs	r2, #1
 800b992:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	75fb      	strb	r3, [r7, #23]
      break;
 800b99e:	e013      	b.n	800b9c8 <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d108      	bne.n	800b9b8 <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	75fb      	strb	r3, [r7, #23]
      break;
 800b9b6:	e007      	b.n	800b9c8 <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 800b9b8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d104      	bne.n	800b9c8 <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b9c8:	bf00      	nop
  }
  return status;
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3718      	adds	r7, #24
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af02      	add	r7, sp, #8
 800b9da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	7e1b      	ldrb	r3, [r3, #24]
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	2b0a      	cmp	r3, #10
 800b9ec:	f200 814a 	bhi.w	800bc84 <USBH_HandleControl+0x2b0>
 800b9f0:	a201      	add	r2, pc, #4	; (adr r2, 800b9f8 <USBH_HandleControl+0x24>)
 800b9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f6:	bf00      	nop
 800b9f8:	0800ba25 	.word	0x0800ba25
 800b9fc:	0800ba3f 	.word	0x0800ba3f
 800ba00:	0800baa9 	.word	0x0800baa9
 800ba04:	0800bacf 	.word	0x0800bacf
 800ba08:	0800bb07 	.word	0x0800bb07
 800ba0c:	0800bb31 	.word	0x0800bb31
 800ba10:	0800bb83 	.word	0x0800bb83
 800ba14:	0800bba5 	.word	0x0800bba5
 800ba18:	0800bbe1 	.word	0x0800bbe1
 800ba1c:	0800bc07 	.word	0x0800bc07
 800ba20:	0800bc45 	.word	0x0800bc45
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f103 0110 	add.w	r1, r3, #16
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	795b      	ldrb	r3, [r3, #5]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 f937 	bl	800bca4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2202      	movs	r2, #2
 800ba3a:	761a      	strb	r2, [r3, #24]
      break;
 800ba3c:	e12d      	b.n	800bc9a <USBH_HandleControl+0x2c6>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	795b      	ldrb	r3, [r3, #5]
 800ba42:	4619      	mov	r1, r3
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f004 ff33 	bl	80108b0 <USBH_LL_GetURBState>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d11e      	bne.n	800ba92 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	7c1b      	ldrb	r3, [r3, #16]
 800ba58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba5c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	8adb      	ldrh	r3, [r3, #22]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00a      	beq.n	800ba7c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ba66:	7b7b      	ldrb	r3, [r7, #13]
 800ba68:	2b80      	cmp	r3, #128	; 0x80
 800ba6a:	d103      	bne.n	800ba74 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2203      	movs	r2, #3
 800ba70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba72:	e109      	b.n	800bc88 <USBH_HandleControl+0x2b4>
            phost->Control.state = CTRL_DATA_OUT;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2205      	movs	r2, #5
 800ba78:	761a      	strb	r2, [r3, #24]
      break;
 800ba7a:	e105      	b.n	800bc88 <USBH_HandleControl+0x2b4>
          if (direction == USB_D2H)
 800ba7c:	7b7b      	ldrb	r3, [r7, #13]
 800ba7e:	2b80      	cmp	r3, #128	; 0x80
 800ba80:	d103      	bne.n	800ba8a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2209      	movs	r2, #9
 800ba86:	761a      	strb	r2, [r3, #24]
      break;
 800ba88:	e0fe      	b.n	800bc88 <USBH_HandleControl+0x2b4>
            phost->Control.state = CTRL_STATUS_IN;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2207      	movs	r2, #7
 800ba8e:	761a      	strb	r2, [r3, #24]
      break;
 800ba90:	e0fa      	b.n	800bc88 <USBH_HandleControl+0x2b4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ba92:	7bbb      	ldrb	r3, [r7, #14]
 800ba94:	2b04      	cmp	r3, #4
 800ba96:	d003      	beq.n	800baa0 <USBH_HandleControl+0xcc>
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	f040 80f4 	bne.w	800bc88 <USBH_HandleControl+0x2b4>
          phost->Control.state = CTRL_ERROR;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	220b      	movs	r2, #11
 800baa4:	761a      	strb	r2, [r3, #24]
      break;
 800baa6:	e0ef      	b.n	800bc88 <USBH_HandleControl+0x2b4>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800baae:	b29a      	uxth	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6899      	ldr	r1, [r3, #8]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	899a      	ldrh	r2, [r3, #12]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	791b      	ldrb	r3, [r3, #4]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 f92e 	bl	800bd22 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2204      	movs	r2, #4
 800baca:	761a      	strb	r2, [r3, #24]
      break;
 800bacc:	e0e5      	b.n	800bc9a <USBH_HandleControl+0x2c6>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	791b      	ldrb	r3, [r3, #4]
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f004 feeb 	bl	80108b0 <USBH_LL_GetURBState>
 800bada:	4603      	mov	r3, r0
 800badc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bade:	7bbb      	ldrb	r3, [r7, #14]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d102      	bne.n	800baea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2209      	movs	r2, #9
 800bae8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800baea:	7bbb      	ldrb	r3, [r7, #14]
 800baec:	2b05      	cmp	r3, #5
 800baee:	d102      	bne.n	800baf6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800baf0:	2303      	movs	r3, #3
 800baf2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800baf4:	e0ca      	b.n	800bc8c <USBH_HandleControl+0x2b8>
        if (URB_Status == USBH_URB_ERROR)
 800baf6:	7bbb      	ldrb	r3, [r7, #14]
 800baf8:	2b04      	cmp	r3, #4
 800bafa:	f040 80c7 	bne.w	800bc8c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_ERROR;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	220b      	movs	r2, #11
 800bb02:	761a      	strb	r2, [r3, #24]
      break;
 800bb04:	e0c2      	b.n	800bc8c <USBH_HandleControl+0x2b8>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6899      	ldr	r1, [r3, #8]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	899a      	ldrh	r2, [r3, #12]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	795b      	ldrb	r3, [r3, #5]
 800bb12:	2001      	movs	r0, #1
 800bb14:	9000      	str	r0, [sp, #0]
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f8de 	bl	800bcd8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800bb22:	b29a      	uxth	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2206      	movs	r2, #6
 800bb2c:	761a      	strb	r2, [r3, #24]
      break;
 800bb2e:	e0b4      	b.n	800bc9a <USBH_HandleControl+0x2c6>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	795b      	ldrb	r3, [r3, #5]
 800bb34:	4619      	mov	r1, r3
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f004 feba 	bl	80108b0 <USBH_LL_GetURBState>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bb40:	7bbb      	ldrb	r3, [r7, #14]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d103      	bne.n	800bb4e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2207      	movs	r2, #7
 800bb4a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb4c:	e0a0      	b.n	800bc90 <USBH_HandleControl+0x2bc>
      else if (URB_Status == USBH_URB_STALL)
 800bb4e:	7bbb      	ldrb	r3, [r7, #14]
 800bb50:	2b05      	cmp	r3, #5
 800bb52:	d105      	bne.n	800bb60 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	220c      	movs	r2, #12
 800bb58:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb5e:	e097      	b.n	800bc90 <USBH_HandleControl+0x2bc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb60:	7bbb      	ldrb	r3, [r7, #14]
 800bb62:	2b02      	cmp	r3, #2
 800bb64:	d103      	bne.n	800bb6e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2205      	movs	r2, #5
 800bb6a:	761a      	strb	r2, [r3, #24]
      break;
 800bb6c:	e090      	b.n	800bc90 <USBH_HandleControl+0x2bc>
        if (URB_Status == USBH_URB_ERROR)
 800bb6e:	7bbb      	ldrb	r3, [r7, #14]
 800bb70:	2b04      	cmp	r3, #4
 800bb72:	f040 808d 	bne.w	800bc90 <USBH_HandleControl+0x2bc>
          phost->Control.state = CTRL_ERROR;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	220b      	movs	r2, #11
 800bb7a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb80:	e086      	b.n	800bc90 <USBH_HandleControl+0x2bc>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	791b      	ldrb	r3, [r3, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	2100      	movs	r1, #0
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f8c9 	bl	800bd22 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2208      	movs	r2, #8
 800bba0:	761a      	strb	r2, [r3, #24]

      break;
 800bba2:	e07a      	b.n	800bc9a <USBH_HandleControl+0x2c6>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	791b      	ldrb	r3, [r3, #4]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f004 fe80 	bl	80108b0 <USBH_LL_GetURBState>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bbb4:	7bbb      	ldrb	r3, [r7, #14]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d105      	bne.n	800bbc6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	220d      	movs	r2, #13
 800bbbe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bbc4:	e066      	b.n	800bc94 <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_ERROR)
 800bbc6:	7bbb      	ldrb	r3, [r7, #14]
 800bbc8:	2b04      	cmp	r3, #4
 800bbca:	d103      	bne.n	800bbd4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	220b      	movs	r2, #11
 800bbd0:	761a      	strb	r2, [r3, #24]
      break;
 800bbd2:	e05f      	b.n	800bc94 <USBH_HandleControl+0x2c0>
        if (URB_Status == USBH_URB_STALL)
 800bbd4:	7bbb      	ldrb	r3, [r7, #14]
 800bbd6:	2b05      	cmp	r3, #5
 800bbd8:	d15c      	bne.n	800bc94 <USBH_HandleControl+0x2c0>
          status = USBH_NOT_SUPPORTED;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	73fb      	strb	r3, [r7, #15]
      break;
 800bbde:	e059      	b.n	800bc94 <USBH_HandleControl+0x2c0>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	795b      	ldrb	r3, [r3, #5]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	9200      	str	r2, [sp, #0]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	2100      	movs	r1, #0
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 f873 	bl	800bcd8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800bbf8:	b29a      	uxth	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	220a      	movs	r2, #10
 800bc02:	761a      	strb	r2, [r3, #24]
      break;
 800bc04:	e049      	b.n	800bc9a <USBH_HandleControl+0x2c6>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	795b      	ldrb	r3, [r3, #5]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f004 fe4f 	bl	80108b0 <USBH_LL_GetURBState>
 800bc12:	4603      	mov	r3, r0
 800bc14:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d105      	bne.n	800bc28 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	220d      	movs	r2, #13
 800bc24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bc26:	e037      	b.n	800bc98 <USBH_HandleControl+0x2c4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bc28:	7bbb      	ldrb	r3, [r7, #14]
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d103      	bne.n	800bc36 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2209      	movs	r2, #9
 800bc32:	761a      	strb	r2, [r3, #24]
      break;
 800bc34:	e030      	b.n	800bc98 <USBH_HandleControl+0x2c4>
        if (URB_Status == USBH_URB_ERROR)
 800bc36:	7bbb      	ldrb	r3, [r7, #14]
 800bc38:	2b04      	cmp	r3, #4
 800bc3a:	d12d      	bne.n	800bc98 <USBH_HandleControl+0x2c4>
          phost->Control.state = CTRL_ERROR;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	220b      	movs	r2, #11
 800bc40:	761a      	strb	r2, [r3, #24]
      break;
 800bc42:	e029      	b.n	800bc98 <USBH_HandleControl+0x2c4>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	7e5b      	ldrb	r3, [r3, #25]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	b2da      	uxtb	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	765a      	strb	r2, [r3, #25]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	7e5b      	ldrb	r3, [r3, #25]
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d806      	bhi.n	800bc66 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bc64:	e019      	b.n	800bc9a <USBH_HandleControl+0x2c6>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800bc6c:	2106      	movs	r1, #6
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bc7e:	2302      	movs	r3, #2
 800bc80:	73fb      	strb	r3, [r7, #15]
      break;
 800bc82:	e00a      	b.n	800bc9a <USBH_HandleControl+0x2c6>

    default:
      break;
 800bc84:	bf00      	nop
 800bc86:	e008      	b.n	800bc9a <USBH_HandleControl+0x2c6>
      break;
 800bc88:	bf00      	nop
 800bc8a:	e006      	b.n	800bc9a <USBH_HandleControl+0x2c6>
      break;
 800bc8c:	bf00      	nop
 800bc8e:	e004      	b.n	800bc9a <USBH_HandleControl+0x2c6>
      break;
 800bc90:	bf00      	nop
 800bc92:	e002      	b.n	800bc9a <USBH_HandleControl+0x2c6>
      break;
 800bc94:	bf00      	nop
 800bc96:	e000      	b.n	800bc9a <USBH_HandleControl+0x2c6>
      break;
 800bc98:	bf00      	nop
  }

  return status;
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b088      	sub	sp, #32
 800bca8:	af04      	add	r7, sp, #16
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcb2:	79f9      	ldrb	r1, [r7, #7]
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9303      	str	r3, [sp, #12]
 800bcb8:	2308      	movs	r3, #8
 800bcba:	9302      	str	r3, [sp, #8]
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f004 fdc0 	bl	801084e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bcce:	2300      	movs	r3, #0
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b088      	sub	sp, #32
 800bcdc:	af04      	add	r7, sp, #16
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	4611      	mov	r1, r2
 800bce4:	461a      	mov	r2, r3
 800bce6:	460b      	mov	r3, r1
 800bce8:	80fb      	strh	r3, [r7, #6]
 800bcea:	4613      	mov	r3, r2
 800bcec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d001      	beq.n	800bcfc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcfc:	7979      	ldrb	r1, [r7, #5]
 800bcfe:	7e3b      	ldrb	r3, [r7, #24]
 800bd00:	9303      	str	r3, [sp, #12]
 800bd02:	88fb      	ldrh	r3, [r7, #6]
 800bd04:	9302      	str	r3, [sp, #8]
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	9301      	str	r3, [sp, #4]
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	2300      	movs	r3, #0
 800bd10:	2200      	movs	r2, #0
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f004 fd9b 	bl	801084e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b088      	sub	sp, #32
 800bd26:	af04      	add	r7, sp, #16
 800bd28:	60f8      	str	r0, [r7, #12]
 800bd2a:	60b9      	str	r1, [r7, #8]
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	461a      	mov	r2, r3
 800bd30:	460b      	mov	r3, r1
 800bd32:	80fb      	strh	r3, [r7, #6]
 800bd34:	4613      	mov	r3, r2
 800bd36:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd38:	7979      	ldrb	r1, [r7, #5]
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	9303      	str	r3, [sp, #12]
 800bd3e:	88fb      	ldrh	r3, [r7, #6]
 800bd40:	9302      	str	r3, [sp, #8]
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	9301      	str	r3, [sp, #4]
 800bd46:	2301      	movs	r3, #1
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f004 fd7d 	bl	801084e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bd54:	2300      	movs	r3, #0

}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b088      	sub	sp, #32
 800bd62:	af04      	add	r7, sp, #16
 800bd64:	60f8      	str	r0, [r7, #12]
 800bd66:	60b9      	str	r1, [r7, #8]
 800bd68:	4611      	mov	r1, r2
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	80fb      	strh	r3, [r7, #6]
 800bd70:	4613      	mov	r3, r2
 800bd72:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd82:	7979      	ldrb	r1, [r7, #5]
 800bd84:	7e3b      	ldrb	r3, [r7, #24]
 800bd86:	9303      	str	r3, [sp, #12]
 800bd88:	88fb      	ldrh	r3, [r7, #6]
 800bd8a:	9302      	str	r3, [sp, #8]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	9301      	str	r3, [sp, #4]
 800bd90:	2301      	movs	r3, #1
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	2302      	movs	r3, #2
 800bd96:	2200      	movs	r2, #0
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f004 fd58 	bl	801084e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b088      	sub	sp, #32
 800bdac:	af04      	add	r7, sp, #16
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	80fb      	strh	r3, [r7, #6]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bdbe:	7979      	ldrb	r1, [r7, #5]
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	9303      	str	r3, [sp, #12]
 800bdc4:	88fb      	ldrh	r3, [r7, #6]
 800bdc6:	9302      	str	r3, [sp, #8]
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	2301      	movs	r3, #1
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	2302      	movs	r3, #2
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	f004 fd3a 	bl	801084e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af04      	add	r7, sp, #16
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	4608      	mov	r0, r1
 800bdee:	4611      	mov	r1, r2
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	70fb      	strb	r3, [r7, #3]
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	70bb      	strb	r3, [r7, #2]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bdfe:	7878      	ldrb	r0, [r7, #1]
 800be00:	78ba      	ldrb	r2, [r7, #2]
 800be02:	78f9      	ldrb	r1, [r7, #3]
 800be04:	8b3b      	ldrh	r3, [r7, #24]
 800be06:	9302      	str	r3, [sp, #8]
 800be08:	7d3b      	ldrb	r3, [r7, #20]
 800be0a:	9301      	str	r3, [sp, #4]
 800be0c:	7c3b      	ldrb	r3, [r7, #16]
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	4603      	mov	r3, r0
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f004 fccd 	bl	80107b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b082      	sub	sp, #8
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	460b      	mov	r3, r1
 800be2c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800be2e:	78fb      	ldrb	r3, [r7, #3]
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f004 fcec 	bl	8010810 <USBH_LL_ClosePipe>

  return USBH_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b084      	sub	sp, #16
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	460b      	mov	r3, r1
 800be4c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 f832 	bl	800beb8 <USBH_GetFreePipe>
 800be54:	4603      	mov	r3, r0
 800be56:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800be58:	89fb      	ldrh	r3, [r7, #14]
 800be5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be5e:	4293      	cmp	r3, r2
 800be60:	d009      	beq.n	800be76 <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800be62:	78fb      	ldrb	r3, [r7, #3]
 800be64:	89fa      	ldrh	r2, [r7, #14]
 800be66:	f002 020f 	and.w	r2, r2, #15
 800be6a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	32e0      	adds	r2, #224	; 0xe0
 800be72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800be76:	89fb      	ldrh	r3, [r7, #14]
 800be78:	b2db      	uxtb	r3, r3
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800be82:	b480      	push	{r7}
 800be84:	b083      	sub	sp, #12
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	460b      	mov	r3, r1
 800be8c:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800be8e:	78fb      	ldrb	r3, [r7, #3]
 800be90:	2b0a      	cmp	r3, #10
 800be92:	d80b      	bhi.n	800beac <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800be94:	78fa      	ldrb	r2, [r7, #3]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	32e0      	adds	r2, #224	; 0xe0
 800be9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be9e:	78fa      	ldrb	r2, [r7, #3]
 800bea0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	32e0      	adds	r2, #224	; 0xe0
 800bea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800beac:	2300      	movs	r3, #0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bc80      	pop	{r7}
 800beb6:	4770      	bx	lr

0800beb8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bec0:	2300      	movs	r3, #0
 800bec2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bec4:	2300      	movs	r3, #0
 800bec6:	73fb      	strb	r3, [r7, #15]
 800bec8:	e00e      	b.n	800bee8 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800beca:	7bfa      	ldrb	r2, [r7, #15]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	32e0      	adds	r2, #224	; 0xe0
 800bed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d102      	bne.n	800bee2 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	b29b      	uxth	r3, r3
 800bee0:	e007      	b.n	800bef2 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800bee2:	7bfb      	ldrb	r3, [r7, #15]
 800bee4:	3301      	adds	r3, #1
 800bee6:	73fb      	strb	r3, [r7, #15]
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	2b0a      	cmp	r3, #10
 800beec:	d9ed      	bls.n	800beca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800beee:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bc80      	pop	{r7}
 800befa:	4770      	bx	lr

0800befc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bf06:	79fb      	ldrb	r3, [r7, #7]
 800bf08:	4a08      	ldr	r2, [pc, #32]	; (800bf2c <disk_status+0x30>)
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4413      	add	r3, r2
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	79fa      	ldrb	r2, [r7, #7]
 800bf14:	4905      	ldr	r1, [pc, #20]	; (800bf2c <disk_status+0x30>)
 800bf16:	440a      	add	r2, r1
 800bf18:	7a12      	ldrb	r2, [r2, #8]
 800bf1a:	4610      	mov	r0, r2
 800bf1c:	4798      	blx	r3
 800bf1e:	4603      	mov	r3, r0
 800bf20:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bf22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	20000384 	.word	0x20000384

0800bf30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	4603      	mov	r3, r0
 800bf38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800bf3e:	79fb      	ldrb	r3, [r7, #7]
 800bf40:	4a0d      	ldr	r2, [pc, #52]	; (800bf78 <disk_initialize+0x48>)
 800bf42:	5cd3      	ldrb	r3, [r2, r3]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d111      	bne.n	800bf6c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800bf48:	79fb      	ldrb	r3, [r7, #7]
 800bf4a:	4a0b      	ldr	r2, [pc, #44]	; (800bf78 <disk_initialize+0x48>)
 800bf4c:	2101      	movs	r1, #1
 800bf4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bf50:	79fb      	ldrb	r3, [r7, #7]
 800bf52:	4a09      	ldr	r2, [pc, #36]	; (800bf78 <disk_initialize+0x48>)
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4413      	add	r3, r2
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	79fa      	ldrb	r2, [r7, #7]
 800bf5e:	4906      	ldr	r1, [pc, #24]	; (800bf78 <disk_initialize+0x48>)
 800bf60:	440a      	add	r2, r1
 800bf62:	7a12      	ldrb	r2, [r2, #8]
 800bf64:	4610      	mov	r0, r2
 800bf66:	4798      	blx	r3
 800bf68:	4603      	mov	r3, r0
 800bf6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	20000384 	.word	0x20000384

0800bf7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bf7c:	b590      	push	{r4, r7, lr}
 800bf7e:	b087      	sub	sp, #28
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60b9      	str	r1, [r7, #8]
 800bf84:	607a      	str	r2, [r7, #4]
 800bf86:	603b      	str	r3, [r7, #0]
 800bf88:	4603      	mov	r3, r0
 800bf8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bf8c:	7bfb      	ldrb	r3, [r7, #15]
 800bf8e:	4a0a      	ldr	r2, [pc, #40]	; (800bfb8 <disk_read+0x3c>)
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	4413      	add	r3, r2
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	689c      	ldr	r4, [r3, #8]
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
 800bf9a:	4a07      	ldr	r2, [pc, #28]	; (800bfb8 <disk_read+0x3c>)
 800bf9c:	4413      	add	r3, r2
 800bf9e:	7a18      	ldrb	r0, [r3, #8]
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	68b9      	ldr	r1, [r7, #8]
 800bfa6:	47a0      	blx	r4
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	75fb      	strb	r3, [r7, #23]
  return res;
 800bfac:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	371c      	adds	r7, #28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd90      	pop	{r4, r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20000384 	.word	0x20000384

0800bfbc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bfbc:	b590      	push	{r4, r7, lr}
 800bfbe:	b087      	sub	sp, #28
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60b9      	str	r1, [r7, #8]
 800bfc4:	607a      	str	r2, [r7, #4]
 800bfc6:	603b      	str	r3, [r7, #0]
 800bfc8:	4603      	mov	r3, r0
 800bfca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bfcc:	7bfb      	ldrb	r3, [r7, #15]
 800bfce:	4a0a      	ldr	r2, [pc, #40]	; (800bff8 <disk_write+0x3c>)
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	4413      	add	r3, r2
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	68dc      	ldr	r4, [r3, #12]
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	4a07      	ldr	r2, [pc, #28]	; (800bff8 <disk_write+0x3c>)
 800bfdc:	4413      	add	r3, r2
 800bfde:	7a18      	ldrb	r0, [r3, #8]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	68b9      	ldr	r1, [r7, #8]
 800bfe6:	47a0      	blx	r4
 800bfe8:	4603      	mov	r3, r0
 800bfea:	75fb      	strb	r3, [r7, #23]
  return res;
 800bfec:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	371c      	adds	r7, #28
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd90      	pop	{r4, r7, pc}
 800bff6:	bf00      	nop
 800bff8:	20000384 	.word	0x20000384

0800bffc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	4603      	mov	r3, r0
 800c004:	603a      	str	r2, [r7, #0]
 800c006:	71fb      	strb	r3, [r7, #7]
 800c008:	460b      	mov	r3, r1
 800c00a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c00c:	79fb      	ldrb	r3, [r7, #7]
 800c00e:	4a09      	ldr	r2, [pc, #36]	; (800c034 <disk_ioctl+0x38>)
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4413      	add	r3, r2
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	79fa      	ldrb	r2, [r7, #7]
 800c01a:	4906      	ldr	r1, [pc, #24]	; (800c034 <disk_ioctl+0x38>)
 800c01c:	440a      	add	r2, r1
 800c01e:	7a10      	ldrb	r0, [r2, #8]
 800c020:	79b9      	ldrb	r1, [r7, #6]
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	4798      	blx	r3
 800c026:	4603      	mov	r3, r0
 800c028:	73fb      	strb	r3, [r7, #15]
  return res;
 800c02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	20000384 	.word	0x20000384

0800c038 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c038:	b480      	push	{r7}
 800c03a:	b087      	sub	sp, #28
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800c04c:	e007      	b.n	800c05e <mem_cpy+0x26>
		*d++ = *s++;
 800c04e:	693a      	ldr	r2, [r7, #16]
 800c050:	1c53      	adds	r3, r2, #1
 800c052:	613b      	str	r3, [r7, #16]
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	1c59      	adds	r1, r3, #1
 800c058:	6179      	str	r1, [r7, #20]
 800c05a:	7812      	ldrb	r2, [r2, #0]
 800c05c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	1e5a      	subs	r2, r3, #1
 800c062:	607a      	str	r2, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1f2      	bne.n	800c04e <mem_cpy+0x16>
}
 800c068:	bf00      	nop
 800c06a:	bf00      	nop
 800c06c:	371c      	adds	r7, #28
 800c06e:	46bd      	mov	sp, r7
 800c070:	bc80      	pop	{r7}
 800c072:	4770      	bx	lr

0800c074 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c074:	b480      	push	{r7}
 800c076:	b087      	sub	sp, #28
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800c084:	e005      	b.n	800c092 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	1c5a      	adds	r2, r3, #1
 800c08a:	617a      	str	r2, [r7, #20]
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	b2d2      	uxtb	r2, r2
 800c090:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	1e5a      	subs	r2, r3, #1
 800c096:	607a      	str	r2, [r7, #4]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1f4      	bne.n	800c086 <mem_set+0x12>
}
 800c09c:	bf00      	nop
 800c09e:	bf00      	nop
 800c0a0:	371c      	adds	r7, #28
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bc80      	pop	{r7}
 800c0a6:	4770      	bx	lr

0800c0a8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800c0a8:	b480      	push	{r7}
 800c0aa:	b089      	sub	sp, #36	; 0x24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	61fb      	str	r3, [r7, #28]
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800c0c0:	bf00      	nop
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	1e5a      	subs	r2, r3, #1
 800c0c6:	607a      	str	r2, [r7, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00d      	beq.n	800c0e8 <mem_cmp+0x40>
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	1c5a      	adds	r2, r3, #1
 800c0d0:	61fa      	str	r2, [r7, #28]
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	61ba      	str	r2, [r7, #24]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	1acb      	subs	r3, r1, r3
 800c0e0:	617b      	str	r3, [r7, #20]
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d0ec      	beq.n	800c0c2 <mem_cmp+0x1a>
	return r;
 800c0e8:	697b      	ldr	r3, [r7, #20]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3724      	adds	r7, #36	; 0x24
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bc80      	pop	{r7}
 800c0f2:	4770      	bx	lr

0800c0f4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c0fe:	e002      	b.n	800c106 <chk_chr+0x12>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	3301      	adds	r3, #1
 800c104:	607b      	str	r3, [r7, #4]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d005      	beq.n	800c11a <chk_chr+0x26>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	461a      	mov	r2, r3
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	4293      	cmp	r3, r2
 800c118:	d1f2      	bne.n	800c100 <chk_chr+0xc>
	return *str;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	781b      	ldrb	r3, [r3, #0]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	370c      	adds	r7, #12
 800c122:	46bd      	mov	sp, r7
 800c124:	bc80      	pop	{r7}
 800c126:	4770      	bx	lr

0800c128 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c132:	2300      	movs	r3, #0
 800c134:	60bb      	str	r3, [r7, #8]
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	60fb      	str	r3, [r7, #12]
 800c13a:	e03d      	b.n	800c1b8 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 800c13c:	4932      	ldr	r1, [pc, #200]	; (800c208 <chk_lock+0xe0>)
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	4613      	mov	r3, r2
 800c142:	005b      	lsls	r3, r3, #1
 800c144:	4413      	add	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	440b      	add	r3, r1
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d02e      	beq.n	800c1ae <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800c150:	492d      	ldr	r1, [pc, #180]	; (800c208 <chk_lock+0xe0>)
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	4613      	mov	r3, r2
 800c156:	005b      	lsls	r3, r3, #1
 800c158:	4413      	add	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	440b      	add	r3, r1
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d122      	bne.n	800c1b2 <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 800c16c:	4926      	ldr	r1, [pc, #152]	; (800c208 <chk_lock+0xe0>)
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	4613      	mov	r3, r2
 800c172:	005b      	lsls	r3, r3, #1
 800c174:	4413      	add	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	440b      	add	r3, r1
 800c17a:	3304      	adds	r3, #4
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c184:	3308      	adds	r3, #8
 800c186:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800c188:	429a      	cmp	r2, r3
 800c18a:	d112      	bne.n	800c1b2 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800c18c:	491e      	ldr	r1, [pc, #120]	; (800c208 <chk_lock+0xe0>)
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	4613      	mov	r3, r2
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	4413      	add	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	440b      	add	r3, r1
 800c19a:	3308      	adds	r3, #8
 800c19c:	881a      	ldrh	r2, [r3, #0]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1a4:	3306      	adds	r3, #6
 800c1a6:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d102      	bne.n	800c1b2 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800c1ac:	e007      	b.n	800c1be <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	60fb      	str	r3, [r7, #12]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d9be      	bls.n	800c13c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2b02      	cmp	r3, #2
 800c1c2:	d109      	bne.n	800c1d8 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d102      	bne.n	800c1d0 <chk_lock+0xa8>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d101      	bne.n	800c1d4 <chk_lock+0xac>
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	e013      	b.n	800c1fc <chk_lock+0xd4>
 800c1d4:	2312      	movs	r3, #18
 800c1d6:	e011      	b.n	800c1fc <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10b      	bne.n	800c1f6 <chk_lock+0xce>
 800c1de:	490a      	ldr	r1, [pc, #40]	; (800c208 <chk_lock+0xe0>)
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	005b      	lsls	r3, r3, #1
 800c1e6:	4413      	add	r3, r2
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	440b      	add	r3, r1
 800c1ec:	330a      	adds	r3, #10
 800c1ee:	881b      	ldrh	r3, [r3, #0]
 800c1f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1f4:	d101      	bne.n	800c1fa <chk_lock+0xd2>
 800c1f6:	2310      	movs	r3, #16
 800c1f8:	e000      	b.n	800c1fc <chk_lock+0xd4>
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3714      	adds	r7, #20
 800c200:	46bd      	mov	sp, r7
 800c202:	bc80      	pop	{r7}
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	2000016c 	.word	0x2000016c

0800c20c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c212:	2300      	movs	r3, #0
 800c214:	607b      	str	r3, [r7, #4]
 800c216:	e002      	b.n	800c21e <enq_lock+0x12>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	3301      	adds	r3, #1
 800c21c:	607b      	str	r3, [r7, #4]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d809      	bhi.n	800c238 <enq_lock+0x2c>
 800c224:	490a      	ldr	r1, [pc, #40]	; (800c250 <enq_lock+0x44>)
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	4613      	mov	r3, r2
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	4413      	add	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	440b      	add	r3, r1
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1ef      	bne.n	800c218 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b02      	cmp	r3, #2
 800c23c:	bf14      	ite	ne
 800c23e:	2301      	movne	r3, #1
 800c240:	2300      	moveq	r3, #0
 800c242:	b2db      	uxtb	r3, r3
}
 800c244:	4618      	mov	r0, r3
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	bc80      	pop	{r7}
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	2000016c 	.word	0x2000016c

0800c254 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c25e:	2300      	movs	r3, #0
 800c260:	60fb      	str	r3, [r7, #12]
 800c262:	e030      	b.n	800c2c6 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 800c264:	495a      	ldr	r1, [pc, #360]	; (800c3d0 <inc_lock+0x17c>)
 800c266:	68fa      	ldr	r2, [r7, #12]
 800c268:	4613      	mov	r3, r2
 800c26a:	005b      	lsls	r3, r3, #1
 800c26c:	4413      	add	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	440b      	add	r3, r1
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d11f      	bne.n	800c2c0 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 800c280:	4953      	ldr	r1, [pc, #332]	; (800c3d0 <inc_lock+0x17c>)
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	4613      	mov	r3, r2
 800c286:	005b      	lsls	r3, r3, #1
 800c288:	4413      	add	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	440b      	add	r3, r1
 800c28e:	3304      	adds	r3, #4
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c298:	3308      	adds	r3, #8
 800c29a:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d10f      	bne.n	800c2c0 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800c2a0:	494b      	ldr	r1, [pc, #300]	; (800c3d0 <inc_lock+0x17c>)
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	4413      	add	r3, r2
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	440b      	add	r3, r1
 800c2ae:	3308      	adds	r3, #8
 800c2b0:	881a      	ldrh	r2, [r3, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2b8:	3306      	adds	r3, #6
 800c2ba:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d006      	beq.n	800c2ce <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	60fb      	str	r3, [r7, #12]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d9cb      	bls.n	800c264 <inc_lock+0x10>
 800c2cc:	e000      	b.n	800c2d0 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 800c2ce:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d14a      	bne.n	800c36c <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	60fb      	str	r3, [r7, #12]
 800c2da:	e002      	b.n	800c2e2 <inc_lock+0x8e>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	60fb      	str	r3, [r7, #12]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d809      	bhi.n	800c2fc <inc_lock+0xa8>
 800c2e8:	4939      	ldr	r1, [pc, #228]	; (800c3d0 <inc_lock+0x17c>)
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	005b      	lsls	r3, r3, #1
 800c2f0:	4413      	add	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	440b      	add	r3, r1
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1ef      	bne.n	800c2dc <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d101      	bne.n	800c306 <inc_lock+0xb2>
 800c302:	2300      	movs	r3, #0
 800c304:	e05f      	b.n	800c3c6 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c30c:	6819      	ldr	r1, [r3, #0]
 800c30e:	4830      	ldr	r0, [pc, #192]	; (800c3d0 <inc_lock+0x17c>)
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	4613      	mov	r3, r2
 800c314:	005b      	lsls	r3, r3, #1
 800c316:	4413      	add	r3, r2
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4403      	add	r3, r0
 800c31c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c324:	3308      	adds	r3, #8
 800c326:	6819      	ldr	r1, [r3, #0]
 800c328:	4829      	ldr	r0, [pc, #164]	; (800c3d0 <inc_lock+0x17c>)
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	4613      	mov	r3, r2
 800c32e:	005b      	lsls	r3, r3, #1
 800c330:	4413      	add	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4403      	add	r3, r0
 800c336:	3304      	adds	r3, #4
 800c338:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c340:	3306      	adds	r3, #6
 800c342:	8818      	ldrh	r0, [r3, #0]
 800c344:	4922      	ldr	r1, [pc, #136]	; (800c3d0 <inc_lock+0x17c>)
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	4613      	mov	r3, r2
 800c34a:	005b      	lsls	r3, r3, #1
 800c34c:	4413      	add	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	440b      	add	r3, r1
 800c352:	3308      	adds	r3, #8
 800c354:	4602      	mov	r2, r0
 800c356:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800c358:	491d      	ldr	r1, [pc, #116]	; (800c3d0 <inc_lock+0x17c>)
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	4613      	mov	r3, r2
 800c35e:	005b      	lsls	r3, r3, #1
 800c360:	4413      	add	r3, r2
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	440b      	add	r3, r1
 800c366:	330a      	adds	r3, #10
 800c368:	2200      	movs	r2, #0
 800c36a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00c      	beq.n	800c38c <inc_lock+0x138>
 800c372:	4917      	ldr	r1, [pc, #92]	; (800c3d0 <inc_lock+0x17c>)
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	4613      	mov	r3, r2
 800c378:	005b      	lsls	r3, r3, #1
 800c37a:	4413      	add	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	440b      	add	r3, r1
 800c380:	330a      	adds	r3, #10
 800c382:	881b      	ldrh	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d001      	beq.n	800c38c <inc_lock+0x138>
 800c388:	2300      	movs	r3, #0
 800c38a:	e01c      	b.n	800c3c6 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10b      	bne.n	800c3aa <inc_lock+0x156>
 800c392:	490f      	ldr	r1, [pc, #60]	; (800c3d0 <inc_lock+0x17c>)
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	4613      	mov	r3, r2
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	4413      	add	r3, r2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	440b      	add	r3, r1
 800c3a0:	330a      	adds	r3, #10
 800c3a2:	881b      	ldrh	r3, [r3, #0]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	b299      	uxth	r1, r3
 800c3a8:	e001      	b.n	800c3ae <inc_lock+0x15a>
 800c3aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c3ae:	4808      	ldr	r0, [pc, #32]	; (800c3d0 <inc_lock+0x17c>)
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	4413      	add	r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	4403      	add	r3, r0
 800c3bc:	330a      	adds	r3, #10
 800c3be:	460a      	mov	r2, r1
 800c3c0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	3301      	adds	r3, #1
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bc80      	pop	{r7}
 800c3ce:	4770      	bx	lr
 800c3d0:	2000016c 	.word	0x2000016c

0800c3d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	607b      	str	r3, [r7, #4]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d82e      	bhi.n	800c446 <dec_lock+0x72>
		n = Files[i].ctr;
 800c3e8:	491b      	ldr	r1, [pc, #108]	; (800c458 <dec_lock+0x84>)
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	005b      	lsls	r3, r3, #1
 800c3f0:	4413      	add	r3, r2
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	440b      	add	r3, r1
 800c3f6:	330a      	adds	r3, #10
 800c3f8:	881b      	ldrh	r3, [r3, #0]
 800c3fa:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c3fc:	89fb      	ldrh	r3, [r7, #14]
 800c3fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c402:	d101      	bne.n	800c408 <dec_lock+0x34>
 800c404:	2300      	movs	r3, #0
 800c406:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800c408:	89fb      	ldrh	r3, [r7, #14]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d002      	beq.n	800c414 <dec_lock+0x40>
 800c40e:	89fb      	ldrh	r3, [r7, #14]
 800c410:	3b01      	subs	r3, #1
 800c412:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c414:	4910      	ldr	r1, [pc, #64]	; (800c458 <dec_lock+0x84>)
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	4613      	mov	r3, r2
 800c41a:	005b      	lsls	r3, r3, #1
 800c41c:	4413      	add	r3, r2
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	440b      	add	r3, r1
 800c422:	330a      	adds	r3, #10
 800c424:	89fa      	ldrh	r2, [r7, #14]
 800c426:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c428:	89fb      	ldrh	r3, [r7, #14]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d108      	bne.n	800c440 <dec_lock+0x6c>
 800c42e:	490a      	ldr	r1, [pc, #40]	; (800c458 <dec_lock+0x84>)
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	4613      	mov	r3, r2
 800c434:	005b      	lsls	r3, r3, #1
 800c436:	4413      	add	r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	440b      	add	r3, r1
 800c43c:	2200      	movs	r2, #0
 800c43e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c440:	2300      	movs	r3, #0
 800c442:	737b      	strb	r3, [r7, #13]
 800c444:	e001      	b.n	800c44a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c446:	2302      	movs	r3, #2
 800c448:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c44a:	7b7b      	ldrb	r3, [r7, #13]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3714      	adds	r7, #20
 800c450:	46bd      	mov	sp, r7
 800c452:	bc80      	pop	{r7}
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	2000016c 	.word	0x2000016c

0800c45c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b085      	sub	sp, #20
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c464:	2300      	movs	r3, #0
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	e016      	b.n	800c498 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c46a:	4910      	ldr	r1, [pc, #64]	; (800c4ac <clear_lock+0x50>)
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	4613      	mov	r3, r2
 800c470:	005b      	lsls	r3, r3, #1
 800c472:	4413      	add	r3, r2
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	440b      	add	r3, r1
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d108      	bne.n	800c492 <clear_lock+0x36>
 800c480:	490a      	ldr	r1, [pc, #40]	; (800c4ac <clear_lock+0x50>)
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	4613      	mov	r3, r2
 800c486:	005b      	lsls	r3, r3, #1
 800c488:	4413      	add	r3, r2
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	440b      	add	r3, r1
 800c48e:	2200      	movs	r2, #0
 800c490:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	3301      	adds	r3, #1
 800c496:	60fb      	str	r3, [r7, #12]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d9e5      	bls.n	800c46a <clear_lock+0xe>
	}
}
 800c49e:	bf00      	nop
 800c4a0:	bf00      	nop
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bc80      	pop	{r7}
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop
 800c4ac:	2000016c 	.word	0x2000016c

0800c4b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d047      	beq.n	800c55a <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c4d0:	330c      	adds	r3, #12
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4dc:	3301      	adds	r3, #1
 800c4de:	7818      	ldrb	r0, [r3, #0]
 800c4e0:	6879      	ldr	r1, [r7, #4]
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	697a      	ldr	r2, [r7, #20]
 800c4e6:	f7ff fd69 	bl	800bfbc <disk_write>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d002      	beq.n	800c4f6 <sync_window+0x46>
			res = FR_DISK_ERR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	73fb      	strb	r3, [r7, #15]
 800c4f4:	e031      	b.n	800c55a <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	2200      	movs	r2, #0
 800c500:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	697a      	ldr	r2, [r7, #20]
 800c50c:	1ad2      	subs	r2, r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c514:	3318      	adds	r3, #24
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d21e      	bcs.n	800c55a <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c522:	3303      	adds	r3, #3
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	613b      	str	r3, [r7, #16]
 800c528:	e014      	b.n	800c554 <sync_window+0xa4>
					wsect += fs->fsize;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c530:	3318      	adds	r3, #24
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	697a      	ldr	r2, [r7, #20]
 800c536:	4413      	add	r3, r2
 800c538:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c540:	3301      	adds	r3, #1
 800c542:	7818      	ldrb	r0, [r3, #0]
 800c544:	6879      	ldr	r1, [r7, #4]
 800c546:	2301      	movs	r3, #1
 800c548:	697a      	ldr	r2, [r7, #20]
 800c54a:	f7ff fd37 	bl	800bfbc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	3b01      	subs	r3, #1
 800c552:	613b      	str	r3, [r7, #16]
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	2b01      	cmp	r3, #1
 800c558:	d8e7      	bhi.n	800c52a <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 800c55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3718      	adds	r7, #24
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c56e:	2300      	movs	r3, #0
 800c570:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c578:	330c      	adds	r3, #12
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d01f      	beq.n	800c5c2 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f7ff ff94 	bl	800c4b0 <sync_window>
 800c588:	4603      	mov	r3, r0
 800c58a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d117      	bne.n	800c5c2 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c598:	3301      	adds	r3, #1
 800c59a:	7818      	ldrb	r0, [r3, #0]
 800c59c:	6879      	ldr	r1, [r7, #4]
 800c59e:	2301      	movs	r3, #1
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	f7ff fceb 	bl	800bf7c <disk_read>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d004      	beq.n	800c5b6 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c5bc:	330c      	adds	r3, #12
 800c5be:	683a      	ldr	r2, [r7, #0]
 800c5c0:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800c5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f7ff ff6b 	bl	800c4b0 <sync_window>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c5de:	7bfb      	ldrb	r3, [r7, #15]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f040 80bd 	bne.w	800c760 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	2b03      	cmp	r3, #3
 800c5f0:	f040 80a7 	bne.w	800c742 <sync_fs+0x176>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5fa:	3305      	adds	r3, #5
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	f040 809f 	bne.w	800c742 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c60c:	330a      	adds	r3, #10
 800c60e:	881b      	ldrh	r3, [r3, #0]
 800c610:	461a      	mov	r2, r3
 800c612:	2100      	movs	r1, #0
 800c614:	f7ff fd2e 	bl	800c074 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2255      	movs	r2, #85	; 0x55
 800c61c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	22aa      	movs	r2, #170	; 0xaa
 800c624:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2252      	movs	r2, #82	; 0x52
 800c62c:	701a      	strb	r2, [r3, #0]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2252      	movs	r2, #82	; 0x52
 800c632:	705a      	strb	r2, [r3, #1]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2261      	movs	r2, #97	; 0x61
 800c638:	709a      	strb	r2, [r3, #2]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2241      	movs	r2, #65	; 0x41
 800c63e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2272      	movs	r2, #114	; 0x72
 800c644:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2272      	movs	r2, #114	; 0x72
 800c64c:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2241      	movs	r2, #65	; 0x41
 800c654:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2261      	movs	r2, #97	; 0x61
 800c65c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c666:	3310      	adds	r3, #16
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	b2da      	uxtb	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c678:	3310      	adds	r3, #16
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	0a1b      	lsrs	r3, r3, #8
 800c680:	b29b      	uxth	r3, r3
 800c682:	b2da      	uxtb	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c690:	3310      	adds	r3, #16
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	0c1b      	lsrs	r3, r3, #16
 800c696:	b2da      	uxtb	r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6a4:	3310      	adds	r3, #16
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	0e1b      	lsrs	r3, r3, #24
 800c6aa:	b2da      	uxtb	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6b8:	330c      	adds	r3, #12
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	b2da      	uxtb	r2, r3
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ca:	330c      	adds	r3, #12
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	0a1b      	lsrs	r3, r3, #8
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6e2:	330c      	adds	r3, #12
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	0c1b      	lsrs	r3, r3, #16
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6f6:	330c      	adds	r3, #12
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	0e1b      	lsrs	r3, r3, #24
 800c6fc:	b2da      	uxtb	r2, r3
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c70a:	331c      	adds	r3, #28
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	1c5a      	adds	r2, r3, #1
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c716:	330c      	adds	r3, #12
 800c718:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c720:	3301      	adds	r3, #1
 800c722:	7818      	ldrb	r0, [r3, #0]
 800c724:	6879      	ldr	r1, [r7, #4]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c72c:	330c      	adds	r3, #12
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	2301      	movs	r3, #1
 800c732:	f7ff fc43 	bl	800bfbc <disk_write>
			fs->fsi_flag = 0;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c73c:	3305      	adds	r3, #5
 800c73e:	2200      	movs	r2, #0
 800c740:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c748:	3301      	adds	r3, #1
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	2200      	movs	r2, #0
 800c74e:	2100      	movs	r1, #0
 800c750:	4618      	mov	r0, r3
 800c752:	f7ff fc53 	bl	800bffc <disk_ioctl>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d001      	beq.n	800c760 <sync_fs+0x194>
			res = FR_DISK_ERR;
 800c75c:	2301      	movs	r3, #1
 800c75e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c760:	7bfb      	ldrb	r3, [r7, #15]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c76a:	b480      	push	{r7}
 800c76c:	b083      	sub	sp, #12
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	3b02      	subs	r3, #2
 800c778:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c780:	3314      	adds	r3, #20
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	3b02      	subs	r3, #2
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d301      	bcc.n	800c790 <clust2sect+0x26>
 800c78c:	2300      	movs	r3, #0
 800c78e:	e00e      	b.n	800c7ae <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c796:	3302      	adds	r3, #2
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	461a      	mov	r2, r3
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	fb03 f202 	mul.w	r2, r3, r2
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4413      	add	r3, r2
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	370c      	adds	r7, #12
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bc80      	pop	{r7}
 800c7b6:	4770      	bx	lr

0800c7b8 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d907      	bls.n	800c7d8 <get_fat+0x20>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ce:	3314      	adds	r3, #20
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d302      	bcc.n	800c7de <get_fat+0x26>
		val = 1;	/* Internal error */
 800c7d8:	2301      	movs	r3, #1
 800c7da:	617b      	str	r3, [r7, #20]
 800c7dc:	e0ec      	b.n	800c9b8 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c7de:	f04f 33ff 	mov.w	r3, #4294967295
 800c7e2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	2b03      	cmp	r3, #3
 800c7ee:	f000 809e 	beq.w	800c92e <get_fat+0x176>
 800c7f2:	2b03      	cmp	r3, #3
 800c7f4:	f300 80d6 	bgt.w	800c9a4 <get_fat+0x1ec>
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d002      	beq.n	800c802 <get_fat+0x4a>
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d063      	beq.n	800c8c8 <get_fat+0x110>
 800c800:	e0d0      	b.n	800c9a4 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	60fb      	str	r3, [r7, #12]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	085b      	lsrs	r3, r3, #1
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	4413      	add	r3, r2
 800c80e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c81e:	330a      	adds	r3, #10
 800c820:	881b      	ldrh	r3, [r3, #0]
 800c822:	4619      	mov	r1, r3
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	fbb3 f3f1 	udiv	r3, r3, r1
 800c82a:	4413      	add	r3, r2
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7ff fe98 	bl	800c564 <move_window>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	f040 80b7 	bne.w	800c9aa <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	1c5a      	adds	r2, r3, #1
 800c840:	60fa      	str	r2, [r7, #12]
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c848:	320a      	adds	r2, #10
 800c84a:	8812      	ldrh	r2, [r2, #0]
 800c84c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c850:	fb02 f201 	mul.w	r2, r2, r1
 800c854:	1a9b      	subs	r3, r3, r2
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	5cd3      	ldrb	r3, [r2, r3]
 800c85a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c86a:	330a      	adds	r3, #10
 800c86c:	881b      	ldrh	r3, [r3, #0]
 800c86e:	4619      	mov	r1, r3
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	fbb3 f3f1 	udiv	r3, r3, r1
 800c876:	4413      	add	r3, r2
 800c878:	4619      	mov	r1, r3
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7ff fe72 	bl	800c564 <move_window>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	f040 8093 	bne.w	800c9ae <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c88e:	330a      	adds	r3, #10
 800c890:	881b      	ldrh	r3, [r3, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	fbb3 f1f2 	udiv	r1, r3, r2
 800c89a:	fb02 f201 	mul.w	r2, r2, r1
 800c89e:	1a9b      	subs	r3, r3, r2
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	5cd3      	ldrb	r3, [r2, r3]
 800c8a4:	021b      	lsls	r3, r3, #8
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	f003 0301 	and.w	r3, r3, #1
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <get_fat+0x106>
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	091b      	lsrs	r3, r3, #4
 800c8bc:	e002      	b.n	800c8c4 <get_fat+0x10c>
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8c4:	617b      	str	r3, [r7, #20]
			break;
 800c8c6:	e077      	b.n	800c9b8 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8d6:	330a      	adds	r3, #10
 800c8d8:	881b      	ldrh	r3, [r3, #0]
 800c8da:	085b      	lsrs	r3, r3, #1
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	4619      	mov	r1, r3
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c8e6:	4413      	add	r3, r2
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7ff fe3a 	bl	800c564 <move_window>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d15d      	bne.n	800c9b2 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	005a      	lsls	r2, r3, #1
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c900:	330a      	adds	r3, #10
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	fbb2 f1f3 	udiv	r1, r2, r3
 800c908:	fb03 f301 	mul.w	r3, r3, r1
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	4413      	add	r3, r2
 800c912:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	3301      	adds	r3, #1
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	021b      	lsls	r3, r3, #8
 800c91c:	b21a      	sxth	r2, r3
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	b21b      	sxth	r3, r3
 800c924:	4313      	orrs	r3, r2
 800c926:	b21b      	sxth	r3, r3
 800c928:	b29b      	uxth	r3, r3
 800c92a:	617b      	str	r3, [r7, #20]
			break;
 800c92c:	e044      	b.n	800c9b8 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c93c:	330a      	adds	r3, #10
 800c93e:	881b      	ldrh	r3, [r3, #0]
 800c940:	089b      	lsrs	r3, r3, #2
 800c942:	b29b      	uxth	r3, r3
 800c944:	4619      	mov	r1, r3
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	fbb3 f3f1 	udiv	r3, r3, r1
 800c94c:	4413      	add	r3, r2
 800c94e:	4619      	mov	r1, r3
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7ff fe07 	bl	800c564 <move_window>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d12c      	bne.n	800c9b6 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	009a      	lsls	r2, r3, #2
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c966:	330a      	adds	r3, #10
 800c968:	881b      	ldrh	r3, [r3, #0]
 800c96a:	fbb2 f1f3 	udiv	r1, r2, r3
 800c96e:	fb03 f301 	mul.w	r3, r3, r1
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	4413      	add	r3, r2
 800c978:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	3303      	adds	r3, #3
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	061a      	lsls	r2, r3, #24
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	3302      	adds	r3, #2
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	041b      	lsls	r3, r3, #16
 800c98a:	4313      	orrs	r3, r2
 800c98c:	693a      	ldr	r2, [r7, #16]
 800c98e:	3201      	adds	r2, #1
 800c990:	7812      	ldrb	r2, [r2, #0]
 800c992:	0212      	lsls	r2, r2, #8
 800c994:	4313      	orrs	r3, r2
 800c996:	693a      	ldr	r2, [r7, #16]
 800c998:	7812      	ldrb	r2, [r2, #0]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c9a0:	617b      	str	r3, [r7, #20]
			break;
 800c9a2:	e009      	b.n	800c9b8 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	617b      	str	r3, [r7, #20]
 800c9a8:	e006      	b.n	800c9b8 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c9aa:	bf00      	nop
 800c9ac:	e004      	b.n	800c9b8 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c9ae:	bf00      	nop
 800c9b0:	e002      	b.n	800c9b8 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c9b2:	bf00      	nop
 800c9b4:	e000      	b.n	800c9b8 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c9b6:	bf00      	nop
		}
	}

	return val;
 800c9b8:	697b      	ldr	r3, [r7, #20]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3718      	adds	r7, #24
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b088      	sub	sp, #32
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	60f8      	str	r0, [r7, #12]
 800c9ca:	60b9      	str	r1, [r7, #8]
 800c9cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d907      	bls.n	800c9e4 <put_fat+0x22>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9da:	3314      	adds	r3, #20
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68ba      	ldr	r2, [r7, #8]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d302      	bcc.n	800c9ea <put_fat+0x28>
		res = FR_INT_ERR;
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	77fb      	strb	r3, [r7, #31]
 800c9e8:	e146      	b.n	800cc78 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	2b03      	cmp	r3, #3
 800c9f4:	f000 80d9 	beq.w	800cbaa <put_fat+0x1e8>
 800c9f8:	2b03      	cmp	r3, #3
 800c9fa:	f300 8133 	bgt.w	800cc64 <put_fat+0x2a2>
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d003      	beq.n	800ca0a <put_fat+0x48>
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	f000 8095 	beq.w	800cb32 <put_fat+0x170>
 800ca08:	e12c      	b.n	800cc64 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	617b      	str	r3, [r7, #20]
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	085b      	lsrs	r3, r3, #1
 800ca12:	697a      	ldr	r2, [r7, #20]
 800ca14:	4413      	add	r3, r2
 800ca16:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca26:	330a      	adds	r3, #10
 800ca28:	881b      	ldrh	r3, [r3, #0]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca32:	4413      	add	r3, r2
 800ca34:	4619      	mov	r1, r3
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f7ff fd94 	bl	800c564 <move_window>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca40:	7ffb      	ldrb	r3, [r7, #31]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f040 8111 	bne.w	800cc6a <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	1c5a      	adds	r2, r3, #1
 800ca4c:	617a      	str	r2, [r7, #20]
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ca54:	320a      	adds	r2, #10
 800ca56:	8812      	ldrh	r2, [r2, #0]
 800ca58:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca5c:	fb02 f201 	mul.w	r2, r2, r1
 800ca60:	1a9b      	subs	r3, r3, r2
 800ca62:	68fa      	ldr	r2, [r7, #12]
 800ca64:	4413      	add	r3, r2
 800ca66:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	f003 0301 	and.w	r3, r3, #1
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d00d      	beq.n	800ca8e <put_fat+0xcc>
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	b25b      	sxtb	r3, r3
 800ca78:	f003 030f 	and.w	r3, r3, #15
 800ca7c:	b25a      	sxtb	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	011b      	lsls	r3, r3, #4
 800ca84:	b25b      	sxtb	r3, r3
 800ca86:	4313      	orrs	r3, r2
 800ca88:	b25b      	sxtb	r3, r3
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	e001      	b.n	800ca92 <put_fat+0xd0>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	69ba      	ldr	r2, [r7, #24]
 800ca94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	2201      	movs	r2, #1
 800caa0:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cab0:	330a      	adds	r3, #10
 800cab2:	881b      	ldrh	r3, [r3, #0]
 800cab4:	4619      	mov	r1, r3
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	fbb3 f3f1 	udiv	r3, r3, r1
 800cabc:	4413      	add	r3, r2
 800cabe:	4619      	mov	r1, r3
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f7ff fd4f 	bl	800c564 <move_window>
 800cac6:	4603      	mov	r3, r0
 800cac8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800caca:	7ffb      	ldrb	r3, [r7, #31]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f040 80ce 	bne.w	800cc6e <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cad8:	330a      	adds	r3, #10
 800cada:	881b      	ldrh	r3, [r3, #0]
 800cadc:	461a      	mov	r2, r3
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	fbb3 f1f2 	udiv	r1, r3, r2
 800cae4:	fb02 f201 	mul.w	r2, r2, r1
 800cae8:	1a9b      	subs	r3, r3, r2
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	4413      	add	r3, r2
 800caee:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	f003 0301 	and.w	r3, r3, #1
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d003      	beq.n	800cb02 <put_fat+0x140>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	091b      	lsrs	r3, r3, #4
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	e00e      	b.n	800cb20 <put_fat+0x15e>
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	b25b      	sxtb	r3, r3
 800cb08:	f023 030f 	bic.w	r3, r3, #15
 800cb0c:	b25a      	sxtb	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	0a1b      	lsrs	r3, r3, #8
 800cb12:	b25b      	sxtb	r3, r3
 800cb14:	f003 030f 	and.w	r3, r3, #15
 800cb18:	b25b      	sxtb	r3, r3
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	b25b      	sxtb	r3, r3
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	69ba      	ldr	r2, [r7, #24]
 800cb22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb2a:	3304      	adds	r3, #4
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	701a      	strb	r2, [r3, #0]
			break;
 800cb30:	e0a2      	b.n	800cc78 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb40:	330a      	adds	r3, #10
 800cb42:	881b      	ldrh	r3, [r3, #0]
 800cb44:	085b      	lsrs	r3, r3, #1
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	4619      	mov	r1, r3
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb50:	4413      	add	r3, r2
 800cb52:	4619      	mov	r1, r3
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f7ff fd05 	bl	800c564 <move_window>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb5e:	7ffb      	ldrb	r3, [r7, #31]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f040 8086 	bne.w	800cc72 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	005a      	lsls	r2, r3, #1
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb70:	330a      	adds	r3, #10
 800cb72:	881b      	ldrh	r3, [r3, #0]
 800cb74:	fbb2 f1f3 	udiv	r1, r2, r3
 800cb78:	fb03 f301 	mul.w	r3, r3, r1
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	4413      	add	r3, r2
 800cb82:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	b2da      	uxtb	r2, r3
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	701a      	strb	r2, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	0a1b      	lsrs	r3, r3, #8
 800cb92:	b29a      	uxth	r2, r3
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	3301      	adds	r3, #1
 800cb98:	b2d2      	uxtb	r2, r2
 800cb9a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cba2:	3304      	adds	r3, #4
 800cba4:	2201      	movs	r2, #1
 800cba6:	701a      	strb	r2, [r3, #0]
			break;
 800cba8:	e066      	b.n	800cc78 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbb8:	330a      	adds	r3, #10
 800cbba:	881b      	ldrh	r3, [r3, #0]
 800cbbc:	089b      	lsrs	r3, r3, #2
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	fbb3 f3f1 	udiv	r3, r3, r1
 800cbc8:	4413      	add	r3, r2
 800cbca:	4619      	mov	r1, r3
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f7ff fcc9 	bl	800c564 <move_window>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cbd6:	7ffb      	ldrb	r3, [r7, #31]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d14c      	bne.n	800cc76 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	009a      	lsls	r2, r3, #2
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbe6:	330a      	adds	r3, #10
 800cbe8:	881b      	ldrh	r3, [r3, #0]
 800cbea:	fbb2 f1f3 	udiv	r1, r2, r3
 800cbee:	fb03 f301 	mul.w	r3, r3, r1
 800cbf2:	1ad3      	subs	r3, r2, r3
 800cbf4:	68fa      	ldr	r2, [r7, #12]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	3303      	adds	r3, #3
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	061a      	lsls	r2, r3, #24
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	3302      	adds	r3, #2
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	041b      	lsls	r3, r3, #16
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	69ba      	ldr	r2, [r7, #24]
 800cc0e:	3201      	adds	r2, #1
 800cc10:	7812      	ldrb	r2, [r2, #0]
 800cc12:	0212      	lsls	r2, r2, #8
 800cc14:	4313      	orrs	r3, r2
 800cc16:	69ba      	ldr	r2, [r7, #24]
 800cc18:	7812      	ldrb	r2, [r2, #0]
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	4313      	orrs	r3, r2
 800cc24:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	b2da      	uxtb	r2, r3
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	701a      	strb	r2, [r3, #0]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	0a1b      	lsrs	r3, r3, #8
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	b2d2      	uxtb	r2, r2
 800cc3c:	701a      	strb	r2, [r3, #0]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	0c1a      	lsrs	r2, r3, #16
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	3302      	adds	r3, #2
 800cc46:	b2d2      	uxtb	r2, r2
 800cc48:	701a      	strb	r2, [r3, #0]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	0e1a      	lsrs	r2, r3, #24
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	3303      	adds	r3, #3
 800cc52:	b2d2      	uxtb	r2, r2
 800cc54:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc5c:	3304      	adds	r3, #4
 800cc5e:	2201      	movs	r2, #1
 800cc60:	701a      	strb	r2, [r3, #0]
			break;
 800cc62:	e009      	b.n	800cc78 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 800cc64:	2302      	movs	r3, #2
 800cc66:	77fb      	strb	r3, [r7, #31]
 800cc68:	e006      	b.n	800cc78 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800cc6a:	bf00      	nop
 800cc6c:	e004      	b.n	800cc78 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800cc6e:	bf00      	nop
 800cc70:	e002      	b.n	800cc78 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800cc72:	bf00      	nop
 800cc74:	e000      	b.n	800cc78 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800cc76:	bf00      	nop
		}
	}

	return res;
 800cc78:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3720      	adds	r7, #32
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b084      	sub	sp, #16
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d907      	bls.n	800cca2 <remove_chain+0x20>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc98:	3314      	adds	r3, #20
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d302      	bcc.n	800cca8 <remove_chain+0x26>
		res = FR_INT_ERR;
 800cca2:	2302      	movs	r3, #2
 800cca4:	73fb      	strb	r3, [r7, #15]
 800cca6:	e04f      	b.n	800cd48 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800ccac:	e040      	b.n	800cd30 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800ccae:	6839      	ldr	r1, [r7, #0]
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7ff fd81 	bl	800c7b8 <get_fat>
 800ccb6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d041      	beq.n	800cd42 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d102      	bne.n	800ccca <remove_chain+0x48>
 800ccc4:	2302      	movs	r3, #2
 800ccc6:	73fb      	strb	r3, [r7, #15]
 800ccc8:	e03e      	b.n	800cd48 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccd0:	d102      	bne.n	800ccd8 <remove_chain+0x56>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	73fb      	strb	r3, [r7, #15]
 800ccd6:	e037      	b.n	800cd48 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800ccd8:	2200      	movs	r2, #0
 800ccda:	6839      	ldr	r1, [r7, #0]
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7ff fe70 	bl	800c9c2 <put_fat>
 800cce2:	4603      	mov	r3, r0
 800cce4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d12c      	bne.n	800cd46 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccf2:	3310      	adds	r3, #16
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccfa:	d017      	beq.n	800cd2c <remove_chain+0xaa>
				fs->free_clust++;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd02:	3310      	adds	r3, #16
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	1c5a      	adds	r2, r3, #1
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd0e:	3310      	adds	r3, #16
 800cd10:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd18:	3305      	adds	r3, #5
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	f043 0301 	orr.w	r3, r3, #1
 800cd20:	b2da      	uxtb	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd28:	3305      	adds	r3, #5
 800cd2a:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd36:	3314      	adds	r3, #20
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d3b6      	bcc.n	800ccae <remove_chain+0x2c>
 800cd40:	e002      	b.n	800cd48 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 800cd42:	bf00      	nop
 800cd44:	e000      	b.n	800cd48 <remove_chain+0xc6>
			if (res != FR_OK) break;
 800cd46:	bf00      	nop
		}
	}

	return res;
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b086      	sub	sp, #24
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d113      	bne.n	800cd8a <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd68:	330c      	adds	r3, #12
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d007      	beq.n	800cd84 <create_chain+0x32>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd7a:	3314      	adds	r3, #20
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	693a      	ldr	r2, [r7, #16]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d31e      	bcc.n	800cdc2 <create_chain+0x70>
 800cd84:	2301      	movs	r3, #1
 800cd86:	613b      	str	r3, [r7, #16]
 800cd88:	e01b      	b.n	800cdc2 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800cd8a:	6839      	ldr	r1, [r7, #0]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7ff fd13 	bl	800c7b8 <get_fat>
 800cd92:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d801      	bhi.n	800cd9e <create_chain+0x4c>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e086      	b.n	800ceac <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda4:	d101      	bne.n	800cdaa <create_chain+0x58>
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	e080      	b.n	800ceac <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdb0:	3314      	adds	r3, #20
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d201      	bcs.n	800cdbe <create_chain+0x6c>
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	e076      	b.n	800ceac <create_chain+0x15a>
		scl = clst;
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdd2:	3314      	adds	r3, #20
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	697a      	ldr	r2, [r7, #20]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d307      	bcc.n	800cdec <create_chain+0x9a>
			ncl = 2;
 800cddc:	2302      	movs	r3, #2
 800cdde:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800cde0:	697a      	ldr	r2, [r7, #20]
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d901      	bls.n	800cdec <create_chain+0x9a>
 800cde8:	2300      	movs	r3, #0
 800cdea:	e05f      	b.n	800ceac <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800cdec:	6979      	ldr	r1, [r7, #20]
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7ff fce2 	bl	800c7b8 <get_fat>
 800cdf4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00e      	beq.n	800ce1a <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce02:	d002      	beq.n	800ce0a <create_chain+0xb8>
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d101      	bne.n	800ce0e <create_chain+0xbc>
			return cs;
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	e04e      	b.n	800ceac <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 800ce0e:	697a      	ldr	r2, [r7, #20]
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d1d7      	bne.n	800cdc6 <create_chain+0x74>
 800ce16:	2300      	movs	r3, #0
 800ce18:	e048      	b.n	800ceac <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800ce1a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800ce1c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800ce20:	6979      	ldr	r1, [r7, #20]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7ff fdcd 	bl	800c9c2 <put_fat>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d109      	bne.n	800ce46 <create_chain+0xf4>
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d006      	beq.n	800ce46 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800ce38:	697a      	ldr	r2, [r7, #20]
 800ce3a:	6839      	ldr	r1, [r7, #0]
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f7ff fdc0 	bl	800c9c2 <put_fat>
 800ce42:	4603      	mov	r3, r0
 800ce44:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800ce46:	7bfb      	ldrb	r3, [r7, #15]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d126      	bne.n	800ce9a <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce52:	330c      	adds	r3, #12
 800ce54:	697a      	ldr	r2, [r7, #20]
 800ce56:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce5e:	3310      	adds	r3, #16
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce66:	d020      	beq.n	800ceaa <create_chain+0x158>
			fs->free_clust--;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce6e:	3310      	adds	r3, #16
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	1e5a      	subs	r2, r3, #1
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce7a:	3310      	adds	r3, #16
 800ce7c:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce84:	3305      	adds	r3, #5
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	f043 0301 	orr.w	r3, r3, #1
 800ce8c:	b2da      	uxtb	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce94:	3305      	adds	r3, #5
 800ce96:	701a      	strb	r2, [r3, #0]
 800ce98:	e007      	b.n	800ceaa <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800ce9a:	7bfb      	ldrb	r3, [r7, #15]
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d102      	bne.n	800cea6 <create_chain+0x154>
 800cea0:	f04f 33ff 	mov.w	r3, #4294967295
 800cea4:	e000      	b.n	800cea8 <create_chain+0x156>
 800cea6:	2301      	movs	r3, #1
 800cea8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800ceaa:	697b      	ldr	r3, [r7, #20]
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3718      	adds	r7, #24
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b087      	sub	sp, #28
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cec4:	3304      	adds	r3, #4
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	3304      	adds	r3, #4
 800ceca:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ced8:	330a      	adds	r3, #10
 800ceda:	881b      	ldrh	r3, [r3, #0]
 800cedc:	461a      	mov	r2, r3
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	fbb3 f2f2 	udiv	r2, r3, r2
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cef0:	3302      	adds	r3, #2
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cef8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	1d1a      	adds	r2, r3, #4
 800cefe:	613a      	str	r2, [r7, #16]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d101      	bne.n	800cf0e <clmt_clust+0x5a>
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	e010      	b.n	800cf30 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 800cf0e:	697a      	ldr	r2, [r7, #20]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d307      	bcc.n	800cf26 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	1ad3      	subs	r3, r2, r3
 800cf1c:	617b      	str	r3, [r7, #20]
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	3304      	adds	r3, #4
 800cf22:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf24:	e7e9      	b.n	800cefa <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 800cf26:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	681a      	ldr	r2, [r3, #0]
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	4413      	add	r3, r2
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	371c      	adds	r7, #28
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bc80      	pop	{r7}
 800cf38:	4770      	bx	lr

0800cf3a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b086      	sub	sp, #24
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf4e:	3306      	adds	r3, #6
 800cf50:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf58:	3308      	adds	r3, #8
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d00a      	beq.n	800cf7a <dir_sdi+0x40>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf70:	3314      	adds	r3, #20
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	697a      	ldr	r2, [r7, #20]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d301      	bcc.n	800cf7e <dir_sdi+0x44>
		return FR_INT_ERR;
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	e0b4      	b.n	800d0e8 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d111      	bne.n	800cfa8 <dir_sdi+0x6e>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	2b03      	cmp	r3, #3
 800cf94:	d108      	bne.n	800cfa8 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d117      	bne.n	800cfde <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfba:	3308      	adds	r3, #8
 800cfbc:	881b      	ldrh	r3, [r3, #0]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d301      	bcc.n	800cfca <dir_sdi+0x90>
			return FR_INT_ERR;
 800cfc6:	2302      	movs	r3, #2
 800cfc8:	e08e      	b.n	800d0e8 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	613b      	str	r3, [r7, #16]
 800cfdc:	e046      	b.n	800d06c <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfea:	330a      	adds	r3, #10
 800cfec:	881b      	ldrh	r3, [r3, #0]
 800cfee:	095b      	lsrs	r3, r3, #5
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	461a      	mov	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d000:	3302      	adds	r3, #2
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	fb03 f302 	mul.w	r3, r3, r2
 800d008:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800d00a:	e022      	b.n	800d052 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	6979      	ldr	r1, [r7, #20]
 800d016:	4618      	mov	r0, r3
 800d018:	f7ff fbce 	bl	800c7b8 <get_fat>
 800d01c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d024:	d101      	bne.n	800d02a <dir_sdi+0xf0>
 800d026:	2301      	movs	r3, #1
 800d028:	e05e      	b.n	800d0e8 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d90a      	bls.n	800d046 <dir_sdi+0x10c>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d03c:	3314      	adds	r3, #20
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	697a      	ldr	r2, [r7, #20]
 800d042:	429a      	cmp	r2, r3
 800d044:	d301      	bcc.n	800d04a <dir_sdi+0x110>
				return FR_INT_ERR;
 800d046:	2302      	movs	r3, #2
 800d048:	e04e      	b.n	800d0e8 <dir_sdi+0x1ae>
			idx -= ic;
 800d04a:	683a      	ldr	r2, [r7, #0]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	1ad3      	subs	r3, r2, r3
 800d050:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800d052:	683a      	ldr	r2, [r7, #0]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	429a      	cmp	r2, r3
 800d058:	d2d8      	bcs.n	800d00c <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	6979      	ldr	r1, [r7, #20]
 800d064:	4618      	mov	r0, r3
 800d066:	f7ff fb80 	bl	800c76a <clust2sect>
 800d06a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d072:	330c      	adds	r3, #12
 800d074:	697a      	ldr	r2, [r7, #20]
 800d076:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d101      	bne.n	800d082 <dir_sdi+0x148>
 800d07e:	2302      	movs	r3, #2
 800d080:	e032      	b.n	800d0e8 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d08e:	330a      	adds	r3, #10
 800d090:	881b      	ldrh	r3, [r3, #0]
 800d092:	095b      	lsrs	r3, r3, #5
 800d094:	b29b      	uxth	r3, r3
 800d096:	461a      	mov	r2, r3
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	441a      	add	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0a8:	3310      	adds	r3, #16
 800d0aa:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0c2:	330a      	adds	r3, #10
 800d0c4:	881b      	ldrh	r3, [r3, #0]
 800d0c6:	095b      	lsrs	r3, r3, #5
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0d2:	fb02 f201 	mul.w	r2, r2, r1
 800d0d6:	1a9b      	subs	r3, r3, r2
 800d0d8:	015b      	lsls	r3, r3, #5
 800d0da:	18c2      	adds	r2, r0, r3
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0e2:	3314      	adds	r3, #20
 800d0e4:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800d0e6:	2300      	movs	r3, #0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3718      	adds	r7, #24
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d0f0:	b590      	push	{r4, r7, lr}
 800d0f2:	b087      	sub	sp, #28
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d100:	3306      	adds	r3, #6
 800d102:	881b      	ldrh	r3, [r3, #0]
 800d104:	3301      	adds	r3, #1
 800d106:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d006      	beq.n	800d11e <dir_next+0x2e>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d116:	3310      	adds	r3, #16
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d101      	bne.n	800d122 <dir_next+0x32>
		return FR_NO_FILE;
 800d11e:	2304      	movs	r3, #4
 800d120:	e144      	b.n	800d3ac <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d12e:	330a      	adds	r3, #10
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	095b      	lsrs	r3, r3, #5
 800d134:	b29b      	uxth	r3, r3
 800d136:	461a      	mov	r2, r3
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d13e:	fb02 f201 	mul.w	r2, r2, r1
 800d142:	1a9b      	subs	r3, r3, r2
 800d144:	2b00      	cmp	r3, #0
 800d146:	f040 810c 	bne.w	800d362 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d150:	3310      	adds	r3, #16
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	1c5a      	adds	r2, r3, #1
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d15c:	3310      	adds	r3, #16
 800d15e:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d166:	330c      	adds	r3, #12
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d10e      	bne.n	800d18c <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d17a:	3308      	adds	r3, #8
 800d17c:	881b      	ldrh	r3, [r3, #0]
 800d17e:	461a      	mov	r2, r3
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	4293      	cmp	r3, r2
 800d184:	f0c0 80ed 	bcc.w	800d362 <dir_next+0x272>
				return FR_NO_FILE;
 800d188:	2304      	movs	r3, #4
 800d18a:	e10f      	b.n	800d3ac <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d198:	330a      	adds	r3, #10
 800d19a:	881b      	ldrh	r3, [r3, #0]
 800d19c:	095b      	lsrs	r3, r3, #5
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1b4:	3302      	adds	r3, #2
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	4013      	ands	r3, r2
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f040 80d0 	bne.w	800d362 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1d0:	330c      	adds	r3, #12
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	4610      	mov	r0, r2
 800d1d8:	f7ff faee 	bl	800c7b8 <get_fat>
 800d1dc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d801      	bhi.n	800d1e8 <dir_next+0xf8>
 800d1e4:	2302      	movs	r3, #2
 800d1e6:	e0e1      	b.n	800d3ac <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ee:	d101      	bne.n	800d1f4 <dir_next+0x104>
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e0db      	b.n	800d3ac <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d200:	3314      	adds	r3, #20
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	697a      	ldr	r2, [r7, #20]
 800d206:	429a      	cmp	r2, r3
 800d208:	f0c0 8097 	bcc.w	800d33a <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d101      	bne.n	800d216 <dir_next+0x126>
 800d212:	2304      	movs	r3, #4
 800d214:	e0ca      	b.n	800d3ac <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d224:	330c      	adds	r3, #12
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4619      	mov	r1, r3
 800d22a:	4610      	mov	r0, r2
 800d22c:	f7ff fd91 	bl	800cd52 <create_chain>
 800d230:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <dir_next+0x14c>
 800d238:	2307      	movs	r3, #7
 800d23a:	e0b7      	b.n	800d3ac <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d101      	bne.n	800d246 <dir_next+0x156>
 800d242:	2302      	movs	r3, #2
 800d244:	e0b2      	b.n	800d3ac <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d24c:	d101      	bne.n	800d252 <dir_next+0x162>
 800d24e:	2301      	movs	r3, #1
 800d250:	e0ac      	b.n	800d3ac <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7ff f928 	bl	800c4b0 <sync_window>
 800d260:	4603      	mov	r3, r0
 800d262:	2b00      	cmp	r3, #0
 800d264:	d001      	beq.n	800d26a <dir_next+0x17a>
 800d266:	2301      	movs	r3, #1
 800d268:	e0a0      	b.n	800d3ac <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4618      	mov	r0, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d280:	330a      	adds	r3, #10
 800d282:	881b      	ldrh	r3, [r3, #0]
 800d284:	461a      	mov	r2, r3
 800d286:	2100      	movs	r1, #0
 800d288:	f7fe fef4 	bl	800c074 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d29a:	681c      	ldr	r4, [r3, #0]
 800d29c:	6979      	ldr	r1, [r7, #20]
 800d29e:	4610      	mov	r0, r2
 800d2a0:	f7ff fa63 	bl	800c76a <clust2sect>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800d2aa:	330c      	adds	r3, #12
 800d2ac:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	613b      	str	r3, [r7, #16]
 800d2b2:	e024      	b.n	800d2fe <dir_next+0x20e>
						dp->fs->wflag = 1;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2c0:	3304      	adds	r3, #4
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7ff f8ee 	bl	800c4b0 <sync_window>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d001      	beq.n	800d2de <dir_next+0x1ee>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e066      	b.n	800d3ac <dir_next+0x2bc>
						dp->fs->winsect++;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800d2ea:	330c      	adds	r3, #12
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	1c59      	adds	r1, r3, #1
 800d2f0:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800d2f4:	330c      	adds	r3, #12
 800d2f6:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	613b      	str	r3, [r7, #16]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d30a:	3302      	adds	r3, #2
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	461a      	mov	r2, r3
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	4293      	cmp	r3, r2
 800d314:	d3ce      	bcc.n	800d2b4 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d322:	330c      	adds	r3, #12
 800d324:	6819      	ldr	r1, [r3, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	693a      	ldr	r2, [r7, #16]
 800d330:	1a8a      	subs	r2, r1, r2
 800d332:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d336:	330c      	adds	r3, #12
 800d338:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d340:	330c      	adds	r3, #12
 800d342:	697a      	ldr	r2, [r7, #20]
 800d344:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6979      	ldr	r1, [r7, #20]
 800d350:	4618      	mov	r0, r3
 800d352:	f7ff fa0a 	bl	800c76a <clust2sect>
 800d356:	4602      	mov	r2, r0
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d35e:	3310      	adds	r3, #16
 800d360:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	b29a      	uxth	r2, r3
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d36c:	3306      	adds	r3, #6
 800d36e:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4618      	mov	r0, r3
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d386:	330a      	adds	r3, #10
 800d388:	881b      	ldrh	r3, [r3, #0]
 800d38a:	095b      	lsrs	r3, r3, #5
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	461a      	mov	r2, r3
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	fbb3 f1f2 	udiv	r1, r3, r2
 800d396:	fb02 f201 	mul.w	r2, r2, r1
 800d39a:	1a9b      	subs	r3, r3, r2
 800d39c:	015b      	lsls	r3, r3, #5
 800d39e:	18c2      	adds	r2, r0, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3a6:	3314      	adds	r3, #20
 800d3a8:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	371c      	adds	r7, #28
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd90      	pop	{r4, r7, pc}

0800d3b4 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800d3be:	2100      	movs	r1, #0
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f7ff fdba 	bl	800cf3a <dir_sdi>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d138      	bne.n	800d442 <dir_alloc+0x8e>
		n = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3e2:	3310      	adds	r3, #16
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	4610      	mov	r0, r2
 800d3ea:	f7ff f8bb 	bl	800c564 <move_window>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800d3f2:	7bfb      	ldrb	r3, [r7, #15]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d123      	bne.n	800d440 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3fe:	3314      	adds	r3, #20
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	2be5      	cmp	r3, #229	; 0xe5
 800d406:	d007      	beq.n	800d418 <dir_alloc+0x64>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d40e:	3314      	adds	r3, #20
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d107      	bne.n	800d428 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	3301      	adds	r3, #1
 800d41c:	60bb      	str	r3, [r7, #8]
 800d41e:	68ba      	ldr	r2, [r7, #8]
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	429a      	cmp	r2, r3
 800d424:	d102      	bne.n	800d42c <dir_alloc+0x78>
 800d426:	e00c      	b.n	800d442 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d428:	2300      	movs	r3, #0
 800d42a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800d42c:	2101      	movs	r1, #1
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f7ff fe5e 	bl	800d0f0 <dir_next>
 800d434:	4603      	mov	r3, r0
 800d436:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800d438:	7bfb      	ldrb	r3, [r7, #15]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d0ca      	beq.n	800d3d4 <dir_alloc+0x20>
 800d43e:	e000      	b.n	800d442 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 800d440:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d442:	7bfb      	ldrb	r3, [r7, #15]
 800d444:	2b04      	cmp	r3, #4
 800d446:	d101      	bne.n	800d44c <dir_alloc+0x98>
 800d448:	2307      	movs	r3, #7
 800d44a:	73fb      	strb	r3, [r7, #15]
	return res;
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800d456:	b480      	push	{r7}
 800d458:	b085      	sub	sp, #20
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
 800d45e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	331b      	adds	r3, #27
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	021b      	lsls	r3, r3, #8
 800d468:	b21a      	sxth	r2, r3
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	331a      	adds	r3, #26
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	b21b      	sxth	r3, r3
 800d472:	4313      	orrs	r3, r2
 800d474:	b21b      	sxth	r3, r3
 800d476:	b29b      	uxth	r3, r3
 800d478:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	2b03      	cmp	r3, #3
 800d484:	d10f      	bne.n	800d4a6 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	3315      	adds	r3, #21
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	021b      	lsls	r3, r3, #8
 800d48e:	b21a      	sxth	r2, r3
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	3314      	adds	r3, #20
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	b21b      	sxth	r3, r3
 800d498:	4313      	orrs	r3, r2
 800d49a:	b21b      	sxth	r3, r3
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	041b      	lsls	r3, r3, #16
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	60fb      	str	r3, [r7, #12]

	return cl;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3714      	adds	r7, #20
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bc80      	pop	{r7}
 800d4b0:	4770      	bx	lr

0800d4b2 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800d4b2:	b480      	push	{r7}
 800d4b4:	b083      	sub	sp, #12
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
 800d4ba:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	331a      	adds	r3, #26
 800d4c0:	683a      	ldr	r2, [r7, #0]
 800d4c2:	b2d2      	uxtb	r2, r2
 800d4c4:	701a      	strb	r2, [r3, #0]
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	b29b      	uxth	r3, r3
 800d4ca:	0a1b      	lsrs	r3, r3, #8
 800d4cc:	b29a      	uxth	r2, r3
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	331b      	adds	r3, #27
 800d4d2:	b2d2      	uxtb	r2, r2
 800d4d4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	0c1a      	lsrs	r2, r3, #16
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	3314      	adds	r3, #20
 800d4de:	b2d2      	uxtb	r2, r2
 800d4e0:	701a      	strb	r2, [r3, #0]
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	0c1b      	lsrs	r3, r3, #16
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	0a1b      	lsrs	r3, r3, #8
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	3315      	adds	r3, #21
 800d4f0:	b2d2      	uxtb	r2, r2
 800d4f2:	701a      	strb	r2, [r3, #0]
}
 800d4f4:	bf00      	nop
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bc80      	pop	{r7}
 800d4fc:	4770      	bx	lr
	...

0800d500 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b086      	sub	sp, #24
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d512:	1e5a      	subs	r2, r3, #1
 800d514:	4613      	mov	r3, r2
 800d516:	005b      	lsls	r3, r3, #1
 800d518:	4413      	add	r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	4413      	add	r3, r2
 800d51e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800d520:	2300      	movs	r3, #0
 800d522:	613b      	str	r3, [r7, #16]
 800d524:	2301      	movs	r3, #1
 800d526:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800d528:	4a2b      	ldr	r2, [pc, #172]	; (800d5d8 <cmp_lfn+0xd8>)
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	4413      	add	r3, r2
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	3301      	adds	r3, #1
 800d532:	683a      	ldr	r2, [r7, #0]
 800d534:	4413      	add	r3, r2
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	021b      	lsls	r3, r3, #8
 800d53a:	b21a      	sxth	r2, r3
 800d53c:	4926      	ldr	r1, [pc, #152]	; (800d5d8 <cmp_lfn+0xd8>)
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	440b      	add	r3, r1
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	4619      	mov	r1, r3
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	440b      	add	r3, r1
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	b21b      	sxth	r3, r3
 800d54e:	4313      	orrs	r3, r2
 800d550:	b21b      	sxth	r3, r3
 800d552:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800d554:	89fb      	ldrh	r3, [r7, #14]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d019      	beq.n	800d58e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800d55a:	89bb      	ldrh	r3, [r7, #12]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f002 ff17 	bl	8010390 <ff_wtoupper>
 800d562:	4603      	mov	r3, r0
 800d564:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	2bfe      	cmp	r3, #254	; 0xfe
 800d56a:	d80e      	bhi.n	800d58a <cmp_lfn+0x8a>
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	1c5a      	adds	r2, r3, #1
 800d570:	617a      	str	r2, [r7, #20]
 800d572:	005b      	lsls	r3, r3, #1
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	4413      	add	r3, r2
 800d578:	881b      	ldrh	r3, [r3, #0]
 800d57a:	4618      	mov	r0, r3
 800d57c:	f002 ff08 	bl	8010390 <ff_wtoupper>
 800d580:	4603      	mov	r3, r0
 800d582:	461a      	mov	r2, r3
 800d584:	89fb      	ldrh	r3, [r7, #14]
 800d586:	4293      	cmp	r3, r2
 800d588:	d008      	beq.n	800d59c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800d58a:	2300      	movs	r3, #0
 800d58c:	e01f      	b.n	800d5ce <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800d58e:	89bb      	ldrh	r3, [r7, #12]
 800d590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d594:	4293      	cmp	r3, r2
 800d596:	d001      	beq.n	800d59c <cmp_lfn+0x9c>
 800d598:	2300      	movs	r3, #0
 800d59a:	e018      	b.n	800d5ce <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	613b      	str	r3, [r7, #16]
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	2b0c      	cmp	r3, #12
 800d5a6:	d9bf      	bls.n	800d528 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00b      	beq.n	800d5cc <cmp_lfn+0xcc>
 800d5b4:	89fb      	ldrh	r3, [r7, #14]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d008      	beq.n	800d5cc <cmp_lfn+0xcc>
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	005b      	lsls	r3, r3, #1
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	881b      	ldrh	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d001      	beq.n	800d5cc <cmp_lfn+0xcc>
		return 0;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	e000      	b.n	800d5ce <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800d5cc:	2301      	movs	r3, #1
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3718      	adds	r7, #24
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	080114e4 	.word	0x080114e4

0800d5dc <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b087      	sub	sp, #28
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5ee:	1e5a      	subs	r2, r3, #1
 800d5f0:	4613      	mov	r3, r2
 800d5f2:	005b      	lsls	r3, r3, #1
 800d5f4:	4413      	add	r3, r2
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	4413      	add	r3, r2
 800d5fa:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	613b      	str	r3, [r7, #16]
 800d600:	2301      	movs	r3, #1
 800d602:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 800d604:	4a26      	ldr	r2, [pc, #152]	; (800d6a0 <pick_lfn+0xc4>)
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	4413      	add	r3, r2
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	3301      	adds	r3, #1
 800d60e:	683a      	ldr	r2, [r7, #0]
 800d610:	4413      	add	r3, r2
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	021b      	lsls	r3, r3, #8
 800d616:	b21a      	sxth	r2, r3
 800d618:	4921      	ldr	r1, [pc, #132]	; (800d6a0 <pick_lfn+0xc4>)
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	440b      	add	r3, r1
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	4619      	mov	r1, r3
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	440b      	add	r3, r1
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	b21b      	sxth	r3, r3
 800d62a:	4313      	orrs	r3, r2
 800d62c:	b21b      	sxth	r3, r3
 800d62e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800d630:	89fb      	ldrh	r3, [r7, #14]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00f      	beq.n	800d656 <pick_lfn+0x7a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	2bfe      	cmp	r3, #254	; 0xfe
 800d63a:	d901      	bls.n	800d640 <pick_lfn+0x64>
 800d63c:	2300      	movs	r3, #0
 800d63e:	e029      	b.n	800d694 <pick_lfn+0xb8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d640:	89bb      	ldrh	r3, [r7, #12]
 800d642:	81fb      	strh	r3, [r7, #14]
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	1c5a      	adds	r2, r3, #1
 800d648:	617a      	str	r2, [r7, #20]
 800d64a:	005b      	lsls	r3, r3, #1
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	4413      	add	r3, r2
 800d650:	89fa      	ldrh	r2, [r7, #14]
 800d652:	801a      	strh	r2, [r3, #0]
 800d654:	e006      	b.n	800d664 <pick_lfn+0x88>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d656:	89bb      	ldrh	r3, [r7, #12]
 800d658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d001      	beq.n	800d664 <pick_lfn+0x88>
 800d660:	2300      	movs	r3, #0
 800d662:	e017      	b.n	800d694 <pick_lfn+0xb8>
		}
	} while (++s < 13);						/* Read all character in the entry */
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	3301      	adds	r3, #1
 800d668:	613b      	str	r3, [r7, #16]
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	2b0c      	cmp	r3, #12
 800d66e:	d9c9      	bls.n	800d604 <pick_lfn+0x28>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d00a      	beq.n	800d692 <pick_lfn+0xb6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	2bfe      	cmp	r3, #254	; 0xfe
 800d680:	d901      	bls.n	800d686 <pick_lfn+0xaa>
 800d682:	2300      	movs	r3, #0
 800d684:	e006      	b.n	800d694 <pick_lfn+0xb8>
		lfnbuf[i] = 0;
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	005b      	lsls	r3, r3, #1
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	4413      	add	r3, r2
 800d68e:	2200      	movs	r2, #0
 800d690:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 800d692:	2301      	movs	r3, #1
}
 800d694:	4618      	mov	r0, r3
 800d696:	371c      	adds	r7, #28
 800d698:	46bd      	mov	sp, r7
 800d69a:	bc80      	pop	{r7}
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	080114e4 	.word	0x080114e4

0800d6a4 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b089      	sub	sp, #36	; 0x24
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	71fb      	strb	r3, [r7, #7]
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	330d      	adds	r3, #13
 800d6be:	79ba      	ldrb	r2, [r7, #6]
 800d6c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	330b      	adds	r3, #11
 800d6c6:	220f      	movs	r2, #15
 800d6c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	330c      	adds	r3, #12
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	331a      	adds	r3, #26
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	701a      	strb	r2, [r3, #0]
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	331b      	adds	r3, #27
 800d6de:	2200      	movs	r2, #0
 800d6e0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
 800d6e4:	1e5a      	subs	r2, r3, #1
 800d6e6:	4613      	mov	r3, r2
 800d6e8:	005b      	lsls	r3, r3, #1
 800d6ea:	4413      	add	r3, r2
 800d6ec:	009b      	lsls	r3, r3, #2
 800d6ee:	4413      	add	r3, r2
 800d6f0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	82fb      	strh	r3, [r7, #22]
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800d6fa:	8afb      	ldrh	r3, [r7, #22]
 800d6fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d700:	4293      	cmp	r3, r2
 800d702:	d007      	beq.n	800d714 <fit_lfn+0x70>
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	1c5a      	adds	r2, r3, #1
 800d708:	61fa      	str	r2, [r7, #28]
 800d70a:	005b      	lsls	r3, r3, #1
 800d70c:	68fa      	ldr	r2, [r7, #12]
 800d70e:	4413      	add	r3, r2
 800d710:	881b      	ldrh	r3, [r3, #0]
 800d712:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800d714:	4a1c      	ldr	r2, [pc, #112]	; (800d788 <fit_lfn+0xe4>)
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	4413      	add	r3, r2
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	461a      	mov	r2, r3
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	4413      	add	r3, r2
 800d722:	8afa      	ldrh	r2, [r7, #22]
 800d724:	b2d2      	uxtb	r2, r2
 800d726:	701a      	strb	r2, [r3, #0]
 800d728:	8afb      	ldrh	r3, [r7, #22]
 800d72a:	0a1b      	lsrs	r3, r3, #8
 800d72c:	b299      	uxth	r1, r3
 800d72e:	4a16      	ldr	r2, [pc, #88]	; (800d788 <fit_lfn+0xe4>)
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	4413      	add	r3, r2
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	3301      	adds	r3, #1
 800d738:	68ba      	ldr	r2, [r7, #8]
 800d73a:	4413      	add	r3, r2
 800d73c:	b2ca      	uxtb	r2, r1
 800d73e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800d740:	8afb      	ldrh	r3, [r7, #22]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d102      	bne.n	800d74c <fit_lfn+0xa8>
 800d746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d74a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	3301      	adds	r3, #1
 800d750:	61bb      	str	r3, [r7, #24]
 800d752:	69bb      	ldr	r3, [r7, #24]
 800d754:	2b0c      	cmp	r3, #12
 800d756:	d9d0      	bls.n	800d6fa <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800d758:	8afb      	ldrh	r3, [r7, #22]
 800d75a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d75e:	4293      	cmp	r3, r2
 800d760:	d006      	beq.n	800d770 <fit_lfn+0xcc>
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	005b      	lsls	r3, r3, #1
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	4413      	add	r3, r2
 800d76a:	881b      	ldrh	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d103      	bne.n	800d778 <fit_lfn+0xd4>
 800d770:	79fb      	ldrb	r3, [r7, #7]
 800d772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d776:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	79fa      	ldrb	r2, [r7, #7]
 800d77c:	701a      	strb	r2, [r3, #0]
}
 800d77e:	bf00      	nop
 800d780:	3724      	adds	r7, #36	; 0x24
 800d782:	46bd      	mov	sp, r7
 800d784:	bc80      	pop	{r7}
 800d786:	4770      	bx	lr
 800d788:	080114e4 	.word	0x080114e4

0800d78c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b08c      	sub	sp, #48	; 0x30
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
 800d798:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d79a:	220b      	movs	r2, #11
 800d79c:	68b9      	ldr	r1, [r7, #8]
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f7fe fc4a 	bl	800c038 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	2b05      	cmp	r3, #5
 800d7a8:	d92b      	bls.n	800d802 <gen_numname+0x76>
		sr = seq;
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d7ae:	e022      	b.n	800d7f6 <gen_numname+0x6a>
			wc = *lfn++;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	1c9a      	adds	r2, r3, #2
 800d7b4:	607a      	str	r2, [r7, #4]
 800d7b6:	881b      	ldrh	r3, [r3, #0]
 800d7b8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7be:	e017      	b.n	800d7f0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	005a      	lsls	r2, r3, #1
 800d7c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7c6:	f003 0301 	and.w	r3, r3, #1
 800d7ca:	4413      	add	r3, r2
 800d7cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d7ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7d0:	085b      	lsrs	r3, r3, #1
 800d7d2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d005      	beq.n	800d7ea <gen_numname+0x5e>
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d7e4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d7e8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f2:	2b0f      	cmp	r3, #15
 800d7f4:	d9e4      	bls.n	800d7c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	881b      	ldrh	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d1d8      	bne.n	800d7b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d802:	2307      	movs	r3, #7
 800d804:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	f003 030f 	and.w	r3, r3, #15
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	3330      	adds	r3, #48	; 0x30
 800d812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d81a:	2b39      	cmp	r3, #57	; 0x39
 800d81c:	d904      	bls.n	800d828 <gen_numname+0x9c>
 800d81e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d822:	3307      	adds	r3, #7
 800d824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82a:	1e5a      	subs	r2, r3, #1
 800d82c:	62ba      	str	r2, [r7, #40]	; 0x28
 800d82e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d832:	4413      	add	r3, r2
 800d834:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d838:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	091b      	lsrs	r3, r3, #4
 800d840:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1de      	bne.n	800d806 <gen_numname+0x7a>
	ns[i] = '~';
 800d848:	f107 0214 	add.w	r2, r7, #20
 800d84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84e:	4413      	add	r3, r2
 800d850:	227e      	movs	r2, #126	; 0x7e
 800d852:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d854:	2300      	movs	r3, #0
 800d856:	627b      	str	r3, [r7, #36]	; 0x24
 800d858:	e002      	b.n	800d860 <gen_numname+0xd4>
 800d85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85c:	3301      	adds	r3, #1
 800d85e:	627b      	str	r3, [r7, #36]	; 0x24
 800d860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d864:	429a      	cmp	r2, r3
 800d866:	d205      	bcs.n	800d874 <gen_numname+0xe8>
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86c:	4413      	add	r3, r2
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	2b20      	cmp	r3, #32
 800d872:	d1f2      	bne.n	800d85a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d876:	2b07      	cmp	r3, #7
 800d878:	d808      	bhi.n	800d88c <gen_numname+0x100>
 800d87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87c:	1c5a      	adds	r2, r3, #1
 800d87e:	62ba      	str	r2, [r7, #40]	; 0x28
 800d880:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d884:	4413      	add	r3, r2
 800d886:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d88a:	e000      	b.n	800d88e <gen_numname+0x102>
 800d88c:	2120      	movs	r1, #32
 800d88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d890:	1c5a      	adds	r2, r3, #1
 800d892:	627a      	str	r2, [r7, #36]	; 0x24
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	4413      	add	r3, r2
 800d898:	460a      	mov	r2, r1
 800d89a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	2b07      	cmp	r3, #7
 800d8a0:	d9e8      	bls.n	800d874 <gen_numname+0xe8>
}
 800d8a2:	bf00      	nop
 800d8a4:	bf00      	nop
 800d8a6:	3730      	adds	r7, #48	; 0x30
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d8b8:	230b      	movs	r3, #11
 800d8ba:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800d8bc:	7bfb      	ldrb	r3, [r7, #15]
 800d8be:	b2da      	uxtb	r2, r3
 800d8c0:	0852      	lsrs	r2, r2, #1
 800d8c2:	01db      	lsls	r3, r3, #7
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	b2da      	uxtb	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	1c59      	adds	r1, r3, #1
 800d8cc:	6079      	str	r1, [r7, #4]
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	73fb      	strb	r3, [r7, #15]
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	60bb      	str	r3, [r7, #8]
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d1ed      	bne.n	800d8bc <sum_sfn+0x10>
	return sum;
 800d8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3714      	adds	r7, #20
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bc80      	pop	{r7}
 800d8ea:	4770      	bx	lr

0800d8ec <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b086      	sub	sp, #24
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7ff fb1f 	bl	800cf3a <dir_sdi>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d900:	7dfb      	ldrb	r3, [r7, #23]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d001      	beq.n	800d90a <dir_find+0x1e>
 800d906:	7dfb      	ldrb	r3, [r7, #23]
 800d908:	e0c1      	b.n	800da8e <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800d90a:	23ff      	movs	r3, #255	; 0xff
 800d90c:	753b      	strb	r3, [r7, #20]
 800d90e:	7d3b      	ldrb	r3, [r7, #20]
 800d910:	757b      	strb	r3, [r7, #21]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d918:	3304      	adds	r3, #4
 800d91a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d91e:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d92e:	3310      	adds	r3, #16
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4619      	mov	r1, r3
 800d934:	4610      	mov	r0, r2
 800d936:	f7fe fe15 	bl	800c564 <move_window>
 800d93a:	4603      	mov	r3, r0
 800d93c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d93e:	7dfb      	ldrb	r3, [r7, #23]
 800d940:	2b00      	cmp	r3, #0
 800d942:	f040 809e 	bne.w	800da82 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d94c:	3314      	adds	r3, #20
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d958:	7dbb      	ldrb	r3, [r7, #22]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d102      	bne.n	800d964 <dir_find+0x78>
 800d95e:	2304      	movs	r3, #4
 800d960:	75fb      	strb	r3, [r7, #23]
 800d962:	e093      	b.n	800da8c <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	330b      	adds	r3, #11
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d96e:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d970:	7dbb      	ldrb	r3, [r7, #22]
 800d972:	2be5      	cmp	r3, #229	; 0xe5
 800d974:	d007      	beq.n	800d986 <dir_find+0x9a>
 800d976:	7bfb      	ldrb	r3, [r7, #15]
 800d978:	f003 0308 	and.w	r3, r3, #8
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00c      	beq.n	800d99a <dir_find+0xae>
 800d980:	7bfb      	ldrb	r3, [r7, #15]
 800d982:	2b0f      	cmp	r3, #15
 800d984:	d009      	beq.n	800d99a <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800d986:	23ff      	movs	r3, #255	; 0xff
 800d988:	757b      	strb	r3, [r7, #21]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d990:	3304      	adds	r3, #4
 800d992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d996:	801a      	strh	r2, [r3, #0]
 800d998:	e068      	b.n	800da6c <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d99a:	7bfb      	ldrb	r3, [r7, #15]
 800d99c:	2b0f      	cmp	r3, #15
 800d99e:	d139      	bne.n	800da14 <dir_find+0x128>
				if (dp->lfn) {
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d05f      	beq.n	800da6c <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d9ac:	7dbb      	ldrb	r3, [r7, #22]
 800d9ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d012      	beq.n	800d9dc <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	7b5b      	ldrb	r3, [r3, #13]
 800d9ba:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800d9bc:	7dbb      	ldrb	r3, [r7, #22]
 800d9be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9c2:	75bb      	strb	r3, [r7, #22]
 800d9c4:	7dbb      	ldrb	r3, [r7, #22]
 800d9c6:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9ce:	3306      	adds	r3, #6
 800d9d0:	881a      	ldrh	r2, [r3, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d9d8:	3304      	adds	r3, #4
 800d9da:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800d9dc:	7dba      	ldrb	r2, [r7, #22]
 800d9de:	7d7b      	ldrb	r3, [r7, #21]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d114      	bne.n	800da0e <dir_find+0x122>
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	330d      	adds	r3, #13
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	7d3a      	ldrb	r2, [r7, #20]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d10e      	bne.n	800da0e <dir_find+0x122>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	6939      	ldr	r1, [r7, #16]
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7ff fd80 	bl	800d500 <cmp_lfn>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d003      	beq.n	800da0e <dir_find+0x122>
 800da06:	7d7b      	ldrb	r3, [r7, #21]
 800da08:	3b01      	subs	r3, #1
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	e000      	b.n	800da10 <dir_find+0x124>
 800da0e:	23ff      	movs	r3, #255	; 0xff
 800da10:	757b      	strb	r3, [r7, #21]
 800da12:	e02b      	b.n	800da6c <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800da14:	7d7b      	ldrb	r3, [r7, #21]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d107      	bne.n	800da2a <dir_find+0x13e>
 800da1a:	6938      	ldr	r0, [r7, #16]
 800da1c:	f7ff ff46 	bl	800d8ac <sum_sfn>
 800da20:	4603      	mov	r3, r0
 800da22:	461a      	mov	r2, r3
 800da24:	7d3b      	ldrb	r3, [r7, #20]
 800da26:	4293      	cmp	r3, r2
 800da28:	d02d      	beq.n	800da86 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da30:	3318      	adds	r3, #24
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	330b      	adds	r3, #11
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	f003 0301 	and.w	r3, r3, #1
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d10c      	bne.n	800da5a <dir_find+0x16e>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da46:	3318      	adds	r3, #24
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	220b      	movs	r2, #11
 800da4c:	4619      	mov	r1, r3
 800da4e:	6938      	ldr	r0, [r7, #16]
 800da50:	f7fe fb2a 	bl	800c0a8 <mem_cmp>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d017      	beq.n	800da8a <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800da5a:	23ff      	movs	r3, #255	; 0xff
 800da5c:	757b      	strb	r3, [r7, #21]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800da64:	3304      	adds	r3, #4
 800da66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da6a:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800da6c:	2100      	movs	r1, #0
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7ff fb3e 	bl	800d0f0 <dir_next>
 800da74:	4603      	mov	r3, r0
 800da76:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800da78:	7dfb      	ldrb	r3, [r7, #23]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	f43f af50 	beq.w	800d920 <dir_find+0x34>
 800da80:	e004      	b.n	800da8c <dir_find+0x1a0>
		if (res != FR_OK) break;
 800da82:	bf00      	nop
 800da84:	e002      	b.n	800da8c <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800da86:	bf00      	nop
 800da88:	e000      	b.n	800da8c <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800da8a:	bf00      	nop

	return res;
 800da8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3718      	adds	r7, #24
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b086      	sub	sp, #24
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 800daa0:	23ff      	movs	r3, #255	; 0xff
 800daa2:	757b      	strb	r3, [r7, #21]
 800daa4:	23ff      	movs	r3, #255	; 0xff
 800daa6:	753b      	strb	r3, [r7, #20]
#endif

	res = FR_NO_FILE;
 800daa8:	2304      	movs	r3, #4
 800daaa:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 800daac:	e08f      	b.n	800dbce <dir_read+0x138>
		res = move_window(dp->fs, dp->sect);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dabc:	3310      	adds	r3, #16
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4619      	mov	r1, r3
 800dac2:	4610      	mov	r0, r2
 800dac4:	f7fe fd4e 	bl	800c564 <move_window>
 800dac8:	4603      	mov	r3, r0
 800daca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dacc:	7dfb      	ldrb	r3, [r7, #23]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	f040 8086 	bne.w	800dbe0 <dir_read+0x14a>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dada:	3314      	adds	r3, #20
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dae6:	7dbb      	ldrb	r3, [r7, #22]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d102      	bne.n	800daf2 <dir_read+0x5c>
 800daec:	2304      	movs	r3, #4
 800daee:	75fb      	strb	r3, [r7, #23]
 800daf0:	e07b      	b.n	800dbea <dir_read+0x154>
		a = dir[DIR_Attr] & AM_MASK;
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	330b      	adds	r3, #11
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dafc:	73fb      	strb	r3, [r7, #15]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800dafe:	7dbb      	ldrb	r3, [r7, #22]
 800db00:	2be5      	cmp	r3, #229	; 0xe5
 800db02:	d00e      	beq.n	800db22 <dir_read+0x8c>
 800db04:	7dbb      	ldrb	r3, [r7, #22]
 800db06:	2b2e      	cmp	r3, #46	; 0x2e
 800db08:	d00b      	beq.n	800db22 <dir_read+0x8c>
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
 800db0c:	f023 0320 	bic.w	r3, r3, #32
 800db10:	2b08      	cmp	r3, #8
 800db12:	bf0c      	ite	eq
 800db14:	2301      	moveq	r3, #1
 800db16:	2300      	movne	r3, #0
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	461a      	mov	r2, r3
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	4293      	cmp	r3, r2
 800db20:	d002      	beq.n	800db28 <dir_read+0x92>
			ord = 0xFF;
 800db22:	23ff      	movs	r3, #255	; 0xff
 800db24:	757b      	strb	r3, [r7, #21]
 800db26:	e049      	b.n	800dbbc <dir_read+0x126>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800db28:	7bfb      	ldrb	r3, [r7, #15]
 800db2a:	2b0f      	cmp	r3, #15
 800db2c:	d133      	bne.n	800db96 <dir_read+0x100>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 800db2e:	7dbb      	ldrb	r3, [r7, #22]
 800db30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db34:	2b00      	cmp	r3, #0
 800db36:	d012      	beq.n	800db5e <dir_read+0xc8>
					sum = dir[LDIR_Chksum];
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	7b5b      	ldrb	r3, [r3, #13]
 800db3c:	753b      	strb	r3, [r7, #20]
					c &= ~LLEF; ord = c;
 800db3e:	7dbb      	ldrb	r3, [r7, #22]
 800db40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db44:	75bb      	strb	r3, [r7, #22]
 800db46:	7dbb      	ldrb	r3, [r7, #22]
 800db48:	757b      	strb	r3, [r7, #21]
					dp->lfn_idx = dp->index;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db50:	3306      	adds	r3, #6
 800db52:	881a      	ldrh	r2, [r3, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800db5a:	3304      	adds	r3, #4
 800db5c:	801a      	strh	r2, [r3, #0]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800db5e:	7dba      	ldrb	r2, [r7, #22]
 800db60:	7d7b      	ldrb	r3, [r7, #21]
 800db62:	429a      	cmp	r2, r3
 800db64:	d114      	bne.n	800db90 <dir_read+0xfa>
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	330d      	adds	r3, #13
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	7d3a      	ldrb	r2, [r7, #20]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d10e      	bne.n	800db90 <dir_read+0xfa>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	6939      	ldr	r1, [r7, #16]
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7ff fd2d 	bl	800d5dc <pick_lfn>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d003      	beq.n	800db90 <dir_read+0xfa>
 800db88:	7d7b      	ldrb	r3, [r7, #21]
 800db8a:	3b01      	subs	r3, #1
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	e000      	b.n	800db92 <dir_read+0xfc>
 800db90:	23ff      	movs	r3, #255	; 0xff
 800db92:	757b      	strb	r3, [r7, #21]
 800db94:	e012      	b.n	800dbbc <dir_read+0x126>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 800db96:	7d7b      	ldrb	r3, [r7, #21]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d107      	bne.n	800dbac <dir_read+0x116>
 800db9c:	6938      	ldr	r0, [r7, #16]
 800db9e:	f7ff fe85 	bl	800d8ac <sum_sfn>
 800dba2:	4603      	mov	r3, r0
 800dba4:	461a      	mov	r2, r3
 800dba6:	7d3b      	ldrb	r3, [r7, #20]
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d01b      	beq.n	800dbe4 <dir_read+0x14e>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dbb2:	3304      	adds	r3, #4
 800dbb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbb8:	801a      	strh	r2, [r3, #0]
				break;
 800dbba:	e013      	b.n	800dbe4 <dir_read+0x14e>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 800dbbc:	2100      	movs	r1, #0
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7ff fa96 	bl	800d0f0 <dir_next>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dbc8:	7dfb      	ldrb	r3, [r7, #23]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d10c      	bne.n	800dbe8 <dir_read+0x152>
	while (dp->sect) {
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbd4:	3310      	adds	r3, #16
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f47f af68 	bne.w	800daae <dir_read+0x18>
 800dbde:	e004      	b.n	800dbea <dir_read+0x154>
		if (res != FR_OK) break;
 800dbe0:	bf00      	nop
 800dbe2:	e002      	b.n	800dbea <dir_read+0x154>
				break;
 800dbe4:	bf00      	nop
 800dbe6:	e000      	b.n	800dbea <dir_read+0x154>
		if (res != FR_OK) break;
 800dbe8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800dbea:	7dfb      	ldrb	r3, [r7, #23]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d005      	beq.n	800dbfc <dir_read+0x166>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbf6:	3310      	adds	r3, #16
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	601a      	str	r2, [r3, #0]

	return res;
 800dbfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3718      	adds	r7, #24
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
	...

0800dc08 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b08c      	sub	sp, #48	; 0x30
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc16:	3318      	adds	r3, #24
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	623b      	str	r3, [r7, #32]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800dc26:	f107 030c 	add.w	r3, r7, #12
 800dc2a:	220c      	movs	r2, #12
 800dc2c:	6a39      	ldr	r1, [r7, #32]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fe fa02 	bl	800c038 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800dc34:	7dfb      	ldrb	r3, [r7, #23]
 800dc36:	f003 0301 	and.w	r3, r3, #1
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d039      	beq.n	800dcb2 <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800dc3e:	6a3b      	ldr	r3, [r7, #32]
 800dc40:	330b      	adds	r3, #11
 800dc42:	2200      	movs	r2, #0
 800dc44:	701a      	strb	r2, [r3, #0]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800dc50:	2301      	movs	r3, #1
 800dc52:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc54:	e013      	b.n	800dc7e <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800dc56:	f107 010c 	add.w	r1, r7, #12
 800dc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5c:	69fa      	ldr	r2, [r7, #28]
 800dc5e:	6a38      	ldr	r0, [r7, #32]
 800dc60:	f7ff fd94 	bl	800d78c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f7ff fe41 	bl	800d8ec <dir_find>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800dc70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d106      	bne.n	800dc86 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc80:	2b63      	cmp	r3, #99	; 0x63
 800dc82:	d9e8      	bls.n	800dc56 <dir_register+0x4e>
 800dc84:	e000      	b.n	800dc88 <dir_register+0x80>
			if (res != FR_OK) break;
 800dc86:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800dc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8a:	2b64      	cmp	r3, #100	; 0x64
 800dc8c:	d101      	bne.n	800dc92 <dir_register+0x8a>
 800dc8e:	2307      	movs	r3, #7
 800dc90:	e0e3      	b.n	800de5a <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800dc92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc96:	2b04      	cmp	r3, #4
 800dc98:	d002      	beq.n	800dca0 <dir_register+0x98>
 800dc9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc9e:	e0dc      	b.n	800de5a <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800dca0:	6a3b      	ldr	r3, [r7, #32]
 800dca2:	330b      	adds	r3, #11
 800dca4:	7dfa      	ldrb	r2, [r7, #23]
 800dca6:	701a      	strb	r2, [r3, #0]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dcae:	69fa      	ldr	r2, [r7, #28]
 800dcb0:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800dcb2:	7dfb      	ldrb	r3, [r7, #23]
 800dcb4:	f003 0302 	and.w	r3, r3, #2
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d014      	beq.n	800dce6 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcc0:	e002      	b.n	800dcc8 <dir_register+0xc0>
 800dcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcca:	005b      	lsls	r3, r3, #1
 800dccc:	69fa      	ldr	r2, [r7, #28]
 800dcce:	4413      	add	r3, r2
 800dcd0:	881b      	ldrh	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1f5      	bne.n	800dcc2 <dir_register+0xba>
		nent = (n + 25) / 13;
 800dcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd8:	3319      	adds	r3, #25
 800dcda:	4a62      	ldr	r2, [pc, #392]	; (800de64 <dir_register+0x25c>)
 800dcdc:	fba2 2303 	umull	r2, r3, r2, r3
 800dce0:	089b      	lsrs	r3, r3, #2
 800dce2:	627b      	str	r3, [r7, #36]	; 0x24
 800dce4:	e001      	b.n	800dcea <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800dce6:	2301      	movs	r3, #1
 800dce8:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800dcea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f7ff fb61 	bl	800d3b4 <dir_alloc>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800dcf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d160      	bne.n	800ddc2 <dir_register+0x1ba>
 800dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd02:	3b01      	subs	r3, #1
 800dd04:	627b      	str	r3, [r7, #36]	; 0x24
 800dd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d05a      	beq.n	800ddc2 <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd12:	3306      	adds	r3, #6
 800dd14:	881b      	ldrh	r3, [r3, #0]
 800dd16:	461a      	mov	r2, r3
 800dd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1a:	1ad3      	subs	r3, r2, r3
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7ff f90b 	bl	800cf3a <dir_sdi>
 800dd24:	4603      	mov	r3, r0
 800dd26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dd2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d147      	bne.n	800ddc2 <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd38:	3318      	adds	r3, #24
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7ff fdb5 	bl	800d8ac <sum_sfn>
 800dd42:	4603      	mov	r3, r0
 800dd44:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd54:	3310      	adds	r3, #16
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4619      	mov	r1, r3
 800dd5a:	4610      	mov	r0, r2
 800dd5c:	f7fe fc02 	bl	800c564 <move_window>
 800dd60:	4603      	mov	r3, r0
 800dd62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800dd66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d128      	bne.n	800ddc0 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dd74:	6818      	ldr	r0, [r3, #0]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd7c:	3314      	adds	r3, #20
 800dd7e:	6819      	ldr	r1, [r3, #0]
 800dd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd82:	b2da      	uxtb	r2, r3
 800dd84:	7efb      	ldrb	r3, [r7, #27]
 800dd86:	f7ff fc8d 	bl	800d6a4 <fit_lfn>
				dp->fs->wflag = 1;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd96:	3304      	adds	r3, #4
 800dd98:	2201      	movs	r2, #1
 800dd9a:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7ff f9a6 	bl	800d0f0 <dir_next>
 800dda4:	4603      	mov	r3, r0
 800dda6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ddaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d107      	bne.n	800ddc2 <dir_register+0x1ba>
 800ddb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	627b      	str	r3, [r7, #36]	; 0x24
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d1c3      	bne.n	800dd46 <dir_register+0x13e>
 800ddbe:	e000      	b.n	800ddc2 <dir_register+0x1ba>
				if (res != FR_OK) break;
 800ddc0:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800ddc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d145      	bne.n	800de56 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddd8:	3310      	adds	r3, #16
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4619      	mov	r1, r3
 800ddde:	4610      	mov	r0, r2
 800dde0:	f7fe fbc0 	bl	800c564 <move_window>
 800dde4:	4603      	mov	r3, r0
 800dde6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ddea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d131      	bne.n	800de56 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddf8:	3314      	adds	r3, #20
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2220      	movs	r2, #32
 800ddfe:	2100      	movs	r1, #0
 800de00:	4618      	mov	r0, r3
 800de02:	f7fe f937 	bl	800c074 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de0c:	3314      	adds	r3, #20
 800de0e:	6818      	ldr	r0, [r3, #0]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de16:	3318      	adds	r3, #24
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	220b      	movs	r2, #11
 800de1c:	4619      	mov	r1, r3
 800de1e:	f7fe f90b 	bl	800c038 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de28:	3318      	adds	r3, #24
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	330b      	adds	r3, #11
 800de2e:	781a      	ldrb	r2, [r3, #0]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de36:	3314      	adds	r3, #20
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	330c      	adds	r3, #12
 800de3c:	f002 0218 	and.w	r2, r2, #24
 800de40:	b2d2      	uxtb	r2, r2
 800de42:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de50:	3304      	adds	r3, #4
 800de52:	2201      	movs	r2, #1
 800de54:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800de56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3730      	adds	r7, #48	; 0x30
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	4ec4ec4f 	.word	0x4ec4ec4f

0800de68 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b088      	sub	sp, #32
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	3309      	adds	r3, #9
 800de76:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de7e:	3310      	adds	r3, #16
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d072      	beq.n	800df6c <get_fileinfo+0x104>
		dir = dp->dir;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de8c:	3314      	adds	r3, #20
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	60fb      	str	r3, [r7, #12]
		i = 0;
 800de92:	2300      	movs	r3, #0
 800de94:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 800de96:	e032      	b.n	800defe <get_fileinfo+0x96>
			c = (TCHAR)dir[i++];
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	1c5a      	adds	r2, r3, #1
 800de9c:	61fa      	str	r2, [r7, #28]
 800de9e:	68fa      	ldr	r2, [r7, #12]
 800dea0:	4413      	add	r3, r2
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	75fb      	strb	r3, [r7, #23]
			if (c == ' ') continue;				/* Skip padding spaces */
 800dea6:	7dfb      	ldrb	r3, [r7, #23]
 800dea8:	2b20      	cmp	r3, #32
 800deaa:	d100      	bne.n	800deae <get_fileinfo+0x46>
 800deac:	e027      	b.n	800defe <get_fileinfo+0x96>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800deae:	7dfb      	ldrb	r3, [r7, #23]
 800deb0:	2b05      	cmp	r3, #5
 800deb2:	d101      	bne.n	800deb8 <get_fileinfo+0x50>
 800deb4:	23e5      	movs	r3, #229	; 0xe5
 800deb6:	75fb      	strb	r3, [r7, #23]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	2b09      	cmp	r3, #9
 800debc:	d104      	bne.n	800dec8 <get_fileinfo+0x60>
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	1c5a      	adds	r2, r3, #1
 800dec2:	61ba      	str	r2, [r7, #24]
 800dec4:	222e      	movs	r2, #46	; 0x2e
 800dec6:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 800dec8:	7dfb      	ldrb	r3, [r7, #23]
 800deca:	2b40      	cmp	r3, #64	; 0x40
 800decc:	d912      	bls.n	800def4 <get_fileinfo+0x8c>
 800dece:	7dfb      	ldrb	r3, [r7, #23]
 800ded0:	2b5a      	cmp	r3, #90	; 0x5a
 800ded2:	d80f      	bhi.n	800def4 <get_fileinfo+0x8c>
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	330c      	adds	r3, #12
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	461a      	mov	r2, r3
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	2b08      	cmp	r3, #8
 800dee0:	d901      	bls.n	800dee6 <get_fileinfo+0x7e>
 800dee2:	2310      	movs	r3, #16
 800dee4:	e000      	b.n	800dee8 <get_fileinfo+0x80>
 800dee6:	2308      	movs	r3, #8
 800dee8:	4013      	ands	r3, r2
 800deea:	2b00      	cmp	r3, #0
 800deec:	d002      	beq.n	800def4 <get_fileinfo+0x8c>
				c += 0x20;			/* To lower */
 800deee:	7dfb      	ldrb	r3, [r7, #23]
 800def0:	3320      	adds	r3, #32
 800def2:	75fb      	strb	r3, [r7, #23]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	1c5a      	adds	r2, r3, #1
 800def8:	61ba      	str	r2, [r7, #24]
 800defa:	7dfa      	ldrb	r2, [r7, #23]
 800defc:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800defe:	69fb      	ldr	r3, [r7, #28]
 800df00:	2b0a      	cmp	r3, #10
 800df02:	d9c9      	bls.n	800de98 <get_fileinfo+0x30>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	7ada      	ldrb	r2, [r3, #11]
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	331f      	adds	r3, #31
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	061a      	lsls	r2, r3, #24
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	331e      	adds	r3, #30
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	041b      	lsls	r3, r3, #16
 800df1c:	4313      	orrs	r3, r2
 800df1e:	68fa      	ldr	r2, [r7, #12]
 800df20:	321d      	adds	r2, #29
 800df22:	7812      	ldrb	r2, [r2, #0]
 800df24:	0212      	lsls	r2, r2, #8
 800df26:	4313      	orrs	r3, r2
 800df28:	68fa      	ldr	r2, [r7, #12]
 800df2a:	321c      	adds	r2, #28
 800df2c:	7812      	ldrb	r2, [r2, #0]
 800df2e:	431a      	orrs	r2, r3
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	3319      	adds	r3, #25
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	021b      	lsls	r3, r3, #8
 800df3c:	b21a      	sxth	r2, r3
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	3318      	adds	r3, #24
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	b21b      	sxth	r3, r3
 800df46:	4313      	orrs	r3, r2
 800df48:	b21b      	sxth	r3, r3
 800df4a:	b29a      	uxth	r2, r3
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	3317      	adds	r3, #23
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	021b      	lsls	r3, r3, #8
 800df58:	b21a      	sxth	r2, r3
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	3316      	adds	r3, #22
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	b21b      	sxth	r3, r3
 800df62:	4313      	orrs	r3, r2
 800df64:	b21b      	sxth	r3, r3
 800df66:	b29a      	uxth	r2, r3
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800df6c:	69bb      	ldr	r3, [r7, #24]
 800df6e:	2200      	movs	r2, #0
 800df70:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	699b      	ldr	r3, [r3, #24]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d049      	beq.n	800e00e <get_fileinfo+0x1a6>
		i = 0; p = fno->lfname;
 800df7a:	2300      	movs	r3, #0
 800df7c:	61fb      	str	r3, [r7, #28]
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	699b      	ldr	r3, [r3, #24]
 800df82:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df8a:	3310      	adds	r3, #16
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d038      	beq.n	800e004 <get_fileinfo+0x19c>
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	69db      	ldr	r3, [r3, #28]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d034      	beq.n	800e004 <get_fileinfo+0x19c>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dfa0:	3304      	adds	r3, #4
 800dfa2:	881b      	ldrh	r3, [r3, #0]
 800dfa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d02b      	beq.n	800e004 <get_fileinfo+0x19c>
			lfn = dp->lfn;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800dfb6:	e01d      	b.n	800dff4 <get_fileinfo+0x18c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800dfb8:	897b      	ldrh	r3, [r7, #10]
 800dfba:	2100      	movs	r1, #0
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f002 f9ad 	bl	801031c <ff_convert>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	817b      	strh	r3, [r7, #10]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 800dfc6:	897b      	ldrh	r3, [r7, #10]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d102      	bne.n	800dfd2 <get_fileinfo+0x16a>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	61fb      	str	r3, [r7, #28]
 800dfd0:	e018      	b.n	800e004 <get_fileinfo+0x19c>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					p[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	69db      	ldr	r3, [r3, #28]
 800dfd6:	3b01      	subs	r3, #1
 800dfd8:	69fa      	ldr	r2, [r7, #28]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d302      	bcc.n	800dfe4 <get_fileinfo+0x17c>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	61fb      	str	r3, [r7, #28]
 800dfe2:	e00f      	b.n	800e004 <get_fileinfo+0x19c>
				p[i++] = (TCHAR)w;
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	1c5a      	adds	r2, r3, #1
 800dfe8:	61fa      	str	r2, [r7, #28]
 800dfea:	69ba      	ldr	r2, [r7, #24]
 800dfec:	4413      	add	r3, r2
 800dfee:	897a      	ldrh	r2, [r7, #10]
 800dff0:	b2d2      	uxtb	r2, r2
 800dff2:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	1c9a      	adds	r2, r3, #2
 800dff8:	613a      	str	r2, [r7, #16]
 800dffa:	881b      	ldrh	r3, [r3, #0]
 800dffc:	817b      	strh	r3, [r7, #10]
 800dffe:	897b      	ldrh	r3, [r7, #10]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d1d9      	bne.n	800dfb8 <get_fileinfo+0x150>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 800e004:	69ba      	ldr	r2, [r7, #24]
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	4413      	add	r3, r2
 800e00a:	2200      	movs	r2, #0
 800e00c:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 800e00e:	bf00      	nop
 800e010:	3720      	adds	r7, #32
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
	...

0800e018 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b08a      	sub	sp, #40	; 0x28
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	613b      	str	r3, [r7, #16]
 800e028:	e002      	b.n	800e030 <create_name+0x18>
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	3301      	adds	r3, #1
 800e02e:	613b      	str	r3, [r7, #16]
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	2b2f      	cmp	r3, #47	; 0x2f
 800e036:	d0f8      	beq.n	800e02a <create_name+0x12>
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	2b5c      	cmp	r3, #92	; 0x5c
 800e03e:	d0f4      	beq.n	800e02a <create_name+0x12>
	lfn = dp->lfn;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800e04a:	2300      	movs	r3, #0
 800e04c:	617b      	str	r3, [r7, #20]
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	1c5a      	adds	r2, r3, #1
 800e056:	61ba      	str	r2, [r7, #24]
 800e058:	693a      	ldr	r2, [r7, #16]
 800e05a:	4413      	add	r3, r2
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800e060:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e062:	2b1f      	cmp	r3, #31
 800e064:	d92f      	bls.n	800e0c6 <create_name+0xae>
 800e066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e068:	2b2f      	cmp	r3, #47	; 0x2f
 800e06a:	d02c      	beq.n	800e0c6 <create_name+0xae>
 800e06c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e06e:	2b5c      	cmp	r3, #92	; 0x5c
 800e070:	d029      	beq.n	800e0c6 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	2bfe      	cmp	r3, #254	; 0xfe
 800e076:	d901      	bls.n	800e07c <create_name+0x64>
			return FR_INVALID_NAME;
 800e078:	2306      	movs	r3, #6
 800e07a:	e18b      	b.n	800e394 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e07c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e084:	2101      	movs	r1, #1
 800e086:	4618      	mov	r0, r3
 800e088:	f002 f948 	bl	801031c <ff_convert>
 800e08c:	4603      	mov	r3, r0
 800e08e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e090:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e092:	2b00      	cmp	r3, #0
 800e094:	d101      	bne.n	800e09a <create_name+0x82>
 800e096:	2306      	movs	r3, #6
 800e098:	e17c      	b.n	800e394 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800e09a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e09c:	2b7f      	cmp	r3, #127	; 0x7f
 800e09e:	d809      	bhi.n	800e0b4 <create_name+0x9c>
 800e0a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	488f      	ldr	r0, [pc, #572]	; (800e2e4 <create_name+0x2cc>)
 800e0a6:	f7fe f825 	bl	800c0f4 <chk_chr>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d001      	beq.n	800e0b4 <create_name+0x9c>
			return FR_INVALID_NAME;
 800e0b0:	2306      	movs	r3, #6
 800e0b2:	e16f      	b.n	800e394 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	1c5a      	adds	r2, r3, #1
 800e0b8:	617a      	str	r2, [r7, #20]
 800e0ba:	005b      	lsls	r3, r3, #1
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	4413      	add	r3, r2
 800e0c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e0c2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e0c4:	e7c5      	b.n	800e052 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e0c6:	693a      	ldr	r2, [r7, #16]
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	441a      	add	r2, r3
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800e0d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0d2:	2b1f      	cmp	r3, #31
 800e0d4:	d801      	bhi.n	800e0da <create_name+0xc2>
 800e0d6:	2304      	movs	r3, #4
 800e0d8:	e000      	b.n	800e0dc <create_name+0xc4>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800e0e0:	e011      	b.n	800e106 <create_name+0xee>
		w = lfn[di - 1];
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	005b      	lsls	r3, r3, #1
 800e0ec:	68fa      	ldr	r2, [r7, #12]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	881b      	ldrh	r3, [r3, #0]
 800e0f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e0f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0f6:	2b20      	cmp	r3, #32
 800e0f8:	d002      	beq.n	800e100 <create_name+0xe8>
 800e0fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0fc:	2b2e      	cmp	r3, #46	; 0x2e
 800e0fe:	d106      	bne.n	800e10e <create_name+0xf6>
		di--;
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	3b01      	subs	r3, #1
 800e104:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1ea      	bne.n	800e0e2 <create_name+0xca>
 800e10c:	e000      	b.n	800e110 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800e10e:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d101      	bne.n	800e11a <create_name+0x102>
 800e116:	2306      	movs	r3, #6
 800e118:	e13c      	b.n	800e394 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	4413      	add	r3, r2
 800e122:	2200      	movs	r2, #0
 800e124:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e12c:	3318      	adds	r3, #24
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	220b      	movs	r2, #11
 800e132:	2120      	movs	r1, #32
 800e134:	4618      	mov	r0, r3
 800e136:	f7fd ff9d 	bl	800c074 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e13a:	2300      	movs	r3, #0
 800e13c:	61bb      	str	r3, [r7, #24]
 800e13e:	e002      	b.n	800e146 <create_name+0x12e>
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	3301      	adds	r3, #1
 800e144:	61bb      	str	r3, [r7, #24]
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	005b      	lsls	r3, r3, #1
 800e14a:	68fa      	ldr	r2, [r7, #12]
 800e14c:	4413      	add	r3, r2
 800e14e:	881b      	ldrh	r3, [r3, #0]
 800e150:	2b20      	cmp	r3, #32
 800e152:	d0f5      	beq.n	800e140 <create_name+0x128>
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	4413      	add	r3, r2
 800e15c:	881b      	ldrh	r3, [r3, #0]
 800e15e:	2b2e      	cmp	r3, #46	; 0x2e
 800e160:	d0ee      	beq.n	800e140 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d009      	beq.n	800e17c <create_name+0x164>
 800e168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e16c:	f043 0303 	orr.w	r3, r3, #3
 800e170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e174:	e002      	b.n	800e17c <create_name+0x164>
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	3b01      	subs	r3, #1
 800e17a:	617b      	str	r3, [r7, #20]
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d009      	beq.n	800e196 <create_name+0x17e>
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e188:	3b01      	subs	r3, #1
 800e18a:	005b      	lsls	r3, r3, #1
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	4413      	add	r3, r2
 800e190:	881b      	ldrh	r3, [r3, #0]
 800e192:	2b2e      	cmp	r3, #46	; 0x2e
 800e194:	d1ef      	bne.n	800e176 <create_name+0x15e>

	b = i = 0; ni = 8;
 800e196:	2300      	movs	r3, #0
 800e198:	623b      	str	r3, [r7, #32]
 800e19a:	2300      	movs	r3, #0
 800e19c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e1a0:	2308      	movs	r3, #8
 800e1a2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e1a4:	69bb      	ldr	r3, [r7, #24]
 800e1a6:	1c5a      	adds	r2, r3, #1
 800e1a8:	61ba      	str	r2, [r7, #24]
 800e1aa:	005b      	lsls	r3, r3, #1
 800e1ac:	68fa      	ldr	r2, [r7, #12]
 800e1ae:	4413      	add	r3, r2
 800e1b0:	881b      	ldrh	r3, [r3, #0]
 800e1b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e1b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	f000 8092 	beq.w	800e2e0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e1bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1be:	2b20      	cmp	r3, #32
 800e1c0:	d006      	beq.n	800e1d0 <create_name+0x1b8>
 800e1c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1c4:	2b2e      	cmp	r3, #46	; 0x2e
 800e1c6:	d10a      	bne.n	800e1de <create_name+0x1c6>
 800e1c8:	69ba      	ldr	r2, [r7, #24]
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d006      	beq.n	800e1de <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800e1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1d4:	f043 0303 	orr.w	r3, r3, #3
 800e1d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1dc:	e07f      	b.n	800e2de <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e1de:	6a3a      	ldr	r2, [r7, #32]
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d203      	bcs.n	800e1ee <create_name+0x1d6>
 800e1e6:	69ba      	ldr	r2, [r7, #24]
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d123      	bne.n	800e236 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	2b0b      	cmp	r3, #11
 800e1f2:	d106      	bne.n	800e202 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800e1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1f8:	f043 0303 	orr.w	r3, r3, #3
 800e1fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e200:	e077      	b.n	800e2f2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e202:	69ba      	ldr	r2, [r7, #24]
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	429a      	cmp	r2, r3
 800e208:	d005      	beq.n	800e216 <create_name+0x1fe>
 800e20a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e20e:	f043 0303 	orr.w	r3, r3, #3
 800e212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e216:	69ba      	ldr	r2, [r7, #24]
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d868      	bhi.n	800e2f0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	61bb      	str	r3, [r7, #24]
 800e222:	2308      	movs	r3, #8
 800e224:	623b      	str	r3, [r7, #32]
 800e226:	230b      	movs	r3, #11
 800e228:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e22a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e234:	e053      	b.n	800e2de <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e238:	2b7f      	cmp	r3, #127	; 0x7f
 800e23a:	d914      	bls.n	800e266 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e23c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e23e:	2100      	movs	r1, #0
 800e240:	4618      	mov	r0, r3
 800e242:	f002 f86b 	bl	801031c <ff_convert>
 800e246:	4603      	mov	r3, r0
 800e248:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e24a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d004      	beq.n	800e25a <create_name+0x242>
 800e250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e252:	3b80      	subs	r3, #128	; 0x80
 800e254:	4a24      	ldr	r2, [pc, #144]	; (800e2e8 <create_name+0x2d0>)
 800e256:	5cd3      	ldrb	r3, [r2, r3]
 800e258:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e25a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e25e:	f043 0302 	orr.w	r3, r3, #2
 800e262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d007      	beq.n	800e27c <create_name+0x264>
 800e26c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e26e:	4619      	mov	r1, r3
 800e270:	481e      	ldr	r0, [pc, #120]	; (800e2ec <create_name+0x2d4>)
 800e272:	f7fd ff3f 	bl	800c0f4 <chk_chr>
 800e276:	4603      	mov	r3, r0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d008      	beq.n	800e28e <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e27c:	235f      	movs	r3, #95	; 0x5f
 800e27e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e284:	f043 0303 	orr.w	r3, r3, #3
 800e288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e28c:	e01b      	b.n	800e2c6 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e28e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e290:	2b40      	cmp	r3, #64	; 0x40
 800e292:	d909      	bls.n	800e2a8 <create_name+0x290>
 800e294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e296:	2b5a      	cmp	r3, #90	; 0x5a
 800e298:	d806      	bhi.n	800e2a8 <create_name+0x290>
					b |= 2;
 800e29a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e29e:	f043 0302 	orr.w	r3, r3, #2
 800e2a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e2a6:	e00e      	b.n	800e2c6 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e2a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2aa:	2b60      	cmp	r3, #96	; 0x60
 800e2ac:	d90b      	bls.n	800e2c6 <create_name+0x2ae>
 800e2ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2b0:	2b7a      	cmp	r3, #122	; 0x7a
 800e2b2:	d808      	bhi.n	800e2c6 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 800e2b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2b8:	f043 0301 	orr.w	r3, r3, #1
 800e2bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e2c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2c2:	3b20      	subs	r3, #32
 800e2c4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2cc:	3318      	adds	r3, #24
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	6a3b      	ldr	r3, [r7, #32]
 800e2d2:	1c59      	adds	r1, r3, #1
 800e2d4:	6239      	str	r1, [r7, #32]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e2da:	b2d2      	uxtb	r2, r2
 800e2dc:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800e2de:	e761      	b.n	800e1a4 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800e2e0:	bf00      	nop
 800e2e2:	e006      	b.n	800e2f2 <create_name+0x2da>
 800e2e4:	08011408 	.word	0x08011408
 800e2e8:	08011464 	.word	0x08011464
 800e2ec:	08011414 	.word	0x08011414
			if (si > di) break;			/* No extension */
 800e2f0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2f8:	3318      	adds	r3, #24
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	2be5      	cmp	r3, #229	; 0xe5
 800e300:	d106      	bne.n	800e310 <create_name+0x2f8>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e308:	3318      	adds	r3, #24
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2205      	movs	r2, #5
 800e30e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	2b08      	cmp	r3, #8
 800e314:	d104      	bne.n	800e320 <create_name+0x308>
 800e316:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800e320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e324:	f003 030c 	and.w	r3, r3, #12
 800e328:	2b0c      	cmp	r3, #12
 800e32a:	d005      	beq.n	800e338 <create_name+0x320>
 800e32c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e330:	f003 0303 	and.w	r3, r3, #3
 800e334:	2b03      	cmp	r3, #3
 800e336:	d105      	bne.n	800e344 <create_name+0x32c>
		cf |= NS_LFN;
 800e338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e33c:	f043 0302 	orr.w	r3, r3, #2
 800e340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e348:	f003 0302 	and.w	r3, r3, #2
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d117      	bne.n	800e380 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e350:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e354:	f003 0303 	and.w	r3, r3, #3
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d105      	bne.n	800e368 <create_name+0x350>
 800e35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e360:	f043 0310 	orr.w	r3, r3, #16
 800e364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e36c:	f003 030c 	and.w	r3, r3, #12
 800e370:	2b04      	cmp	r3, #4
 800e372:	d105      	bne.n	800e380 <create_name+0x368>
 800e374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e378:	f043 0308 	orr.w	r3, r3, #8
 800e37c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e386:	3318      	adds	r3, #24
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	330b      	adds	r3, #11
 800e38c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e390:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e392:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800e394:	4618      	mov	r0, r3
 800e396:	3728      	adds	r7, #40	; 0x28
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	2b2f      	cmp	r3, #47	; 0x2f
 800e3ac:	d003      	beq.n	800e3b6 <follow_path+0x1a>
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	2b5c      	cmp	r3, #92	; 0x5c
 800e3b4:	d102      	bne.n	800e3bc <follow_path+0x20>
		path++;
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3c2:	3308      	adds	r3, #8
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	2b1f      	cmp	r3, #31
 800e3ce:	d80c      	bhi.n	800e3ea <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f7fe fdb1 	bl	800cf3a <dir_sdi>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3e2:	3314      	adds	r3, #20
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	601a      	str	r2, [r3, #0]
 800e3e8:	e04c      	b.n	800e484 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e3ea:	463b      	mov	r3, r7
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7ff fe12 	bl	800e018 <create_name>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800e3f8:	7bfb      	ldrb	r3, [r7, #15]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d13d      	bne.n	800e47a <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f7ff fa74 	bl	800d8ec <dir_find>
 800e404:	4603      	mov	r3, r0
 800e406:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e40e:	3318      	adds	r3, #24
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	7adb      	ldrb	r3, [r3, #11]
 800e414:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800e416:	7bfb      	ldrb	r3, [r7, #15]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d00a      	beq.n	800e432 <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e41c:	7bfb      	ldrb	r3, [r7, #15]
 800e41e:	2b04      	cmp	r3, #4
 800e420:	d12d      	bne.n	800e47e <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e422:	7bbb      	ldrb	r3, [r7, #14]
 800e424:	f003 0304 	and.w	r3, r3, #4
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d128      	bne.n	800e47e <follow_path+0xe2>
 800e42c:	2305      	movs	r3, #5
 800e42e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800e430:	e025      	b.n	800e47e <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e432:	7bbb      	ldrb	r3, [r7, #14]
 800e434:	f003 0304 	and.w	r3, r3, #4
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d122      	bne.n	800e482 <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e442:	3314      	adds	r3, #20
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	330b      	adds	r3, #11
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	f003 0310 	and.w	r3, r3, #16
 800e452:	2b00      	cmp	r3, #0
 800e454:	d102      	bne.n	800e45c <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800e456:	2305      	movs	r3, #5
 800e458:	73fb      	strb	r3, [r7, #15]
 800e45a:	e013      	b.n	800e484 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	68b9      	ldr	r1, [r7, #8]
 800e466:	4618      	mov	r0, r3
 800e468:	f7fe fff5 	bl	800d456 <ld_clust>
 800e46c:	4602      	mov	r2, r0
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e474:	3308      	adds	r3, #8
 800e476:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e478:	e7b7      	b.n	800e3ea <follow_path+0x4e>
			if (res != FR_OK) break;
 800e47a:	bf00      	nop
 800e47c:	e002      	b.n	800e484 <follow_path+0xe8>
				break;
 800e47e:	bf00      	nop
 800e480:	e000      	b.n	800e484 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e482:	bf00      	nop
		}
	}

	return res;
 800e484:	7bfb      	ldrb	r3, [r7, #15]
}
 800e486:	4618      	mov	r0, r3
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e48e:	b480      	push	{r7}
 800e490:	b087      	sub	sp, #28
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e496:	f04f 33ff 	mov.w	r3, #4294967295
 800e49a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d031      	beq.n	800e508 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	617b      	str	r3, [r7, #20]
 800e4aa:	e002      	b.n	800e4b2 <get_ldnumber+0x24>
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	617b      	str	r3, [r7, #20]
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	2b1f      	cmp	r3, #31
 800e4b8:	d903      	bls.n	800e4c2 <get_ldnumber+0x34>
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	2b3a      	cmp	r3, #58	; 0x3a
 800e4c0:	d1f4      	bne.n	800e4ac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	2b3a      	cmp	r3, #58	; 0x3a
 800e4c8:	d11c      	bne.n	800e504 <get_ldnumber+0x76>
			tp = *path;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	1c5a      	adds	r2, r3, #1
 800e4d4:	60fa      	str	r2, [r7, #12]
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	3b30      	subs	r3, #48	; 0x30
 800e4da:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	2b09      	cmp	r3, #9
 800e4e0:	d80e      	bhi.n	800e500 <get_ldnumber+0x72>
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d10a      	bne.n	800e500 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d107      	bne.n	800e500 <get_ldnumber+0x72>
					vol = (int)i;
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	617b      	str	r3, [r7, #20]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	697a      	ldr	r2, [r7, #20]
 800e4fe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	e002      	b.n	800e50a <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e504:	2300      	movs	r3, #0
 800e506:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e508:	693b      	ldr	r3, [r7, #16]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	371c      	adds	r7, #28
 800e50e:	46bd      	mov	sp, r7
 800e510:	bc80      	pop	{r7}
 800e512:	4770      	bx	lr

0800e514 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e524:	3304      	adds	r3, #4
 800e526:	2200      	movs	r2, #0
 800e528:	701a      	strb	r2, [r3, #0]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e530:	330c      	adds	r3, #12
 800e532:	f04f 32ff 	mov.w	r2, #4294967295
 800e536:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800e538:	6839      	ldr	r1, [r7, #0]
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f7fe f812 	bl	800c564 <move_window>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d001      	beq.n	800e54a <check_fs+0x36>
		return 3;
 800e546:	2303      	movs	r3, #3
 800e548:	e04a      	b.n	800e5e0 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e550:	3301      	adds	r3, #1
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	021b      	lsls	r3, r3, #8
 800e556:	b21a      	sxth	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800e55e:	b21b      	sxth	r3, r3
 800e560:	4313      	orrs	r3, r2
 800e562:	b21b      	sxth	r3, r3
 800e564:	4a20      	ldr	r2, [pc, #128]	; (800e5e8 <check_fs+0xd4>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d001      	beq.n	800e56e <check_fs+0x5a>
		return 2;
 800e56a:	2302      	movs	r3, #2
 800e56c:	e038      	b.n	800e5e0 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	3336      	adds	r3, #54	; 0x36
 800e572:	3303      	adds	r3, #3
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	061a      	lsls	r2, r3, #24
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	3336      	adds	r3, #54	; 0x36
 800e57c:	3302      	adds	r3, #2
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	041b      	lsls	r3, r3, #16
 800e582:	4313      	orrs	r3, r2
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	3236      	adds	r2, #54	; 0x36
 800e588:	3201      	adds	r2, #1
 800e58a:	7812      	ldrb	r2, [r2, #0]
 800e58c:	0212      	lsls	r2, r2, #8
 800e58e:	4313      	orrs	r3, r2
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800e596:	4313      	orrs	r3, r2
 800e598:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e59c:	4a13      	ldr	r2, [pc, #76]	; (800e5ec <check_fs+0xd8>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d101      	bne.n	800e5a6 <check_fs+0x92>
		return 0;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	e01c      	b.n	800e5e0 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	3352      	adds	r3, #82	; 0x52
 800e5aa:	3303      	adds	r3, #3
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	061a      	lsls	r2, r3, #24
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	3352      	adds	r3, #82	; 0x52
 800e5b4:	3302      	adds	r3, #2
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	041b      	lsls	r3, r3, #16
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	3252      	adds	r2, #82	; 0x52
 800e5c0:	3201      	adds	r2, #1
 800e5c2:	7812      	ldrb	r2, [r2, #0]
 800e5c4:	0212      	lsls	r2, r2, #8
 800e5c6:	4313      	orrs	r3, r2
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800e5ce:	4313      	orrs	r3, r2
 800e5d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e5d4:	4a05      	ldr	r2, [pc, #20]	; (800e5ec <check_fs+0xd8>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d101      	bne.n	800e5de <check_fs+0xca>
		return 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	e000      	b.n	800e5e0 <check_fs+0xcc>

	return 1;
 800e5de:	2301      	movs	r3, #1
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3708      	adds	r7, #8
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	ffffaa55 	.word	0xffffaa55
 800e5ec:	00544146 	.word	0x00544146

0800e5f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b096      	sub	sp, #88	; 0x58
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2200      	movs	r2, #0
 800e602:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e604:	68b8      	ldr	r0, [r7, #8]
 800e606:	f7ff ff42 	bl	800e48e <get_ldnumber>
 800e60a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e60e:	2b00      	cmp	r3, #0
 800e610:	da01      	bge.n	800e616 <find_volume+0x26>
 800e612:	230b      	movs	r3, #11
 800e614:	e33c      	b.n	800ec90 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e616:	4ab3      	ldr	r2, [pc, #716]	; (800e8e4 <find_volume+0x2f4>)
 800e618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e61a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e61e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e622:	2b00      	cmp	r3, #0
 800e624:	d101      	bne.n	800e62a <find_volume+0x3a>
 800e626:	230c      	movs	r3, #12
 800e628:	e332      	b.n	800ec90 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e62e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d01d      	beq.n	800e678 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800e63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e642:	3301      	adds	r3, #1
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	4618      	mov	r0, r3
 800e648:	f7fd fc58 	bl	800befc <disk_status>
 800e64c:	4603      	mov	r3, r0
 800e64e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e652:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e656:	f003 0301 	and.w	r3, r3, #1
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d10c      	bne.n	800e678 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800e65e:	79fb      	ldrb	r3, [r7, #7]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d007      	beq.n	800e674 <find_volume+0x84>
 800e664:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e668:	f003 0304 	and.w	r3, r3, #4
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d001      	beq.n	800e674 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800e670:	230a      	movs	r3, #10
 800e672:	e30d      	b.n	800ec90 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 800e674:	2300      	movs	r3, #0
 800e676:	e30b      	b.n	800ec90 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e67a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e67e:	2200      	movs	r2, #0
 800e680:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e684:	b2da      	uxtb	r2, r3
 800e686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e68c:	3301      	adds	r3, #1
 800e68e:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e696:	3301      	adds	r3, #1
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fd fc48 	bl	800bf30 <disk_initialize>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800e6a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e6aa:	f003 0301 	and.w	r3, r3, #1
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d001      	beq.n	800e6b6 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e6b2:	2303      	movs	r3, #3
 800e6b4:	e2ec      	b.n	800ec90 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800e6b6:	79fb      	ldrb	r3, [r7, #7]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d007      	beq.n	800e6cc <find_volume+0xdc>
 800e6bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e6c0:	f003 0304 	and.w	r3, r3, #4
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d001      	beq.n	800e6cc <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800e6c8:	230a      	movs	r3, #10
 800e6ca:	e2e1      	b.n	800ec90 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800e6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	7818      	ldrb	r0, [r3, #0]
 800e6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6dc:	330a      	adds	r3, #10
 800e6de:	461a      	mov	r2, r3
 800e6e0:	2102      	movs	r1, #2
 800e6e2:	f7fd fc8b 	bl	800bffc <disk_ioctl>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d10f      	bne.n	800e70c <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800e6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6f2:	330a      	adds	r3, #10
 800e6f4:	881b      	ldrh	r3, [r3, #0]
 800e6f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6fa:	d307      	bcc.n	800e70c <find_volume+0x11c>
 800e6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e702:	330a      	adds	r3, #10
 800e704:	881b      	ldrh	r3, [r3, #0]
 800e706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e70a:	d901      	bls.n	800e710 <find_volume+0x120>
 800e70c:	2301      	movs	r3, #1
 800e70e:	e2bf      	b.n	800ec90 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800e710:	2300      	movs	r3, #0
 800e712:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800e714:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e716:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e718:	f7ff fefc 	bl	800e514 <check_fs>
 800e71c:	4603      	mov	r3, r0
 800e71e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800e722:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e726:	2b01      	cmp	r3, #1
 800e728:	d155      	bne.n	800e7d6 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800e72a:	2300      	movs	r3, #0
 800e72c:	643b      	str	r3, [r7, #64]	; 0x40
 800e72e:	e029      	b.n	800e784 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800e730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e734:	011b      	lsls	r3, r3, #4
 800e736:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e73a:	4413      	add	r3, r2
 800e73c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800e73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e740:	3304      	adds	r3, #4
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d012      	beq.n	800e76e <find_volume+0x17e>
 800e748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74a:	330b      	adds	r3, #11
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	061a      	lsls	r2, r3, #24
 800e750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e752:	330a      	adds	r3, #10
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	041b      	lsls	r3, r3, #16
 800e758:	4313      	orrs	r3, r2
 800e75a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e75c:	3209      	adds	r2, #9
 800e75e:	7812      	ldrb	r2, [r2, #0]
 800e760:	0212      	lsls	r2, r2, #8
 800e762:	4313      	orrs	r3, r2
 800e764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e766:	3208      	adds	r2, #8
 800e768:	7812      	ldrb	r2, [r2, #0]
 800e76a:	431a      	orrs	r2, r3
 800e76c:	e000      	b.n	800e770 <find_volume+0x180>
 800e76e:	2200      	movs	r2, #0
 800e770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e778:	440b      	add	r3, r1
 800e77a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800e77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e780:	3301      	adds	r3, #1
 800e782:	643b      	str	r3, [r7, #64]	; 0x40
 800e784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e786:	2b03      	cmp	r3, #3
 800e788:	d9d2      	bls.n	800e730 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800e78a:	2300      	movs	r3, #0
 800e78c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e78e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e790:	2b00      	cmp	r3, #0
 800e792:	d002      	beq.n	800e79a <find_volume+0x1aa>
 800e794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e796:	3b01      	subs	r3, #1
 800e798:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800e79a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e7a2:	4413      	add	r3, r2
 800e7a4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e7a8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800e7aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d005      	beq.n	800e7bc <find_volume+0x1cc>
 800e7b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e7b4:	f7ff feae 	bl	800e514 <check_fs>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	e000      	b.n	800e7be <find_volume+0x1ce>
 800e7bc:	2302      	movs	r3, #2
 800e7be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800e7c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d005      	beq.n	800e7d6 <find_volume+0x1e6>
 800e7ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	643b      	str	r3, [r7, #64]	; 0x40
 800e7d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7d2:	2b03      	cmp	r3, #3
 800e7d4:	d9e1      	bls.n	800e79a <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e7d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7da:	2b03      	cmp	r3, #3
 800e7dc:	d101      	bne.n	800e7e2 <find_volume+0x1f2>
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e256      	b.n	800ec90 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800e7e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d001      	beq.n	800e7ee <find_volume+0x1fe>
 800e7ea:	230d      	movs	r3, #13
 800e7ec:	e250      	b.n	800ec90 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f0:	7b1b      	ldrb	r3, [r3, #12]
 800e7f2:	021b      	lsls	r3, r3, #8
 800e7f4:	b21a      	sxth	r2, r3
 800e7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f8:	7adb      	ldrb	r3, [r3, #11]
 800e7fa:	b21b      	sxth	r3, r3
 800e7fc:	4313      	orrs	r3, r2
 800e7fe:	b21a      	sxth	r2, r3
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e806:	330a      	adds	r3, #10
 800e808:	881b      	ldrh	r3, [r3, #0]
 800e80a:	b21b      	sxth	r3, r3
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d001      	beq.n	800e814 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 800e810:	230d      	movs	r3, #13
 800e812:	e23d      	b.n	800ec90 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800e814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e816:	7ddb      	ldrb	r3, [r3, #23]
 800e818:	021b      	lsls	r3, r3, #8
 800e81a:	b21a      	sxth	r2, r3
 800e81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81e:	7d9b      	ldrb	r3, [r3, #22]
 800e820:	b21b      	sxth	r3, r3
 800e822:	4313      	orrs	r3, r2
 800e824:	b21b      	sxth	r3, r3
 800e826:	b29b      	uxth	r3, r3
 800e828:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800e82a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d112      	bne.n	800e856 <find_volume+0x266>
 800e830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e832:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e836:	061a      	lsls	r2, r3, #24
 800e838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800e83e:	041b      	lsls	r3, r3, #16
 800e840:	4313      	orrs	r3, r2
 800e842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e844:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800e848:	0212      	lsls	r2, r2, #8
 800e84a:	4313      	orrs	r3, r2
 800e84c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e84e:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800e852:	4313      	orrs	r3, r2
 800e854:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800e856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e85c:	3318      	adds	r3, #24
 800e85e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e860:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800e862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e864:	7c1a      	ldrb	r2, [r3, #16]
 800e866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e86c:	3303      	adds	r3, #3
 800e86e:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800e870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e876:	3303      	adds	r3, #3
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d008      	beq.n	800e890 <find_volume+0x2a0>
 800e87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e884:	3303      	adds	r3, #3
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	2b02      	cmp	r3, #2
 800e88a:	d001      	beq.n	800e890 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800e88c:	230d      	movs	r3, #13
 800e88e:	e1ff      	b.n	800ec90 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800e890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e896:	3303      	adds	r3, #3
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	461a      	mov	r2, r3
 800e89c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e89e:	fb02 f303 	mul.w	r3, r2, r3
 800e8a2:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800e8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a6:	7b5a      	ldrb	r2, [r3, #13]
 800e8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8ae:	3302      	adds	r3, #2
 800e8b0:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800e8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8b8:	3302      	adds	r3, #2
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d00e      	beq.n	800e8de <find_volume+0x2ee>
 800e8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8c6:	3302      	adds	r3, #2
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8d2:	3302      	adds	r3, #2
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	3b01      	subs	r3, #1
 800e8d8:	4013      	ands	r3, r2
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d004      	beq.n	800e8e8 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800e8de:	230d      	movs	r3, #13
 800e8e0:	e1d6      	b.n	800ec90 <find_volume+0x6a0>
 800e8e2:	bf00      	nop
 800e8e4:	20000164 	.word	0x20000164

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800e8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ea:	7c9b      	ldrb	r3, [r3, #18]
 800e8ec:	021b      	lsls	r3, r3, #8
 800e8ee:	b21a      	sxth	r2, r3
 800e8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f2:	7c5b      	ldrb	r3, [r3, #17]
 800e8f4:	b21b      	sxth	r3, r3
 800e8f6:	4313      	orrs	r3, r2
 800e8f8:	b21b      	sxth	r3, r3
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e902:	3308      	adds	r3, #8
 800e904:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800e906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e90c:	3308      	adds	r3, #8
 800e90e:	881a      	ldrh	r2, [r3, #0]
 800e910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e916:	330a      	adds	r3, #10
 800e918:	881b      	ldrh	r3, [r3, #0]
 800e91a:	095b      	lsrs	r3, r3, #5
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	fbb2 f1f3 	udiv	r1, r2, r3
 800e922:	fb03 f301 	mul.w	r3, r3, r1
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	b29b      	uxth	r3, r3
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d001      	beq.n	800e932 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800e92e:	230d      	movs	r3, #13
 800e930:	e1ae      	b.n	800ec90 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800e932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e934:	7d1b      	ldrb	r3, [r3, #20]
 800e936:	021b      	lsls	r3, r3, #8
 800e938:	b21a      	sxth	r2, r3
 800e93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93c:	7cdb      	ldrb	r3, [r3, #19]
 800e93e:	b21b      	sxth	r3, r3
 800e940:	4313      	orrs	r3, r2
 800e942:	b21b      	sxth	r3, r3
 800e944:	b29b      	uxth	r3, r3
 800e946:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800e948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d112      	bne.n	800e974 <find_volume+0x384>
 800e94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e950:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e954:	061a      	lsls	r2, r3, #24
 800e956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e958:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800e95c:	041b      	lsls	r3, r3, #16
 800e95e:	4313      	orrs	r3, r2
 800e960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e962:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800e966:	0212      	lsls	r2, r2, #8
 800e968:	4313      	orrs	r3, r2
 800e96a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e96c:	f892 2020 	ldrb.w	r2, [r2, #32]
 800e970:	4313      	orrs	r3, r2
 800e972:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800e974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e976:	7bdb      	ldrb	r3, [r3, #15]
 800e978:	021b      	lsls	r3, r3, #8
 800e97a:	b21a      	sxth	r2, r3
 800e97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97e:	7b9b      	ldrb	r3, [r3, #14]
 800e980:	b21b      	sxth	r3, r3
 800e982:	4313      	orrs	r3, r2
 800e984:	b21b      	sxth	r3, r3
 800e986:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800e988:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d101      	bne.n	800e992 <find_volume+0x3a2>
 800e98e:	230d      	movs	r3, #13
 800e990:	e17e      	b.n	800ec90 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800e992:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e996:	441a      	add	r2, r3
 800e998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e99e:	3308      	adds	r3, #8
 800e9a0:	8819      	ldrh	r1, [r3, #0]
 800e9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9a8:	330a      	adds	r3, #10
 800e9aa:	881b      	ldrh	r3, [r3, #0]
 800e9ac:	095b      	lsrs	r3, r3, #5
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	fbb1 f3f3 	udiv	r3, r1, r3
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	4413      	add	r3, r2
 800e9b8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e9ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d201      	bcs.n	800e9c6 <find_volume+0x3d6>
 800e9c2:	230d      	movs	r3, #13
 800e9c4:	e164      	b.n	800ec90 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800e9c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ca:	1ad2      	subs	r2, r2, r3
 800e9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9d2:	3302      	adds	r3, #2
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9da:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d101      	bne.n	800e9e6 <find_volume+0x3f6>
 800e9e2:	230d      	movs	r3, #13
 800e9e4:	e154      	b.n	800ec90 <find_volume+0x6a0>
	fmt = FS_FAT12;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800e9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ee:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d902      	bls.n	800e9fc <find_volume+0x40c>
 800e9f6:	2302      	movs	r3, #2
 800e9f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d902      	bls.n	800ea0c <find_volume+0x41c>
 800ea06:	2303      	movs	r3, #3
 800ea08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0e:	1c9a      	adds	r2, r3, #2
 800ea10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea16:	3314      	adds	r3, #20
 800ea18:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800ea1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea20:	331c      	adds	r3, #28
 800ea22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea24:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800ea26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea2a:	441a      	add	r2, r3
 800ea2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea2e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ea32:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800ea34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea38:	441a      	add	r2, r3
 800ea3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ea40:	3308      	adds	r3, #8
 800ea42:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800ea44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ea48:	2b03      	cmp	r3, #3
 800ea4a:	d127      	bne.n	800ea9c <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800ea4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea52:	3308      	adds	r3, #8
 800ea54:	881b      	ldrh	r3, [r3, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d001      	beq.n	800ea5e <find_volume+0x46e>
 800ea5a:	230d      	movs	r3, #13
 800ea5c:	e118      	b.n	800ec90 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800ea5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea60:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea64:	061a      	lsls	r2, r3, #24
 800ea66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea68:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ea6c:	041b      	lsls	r3, r3, #16
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea72:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ea76:	0212      	lsls	r2, r2, #8
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea7c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ea80:	431a      	orrs	r2, r3
 800ea82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea84:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ea88:	3304      	adds	r3, #4
 800ea8a:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800ea8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea92:	3314      	adds	r3, #20
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	647b      	str	r3, [r7, #68]	; 0x44
 800ea9a:	e030      	b.n	800eafe <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800ea9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eaa2:	3308      	adds	r3, #8
 800eaa4:	881b      	ldrh	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d101      	bne.n	800eaae <find_volume+0x4be>
 800eaaa:	230d      	movs	r3, #13
 800eaac:	e0f0      	b.n	800ec90 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800eaae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eab8:	441a      	add	r2, r3
 800eaba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eabc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800eac0:	3304      	adds	r3, #4
 800eac2:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eac4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eac8:	2b02      	cmp	r3, #2
 800eaca:	d106      	bne.n	800eada <find_volume+0x4ea>
 800eacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ead2:	3314      	adds	r3, #20
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	005b      	lsls	r3, r3, #1
 800ead8:	e010      	b.n	800eafc <find_volume+0x50c>
 800eada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eadc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eae0:	3314      	adds	r3, #20
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	4613      	mov	r3, r2
 800eae6:	005b      	lsls	r3, r3, #1
 800eae8:	4413      	add	r3, r2
 800eaea:	085a      	lsrs	r2, r3, #1
 800eaec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eaf2:	3314      	adds	r3, #20
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f003 0301 	and.w	r3, r3, #1
 800eafa:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800eafc:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800eafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb04:	3318      	adds	r3, #24
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb0e:	330a      	adds	r3, #10
 800eb10:	881b      	ldrh	r3, [r3, #0]
 800eb12:	4619      	mov	r1, r3
 800eb14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb16:	440b      	add	r3, r1
 800eb18:	1e59      	subs	r1, r3, #1
 800eb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb20:	330a      	adds	r3, #10
 800eb22:	881b      	ldrh	r3, [r3, #0]
 800eb24:	fbb1 f3f3 	udiv	r3, r1, r3
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d201      	bcs.n	800eb30 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800eb2c:	230d      	movs	r3, #13
 800eb2e:	e0af      	b.n	800ec90 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800eb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb36:	3310      	adds	r3, #16
 800eb38:	f04f 32ff 	mov.w	r2, #4294967295
 800eb3c:	601a      	str	r2, [r3, #0]
 800eb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb44:	3310      	adds	r3, #16
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb4e:	330c      	adds	r3, #12
 800eb50:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800eb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb58:	3305      	adds	r3, #5
 800eb5a:	2280      	movs	r2, #128	; 0x80
 800eb5c:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800eb5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb62:	2b03      	cmp	r3, #3
 800eb64:	d17d      	bne.n	800ec62 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800eb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eb6c:	021b      	lsls	r3, r3, #8
 800eb6e:	b21a      	sxth	r2, r3
 800eb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb76:	b21b      	sxth	r3, r3
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	b21b      	sxth	r3, r3
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d170      	bne.n	800ec62 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800eb80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb82:	3301      	adds	r3, #1
 800eb84:	4619      	mov	r1, r3
 800eb86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eb88:	f7fd fcec 	bl	800c564 <move_window>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d167      	bne.n	800ec62 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800eb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb98:	3305      	adds	r3, #5
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800eb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba0:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800eba4:	021b      	lsls	r3, r3, #8
 800eba6:	b21a      	sxth	r2, r3
 800eba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebaa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800ebae:	b21b      	sxth	r3, r3
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	b21b      	sxth	r3, r3
 800ebb4:	4a38      	ldr	r2, [pc, #224]	; (800ec98 <find_volume+0x6a8>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d153      	bne.n	800ec62 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800ebba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebbc:	78db      	ldrb	r3, [r3, #3]
 800ebbe:	061a      	lsls	r2, r3, #24
 800ebc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc2:	789b      	ldrb	r3, [r3, #2]
 800ebc4:	041b      	lsls	r3, r3, #16
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebca:	7852      	ldrb	r2, [r2, #1]
 800ebcc:	0212      	lsls	r2, r2, #8
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebd2:	7812      	ldrb	r2, [r2, #0]
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	4a31      	ldr	r2, [pc, #196]	; (800ec9c <find_volume+0x6ac>)
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d142      	bne.n	800ec62 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800ebdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebde:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800ebe2:	061a      	lsls	r2, r3, #24
 800ebe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe6:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800ebea:	041b      	lsls	r3, r3, #16
 800ebec:	4313      	orrs	r3, r2
 800ebee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebf0:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800ebf4:	0212      	lsls	r2, r2, #8
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebfa:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800ebfe:	4313      	orrs	r3, r2
 800ec00:	4a27      	ldr	r2, [pc, #156]	; (800eca0 <find_volume+0x6b0>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d12d      	bne.n	800ec62 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800ec06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec08:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800ec0c:	061a      	lsls	r2, r3, #24
 800ec0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec10:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800ec14:	041b      	lsls	r3, r3, #16
 800ec16:	4313      	orrs	r3, r2
 800ec18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec1a:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800ec1e:	0212      	lsls	r2, r2, #8
 800ec20:	4313      	orrs	r3, r2
 800ec22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec24:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800ec28:	431a      	orrs	r2, r3
 800ec2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec30:	3310      	adds	r3, #16
 800ec32:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800ec34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec36:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800ec3a:	061a      	lsls	r2, r3, #24
 800ec3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3e:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800ec42:	041b      	lsls	r3, r3, #16
 800ec44:	4313      	orrs	r3, r2
 800ec46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec48:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800ec4c:	0212      	lsls	r2, r2, #8
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec52:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800ec56:	431a      	orrs	r2, r3
 800ec58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec5e:	330c      	adds	r3, #12
 800ec60:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800ec62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec68:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ec6c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800ec6e:	4b0d      	ldr	r3, [pc, #52]	; (800eca4 <find_volume+0x6b4>)
 800ec70:	881b      	ldrh	r3, [r3, #0]
 800ec72:	3301      	adds	r3, #1
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	4b0b      	ldr	r3, [pc, #44]	; (800eca4 <find_volume+0x6b4>)
 800ec78:	801a      	strh	r2, [r3, #0]
 800ec7a:	4b0a      	ldr	r3, [pc, #40]	; (800eca4 <find_volume+0x6b4>)
 800ec7c:	881a      	ldrh	r2, [r3, #0]
 800ec7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec84:	3306      	adds	r3, #6
 800ec86:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800ec88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec8a:	f7fd fbe7 	bl	800c45c <clear_lock>
#endif

	return FR_OK;
 800ec8e:	2300      	movs	r3, #0
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3758      	adds	r7, #88	; 0x58
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	ffffaa55 	.word	0xffffaa55
 800ec9c:	41615252 	.word	0x41615252
 800eca0:	61417272 	.word	0x61417272
 800eca4:	20000168 	.word	0x20000168

0800eca8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d02d      	beq.n	800ed16 <validate+0x6e>
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d027      	beq.n	800ed16 <validate+0x6e>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d01e      	beq.n	800ed16 <validate+0x6e>
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ece4:	3306      	adds	r3, #6
 800ece6:	881a      	ldrh	r2, [r3, #0]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecee:	3304      	adds	r3, #4
 800ecf0:	881b      	ldrh	r3, [r3, #0]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d10f      	bne.n	800ed16 <validate+0x6e>
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed02:	3301      	adds	r3, #1
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7fd f8f8 	bl	800befc <disk_status>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	f003 0301 	and.w	r3, r3, #1
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d001      	beq.n	800ed1a <validate+0x72>
		return FR_INVALID_OBJECT;
 800ed16:	2309      	movs	r3, #9
 800ed18:	e000      	b.n	800ed1c <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800ed1a:	2300      	movs	r3, #0
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3710      	adds	r7, #16
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b088      	sub	sp, #32
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	4613      	mov	r3, r2
 800ed30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800ed36:	f107 0310 	add.w	r3, r7, #16
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7ff fba7 	bl	800e48e <get_ldnumber>
 800ed40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed42:	69fb      	ldr	r3, [r7, #28]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	da01      	bge.n	800ed4c <f_mount+0x28>
 800ed48:	230b      	movs	r3, #11
 800ed4a:	e02f      	b.n	800edac <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ed4c:	4a19      	ldr	r2, [pc, #100]	; (800edb4 <f_mount+0x90>)
 800ed4e:	69fb      	ldr	r3, [r7, #28]
 800ed50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ed56:	69bb      	ldr	r3, [r7, #24]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d007      	beq.n	800ed6c <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800ed5c:	69b8      	ldr	r0, [r7, #24]
 800ed5e:	f7fd fb7d 	bl	800c45c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ed62:	69bb      	ldr	r3, [r7, #24]
 800ed64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed68:	2200      	movs	r2, #0
 800ed6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d004      	beq.n	800ed7c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed78:	2200      	movs	r2, #0
 800ed7a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ed7c:	68fa      	ldr	r2, [r7, #12]
 800ed7e:	490d      	ldr	r1, [pc, #52]	; (800edb4 <f_mount+0x90>)
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <f_mount+0x6e>
 800ed8c:	79fb      	ldrb	r3, [r7, #7]
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d001      	beq.n	800ed96 <f_mount+0x72>
 800ed92:	2300      	movs	r3, #0
 800ed94:	e00a      	b.n	800edac <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800ed96:	f107 0108 	add.w	r1, r7, #8
 800ed9a:	f107 030c 	add.w	r3, r7, #12
 800ed9e:	2200      	movs	r2, #0
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7ff fc25 	bl	800e5f0 <find_volume>
 800eda6:	4603      	mov	r3, r0
 800eda8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800edaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800edac:	4618      	mov	r0, r3
 800edae:	3720      	adds	r7, #32
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	20000164 	.word	0x20000164

0800edb8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800edbe:	b086      	sub	sp, #24
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	f107 0318 	add.w	r3, r7, #24
 800edc6:	3b0c      	subs	r3, #12
 800edc8:	6018      	str	r0, [r3, #0]
 800edca:	f107 0318 	add.w	r3, r7, #24
 800edce:	3b10      	subs	r3, #16
 800edd0:	6019      	str	r1, [r3, #0]
 800edd2:	f107 0318 	add.w	r3, r7, #24
 800edd6:	3b11      	subs	r3, #17
 800edd8:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800edda:	f107 0318 	add.w	r3, r7, #24
 800edde:	3b0c      	subs	r3, #12
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d101      	bne.n	800edea <f_open+0x32>
 800ede6:	2309      	movs	r3, #9
 800ede8:	e319      	b.n	800f41e <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 800edea:	f107 0318 	add.w	r3, r7, #24
 800edee:	3b0c      	subs	r3, #12
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edf6:	2200      	movs	r2, #0
 800edf8:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800edfa:	f107 0318 	add.w	r3, r7, #24
 800edfe:	3b11      	subs	r3, #17
 800ee00:	f107 0218 	add.w	r2, r7, #24
 800ee04:	3a11      	subs	r2, #17
 800ee06:	7812      	ldrb	r2, [r2, #0]
 800ee08:	f002 021f 	and.w	r2, r2, #31
 800ee0c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800ee0e:	f107 0318 	add.w	r3, r7, #24
 800ee12:	3b11      	subs	r3, #17
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	f023 0301 	bic.w	r3, r3, #1
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	f107 0118 	add.w	r1, r7, #24
 800ee20:	3910      	subs	r1, #16
 800ee22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee26:	3b18      	subs	r3, #24
 800ee28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7ff fbdf 	bl	800e5f0 <find_volume>
 800ee32:	4603      	mov	r3, r0
 800ee34:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ee38:	f102 0217 	add.w	r2, r2, #23
 800ee3c:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800ee3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ee42:	f103 0317 	add.w	r3, r3, #23
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f040 82e3 	bne.w	800f414 <f_open+0x65c>
		INIT_BUF(dj);
 800ee4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee52:	3b18      	subs	r3, #24
 800ee54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee58:	3318      	adds	r3, #24
 800ee5a:	f107 0218 	add.w	r2, r7, #24
 800ee5e:	3a04      	subs	r2, #4
 800ee60:	601a      	str	r2, [r3, #0]
 800ee62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee66:	3b18      	subs	r3, #24
 800ee68:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ee6c:	4ad1      	ldr	r2, [pc, #836]	; (800f1b4 <f_open+0x3fc>)
 800ee6e:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800ee70:	f107 0318 	add.w	r3, r7, #24
 800ee74:	3b10      	subs	r3, #16
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee7c:	3b18      	subs	r3, #24
 800ee7e:	4611      	mov	r1, r2
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7ff fa8b 	bl	800e39c <follow_path>
 800ee86:	4603      	mov	r3, r0
 800ee88:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ee8c:	f102 0217 	add.w	r2, r2, #23
 800ee90:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800ee92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee96:	3b18      	subs	r3, #24
 800ee98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee9c:	3314      	adds	r3, #20
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800eea4:	f102 0210 	add.w	r2, r2, #16
 800eea8:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800eeaa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800eeae:	f103 0317 	add.w	r3, r3, #23
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d126      	bne.n	800ef06 <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800eeb8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800eebc:	f103 0310 	add.w	r3, r3, #16
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d106      	bne.n	800eed4 <f_open+0x11c>
				res = FR_INVALID_NAME;
 800eec6:	2306      	movs	r3, #6
 800eec8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800eecc:	f102 0217 	add.w	r2, r2, #23
 800eed0:	7013      	strb	r3, [r2, #0]
 800eed2:	e018      	b.n	800ef06 <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eed4:	f107 0318 	add.w	r3, r7, #24
 800eed8:	3b11      	subs	r3, #17
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	f023 0301 	bic.w	r3, r3, #1
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	bf14      	ite	ne
 800eee4:	2301      	movne	r3, #1
 800eee6:	2300      	moveq	r3, #0
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	461a      	mov	r2, r3
 800eeec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800eef0:	3b18      	subs	r3, #24
 800eef2:	4611      	mov	r1, r2
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fd f917 	bl	800c128 <chk_lock>
 800eefa:	4603      	mov	r3, r0
 800eefc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ef00:	f102 0217 	add.w	r2, r2, #23
 800ef04:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ef06:	f107 0318 	add.w	r3, r7, #24
 800ef0a:	3b11      	subs	r3, #17
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	f003 031c 	and.w	r3, r3, #28
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	f000 8150 	beq.w	800f1b8 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 800ef18:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ef1c:	f103 0317 	add.w	r3, r3, #23
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d030      	beq.n	800ef88 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800ef26:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ef2a:	f103 0317 	add.w	r3, r3, #23
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	2b04      	cmp	r3, #4
 800ef32:	d112      	bne.n	800ef5a <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ef34:	f7fd f96a 	bl	800c20c <enq_lock>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d007      	beq.n	800ef4e <f_open+0x196>
 800ef3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef42:	3b18      	subs	r3, #24
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7fe fe5f 	bl	800dc08 <dir_register>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	e000      	b.n	800ef50 <f_open+0x198>
 800ef4e:	2312      	movs	r3, #18
 800ef50:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ef54:	f102 0217 	add.w	r2, r2, #23
 800ef58:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ef5a:	f107 0318 	add.w	r3, r7, #24
 800ef5e:	3b11      	subs	r3, #17
 800ef60:	f107 0218 	add.w	r2, r7, #24
 800ef64:	3a11      	subs	r2, #17
 800ef66:	7812      	ldrb	r2, [r2, #0]
 800ef68:	f042 0208 	orr.w	r2, r2, #8
 800ef6c:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800ef6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef72:	3b18      	subs	r3, #24
 800ef74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef78:	3314      	adds	r3, #20
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ef80:	f102 0210 	add.w	r2, r2, #16
 800ef84:	6013      	str	r3, [r2, #0]
 800ef86:	e01f      	b.n	800efc8 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ef88:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ef8c:	f103 0310 	add.w	r3, r3, #16
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	330b      	adds	r3, #11
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	f003 0311 	and.w	r3, r3, #17
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d006      	beq.n	800efac <f_open+0x1f4>
					res = FR_DENIED;
 800ef9e:	2307      	movs	r3, #7
 800efa0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800efa4:	f102 0217 	add.w	r2, r2, #23
 800efa8:	7013      	strb	r3, [r2, #0]
 800efaa:	e00d      	b.n	800efc8 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800efac:	f107 0318 	add.w	r3, r7, #24
 800efb0:	3b11      	subs	r3, #17
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	f003 0304 	and.w	r3, r3, #4
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d005      	beq.n	800efc8 <f_open+0x210>
						res = FR_EXIST;
 800efbc:	2308      	movs	r3, #8
 800efbe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800efc2:	f102 0217 	add.w	r2, r2, #23
 800efc6:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800efc8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800efcc:	f103 0317 	add.w	r3, r3, #23
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	f040 8122 	bne.w	800f21c <f_open+0x464>
 800efd8:	f107 0318 	add.w	r3, r7, #24
 800efdc:	3b11      	subs	r3, #17
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	f003 0308 	and.w	r3, r3, #8
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	f000 8119 	beq.w	800f21c <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 800efea:	f7fa f9bb 	bl	8009364 <get_fattime>
 800efee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800eff2:	f103 030c 	add.w	r3, r3, #12
 800eff6:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800eff8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800effc:	f103 0310 	add.w	r3, r3, #16
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	330e      	adds	r3, #14
 800f004:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f008:	f102 020c 	add.w	r2, r2, #12
 800f00c:	6812      	ldr	r2, [r2, #0]
 800f00e:	b2d2      	uxtb	r2, r2
 800f010:	701a      	strb	r2, [r3, #0]
 800f012:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f016:	f103 030c 	add.w	r3, r3, #12
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	b29b      	uxth	r3, r3
 800f01e:	0a1b      	lsrs	r3, r3, #8
 800f020:	b29a      	uxth	r2, r3
 800f022:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f026:	f103 0310 	add.w	r3, r3, #16
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	330f      	adds	r3, #15
 800f02e:	b2d2      	uxtb	r2, r2
 800f030:	701a      	strb	r2, [r3, #0]
 800f032:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f036:	f103 030c 	add.w	r3, r3, #12
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	0c1a      	lsrs	r2, r3, #16
 800f03e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f042:	f103 0310 	add.w	r3, r3, #16
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	3310      	adds	r3, #16
 800f04a:	b2d2      	uxtb	r2, r2
 800f04c:	701a      	strb	r2, [r3, #0]
 800f04e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f052:	f103 030c 	add.w	r3, r3, #12
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	0e1a      	lsrs	r2, r3, #24
 800f05a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f05e:	f103 0310 	add.w	r3, r3, #16
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	3311      	adds	r3, #17
 800f066:	b2d2      	uxtb	r2, r2
 800f068:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800f06a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f06e:	f103 0310 	add.w	r3, r3, #16
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	330b      	adds	r3, #11
 800f076:	2200      	movs	r2, #0
 800f078:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800f07a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f07e:	f103 0310 	add.w	r3, r3, #16
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	331c      	adds	r3, #28
 800f086:	2200      	movs	r2, #0
 800f088:	701a      	strb	r2, [r3, #0]
 800f08a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f08e:	f103 0310 	add.w	r3, r3, #16
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	331d      	adds	r3, #29
 800f096:	2200      	movs	r2, #0
 800f098:	701a      	strb	r2, [r3, #0]
 800f09a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f09e:	f103 0310 	add.w	r3, r3, #16
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	331e      	adds	r3, #30
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	701a      	strb	r2, [r3, #0]
 800f0aa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f0ae:	f103 0310 	add.w	r3, r3, #16
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	331f      	adds	r3, #31
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800f0ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f0be:	3b18      	subs	r3, #24
 800f0c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f0ca:	f102 0210 	add.w	r2, r2, #16
 800f0ce:	6811      	ldr	r1, [r2, #0]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7fe f9c0 	bl	800d456 <ld_clust>
 800f0d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f0da:	f103 0308 	add.w	r3, r3, #8
 800f0de:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f0e6:	f103 0310 	add.w	r3, r3, #16
 800f0ea:	6818      	ldr	r0, [r3, #0]
 800f0ec:	f7fe f9e1 	bl	800d4b2 <st_clust>
				dj.fs->wflag = 1;
 800f0f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f0f4:	3b18      	subs	r3, #24
 800f0f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f100:	3304      	adds	r3, #4
 800f102:	2201      	movs	r2, #1
 800f104:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800f106:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f10a:	f103 0308 	add.w	r3, r3, #8
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	f000 8083 	beq.w	800f21c <f_open+0x464>
					dw = dj.fs->winsect;
 800f116:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f11a:	3b18      	subs	r3, #24
 800f11c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800f126:	330c      	adds	r3, #12
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f12e:	f102 020c 	add.w	r2, r2, #12
 800f132:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800f134:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f138:	3b18      	subs	r3, #24
 800f13a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f144:	f102 0208 	add.w	r2, r2, #8
 800f148:	6811      	ldr	r1, [r2, #0]
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7fd fd99 	bl	800cc82 <remove_chain>
 800f150:	4603      	mov	r3, r0
 800f152:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f156:	f102 0217 	add.w	r2, r2, #23
 800f15a:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800f15c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f160:	f103 0317 	add.w	r3, r3, #23
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d158      	bne.n	800f21c <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800f16a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f16e:	3b18      	subs	r3, #24
 800f170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f17a:	f102 0208 	add.w	r2, r2, #8
 800f17e:	6812      	ldr	r2, [r2, #0]
 800f180:	3a01      	subs	r2, #1
 800f182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f186:	330c      	adds	r3, #12
 800f188:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 800f18a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f18e:	3b18      	subs	r3, #24
 800f190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f19a:	f102 020c 	add.w	r2, r2, #12
 800f19e:	6811      	ldr	r1, [r2, #0]
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7fd f9df 	bl	800c564 <move_window>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f1ac:	f102 0217 	add.w	r2, r2, #23
 800f1b0:	7013      	strb	r3, [r2, #0]
 800f1b2:	e033      	b.n	800f21c <f_open+0x464>
 800f1b4:	20000184 	.word	0x20000184
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800f1b8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f1bc:	f103 0317 	add.w	r3, r3, #23
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d12a      	bne.n	800f21c <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800f1c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f1ca:	f103 0310 	add.w	r3, r3, #16
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	330b      	adds	r3, #11
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	f003 0310 	and.w	r3, r3, #16
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d006      	beq.n	800f1ea <f_open+0x432>
					res = FR_NO_FILE;
 800f1dc:	2304      	movs	r3, #4
 800f1de:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f1e2:	f102 0217 	add.w	r2, r2, #23
 800f1e6:	7013      	strb	r3, [r2, #0]
 800f1e8:	e018      	b.n	800f21c <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800f1ea:	f107 0318 	add.w	r3, r7, #24
 800f1ee:	3b11      	subs	r3, #17
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	f003 0302 	and.w	r3, r3, #2
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d010      	beq.n	800f21c <f_open+0x464>
 800f1fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f1fe:	f103 0310 	add.w	r3, r3, #16
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	330b      	adds	r3, #11
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	f003 0301 	and.w	r3, r3, #1
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d005      	beq.n	800f21c <f_open+0x464>
						res = FR_DENIED;
 800f210:	2307      	movs	r3, #7
 800f212:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f216:	f102 0217 	add.w	r2, r2, #23
 800f21a:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800f21c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f220:	f103 0317 	add.w	r3, r3, #23
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d15b      	bne.n	800f2e2 <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f22a:	f107 0318 	add.w	r3, r7, #24
 800f22e:	3b11      	subs	r3, #17
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	f003 0308 	and.w	r3, r3, #8
 800f236:	2b00      	cmp	r3, #0
 800f238:	d009      	beq.n	800f24e <f_open+0x496>
				mode |= FA__WRITTEN;
 800f23a:	f107 0318 	add.w	r3, r7, #24
 800f23e:	3b11      	subs	r3, #17
 800f240:	f107 0218 	add.w	r2, r7, #24
 800f244:	3a11      	subs	r2, #17
 800f246:	7812      	ldrb	r2, [r2, #0]
 800f248:	f042 0220 	orr.w	r2, r2, #32
 800f24c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800f24e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f252:	3b18      	subs	r3, #24
 800f254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800f25e:	330c      	adds	r3, #12
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	f107 0318 	add.w	r3, r7, #24
 800f266:	3b0c      	subs	r3, #12
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f26e:	331c      	adds	r3, #28
 800f270:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800f272:	f107 0318 	add.w	r3, r7, #24
 800f276:	3b0c      	subs	r3, #12
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800f27e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f282:	f102 0210 	add.w	r2, r2, #16
 800f286:	6812      	ldr	r2, [r2, #0]
 800f288:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f28a:	f107 0318 	add.w	r3, r7, #24
 800f28e:	3b11      	subs	r3, #17
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	f023 0301 	bic.w	r3, r3, #1
 800f296:	2b00      	cmp	r3, #0
 800f298:	bf14      	ite	ne
 800f29a:	2301      	movne	r3, #1
 800f29c:	2300      	moveq	r3, #0
 800f29e:	b2db      	uxtb	r3, r3
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f2a6:	3b18      	subs	r3, #24
 800f2a8:	4611      	mov	r1, r2
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fc ffd2 	bl	800c254 <inc_lock>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	f107 0318 	add.w	r3, r7, #24
 800f2b6:	3b0c      	subs	r3, #12
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800f2be:	3308      	adds	r3, #8
 800f2c0:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 800f2c2:	f107 0318 	add.w	r3, r7, #24
 800f2c6:	3b0c      	subs	r3, #12
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800f2ce:	3308      	adds	r3, #8
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d105      	bne.n	800f2e2 <f_open+0x52a>
 800f2d6:	2302      	movs	r3, #2
 800f2d8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f2dc:	f102 0217 	add.w	r2, r2, #23
 800f2e0:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800f2e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f2e6:	f103 0317 	add.w	r3, r3, #23
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	f040 8091 	bne.w	800f414 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 800f2f2:	f107 0318 	add.w	r3, r7, #24
 800f2f6:	3b0c      	subs	r3, #12
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2fe:	3306      	adds	r3, #6
 800f300:	f107 0218 	add.w	r2, r7, #24
 800f304:	3a11      	subs	r2, #17
 800f306:	7812      	ldrb	r2, [r2, #0]
 800f308:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800f30a:	f107 0318 	add.w	r3, r7, #24
 800f30e:	3b0c      	subs	r3, #12
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f316:	3307      	adds	r3, #7
 800f318:	2200      	movs	r2, #0
 800f31a:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800f31c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f320:	3b18      	subs	r3, #24
 800f322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f32c:	f102 0210 	add.w	r2, r2, #16
 800f330:	6811      	ldr	r1, [r2, #0]
 800f332:	4618      	mov	r0, r3
 800f334:	f7fe f88f 	bl	800d456 <ld_clust>
 800f338:	4602      	mov	r2, r0
 800f33a:	f107 0318 	add.w	r3, r7, #24
 800f33e:	3b0c      	subs	r3, #12
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f346:	3310      	adds	r3, #16
 800f348:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800f34a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f34e:	f103 0310 	add.w	r3, r3, #16
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	331f      	adds	r3, #31
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	061a      	lsls	r2, r3, #24
 800f35a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f35e:	f103 0310 	add.w	r3, r3, #16
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	331e      	adds	r3, #30
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	041b      	lsls	r3, r3, #16
 800f36a:	4313      	orrs	r3, r2
 800f36c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f370:	f102 0210 	add.w	r2, r2, #16
 800f374:	6812      	ldr	r2, [r2, #0]
 800f376:	321d      	adds	r2, #29
 800f378:	7812      	ldrb	r2, [r2, #0]
 800f37a:	0212      	lsls	r2, r2, #8
 800f37c:	4313      	orrs	r3, r2
 800f37e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f382:	f102 0210 	add.w	r2, r2, #16
 800f386:	6812      	ldr	r2, [r2, #0]
 800f388:	321c      	adds	r2, #28
 800f38a:	7812      	ldrb	r2, [r2, #0]
 800f38c:	431a      	orrs	r2, r3
 800f38e:	f107 0318 	add.w	r3, r7, #24
 800f392:	3b0c      	subs	r3, #12
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f39a:	330c      	adds	r3, #12
 800f39c:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 800f39e:	f107 0318 	add.w	r3, r7, #24
 800f3a2:	3b0c      	subs	r3, #12
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3aa:	3308      	adds	r3, #8
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 800f3b0:	f107 0318 	add.w	r3, r7, #24
 800f3b4:	3b0c      	subs	r3, #12
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3bc:	3318      	adds	r3, #24
 800f3be:	2200      	movs	r2, #0
 800f3c0:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800f3c2:	f107 0318 	add.w	r3, r7, #24
 800f3c6:	3b0c      	subs	r3, #12
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800f3ce:	3304      	adds	r3, #4
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800f3d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f3d8:	3b18      	subs	r3, #24
 800f3da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	f107 0318 	add.w	r3, r7, #24
 800f3e4:	3b0c      	subs	r3, #12
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3ec:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800f3ee:	f107 0318 	add.w	r3, r7, #24
 800f3f2:	3b0c      	subs	r3, #12
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f400:	3306      	adds	r3, #6
 800f402:	881a      	ldrh	r2, [r3, #0]
 800f404:	f107 0318 	add.w	r3, r7, #24
 800f408:	3b0c      	subs	r3, #12
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f410:	3304      	adds	r3, #4
 800f412:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 800f414:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f418:	f103 0317 	add.w	r3, r3, #23
 800f41c:	781b      	ldrb	r3, [r3, #0]
}
 800f41e:	4618      	mov	r0, r3
 800f420:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800f424:	3718      	adds	r7, #24
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop

0800f42c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b08a      	sub	sp, #40	; 0x28
 800f430:	af00      	add	r7, sp, #0
 800f432:	60f8      	str	r0, [r7, #12]
 800f434:	60b9      	str	r1, [r7, #8]
 800f436:	607a      	str	r2, [r7, #4]
 800f438:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	2200      	movs	r2, #0
 800f442:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f7ff fc2f 	bl	800eca8 <validate>
 800f44a:	4603      	mov	r3, r0
 800f44c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800f44e:	7dfb      	ldrb	r3, [r7, #23]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d001      	beq.n	800f458 <f_write+0x2c>
 800f454:	7dfb      	ldrb	r3, [r7, #23]
 800f456:	e258      	b.n	800f90a <f_write+0x4de>
	if (fp->err)							/* Check error */
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f45e:	3307      	adds	r3, #7
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d005      	beq.n	800f472 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f46c:	3307      	adds	r3, #7
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	e24b      	b.n	800f90a <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f478:	3306      	adds	r3, #6
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	f003 0302 	and.w	r3, r3, #2
 800f480:	2b00      	cmp	r3, #0
 800f482:	d101      	bne.n	800f488 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800f484:	2307      	movs	r3, #7
 800f486:	e240      	b.n	800f90a <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f48e:	3308      	adds	r3, #8
 800f490:	681a      	ldr	r2, [r3, #0]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	441a      	add	r2, r3
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f49c:	3308      	adds	r3, #8
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	f080 8208 	bcs.w	800f8b6 <f_write+0x48a>
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800f4aa:	e204      	b.n	800f8b6 <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4b2:	3308      	adds	r3, #8
 800f4b4:	681a      	ldr	r2, [r3, #0]
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4c2:	330a      	adds	r3, #10
 800f4c4:	881b      	ldrh	r3, [r3, #0]
 800f4c6:	fbb2 f1f3 	udiv	r1, r2, r3
 800f4ca:	fb03 f301 	mul.w	r3, r3, r1
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	f040 818d 	bne.w	800f7f0 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4dc:	3308      	adds	r3, #8
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4ec:	330a      	adds	r3, #10
 800f4ee:	881b      	ldrh	r3, [r3, #0]
 800f4f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4f4:	b2da      	uxtb	r2, r3
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f502:	3302      	adds	r3, #2
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	3b01      	subs	r3, #1
 800f508:	b2db      	uxtb	r3, r3
 800f50a:	4013      	ands	r3, r2
 800f50c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800f50e:	7dbb      	ldrb	r3, [r7, #22]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d167      	bne.n	800f5e4 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f51a:	3308      	adds	r3, #8
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d112      	bne.n	800f548 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f528:	3310      	adds	r3, #16
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800f52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f530:	2b00      	cmp	r3, #0
 800f532:	d129      	bne.n	800f588 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2100      	movs	r1, #0
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fd fc07 	bl	800cd52 <create_chain>
 800f544:	6278      	str	r0, [r7, #36]	; 0x24
 800f546:	e01f      	b.n	800f588 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800f54e:	3304      	adds	r3, #4
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00a      	beq.n	800f56c <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f55c:	3308      	adds	r3, #8
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4619      	mov	r1, r3
 800f562:	68f8      	ldr	r0, [r7, #12]
 800f564:	f7fd fca6 	bl	800ceb4 <clmt_clust>
 800f568:	6278      	str	r0, [r7, #36]	; 0x24
 800f56a:	e00d      	b.n	800f588 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f572:	681a      	ldr	r2, [r3, #0]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f57a:	3314      	adds	r3, #20
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4619      	mov	r1, r3
 800f580:	4610      	mov	r0, r2
 800f582:	f7fd fbe6 	bl	800cd52 <create_chain>
 800f586:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	f000 8198 	beq.w	800f8c0 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800f590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f592:	2b01      	cmp	r3, #1
 800f594:	d107      	bne.n	800f5a6 <f_write+0x17a>
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f59c:	3307      	adds	r3, #7
 800f59e:	2202      	movs	r2, #2
 800f5a0:	701a      	strb	r2, [r3, #0]
 800f5a2:	2302      	movs	r3, #2
 800f5a4:	e1b1      	b.n	800f90a <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800f5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ac:	d107      	bne.n	800f5be <f_write+0x192>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5b4:	3307      	adds	r3, #7
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	701a      	strb	r2, [r3, #0]
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	e1a5      	b.n	800f90a <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5c4:	3314      	adds	r3, #20
 800f5c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5c8:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5d0:	3310      	adds	r3, #16
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d105      	bne.n	800f5e4 <f_write+0x1b8>
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5de:	3310      	adds	r3, #16
 800f5e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5e2:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5ea:	3306      	adds	r3, #6
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d028      	beq.n	800f648 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f602:	3301      	adds	r3, #1
 800f604:	7818      	ldrb	r0, [r3, #0]
 800f606:	68f9      	ldr	r1, [r7, #12]
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f60e:	3318      	adds	r3, #24
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	2301      	movs	r3, #1
 800f614:	f7fc fcd2 	bl	800bfbc <disk_write>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d007      	beq.n	800f62e <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f624:	3307      	adds	r3, #7
 800f626:	2201      	movs	r2, #1
 800f628:	701a      	strb	r2, [r3, #0]
 800f62a:	2301      	movs	r3, #1
 800f62c:	e16d      	b.n	800f90a <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f634:	3306      	adds	r3, #6
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f644:	3306      	adds	r3, #6
 800f646:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f656:	3314      	adds	r3, #20
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	4619      	mov	r1, r3
 800f65c:	4610      	mov	r0, r2
 800f65e:	f7fd f884 	bl	800c76a <clust2sect>
 800f662:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d107      	bne.n	800f67a <f_write+0x24e>
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f670:	3307      	adds	r3, #7
 800f672:	2202      	movs	r2, #2
 800f674:	701a      	strb	r2, [r3, #0]
 800f676:	2302      	movs	r3, #2
 800f678:	e147      	b.n	800f90a <f_write+0x4de>
			sect += csect;
 800f67a:	7dbb      	ldrb	r3, [r7, #22]
 800f67c:	693a      	ldr	r2, [r7, #16]
 800f67e:	4413      	add	r3, r2
 800f680:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f68e:	330a      	adds	r3, #10
 800f690:	881b      	ldrh	r3, [r3, #0]
 800f692:	461a      	mov	r2, r3
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	fbb3 f3f2 	udiv	r3, r3, r2
 800f69a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d074      	beq.n	800f78c <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800f6a2:	7dba      	ldrb	r2, [r7, #22]
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	441a      	add	r2, r3
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6b4:	3302      	adds	r3, #2
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d90b      	bls.n	800f6d4 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6c8:	3302      	adds	r3, #2
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	7dbb      	ldrb	r3, [r7, #22]
 800f6d0:	1ad3      	subs	r3, r2, r3
 800f6d2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	7818      	ldrb	r0, [r3, #0]
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	693a      	ldr	r2, [r7, #16]
 800f6e8:	69b9      	ldr	r1, [r7, #24]
 800f6ea:	f7fc fc67 	bl	800bfbc <disk_write>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d007      	beq.n	800f704 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6fa:	3307      	adds	r3, #7
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	701a      	strb	r2, [r3, #0]
 800f700:	2301      	movs	r3, #1
 800f702:	e102      	b.n	800f90a <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f70a:	3318      	adds	r3, #24
 800f70c:	681a      	ldr	r2, [r3, #0]
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	1ad3      	subs	r3, r2, r3
 800f712:	69fa      	ldr	r2, [r7, #28]
 800f714:	429a      	cmp	r2, r3
 800f716:	d92b      	bls.n	800f770 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f720:	3318      	adds	r3, #24
 800f722:	681a      	ldr	r2, [r3, #0]
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	1ad2      	subs	r2, r2, r3
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f734:	330a      	adds	r3, #10
 800f736:	881b      	ldrh	r3, [r3, #0]
 800f738:	fb03 f302 	mul.w	r3, r3, r2
 800f73c:	69ba      	ldr	r2, [r7, #24]
 800f73e:	18d1      	adds	r1, r2, r3
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f74c:	330a      	adds	r3, #10
 800f74e:	881b      	ldrh	r3, [r3, #0]
 800f750:	461a      	mov	r2, r3
 800f752:	f7fc fc71 	bl	800c038 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f75c:	3306      	adds	r3, #6
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f764:	b2da      	uxtb	r2, r3
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f76c:	3306      	adds	r3, #6
 800f76e:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f77c:	330a      	adds	r3, #10
 800f77e:	881b      	ldrh	r3, [r3, #0]
 800f780:	461a      	mov	r2, r3
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	fb02 f303 	mul.w	r3, r2, r3
 800f788:	623b      	str	r3, [r7, #32]
				continue;
 800f78a:	e07a      	b.n	800f882 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f792:	3318      	adds	r3, #24
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	693a      	ldr	r2, [r7, #16]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d023      	beq.n	800f7e4 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7a2:	3308      	adds	r3, #8
 800f7a4:	681a      	ldr	r2, [r3, #0]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7ac:	330c      	adds	r3, #12
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d217      	bcs.n	800f7e4 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	7818      	ldrb	r0, [r3, #0]
 800f7c4:	68f9      	ldr	r1, [r7, #12]
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	693a      	ldr	r2, [r7, #16]
 800f7ca:	f7fc fbd7 	bl	800bf7c <disk_read>
 800f7ce:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d007      	beq.n	800f7e4 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7da:	3307      	adds	r3, #7
 800f7dc:	2201      	movs	r2, #1
 800f7de:	701a      	strb	r2, [r3, #0]
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	e092      	b.n	800f90a <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7ea:	3318      	adds	r3, #24
 800f7ec:	693a      	ldr	r2, [r7, #16]
 800f7ee:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7fc:	330a      	adds	r3, #10
 800f7fe:	881b      	ldrh	r3, [r3, #0]
 800f800:	4618      	mov	r0, r3
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f808:	3308      	adds	r3, #8
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f818:	330a      	adds	r3, #10
 800f81a:	881b      	ldrh	r3, [r3, #0]
 800f81c:	fbb2 f1f3 	udiv	r1, r2, r3
 800f820:	fb03 f301 	mul.w	r3, r3, r1
 800f824:	1ad3      	subs	r3, r2, r3
 800f826:	1ac3      	subs	r3, r0, r3
 800f828:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800f82a:	6a3a      	ldr	r2, [r7, #32]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d901      	bls.n	800f836 <f_write+0x40a>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f83c:	3308      	adds	r3, #8
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f84c:	330a      	adds	r3, #10
 800f84e:	881b      	ldrh	r3, [r3, #0]
 800f850:	fbb2 f1f3 	udiv	r1, r2, r3
 800f854:	fb03 f301 	mul.w	r3, r3, r1
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	4413      	add	r3, r2
 800f85e:	6a3a      	ldr	r2, [r7, #32]
 800f860:	69b9      	ldr	r1, [r7, #24]
 800f862:	4618      	mov	r0, r3
 800f864:	f7fc fbe8 	bl	800c038 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f86e:	3306      	adds	r3, #6
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f876:	b2da      	uxtb	r2, r3
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f87e:	3306      	adds	r3, #6
 800f880:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800f882:	69ba      	ldr	r2, [r7, #24]
 800f884:	6a3b      	ldr	r3, [r7, #32]
 800f886:	4413      	add	r3, r2
 800f888:	61bb      	str	r3, [r7, #24]
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f890:	3308      	adds	r3, #8
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	6a3b      	ldr	r3, [r7, #32]
 800f896:	441a      	add	r2, r3
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f89e:	3308      	adds	r3, #8
 800f8a0:	601a      	str	r2, [r3, #0]
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	6a3b      	ldr	r3, [r7, #32]
 800f8a8:	441a      	add	r2, r3
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	601a      	str	r2, [r3, #0]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	6a3b      	ldr	r3, [r7, #32]
 800f8b2:	1ad3      	subs	r3, r2, r3
 800f8b4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f47f adf7 	bne.w	800f4ac <f_write+0x80>
 800f8be:	e000      	b.n	800f8c2 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f8c0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8c8:	3308      	adds	r3, #8
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8d2:	330c      	adds	r3, #12
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d909      	bls.n	800f8ee <f_write+0x4c2>
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8e0:	3308      	adds	r3, #8
 800f8e2:	681a      	ldr	r2, [r3, #0]
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8ea:	330c      	adds	r3, #12
 800f8ec:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8f4:	3306      	adds	r3, #6
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	f043 0320 	orr.w	r3, r3, #32
 800f8fc:	b2da      	uxtb	r2, r3
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f904:	3306      	adds	r3, #6
 800f906:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 800f908:	2300      	movs	r3, #0
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3728      	adds	r7, #40	; 0x28
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}

0800f912 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f912:	b580      	push	{r7, lr}
 800f914:	b086      	sub	sp, #24
 800f916:	af00      	add	r7, sp, #0
 800f918:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f7ff f9c4 	bl	800eca8 <validate>
 800f920:	4603      	mov	r3, r0
 800f922:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f924:	7dfb      	ldrb	r3, [r7, #23]
 800f926:	2b00      	cmp	r3, #0
 800f928:	f040 80cc 	bne.w	800fac4 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f932:	3306      	adds	r3, #6
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	f003 0320 	and.w	r3, r3, #32
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	f000 80c2 	beq.w	800fac4 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f946:	3306      	adds	r3, #6
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d022      	beq.n	800f998 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f95e:	3301      	adds	r3, #1
 800f960:	7818      	ldrb	r0, [r3, #0]
 800f962:	6879      	ldr	r1, [r7, #4]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f96a:	3318      	adds	r3, #24
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	2301      	movs	r3, #1
 800f970:	f7fc fb24 	bl	800bfbc <disk_write>
 800f974:	4603      	mov	r3, r0
 800f976:	2b00      	cmp	r3, #0
 800f978:	d001      	beq.n	800f97e <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800f97a:	2301      	movs	r3, #1
 800f97c:	e0a3      	b.n	800fac6 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f984:	3306      	adds	r3, #6
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f98c:	b2da      	uxtb	r2, r3
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f994:	3306      	adds	r3, #6
 800f996:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9a6:	331c      	adds	r3, #28
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	4610      	mov	r0, r2
 800f9ae:	f7fc fdd9 	bl	800c564 <move_window>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800f9b6:	7dfb      	ldrb	r3, [r7, #23]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f040 8083 	bne.w	800fac4 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	330b      	adds	r3, #11
 800f9cc:	781a      	ldrb	r2, [r3, #0]
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	330b      	adds	r3, #11
 800f9d2:	f042 0220 	orr.w	r2, r2, #32
 800f9d6:	b2d2      	uxtb	r2, r2
 800f9d8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9e0:	330c      	adds	r3, #12
 800f9e2:	681a      	ldr	r2, [r3, #0]
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	331c      	adds	r3, #28
 800f9e8:	b2d2      	uxtb	r2, r2
 800f9ea:	701a      	strb	r2, [r3, #0]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9f2:	330c      	adds	r3, #12
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	b29b      	uxth	r3, r3
 800f9f8:	0a1b      	lsrs	r3, r3, #8
 800f9fa:	b29a      	uxth	r2, r3
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	331d      	adds	r3, #29
 800fa00:	b2d2      	uxtb	r2, r2
 800fa02:	701a      	strb	r2, [r3, #0]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa0a:	330c      	adds	r3, #12
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	0c1a      	lsrs	r2, r3, #16
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	331e      	adds	r3, #30
 800fa14:	b2d2      	uxtb	r2, r2
 800fa16:	701a      	strb	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa1e:	330c      	adds	r3, #12
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	0e1a      	lsrs	r2, r3, #24
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	331f      	adds	r3, #31
 800fa28:	b2d2      	uxtb	r2, r2
 800fa2a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa32:	3310      	adds	r3, #16
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	4619      	mov	r1, r3
 800fa38:	6938      	ldr	r0, [r7, #16]
 800fa3a:	f7fd fd3a 	bl	800d4b2 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800fa3e:	f7f9 fc91 	bl	8009364 <get_fattime>
 800fa42:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	3316      	adds	r3, #22
 800fa48:	68fa      	ldr	r2, [r7, #12]
 800fa4a:	b2d2      	uxtb	r2, r2
 800fa4c:	701a      	strb	r2, [r3, #0]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	b29b      	uxth	r3, r3
 800fa52:	0a1b      	lsrs	r3, r3, #8
 800fa54:	b29a      	uxth	r2, r3
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	3317      	adds	r3, #23
 800fa5a:	b2d2      	uxtb	r2, r2
 800fa5c:	701a      	strb	r2, [r3, #0]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	0c1a      	lsrs	r2, r3, #16
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	3318      	adds	r3, #24
 800fa66:	b2d2      	uxtb	r2, r2
 800fa68:	701a      	strb	r2, [r3, #0]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	0e1a      	lsrs	r2, r3, #24
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	3319      	adds	r3, #25
 800fa72:	b2d2      	uxtb	r2, r2
 800fa74:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	3312      	adds	r3, #18
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	701a      	strb	r2, [r3, #0]
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	3313      	adds	r3, #19
 800fa82:	2200      	movs	r2, #0
 800fa84:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa8c:	3306      	adds	r3, #6
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	f023 0320 	bic.w	r3, r3, #32
 800fa94:	b2da      	uxtb	r2, r3
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa9c:	3306      	adds	r3, #6
 800fa9e:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faac:	3304      	adds	r3, #4
 800faae:	2201      	movs	r2, #1
 800fab0:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	4618      	mov	r0, r3
 800fabc:	f7fc fd86 	bl	800c5cc <sync_fs>
 800fac0:	4603      	mov	r3, r0
 800fac2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800fac4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3718      	adds	r7, #24
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}

0800face <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b084      	sub	sp, #16
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f7ff ff1b 	bl	800f912 <f_sync>
 800fadc:	4603      	mov	r3, r0
 800fade:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fae0:	7bfb      	ldrb	r3, [r7, #15]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d119      	bne.n	800fb1a <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f7ff f8de 	bl	800eca8 <validate>
 800faec:	4603      	mov	r3, r0
 800faee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800faf0:	7bfb      	ldrb	r3, [r7, #15]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d111      	bne.n	800fb1a <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800fafc:	3308      	adds	r3, #8
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7fc fc67 	bl	800c3d4 <dec_lock>
 800fb06:	4603      	mov	r3, r0
 800fb08:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fb0a:	7bfb      	ldrb	r3, [r7, #15]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d104      	bne.n	800fb1a <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb16:	2200      	movs	r2, #0
 800fb18:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3710      	adds	r7, #16
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b088      	sub	sp, #32
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d101      	bne.n	800fb38 <f_opendir+0x14>
 800fb34:	2309      	movs	r3, #9
 800fb36:	e090      	b.n	800fc5a <f_opendir+0x136>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800fb38:	4639      	mov	r1, r7
 800fb3a:	f107 0318 	add.w	r3, r7, #24
 800fb3e:	2200      	movs	r2, #0
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fe fd55 	bl	800e5f0 <find_volume>
 800fb46:	4603      	mov	r3, r0
 800fb48:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 800fb4a:	7ffb      	ldrb	r3, [r7, #31]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d17b      	bne.n	800fc48 <f_opendir+0x124>
		dp->fs = fs;
 800fb50:	69ba      	ldr	r2, [r7, #24]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb58:	601a      	str	r2, [r3, #0]
		INIT_BUF(*dp);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb60:	3318      	adds	r3, #24
 800fb62:	f107 020c 	add.w	r2, r7, #12
 800fb66:	601a      	str	r2, [r3, #0]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800fb6e:	4a3d      	ldr	r2, [pc, #244]	; (800fc64 <f_opendir+0x140>)
 800fb70:	601a      	str	r2, [r3, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	4619      	mov	r1, r3
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f7fe fc10 	bl	800e39c <follow_path>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800fb80:	7ffb      	ldrb	r3, [r7, #31]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d15b      	bne.n	800fc3e <f_opendir+0x11a>
			if (dp->dir) {						/* It is not the origin directory itself */
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb8c:	3314      	adds	r3, #20
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d01d      	beq.n	800fbd0 <f_opendir+0xac>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb9a:	3314      	adds	r3, #20
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	330b      	adds	r3, #11
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	f003 0310 	and.w	r3, r3, #16
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d010      	beq.n	800fbcc <f_opendir+0xa8>
					dp->sclust = ld_clust(fs, dp->dir);
 800fbaa:	69ba      	ldr	r2, [r7, #24]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbb2:	3314      	adds	r3, #20
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	4610      	mov	r0, r2
 800fbba:	f7fd fc4c 	bl	800d456 <ld_clust>
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbc6:	3308      	adds	r3, #8
 800fbc8:	601a      	str	r2, [r3, #0]
 800fbca:	e001      	b.n	800fbd0 <f_opendir+0xac>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800fbcc:	2305      	movs	r3, #5
 800fbce:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 800fbd0:	7ffb      	ldrb	r3, [r7, #31]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d133      	bne.n	800fc3e <f_opendir+0x11a>
				dp->id = fs->id;
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbdc:	3306      	adds	r3, #6
 800fbde:	881a      	ldrh	r2, [r3, #0]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbe6:	3304      	adds	r3, #4
 800fbe8:	801a      	strh	r2, [r3, #0]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fbea:	2100      	movs	r1, #0
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f7fd f9a4 	bl	800cf3a <dir_sdi>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 800fbf6:	7ffb      	ldrb	r3, [r7, #31]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d120      	bne.n	800fc3e <f_opendir+0x11a>
					if (dp->sclust) {
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc02:	3308      	adds	r3, #8
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d013      	beq.n	800fc32 <f_opendir+0x10e>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800fc0a:	2100      	movs	r1, #0
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f7fc fb21 	bl	800c254 <inc_lock>
 800fc12:	4602      	mov	r2, r0
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc1a:	331c      	adds	r3, #28
 800fc1c:	601a      	str	r2, [r3, #0]
						if (!dp->lockid)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc24:	331c      	adds	r3, #28
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d108      	bne.n	800fc3e <f_opendir+0x11a>
							res = FR_TOO_MANY_OPEN_FILES;
 800fc2c:	2312      	movs	r3, #18
 800fc2e:	77fb      	strb	r3, [r7, #31]
 800fc30:	e005      	b.n	800fc3e <f_opendir+0x11a>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc38:	331c      	adds	r3, #28
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	601a      	str	r2, [r3, #0]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fc3e:	7ffb      	ldrb	r3, [r7, #31]
 800fc40:	2b04      	cmp	r3, #4
 800fc42:	d101      	bne.n	800fc48 <f_opendir+0x124>
 800fc44:	2305      	movs	r3, #5
 800fc46:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800fc48:	7ffb      	ldrb	r3, [r7, #31]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d004      	beq.n	800fc58 <f_opendir+0x134>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc54:	2200      	movs	r2, #0
 800fc56:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fc58:	7ffb      	ldrb	r3, [r7, #31]
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3720      	adds	r7, #32
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	20000184 	.word	0x20000184

0800fc68 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b084      	sub	sp, #16
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f7ff f819 	bl	800eca8 <validate>
 800fc76:	4603      	mov	r3, r0
 800fc78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fc7a:	7bfb      	ldrb	r3, [r7, #15]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d118      	bne.n	800fcb2 <f_closedir+0x4a>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc86:	331c      	adds	r3, #28
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d009      	beq.n	800fca2 <f_closedir+0x3a>
			res = dec_lock(dp->lockid);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc94:	331c      	adds	r3, #28
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7fc fb9b 	bl	800c3d4 <dec_lock>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 800fca2:	7bfb      	ldrb	r3, [r7, #15]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d104      	bne.n	800fcb2 <f_closedir+0x4a>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcae:	2200      	movs	r2, #0
 800fcb0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800fcb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3710      	adds	r7, #16
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b086      	sub	sp, #24
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f7fe ffee 	bl	800eca8 <validate>
 800fccc:	4603      	mov	r3, r0
 800fcce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fcd0:	7dfb      	ldrb	r3, [r7, #23]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d13e      	bne.n	800fd54 <f_readdir+0x98>
		if (!fno) {
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d106      	bne.n	800fcea <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fcdc:	2100      	movs	r1, #0
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f7fd f92b 	bl	800cf3a <dir_sdi>
 800fce4:	4603      	mov	r3, r0
 800fce6:	75fb      	strb	r3, [r7, #23]
 800fce8:	e034      	b.n	800fd54 <f_readdir+0x98>
		} else {
			INIT_BUF(*dp);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcf0:	3318      	adds	r3, #24
 800fcf2:	f107 0208 	add.w	r2, r7, #8
 800fcf6:	601a      	str	r2, [r3, #0]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800fcfe:	4a18      	ldr	r2, [pc, #96]	; (800fd60 <f_readdir+0xa4>)
 800fd00:	601a      	str	r2, [r3, #0]
			res = dir_read(dp, 0);			/* Read an item */
 800fd02:	2100      	movs	r1, #0
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f7fd fec6 	bl	800da96 <dir_read>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800fd0e:	7dfb      	ldrb	r3, [r7, #23]
 800fd10:	2b04      	cmp	r3, #4
 800fd12:	d107      	bne.n	800fd24 <f_readdir+0x68>
				dp->sect = 0;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd1a:	3310      	adds	r3, #16
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	601a      	str	r2, [r3, #0]
				res = FR_OK;
 800fd20:	2300      	movs	r3, #0
 800fd22:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 800fd24:	7dfb      	ldrb	r3, [r7, #23]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d114      	bne.n	800fd54 <f_readdir+0x98>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fd2a:	6839      	ldr	r1, [r7, #0]
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f7fe f89b 	bl	800de68 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fd32:	2100      	movs	r1, #0
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f7fd f9db 	bl	800d0f0 <dir_next>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 800fd3e:	7dfb      	ldrb	r3, [r7, #23]
 800fd40:	2b04      	cmp	r3, #4
 800fd42:	d107      	bne.n	800fd54 <f_readdir+0x98>
					dp->sect = 0;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd4a:	3310      	adds	r3, #16
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	601a      	str	r2, [r3, #0]
					res = FR_OK;
 800fd50:	2300      	movs	r3, #0
 800fd52:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800fd54:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3718      	adds	r7, #24
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	20000184 	.word	0x20000184

0800fd64 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	f107 0320 	add.w	r3, r7, #32
 800fd70:	3b1c      	subs	r3, #28
 800fd72:	6018      	str	r0, [r3, #0]
 800fd74:	463b      	mov	r3, r7
 800fd76:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 800fd78:	f107 0120 	add.w	r1, r7, #32
 800fd7c:	391c      	subs	r1, #28
 800fd7e:	f107 0320 	add.w	r3, r7, #32
 800fd82:	3b0c      	subs	r3, #12
 800fd84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd88:	2200      	movs	r2, #0
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7fe fc30 	bl	800e5f0 <find_volume>
 800fd90:	4603      	mov	r3, r0
 800fd92:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800fd96:	f102 021f 	add.w	r2, r2, #31
 800fd9a:	7013      	strb	r3, [r2, #0]
	if (res == FR_OK) {
 800fd9c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800fda0:	f103 031f 	add.w	r3, r3, #31
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d144      	bne.n	800fe34 <f_stat+0xd0>
		INIT_BUF(dj);
 800fdaa:	f107 0320 	add.w	r3, r7, #32
 800fdae:	3b0c      	subs	r3, #12
 800fdb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdb4:	3318      	adds	r3, #24
 800fdb6:	f107 0220 	add.w	r2, r7, #32
 800fdba:	3a18      	subs	r2, #24
 800fdbc:	601a      	str	r2, [r3, #0]
 800fdbe:	f107 0320 	add.w	r3, r7, #32
 800fdc2:	3b0c      	subs	r3, #12
 800fdc4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800fdc8:	4a1f      	ldr	r2, [pc, #124]	; (800fe48 <f_stat+0xe4>)
 800fdca:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800fdcc:	f107 0320 	add.w	r3, r7, #32
 800fdd0:	3b1c      	subs	r3, #28
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	f107 0320 	add.w	r3, r7, #32
 800fdd8:	3b0c      	subs	r3, #12
 800fdda:	4611      	mov	r1, r2
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7fe fadd 	bl	800e39c <follow_path>
 800fde2:	4603      	mov	r3, r0
 800fde4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800fde8:	f102 021f 	add.w	r2, r2, #31
 800fdec:	7013      	strb	r3, [r2, #0]
		if (res == FR_OK) {				/* Follow completed */
 800fdee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800fdf2:	f103 031f 	add.w	r3, r3, #31
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d11b      	bne.n	800fe34 <f_stat+0xd0>
			if (dj.dir) {		/* Found an object */
 800fdfc:	f107 0320 	add.w	r3, r7, #32
 800fe00:	3b0c      	subs	r3, #12
 800fe02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe06:	3314      	adds	r3, #20
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d00c      	beq.n	800fe28 <f_stat+0xc4>
				if (fno) get_fileinfo(&dj, fno);
 800fe0e:	463b      	mov	r3, r7
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d00e      	beq.n	800fe34 <f_stat+0xd0>
 800fe16:	463a      	mov	r2, r7
 800fe18:	f107 0320 	add.w	r3, r7, #32
 800fe1c:	3b0c      	subs	r3, #12
 800fe1e:	6811      	ldr	r1, [r2, #0]
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7fe f821 	bl	800de68 <get_fileinfo>
 800fe26:	e005      	b.n	800fe34 <f_stat+0xd0>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 800fe28:	2306      	movs	r3, #6
 800fe2a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800fe2e:	f102 021f 	add.w	r2, r2, #31
 800fe32:	7013      	strb	r3, [r2, #0]
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 800fe34:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800fe38:	f103 031f 	add.w	r3, r3, #31
 800fe3c:	781b      	ldrb	r3, [r3, #0]
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}
 800fe48:	20000184 	.word	0x20000184

0800fe4c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b08e      	sub	sp, #56	; 0x38
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	60f8      	str	r0, [r7, #12]
 800fe54:	60b9      	str	r1, [r7, #8]
 800fe56:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800fe58:	f107 030c 	add.w	r3, r7, #12
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	4619      	mov	r1, r3
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f7fe fbc5 	bl	800e5f0 <find_volume>
 800fe66:	4603      	mov	r3, r0
 800fe68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800fe72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	f040 80c4 	bne.w	8010004 <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe82:	3310      	adds	r3, #16
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	69fb      	ldr	r3, [r7, #28]
 800fe88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe8c:	3314      	adds	r3, #20
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	3b02      	subs	r3, #2
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d807      	bhi.n	800fea6 <f_getfree+0x5a>
			*nclst = fs->free_clust;
 800fe96:	69fb      	ldr	r3, [r7, #28]
 800fe98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe9c:	3310      	adds	r3, #16
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	601a      	str	r2, [r3, #0]
 800fea4:	e0ae      	b.n	8010004 <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800fea6:	69fb      	ldr	r3, [r7, #28]
 800fea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800feb0:	2300      	movs	r3, #0
 800feb2:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800feb4:	7efb      	ldrb	r3, [r7, #27]
 800feb6:	2b01      	cmp	r3, #1
 800feb8:	d127      	bne.n	800ff0a <f_getfree+0xbe>
				clst = 2;
 800feba:	2302      	movs	r3, #2
 800febc:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800febe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fec0:	69f8      	ldr	r0, [r7, #28]
 800fec2:	f7fc fc79 	bl	800c7b8 <get_fat>
 800fec6:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fece:	d103      	bne.n	800fed8 <f_getfree+0x8c>
 800fed0:	2301      	movs	r3, #1
 800fed2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fed6:	e07f      	b.n	800ffd8 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d103      	bne.n	800fee6 <f_getfree+0x9a>
 800fede:	2302      	movs	r3, #2
 800fee0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fee4:	e078      	b.n	800ffd8 <f_getfree+0x18c>
					if (stat == 0) n++;
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d102      	bne.n	800fef2 <f_getfree+0xa6>
 800feec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feee:	3301      	adds	r3, #1
 800fef0:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800fef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef4:	3301      	adds	r3, #1
 800fef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fefe:	3314      	adds	r3, #20
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d3da      	bcc.n	800febe <f_getfree+0x72>
 800ff08:	e066      	b.n	800ffd8 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 800ff0a:	69fb      	ldr	r3, [r7, #28]
 800ff0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff10:	3314      	adds	r3, #20
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800ff16:	69fb      	ldr	r3, [r7, #28]
 800ff18:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800ff20:	2300      	movs	r3, #0
 800ff22:	627b      	str	r3, [r7, #36]	; 0x24
 800ff24:	2300      	movs	r3, #0
 800ff26:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800ff28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d115      	bne.n	800ff5a <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800ff2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff30:	1c5a      	adds	r2, r3, #1
 800ff32:	62ba      	str	r2, [r7, #40]	; 0x28
 800ff34:	4619      	mov	r1, r3
 800ff36:	69f8      	ldr	r0, [r7, #28]
 800ff38:	f7fc fb14 	bl	800c564 <move_window>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800ff42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d145      	bne.n	800ffd6 <f_getfree+0x18a>
						p = fs->win.d8;
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff54:	330a      	adds	r3, #10
 800ff56:	881b      	ldrh	r3, [r3, #0]
 800ff58:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800ff5a:	7efb      	ldrb	r3, [r7, #27]
 800ff5c:	2b02      	cmp	r3, #2
 800ff5e:	d115      	bne.n	800ff8c <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800ff60:	6a3b      	ldr	r3, [r7, #32]
 800ff62:	3301      	adds	r3, #1
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	021b      	lsls	r3, r3, #8
 800ff68:	b21a      	sxth	r2, r3
 800ff6a:	6a3b      	ldr	r3, [r7, #32]
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	b21b      	sxth	r3, r3
 800ff70:	4313      	orrs	r3, r2
 800ff72:	b21b      	sxth	r3, r3
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d102      	bne.n	800ff7e <f_getfree+0x132>
 800ff78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800ff7e:	6a3b      	ldr	r3, [r7, #32]
 800ff80:	3302      	adds	r3, #2
 800ff82:	623b      	str	r3, [r7, #32]
 800ff84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff86:	3b02      	subs	r3, #2
 800ff88:	627b      	str	r3, [r7, #36]	; 0x24
 800ff8a:	e01d      	b.n	800ffc8 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800ff8c:	6a3b      	ldr	r3, [r7, #32]
 800ff8e:	3303      	adds	r3, #3
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	061a      	lsls	r2, r3, #24
 800ff94:	6a3b      	ldr	r3, [r7, #32]
 800ff96:	3302      	adds	r3, #2
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	041b      	lsls	r3, r3, #16
 800ff9c:	4313      	orrs	r3, r2
 800ff9e:	6a3a      	ldr	r2, [r7, #32]
 800ffa0:	3201      	adds	r2, #1
 800ffa2:	7812      	ldrb	r2, [r2, #0]
 800ffa4:	0212      	lsls	r2, r2, #8
 800ffa6:	4313      	orrs	r3, r2
 800ffa8:	6a3a      	ldr	r2, [r7, #32]
 800ffaa:	7812      	ldrb	r2, [r2, #0]
 800ffac:	4313      	orrs	r3, r2
 800ffae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d102      	bne.n	800ffbc <f_getfree+0x170>
 800ffb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb8:	3301      	adds	r3, #1
 800ffba:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800ffbc:	6a3b      	ldr	r3, [r7, #32]
 800ffbe:	3304      	adds	r3, #4
 800ffc0:	623b      	str	r3, [r7, #32]
 800ffc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc4:	3b04      	subs	r3, #4
 800ffc6:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800ffc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffca:	3b01      	subs	r3, #1
 800ffcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d1a9      	bne.n	800ff28 <f_getfree+0xdc>
 800ffd4:	e000      	b.n	800ffd8 <f_getfree+0x18c>
						if (res != FR_OK) break;
 800ffd6:	bf00      	nop
			}
			fs->free_clust = n;
 800ffd8:	69fb      	ldr	r3, [r7, #28]
 800ffda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffde:	3310      	adds	r3, #16
 800ffe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffe2:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800ffe4:	69fb      	ldr	r3, [r7, #28]
 800ffe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffea:	3305      	adds	r3, #5
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	f043 0301 	orr.w	r3, r3, #1
 800fff2:	b2da      	uxtb	r2, r3
 800fff4:	69fb      	ldr	r3, [r7, #28]
 800fff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fffa:	3305      	adds	r3, #5
 800fffc:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010002:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8010004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8010008:	4618      	mov	r0, r3
 801000a:	3738      	adds	r7, #56	; 0x38
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010010:	b480      	push	{r7}
 8010012:	b087      	sub	sp, #28
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	4613      	mov	r3, r2
 801001c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801001e:	2301      	movs	r3, #1
 8010020:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010022:	2300      	movs	r3, #0
 8010024:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8010026:	4b1e      	ldr	r3, [pc, #120]	; (80100a0 <FATFS_LinkDriverEx+0x90>)
 8010028:	7a5b      	ldrb	r3, [r3, #9]
 801002a:	b2db      	uxtb	r3, r3
 801002c:	2b01      	cmp	r3, #1
 801002e:	d831      	bhi.n	8010094 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010030:	4b1b      	ldr	r3, [pc, #108]	; (80100a0 <FATFS_LinkDriverEx+0x90>)
 8010032:	7a5b      	ldrb	r3, [r3, #9]
 8010034:	b2db      	uxtb	r3, r3
 8010036:	461a      	mov	r2, r3
 8010038:	4b19      	ldr	r3, [pc, #100]	; (80100a0 <FATFS_LinkDriverEx+0x90>)
 801003a:	2100      	movs	r1, #0
 801003c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 801003e:	4b18      	ldr	r3, [pc, #96]	; (80100a0 <FATFS_LinkDriverEx+0x90>)
 8010040:	7a5b      	ldrb	r3, [r3, #9]
 8010042:	b2db      	uxtb	r3, r3
 8010044:	4a16      	ldr	r2, [pc, #88]	; (80100a0 <FATFS_LinkDriverEx+0x90>)
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4413      	add	r3, r2
 801004a:	68fa      	ldr	r2, [r7, #12]
 801004c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 801004e:	4b14      	ldr	r3, [pc, #80]	; (80100a0 <FATFS_LinkDriverEx+0x90>)
 8010050:	7a5b      	ldrb	r3, [r3, #9]
 8010052:	b2db      	uxtb	r3, r3
 8010054:	461a      	mov	r2, r3
 8010056:	4b12      	ldr	r3, [pc, #72]	; (80100a0 <FATFS_LinkDriverEx+0x90>)
 8010058:	4413      	add	r3, r2
 801005a:	79fa      	ldrb	r2, [r7, #7]
 801005c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801005e:	4b10      	ldr	r3, [pc, #64]	; (80100a0 <FATFS_LinkDriverEx+0x90>)
 8010060:	7a5b      	ldrb	r3, [r3, #9]
 8010062:	b2db      	uxtb	r3, r3
 8010064:	1c5a      	adds	r2, r3, #1
 8010066:	b2d1      	uxtb	r1, r2
 8010068:	4a0d      	ldr	r2, [pc, #52]	; (80100a0 <FATFS_LinkDriverEx+0x90>)
 801006a:	7251      	strb	r1, [r2, #9]
 801006c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801006e:	7dbb      	ldrb	r3, [r7, #22]
 8010070:	3330      	adds	r3, #48	; 0x30
 8010072:	b2da      	uxtb	r2, r3
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	3301      	adds	r3, #1
 801007c:	223a      	movs	r2, #58	; 0x3a
 801007e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	3302      	adds	r3, #2
 8010084:	222f      	movs	r2, #47	; 0x2f
 8010086:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	3303      	adds	r3, #3
 801008c:	2200      	movs	r2, #0
 801008e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010090:	2300      	movs	r3, #0
 8010092:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8010094:	7dfb      	ldrb	r3, [r7, #23]
}
 8010096:	4618      	mov	r0, r3
 8010098:	371c      	adds	r7, #28
 801009a:	46bd      	mov	sp, r7
 801009c:	bc80      	pop	{r7}
 801009e:	4770      	bx	lr
 80100a0:	20000384 	.word	0x20000384

080100a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80100ae:	2200      	movs	r2, #0
 80100b0:	6839      	ldr	r1, [r7, #0]
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f7ff ffac 	bl	8010010 <FATFS_LinkDriverEx>
 80100b8:	4603      	mov	r3, r0
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3708      	adds	r7, #8
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}

080100c2 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80100c2:	b480      	push	{r7}
 80100c4:	b083      	sub	sp, #12
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	4603      	mov	r3, r0
 80100ca:	71fb      	strb	r3, [r7, #7]
  return RES_OK;
 80100cc:	2300      	movs	r3, #0
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	370c      	adds	r7, #12
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bc80      	pop	{r7}
 80100d6:	4770      	bx	lr

080100d8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	4603      	mov	r3, r0
 80100e0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80100e2:	2301      	movs	r3, #1
 80100e4:	73fb      	strb	r3, [r7, #15]
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 80100e6:	79fb      	ldrb	r3, [r7, #7]
 80100e8:	4619      	mov	r1, r3
 80100ea:	4808      	ldr	r0, [pc, #32]	; (801010c <USBH_status+0x34>)
 80100ec:	f7f9 fe63 	bl	8009db6 <USBH_MSC_UnitIsReady>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d002      	beq.n	80100fc <USBH_status+0x24>
  {
    res = RES_OK;
 80100f6:	2300      	movs	r3, #0
 80100f8:	73fb      	strb	r3, [r7, #15]
 80100fa:	e001      	b.n	8010100 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80100fc:	2301      	movs	r3, #1
 80100fe:	73fb      	strb	r3, [r7, #15]
  }
  
  return res;
 8010100:	7bfb      	ldrb	r3, [r7, #15]
}
 8010102:	4618      	mov	r0, r3
 8010104:	3710      	adds	r7, #16
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	200027a8 	.word	0x200027a8

08010110 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b094      	sub	sp, #80	; 0x50
 8010114:	af02      	add	r7, sp, #8
 8010116:	60b9      	str	r1, [r7, #8]
 8010118:	607a      	str	r2, [r7, #4]
 801011a:	603b      	str	r3, [r7, #0]
 801011c:	4603      	mov	r3, r0
 801011e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010120:	2301      	movs	r3, #1
 8010122:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 8010126:	2300      	movs	r3, #0
 8010128:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	f003 0303 	and.w	r3, r3, #3
 8010132:	2b00      	cmp	r3, #0
 8010134:	d002      	beq.n	801013c <USBH_read+0x2c>
      {
        break;
      }
    }
#else
    return res;
 8010136:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801013a:	e02c      	b.n	8010196 <USBH_read+0x86>
#endif
  }
  else
  {
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 801013c:	7bf9      	ldrb	r1, [r7, #15]
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	9300      	str	r3, [sp, #0]
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	4816      	ldr	r0, [pc, #88]	; (80101a0 <USBH_read+0x90>)
 8010148:	f7f9 fe7e 	bl	8009e48 <USBH_MSC_Read>
 801014c:	4603      	mov	r3, r0
 801014e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 8010152:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8010156:	2b00      	cmp	r3, #0
 8010158:	d103      	bne.n	8010162 <USBH_read+0x52>
  {
    res = RES_OK;
 801015a:	2300      	movs	r3, #0
 801015c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010160:	e017      	b.n	8010192 <USBH_read+0x82>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 8010162:	f107 0210 	add.w	r2, r7, #16
 8010166:	7bfb      	ldrb	r3, [r7, #15]
 8010168:	4619      	mov	r1, r3
 801016a:	480d      	ldr	r0, [pc, #52]	; (80101a0 <USBH_read+0x90>)
 801016c:	f7f9 fe48 	bl	8009e00 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 8010170:	7f7b      	ldrb	r3, [r7, #29]
 8010172:	2b3a      	cmp	r3, #58	; 0x3a
 8010174:	d005      	beq.n	8010182 <USBH_read+0x72>
 8010176:	2b3a      	cmp	r3, #58	; 0x3a
 8010178:	dc07      	bgt.n	801018a <USBH_read+0x7a>
 801017a:	2b04      	cmp	r3, #4
 801017c:	d001      	beq.n	8010182 <USBH_read+0x72>
 801017e:	2b28      	cmp	r3, #40	; 0x28
 8010180:	d103      	bne.n	801018a <USBH_read+0x7a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE: 
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
 8010182:	2303      	movs	r3, #3
 8010184:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8010188:	e003      	b.n	8010192 <USBH_read+0x82>
      
    default:
      res = RES_ERROR;
 801018a:	2301      	movs	r3, #1
 801018c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8010190:	bf00      	nop
    }
  }
  
  return res;
 8010192:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010196:	4618      	mov	r0, r3
 8010198:	3748      	adds	r7, #72	; 0x48
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	200027a8 	.word	0x200027a8

080101a4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b094      	sub	sp, #80	; 0x50
 80101a8:	af02      	add	r7, sp, #8
 80101aa:	60b9      	str	r1, [r7, #8]
 80101ac:	607a      	str	r2, [r7, #4]
 80101ae:	603b      	str	r3, [r7, #0]
 80101b0:	4603      	mov	r3, r0
 80101b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR; 
 80101b4:	2301      	movs	r3, #1
 80101b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;  
 80101ba:	2300      	movs	r3, #0
 80101bc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	f003 0303 	and.w	r3, r3, #3
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d002      	beq.n	80101d0 <USBH_write+0x2c>
      {
        break;
      }
    }
#else
    return res;
 80101ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80101ce:	e034      	b.n	801023a <USBH_write+0x96>
#endif
  }
  else
  {
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 80101d0:	7bf9      	ldrb	r1, [r7, #15]
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	9300      	str	r3, [sp, #0]
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	481a      	ldr	r0, [pc, #104]	; (8010244 <USBH_write+0xa0>)
 80101dc:	f7f9 fe9d 	bl	8009f1a <USBH_MSC_Write>
 80101e0:	4603      	mov	r3, r0
 80101e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 80101e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d103      	bne.n	80101f6 <USBH_write+0x52>
  {
    res = RES_OK;
 80101ee:	2300      	movs	r3, #0
 80101f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80101f4:	e01f      	b.n	8010236 <USBH_write+0x92>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 80101f6:	f107 0210 	add.w	r2, r7, #16
 80101fa:	7bfb      	ldrb	r3, [r7, #15]
 80101fc:	4619      	mov	r1, r3
 80101fe:	4811      	ldr	r0, [pc, #68]	; (8010244 <USBH_write+0xa0>)
 8010200:	f7f9 fdfe 	bl	8009e00 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 8010204:	7f7b      	ldrb	r3, [r7, #29]
 8010206:	2b3a      	cmp	r3, #58	; 0x3a
 8010208:	d00d      	beq.n	8010226 <USBH_write+0x82>
 801020a:	2b3a      	cmp	r3, #58	; 0x3a
 801020c:	dc0f      	bgt.n	801022e <USBH_write+0x8a>
 801020e:	2b28      	cmp	r3, #40	; 0x28
 8010210:	d009      	beq.n	8010226 <USBH_write+0x82>
 8010212:	2b28      	cmp	r3, #40	; 0x28
 8010214:	dc0b      	bgt.n	801022e <USBH_write+0x8a>
 8010216:	2b04      	cmp	r3, #4
 8010218:	d005      	beq.n	8010226 <USBH_write+0x82>
 801021a:	2b27      	cmp	r3, #39	; 0x27
 801021c:	d107      	bne.n	801022e <USBH_write+0x8a>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 801021e:	2302      	movs	r3, #2
 8010220:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8010224:	e007      	b.n	8010236 <USBH_write+0x92>
      
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");      
      res = RES_NOTRDY;
 8010226:	2303      	movs	r3, #3
 8010228:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 801022c:	e003      	b.n	8010236 <USBH_write+0x92>
      
    default:
      res = RES_ERROR;
 801022e:	2301      	movs	r3, #1
 8010230:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8010234:	bf00      	nop
    }
  }
  
  return res;   
 8010236:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801023a:	4618      	mov	r0, r3
 801023c:	3748      	adds	r7, #72	; 0x48
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	200027a8 	.word	0x200027a8

08010248 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b090      	sub	sp, #64	; 0x40
 801024c:	af00      	add	r7, sp, #0
 801024e:	4603      	mov	r3, r0
 8010250:	603a      	str	r2, [r7, #0]
 8010252:	71fb      	strb	r3, [r7, #7]
 8010254:	460b      	mov	r3, r1
 8010256:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010258:	2301      	movs	r3, #1
 801025a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;
  
  switch (cmd)
 801025e:	79bb      	ldrb	r3, [r7, #6]
 8010260:	2b03      	cmp	r3, #3
 8010262:	d850      	bhi.n	8010306 <USBH_ioctl+0xbe>
 8010264:	a201      	add	r2, pc, #4	; (adr r2, 801026c <USBH_ioctl+0x24>)
 8010266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801026a:	bf00      	nop
 801026c:	0801027d 	.word	0x0801027d
 8010270:	08010285 	.word	0x08010285
 8010274:	080102af 	.word	0x080102af
 8010278:	080102db 	.word	0x080102db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC: 
    res = RES_OK;
 801027c:	2300      	movs	r3, #0
 801027e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8010282:	e043      	b.n	801030c <USBH_ioctl+0xc4>
    
  /* Get number of sectors on the disk (DWORD) */  
  case GET_SECTOR_COUNT : 
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 8010284:	f107 0208 	add.w	r2, r7, #8
 8010288:	79fb      	ldrb	r3, [r7, #7]
 801028a:	4619      	mov	r1, r3
 801028c:	4822      	ldr	r0, [pc, #136]	; (8010318 <USBH_ioctl+0xd0>)
 801028e:	f7f9 fdb7 	bl	8009e00 <USBH_MSC_GetLUNInfo>
 8010292:	4603      	mov	r3, r0
 8010294:	2b00      	cmp	r3, #0
 8010296:	d106      	bne.n	80102a6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8010298:	68fa      	ldr	r2, [r7, #12]
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 801029e:	2300      	movs	r3, #0
 80102a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80102a4:	e032      	b.n	801030c <USBH_ioctl+0xc4>
      res = RES_ERROR;
 80102a6:	2301      	movs	r3, #1
 80102a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80102ac:	e02e      	b.n	801030c <USBH_ioctl+0xc4>
    
  /* Get R/W sector size (WORD) */  
  case GET_SECTOR_SIZE :	
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 80102ae:	f107 0208 	add.w	r2, r7, #8
 80102b2:	79fb      	ldrb	r3, [r7, #7]
 80102b4:	4619      	mov	r1, r3
 80102b6:	4818      	ldr	r0, [pc, #96]	; (8010318 <USBH_ioctl+0xd0>)
 80102b8:	f7f9 fda2 	bl	8009e00 <USBH_MSC_GetLUNInfo>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d107      	bne.n	80102d2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80102c2:	8a3b      	ldrh	r3, [r7, #16]
 80102c4:	461a      	mov	r2, r3
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80102ca:	2300      	movs	r3, #0
 80102cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80102d0:	e01c      	b.n	801030c <USBH_ioctl+0xc4>
      res = RES_ERROR;
 80102d2:	2301      	movs	r3, #1
 80102d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80102d8:	e018      	b.n	801030c <USBH_ioctl+0xc4>
    
    /* Get erase block size in unit of sector (DWORD) */ 
  case GET_BLOCK_SIZE : 
    
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 80102da:	f107 0208 	add.w	r2, r7, #8
 80102de:	79fb      	ldrb	r3, [r7, #7]
 80102e0:	4619      	mov	r1, r3
 80102e2:	480d      	ldr	r0, [pc, #52]	; (8010318 <USBH_ioctl+0xd0>)
 80102e4:	f7f9 fd8c 	bl	8009e00 <USBH_MSC_GetLUNInfo>
 80102e8:	4603      	mov	r3, r0
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d107      	bne.n	80102fe <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80102ee:	8a3b      	ldrh	r3, [r7, #16]
 80102f0:	461a      	mov	r2, r3
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80102f6:	2300      	movs	r3, #0
 80102f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80102fc:	e006      	b.n	801030c <USBH_ioctl+0xc4>
      res = RES_ERROR;
 80102fe:	2301      	movs	r3, #1
 8010300:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8010304:	e002      	b.n	801030c <USBH_ioctl+0xc4>
    
  default:
    res = RES_PARERR;
 8010306:	2304      	movs	r3, #4
 8010308:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  return res;
 801030c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010310:	4618      	mov	r0, r3
 8010312:	3740      	adds	r7, #64	; 0x40
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}
 8010318:	200027a8 	.word	0x200027a8

0801031c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 801031c:	b480      	push	{r7}
 801031e:	b085      	sub	sp, #20
 8010320:	af00      	add	r7, sp, #0
 8010322:	4603      	mov	r3, r0
 8010324:	6039      	str	r1, [r7, #0]
 8010326:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010328:	88fb      	ldrh	r3, [r7, #6]
 801032a:	2b7f      	cmp	r3, #127	; 0x7f
 801032c:	d802      	bhi.n	8010334 <ff_convert+0x18>
		c = chr;
 801032e:	88fb      	ldrh	r3, [r7, #6]
 8010330:	81fb      	strh	r3, [r7, #14]
 8010332:	e025      	b.n	8010380 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00b      	beq.n	8010352 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801033a:	88fb      	ldrh	r3, [r7, #6]
 801033c:	2bff      	cmp	r3, #255	; 0xff
 801033e:	d805      	bhi.n	801034c <ff_convert+0x30>
 8010340:	88fb      	ldrh	r3, [r7, #6]
 8010342:	3b80      	subs	r3, #128	; 0x80
 8010344:	4a11      	ldr	r2, [pc, #68]	; (801038c <ff_convert+0x70>)
 8010346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801034a:	e000      	b.n	801034e <ff_convert+0x32>
 801034c:	2300      	movs	r3, #0
 801034e:	81fb      	strh	r3, [r7, #14]
 8010350:	e016      	b.n	8010380 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8010352:	2300      	movs	r3, #0
 8010354:	81fb      	strh	r3, [r7, #14]
 8010356:	e009      	b.n	801036c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010358:	89fb      	ldrh	r3, [r7, #14]
 801035a:	4a0c      	ldr	r2, [pc, #48]	; (801038c <ff_convert+0x70>)
 801035c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010360:	88fa      	ldrh	r2, [r7, #6]
 8010362:	429a      	cmp	r2, r3
 8010364:	d006      	beq.n	8010374 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010366:	89fb      	ldrh	r3, [r7, #14]
 8010368:	3301      	adds	r3, #1
 801036a:	81fb      	strh	r3, [r7, #14]
 801036c:	89fb      	ldrh	r3, [r7, #14]
 801036e:	2b7f      	cmp	r3, #127	; 0x7f
 8010370:	d9f2      	bls.n	8010358 <ff_convert+0x3c>
 8010372:	e000      	b.n	8010376 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010374:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010376:	89fb      	ldrh	r3, [r7, #14]
 8010378:	3380      	adds	r3, #128	; 0x80
 801037a:	b29b      	uxth	r3, r3
 801037c:	b2db      	uxtb	r3, r3
 801037e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010380:	89fb      	ldrh	r3, [r7, #14]
}
 8010382:	4618      	mov	r0, r3
 8010384:	3714      	adds	r7, #20
 8010386:	46bd      	mov	sp, r7
 8010388:	bc80      	pop	{r7}
 801038a:	4770      	bx	lr
 801038c:	08011508 	.word	0x08011508

08010390 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8010390:	b480      	push	{r7}
 8010392:	b085      	sub	sp, #20
 8010394:	af00      	add	r7, sp, #0
 8010396:	4603      	mov	r3, r0
 8010398:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 801039a:	2300      	movs	r3, #0
 801039c:	60fb      	str	r3, [r7, #12]
 801039e:	e002      	b.n	80103a6 <ff_wtoupper+0x16>
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	3301      	adds	r3, #1
 80103a4:	60fb      	str	r3, [r7, #12]
 80103a6:	4a0f      	ldr	r2, [pc, #60]	; (80103e4 <ff_wtoupper+0x54>)
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d006      	beq.n	80103c0 <ff_wtoupper+0x30>
 80103b2:	4a0c      	ldr	r2, [pc, #48]	; (80103e4 <ff_wtoupper+0x54>)
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103ba:	88fa      	ldrh	r2, [r7, #6]
 80103bc:	429a      	cmp	r2, r3
 80103be:	d1ef      	bne.n	80103a0 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80103c0:	4a08      	ldr	r2, [pc, #32]	; (80103e4 <ff_wtoupper+0x54>)
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d004      	beq.n	80103d6 <ff_wtoupper+0x46>
 80103cc:	4a06      	ldr	r2, [pc, #24]	; (80103e8 <ff_wtoupper+0x58>)
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103d4:	e000      	b.n	80103d8 <ff_wtoupper+0x48>
 80103d6:	88fb      	ldrh	r3, [r7, #6]
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3714      	adds	r7, #20
 80103dc:	46bd      	mov	sp, r7
 80103de:	bc80      	pop	{r7}
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop
 80103e4:	08011608 	.word	0x08011608
 80103e8:	080117e8 	.word	0x080117e8

080103ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80103f0:	2201      	movs	r2, #1
 80103f2:	490e      	ldr	r1, [pc, #56]	; (801042c <MX_USB_HOST_Init+0x40>)
 80103f4:	480e      	ldr	r0, [pc, #56]	; (8010430 <MX_USB_HOST_Init+0x44>)
 80103f6:	f7fa fb47 	bl	800aa88 <USBH_Init>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d001      	beq.n	8010404 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010400:	f7f2 f8fc 	bl	80025fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8010404:	490b      	ldr	r1, [pc, #44]	; (8010434 <MX_USB_HOST_Init+0x48>)
 8010406:	480a      	ldr	r0, [pc, #40]	; (8010430 <MX_USB_HOST_Init+0x44>)
 8010408:	f7fa fbc2 	bl	800ab90 <USBH_RegisterClass>
 801040c:	4603      	mov	r3, r0
 801040e:	2b00      	cmp	r3, #0
 8010410:	d001      	beq.n	8010416 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010412:	f7f2 f8f3 	bl	80025fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010416:	4806      	ldr	r0, [pc, #24]	; (8010430 <MX_USB_HOST_Init+0x44>)
 8010418:	f7fa fc44 	bl	800aca4 <USBH_Start>
 801041c:	4603      	mov	r3, r0
 801041e:	2b00      	cmp	r3, #0
 8010420:	d001      	beq.n	8010426 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010422:	f7f2 f8eb 	bl	80025fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010426:	bf00      	nop
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	0801044d 	.word	0x0801044d
 8010430:	200027a8 	.word	0x200027a8
 8010434:	20000024 	.word	0x20000024

08010438 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 801043c:	4802      	ldr	r0, [pc, #8]	; (8010448 <MX_USB_HOST_Process+0x10>)
 801043e:	f7fa fc41 	bl	800acc4 <USBH_Process>
}
 8010442:	bf00      	nop
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	200027a8 	.word	0x200027a8

0801044c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	460b      	mov	r3, r1
 8010456:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010458:	78fb      	ldrb	r3, [r7, #3]
 801045a:	3b01      	subs	r3, #1
 801045c:	2b04      	cmp	r3, #4
 801045e:	d822      	bhi.n	80104a6 <USBH_UserProcess+0x5a>
 8010460:	a201      	add	r2, pc, #4	; (adr r2, 8010468 <USBH_UserProcess+0x1c>)
 8010462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010466:	bf00      	nop
 8010468:	080104a7 	.word	0x080104a7
 801046c:	08010489 	.word	0x08010489
 8010470:	080104a7 	.word	0x080104a7
 8010474:	0801049f 	.word	0x0801049f
 8010478:	0801047d 	.word	0x0801047d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801047c:	4b0c      	ldr	r3, [pc, #48]	; (80104b0 <USBH_UserProcess+0x64>)
 801047e:	2203      	movs	r2, #3
 8010480:	701a      	strb	r2, [r3, #0]
  Unmount_USB();
 8010482:	f7f1 f865 	bl	8001550 <Unmount_USB>
  break;
 8010486:	e00f      	b.n	80104a8 <USBH_UserProcess+0x5c>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010488:	4b09      	ldr	r3, [pc, #36]	; (80104b0 <USBH_UserProcess+0x64>)
 801048a:	2202      	movs	r2, #2
 801048c:	701a      	strb	r2, [r3, #0]


  Mount_USB();
 801048e:	f7f1 f84b 	bl	8001528 <Mount_USB>
  Check_USB_Details();
 8010492:	f7f1 f9d9 	bl	8001848 <Check_USB_Details>
  Scan_USB("/");
 8010496:	4807      	ldr	r0, [pc, #28]	; (80104b4 <USBH_UserProcess+0x68>)
 8010498:	f7f1 f86c 	bl	8001574 <Scan_USB>


  break;
 801049c:	e004      	b.n	80104a8 <USBH_UserProcess+0x5c>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801049e:	4b04      	ldr	r3, [pc, #16]	; (80104b0 <USBH_UserProcess+0x64>)
 80104a0:	2201      	movs	r2, #1
 80104a2:	701a      	strb	r2, [r3, #0]
  break;
 80104a4:	e000      	b.n	80104a8 <USBH_UserProcess+0x5c>

  default:
  break;
 80104a6:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80104a8:	bf00      	nop
 80104aa:	3708      	adds	r7, #8
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}
 80104b0:	20000390 	.word	0x20000390
 80104b4:	08011450 	.word	0x08011450

080104b8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b08a      	sub	sp, #40	; 0x28
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80104c0:	f107 0314 	add.w	r3, r7, #20
 80104c4:	2200      	movs	r2, #0
 80104c6:	601a      	str	r2, [r3, #0]
 80104c8:	605a      	str	r2, [r3, #4]
 80104ca:	609a      	str	r2, [r3, #8]
 80104cc:	60da      	str	r2, [r3, #12]
 80104ce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80104d8:	d147      	bne.n	801056a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80104da:	2300      	movs	r3, #0
 80104dc:	613b      	str	r3, [r7, #16]
 80104de:	4b25      	ldr	r3, [pc, #148]	; (8010574 <HAL_HCD_MspInit+0xbc>)
 80104e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104e2:	4a24      	ldr	r2, [pc, #144]	; (8010574 <HAL_HCD_MspInit+0xbc>)
 80104e4:	f043 0301 	orr.w	r3, r3, #1
 80104e8:	6313      	str	r3, [r2, #48]	; 0x30
 80104ea:	4b22      	ldr	r3, [pc, #136]	; (8010574 <HAL_HCD_MspInit+0xbc>)
 80104ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104ee:	f003 0301 	and.w	r3, r3, #1
 80104f2:	613b      	str	r3, [r7, #16]
 80104f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80104f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80104fc:	2300      	movs	r3, #0
 80104fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010500:	2300      	movs	r3, #0
 8010502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010504:	f107 0314 	add.w	r3, r7, #20
 8010508:	4619      	mov	r1, r3
 801050a:	481b      	ldr	r0, [pc, #108]	; (8010578 <HAL_HCD_MspInit+0xc0>)
 801050c:	f7f3 ff6e 	bl	80043ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010510:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010516:	2302      	movs	r3, #2
 8010518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801051a:	2300      	movs	r3, #0
 801051c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801051e:	2303      	movs	r3, #3
 8010520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010522:	230a      	movs	r3, #10
 8010524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010526:	f107 0314 	add.w	r3, r7, #20
 801052a:	4619      	mov	r1, r3
 801052c:	4812      	ldr	r0, [pc, #72]	; (8010578 <HAL_HCD_MspInit+0xc0>)
 801052e:	f7f3 ff5d 	bl	80043ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010532:	4b10      	ldr	r3, [pc, #64]	; (8010574 <HAL_HCD_MspInit+0xbc>)
 8010534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010536:	4a0f      	ldr	r2, [pc, #60]	; (8010574 <HAL_HCD_MspInit+0xbc>)
 8010538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801053c:	6353      	str	r3, [r2, #52]	; 0x34
 801053e:	2300      	movs	r3, #0
 8010540:	60fb      	str	r3, [r7, #12]
 8010542:	4b0c      	ldr	r3, [pc, #48]	; (8010574 <HAL_HCD_MspInit+0xbc>)
 8010544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010546:	4a0b      	ldr	r2, [pc, #44]	; (8010574 <HAL_HCD_MspInit+0xbc>)
 8010548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801054c:	6453      	str	r3, [r2, #68]	; 0x44
 801054e:	4b09      	ldr	r3, [pc, #36]	; (8010574 <HAL_HCD_MspInit+0xbc>)
 8010550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010556:	60fb      	str	r3, [r7, #12]
 8010558:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801055a:	2200      	movs	r2, #0
 801055c:	2100      	movs	r1, #0
 801055e:	2043      	movs	r0, #67	; 0x43
 8010560:	f7f3 ff0d 	bl	800437e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010564:	2043      	movs	r0, #67	; 0x43
 8010566:	f7f3 ff26 	bl	80043b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801056a:	bf00      	nop
 801056c:	3728      	adds	r7, #40	; 0x28
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	40023800 	.word	0x40023800
 8010578:	40020000 	.word	0x40020000

0801057c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801058a:	4618      	mov	r0, r3
 801058c:	f7fa fe68 	bl	800b260 <USBH_LL_IncTimer>
}
 8010590:	bf00      	nop
 8010592:	3708      	adds	r7, #8
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7fa fe9e 	bl	800b2e8 <USBH_LL_Connect>
}
 80105ac:	bf00      	nop
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7fa fea6 	bl	800b314 <USBH_LL_Disconnect>
}
 80105c8:	bf00      	nop
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b083      	sub	sp, #12
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	460b      	mov	r3, r1
 80105da:	70fb      	strb	r3, [r7, #3]
 80105dc:	4613      	mov	r3, r2
 80105de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80105e0:	bf00      	nop
 80105e2:	370c      	adds	r7, #12
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bc80      	pop	{r7}
 80105e8:	4770      	bx	lr

080105ea <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80105ea:	b580      	push	{r7, lr}
 80105ec:	b082      	sub	sp, #8
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7fa fe5b 	bl	800b2b4 <USBH_LL_PortEnabled>
}
 80105fe:	bf00      	nop
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}

08010606 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010606:	b580      	push	{r7, lr}
 8010608:	b082      	sub	sp, #8
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010614:	4618      	mov	r0, r3
 8010616:	f7fa fe5a 	bl	800b2ce <USBH_LL_PortDisabled>
}
 801061a:	bf00      	nop
 801061c:	3708      	adds	r7, #8
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
	...

08010624 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8010632:	2b01      	cmp	r3, #1
 8010634:	d12a      	bne.n	801068c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010636:	4a18      	ldr	r2, [pc, #96]	; (8010698 <USBH_LL_Init+0x74>)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	4a15      	ldr	r2, [pc, #84]	; (8010698 <USBH_LL_Init+0x74>)
 8010642:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010646:	4b14      	ldr	r3, [pc, #80]	; (8010698 <USBH_LL_Init+0x74>)
 8010648:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801064c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801064e:	4b12      	ldr	r3, [pc, #72]	; (8010698 <USBH_LL_Init+0x74>)
 8010650:	2208      	movs	r2, #8
 8010652:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010654:	4b10      	ldr	r3, [pc, #64]	; (8010698 <USBH_LL_Init+0x74>)
 8010656:	2201      	movs	r2, #1
 8010658:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801065a:	4b0f      	ldr	r3, [pc, #60]	; (8010698 <USBH_LL_Init+0x74>)
 801065c:	2200      	movs	r2, #0
 801065e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010660:	4b0d      	ldr	r3, [pc, #52]	; (8010698 <USBH_LL_Init+0x74>)
 8010662:	2202      	movs	r2, #2
 8010664:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010666:	4b0c      	ldr	r3, [pc, #48]	; (8010698 <USBH_LL_Init+0x74>)
 8010668:	2200      	movs	r2, #0
 801066a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801066c:	480a      	ldr	r0, [pc, #40]	; (8010698 <USBH_LL_Init+0x74>)
 801066e:	f7f4 f8a3 	bl	80047b8 <HAL_HCD_Init>
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d001      	beq.n	801067c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010678:	f7f1 ffc0 	bl	80025fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801067c:	4806      	ldr	r0, [pc, #24]	; (8010698 <USBH_LL_Init+0x74>)
 801067e:	f7f4 fc7d 	bl	8004f7c <HAL_HCD_GetCurrentFrame>
 8010682:	4603      	mov	r3, r0
 8010684:	4619      	mov	r1, r3
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f7fa fddc 	bl	800b244 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801068c:	2300      	movs	r3, #0
}
 801068e:	4618      	mov	r0, r3
 8010690:	3708      	adds	r7, #8
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	20002b78 	.word	0x20002b78

0801069c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b084      	sub	sp, #16
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106a4:	2300      	movs	r3, #0
 80106a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106a8:	2300      	movs	r3, #0
 80106aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7f4 fbee 	bl	8004e94 <HAL_HCD_Start>
 80106b8:	4603      	mov	r3, r0
 80106ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80106bc:	7bfb      	ldrb	r3, [r7, #15]
 80106be:	4618      	mov	r0, r3
 80106c0:	f000 f98a 	bl	80109d8 <USBH_Get_USB_Status>
 80106c4:	4603      	mov	r3, r0
 80106c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3710      	adds	r7, #16
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}

080106d2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80106d2:	b580      	push	{r7, lr}
 80106d4:	b084      	sub	sp, #16
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106da:	2300      	movs	r3, #0
 80106dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106de:	2300      	movs	r3, #0
 80106e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7f4 fbf6 	bl	8004eda <HAL_HCD_Stop>
 80106ee:	4603      	mov	r3, r0
 80106f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80106f2:	7bfb      	ldrb	r3, [r7, #15]
 80106f4:	4618      	mov	r0, r3
 80106f6:	f000 f96f 	bl	80109d8 <USBH_Get_USB_Status>
 80106fa:	4603      	mov	r3, r0
 80106fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010700:	4618      	mov	r0, r3
 8010702:	3710      	adds	r7, #16
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010710:	2301      	movs	r3, #1
 8010712:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801071a:	4618      	mov	r0, r3
 801071c:	f7f4 fc3c 	bl	8004f98 <HAL_HCD_GetCurrentSpeed>
 8010720:	4603      	mov	r3, r0
 8010722:	2b02      	cmp	r3, #2
 8010724:	d00c      	beq.n	8010740 <USBH_LL_GetSpeed+0x38>
 8010726:	2b02      	cmp	r3, #2
 8010728:	d80d      	bhi.n	8010746 <USBH_LL_GetSpeed+0x3e>
 801072a:	2b00      	cmp	r3, #0
 801072c:	d002      	beq.n	8010734 <USBH_LL_GetSpeed+0x2c>
 801072e:	2b01      	cmp	r3, #1
 8010730:	d003      	beq.n	801073a <USBH_LL_GetSpeed+0x32>
 8010732:	e008      	b.n	8010746 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010734:	2300      	movs	r3, #0
 8010736:	73fb      	strb	r3, [r7, #15]
    break;
 8010738:	e008      	b.n	801074c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801073a:	2301      	movs	r3, #1
 801073c:	73fb      	strb	r3, [r7, #15]
    break;
 801073e:	e005      	b.n	801074c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010740:	2302      	movs	r3, #2
 8010742:	73fb      	strb	r3, [r7, #15]
    break;
 8010744:	e002      	b.n	801074c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010746:	2301      	movs	r3, #1
 8010748:	73fb      	strb	r3, [r7, #15]
    break;
 801074a:	bf00      	nop
  }
  return  speed;
 801074c:	7bfb      	ldrb	r3, [r7, #15]
}
 801074e:	4618      	mov	r0, r3
 8010750:	3710      	adds	r7, #16
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}

08010756 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010756:	b580      	push	{r7, lr}
 8010758:	b084      	sub	sp, #16
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801075e:	2300      	movs	r3, #0
 8010760:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010762:	2300      	movs	r3, #0
 8010764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801076c:	4618      	mov	r0, r3
 801076e:	f7f4 fbd1 	bl	8004f14 <HAL_HCD_ResetPort>
 8010772:	4603      	mov	r3, r0
 8010774:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010776:	7bfb      	ldrb	r3, [r7, #15]
 8010778:	4618      	mov	r0, r3
 801077a:	f000 f92d 	bl	80109d8 <USBH_Get_USB_Status>
 801077e:	4603      	mov	r3, r0
 8010780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010782:	7bbb      	ldrb	r3, [r7, #14]
}
 8010784:	4618      	mov	r0, r3
 8010786:	3710      	adds	r7, #16
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	460b      	mov	r3, r1
 8010796:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801079e:	78fa      	ldrb	r2, [r7, #3]
 80107a0:	4611      	mov	r1, r2
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7f4 fbd7 	bl	8004f56 <HAL_HCD_HC_GetXferCount>
 80107a8:	4603      	mov	r3, r0
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3708      	adds	r7, #8
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}

080107b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80107b2:	b590      	push	{r4, r7, lr}
 80107b4:	b089      	sub	sp, #36	; 0x24
 80107b6:	af04      	add	r7, sp, #16
 80107b8:	6078      	str	r0, [r7, #4]
 80107ba:	4608      	mov	r0, r1
 80107bc:	4611      	mov	r1, r2
 80107be:	461a      	mov	r2, r3
 80107c0:	4603      	mov	r3, r0
 80107c2:	70fb      	strb	r3, [r7, #3]
 80107c4:	460b      	mov	r3, r1
 80107c6:	70bb      	strb	r3, [r7, #2]
 80107c8:	4613      	mov	r3, r2
 80107ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107cc:	2300      	movs	r3, #0
 80107ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80107d0:	2300      	movs	r3, #0
 80107d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 80107da:	787c      	ldrb	r4, [r7, #1]
 80107dc:	78ba      	ldrb	r2, [r7, #2]
 80107de:	78f9      	ldrb	r1, [r7, #3]
 80107e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80107e2:	9302      	str	r3, [sp, #8]
 80107e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80107e8:	9301      	str	r3, [sp, #4]
 80107ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80107ee:	9300      	str	r3, [sp, #0]
 80107f0:	4623      	mov	r3, r4
 80107f2:	f7f4 f843 	bl	800487c <HAL_HCD_HC_Init>
 80107f6:	4603      	mov	r3, r0
 80107f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80107fa:	7bfb      	ldrb	r3, [r7, #15]
 80107fc:	4618      	mov	r0, r3
 80107fe:	f000 f8eb 	bl	80109d8 <USBH_Get_USB_Status>
 8010802:	4603      	mov	r3, r0
 8010804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010806:	7bbb      	ldrb	r3, [r7, #14]
}
 8010808:	4618      	mov	r0, r3
 801080a:	3714      	adds	r7, #20
 801080c:	46bd      	mov	sp, r7
 801080e:	bd90      	pop	{r4, r7, pc}

08010810 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b084      	sub	sp, #16
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	460b      	mov	r3, r1
 801081a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801081c:	2300      	movs	r3, #0
 801081e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010820:	2300      	movs	r3, #0
 8010822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801082a:	78fa      	ldrb	r2, [r7, #3]
 801082c:	4611      	mov	r1, r2
 801082e:	4618      	mov	r0, r3
 8010830:	f7f4 f8b3 	bl	800499a <HAL_HCD_HC_Halt>
 8010834:	4603      	mov	r3, r0
 8010836:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010838:	7bfb      	ldrb	r3, [r7, #15]
 801083a:	4618      	mov	r0, r3
 801083c:	f000 f8cc 	bl	80109d8 <USBH_Get_USB_Status>
 8010840:	4603      	mov	r3, r0
 8010842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010844:	7bbb      	ldrb	r3, [r7, #14]
}
 8010846:	4618      	mov	r0, r3
 8010848:	3710      	adds	r7, #16
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}

0801084e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801084e:	b590      	push	{r4, r7, lr}
 8010850:	b089      	sub	sp, #36	; 0x24
 8010852:	af04      	add	r7, sp, #16
 8010854:	6078      	str	r0, [r7, #4]
 8010856:	4608      	mov	r0, r1
 8010858:	4611      	mov	r1, r2
 801085a:	461a      	mov	r2, r3
 801085c:	4603      	mov	r3, r0
 801085e:	70fb      	strb	r3, [r7, #3]
 8010860:	460b      	mov	r3, r1
 8010862:	70bb      	strb	r3, [r7, #2]
 8010864:	4613      	mov	r3, r2
 8010866:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010868:	2300      	movs	r3, #0
 801086a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801086c:	2300      	movs	r3, #0
 801086e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 8010876:	787c      	ldrb	r4, [r7, #1]
 8010878:	78ba      	ldrb	r2, [r7, #2]
 801087a:	78f9      	ldrb	r1, [r7, #3]
 801087c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010880:	9303      	str	r3, [sp, #12]
 8010882:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010884:	9302      	str	r3, [sp, #8]
 8010886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010888:	9301      	str	r3, [sp, #4]
 801088a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801088e:	9300      	str	r3, [sp, #0]
 8010890:	4623      	mov	r3, r4
 8010892:	f7f4 f8a5 	bl	80049e0 <HAL_HCD_HC_SubmitRequest>
 8010896:	4603      	mov	r3, r0
 8010898:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801089a:	7bfb      	ldrb	r3, [r7, #15]
 801089c:	4618      	mov	r0, r3
 801089e:	f000 f89b 	bl	80109d8 <USBH_Get_USB_Status>
 80108a2:	4603      	mov	r3, r0
 80108a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3714      	adds	r7, #20
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd90      	pop	{r4, r7, pc}

080108b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	460b      	mov	r3, r1
 80108ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80108c2:	78fa      	ldrb	r2, [r7, #3]
 80108c4:	4611      	mov	r1, r2
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7f4 fb32 	bl	8004f30 <HAL_HCD_HC_GetURBState>
 80108cc:	4603      	mov	r3, r0
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b082      	sub	sp, #8
 80108da:	af00      	add	r7, sp, #0
 80108dc:	6078      	str	r0, [r7, #4]
 80108de:	460b      	mov	r3, r1
 80108e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d103      	bne.n	80108f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80108ec:	78fb      	ldrb	r3, [r7, #3]
 80108ee:	4618      	mov	r0, r3
 80108f0:	f000 f89e 	bl	8010a30 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80108f4:	20c8      	movs	r0, #200	; 0xc8
 80108f6:	f7f3 f89d 	bl	8003a34 <HAL_Delay>
  return USBH_OK;
 80108fa:	2300      	movs	r3, #0
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010904:	b480      	push	{r7}
 8010906:	b085      	sub	sp, #20
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	460b      	mov	r3, r1
 801090e:	70fb      	strb	r3, [r7, #3]
 8010910:	4613      	mov	r3, r2
 8010912:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801091a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801091c:	78fb      	ldrb	r3, [r7, #3]
 801091e:	68fa      	ldr	r2, [r7, #12]
 8010920:	212c      	movs	r1, #44	; 0x2c
 8010922:	fb01 f303 	mul.w	r3, r1, r3
 8010926:	4413      	add	r3, r2
 8010928:	333b      	adds	r3, #59	; 0x3b
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d009      	beq.n	8010944 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010930:	78fb      	ldrb	r3, [r7, #3]
 8010932:	68fa      	ldr	r2, [r7, #12]
 8010934:	212c      	movs	r1, #44	; 0x2c
 8010936:	fb01 f303 	mul.w	r3, r1, r3
 801093a:	4413      	add	r3, r2
 801093c:	3354      	adds	r3, #84	; 0x54
 801093e:	78ba      	ldrb	r2, [r7, #2]
 8010940:	701a      	strb	r2, [r3, #0]
 8010942:	e008      	b.n	8010956 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010944:	78fb      	ldrb	r3, [r7, #3]
 8010946:	68fa      	ldr	r2, [r7, #12]
 8010948:	212c      	movs	r1, #44	; 0x2c
 801094a:	fb01 f303 	mul.w	r3, r1, r3
 801094e:	4413      	add	r3, r2
 8010950:	3355      	adds	r3, #85	; 0x55
 8010952:	78ba      	ldrb	r2, [r7, #2]
 8010954:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010956:	2300      	movs	r3, #0
}
 8010958:	4618      	mov	r0, r3
 801095a:	3714      	adds	r7, #20
 801095c:	46bd      	mov	sp, r7
 801095e:	bc80      	pop	{r7}
 8010960:	4770      	bx	lr

08010962 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010962:	b480      	push	{r7}
 8010964:	b085      	sub	sp, #20
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
 801096a:	460b      	mov	r3, r1
 801096c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801096e:	2300      	movs	r3, #0
 8010970:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010978:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 801097a:	78fb      	ldrb	r3, [r7, #3]
 801097c:	68ba      	ldr	r2, [r7, #8]
 801097e:	212c      	movs	r1, #44	; 0x2c
 8010980:	fb01 f303 	mul.w	r3, r1, r3
 8010984:	4413      	add	r3, r2
 8010986:	333b      	adds	r3, #59	; 0x3b
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d009      	beq.n	80109a2 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801098e:	78fb      	ldrb	r3, [r7, #3]
 8010990:	68ba      	ldr	r2, [r7, #8]
 8010992:	212c      	movs	r1, #44	; 0x2c
 8010994:	fb01 f303 	mul.w	r3, r1, r3
 8010998:	4413      	add	r3, r2
 801099a:	3354      	adds	r3, #84	; 0x54
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	73fb      	strb	r3, [r7, #15]
 80109a0:	e008      	b.n	80109b4 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80109a2:	78fb      	ldrb	r3, [r7, #3]
 80109a4:	68ba      	ldr	r2, [r7, #8]
 80109a6:	212c      	movs	r1, #44	; 0x2c
 80109a8:	fb01 f303 	mul.w	r3, r1, r3
 80109ac:	4413      	add	r3, r2
 80109ae:	3355      	adds	r3, #85	; 0x55
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80109b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3714      	adds	r7, #20
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bc80      	pop	{r7}
 80109be:	4770      	bx	lr

080109c0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f7f3 f833 	bl	8003a34 <HAL_Delay>
}
 80109ce:	bf00      	nop
 80109d0:	3708      	adds	r7, #8
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
	...

080109d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80109d8:	b480      	push	{r7}
 80109da:	b085      	sub	sp, #20
 80109dc:	af00      	add	r7, sp, #0
 80109de:	4603      	mov	r3, r0
 80109e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80109e2:	2300      	movs	r3, #0
 80109e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80109e6:	79fb      	ldrb	r3, [r7, #7]
 80109e8:	2b03      	cmp	r3, #3
 80109ea:	d817      	bhi.n	8010a1c <USBH_Get_USB_Status+0x44>
 80109ec:	a201      	add	r2, pc, #4	; (adr r2, 80109f4 <USBH_Get_USB_Status+0x1c>)
 80109ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109f2:	bf00      	nop
 80109f4:	08010a05 	.word	0x08010a05
 80109f8:	08010a0b 	.word	0x08010a0b
 80109fc:	08010a11 	.word	0x08010a11
 8010a00:	08010a17 	.word	0x08010a17
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010a04:	2300      	movs	r3, #0
 8010a06:	73fb      	strb	r3, [r7, #15]
    break;
 8010a08:	e00b      	b.n	8010a22 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010a0a:	2302      	movs	r3, #2
 8010a0c:	73fb      	strb	r3, [r7, #15]
    break;
 8010a0e:	e008      	b.n	8010a22 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010a10:	2301      	movs	r3, #1
 8010a12:	73fb      	strb	r3, [r7, #15]
    break;
 8010a14:	e005      	b.n	8010a22 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010a16:	2302      	movs	r3, #2
 8010a18:	73fb      	strb	r3, [r7, #15]
    break;
 8010a1a:	e002      	b.n	8010a22 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010a1c:	2302      	movs	r3, #2
 8010a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8010a20:	bf00      	nop
  }
  return usb_status;
 8010a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3714      	adds	r7, #20
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bc80      	pop	{r7}
 8010a2c:	4770      	bx	lr
 8010a2e:	bf00      	nop

08010a30 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b084      	sub	sp, #16
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	4603      	mov	r3, r0
 8010a38:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010a3a:	79fb      	ldrb	r3, [r7, #7]
 8010a3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010a3e:	79fb      	ldrb	r3, [r7, #7]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d102      	bne.n	8010a4a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8010a44:	2300      	movs	r3, #0
 8010a46:	73fb      	strb	r3, [r7, #15]
 8010a48:	e001      	b.n	8010a4e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,(GPIO_PinState)data);
 8010a4e:	7bfb      	ldrb	r3, [r7, #15]
 8010a50:	461a      	mov	r2, r3
 8010a52:	2104      	movs	r1, #4
 8010a54:	4803      	ldr	r0, [pc, #12]	; (8010a64 <MX_DriverVbusFS+0x34>)
 8010a56:	f7f3 fe7e 	bl	8004756 <HAL_GPIO_WritePin>
}
 8010a5a:	bf00      	nop
 8010a5c:	3710      	adds	r7, #16
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	40020800 	.word	0x40020800

08010a68 <__errno>:
 8010a68:	4b01      	ldr	r3, [pc, #4]	; (8010a70 <__errno+0x8>)
 8010a6a:	6818      	ldr	r0, [r3, #0]
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	20000044 	.word	0x20000044

08010a74 <__libc_init_array>:
 8010a74:	b570      	push	{r4, r5, r6, lr}
 8010a76:	2600      	movs	r6, #0
 8010a78:	4d0c      	ldr	r5, [pc, #48]	; (8010aac <__libc_init_array+0x38>)
 8010a7a:	4c0d      	ldr	r4, [pc, #52]	; (8010ab0 <__libc_init_array+0x3c>)
 8010a7c:	1b64      	subs	r4, r4, r5
 8010a7e:	10a4      	asrs	r4, r4, #2
 8010a80:	42a6      	cmp	r6, r4
 8010a82:	d109      	bne.n	8010a98 <__libc_init_array+0x24>
 8010a84:	f000 fc6c 	bl	8011360 <_init>
 8010a88:	2600      	movs	r6, #0
 8010a8a:	4d0a      	ldr	r5, [pc, #40]	; (8010ab4 <__libc_init_array+0x40>)
 8010a8c:	4c0a      	ldr	r4, [pc, #40]	; (8010ab8 <__libc_init_array+0x44>)
 8010a8e:	1b64      	subs	r4, r4, r5
 8010a90:	10a4      	asrs	r4, r4, #2
 8010a92:	42a6      	cmp	r6, r4
 8010a94:	d105      	bne.n	8010aa2 <__libc_init_array+0x2e>
 8010a96:	bd70      	pop	{r4, r5, r6, pc}
 8010a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a9c:	4798      	blx	r3
 8010a9e:	3601      	adds	r6, #1
 8010aa0:	e7ee      	b.n	8010a80 <__libc_init_array+0xc>
 8010aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010aa6:	4798      	blx	r3
 8010aa8:	3601      	adds	r6, #1
 8010aaa:	e7f2      	b.n	8010a92 <__libc_init_array+0x1e>
 8010aac:	08011a04 	.word	0x08011a04
 8010ab0:	08011a04 	.word	0x08011a04
 8010ab4:	08011a04 	.word	0x08011a04
 8010ab8:	08011a08 	.word	0x08011a08

08010abc <malloc>:
 8010abc:	4b02      	ldr	r3, [pc, #8]	; (8010ac8 <malloc+0xc>)
 8010abe:	4601      	mov	r1, r0
 8010ac0:	6818      	ldr	r0, [r3, #0]
 8010ac2:	f000 b86d 	b.w	8010ba0 <_malloc_r>
 8010ac6:	bf00      	nop
 8010ac8:	20000044 	.word	0x20000044

08010acc <free>:
 8010acc:	4b02      	ldr	r3, [pc, #8]	; (8010ad8 <free+0xc>)
 8010ace:	4601      	mov	r1, r0
 8010ad0:	6818      	ldr	r0, [r3, #0]
 8010ad2:	f000 b819 	b.w	8010b08 <_free_r>
 8010ad6:	bf00      	nop
 8010ad8:	20000044 	.word	0x20000044

08010adc <memcpy>:
 8010adc:	440a      	add	r2, r1
 8010ade:	4291      	cmp	r1, r2
 8010ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ae4:	d100      	bne.n	8010ae8 <memcpy+0xc>
 8010ae6:	4770      	bx	lr
 8010ae8:	b510      	push	{r4, lr}
 8010aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010aee:	4291      	cmp	r1, r2
 8010af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010af4:	d1f9      	bne.n	8010aea <memcpy+0xe>
 8010af6:	bd10      	pop	{r4, pc}

08010af8 <memset>:
 8010af8:	4603      	mov	r3, r0
 8010afa:	4402      	add	r2, r0
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d100      	bne.n	8010b02 <memset+0xa>
 8010b00:	4770      	bx	lr
 8010b02:	f803 1b01 	strb.w	r1, [r3], #1
 8010b06:	e7f9      	b.n	8010afc <memset+0x4>

08010b08 <_free_r>:
 8010b08:	b538      	push	{r3, r4, r5, lr}
 8010b0a:	4605      	mov	r5, r0
 8010b0c:	2900      	cmp	r1, #0
 8010b0e:	d043      	beq.n	8010b98 <_free_r+0x90>
 8010b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b14:	1f0c      	subs	r4, r1, #4
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	bfb8      	it	lt
 8010b1a:	18e4      	addlt	r4, r4, r3
 8010b1c:	f000 f8ca 	bl	8010cb4 <__malloc_lock>
 8010b20:	4a1e      	ldr	r2, [pc, #120]	; (8010b9c <_free_r+0x94>)
 8010b22:	6813      	ldr	r3, [r2, #0]
 8010b24:	4610      	mov	r0, r2
 8010b26:	b933      	cbnz	r3, 8010b36 <_free_r+0x2e>
 8010b28:	6063      	str	r3, [r4, #4]
 8010b2a:	6014      	str	r4, [r2, #0]
 8010b2c:	4628      	mov	r0, r5
 8010b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b32:	f000 b8c5 	b.w	8010cc0 <__malloc_unlock>
 8010b36:	42a3      	cmp	r3, r4
 8010b38:	d90a      	bls.n	8010b50 <_free_r+0x48>
 8010b3a:	6821      	ldr	r1, [r4, #0]
 8010b3c:	1862      	adds	r2, r4, r1
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	bf01      	itttt	eq
 8010b42:	681a      	ldreq	r2, [r3, #0]
 8010b44:	685b      	ldreq	r3, [r3, #4]
 8010b46:	1852      	addeq	r2, r2, r1
 8010b48:	6022      	streq	r2, [r4, #0]
 8010b4a:	6063      	str	r3, [r4, #4]
 8010b4c:	6004      	str	r4, [r0, #0]
 8010b4e:	e7ed      	b.n	8010b2c <_free_r+0x24>
 8010b50:	461a      	mov	r2, r3
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	b10b      	cbz	r3, 8010b5a <_free_r+0x52>
 8010b56:	42a3      	cmp	r3, r4
 8010b58:	d9fa      	bls.n	8010b50 <_free_r+0x48>
 8010b5a:	6811      	ldr	r1, [r2, #0]
 8010b5c:	1850      	adds	r0, r2, r1
 8010b5e:	42a0      	cmp	r0, r4
 8010b60:	d10b      	bne.n	8010b7a <_free_r+0x72>
 8010b62:	6820      	ldr	r0, [r4, #0]
 8010b64:	4401      	add	r1, r0
 8010b66:	1850      	adds	r0, r2, r1
 8010b68:	4283      	cmp	r3, r0
 8010b6a:	6011      	str	r1, [r2, #0]
 8010b6c:	d1de      	bne.n	8010b2c <_free_r+0x24>
 8010b6e:	6818      	ldr	r0, [r3, #0]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	4401      	add	r1, r0
 8010b74:	6011      	str	r1, [r2, #0]
 8010b76:	6053      	str	r3, [r2, #4]
 8010b78:	e7d8      	b.n	8010b2c <_free_r+0x24>
 8010b7a:	d902      	bls.n	8010b82 <_free_r+0x7a>
 8010b7c:	230c      	movs	r3, #12
 8010b7e:	602b      	str	r3, [r5, #0]
 8010b80:	e7d4      	b.n	8010b2c <_free_r+0x24>
 8010b82:	6820      	ldr	r0, [r4, #0]
 8010b84:	1821      	adds	r1, r4, r0
 8010b86:	428b      	cmp	r3, r1
 8010b88:	bf01      	itttt	eq
 8010b8a:	6819      	ldreq	r1, [r3, #0]
 8010b8c:	685b      	ldreq	r3, [r3, #4]
 8010b8e:	1809      	addeq	r1, r1, r0
 8010b90:	6021      	streq	r1, [r4, #0]
 8010b92:	6063      	str	r3, [r4, #4]
 8010b94:	6054      	str	r4, [r2, #4]
 8010b96:	e7c9      	b.n	8010b2c <_free_r+0x24>
 8010b98:	bd38      	pop	{r3, r4, r5, pc}
 8010b9a:	bf00      	nop
 8010b9c:	20000394 	.word	0x20000394

08010ba0 <_malloc_r>:
 8010ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ba2:	1ccd      	adds	r5, r1, #3
 8010ba4:	f025 0503 	bic.w	r5, r5, #3
 8010ba8:	3508      	adds	r5, #8
 8010baa:	2d0c      	cmp	r5, #12
 8010bac:	bf38      	it	cc
 8010bae:	250c      	movcc	r5, #12
 8010bb0:	2d00      	cmp	r5, #0
 8010bb2:	4606      	mov	r6, r0
 8010bb4:	db01      	blt.n	8010bba <_malloc_r+0x1a>
 8010bb6:	42a9      	cmp	r1, r5
 8010bb8:	d903      	bls.n	8010bc2 <_malloc_r+0x22>
 8010bba:	230c      	movs	r3, #12
 8010bbc:	6033      	str	r3, [r6, #0]
 8010bbe:	2000      	movs	r0, #0
 8010bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bc2:	f000 f877 	bl	8010cb4 <__malloc_lock>
 8010bc6:	4921      	ldr	r1, [pc, #132]	; (8010c4c <_malloc_r+0xac>)
 8010bc8:	680a      	ldr	r2, [r1, #0]
 8010bca:	4614      	mov	r4, r2
 8010bcc:	b99c      	cbnz	r4, 8010bf6 <_malloc_r+0x56>
 8010bce:	4f20      	ldr	r7, [pc, #128]	; (8010c50 <_malloc_r+0xb0>)
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	b923      	cbnz	r3, 8010bde <_malloc_r+0x3e>
 8010bd4:	4621      	mov	r1, r4
 8010bd6:	4630      	mov	r0, r6
 8010bd8:	f000 f83c 	bl	8010c54 <_sbrk_r>
 8010bdc:	6038      	str	r0, [r7, #0]
 8010bde:	4629      	mov	r1, r5
 8010be0:	4630      	mov	r0, r6
 8010be2:	f000 f837 	bl	8010c54 <_sbrk_r>
 8010be6:	1c43      	adds	r3, r0, #1
 8010be8:	d123      	bne.n	8010c32 <_malloc_r+0x92>
 8010bea:	230c      	movs	r3, #12
 8010bec:	4630      	mov	r0, r6
 8010bee:	6033      	str	r3, [r6, #0]
 8010bf0:	f000 f866 	bl	8010cc0 <__malloc_unlock>
 8010bf4:	e7e3      	b.n	8010bbe <_malloc_r+0x1e>
 8010bf6:	6823      	ldr	r3, [r4, #0]
 8010bf8:	1b5b      	subs	r3, r3, r5
 8010bfa:	d417      	bmi.n	8010c2c <_malloc_r+0x8c>
 8010bfc:	2b0b      	cmp	r3, #11
 8010bfe:	d903      	bls.n	8010c08 <_malloc_r+0x68>
 8010c00:	6023      	str	r3, [r4, #0]
 8010c02:	441c      	add	r4, r3
 8010c04:	6025      	str	r5, [r4, #0]
 8010c06:	e004      	b.n	8010c12 <_malloc_r+0x72>
 8010c08:	6863      	ldr	r3, [r4, #4]
 8010c0a:	42a2      	cmp	r2, r4
 8010c0c:	bf0c      	ite	eq
 8010c0e:	600b      	streq	r3, [r1, #0]
 8010c10:	6053      	strne	r3, [r2, #4]
 8010c12:	4630      	mov	r0, r6
 8010c14:	f000 f854 	bl	8010cc0 <__malloc_unlock>
 8010c18:	f104 000b 	add.w	r0, r4, #11
 8010c1c:	1d23      	adds	r3, r4, #4
 8010c1e:	f020 0007 	bic.w	r0, r0, #7
 8010c22:	1ac2      	subs	r2, r0, r3
 8010c24:	d0cc      	beq.n	8010bc0 <_malloc_r+0x20>
 8010c26:	1a1b      	subs	r3, r3, r0
 8010c28:	50a3      	str	r3, [r4, r2]
 8010c2a:	e7c9      	b.n	8010bc0 <_malloc_r+0x20>
 8010c2c:	4622      	mov	r2, r4
 8010c2e:	6864      	ldr	r4, [r4, #4]
 8010c30:	e7cc      	b.n	8010bcc <_malloc_r+0x2c>
 8010c32:	1cc4      	adds	r4, r0, #3
 8010c34:	f024 0403 	bic.w	r4, r4, #3
 8010c38:	42a0      	cmp	r0, r4
 8010c3a:	d0e3      	beq.n	8010c04 <_malloc_r+0x64>
 8010c3c:	1a21      	subs	r1, r4, r0
 8010c3e:	4630      	mov	r0, r6
 8010c40:	f000 f808 	bl	8010c54 <_sbrk_r>
 8010c44:	3001      	adds	r0, #1
 8010c46:	d1dd      	bne.n	8010c04 <_malloc_r+0x64>
 8010c48:	e7cf      	b.n	8010bea <_malloc_r+0x4a>
 8010c4a:	bf00      	nop
 8010c4c:	20000394 	.word	0x20000394
 8010c50:	20000398 	.word	0x20000398

08010c54 <_sbrk_r>:
 8010c54:	b538      	push	{r3, r4, r5, lr}
 8010c56:	2300      	movs	r3, #0
 8010c58:	4d05      	ldr	r5, [pc, #20]	; (8010c70 <_sbrk_r+0x1c>)
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	4608      	mov	r0, r1
 8010c5e:	602b      	str	r3, [r5, #0]
 8010c60:	f7f2 fccc 	bl	80035fc <_sbrk>
 8010c64:	1c43      	adds	r3, r0, #1
 8010c66:	d102      	bne.n	8010c6e <_sbrk_r+0x1a>
 8010c68:	682b      	ldr	r3, [r5, #0]
 8010c6a:	b103      	cbz	r3, 8010c6e <_sbrk_r+0x1a>
 8010c6c:	6023      	str	r3, [r4, #0]
 8010c6e:	bd38      	pop	{r3, r4, r5, pc}
 8010c70:	20002e7c 	.word	0x20002e7c

08010c74 <siprintf>:
 8010c74:	b40e      	push	{r1, r2, r3}
 8010c76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010c7a:	b500      	push	{lr}
 8010c7c:	b09c      	sub	sp, #112	; 0x70
 8010c7e:	ab1d      	add	r3, sp, #116	; 0x74
 8010c80:	9002      	str	r0, [sp, #8]
 8010c82:	9006      	str	r0, [sp, #24]
 8010c84:	9107      	str	r1, [sp, #28]
 8010c86:	9104      	str	r1, [sp, #16]
 8010c88:	4808      	ldr	r0, [pc, #32]	; (8010cac <siprintf+0x38>)
 8010c8a:	4909      	ldr	r1, [pc, #36]	; (8010cb0 <siprintf+0x3c>)
 8010c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c90:	9105      	str	r1, [sp, #20]
 8010c92:	6800      	ldr	r0, [r0, #0]
 8010c94:	a902      	add	r1, sp, #8
 8010c96:	9301      	str	r3, [sp, #4]
 8010c98:	f000 f874 	bl	8010d84 <_svfiprintf_r>
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	9b02      	ldr	r3, [sp, #8]
 8010ca0:	701a      	strb	r2, [r3, #0]
 8010ca2:	b01c      	add	sp, #112	; 0x70
 8010ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ca8:	b003      	add	sp, #12
 8010caa:	4770      	bx	lr
 8010cac:	20000044 	.word	0x20000044
 8010cb0:	ffff0208 	.word	0xffff0208

08010cb4 <__malloc_lock>:
 8010cb4:	4801      	ldr	r0, [pc, #4]	; (8010cbc <__malloc_lock+0x8>)
 8010cb6:	f000 bafb 	b.w	80112b0 <__retarget_lock_acquire_recursive>
 8010cba:	bf00      	nop
 8010cbc:	20002e84 	.word	0x20002e84

08010cc0 <__malloc_unlock>:
 8010cc0:	4801      	ldr	r0, [pc, #4]	; (8010cc8 <__malloc_unlock+0x8>)
 8010cc2:	f000 baf6 	b.w	80112b2 <__retarget_lock_release_recursive>
 8010cc6:	bf00      	nop
 8010cc8:	20002e84 	.word	0x20002e84

08010ccc <__ssputs_r>:
 8010ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cd0:	688e      	ldr	r6, [r1, #8]
 8010cd2:	4682      	mov	sl, r0
 8010cd4:	429e      	cmp	r6, r3
 8010cd6:	460c      	mov	r4, r1
 8010cd8:	4690      	mov	r8, r2
 8010cda:	461f      	mov	r7, r3
 8010cdc:	d838      	bhi.n	8010d50 <__ssputs_r+0x84>
 8010cde:	898a      	ldrh	r2, [r1, #12]
 8010ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ce4:	d032      	beq.n	8010d4c <__ssputs_r+0x80>
 8010ce6:	6825      	ldr	r5, [r4, #0]
 8010ce8:	6909      	ldr	r1, [r1, #16]
 8010cea:	3301      	adds	r3, #1
 8010cec:	eba5 0901 	sub.w	r9, r5, r1
 8010cf0:	6965      	ldr	r5, [r4, #20]
 8010cf2:	444b      	add	r3, r9
 8010cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010cf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010cfc:	106d      	asrs	r5, r5, #1
 8010cfe:	429d      	cmp	r5, r3
 8010d00:	bf38      	it	cc
 8010d02:	461d      	movcc	r5, r3
 8010d04:	0553      	lsls	r3, r2, #21
 8010d06:	d531      	bpl.n	8010d6c <__ssputs_r+0xa0>
 8010d08:	4629      	mov	r1, r5
 8010d0a:	f7ff ff49 	bl	8010ba0 <_malloc_r>
 8010d0e:	4606      	mov	r6, r0
 8010d10:	b950      	cbnz	r0, 8010d28 <__ssputs_r+0x5c>
 8010d12:	230c      	movs	r3, #12
 8010d14:	f04f 30ff 	mov.w	r0, #4294967295
 8010d18:	f8ca 3000 	str.w	r3, [sl]
 8010d1c:	89a3      	ldrh	r3, [r4, #12]
 8010d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d22:	81a3      	strh	r3, [r4, #12]
 8010d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d28:	464a      	mov	r2, r9
 8010d2a:	6921      	ldr	r1, [r4, #16]
 8010d2c:	f7ff fed6 	bl	8010adc <memcpy>
 8010d30:	89a3      	ldrh	r3, [r4, #12]
 8010d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d3a:	81a3      	strh	r3, [r4, #12]
 8010d3c:	6126      	str	r6, [r4, #16]
 8010d3e:	444e      	add	r6, r9
 8010d40:	6026      	str	r6, [r4, #0]
 8010d42:	463e      	mov	r6, r7
 8010d44:	6165      	str	r5, [r4, #20]
 8010d46:	eba5 0509 	sub.w	r5, r5, r9
 8010d4a:	60a5      	str	r5, [r4, #8]
 8010d4c:	42be      	cmp	r6, r7
 8010d4e:	d900      	bls.n	8010d52 <__ssputs_r+0x86>
 8010d50:	463e      	mov	r6, r7
 8010d52:	4632      	mov	r2, r6
 8010d54:	4641      	mov	r1, r8
 8010d56:	6820      	ldr	r0, [r4, #0]
 8010d58:	f000 faba 	bl	80112d0 <memmove>
 8010d5c:	68a3      	ldr	r3, [r4, #8]
 8010d5e:	6822      	ldr	r2, [r4, #0]
 8010d60:	1b9b      	subs	r3, r3, r6
 8010d62:	4432      	add	r2, r6
 8010d64:	2000      	movs	r0, #0
 8010d66:	60a3      	str	r3, [r4, #8]
 8010d68:	6022      	str	r2, [r4, #0]
 8010d6a:	e7db      	b.n	8010d24 <__ssputs_r+0x58>
 8010d6c:	462a      	mov	r2, r5
 8010d6e:	f000 fac9 	bl	8011304 <_realloc_r>
 8010d72:	4606      	mov	r6, r0
 8010d74:	2800      	cmp	r0, #0
 8010d76:	d1e1      	bne.n	8010d3c <__ssputs_r+0x70>
 8010d78:	4650      	mov	r0, sl
 8010d7a:	6921      	ldr	r1, [r4, #16]
 8010d7c:	f7ff fec4 	bl	8010b08 <_free_r>
 8010d80:	e7c7      	b.n	8010d12 <__ssputs_r+0x46>
	...

08010d84 <_svfiprintf_r>:
 8010d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d88:	4698      	mov	r8, r3
 8010d8a:	898b      	ldrh	r3, [r1, #12]
 8010d8c:	4607      	mov	r7, r0
 8010d8e:	061b      	lsls	r3, r3, #24
 8010d90:	460d      	mov	r5, r1
 8010d92:	4614      	mov	r4, r2
 8010d94:	b09d      	sub	sp, #116	; 0x74
 8010d96:	d50e      	bpl.n	8010db6 <_svfiprintf_r+0x32>
 8010d98:	690b      	ldr	r3, [r1, #16]
 8010d9a:	b963      	cbnz	r3, 8010db6 <_svfiprintf_r+0x32>
 8010d9c:	2140      	movs	r1, #64	; 0x40
 8010d9e:	f7ff feff 	bl	8010ba0 <_malloc_r>
 8010da2:	6028      	str	r0, [r5, #0]
 8010da4:	6128      	str	r0, [r5, #16]
 8010da6:	b920      	cbnz	r0, 8010db2 <_svfiprintf_r+0x2e>
 8010da8:	230c      	movs	r3, #12
 8010daa:	603b      	str	r3, [r7, #0]
 8010dac:	f04f 30ff 	mov.w	r0, #4294967295
 8010db0:	e0d1      	b.n	8010f56 <_svfiprintf_r+0x1d2>
 8010db2:	2340      	movs	r3, #64	; 0x40
 8010db4:	616b      	str	r3, [r5, #20]
 8010db6:	2300      	movs	r3, #0
 8010db8:	9309      	str	r3, [sp, #36]	; 0x24
 8010dba:	2320      	movs	r3, #32
 8010dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010dc0:	2330      	movs	r3, #48	; 0x30
 8010dc2:	f04f 0901 	mov.w	r9, #1
 8010dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010dca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010f70 <_svfiprintf_r+0x1ec>
 8010dce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010dd2:	4623      	mov	r3, r4
 8010dd4:	469a      	mov	sl, r3
 8010dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010dda:	b10a      	cbz	r2, 8010de0 <_svfiprintf_r+0x5c>
 8010ddc:	2a25      	cmp	r2, #37	; 0x25
 8010dde:	d1f9      	bne.n	8010dd4 <_svfiprintf_r+0x50>
 8010de0:	ebba 0b04 	subs.w	fp, sl, r4
 8010de4:	d00b      	beq.n	8010dfe <_svfiprintf_r+0x7a>
 8010de6:	465b      	mov	r3, fp
 8010de8:	4622      	mov	r2, r4
 8010dea:	4629      	mov	r1, r5
 8010dec:	4638      	mov	r0, r7
 8010dee:	f7ff ff6d 	bl	8010ccc <__ssputs_r>
 8010df2:	3001      	adds	r0, #1
 8010df4:	f000 80aa 	beq.w	8010f4c <_svfiprintf_r+0x1c8>
 8010df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dfa:	445a      	add	r2, fp
 8010dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8010dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f000 80a2 	beq.w	8010f4c <_svfiprintf_r+0x1c8>
 8010e08:	2300      	movs	r3, #0
 8010e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e12:	f10a 0a01 	add.w	sl, sl, #1
 8010e16:	9304      	str	r3, [sp, #16]
 8010e18:	9307      	str	r3, [sp, #28]
 8010e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8010e20:	4654      	mov	r4, sl
 8010e22:	2205      	movs	r2, #5
 8010e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e28:	4851      	ldr	r0, [pc, #324]	; (8010f70 <_svfiprintf_r+0x1ec>)
 8010e2a:	f000 fa43 	bl	80112b4 <memchr>
 8010e2e:	9a04      	ldr	r2, [sp, #16]
 8010e30:	b9d8      	cbnz	r0, 8010e6a <_svfiprintf_r+0xe6>
 8010e32:	06d0      	lsls	r0, r2, #27
 8010e34:	bf44      	itt	mi
 8010e36:	2320      	movmi	r3, #32
 8010e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e3c:	0711      	lsls	r1, r2, #28
 8010e3e:	bf44      	itt	mi
 8010e40:	232b      	movmi	r3, #43	; 0x2b
 8010e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e46:	f89a 3000 	ldrb.w	r3, [sl]
 8010e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8010e4c:	d015      	beq.n	8010e7a <_svfiprintf_r+0xf6>
 8010e4e:	4654      	mov	r4, sl
 8010e50:	2000      	movs	r0, #0
 8010e52:	f04f 0c0a 	mov.w	ip, #10
 8010e56:	9a07      	ldr	r2, [sp, #28]
 8010e58:	4621      	mov	r1, r4
 8010e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e5e:	3b30      	subs	r3, #48	; 0x30
 8010e60:	2b09      	cmp	r3, #9
 8010e62:	d94e      	bls.n	8010f02 <_svfiprintf_r+0x17e>
 8010e64:	b1b0      	cbz	r0, 8010e94 <_svfiprintf_r+0x110>
 8010e66:	9207      	str	r2, [sp, #28]
 8010e68:	e014      	b.n	8010e94 <_svfiprintf_r+0x110>
 8010e6a:	eba0 0308 	sub.w	r3, r0, r8
 8010e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8010e72:	4313      	orrs	r3, r2
 8010e74:	46a2      	mov	sl, r4
 8010e76:	9304      	str	r3, [sp, #16]
 8010e78:	e7d2      	b.n	8010e20 <_svfiprintf_r+0x9c>
 8010e7a:	9b03      	ldr	r3, [sp, #12]
 8010e7c:	1d19      	adds	r1, r3, #4
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	9103      	str	r1, [sp, #12]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	bfbb      	ittet	lt
 8010e86:	425b      	neglt	r3, r3
 8010e88:	f042 0202 	orrlt.w	r2, r2, #2
 8010e8c:	9307      	strge	r3, [sp, #28]
 8010e8e:	9307      	strlt	r3, [sp, #28]
 8010e90:	bfb8      	it	lt
 8010e92:	9204      	strlt	r2, [sp, #16]
 8010e94:	7823      	ldrb	r3, [r4, #0]
 8010e96:	2b2e      	cmp	r3, #46	; 0x2e
 8010e98:	d10c      	bne.n	8010eb4 <_svfiprintf_r+0x130>
 8010e9a:	7863      	ldrb	r3, [r4, #1]
 8010e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8010e9e:	d135      	bne.n	8010f0c <_svfiprintf_r+0x188>
 8010ea0:	9b03      	ldr	r3, [sp, #12]
 8010ea2:	3402      	adds	r4, #2
 8010ea4:	1d1a      	adds	r2, r3, #4
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	9203      	str	r2, [sp, #12]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	bfb8      	it	lt
 8010eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8010eb2:	9305      	str	r3, [sp, #20]
 8010eb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010f80 <_svfiprintf_r+0x1fc>
 8010eb8:	2203      	movs	r2, #3
 8010eba:	4650      	mov	r0, sl
 8010ebc:	7821      	ldrb	r1, [r4, #0]
 8010ebe:	f000 f9f9 	bl	80112b4 <memchr>
 8010ec2:	b140      	cbz	r0, 8010ed6 <_svfiprintf_r+0x152>
 8010ec4:	2340      	movs	r3, #64	; 0x40
 8010ec6:	eba0 000a 	sub.w	r0, r0, sl
 8010eca:	fa03 f000 	lsl.w	r0, r3, r0
 8010ece:	9b04      	ldr	r3, [sp, #16]
 8010ed0:	3401      	adds	r4, #1
 8010ed2:	4303      	orrs	r3, r0
 8010ed4:	9304      	str	r3, [sp, #16]
 8010ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eda:	2206      	movs	r2, #6
 8010edc:	4825      	ldr	r0, [pc, #148]	; (8010f74 <_svfiprintf_r+0x1f0>)
 8010ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ee2:	f000 f9e7 	bl	80112b4 <memchr>
 8010ee6:	2800      	cmp	r0, #0
 8010ee8:	d038      	beq.n	8010f5c <_svfiprintf_r+0x1d8>
 8010eea:	4b23      	ldr	r3, [pc, #140]	; (8010f78 <_svfiprintf_r+0x1f4>)
 8010eec:	bb1b      	cbnz	r3, 8010f36 <_svfiprintf_r+0x1b2>
 8010eee:	9b03      	ldr	r3, [sp, #12]
 8010ef0:	3307      	adds	r3, #7
 8010ef2:	f023 0307 	bic.w	r3, r3, #7
 8010ef6:	3308      	adds	r3, #8
 8010ef8:	9303      	str	r3, [sp, #12]
 8010efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010efc:	4433      	add	r3, r6
 8010efe:	9309      	str	r3, [sp, #36]	; 0x24
 8010f00:	e767      	b.n	8010dd2 <_svfiprintf_r+0x4e>
 8010f02:	460c      	mov	r4, r1
 8010f04:	2001      	movs	r0, #1
 8010f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f0a:	e7a5      	b.n	8010e58 <_svfiprintf_r+0xd4>
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	f04f 0c0a 	mov.w	ip, #10
 8010f12:	4619      	mov	r1, r3
 8010f14:	3401      	adds	r4, #1
 8010f16:	9305      	str	r3, [sp, #20]
 8010f18:	4620      	mov	r0, r4
 8010f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f1e:	3a30      	subs	r2, #48	; 0x30
 8010f20:	2a09      	cmp	r2, #9
 8010f22:	d903      	bls.n	8010f2c <_svfiprintf_r+0x1a8>
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d0c5      	beq.n	8010eb4 <_svfiprintf_r+0x130>
 8010f28:	9105      	str	r1, [sp, #20]
 8010f2a:	e7c3      	b.n	8010eb4 <_svfiprintf_r+0x130>
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	2301      	movs	r3, #1
 8010f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f34:	e7f0      	b.n	8010f18 <_svfiprintf_r+0x194>
 8010f36:	ab03      	add	r3, sp, #12
 8010f38:	9300      	str	r3, [sp, #0]
 8010f3a:	462a      	mov	r2, r5
 8010f3c:	4638      	mov	r0, r7
 8010f3e:	4b0f      	ldr	r3, [pc, #60]	; (8010f7c <_svfiprintf_r+0x1f8>)
 8010f40:	a904      	add	r1, sp, #16
 8010f42:	f3af 8000 	nop.w
 8010f46:	1c42      	adds	r2, r0, #1
 8010f48:	4606      	mov	r6, r0
 8010f4a:	d1d6      	bne.n	8010efa <_svfiprintf_r+0x176>
 8010f4c:	89ab      	ldrh	r3, [r5, #12]
 8010f4e:	065b      	lsls	r3, r3, #25
 8010f50:	f53f af2c 	bmi.w	8010dac <_svfiprintf_r+0x28>
 8010f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f56:	b01d      	add	sp, #116	; 0x74
 8010f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f5c:	ab03      	add	r3, sp, #12
 8010f5e:	9300      	str	r3, [sp, #0]
 8010f60:	462a      	mov	r2, r5
 8010f62:	4638      	mov	r0, r7
 8010f64:	4b05      	ldr	r3, [pc, #20]	; (8010f7c <_svfiprintf_r+0x1f8>)
 8010f66:	a904      	add	r1, sp, #16
 8010f68:	f000 f87c 	bl	8011064 <_printf_i>
 8010f6c:	e7eb      	b.n	8010f46 <_svfiprintf_r+0x1c2>
 8010f6e:	bf00      	nop
 8010f70:	080119c8 	.word	0x080119c8
 8010f74:	080119d2 	.word	0x080119d2
 8010f78:	00000000 	.word	0x00000000
 8010f7c:	08010ccd 	.word	0x08010ccd
 8010f80:	080119ce 	.word	0x080119ce

08010f84 <_printf_common>:
 8010f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f88:	4616      	mov	r6, r2
 8010f8a:	4699      	mov	r9, r3
 8010f8c:	688a      	ldr	r2, [r1, #8]
 8010f8e:	690b      	ldr	r3, [r1, #16]
 8010f90:	4607      	mov	r7, r0
 8010f92:	4293      	cmp	r3, r2
 8010f94:	bfb8      	it	lt
 8010f96:	4613      	movlt	r3, r2
 8010f98:	6033      	str	r3, [r6, #0]
 8010f9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010f9e:	460c      	mov	r4, r1
 8010fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010fa4:	b10a      	cbz	r2, 8010faa <_printf_common+0x26>
 8010fa6:	3301      	adds	r3, #1
 8010fa8:	6033      	str	r3, [r6, #0]
 8010faa:	6823      	ldr	r3, [r4, #0]
 8010fac:	0699      	lsls	r1, r3, #26
 8010fae:	bf42      	ittt	mi
 8010fb0:	6833      	ldrmi	r3, [r6, #0]
 8010fb2:	3302      	addmi	r3, #2
 8010fb4:	6033      	strmi	r3, [r6, #0]
 8010fb6:	6825      	ldr	r5, [r4, #0]
 8010fb8:	f015 0506 	ands.w	r5, r5, #6
 8010fbc:	d106      	bne.n	8010fcc <_printf_common+0x48>
 8010fbe:	f104 0a19 	add.w	sl, r4, #25
 8010fc2:	68e3      	ldr	r3, [r4, #12]
 8010fc4:	6832      	ldr	r2, [r6, #0]
 8010fc6:	1a9b      	subs	r3, r3, r2
 8010fc8:	42ab      	cmp	r3, r5
 8010fca:	dc28      	bgt.n	801101e <_printf_common+0x9a>
 8010fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010fd0:	1e13      	subs	r3, r2, #0
 8010fd2:	6822      	ldr	r2, [r4, #0]
 8010fd4:	bf18      	it	ne
 8010fd6:	2301      	movne	r3, #1
 8010fd8:	0692      	lsls	r2, r2, #26
 8010fda:	d42d      	bmi.n	8011038 <_printf_common+0xb4>
 8010fdc:	4649      	mov	r1, r9
 8010fde:	4638      	mov	r0, r7
 8010fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010fe4:	47c0      	blx	r8
 8010fe6:	3001      	adds	r0, #1
 8010fe8:	d020      	beq.n	801102c <_printf_common+0xa8>
 8010fea:	6823      	ldr	r3, [r4, #0]
 8010fec:	68e5      	ldr	r5, [r4, #12]
 8010fee:	f003 0306 	and.w	r3, r3, #6
 8010ff2:	2b04      	cmp	r3, #4
 8010ff4:	bf18      	it	ne
 8010ff6:	2500      	movne	r5, #0
 8010ff8:	6832      	ldr	r2, [r6, #0]
 8010ffa:	f04f 0600 	mov.w	r6, #0
 8010ffe:	68a3      	ldr	r3, [r4, #8]
 8011000:	bf08      	it	eq
 8011002:	1aad      	subeq	r5, r5, r2
 8011004:	6922      	ldr	r2, [r4, #16]
 8011006:	bf08      	it	eq
 8011008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801100c:	4293      	cmp	r3, r2
 801100e:	bfc4      	itt	gt
 8011010:	1a9b      	subgt	r3, r3, r2
 8011012:	18ed      	addgt	r5, r5, r3
 8011014:	341a      	adds	r4, #26
 8011016:	42b5      	cmp	r5, r6
 8011018:	d11a      	bne.n	8011050 <_printf_common+0xcc>
 801101a:	2000      	movs	r0, #0
 801101c:	e008      	b.n	8011030 <_printf_common+0xac>
 801101e:	2301      	movs	r3, #1
 8011020:	4652      	mov	r2, sl
 8011022:	4649      	mov	r1, r9
 8011024:	4638      	mov	r0, r7
 8011026:	47c0      	blx	r8
 8011028:	3001      	adds	r0, #1
 801102a:	d103      	bne.n	8011034 <_printf_common+0xb0>
 801102c:	f04f 30ff 	mov.w	r0, #4294967295
 8011030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011034:	3501      	adds	r5, #1
 8011036:	e7c4      	b.n	8010fc2 <_printf_common+0x3e>
 8011038:	2030      	movs	r0, #48	; 0x30
 801103a:	18e1      	adds	r1, r4, r3
 801103c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011040:	1c5a      	adds	r2, r3, #1
 8011042:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011046:	4422      	add	r2, r4
 8011048:	3302      	adds	r3, #2
 801104a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801104e:	e7c5      	b.n	8010fdc <_printf_common+0x58>
 8011050:	2301      	movs	r3, #1
 8011052:	4622      	mov	r2, r4
 8011054:	4649      	mov	r1, r9
 8011056:	4638      	mov	r0, r7
 8011058:	47c0      	blx	r8
 801105a:	3001      	adds	r0, #1
 801105c:	d0e6      	beq.n	801102c <_printf_common+0xa8>
 801105e:	3601      	adds	r6, #1
 8011060:	e7d9      	b.n	8011016 <_printf_common+0x92>
	...

08011064 <_printf_i>:
 8011064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011068:	460c      	mov	r4, r1
 801106a:	7e27      	ldrb	r7, [r4, #24]
 801106c:	4691      	mov	r9, r2
 801106e:	2f78      	cmp	r7, #120	; 0x78
 8011070:	4680      	mov	r8, r0
 8011072:	469a      	mov	sl, r3
 8011074:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011076:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801107a:	d807      	bhi.n	801108c <_printf_i+0x28>
 801107c:	2f62      	cmp	r7, #98	; 0x62
 801107e:	d80a      	bhi.n	8011096 <_printf_i+0x32>
 8011080:	2f00      	cmp	r7, #0
 8011082:	f000 80d9 	beq.w	8011238 <_printf_i+0x1d4>
 8011086:	2f58      	cmp	r7, #88	; 0x58
 8011088:	f000 80a4 	beq.w	80111d4 <_printf_i+0x170>
 801108c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011094:	e03a      	b.n	801110c <_printf_i+0xa8>
 8011096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801109a:	2b15      	cmp	r3, #21
 801109c:	d8f6      	bhi.n	801108c <_printf_i+0x28>
 801109e:	a001      	add	r0, pc, #4	; (adr r0, 80110a4 <_printf_i+0x40>)
 80110a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80110a4:	080110fd 	.word	0x080110fd
 80110a8:	08011111 	.word	0x08011111
 80110ac:	0801108d 	.word	0x0801108d
 80110b0:	0801108d 	.word	0x0801108d
 80110b4:	0801108d 	.word	0x0801108d
 80110b8:	0801108d 	.word	0x0801108d
 80110bc:	08011111 	.word	0x08011111
 80110c0:	0801108d 	.word	0x0801108d
 80110c4:	0801108d 	.word	0x0801108d
 80110c8:	0801108d 	.word	0x0801108d
 80110cc:	0801108d 	.word	0x0801108d
 80110d0:	0801121f 	.word	0x0801121f
 80110d4:	08011141 	.word	0x08011141
 80110d8:	08011201 	.word	0x08011201
 80110dc:	0801108d 	.word	0x0801108d
 80110e0:	0801108d 	.word	0x0801108d
 80110e4:	08011241 	.word	0x08011241
 80110e8:	0801108d 	.word	0x0801108d
 80110ec:	08011141 	.word	0x08011141
 80110f0:	0801108d 	.word	0x0801108d
 80110f4:	0801108d 	.word	0x0801108d
 80110f8:	08011209 	.word	0x08011209
 80110fc:	680b      	ldr	r3, [r1, #0]
 80110fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011102:	1d1a      	adds	r2, r3, #4
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	600a      	str	r2, [r1, #0]
 8011108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801110c:	2301      	movs	r3, #1
 801110e:	e0a4      	b.n	801125a <_printf_i+0x1f6>
 8011110:	6825      	ldr	r5, [r4, #0]
 8011112:	6808      	ldr	r0, [r1, #0]
 8011114:	062e      	lsls	r6, r5, #24
 8011116:	f100 0304 	add.w	r3, r0, #4
 801111a:	d50a      	bpl.n	8011132 <_printf_i+0xce>
 801111c:	6805      	ldr	r5, [r0, #0]
 801111e:	600b      	str	r3, [r1, #0]
 8011120:	2d00      	cmp	r5, #0
 8011122:	da03      	bge.n	801112c <_printf_i+0xc8>
 8011124:	232d      	movs	r3, #45	; 0x2d
 8011126:	426d      	negs	r5, r5
 8011128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801112c:	230a      	movs	r3, #10
 801112e:	485e      	ldr	r0, [pc, #376]	; (80112a8 <_printf_i+0x244>)
 8011130:	e019      	b.n	8011166 <_printf_i+0x102>
 8011132:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011136:	6805      	ldr	r5, [r0, #0]
 8011138:	600b      	str	r3, [r1, #0]
 801113a:	bf18      	it	ne
 801113c:	b22d      	sxthne	r5, r5
 801113e:	e7ef      	b.n	8011120 <_printf_i+0xbc>
 8011140:	680b      	ldr	r3, [r1, #0]
 8011142:	6825      	ldr	r5, [r4, #0]
 8011144:	1d18      	adds	r0, r3, #4
 8011146:	6008      	str	r0, [r1, #0]
 8011148:	0628      	lsls	r0, r5, #24
 801114a:	d501      	bpl.n	8011150 <_printf_i+0xec>
 801114c:	681d      	ldr	r5, [r3, #0]
 801114e:	e002      	b.n	8011156 <_printf_i+0xf2>
 8011150:	0669      	lsls	r1, r5, #25
 8011152:	d5fb      	bpl.n	801114c <_printf_i+0xe8>
 8011154:	881d      	ldrh	r5, [r3, #0]
 8011156:	2f6f      	cmp	r7, #111	; 0x6f
 8011158:	bf0c      	ite	eq
 801115a:	2308      	moveq	r3, #8
 801115c:	230a      	movne	r3, #10
 801115e:	4852      	ldr	r0, [pc, #328]	; (80112a8 <_printf_i+0x244>)
 8011160:	2100      	movs	r1, #0
 8011162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011166:	6866      	ldr	r6, [r4, #4]
 8011168:	2e00      	cmp	r6, #0
 801116a:	bfa8      	it	ge
 801116c:	6821      	ldrge	r1, [r4, #0]
 801116e:	60a6      	str	r6, [r4, #8]
 8011170:	bfa4      	itt	ge
 8011172:	f021 0104 	bicge.w	r1, r1, #4
 8011176:	6021      	strge	r1, [r4, #0]
 8011178:	b90d      	cbnz	r5, 801117e <_printf_i+0x11a>
 801117a:	2e00      	cmp	r6, #0
 801117c:	d04d      	beq.n	801121a <_printf_i+0x1b6>
 801117e:	4616      	mov	r6, r2
 8011180:	fbb5 f1f3 	udiv	r1, r5, r3
 8011184:	fb03 5711 	mls	r7, r3, r1, r5
 8011188:	5dc7      	ldrb	r7, [r0, r7]
 801118a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801118e:	462f      	mov	r7, r5
 8011190:	42bb      	cmp	r3, r7
 8011192:	460d      	mov	r5, r1
 8011194:	d9f4      	bls.n	8011180 <_printf_i+0x11c>
 8011196:	2b08      	cmp	r3, #8
 8011198:	d10b      	bne.n	80111b2 <_printf_i+0x14e>
 801119a:	6823      	ldr	r3, [r4, #0]
 801119c:	07df      	lsls	r7, r3, #31
 801119e:	d508      	bpl.n	80111b2 <_printf_i+0x14e>
 80111a0:	6923      	ldr	r3, [r4, #16]
 80111a2:	6861      	ldr	r1, [r4, #4]
 80111a4:	4299      	cmp	r1, r3
 80111a6:	bfde      	ittt	le
 80111a8:	2330      	movle	r3, #48	; 0x30
 80111aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80111ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80111b2:	1b92      	subs	r2, r2, r6
 80111b4:	6122      	str	r2, [r4, #16]
 80111b6:	464b      	mov	r3, r9
 80111b8:	4621      	mov	r1, r4
 80111ba:	4640      	mov	r0, r8
 80111bc:	f8cd a000 	str.w	sl, [sp]
 80111c0:	aa03      	add	r2, sp, #12
 80111c2:	f7ff fedf 	bl	8010f84 <_printf_common>
 80111c6:	3001      	adds	r0, #1
 80111c8:	d14c      	bne.n	8011264 <_printf_i+0x200>
 80111ca:	f04f 30ff 	mov.w	r0, #4294967295
 80111ce:	b004      	add	sp, #16
 80111d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111d4:	4834      	ldr	r0, [pc, #208]	; (80112a8 <_printf_i+0x244>)
 80111d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80111da:	680e      	ldr	r6, [r1, #0]
 80111dc:	6823      	ldr	r3, [r4, #0]
 80111de:	f856 5b04 	ldr.w	r5, [r6], #4
 80111e2:	061f      	lsls	r7, r3, #24
 80111e4:	600e      	str	r6, [r1, #0]
 80111e6:	d514      	bpl.n	8011212 <_printf_i+0x1ae>
 80111e8:	07d9      	lsls	r1, r3, #31
 80111ea:	bf44      	itt	mi
 80111ec:	f043 0320 	orrmi.w	r3, r3, #32
 80111f0:	6023      	strmi	r3, [r4, #0]
 80111f2:	b91d      	cbnz	r5, 80111fc <_printf_i+0x198>
 80111f4:	6823      	ldr	r3, [r4, #0]
 80111f6:	f023 0320 	bic.w	r3, r3, #32
 80111fa:	6023      	str	r3, [r4, #0]
 80111fc:	2310      	movs	r3, #16
 80111fe:	e7af      	b.n	8011160 <_printf_i+0xfc>
 8011200:	6823      	ldr	r3, [r4, #0]
 8011202:	f043 0320 	orr.w	r3, r3, #32
 8011206:	6023      	str	r3, [r4, #0]
 8011208:	2378      	movs	r3, #120	; 0x78
 801120a:	4828      	ldr	r0, [pc, #160]	; (80112ac <_printf_i+0x248>)
 801120c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011210:	e7e3      	b.n	80111da <_printf_i+0x176>
 8011212:	065e      	lsls	r6, r3, #25
 8011214:	bf48      	it	mi
 8011216:	b2ad      	uxthmi	r5, r5
 8011218:	e7e6      	b.n	80111e8 <_printf_i+0x184>
 801121a:	4616      	mov	r6, r2
 801121c:	e7bb      	b.n	8011196 <_printf_i+0x132>
 801121e:	680b      	ldr	r3, [r1, #0]
 8011220:	6826      	ldr	r6, [r4, #0]
 8011222:	1d1d      	adds	r5, r3, #4
 8011224:	6960      	ldr	r0, [r4, #20]
 8011226:	600d      	str	r5, [r1, #0]
 8011228:	0635      	lsls	r5, r6, #24
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	d501      	bpl.n	8011232 <_printf_i+0x1ce>
 801122e:	6018      	str	r0, [r3, #0]
 8011230:	e002      	b.n	8011238 <_printf_i+0x1d4>
 8011232:	0671      	lsls	r1, r6, #25
 8011234:	d5fb      	bpl.n	801122e <_printf_i+0x1ca>
 8011236:	8018      	strh	r0, [r3, #0]
 8011238:	2300      	movs	r3, #0
 801123a:	4616      	mov	r6, r2
 801123c:	6123      	str	r3, [r4, #16]
 801123e:	e7ba      	b.n	80111b6 <_printf_i+0x152>
 8011240:	680b      	ldr	r3, [r1, #0]
 8011242:	1d1a      	adds	r2, r3, #4
 8011244:	600a      	str	r2, [r1, #0]
 8011246:	681e      	ldr	r6, [r3, #0]
 8011248:	2100      	movs	r1, #0
 801124a:	4630      	mov	r0, r6
 801124c:	6862      	ldr	r2, [r4, #4]
 801124e:	f000 f831 	bl	80112b4 <memchr>
 8011252:	b108      	cbz	r0, 8011258 <_printf_i+0x1f4>
 8011254:	1b80      	subs	r0, r0, r6
 8011256:	6060      	str	r0, [r4, #4]
 8011258:	6863      	ldr	r3, [r4, #4]
 801125a:	6123      	str	r3, [r4, #16]
 801125c:	2300      	movs	r3, #0
 801125e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011262:	e7a8      	b.n	80111b6 <_printf_i+0x152>
 8011264:	4632      	mov	r2, r6
 8011266:	4649      	mov	r1, r9
 8011268:	4640      	mov	r0, r8
 801126a:	6923      	ldr	r3, [r4, #16]
 801126c:	47d0      	blx	sl
 801126e:	3001      	adds	r0, #1
 8011270:	d0ab      	beq.n	80111ca <_printf_i+0x166>
 8011272:	6823      	ldr	r3, [r4, #0]
 8011274:	079b      	lsls	r3, r3, #30
 8011276:	d413      	bmi.n	80112a0 <_printf_i+0x23c>
 8011278:	68e0      	ldr	r0, [r4, #12]
 801127a:	9b03      	ldr	r3, [sp, #12]
 801127c:	4298      	cmp	r0, r3
 801127e:	bfb8      	it	lt
 8011280:	4618      	movlt	r0, r3
 8011282:	e7a4      	b.n	80111ce <_printf_i+0x16a>
 8011284:	2301      	movs	r3, #1
 8011286:	4632      	mov	r2, r6
 8011288:	4649      	mov	r1, r9
 801128a:	4640      	mov	r0, r8
 801128c:	47d0      	blx	sl
 801128e:	3001      	adds	r0, #1
 8011290:	d09b      	beq.n	80111ca <_printf_i+0x166>
 8011292:	3501      	adds	r5, #1
 8011294:	68e3      	ldr	r3, [r4, #12]
 8011296:	9903      	ldr	r1, [sp, #12]
 8011298:	1a5b      	subs	r3, r3, r1
 801129a:	42ab      	cmp	r3, r5
 801129c:	dcf2      	bgt.n	8011284 <_printf_i+0x220>
 801129e:	e7eb      	b.n	8011278 <_printf_i+0x214>
 80112a0:	2500      	movs	r5, #0
 80112a2:	f104 0619 	add.w	r6, r4, #25
 80112a6:	e7f5      	b.n	8011294 <_printf_i+0x230>
 80112a8:	080119d9 	.word	0x080119d9
 80112ac:	080119ea 	.word	0x080119ea

080112b0 <__retarget_lock_acquire_recursive>:
 80112b0:	4770      	bx	lr

080112b2 <__retarget_lock_release_recursive>:
 80112b2:	4770      	bx	lr

080112b4 <memchr>:
 80112b4:	4603      	mov	r3, r0
 80112b6:	b510      	push	{r4, lr}
 80112b8:	b2c9      	uxtb	r1, r1
 80112ba:	4402      	add	r2, r0
 80112bc:	4293      	cmp	r3, r2
 80112be:	4618      	mov	r0, r3
 80112c0:	d101      	bne.n	80112c6 <memchr+0x12>
 80112c2:	2000      	movs	r0, #0
 80112c4:	e003      	b.n	80112ce <memchr+0x1a>
 80112c6:	7804      	ldrb	r4, [r0, #0]
 80112c8:	3301      	adds	r3, #1
 80112ca:	428c      	cmp	r4, r1
 80112cc:	d1f6      	bne.n	80112bc <memchr+0x8>
 80112ce:	bd10      	pop	{r4, pc}

080112d0 <memmove>:
 80112d0:	4288      	cmp	r0, r1
 80112d2:	b510      	push	{r4, lr}
 80112d4:	eb01 0402 	add.w	r4, r1, r2
 80112d8:	d902      	bls.n	80112e0 <memmove+0x10>
 80112da:	4284      	cmp	r4, r0
 80112dc:	4623      	mov	r3, r4
 80112de:	d807      	bhi.n	80112f0 <memmove+0x20>
 80112e0:	1e43      	subs	r3, r0, #1
 80112e2:	42a1      	cmp	r1, r4
 80112e4:	d008      	beq.n	80112f8 <memmove+0x28>
 80112e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80112ee:	e7f8      	b.n	80112e2 <memmove+0x12>
 80112f0:	4601      	mov	r1, r0
 80112f2:	4402      	add	r2, r0
 80112f4:	428a      	cmp	r2, r1
 80112f6:	d100      	bne.n	80112fa <memmove+0x2a>
 80112f8:	bd10      	pop	{r4, pc}
 80112fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80112fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011302:	e7f7      	b.n	80112f4 <memmove+0x24>

08011304 <_realloc_r>:
 8011304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011306:	4607      	mov	r7, r0
 8011308:	4614      	mov	r4, r2
 801130a:	460e      	mov	r6, r1
 801130c:	b921      	cbnz	r1, 8011318 <_realloc_r+0x14>
 801130e:	4611      	mov	r1, r2
 8011310:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011314:	f7ff bc44 	b.w	8010ba0 <_malloc_r>
 8011318:	b922      	cbnz	r2, 8011324 <_realloc_r+0x20>
 801131a:	f7ff fbf5 	bl	8010b08 <_free_r>
 801131e:	4625      	mov	r5, r4
 8011320:	4628      	mov	r0, r5
 8011322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011324:	f000 f814 	bl	8011350 <_malloc_usable_size_r>
 8011328:	42a0      	cmp	r0, r4
 801132a:	d20f      	bcs.n	801134c <_realloc_r+0x48>
 801132c:	4621      	mov	r1, r4
 801132e:	4638      	mov	r0, r7
 8011330:	f7ff fc36 	bl	8010ba0 <_malloc_r>
 8011334:	4605      	mov	r5, r0
 8011336:	2800      	cmp	r0, #0
 8011338:	d0f2      	beq.n	8011320 <_realloc_r+0x1c>
 801133a:	4631      	mov	r1, r6
 801133c:	4622      	mov	r2, r4
 801133e:	f7ff fbcd 	bl	8010adc <memcpy>
 8011342:	4631      	mov	r1, r6
 8011344:	4638      	mov	r0, r7
 8011346:	f7ff fbdf 	bl	8010b08 <_free_r>
 801134a:	e7e9      	b.n	8011320 <_realloc_r+0x1c>
 801134c:	4635      	mov	r5, r6
 801134e:	e7e7      	b.n	8011320 <_realloc_r+0x1c>

08011350 <_malloc_usable_size_r>:
 8011350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011354:	1f18      	subs	r0, r3, #4
 8011356:	2b00      	cmp	r3, #0
 8011358:	bfbc      	itt	lt
 801135a:	580b      	ldrlt	r3, [r1, r0]
 801135c:	18c0      	addlt	r0, r0, r3
 801135e:	4770      	bx	lr

08011360 <_init>:
 8011360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011362:	bf00      	nop
 8011364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011366:	bc08      	pop	{r3}
 8011368:	469e      	mov	lr, r3
 801136a:	4770      	bx	lr

0801136c <_fini>:
 801136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801136e:	bf00      	nop
 8011370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011372:	bc08      	pop	{r3}
 8011374:	469e      	mov	lr, r3
 8011376:	4770      	bx	lr
