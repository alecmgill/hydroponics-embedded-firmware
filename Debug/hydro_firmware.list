
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800f840  0800f840  0001f840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd2c  0800fd2c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd2c  0800fd2c  0001fd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd34  0800fd34  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd34  0800fd34  0001fd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd38  0800fd38  0001fd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800fd3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005298  200001f0  0800ff2c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20005488  0800ff2c  00025488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ec77  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000069b4  00000000  00000000  0005ee90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d98  00000000  00000000  00065848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b50  00000000  00000000  000675e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008dda  00000000  00000000  00069130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026b25  00000000  00000000  00071f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbd64  00000000  00000000  00098a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00174793  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009054  00000000  00000000  001747e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f828 	.word	0x0800f828

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800f828 	.word	0x0800f828

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a6 	b.w	8000f4c <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83e 	bl	8000c88 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	460c      	mov	r4, r1
 8000c1c:	4605      	mov	r5, r0
 8000c1e:	4621      	mov	r1, r4
 8000c20:	4628      	mov	r0, r5
 8000c22:	2200      	movs	r2, #0
 8000c24:	2300      	movs	r3, #0
 8000c26:	f7ff ff09 	bl	8000a3c <__aeabi_dcmplt>
 8000c2a:	b928      	cbnz	r0, 8000c38 <__aeabi_d2lz+0x20>
 8000c2c:	4628      	mov	r0, r5
 8000c2e:	4621      	mov	r1, r4
 8000c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c34:	f000 b80a 	b.w	8000c4c <__aeabi_d2ulz>
 8000c38:	4628      	mov	r0, r5
 8000c3a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c3e:	f000 f805 	bl	8000c4c <__aeabi_d2ulz>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop

08000c4c <__aeabi_d2ulz>:
 8000c4c:	b5d0      	push	{r4, r6, r7, lr}
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <__aeabi_d2ulz+0x34>)
 8000c52:	4606      	mov	r6, r0
 8000c54:	460f      	mov	r7, r1
 8000c56:	f7ff fc7f 	bl	8000558 <__aeabi_dmul>
 8000c5a:	f7ff ff55 	bl	8000b08 <__aeabi_d2uiz>
 8000c5e:	4604      	mov	r4, r0
 8000c60:	f7ff fc00 	bl	8000464 <__aeabi_ui2d>
 8000c64:	2200      	movs	r2, #0
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <__aeabi_d2ulz+0x38>)
 8000c68:	f7ff fc76 	bl	8000558 <__aeabi_dmul>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	4630      	mov	r0, r6
 8000c72:	4639      	mov	r1, r7
 8000c74:	f7ff fab8 	bl	80001e8 <__aeabi_dsub>
 8000c78:	f7ff ff46 	bl	8000b08 <__aeabi_d2uiz>
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c80:	3df00000 	.word	0x3df00000
 8000c84:	41f00000 	.word	0x41f00000

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	468e      	mov	lr, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f040 8083 	bne.w	8000da0 <__udivmoddi4+0x118>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4617      	mov	r7, r2
 8000c9e:	d947      	bls.n	8000d30 <__udivmoddi4+0xa8>
 8000ca0:	fab2 f382 	clz	r3, r2
 8000ca4:	b14b      	cbz	r3, 8000cba <__udivmoddi4+0x32>
 8000ca6:	f1c3 0120 	rsb	r1, r3, #32
 8000caa:	fa05 fe03 	lsl.w	lr, r5, r3
 8000cae:	fa20 f101 	lsr.w	r1, r0, r1
 8000cb2:	409f      	lsls	r7, r3
 8000cb4:	ea41 0e0e 	orr.w	lr, r1, lr
 8000cb8:	409c      	lsls	r4, r3
 8000cba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cbe:	fbbe fcf8 	udiv	ip, lr, r8
 8000cc2:	fa1f f987 	uxth.w	r9, r7
 8000cc6:	fb08 e21c 	mls	r2, r8, ip, lr
 8000cca:	fb0c f009 	mul.w	r0, ip, r9
 8000cce:	0c21      	lsrs	r1, r4, #16
 8000cd0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	d90a      	bls.n	8000cee <__udivmoddi4+0x66>
 8000cd8:	18ba      	adds	r2, r7, r2
 8000cda:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000cde:	f080 8118 	bcs.w	8000f12 <__udivmoddi4+0x28a>
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	f240 8115 	bls.w	8000f12 <__udivmoddi4+0x28a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	443a      	add	r2, r7
 8000cee:	1a12      	subs	r2, r2, r0
 8000cf0:	fbb2 f0f8 	udiv	r0, r2, r8
 8000cf4:	fb08 2210 	mls	r2, r8, r0, r2
 8000cf8:	fb00 f109 	mul.w	r1, r0, r9
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d02:	42a1      	cmp	r1, r4
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d06:	193c      	adds	r4, r7, r4
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	f080 8103 	bcs.w	8000f16 <__udivmoddi4+0x28e>
 8000d10:	42a1      	cmp	r1, r4
 8000d12:	f240 8100 	bls.w	8000f16 <__udivmoddi4+0x28e>
 8000d16:	3802      	subs	r0, #2
 8000d18:	443c      	add	r4, r7
 8000d1a:	1a64      	subs	r4, r4, r1
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d22:	b11e      	cbz	r6, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	2200      	movs	r2, #0
 8000d26:	40dc      	lsrs	r4, r3
 8000d28:	e9c6 4200 	strd	r4, r2, [r6]
 8000d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xac>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f382 	clz	r3, r2
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14f      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3c:	1a8d      	subs	r5, r1, r2
 8000d3e:	2101      	movs	r1, #1
 8000d40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d44:	fa1f f882 	uxth.w	r8, r2
 8000d48:	fbb5 fcfe 	udiv	ip, r5, lr
 8000d4c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000d50:	fb08 f00c 	mul.w	r0, r8, ip
 8000d54:	0c22      	lsrs	r2, r4, #16
 8000d56:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000d5a:	42a8      	cmp	r0, r5
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0xe6>
 8000d5e:	197d      	adds	r5, r7, r5
 8000d60:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0xe4>
 8000d66:	42a8      	cmp	r0, r5
 8000d68:	f200 80e9 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000d6c:	4694      	mov	ip, r2
 8000d6e:	1a2d      	subs	r5, r5, r0
 8000d70:	fbb5 f0fe 	udiv	r0, r5, lr
 8000d74:	fb0e 5510 	mls	r5, lr, r0, r5
 8000d78:	fb08 f800 	mul.w	r8, r8, r0
 8000d7c:	b2a4      	uxth	r4, r4
 8000d7e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d82:	45a0      	cmp	r8, r4
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x10e>
 8000d86:	193c      	adds	r4, r7, r4
 8000d88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x10c>
 8000d8e:	45a0      	cmp	r8, r4
 8000d90:	f200 80d9 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d94:	4610      	mov	r0, r2
 8000d96:	eba4 0408 	sub.w	r4, r4, r8
 8000d9a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9e:	e7c0      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	f000 80b1 	beq.w	8000f0c <__udivmoddi4+0x284>
 8000daa:	2100      	movs	r1, #0
 8000dac:	e9c6 0500 	strd	r0, r5, [r6]
 8000db0:	4608      	mov	r0, r1
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f183 	clz	r1, r3
 8000dba:	2900      	cmp	r1, #0
 8000dbc:	d14b      	bne.n	8000e56 <__udivmoddi4+0x1ce>
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b9 	bhi.w	8000f3a <__udivmoddi4+0x2b2>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb65 0303 	sbc.w	r3, r5, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	469e      	mov	lr, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0aa      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000dd6:	e9c6 4e00 	strd	r4, lr, [r6]
 8000dda:	e7a7      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000ddc:	409f      	lsls	r7, r3
 8000dde:	f1c3 0220 	rsb	r2, r3, #32
 8000de2:	40d1      	lsrs	r1, r2
 8000de4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df4:	fa24 f202 	lsr.w	r2, r4, r2
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	fb00 fc08 	mul.w	ip, r0, r8
 8000dfe:	432a      	orrs	r2, r5
 8000e00:	0c15      	lsrs	r5, r2, #16
 8000e02:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000e06:	45ac      	cmp	ip, r5
 8000e08:	fa04 f403 	lsl.w	r4, r4, r3
 8000e0c:	d909      	bls.n	8000e22 <__udivmoddi4+0x19a>
 8000e0e:	197d      	adds	r5, r7, r5
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	f080 808f 	bcs.w	8000f36 <__udivmoddi4+0x2ae>
 8000e18:	45ac      	cmp	ip, r5
 8000e1a:	f240 808c 	bls.w	8000f36 <__udivmoddi4+0x2ae>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	443d      	add	r5, r7
 8000e22:	eba5 050c 	sub.w	r5, r5, ip
 8000e26:	fbb5 f1fe 	udiv	r1, r5, lr
 8000e2a:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000e2e:	fb01 f908 	mul.w	r9, r1, r8
 8000e32:	b295      	uxth	r5, r2
 8000e34:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000e38:	45a9      	cmp	r9, r5
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	197d      	adds	r5, r7, r5
 8000e3e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000e42:	d274      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000e44:	45a9      	cmp	r9, r5
 8000e46:	d972      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000e48:	3902      	subs	r1, #2
 8000e4a:	443d      	add	r5, r7
 8000e4c:	eba5 0509 	sub.w	r5, r5, r9
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e778      	b.n	8000d48 <__udivmoddi4+0xc0>
 8000e56:	f1c1 0720 	rsb	r7, r1, #32
 8000e5a:	408b      	lsls	r3, r1
 8000e5c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e60:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e64:	fa25 f407 	lsr.w	r4, r5, r7
 8000e68:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e6c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000e70:	fa1f f88c 	uxth.w	r8, ip
 8000e74:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e78:	fa20 f307 	lsr.w	r3, r0, r7
 8000e7c:	fb09 fa08 	mul.w	sl, r9, r8
 8000e80:	408d      	lsls	r5, r1
 8000e82:	431d      	orrs	r5, r3
 8000e84:	0c2b      	lsrs	r3, r5, #16
 8000e86:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e90:	fa00 f301 	lsl.w	r3, r0, r1
 8000e94:	d909      	bls.n	8000eaa <__udivmoddi4+0x222>
 8000e96:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9e:	d248      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000ea0:	45a2      	cmp	sl, r4
 8000ea2:	d946      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000ea4:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea8:	4464      	add	r4, ip
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	fbb4 f0fe 	udiv	r0, r4, lr
 8000eb2:	fb0e 4410 	mls	r4, lr, r0, r4
 8000eb6:	fb00 fa08 	mul.w	sl, r0, r8
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec0:	45a2      	cmp	sl, r4
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x24e>
 8000ec4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ecc:	d22d      	bcs.n	8000f2a <__udivmoddi4+0x2a2>
 8000ece:	45a2      	cmp	sl, r4
 8000ed0:	d92b      	bls.n	8000f2a <__udivmoddi4+0x2a2>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4464      	add	r4, ip
 8000ed6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	eba4 040a 	sub.w	r4, r4, sl
 8000ee2:	454c      	cmp	r4, r9
 8000ee4:	46c6      	mov	lr, r8
 8000ee6:	464d      	mov	r5, r9
 8000ee8:	d319      	bcc.n	8000f1e <__udivmoddi4+0x296>
 8000eea:	d016      	beq.n	8000f1a <__udivmoddi4+0x292>
 8000eec:	b15e      	cbz	r6, 8000f06 <__udivmoddi4+0x27e>
 8000eee:	ebb3 020e 	subs.w	r2, r3, lr
 8000ef2:	eb64 0405 	sbc.w	r4, r4, r5
 8000ef6:	fa04 f707 	lsl.w	r7, r4, r7
 8000efa:	fa22 f301 	lsr.w	r3, r2, r1
 8000efe:	431f      	orrs	r7, r3
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	e9c6 7400 	strd	r7, r4, [r6]
 8000f06:	2100      	movs	r1, #0
 8000f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e70c      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f12:	468c      	mov	ip, r1
 8000f14:	e6eb      	b.n	8000cee <__udivmoddi4+0x66>
 8000f16:	4610      	mov	r0, r2
 8000f18:	e6ff      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f1a:	4543      	cmp	r3, r8
 8000f1c:	d2e6      	bcs.n	8000eec <__udivmoddi4+0x264>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 050c 	sbc.w	r5, r9, ip
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e0      	b.n	8000eec <__udivmoddi4+0x264>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d3      	b.n	8000ed6 <__udivmoddi4+0x24e>
 8000f2e:	4611      	mov	r1, r2
 8000f30:	e78c      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7b9      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e773      	b.n	8000e22 <__udivmoddi4+0x19a>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e749      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f42:	443d      	add	r5, r7
 8000f44:	e713      	b.n	8000d6e <__udivmoddi4+0xe6>
 8000f46:	3802      	subs	r0, #2
 8000f48:	443c      	add	r4, r7
 8000f4a:	e724      	b.n	8000d96 <__udivmoddi4+0x10e>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f000 fff0 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f82e 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f000 fb60 	bl	8001620 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f60:	f000 f97c 	bl	800125c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000f64:	f000 fa26 	bl	80013b4 <MX_TIM4_Init>
  MX_TIM10_Init();
 8000f68:	f000 fa72 	bl	8001450 <MX_TIM10_Init>
  MX_RTC_Init();
 8000f6c:	f000 f8e4 	bl	8001138 <MX_RTC_Init>
  MX_TIM12_Init();
 8000f70:	f000 fabc 	bl	80014ec <MX_TIM12_Init>
  MX_FATFS_Init();
 8000f74:	f007 fa7e 	bl	8008474 <MX_FATFS_Init>
  MX_DMA_Init();
 8000f78:	f000 fb1c 	bl	80015b4 <MX_DMA_Init>
  MX_ADC3_Init();
 8000f7c:	f000 f87c 	bl	8001078 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000f80:	f000 faee 	bl	8001560 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
 // (DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
//HAL_DMA_RegisterCallback(&hdma_adc2,HAL_DMA_XFER_CPLT_CB_ID,&DMATransferComplete);
HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&nutrient_ph_values, 80);
 8000f84:	2250      	movs	r2, #80	; 0x50
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <main+0x58>)
 8000f88:	4808      	ldr	r0, [pc, #32]	; (8000fac <main+0x5c>)
 8000f8a:	f001 f9bb 	bl	8002304 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_UART_Transmit(&huart3,UART_data,8,1000);
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	2208      	movs	r2, #8
 8000f94:	4906      	ldr	r1, [pc, #24]	; (8000fb0 <main+0x60>)
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <main+0x64>)
 8000f98:	f006 f918 	bl	80071cc <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000f9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fa0:	f001 f808 	bl	8001fb4 <HAL_Delay>
	  HAL_UART_Transmit(&huart3,UART_data,8,1000);
 8000fa4:	e7f3      	b.n	8000f8e <main+0x3e>
 8000fa6:	bf00      	nop
 8000fa8:	2000020c 	.word	0x2000020c
 8000fac:	20000764 	.word	0x20000764
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000678 	.word	0x20000678

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b096      	sub	sp, #88	; 0x58
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc2:	2230      	movs	r2, #48	; 0x30
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f00a f92c 	bl	800b224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000fea:	230a      	movs	r3, #10
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ffe:	2300      	movs	r3, #0
 8001000:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001002:	2308      	movs	r3, #8
 8001004:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001006:	23d8      	movs	r3, #216	; 0xd8
 8001008:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800100a:	2306      	movs	r3, #6
 800100c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800100e:	2309      	movs	r3, #9
 8001010:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001016:	4618      	mov	r0, r3
 8001018:	f003 ffba 	bl	8004f90 <HAL_RCC_OscConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001022:	f000 fbdf 	bl	80017e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001032:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001036:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2102      	movs	r1, #2
 8001044:	4618      	mov	r0, r3
 8001046:	f004 f9f3 	bl	8005430 <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001050:	f000 fbc8 	bl	80017e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001054:	2304      	movs	r3, #4
 8001056:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4618      	mov	r0, r3
 8001062:	f004 fc05 	bl	8005870 <HAL_RCCEx_PeriphCLKConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800106c:	f000 fbba 	bl	80017e4 <Error_Handler>
  }
}
 8001070:	bf00      	nop
 8001072:	3758      	adds	r7, #88	; 0x58
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <MX_ADC3_Init+0xb4>)
 800108c:	4a28      	ldr	r2, [pc, #160]	; (8001130 <MX_ADC3_Init+0xb8>)
 800108e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <MX_ADC3_Init+0xb4>)
 8001092:	2200      	movs	r2, #0
 8001094:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <MX_ADC3_Init+0xb4>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <MX_ADC3_Init+0xb4>)
 800109e:	2201      	movs	r2, #1
 80010a0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <MX_ADC3_Init+0xb4>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010a8:	4b20      	ldr	r3, [pc, #128]	; (800112c <MX_ADC3_Init+0xb4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <MX_ADC3_Init+0xb4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_ADC3_Init+0xb4>)
 80010b8:	4a1e      	ldr	r2, [pc, #120]	; (8001134 <MX_ADC3_Init+0xbc>)
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_ADC3_Init+0xb4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_ADC3_Init+0xb4>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_ADC3_Init+0xb4>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_ADC3_Init+0xb4>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010d6:	4815      	ldr	r0, [pc, #84]	; (800112c <MX_ADC3_Init+0xb4>)
 80010d8:	f000 ff90 	bl	8001ffc <HAL_ADC_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80010e2:	f000 fb7f 	bl	80017e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010e6:	230f      	movs	r3, #15
 80010e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010ee:	2307      	movs	r3, #7
 80010f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_ADC3_Init+0xb4>)
 80010f8:	f001 f9fe 	bl	80024f8 <HAL_ADC_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001102:	f000 fb6f 	bl	80017e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001106:	230e      	movs	r3, #14
 8001108:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800110a:	2302      	movs	r3, #2
 800110c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_ADC3_Init+0xb4>)
 8001114:	f001 f9f0 	bl	80024f8 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 800111e:	f000 fb61 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000764 	.word	0x20000764
 8001130:	40012200 	.word	0x40012200
 8001134:	0f000001 	.word	0x0f000001

08001138 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001160:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <MX_RTC_Init+0x11c>)
 8001162:	4a3d      	ldr	r2, [pc, #244]	; (8001258 <MX_RTC_Init+0x120>)
 8001164:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001166:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <MX_RTC_Init+0x11c>)
 8001168:	2200      	movs	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800116c:	4b39      	ldr	r3, [pc, #228]	; (8001254 <MX_RTC_Init+0x11c>)
 800116e:	227f      	movs	r2, #127	; 0x7f
 8001170:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001172:	4b38      	ldr	r3, [pc, #224]	; (8001254 <MX_RTC_Init+0x11c>)
 8001174:	22ff      	movs	r2, #255	; 0xff
 8001176:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001178:	4b36      	ldr	r3, [pc, #216]	; (8001254 <MX_RTC_Init+0x11c>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800117e:	4b35      	ldr	r3, [pc, #212]	; (8001254 <MX_RTC_Init+0x11c>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001184:	4b33      	ldr	r3, [pc, #204]	; (8001254 <MX_RTC_Init+0x11c>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800118a:	4832      	ldr	r0, [pc, #200]	; (8001254 <MX_RTC_Init+0x11c>)
 800118c:	f004 fc66 	bl	8005a5c <HAL_RTC_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001196:	f000 fb25 	bl	80017e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800119a:	2300      	movs	r3, #0
 800119c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0x0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0x0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	4825      	ldr	r0, [pc, #148]	; (8001254 <MX_RTC_Init+0x11c>)
 80011be:	f004 fcd7 	bl	8005b70 <HAL_RTC_SetTime>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80011c8:	f000 fb0c 	bl	80017e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011cc:	2301      	movs	r3, #1
 80011ce:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 0x1;
 80011d8:	2301      	movs	r3, #1
 80011da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 0x0;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011e4:	f107 0320 	add.w	r3, r7, #32
 80011e8:	2201      	movs	r2, #1
 80011ea:	4619      	mov	r1, r3
 80011ec:	4819      	ldr	r0, [pc, #100]	; (8001254 <MX_RTC_Init+0x11c>)
 80011ee:	f004 fd75 	bl	8005cdc <HAL_RTC_SetDate>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80011f8:	f000 faf4 	bl	80017e4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001200:	2300      	movs	r3, #0
 8001202:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001204:	2300      	movs	r3, #0
 8001206:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001218:	2301      	movs	r3, #1
 800121a:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 800121c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001220:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2201      	movs	r2, #1
 8001226:	4619      	mov	r1, r3
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <MX_RTC_Init+0x11c>)
 800122a:	f004 fdf7 	bl	8005e1c <HAL_RTC_SetAlarm>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8001234:	f000 fad6 	bl	80017e4 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_RTC_Init+0x11c>)
 800123e:	f004 ff64 	bl	800610a <HAL_RTCEx_SetWakeUpTimer>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8001248:	f000 facc 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3730      	adds	r7, #48	; 0x30
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20003820 	.word	0x20003820
 8001258:	40002800 	.word	0x40002800

0800125c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b096      	sub	sp, #88	; 0x58
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]
 800128a:	615a      	str	r2, [r3, #20]
 800128c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2220      	movs	r2, #32
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f009 ffc5 	bl	800b224 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800129a:	4b44      	ldr	r3, [pc, #272]	; (80013ac <MX_TIM1_Init+0x150>)
 800129c:	4a44      	ldr	r2, [pc, #272]	; (80013b0 <MX_TIM1_Init+0x154>)
 800129e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012a0:	4b42      	ldr	r3, [pc, #264]	; (80013ac <MX_TIM1_Init+0x150>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	4b41      	ldr	r3, [pc, #260]	; (80013ac <MX_TIM1_Init+0x150>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012ac:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <MX_TIM1_Init+0x150>)
 80012ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b4:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <MX_TIM1_Init+0x150>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ba:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <MX_TIM1_Init+0x150>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c0:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <MX_TIM1_Init+0x150>)
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012c6:	4839      	ldr	r0, [pc, #228]	; (80013ac <MX_TIM1_Init+0x150>)
 80012c8:	f004 ffb3 	bl	8006232 <HAL_TIM_Base_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012d2:	f000 fa87 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012e0:	4619      	mov	r1, r3
 80012e2:	4832      	ldr	r0, [pc, #200]	; (80013ac <MX_TIM1_Init+0x150>)
 80012e4:	f005 fa80 	bl	80067e8 <HAL_TIM_ConfigClockSource>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012ee:	f000 fa79 	bl	80017e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012f2:	482e      	ldr	r0, [pc, #184]	; (80013ac <MX_TIM1_Init+0x150>)
 80012f4:	f005 f85a 	bl	80063ac <HAL_TIM_PWM_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012fe:	f000 fa71 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800130a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800130e:	4619      	mov	r1, r3
 8001310:	4826      	ldr	r0, [pc, #152]	; (80013ac <MX_TIM1_Init+0x150>)
 8001312:	f005 fe31 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800131c:	f000 fa62 	bl	80017e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001320:	2360      	movs	r3, #96	; 0x60
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001330:	2304      	movs	r3, #4
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001334:	2300      	movs	r3, #0
 8001336:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	4819      	ldr	r0, [pc, #100]	; (80013ac <MX_TIM1_Init+0x150>)
 8001346:	f005 f991 	bl	800666c <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001350:	f000 fa48 	bl	80017e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	2208      	movs	r2, #8
 800135a:	4619      	mov	r1, r3
 800135c:	4813      	ldr	r0, [pc, #76]	; (80013ac <MX_TIM1_Init+0x150>)
 800135e:	f005 f985 	bl	800666c <HAL_TIM_PWM_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001368:	f000 fa3c 	bl	80017e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001384:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4619      	mov	r1, r3
 800138e:	4807      	ldr	r0, [pc, #28]	; (80013ac <MX_TIM1_Init+0x150>)
 8001390:	f005 fe6c 	bl	800706c <HAL_TIMEx_ConfigBreakDeadTime>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800139a:	f000 fa23 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800139e:	4803      	ldr	r0, [pc, #12]	; (80013ac <MX_TIM1_Init+0x150>)
 80013a0:	f000 fb4a 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 80013a4:	bf00      	nop
 80013a6:	3758      	adds	r7, #88	; 0x58
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20003854 	.word	0x20003854
 80013b0:	40010000 	.word	0x40010000

080013b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_TIM4_Init+0x94>)
 80013d2:	4a1e      	ldr	r2, [pc, #120]	; (800144c <MX_TIM4_Init+0x98>)
 80013d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_TIM4_Init+0x94>)
 80013d8:	2223      	movs	r2, #35	; 0x23
 80013da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_TIM4_Init+0x94>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_TIM4_Init+0x94>)
 80013e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_TIM4_Init+0x94>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_TIM4_Init+0x94>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013f6:	4814      	ldr	r0, [pc, #80]	; (8001448 <MX_TIM4_Init+0x94>)
 80013f8:	f004 ff1b 	bl	8006232 <HAL_TIM_Base_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001402:	f000 f9ef 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	4619      	mov	r1, r3
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_TIM4_Init+0x94>)
 8001414:	f005 f9e8 	bl	80067e8 <HAL_TIM_ConfigClockSource>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800141e:	f000 f9e1 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <MX_TIM4_Init+0x94>)
 8001430:	f005 fda2 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800143a:	f000 f9d3 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200005d0 	.word	0x200005d0
 800144c:	40000800 	.word	0x40000800

08001450 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
 8001464:	615a      	str	r2, [r3, #20]
 8001466:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <MX_TIM10_Init+0x94>)
 800146a:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <MX_TIM10_Init+0x98>)
 800146c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_TIM10_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_TIM10_Init+0x94>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_TIM10_Init+0x94>)
 800147c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001480:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <MX_TIM10_Init+0x94>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_TIM10_Init+0x94>)
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800148e:	4815      	ldr	r0, [pc, #84]	; (80014e4 <MX_TIM10_Init+0x94>)
 8001490:	f004 fecf 	bl	8006232 <HAL_TIM_Base_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800149a:	f000 f9a3 	bl	80017e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800149e:	4811      	ldr	r0, [pc, #68]	; (80014e4 <MX_TIM10_Init+0x94>)
 80014a0:	f004 ff84 	bl	80063ac <HAL_TIM_PWM_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80014aa:	f000 f99b 	bl	80017e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ae:	2360      	movs	r3, #96	; 0x60
 80014b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	4619      	mov	r1, r3
 80014c4:	4807      	ldr	r0, [pc, #28]	; (80014e4 <MX_TIM10_Init+0x94>)
 80014c6:	f005 f8d1 	bl	800666c <HAL_TIM_PWM_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80014d0:	f000 f988 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <MX_TIM10_Init+0x94>)
 80014d6:	f000 faaf 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 80014da:	bf00      	nop
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200006bc 	.word	0x200006bc
 80014e8:	40014400 	.word	0x40014400

080014ec <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	463b      	mov	r3, r7
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_TIM12_Init+0x6c>)
 8001500:	4a16      	ldr	r2, [pc, #88]	; (800155c <MX_TIM12_Init+0x70>)
 8001502:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1000;
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <MX_TIM12_Init+0x6c>)
 8001506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800150a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <MX_TIM12_Init+0x6c>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 36000;
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MX_TIM12_Init+0x6c>)
 8001514:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8001518:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <MX_TIM12_Init+0x6c>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <MX_TIM12_Init+0x6c>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <MX_TIM12_Init+0x6c>)
 8001528:	f004 fe83 	bl	8006232 <HAL_TIM_Base_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8001532:	f000 f957 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_TIM12_Init+0x6c>)
 8001542:	f005 f951 	bl	80067e8 <HAL_TIM_ConfigClockSource>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 800154c:	f000 f94a 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	2000389c 	.word	0x2000389c
 800155c:	40001800 	.word	0x40001800

08001560 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_USART3_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 800156c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001570:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 8001598:	f005 fdcb 	bl	8007132 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f91f 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000678 	.word	0x20000678
 80015b0:	40004800 	.word	0x40004800

080015b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_DMA_Init+0x68>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a16      	ldr	r2, [pc, #88]	; (800161c <MX_DMA_Init+0x68>)
 80015c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_DMA_Init+0x68>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_DMA_Init+0x68>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a0f      	ldr	r2, [pc, #60]	; (800161c <MX_DMA_Init+0x68>)
 80015e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <MX_DMA_Init+0x68>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2105      	movs	r1, #5
 80015f6:	200c      	movs	r0, #12
 80015f8:	f001 fae5 	bl	8002bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015fc:	200c      	movs	r0, #12
 80015fe:	f001 fafe 	bl	8002bfe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2105      	movs	r1, #5
 8001606:	2038      	movs	r0, #56	; 0x38
 8001608:	f001 fadd 	bl	8002bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800160c:	2038      	movs	r0, #56	; 0x38
 800160e:	f001 faf6 	bl	8002bfe <HAL_NVIC_EnableIRQ>

}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800

08001620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	4b56      	ldr	r3, [pc, #344]	; (8001794 <MX_GPIO_Init+0x174>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a55      	ldr	r2, [pc, #340]	; (8001794 <MX_GPIO_Init+0x174>)
 8001640:	f043 0310 	orr.w	r3, r3, #16
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b53      	ldr	r3, [pc, #332]	; (8001794 <MX_GPIO_Init+0x174>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	4b4f      	ldr	r3, [pc, #316]	; (8001794 <MX_GPIO_Init+0x174>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a4e      	ldr	r2, [pc, #312]	; (8001794 <MX_GPIO_Init+0x174>)
 800165c:	f043 0320 	orr.w	r3, r3, #32
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <MX_GPIO_Init+0x174>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b48      	ldr	r3, [pc, #288]	; (8001794 <MX_GPIO_Init+0x174>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a47      	ldr	r2, [pc, #284]	; (8001794 <MX_GPIO_Init+0x174>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b45      	ldr	r3, [pc, #276]	; (8001794 <MX_GPIO_Init+0x174>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b41      	ldr	r3, [pc, #260]	; (8001794 <MX_GPIO_Init+0x174>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a40      	ldr	r2, [pc, #256]	; (8001794 <MX_GPIO_Init+0x174>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b3e      	ldr	r3, [pc, #248]	; (8001794 <MX_GPIO_Init+0x174>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <MX_GPIO_Init+0x174>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a39      	ldr	r2, [pc, #228]	; (8001794 <MX_GPIO_Init+0x174>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <MX_GPIO_Init+0x174>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <MX_GPIO_Init+0x174>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a32      	ldr	r2, [pc, #200]	; (8001794 <MX_GPIO_Init+0x174>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b30      	ldr	r3, [pc, #192]	; (8001794 <MX_GPIO_Init+0x174>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 80016de:	2201      	movs	r2, #1
 80016e0:	f641 51fc 	movw	r1, #7676	; 0x1dfc
 80016e4:	482c      	ldr	r0, [pc, #176]	; (8001798 <MX_GPIO_Init+0x178>)
 80016e6:	f002 f835 	bl	8003754 <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin|grow_light_Pin
                          |water_pump_enable_Pin|water_heat_cool_enable_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2104      	movs	r1, #4
 80016ee:	482b      	ldr	r0, [pc, #172]	; (800179c <MX_GPIO_Init+0x17c>)
 80016f0:	f002 f830 	bl	8003754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2140      	movs	r1, #64	; 0x40
 80016f8:	4829      	ldr	r0, [pc, #164]	; (80017a0 <MX_GPIO_Init+0x180>)
 80016fa:	f002 f82b 	bl	8003754 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 80016fe:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8001702:	61fb      	str	r3, [r7, #28]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4619      	mov	r1, r3
 8001716:	4820      	ldr	r0, [pc, #128]	; (8001798 <MX_GPIO_Init+0x178>)
 8001718:	f001 fe7e 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800171c:	2304      	movs	r3, #4
 800171e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	481a      	ldr	r0, [pc, #104]	; (800179c <MX_GPIO_Init+0x17c>)
 8001734:	f001 fe70 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 8001738:	2340      	movs	r3, #64	; 0x40
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4814      	ldr	r0, [pc, #80]	; (80017a0 <MX_GPIO_Init+0x180>)
 8001750:	f001 fe62 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin water_heat_cool_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin;
 8001754:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <MX_GPIO_Init+0x178>)
 800176e:	f001 fe53 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 8001772:	2302      	movs	r3, #2
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <MX_GPIO_Init+0x178>)
 8001786:	f001 fe47 	bl	8003418 <HAL_GPIO_Init>

}
 800178a:	bf00      	nop
 800178c:	3730      	adds	r7, #48	; 0x30
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40021000 	.word	0x40021000
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020000 	.word	0x40020000

080017a4 <HAL_ADC_ConvCpltCallback>:



char retrieved_ADC_values = 'n';
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	retrieved_ADC_values = 'y';
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_ADC_ConvCpltCallback+0x18>)
 80017ae:	2279      	movs	r2, #121	; 0x79
 80017b0:	701a      	strb	r2, [r3, #0]
	//water_temp = readWaterTemp();

}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	20000008 	.word	0x20000008

080017c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017d2:	f000 fbd3 	bl	8001f7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40001000 	.word	0x40001000

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ec:	e7fe      	b.n	80017ec <Error_Handler+0x8>
	...

080017f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_MspInit+0x54>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_MspInit+0x54>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_MspInit+0x54>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_MspInit+0x54>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_MspInit+0x54>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_MspInit+0x54>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	210f      	movs	r1, #15
 8001832:	f06f 0001 	mvn.w	r0, #1
 8001836:	f001 f9c6 	bl	8002bc6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a33      	ldr	r2, [pc, #204]	; (8001934 <HAL_ADC_MspInit+0xec>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d160      	bne.n	800192c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_ADC_MspInit+0xf0>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a31      	ldr	r2, [pc, #196]	; (8001938 <HAL_ADC_MspInit+0xf0>)
 8001874:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_ADC_MspInit+0xf0>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_ADC_MspInit+0xf0>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a2a      	ldr	r2, [pc, #168]	; (8001938 <HAL_ADC_MspInit+0xf0>)
 8001890:	f043 0320 	orr.w	r3, r3, #32
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b28      	ldr	r3, [pc, #160]	; (8001938 <HAL_ADC_MspInit+0xf0>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0320 	and.w	r3, r3, #32
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF4     ------> ADC3_IN14
    PF5     ------> ADC3_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018a2:	2330      	movs	r3, #48	; 0x30
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a6:	2303      	movs	r3, #3
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4821      	ldr	r0, [pc, #132]	; (800193c <HAL_ADC_MspInit+0xf4>)
 80018b6:	f001 fdaf 	bl	8003418 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <HAL_ADC_MspInit+0xf8>)
 80018bc:	4a21      	ldr	r2, [pc, #132]	; (8001944 <HAL_ADC_MspInit+0xfc>)
 80018be:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <HAL_ADC_MspInit+0xf8>)
 80018c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018c6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_ADC_MspInit+0xf8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_ADC_MspInit+0xf8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <HAL_ADC_MspInit+0xf8>)
 80018d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018da:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_ADC_MspInit+0xf8>)
 80018de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_ADC_MspInit+0xf8>)
 80018e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ea:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <HAL_ADC_MspInit+0xf8>)
 80018ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_ADC_MspInit+0xf8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_ADC_MspInit+0xf8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001900:	480f      	ldr	r0, [pc, #60]	; (8001940 <HAL_ADC_MspInit+0xf8>)
 8001902:	f001 f98b 	bl	8002c1c <HAL_DMA_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800190c:	f7ff ff6a 	bl	80017e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <HAL_ADC_MspInit+0xf8>)
 8001914:	639a      	str	r2, [r3, #56]	; 0x38
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_ADC_MspInit+0xf8>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2105      	movs	r1, #5
 8001920:	2012      	movs	r0, #18
 8001922:	f001 f950 	bl	8002bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001926:	2012      	movs	r0, #18
 8001928:	f001 f969 	bl	8002bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800192c:	bf00      	nop
 800192e:	3728      	adds	r7, #40	; 0x28
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40012200 	.word	0x40012200
 8001938:	40023800 	.word	0x40023800
 800193c:	40021400 	.word	0x40021400
 8001940:	20000704 	.word	0x20000704
 8001944:	40026410 	.word	0x40026410

08001948 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a05      	ldr	r2, [pc, #20]	; (800196c <HAL_RTC_MspInit+0x24>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d102      	bne.n	8001960 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RTC_MspInit+0x28>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40002800 	.word	0x40002800
 8001970:	42470e3c 	.word	0x42470e3c

08001974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a28      	ldr	r2, [pc, #160]	; (8001a24 <HAL_TIM_Base_MspInit+0xb0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10e      	bne.n	80019a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <HAL_TIM_Base_MspInit+0xb4>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <HAL_TIM_Base_MspInit+0xb4>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_TIM_Base_MspInit+0xb4>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80019a2:	e03a      	b.n	8001a1a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a20      	ldr	r2, [pc, #128]	; (8001a2c <HAL_TIM_Base_MspInit+0xb8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10e      	bne.n	80019cc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_TIM_Base_MspInit+0xb4>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <HAL_TIM_Base_MspInit+0xb4>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_TIM_Base_MspInit+0xb4>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
}
 80019ca:	e026      	b.n	8001a1a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <HAL_TIM_Base_MspInit+0xbc>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <HAL_TIM_Base_MspInit+0xb4>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <HAL_TIM_Base_MspInit+0xb4>)
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_TIM_Base_MspInit+0xb4>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
}
 80019f2:	e012      	b.n	8001a1a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM12)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_TIM_Base_MspInit+0xc0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10d      	bne.n	8001a1a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_TIM_Base_MspInit+0xb4>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_TIM_Base_MspInit+0xb4>)
 8001a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_TIM_Base_MspInit+0xb4>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
}
 8001a1a:	bf00      	nop
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	40010000 	.word	0x40010000
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40000800 	.word	0x40000800
 8001a30:	40014400 	.word	0x40014400
 8001a34:	40001800 	.word	0x40001800

08001a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a24      	ldr	r2, [pc, #144]	; (8001ae8 <HAL_TIM_MspPostInit+0xb0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d11f      	bne.n	8001a9a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <HAL_TIM_MspPostInit+0xb4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a22      	ldr	r2, [pc, #136]	; (8001aec <HAL_TIM_MspPostInit+0xb4>)
 8001a64:	f043 0310 	orr.w	r3, r3, #16
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_TIM_MspPostInit+0xb4>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin|system_fan_speed_Pin;
 8001a76:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4817      	ldr	r0, [pc, #92]	; (8001af0 <HAL_TIM_MspPostInit+0xb8>)
 8001a94:	f001 fcc0 	bl	8003418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001a98:	e022      	b.n	8001ae0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <HAL_TIM_MspPostInit+0xbc>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d11d      	bne.n	8001ae0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_TIM_MspPostInit+0xb4>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <HAL_TIM_MspPostInit+0xb4>)
 8001aae:	f043 0320 	orr.w	r3, r3, #32
 8001ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_TIM_MspPostInit+0xb4>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 8001ac0:	2340      	movs	r3, #64	; 0x40
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4807      	ldr	r0, [pc, #28]	; (8001af8 <HAL_TIM_MspPostInit+0xc0>)
 8001adc:	f001 fc9c 	bl	8003418 <HAL_GPIO_Init>
}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	; 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40014400 	.word	0x40014400
 8001af8:	40021400 	.word	0x40021400

08001afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a34      	ldr	r2, [pc, #208]	; (8001bec <HAL_UART_MspInit+0xf0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d162      	bne.n	8001be4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <HAL_UART_MspInit+0xf4>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a32      	ldr	r2, [pc, #200]	; (8001bf0 <HAL_UART_MspInit+0xf4>)
 8001b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_UART_MspInit+0xf4>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <HAL_UART_MspInit+0xf4>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a2b      	ldr	r2, [pc, #172]	; (8001bf0 <HAL_UART_MspInit+0xf4>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <HAL_UART_MspInit+0xf4>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	4820      	ldr	r0, [pc, #128]	; (8001bf4 <HAL_UART_MspInit+0xf8>)
 8001b74:	f001 fc50 	bl	8003418 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001b78:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <HAL_UART_MspInit+0xfc>)
 8001b7a:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <HAL_UART_MspInit+0x100>)
 8001b7c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <HAL_UART_MspInit+0xfc>)
 8001b80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b84:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_UART_MspInit+0xfc>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_UART_MspInit+0xfc>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_UART_MspInit+0xfc>)
 8001b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b98:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_UART_MspInit+0xfc>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_UART_MspInit+0xfc>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_UART_MspInit+0xfc>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_UART_MspInit+0xfc>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <HAL_UART_MspInit+0xfc>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001bb8:	480f      	ldr	r0, [pc, #60]	; (8001bf8 <HAL_UART_MspInit+0xfc>)
 8001bba:	f001 f82f 	bl	8002c1c <HAL_DMA_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001bc4:	f7ff fe0e 	bl	80017e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <HAL_UART_MspInit+0xfc>)
 8001bcc:	639a      	str	r2, [r3, #56]	; 0x38
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_UART_MspInit+0xfc>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2105      	movs	r1, #5
 8001bd8:	2027      	movs	r0, #39	; 0x27
 8001bda:	f000 fff4 	bl	8002bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bde:	2027      	movs	r0, #39	; 0x27
 8001be0:	f001 f80d 	bl	8002bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40004800 	.word	0x40004800
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	20000618 	.word	0x20000618
 8001bfc:	40026028 	.word	0x40026028

08001c00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	; 0x30
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	2036      	movs	r0, #54	; 0x36
 8001c16:	f000 ffd6 	bl	8002bc6 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c1a:	2036      	movs	r0, #54	; 0x36
 8001c1c:	f000 ffef 	bl	8002bfe <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <HAL_InitTick+0xa4>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_InitTick+0xa4>)
 8001c2a:	f043 0310 	orr.w	r3, r3, #16
 8001c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <HAL_InitTick+0xa4>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c3c:	f107 0210 	add.w	r2, r7, #16
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fde2 	bl	8005810 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c4c:	f003 fd9c 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 8001c50:	4603      	mov	r3, r0
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c58:	4a13      	ldr	r2, [pc, #76]	; (8001ca8 <HAL_InitTick+0xa8>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0c9b      	lsrs	r3, r3, #18
 8001c60:	3b01      	subs	r3, #1
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_InitTick+0xac>)
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_InitTick+0xb0>)
 8001c68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <HAL_InitTick+0xac>)
 8001c6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c70:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c72:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_InitTick+0xac>)
 8001c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c76:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_InitTick+0xac>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_InitTick+0xac>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c84:	4809      	ldr	r0, [pc, #36]	; (8001cac <HAL_InitTick+0xac>)
 8001c86:	f004 fad4 	bl	8006232 <HAL_TIM_Base_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d104      	bne.n	8001c9a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001c90:	4806      	ldr	r0, [pc, #24]	; (8001cac <HAL_InitTick+0xac>)
 8001c92:	f004 fb1d 	bl	80062d0 <HAL_TIM_Base_Start_IT>
 8001c96:	4603      	mov	r3, r0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3730      	adds	r7, #48	; 0x30
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	200048e4 	.word	0x200048e4
 8001cb0:	40001000 	.word	0x40001000

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
	...

08001ce0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <DMA1_Stream1_IRQHandler+0x10>)
 8001ce6:	f001 f931 	bl	8002f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000618 	.word	0x20000618

08001cf4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <ADC_IRQHandler+0x10>)
 8001cfa:	f000 f9c2 	bl	8002082 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000764 	.word	0x20000764

08001d08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <USART3_IRQHandler+0x10>)
 8001d0e:	f005 faef 	bl	80072f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000678 	.word	0x20000678

08001d1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <TIM6_DAC_IRQHandler+0x10>)
 8001d22:	f004 fb9b 	bl	800645c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200048e4 	.word	0x200048e4

08001d30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <DMA2_Stream0_IRQHandler+0x10>)
 8001d36:	f001 f909 	bl	8002f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000704 	.word	0x20000704

08001d44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <OTG_FS_IRQHandler+0x10>)
 8001d4a:	f001 fe71 	bl	8003a30 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20005174 	.word	0x20005174

08001d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	return 1;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <_kill>:

int _kill(int pid, int sig)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d70:	f009 f91e 	bl	800afb0 <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2216      	movs	r2, #22
 8001d78:	601a      	str	r2, [r3, #0]
	return -1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_exit>:

void _exit (int status)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffe7 	bl	8001d66 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d98:	e7fe      	b.n	8001d98 <_exit+0x12>

08001d9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e00a      	b.n	8001dc2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dac:	f3af 8000 	nop.w
 8001db0:	4601      	mov	r1, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	60ba      	str	r2, [r7, #8]
 8001db8:	b2ca      	uxtb	r2, r1
 8001dba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dbf0      	blt.n	8001dac <_read+0x12>
	}

return len;
 8001dca:	687b      	ldr	r3, [r7, #4]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e009      	b.n	8001dfa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	60ba      	str	r2, [r7, #8]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dbf1      	blt.n	8001de6 <_write+0x12>
	}
	return len;
 8001e02:	687b      	ldr	r3, [r7, #4]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_close>:

int _close(int file)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	return -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e32:	605a      	str	r2, [r3, #4]
	return 0;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <_isatty>:

int _isatty(int file)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <_sbrk+0x5c>)
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <_sbrk+0x60>)
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <_sbrk+0x64>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <_sbrk+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d207      	bcs.n	8001eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e9c:	f009 f888 	bl	800afb0 <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e009      	b.n	8001ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <_sbrk+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	2001c000 	.word	0x2001c000
 8001ecc:	00000800 	.word	0x00000800
 8001ed0:	20000360 	.word	0x20000360
 8001ed4:	20005488 	.word	0x20005488

08001ed8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee8:	480d      	ldr	r0, [pc, #52]	; (8001f20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eea:	490e      	ldr	r1, [pc, #56]	; (8001f24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eec:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f00:	4c0b      	ldr	r4, [pc, #44]	; (8001f30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f0e:	f7ff ffe3 	bl	8001ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f009 f949 	bl	800b1a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7ff f81b 	bl	8000f50 <main>
  bx  lr
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f1c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001f28:	0800fd3c 	.word	0x0800fd3c
  ldr r2, =_sbss
 8001f2c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001f30:	20005488 	.word	0x20005488

08001f34 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <CAN1_RX0_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <HAL_Init+0x40>)
 8001f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_Init+0x40>)
 8001f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_Init+0x40>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 fe25 	bl	8002bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f66:	200f      	movs	r0, #15
 8001f68:	f7ff fe4a 	bl	8001c00 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f6c:	f7ff fc40 	bl	80017f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00

08001f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_IncTick+0x1c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_IncTick+0x20>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4a03      	ldr	r2, [pc, #12]	; (8001f9c <HAL_IncTick+0x20>)
 8001f8e:	6013      	str	r3, [r2, #0]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	20000014 	.word	0x20000014
 8001f9c:	2000492c 	.word	0x2000492c

08001fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa4:	4b02      	ldr	r3, [pc, #8]	; (8001fb0 <HAL_GetTick+0x10>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	2000492c 	.word	0x2000492c

08001fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff fff0 	bl	8001fa0 <HAL_GetTick>
 8001fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d005      	beq.n	8001fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_Delay+0x44>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fda:	bf00      	nop
 8001fdc:	f7ff ffe0 	bl	8001fa0 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d8f7      	bhi.n	8001fdc <HAL_Delay+0x28>
  {
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000014 	.word	0x20000014

08001ffc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e033      	b.n	800207a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fc14 	bl	8001848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d118      	bne.n	800206c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002042:	f023 0302 	bic.w	r3, r3, #2
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fb72 	bl	8002738 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
 800206a:	e001      	b.n	8002070 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b02      	cmp	r3, #2
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d049      	beq.n	8002158 <HAL_ADC_IRQHandler+0xd6>
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d046      	beq.n	8002158 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d12b      	bne.n	8002148 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d127      	bne.n	8002148 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002110:	2b00      	cmp	r3, #0
 8002112:	d119      	bne.n	8002148 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0220 	bic.w	r2, r2, #32
 8002122:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff fb2b 	bl	80017a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f06f 0212 	mvn.w	r2, #18
 8002156:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b04      	cmp	r3, #4
 8002164:	bf0c      	ite	eq
 8002166:	2301      	moveq	r3, #1
 8002168:	2300      	movne	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002178:	2b80      	cmp	r3, #128	; 0x80
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d057      	beq.n	800223a <HAL_ADC_IRQHandler+0x1b8>
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d054      	beq.n	800223a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d139      	bne.n	800222a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d006      	beq.n	80021d2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d12b      	bne.n	800222a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d124      	bne.n	800222a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d11d      	bne.n	800222a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d119      	bne.n	800222a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002204:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f043 0201 	orr.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 fc0c 	bl	8002a48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 020c 	mvn.w	r2, #12
 8002238:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	bf0c      	ite	eq
 8002248:	2301      	moveq	r3, #1
 800224a:	2300      	movne	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225a:	2b40      	cmp	r3, #64	; 0x40
 800225c:	bf0c      	ite	eq
 800225e:	2301      	moveq	r3, #1
 8002260:	2300      	movne	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d017      	beq.n	800229c <HAL_ADC_IRQHandler+0x21a>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d014      	beq.n	800229c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d10d      	bne.n	800229c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f920 	bl	80024d2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f06f 0201 	mvn.w	r2, #1
 800229a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	bf0c      	ite	eq
 80022aa:	2301      	moveq	r3, #1
 80022ac:	2300      	movne	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d015      	beq.n	80022fc <HAL_ADC_IRQHandler+0x27a>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d012      	beq.n	80022fc <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f043 0202 	orr.w	r2, r3, #2
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f06f 0220 	mvn.w	r2, #32
 80022ea:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f8f9 	bl	80024e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f06f 0220 	mvn.w	r2, #32
 80022fa:	601a      	str	r2, [r3, #0]
  }
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_ADC_Start_DMA+0x1e>
 800231e:	2302      	movs	r3, #2
 8002320:	e0bc      	b.n	800249c <HAL_ADC_Start_DMA+0x198>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d018      	beq.n	800236a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002348:	4b56      	ldr	r3, [pc, #344]	; (80024a4 <HAL_ADC_Start_DMA+0x1a0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a56      	ldr	r2, [pc, #344]	; (80024a8 <HAL_ADC_Start_DMA+0x1a4>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0c9a      	lsrs	r2, r3, #18
 8002354:	4613      	mov	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4413      	add	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 800235c:	e002      	b.n	8002364 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3b01      	subs	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f9      	bne.n	800235e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	f040 8084 	bne.w	8002482 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b8:	d106      	bne.n	80023c8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f023 0206 	bic.w	r2, r3, #6
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	645a      	str	r2, [r3, #68]	; 0x44
 80023c6:	e002      	b.n	80023ce <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	4a34      	ldr	r2, [pc, #208]	; (80024ac <HAL_ADC_Start_DMA+0x1a8>)
 80023dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	4a33      	ldr	r2, [pc, #204]	; (80024b0 <HAL_ADC_Start_DMA+0x1ac>)
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	4a32      	ldr	r2, [pc, #200]	; (80024b4 <HAL_ADC_Start_DMA+0x1b0>)
 80023ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002406:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002416:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	334c      	adds	r3, #76	; 0x4c
 8002422:	4619      	mov	r1, r3
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f000 fca6 	bl	8002d78 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800242c:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_ADC_Start_DMA+0x1b4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10f      	bne.n	8002458 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d129      	bne.n	800249a <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	e020      	b.n	800249a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_ADC_Start_DMA+0x1b8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d11b      	bne.n	800249a <HAL_ADC_Start_DMA+0x196>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d114      	bne.n	800249a <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	e00b      	b.n	800249a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f043 0210 	orr.w	r2, r3, #16
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	2000000c 	.word	0x2000000c
 80024a8:	431bde83 	.word	0x431bde83
 80024ac:	08002945 	.word	0x08002945
 80024b0:	080029ff 	.word	0x080029ff
 80024b4:	08002a1b 	.word	0x08002a1b
 80024b8:	40012300 	.word	0x40012300
 80024bc:	40012000 	.word	0x40012000

080024c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
	...

080024f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1c>
 8002510:	2302      	movs	r3, #2
 8002512:	e103      	b.n	800271c <HAL_ADC_ConfigChannel+0x224>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b09      	cmp	r3, #9
 8002522:	d925      	bls.n	8002570 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68d9      	ldr	r1, [r3, #12]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	3b1e      	subs	r3, #30
 800253a:	2207      	movs	r2, #7
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43da      	mvns	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	400a      	ands	r2, r1
 8002548:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68d9      	ldr	r1, [r3, #12]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	4618      	mov	r0, r3
 800255c:	4603      	mov	r3, r0
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4403      	add	r3, r0
 8002562:	3b1e      	subs	r3, #30
 8002564:	409a      	lsls	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	e022      	b.n	80025b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6919      	ldr	r1, [r3, #16]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	2207      	movs	r2, #7
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	400a      	ands	r2, r1
 8002592:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6919      	ldr	r1, [r3, #16]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4403      	add	r3, r0
 80025ac:	409a      	lsls	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d824      	bhi.n	8002608 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3b05      	subs	r3, #5
 80025d0:	221f      	movs	r2, #31
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	400a      	ands	r2, r1
 80025de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b05      	subs	r3, #5
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
 8002606:	e04c      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	d824      	bhi.n	800265a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	3b23      	subs	r3, #35	; 0x23
 8002622:	221f      	movs	r2, #31
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43da      	mvns	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	400a      	ands	r2, r1
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3b23      	subs	r3, #35	; 0x23
 800264c:	fa00 f203 	lsl.w	r2, r0, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
 8002658:	e023      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	3b41      	subs	r3, #65	; 0x41
 800266c:	221f      	movs	r2, #31
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	400a      	ands	r2, r1
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b41      	subs	r3, #65	; 0x41
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a20      	ldr	r2, [pc, #128]	; (8002728 <HAL_ADC_ConfigChannel+0x230>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d109      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1c8>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b12      	cmp	r3, #18
 80026b2:	d105      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_ADC_ConfigChannel+0x234>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a1c      	ldr	r2, [pc, #112]	; (800272c <HAL_ADC_ConfigChannel+0x234>)
 80026ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026be:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a18      	ldr	r2, [pc, #96]	; (8002728 <HAL_ADC_ConfigChannel+0x230>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d123      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x21a>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d003      	beq.n	80026da <HAL_ADC_ConfigChannel+0x1e2>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b11      	cmp	r3, #17
 80026d8:	d11b      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <HAL_ADC_ConfigChannel+0x234>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4a13      	ldr	r2, [pc, #76]	; (800272c <HAL_ADC_ConfigChannel+0x234>)
 80026e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026e4:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d111      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_ADC_ConfigChannel+0x238>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a10      	ldr	r2, [pc, #64]	; (8002734 <HAL_ADC_ConfigChannel+0x23c>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	0c9a      	lsrs	r2, r3, #18
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002704:	e002      	b.n	800270c <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3b01      	subs	r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f9      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40012000 	.word	0x40012000
 800272c:	40012300 	.word	0x40012300
 8002730:	2000000c 	.word	0x2000000c
 8002734:	431bde83 	.word	0x431bde83

08002738 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002740:	4b7e      	ldr	r3, [pc, #504]	; (800293c <ADC_Init+0x204>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a7d      	ldr	r2, [pc, #500]	; (800293c <ADC_Init+0x204>)
 8002746:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800274a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800274c:	4b7b      	ldr	r3, [pc, #492]	; (800293c <ADC_Init+0x204>)
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4979      	ldr	r1, [pc, #484]	; (800293c <ADC_Init+0x204>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002768:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	021a      	lsls	r2, r3, #8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800278c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6899      	ldr	r1, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	4a5e      	ldr	r2, [pc, #376]	; (8002940 <ADC_Init+0x208>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d022      	beq.n	8002812 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6899      	ldr	r1, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6899      	ldr	r1, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	e00f      	b.n	8002832 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002830:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0202 	bic.w	r2, r2, #2
 8002840:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7e1b      	ldrb	r3, [r3, #24]
 800284c:	005a      	lsls	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d027      	beq.n	80028b0 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800286e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800287e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	3b01      	subs	r3, #1
 8002886:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800288a:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	fa92 f2a2 	rbit	r2, r2
 8002892:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	fab2 f282 	clz	r2, r2
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	fa03 f102 	lsl.w	r1, r3, r2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	e007      	b.n	80028c0 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	3b01      	subs	r3, #1
 80028dc:	051a      	lsls	r2, r3, #20
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6899      	ldr	r1, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002902:	025a      	lsls	r2, r3, #9
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6899      	ldr	r1, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	029a      	lsls	r2, r3, #10
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40012300 	.word	0x40012300
 8002940:	0f000001 	.word	0x0f000001

08002944 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800295a:	2b00      	cmp	r3, #0
 800295c:	d13c      	bne.n	80029d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d12b      	bne.n	80029d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800297c:	2b00      	cmp	r3, #0
 800297e:	d127      	bne.n	80029d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002998:	2b00      	cmp	r3, #0
 800299a:	d119      	bne.n	80029d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0220 	bic.w	r2, r2, #32
 80029aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7fe fee7 	bl	80017a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029d6:	e00e      	b.n	80029f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7ff fd7d 	bl	80024e4 <HAL_ADC_ErrorCallback>
}
 80029ea:	e004      	b.n	80029f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f7ff fd57 	bl	80024c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2240      	movs	r2, #64	; 0x40
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f043 0204 	orr.w	r2, r3, #4
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff fd52 	bl	80024e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
	...

08002a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8e:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	60d3      	str	r3, [r2, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <__NVIC_GetPriorityGrouping+0x18>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 0307 	and.w	r3, r3, #7
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	db0b      	blt.n	8002aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	4906      	ldr	r1, [pc, #24]	; (8002af4 <__NVIC_EnableIRQ+0x34>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	e000e100 	.word	0xe000e100

08002af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	6039      	str	r1, [r7, #0]
 8002b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	db0a      	blt.n	8002b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	490c      	ldr	r1, [pc, #48]	; (8002b44 <__NVIC_SetPriority+0x4c>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	0112      	lsls	r2, r2, #4
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b20:	e00a      	b.n	8002b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4908      	ldr	r1, [pc, #32]	; (8002b48 <__NVIC_SetPriority+0x50>)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	3b04      	subs	r3, #4
 8002b30:	0112      	lsls	r2, r2, #4
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	440b      	add	r3, r1
 8002b36:	761a      	strb	r2, [r3, #24]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000e100 	.word	0xe000e100
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f1c3 0307 	rsb	r3, r3, #7
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	bf28      	it	cs
 8002b6a:	2304      	movcs	r3, #4
 8002b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	d902      	bls.n	8002b7c <NVIC_EncodePriority+0x30>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3b03      	subs	r3, #3
 8002b7a:	e000      	b.n	8002b7e <NVIC_EncodePriority+0x32>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	401a      	ands	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b94:	f04f 31ff 	mov.w	r1, #4294967295
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43d9      	mvns	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	4313      	orrs	r3, r2
         );
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3724      	adds	r7, #36	; 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ff4f 	bl	8002a5c <__NVIC_SetPriorityGrouping>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd8:	f7ff ff64 	bl	8002aa4 <__NVIC_GetPriorityGrouping>
 8002bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	6978      	ldr	r0, [r7, #20]
 8002be4:	f7ff ffb2 	bl	8002b4c <NVIC_EncodePriority>
 8002be8:	4602      	mov	r2, r0
 8002bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff81 	bl	8002af8 <__NVIC_SetPriority>
}
 8002bf6:	bf00      	nop
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff57 	bl	8002ac0 <__NVIC_EnableIRQ>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff f9ba 	bl	8001fa0 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e099      	b.n	8002d6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c58:	e00f      	b.n	8002c7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c5a:	f7ff f9a1 	bl	8001fa0 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d908      	bls.n	8002c7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e078      	b.n	8002d6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e8      	bne.n	8002c5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <HAL_DMA_Init+0x158>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d107      	bne.n	8002ce4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f023 0307 	bic.w	r3, r3, #7
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d117      	bne.n	8002d3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 faff 	bl	8003324 <DMA_CheckFifoParam>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2240      	movs	r2, #64	; 0x40
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e016      	b.n	8002d6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fab8 	bl	80032bc <DMA_CalcBaseAndBitshift>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	223f      	movs	r2, #63	; 0x3f
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	f010803f 	.word	0xf010803f

08002d78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_DMA_Start_IT+0x26>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e040      	b.n	8002e20 <HAL_DMA_Start_IT+0xa8>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d12f      	bne.n	8002e12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fa4a 	bl	8003260 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	223f      	movs	r2, #63	; 0x3f
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0216 	orr.w	r2, r2, #22
 8002de6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0208 	orr.w	r2, r2, #8
 8002dfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e005      	b.n	8002e1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e36:	f7ff f8b3 	bl	8001fa0 <HAL_GetTick>
 8002e3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d008      	beq.n	8002e5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e052      	b.n	8002f00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0216 	bic.w	r2, r2, #22
 8002e68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <HAL_DMA_Abort+0x62>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0208 	bic.w	r2, r2, #8
 8002e98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eaa:	e013      	b.n	8002ed4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eac:	f7ff f878 	bl	8001fa0 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d90c      	bls.n	8002ed4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e015      	b.n	8002f00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e4      	bne.n	8002eac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	223f      	movs	r2, #63	; 0x3f
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d004      	beq.n	8002f26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e00c      	b.n	8002f40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2205      	movs	r2, #5
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f58:	4b92      	ldr	r3, [pc, #584]	; (80031a4 <HAL_DMA_IRQHandler+0x258>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a92      	ldr	r2, [pc, #584]	; (80031a8 <HAL_DMA_IRQHandler+0x25c>)
 8002f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f62:	0a9b      	lsrs	r3, r3, #10
 8002f64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	2208      	movs	r2, #8
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d01a      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d013      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0204 	bic.w	r2, r2, #4
 8002f9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa4:	2208      	movs	r2, #8
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	f043 0201 	orr.w	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d012      	beq.n	8002fee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fda:	2201      	movs	r2, #1
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe6:	f043 0202 	orr.w	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d012      	beq.n	8003024 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003010:	2204      	movs	r2, #4
 8003012:	409a      	lsls	r2, r3
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	f043 0204 	orr.w	r2, r3, #4
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	2210      	movs	r2, #16
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d043      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d03c      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003046:	2210      	movs	r2, #16
 8003048:	409a      	lsls	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d018      	beq.n	800308e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d108      	bne.n	800307c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d024      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
 800307a:	e01f      	b.n	80030bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01b      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
 800308c:	e016      	b.n	80030bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d107      	bne.n	80030ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0208 	bic.w	r2, r2, #8
 80030aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	2220      	movs	r2, #32
 80030c2:	409a      	lsls	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 808e 	beq.w	80031ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 8086 	beq.w	80031ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	2220      	movs	r2, #32
 80030e4:	409a      	lsls	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b05      	cmp	r3, #5
 80030f4:	d136      	bne.n	8003164 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0216 	bic.w	r2, r2, #22
 8003104:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003114:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d103      	bne.n	8003126 <HAL_DMA_IRQHandler+0x1da>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0208 	bic.w	r2, r2, #8
 8003134:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	223f      	movs	r2, #63	; 0x3f
 800313c:	409a      	lsls	r2, r3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003156:	2b00      	cmp	r3, #0
 8003158:	d07d      	beq.n	8003256 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
        }
        return;
 8003162:	e078      	b.n	8003256 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d01c      	beq.n	80031ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d108      	bne.n	8003192 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	2b00      	cmp	r3, #0
 8003186:	d030      	beq.n	80031ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
 8003190:	e02b      	b.n	80031ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d027      	beq.n	80031ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	4798      	blx	r3
 80031a2:	e022      	b.n	80031ea <HAL_DMA_IRQHandler+0x29e>
 80031a4:	2000000c 	.word	0x2000000c
 80031a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10f      	bne.n	80031da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0210 	bic.w	r2, r2, #16
 80031c8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d032      	beq.n	8003258 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d022      	beq.n	8003244 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2205      	movs	r2, #5
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3301      	adds	r3, #1
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	429a      	cmp	r2, r3
 8003220:	d307      	bcc.n	8003232 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f2      	bne.n	8003216 <HAL_DMA_IRQHandler+0x2ca>
 8003230:	e000      	b.n	8003234 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003232:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
 8003254:	e000      	b.n	8003258 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003256:	bf00      	nop
    }
  }
}
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop

08003260 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800327c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b40      	cmp	r3, #64	; 0x40
 800328c:	d108      	bne.n	80032a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800329e:	e007      	b.n	80032b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	60da      	str	r2, [r3, #12]
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
	...

080032bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	3b10      	subs	r3, #16
 80032cc:	4a13      	ldr	r2, [pc, #76]	; (800331c <DMA_CalcBaseAndBitshift+0x60>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032d6:	4a12      	ldr	r2, [pc, #72]	; (8003320 <DMA_CalcBaseAndBitshift+0x64>)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d909      	bls.n	80032fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032f2:	f023 0303 	bic.w	r3, r3, #3
 80032f6:	1d1a      	adds	r2, r3, #4
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	659a      	str	r2, [r3, #88]	; 0x58
 80032fc:	e007      	b.n	800330e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	aaaaaaab 	.word	0xaaaaaaab
 8003320:	0800f858 	.word	0x0800f858

08003324 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11f      	bne.n	800337e <DMA_CheckFifoParam+0x5a>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d856      	bhi.n	80033f2 <DMA_CheckFifoParam+0xce>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <DMA_CheckFifoParam+0x28>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	0800335d 	.word	0x0800335d
 8003350:	0800336f 	.word	0x0800336f
 8003354:	0800335d 	.word	0x0800335d
 8003358:	080033f3 	.word	0x080033f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d046      	beq.n	80033f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336c:	e043      	b.n	80033f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003376:	d140      	bne.n	80033fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337c:	e03d      	b.n	80033fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003386:	d121      	bne.n	80033cc <DMA_CheckFifoParam+0xa8>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d837      	bhi.n	80033fe <DMA_CheckFifoParam+0xda>
 800338e:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <DMA_CheckFifoParam+0x70>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033ab 	.word	0x080033ab
 800339c:	080033a5 	.word	0x080033a5
 80033a0:	080033bd 	.word	0x080033bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      break;
 80033a8:	e030      	b.n	800340c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d025      	beq.n	8003402 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ba:	e022      	b.n	8003402 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033c4:	d11f      	bne.n	8003406 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ca:	e01c      	b.n	8003406 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d903      	bls.n	80033da <DMA_CheckFifoParam+0xb6>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d003      	beq.n	80033e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033d8:	e018      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
      break;
 80033de:	e015      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
      break;
 80033f0:	e00b      	b.n	800340a <DMA_CheckFifoParam+0xe6>
      break;
 80033f2:	bf00      	nop
 80033f4:	e00a      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033f6:	bf00      	nop
 80033f8:	e008      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033fa:	bf00      	nop
 80033fc:	e006      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033fe:	bf00      	nop
 8003400:	e004      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 8003402:	bf00      	nop
 8003404:	e002      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;   
 8003406:	bf00      	nop
 8003408:	e000      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 800340a:	bf00      	nop
    }
  } 
  
  return status; 
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003426:	e16f      	b.n	8003708 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2101      	movs	r1, #1
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	4013      	ands	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8161 	beq.w	8003702 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d005      	beq.n	8003458 <HAL_GPIO_Init+0x40>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d130      	bne.n	80034ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800348e:	2201      	movs	r2, #1
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0201 	and.w	r2, r3, #1
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d017      	beq.n	80034f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	2203      	movs	r2, #3
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d123      	bne.n	800354a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	08da      	lsrs	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3208      	adds	r2, #8
 800350a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	08da      	lsrs	r2, r3, #3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3208      	adds	r2, #8
 8003544:	6939      	ldr	r1, [r7, #16]
 8003546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	2203      	movs	r2, #3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0203 	and.w	r2, r3, #3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80bb 	beq.w	8003702 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358c:	2300      	movs	r3, #0
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	4b64      	ldr	r3, [pc, #400]	; (8003724 <HAL_GPIO_Init+0x30c>)
 8003592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003594:	4a63      	ldr	r2, [pc, #396]	; (8003724 <HAL_GPIO_Init+0x30c>)
 8003596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800359a:	6453      	str	r3, [r2, #68]	; 0x44
 800359c:	4b61      	ldr	r3, [pc, #388]	; (8003724 <HAL_GPIO_Init+0x30c>)
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035a8:	4a5f      	ldr	r2, [pc, #380]	; (8003728 <HAL_GPIO_Init+0x310>)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	3302      	adds	r3, #2
 80035b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	220f      	movs	r2, #15
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a57      	ldr	r2, [pc, #348]	; (800372c <HAL_GPIO_Init+0x314>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d031      	beq.n	8003638 <HAL_GPIO_Init+0x220>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a56      	ldr	r2, [pc, #344]	; (8003730 <HAL_GPIO_Init+0x318>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d02b      	beq.n	8003634 <HAL_GPIO_Init+0x21c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a55      	ldr	r2, [pc, #340]	; (8003734 <HAL_GPIO_Init+0x31c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d025      	beq.n	8003630 <HAL_GPIO_Init+0x218>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a54      	ldr	r2, [pc, #336]	; (8003738 <HAL_GPIO_Init+0x320>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d01f      	beq.n	800362c <HAL_GPIO_Init+0x214>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a53      	ldr	r2, [pc, #332]	; (800373c <HAL_GPIO_Init+0x324>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d019      	beq.n	8003628 <HAL_GPIO_Init+0x210>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a52      	ldr	r2, [pc, #328]	; (8003740 <HAL_GPIO_Init+0x328>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_GPIO_Init+0x20c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a51      	ldr	r2, [pc, #324]	; (8003744 <HAL_GPIO_Init+0x32c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00d      	beq.n	8003620 <HAL_GPIO_Init+0x208>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a50      	ldr	r2, [pc, #320]	; (8003748 <HAL_GPIO_Init+0x330>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d007      	beq.n	800361c <HAL_GPIO_Init+0x204>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a4f      	ldr	r2, [pc, #316]	; (800374c <HAL_GPIO_Init+0x334>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d101      	bne.n	8003618 <HAL_GPIO_Init+0x200>
 8003614:	2308      	movs	r3, #8
 8003616:	e010      	b.n	800363a <HAL_GPIO_Init+0x222>
 8003618:	2309      	movs	r3, #9
 800361a:	e00e      	b.n	800363a <HAL_GPIO_Init+0x222>
 800361c:	2307      	movs	r3, #7
 800361e:	e00c      	b.n	800363a <HAL_GPIO_Init+0x222>
 8003620:	2306      	movs	r3, #6
 8003622:	e00a      	b.n	800363a <HAL_GPIO_Init+0x222>
 8003624:	2305      	movs	r3, #5
 8003626:	e008      	b.n	800363a <HAL_GPIO_Init+0x222>
 8003628:	2304      	movs	r3, #4
 800362a:	e006      	b.n	800363a <HAL_GPIO_Init+0x222>
 800362c:	2303      	movs	r3, #3
 800362e:	e004      	b.n	800363a <HAL_GPIO_Init+0x222>
 8003630:	2302      	movs	r3, #2
 8003632:	e002      	b.n	800363a <HAL_GPIO_Init+0x222>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_GPIO_Init+0x222>
 8003638:	2300      	movs	r3, #0
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	f002 0203 	and.w	r2, r2, #3
 8003640:	0092      	lsls	r2, r2, #2
 8003642:	4093      	lsls	r3, r2
 8003644:	461a      	mov	r2, r3
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800364c:	4936      	ldr	r1, [pc, #216]	; (8003728 <HAL_GPIO_Init+0x310>)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	3302      	adds	r3, #2
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800365a:	4b3d      	ldr	r3, [pc, #244]	; (8003750 <HAL_GPIO_Init+0x338>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	43db      	mvns	r3, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800367e:	4a34      	ldr	r2, [pc, #208]	; (8003750 <HAL_GPIO_Init+0x338>)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003684:	4b32      	ldr	r3, [pc, #200]	; (8003750 <HAL_GPIO_Init+0x338>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	43db      	mvns	r3, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80036a8:	4a29      	ldr	r2, [pc, #164]	; (8003750 <HAL_GPIO_Init+0x338>)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ae:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_GPIO_Init+0x338>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036d2:	4a1f      	ldr	r2, [pc, #124]	; (8003750 <HAL_GPIO_Init+0x338>)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_GPIO_Init+0x338>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036fc:	4a14      	ldr	r2, [pc, #80]	; (8003750 <HAL_GPIO_Init+0x338>)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	3301      	adds	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa22 f303 	lsr.w	r3, r2, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	f47f ae88 	bne.w	8003428 <HAL_GPIO_Init+0x10>
  }
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40023800 	.word	0x40023800
 8003728:	40013800 	.word	0x40013800
 800372c:	40020000 	.word	0x40020000
 8003730:	40020400 	.word	0x40020400
 8003734:	40020800 	.word	0x40020800
 8003738:	40020c00 	.word	0x40020c00
 800373c:	40021000 	.word	0x40021000
 8003740:	40021400 	.word	0x40021400
 8003744:	40021800 	.word	0x40021800
 8003748:	40021c00 	.word	0x40021c00
 800374c:	40022000 	.word	0x40022000
 8003750:	40013c00 	.word	0x40013c00

08003754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	807b      	strh	r3, [r7, #2]
 8003760:	4613      	mov	r3, r2
 8003762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003764:	787b      	ldrb	r3, [r7, #1]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800376a:	887a      	ldrh	r2, [r7, #2]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003770:	e003      	b.n	800377a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003772:	887b      	ldrh	r3, [r7, #2]
 8003774:	041a      	lsls	r2, r3, #16
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	619a      	str	r2, [r3, #24]
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	4608      	mov	r0, r1
 800378e:	4611      	mov	r1, r2
 8003790:	461a      	mov	r2, r3
 8003792:	4603      	mov	r3, r0
 8003794:	70fb      	strb	r3, [r7, #3]
 8003796:	460b      	mov	r3, r1
 8003798:	70bb      	strb	r3, [r7, #2]
 800379a:	4613      	mov	r3, r2
 800379c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	212c      	movs	r1, #44	; 0x2c
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	333b      	adds	r3, #59	; 0x3b
 80037ac:	78ba      	ldrb	r2, [r7, #2]
 80037ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	333f      	adds	r3, #63	; 0x3f
 80037be:	787a      	ldrb	r2, [r7, #1]
 80037c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80037c2:	7c3b      	ldrb	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d112      	bne.n	80037ee <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	212c      	movs	r1, #44	; 0x2c
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	3342      	adds	r3, #66	; 0x42
 80037d6:	2203      	movs	r2, #3
 80037d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	212c      	movs	r1, #44	; 0x2c
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	333d      	adds	r3, #61	; 0x3d
 80037e8:	7f3a      	ldrb	r2, [r7, #28]
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e008      	b.n	8003800 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	3342      	adds	r3, #66	; 0x42
 80037fc:	2202      	movs	r2, #2
 80037fe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003800:	787b      	ldrb	r3, [r7, #1]
 8003802:	2b03      	cmp	r3, #3
 8003804:	f200 80c6 	bhi.w	8003994 <HAL_HCD_HC_SubmitRequest+0x210>
 8003808:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	08003821 	.word	0x08003821
 8003814:	08003981 	.word	0x08003981
 8003818:	08003885 	.word	0x08003885
 800381c:	08003903 	.word	0x08003903
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003820:	7c3b      	ldrb	r3, [r7, #16]
 8003822:	2b01      	cmp	r3, #1
 8003824:	f040 80b8 	bne.w	8003998 <HAL_HCD_HC_SubmitRequest+0x214>
 8003828:	78bb      	ldrb	r3, [r7, #2]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f040 80b4 	bne.w	8003998 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003830:	8b3b      	ldrh	r3, [r7, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d108      	bne.n	8003848 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	212c      	movs	r1, #44	; 0x2c
 800383c:	fb01 f303 	mul.w	r3, r1, r3
 8003840:	4413      	add	r3, r2
 8003842:	3355      	adds	r3, #85	; 0x55
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	212c      	movs	r1, #44	; 0x2c
 800384e:	fb01 f303 	mul.w	r3, r1, r3
 8003852:	4413      	add	r3, r2
 8003854:	3355      	adds	r3, #85	; 0x55
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	212c      	movs	r1, #44	; 0x2c
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	3342      	adds	r3, #66	; 0x42
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800386e:	e093      	b.n	8003998 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	212c      	movs	r1, #44	; 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	3342      	adds	r3, #66	; 0x42
 800387e:	2202      	movs	r2, #2
 8003880:	701a      	strb	r2, [r3, #0]
      break;
 8003882:	e089      	b.n	8003998 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003884:	78bb      	ldrb	r3, [r7, #2]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d11d      	bne.n	80038c6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	212c      	movs	r1, #44	; 0x2c
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	4413      	add	r3, r2
 8003896:	3355      	adds	r3, #85	; 0x55
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	212c      	movs	r1, #44	; 0x2c
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	3342      	adds	r3, #66	; 0x42
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80038b0:	e073      	b.n	800399a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	212c      	movs	r1, #44	; 0x2c
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	4413      	add	r3, r2
 80038be:	3342      	adds	r3, #66	; 0x42
 80038c0:	2202      	movs	r2, #2
 80038c2:	701a      	strb	r2, [r3, #0]
      break;
 80038c4:	e069      	b.n	800399a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	3354      	adds	r3, #84	; 0x54
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	3342      	adds	r3, #66	; 0x42
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
      break;
 80038ec:	e055      	b.n	800399a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	212c      	movs	r1, #44	; 0x2c
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	3342      	adds	r3, #66	; 0x42
 80038fc:	2202      	movs	r2, #2
 80038fe:	701a      	strb	r2, [r3, #0]
      break;
 8003900:	e04b      	b.n	800399a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003902:	78bb      	ldrb	r3, [r7, #2]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d11d      	bne.n	8003944 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	212c      	movs	r1, #44	; 0x2c
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	3355      	adds	r3, #85	; 0x55
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d109      	bne.n	8003930 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	212c      	movs	r1, #44	; 0x2c
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	4413      	add	r3, r2
 8003928:	3342      	adds	r3, #66	; 0x42
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800392e:	e034      	b.n	800399a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	3342      	adds	r3, #66	; 0x42
 800393e:	2202      	movs	r2, #2
 8003940:	701a      	strb	r2, [r3, #0]
      break;
 8003942:	e02a      	b.n	800399a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	3354      	adds	r3, #84	; 0x54
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	212c      	movs	r1, #44	; 0x2c
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	4413      	add	r3, r2
 8003964:	3342      	adds	r3, #66	; 0x42
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
      break;
 800396a:	e016      	b.n	800399a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	3342      	adds	r3, #66	; 0x42
 800397a:	2202      	movs	r2, #2
 800397c:	701a      	strb	r2, [r3, #0]
      break;
 800397e:	e00c      	b.n	800399a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	3342      	adds	r3, #66	; 0x42
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
      break;
 8003992:	e002      	b.n	800399a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003994:	bf00      	nop
 8003996:	e000      	b.n	800399a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003998:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	212c      	movs	r1, #44	; 0x2c
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	3344      	adds	r3, #68	; 0x44
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	8b3a      	ldrh	r2, [r7, #24]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	202c      	movs	r0, #44	; 0x2c
 80039b4:	fb00 f303 	mul.w	r3, r0, r3
 80039b8:	440b      	add	r3, r1
 80039ba:	334c      	adds	r3, #76	; 0x4c
 80039bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	212c      	movs	r1, #44	; 0x2c
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	4413      	add	r3, r2
 80039ca:	3360      	adds	r3, #96	; 0x60
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	212c      	movs	r1, #44	; 0x2c
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	4413      	add	r3, r2
 80039dc:	3350      	adds	r3, #80	; 0x50
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	212c      	movs	r1, #44	; 0x2c
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	3339      	adds	r3, #57	; 0x39
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	212c      	movs	r1, #44	; 0x2c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	3361      	adds	r3, #97	; 0x61
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	222c      	movs	r2, #44	; 0x2c
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	3338      	adds	r3, #56	; 0x38
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	18d1      	adds	r1, r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f004 f9fc 	bl	8007e1c <USB_HC_StartXfer>
 8003a24:	4603      	mov	r3, r0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop

08003a30 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f004 f9a2 	bl	8007d90 <USB_GetMode>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	f040 80ef 	bne.w	8003c32 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f004 f987 	bl	8007d6c <USB_ReadInterrupts>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80e5 	beq.w	8003c30 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f004 f97e 	bl	8007d6c <USB_ReadInterrupts>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a7a:	d104      	bne.n	8003a86 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f004 f96e 	bl	8007d6c <USB_ReadInterrupts>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a9a:	d104      	bne.n	8003aa6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003aa4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f004 f95e 	bl	8007d6c <USB_ReadInterrupts>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ab6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aba:	d104      	bne.n	8003ac6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ac4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 f94e 	bl	8007d6c <USB_ReadInterrupts>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d103      	bne.n	8003ae2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f004 f940 	bl	8007d6c <USB_ReadInterrupts>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af6:	d115      	bne.n	8003b24 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b00:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d108      	bne.n	8003b24 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f007 f914 	bl	800ad40 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f004 f943 	bl	8007daa <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f004 f91f 	bl	8007d6c <USB_ReadInterrupts>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b38:	d102      	bne.n	8003b40 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f001 f9b4 	bl	8004ea8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f004 f911 	bl	8007d6c <USB_ReadInterrupts>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d106      	bne.n	8003b62 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f007 f8d7 	bl	800ad08 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2208      	movs	r2, #8
 8003b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 f900 	bl	8007d6c <USB_ReadInterrupts>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d101      	bne.n	8003b7a <HAL_HCD_IRQHandler+0x14a>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_HCD_IRQHandler+0x14c>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d012      	beq.n	8003ba6 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0210 	bic.w	r2, r2, #16
 8003b8e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f001 f8b7 	bl	8004d04 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699a      	ldr	r2, [r3, #24]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0210 	orr.w	r2, r2, #16
 8003ba4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f004 f8de 	bl	8007d6c <USB_ReadInterrupts>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bba:	d13a      	bne.n	8003c32 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f004 fa6d 	bl	80080a0 <USB_HC_ReadInterrupt>
 8003bc6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e025      	b.n	8003c1a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d018      	beq.n	8003c14 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf8:	d106      	bne.n	8003c08 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f85c 	bl	8003cbe <HCD_HC_IN_IRQHandler>
 8003c06:	e005      	b.n	8003c14 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fc77 	bl	8004502 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	3301      	adds	r3, #1
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d3d4      	bcc.n	8003bce <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c2c:	615a      	str	r2, [r3, #20]
 8003c2e:	e000      	b.n	8003c32 <HAL_HCD_IRQHandler+0x202>
      return;
 8003c30:	bf00      	nop
    }
  }
}
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_HCD_Stop+0x16>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e00d      	b.n	8003c6a <HAL_HCD_Stop+0x32>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f004 fb86 	bl	800836c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	212c      	movs	r1, #44	; 0x2c
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	3360      	adds	r3, #96	; 0x60
 8003c8c:	781b      	ldrb	r3, [r3, #0]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	212c      	movs	r1, #44	; 0x2c
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	3350      	adds	r3, #80	; 0x50
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b086      	sub	sp, #24
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d119      	bne.n	8003d22 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	0151      	lsls	r1, r2, #5
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	440a      	add	r2, r1
 8003d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d1a:	f043 0302 	orr.w	r3, r3, #2
 8003d1e:	60d3      	str	r3, [r2, #12]
 8003d20:	e101      	b.n	8003f26 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d38:	d12b      	bne.n	8003d92 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d46:	461a      	mov	r2, r3
 8003d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	3361      	adds	r3, #97	; 0x61
 8003d5c:	2207      	movs	r2, #7
 8003d5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	0151      	lsls	r1, r2, #5
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	440a      	add	r2, r1
 8003d76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d7a:	f043 0302 	orr.w	r3, r3, #2
 8003d7e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f004 f998 	bl	80080c0 <USB_HC_Halt>
 8003d90:	e0c9      	b.n	8003f26 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d109      	bne.n	8003dbc <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db4:	461a      	mov	r2, r3
 8003db6:	2320      	movs	r3, #32
 8003db8:	6093      	str	r3, [r2, #8]
 8003dba:	e0b4      	b.n	8003f26 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d133      	bne.n	8003e3a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	0151      	lsls	r1, r2, #5
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	440a      	add	r2, r1
 8003de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	212c      	movs	r1, #44	; 0x2c
 8003df8:	fb01 f303 	mul.w	r3, r1, r3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3361      	adds	r3, #97	; 0x61
 8003e00:	2205      	movs	r2, #5
 8003e02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e10:	461a      	mov	r2, r3
 8003e12:	2310      	movs	r3, #16
 8003e14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e22:	461a      	mov	r2, r3
 8003e24:	2308      	movs	r3, #8
 8003e26:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	4611      	mov	r1, r2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f004 f944 	bl	80080c0 <USB_HC_Halt>
 8003e38:	e075      	b.n	8003f26 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e50:	d134      	bne.n	8003ebc <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	0151      	lsls	r1, r2, #5
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	440a      	add	r2, r1
 8003e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e6c:	f043 0302 	orr.w	r3, r3, #2
 8003e70:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	212c      	movs	r1, #44	; 0x2c
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3361      	adds	r3, #97	; 0x61
 8003e80:	2208      	movs	r2, #8
 8003e82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e90:	461a      	mov	r2, r3
 8003e92:	2310      	movs	r3, #16
 8003e94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f004 f903 	bl	80080c0 <USB_HC_Halt>
 8003eba:	e034      	b.n	8003f26 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b80      	cmp	r3, #128	; 0x80
 8003ed0:	d129      	bne.n	8003f26 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	212c      	movs	r1, #44	; 0x2c
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	4413      	add	r3, r2
 8003efe:	3361      	adds	r3, #97	; 0x61
 8003f00:	2206      	movs	r2, #6
 8003f02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f004 f8d6 	bl	80080c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f20:	461a      	mov	r2, r3
 8003f22:	2380      	movs	r3, #128	; 0x80
 8003f24:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3c:	d122      	bne.n	8003f84 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	0151      	lsls	r1, r2, #5
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	440a      	add	r2, r1
 8003f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f58:	f043 0302 	orr.w	r3, r3, #2
 8003f5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f004 f8a9 	bl	80080c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f80:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003f82:	e2ba      	b.n	80044fa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	f040 811b 	bne.w	80041d2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d019      	beq.n	8003fd8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	212c      	movs	r1, #44	; 0x2c
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	3348      	adds	r3, #72	; 0x48
 8003fb2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	0159      	lsls	r1, r3, #5
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	440b      	add	r3, r1
 8003fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003fc6:	1ad2      	subs	r2, r2, r3
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	202c      	movs	r0, #44	; 0x2c
 8003fce:	fb00 f303 	mul.w	r3, r0, r3
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3350      	adds	r3, #80	; 0x50
 8003fd6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	212c      	movs	r1, #44	; 0x2c
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3361      	adds	r3, #97	; 0x61
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	212c      	movs	r1, #44	; 0x2c
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	335c      	adds	r3, #92	; 0x5c
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004008:	461a      	mov	r2, r3
 800400a:	2301      	movs	r3, #1
 800400c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	212c      	movs	r1, #44	; 0x2c
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	4413      	add	r3, r2
 800401a:	333f      	adds	r3, #63	; 0x3f
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	212c      	movs	r1, #44	; 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	333f      	adds	r3, #63	; 0x3f
 8004030:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004032:	2b02      	cmp	r3, #2
 8004034:	d121      	bne.n	800407a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4413      	add	r3, r2
 800403e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	0151      	lsls	r1, r2, #5
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	440a      	add	r2, r1
 800404c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f004 f82d 	bl	80080c0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004072:	461a      	mov	r2, r3
 8004074:	2310      	movs	r3, #16
 8004076:	6093      	str	r3, [r2, #8]
 8004078:	e066      	b.n	8004148 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	212c      	movs	r1, #44	; 0x2c
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	4413      	add	r3, r2
 8004086:	333f      	adds	r3, #63	; 0x3f
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b03      	cmp	r3, #3
 800408c:	d127      	bne.n	80040de <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4413      	add	r3, r2
 8004096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	0151      	lsls	r1, r2, #5
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	440a      	add	r2, r1
 80040a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040ac:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	212c      	movs	r1, #44	; 0x2c
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	3360      	adds	r3, #96	; 0x60
 80040bc:	2201      	movs	r2, #1
 80040be:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	b2d9      	uxtb	r1, r3
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	202c      	movs	r0, #44	; 0x2c
 80040ca:	fb00 f303 	mul.w	r3, r0, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	3360      	adds	r3, #96	; 0x60
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f006 fe40 	bl	800ad5c <HAL_HCD_HC_NotifyURBChange_Callback>
 80040dc:	e034      	b.n	8004148 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	212c      	movs	r1, #44	; 0x2c
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	4413      	add	r3, r2
 80040ea:	333f      	adds	r3, #63	; 0x3f
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d12a      	bne.n	8004148 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	3360      	adds	r3, #96	; 0x60
 8004100:	2201      	movs	r2, #1
 8004102:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	3354      	adds	r3, #84	; 0x54
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	f083 0301 	eor.w	r3, r3, #1
 8004118:	b2d8      	uxtb	r0, r3
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	212c      	movs	r1, #44	; 0x2c
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	4413      	add	r3, r2
 8004126:	3354      	adds	r3, #84	; 0x54
 8004128:	4602      	mov	r2, r0
 800412a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	b2d9      	uxtb	r1, r3
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	202c      	movs	r0, #44	; 0x2c
 8004136:	fb00 f303 	mul.w	r3, r0, r3
 800413a:	4413      	add	r3, r2
 800413c:	3360      	adds	r3, #96	; 0x60
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f006 fe0a 	bl	800ad5c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d12b      	bne.n	80041a8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	212c      	movs	r1, #44	; 0x2c
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	4413      	add	r3, r2
 800415c:	3348      	adds	r3, #72	; 0x48
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	202c      	movs	r0, #44	; 0x2c
 8004166:	fb00 f202 	mul.w	r2, r0, r2
 800416a:	440a      	add	r2, r1
 800416c:	3240      	adds	r2, #64	; 0x40
 800416e:	8812      	ldrh	r2, [r2, #0]
 8004170:	fbb3 f3f2 	udiv	r3, r3, r2
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 81be 	beq.w	80044fa <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	3354      	adds	r3, #84	; 0x54
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	f083 0301 	eor.w	r3, r3, #1
 8004192:	b2d8      	uxtb	r0, r3
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	212c      	movs	r1, #44	; 0x2c
 800419a:	fb01 f303 	mul.w	r3, r1, r3
 800419e:	4413      	add	r3, r2
 80041a0:	3354      	adds	r3, #84	; 0x54
 80041a2:	4602      	mov	r2, r0
 80041a4:	701a      	strb	r2, [r3, #0]
}
 80041a6:	e1a8      	b.n	80044fa <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	212c      	movs	r1, #44	; 0x2c
 80041ae:	fb01 f303 	mul.w	r3, r1, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	3354      	adds	r3, #84	; 0x54
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	f083 0301 	eor.w	r3, r3, #1
 80041bc:	b2d8      	uxtb	r0, r3
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	212c      	movs	r1, #44	; 0x2c
 80041c4:	fb01 f303 	mul.w	r3, r1, r3
 80041c8:	4413      	add	r3, r2
 80041ca:	3354      	adds	r3, #84	; 0x54
 80041cc:	4602      	mov	r2, r0
 80041ce:	701a      	strb	r2, [r3, #0]
}
 80041d0:	e193      	b.n	80044fa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	f040 8106 	bne.w	80043f6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004204:	f023 0302 	bic.w	r3, r3, #2
 8004208:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	212c      	movs	r1, #44	; 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	3361      	adds	r3, #97	; 0x61
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d109      	bne.n	8004232 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	212c      	movs	r1, #44	; 0x2c
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	3360      	adds	r3, #96	; 0x60
 800422c:	2201      	movs	r2, #1
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e0c9      	b.n	80043c6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	212c      	movs	r1, #44	; 0x2c
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	4413      	add	r3, r2
 800423e:	3361      	adds	r3, #97	; 0x61
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b05      	cmp	r3, #5
 8004244:	d109      	bne.n	800425a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	212c      	movs	r1, #44	; 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	3360      	adds	r3, #96	; 0x60
 8004254:	2205      	movs	r2, #5
 8004256:	701a      	strb	r2, [r3, #0]
 8004258:	e0b5      	b.n	80043c6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	212c      	movs	r1, #44	; 0x2c
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	4413      	add	r3, r2
 8004266:	3361      	adds	r3, #97	; 0x61
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b06      	cmp	r3, #6
 800426c:	d009      	beq.n	8004282 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	212c      	movs	r1, #44	; 0x2c
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	4413      	add	r3, r2
 800427a:	3361      	adds	r3, #97	; 0x61
 800427c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800427e:	2b08      	cmp	r3, #8
 8004280:	d150      	bne.n	8004324 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	335c      	adds	r3, #92	; 0x5c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	202c      	movs	r0, #44	; 0x2c
 800429a:	fb00 f303 	mul.w	r3, r0, r3
 800429e:	440b      	add	r3, r1
 80042a0:	335c      	adds	r3, #92	; 0x5c
 80042a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	212c      	movs	r1, #44	; 0x2c
 80042aa:	fb01 f303 	mul.w	r3, r1, r3
 80042ae:	4413      	add	r3, r2
 80042b0:	335c      	adds	r3, #92	; 0x5c
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d912      	bls.n	80042de <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	212c      	movs	r1, #44	; 0x2c
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	4413      	add	r3, r2
 80042c4:	335c      	adds	r3, #92	; 0x5c
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	212c      	movs	r1, #44	; 0x2c
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	3360      	adds	r3, #96	; 0x60
 80042d8:	2204      	movs	r2, #4
 80042da:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042dc:	e073      	b.n	80043c6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	212c      	movs	r1, #44	; 0x2c
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	4413      	add	r3, r2
 80042ea:	3360      	adds	r3, #96	; 0x60
 80042ec:	2202      	movs	r2, #2
 80042ee:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004306:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800430e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4413      	add	r3, r2
 8004318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431c:	461a      	mov	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004322:	e050      	b.n	80043c6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	212c      	movs	r1, #44	; 0x2c
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	4413      	add	r3, r2
 8004330:	3361      	adds	r3, #97	; 0x61
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d122      	bne.n	800437e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	212c      	movs	r1, #44	; 0x2c
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	4413      	add	r3, r2
 8004344:	3360      	adds	r3, #96	; 0x60
 8004346:	2202      	movs	r2, #2
 8004348:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4413      	add	r3, r2
 8004352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004360:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004368:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4413      	add	r3, r2
 8004372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004376:	461a      	mov	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	e023      	b.n	80043c6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	212c      	movs	r1, #44	; 0x2c
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	4413      	add	r3, r2
 800438a:	3361      	adds	r3, #97	; 0x61
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b07      	cmp	r3, #7
 8004390:	d119      	bne.n	80043c6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	212c      	movs	r1, #44	; 0x2c
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	335c      	adds	r3, #92	; 0x5c
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	202c      	movs	r0, #44	; 0x2c
 80043aa:	fb00 f303 	mul.w	r3, r0, r3
 80043ae:	440b      	add	r3, r1
 80043b0:	335c      	adds	r3, #92	; 0x5c
 80043b2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	212c      	movs	r1, #44	; 0x2c
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	4413      	add	r3, r2
 80043c0:	3360      	adds	r3, #96	; 0x60
 80043c2:	2204      	movs	r2, #4
 80043c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d2:	461a      	mov	r2, r3
 80043d4:	2302      	movs	r3, #2
 80043d6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	b2d9      	uxtb	r1, r3
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	202c      	movs	r0, #44	; 0x2c
 80043e2:	fb00 f303 	mul.w	r3, r0, r3
 80043e6:	4413      	add	r3, r2
 80043e8:	3360      	adds	r3, #96	; 0x60
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f006 fcb4 	bl	800ad5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80043f4:	e081      	b.n	80044fa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b10      	cmp	r3, #16
 800440a:	d176      	bne.n	80044fa <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	212c      	movs	r1, #44	; 0x2c
 8004412:	fb01 f303 	mul.w	r3, r1, r3
 8004416:	4413      	add	r3, r2
 8004418:	333f      	adds	r3, #63	; 0x3f
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d121      	bne.n	8004464 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	212c      	movs	r1, #44	; 0x2c
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	4413      	add	r3, r2
 800442c:	335c      	adds	r3, #92	; 0x5c
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	440a      	add	r2, r1
 8004448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800444c:	f043 0302 	orr.w	r3, r3, #2
 8004450:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	4611      	mov	r1, r2
 800445c:	4618      	mov	r0, r3
 800445e:	f003 fe2f 	bl	80080c0 <USB_HC_Halt>
 8004462:	e041      	b.n	80044e8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	212c      	movs	r1, #44	; 0x2c
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	333f      	adds	r3, #63	; 0x3f
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d009      	beq.n	800448c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	212c      	movs	r1, #44	; 0x2c
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	4413      	add	r3, r2
 8004484:	333f      	adds	r3, #63	; 0x3f
 8004486:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004488:	2b02      	cmp	r3, #2
 800448a:	d12d      	bne.n	80044e8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	212c      	movs	r1, #44	; 0x2c
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	4413      	add	r3, r2
 8004498:	335c      	adds	r3, #92	; 0x5c
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d120      	bne.n	80044e8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	212c      	movs	r1, #44	; 0x2c
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	4413      	add	r3, r2
 80044b2:	3361      	adds	r3, #97	; 0x61
 80044b4:	2203      	movs	r2, #3
 80044b6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044d2:	f043 0302 	orr.w	r3, r3, #2
 80044d6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f003 fdec 	bl	80080c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f4:	461a      	mov	r2, r3
 80044f6:	2310      	movs	r3, #16
 80044f8:	6093      	str	r3, [r2, #8]
}
 80044fa:	bf00      	nop
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b088      	sub	sp, #32
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	4413      	add	r3, r2
 8004524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b04      	cmp	r3, #4
 8004530:	d119      	bne.n	8004566 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	4413      	add	r3, r2
 800453a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453e:	461a      	mov	r2, r3
 8004540:	2304      	movs	r3, #4
 8004542:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	4413      	add	r3, r2
 800454c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	0151      	lsls	r1, r2, #5
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	440a      	add	r2, r1
 800455a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800455e:	f043 0302 	orr.w	r3, r3, #2
 8004562:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004564:	e3ca      	b.n	8004cfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	4413      	add	r3, r2
 800456e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b20      	cmp	r3, #32
 800457a:	d13e      	bne.n	80045fa <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	4413      	add	r3, r2
 8004584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004588:	461a      	mov	r2, r3
 800458a:	2320      	movs	r3, #32
 800458c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	212c      	movs	r1, #44	; 0x2c
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	4413      	add	r3, r2
 800459a:	333d      	adds	r3, #61	; 0x3d
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	f040 83ac 	bne.w	8004cfc <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	212c      	movs	r1, #44	; 0x2c
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	4413      	add	r3, r2
 80045b0:	333d      	adds	r3, #61	; 0x3d
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	212c      	movs	r1, #44	; 0x2c
 80045bc:	fb01 f303 	mul.w	r3, r1, r3
 80045c0:	4413      	add	r3, r2
 80045c2:	3360      	adds	r3, #96	; 0x60
 80045c4:	2202      	movs	r2, #2
 80045c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	0151      	lsls	r1, r2, #5
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	440a      	add	r2, r1
 80045de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045e2:	f043 0302 	orr.w	r3, r3, #2
 80045e6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f003 fd64 	bl	80080c0 <USB_HC_Halt>
}
 80045f8:	e380      	b.n	8004cfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	4413      	add	r3, r2
 8004602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800460c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004610:	d122      	bne.n	8004658 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4413      	add	r3, r2
 800461a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	0151      	lsls	r1, r2, #5
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	440a      	add	r2, r1
 8004628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800462c:	f043 0302 	orr.w	r3, r3, #2
 8004630:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f003 fd3f 	bl	80080c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464e:	461a      	mov	r2, r3
 8004650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004654:	6093      	str	r3, [r2, #8]
}
 8004656:	e351      	b.n	8004cfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	4413      	add	r3, r2
 8004660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d150      	bne.n	8004710 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	212c      	movs	r1, #44	; 0x2c
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	4413      	add	r3, r2
 800467a:	335c      	adds	r3, #92	; 0x5c
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	4413      	add	r3, r2
 8004688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d111      	bne.n	80046ba <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	212c      	movs	r1, #44	; 0x2c
 800469c:	fb01 f303 	mul.w	r3, r1, r3
 80046a0:	4413      	add	r3, r2
 80046a2:	333d      	adds	r3, #61	; 0x3d
 80046a4:	2201      	movs	r2, #1
 80046a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b4:	461a      	mov	r2, r3
 80046b6:	2340      	movs	r3, #64	; 0x40
 80046b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	0151      	lsls	r1, r2, #5
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	440a      	add	r2, r1
 80046d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046d4:	f043 0302 	orr.w	r3, r3, #2
 80046d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f003 fceb 	bl	80080c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f6:	461a      	mov	r2, r3
 80046f8:	2301      	movs	r3, #1
 80046fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	212c      	movs	r1, #44	; 0x2c
 8004702:	fb01 f303 	mul.w	r3, r1, r3
 8004706:	4413      	add	r3, r2
 8004708:	3361      	adds	r3, #97	; 0x61
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
}
 800470e:	e2f5      	b.n	8004cfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d13c      	bne.n	80047a0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	212c      	movs	r1, #44	; 0x2c
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	3361      	adds	r3, #97	; 0x61
 8004734:	2204      	movs	r2, #4
 8004736:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	212c      	movs	r1, #44	; 0x2c
 800473e:	fb01 f303 	mul.w	r3, r1, r3
 8004742:	4413      	add	r3, r2
 8004744:	333d      	adds	r3, #61	; 0x3d
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	212c      	movs	r1, #44	; 0x2c
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4413      	add	r3, r2
 8004756:	335c      	adds	r3, #92	; 0x5c
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	4413      	add	r3, r2
 8004764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	440a      	add	r2, r1
 8004772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004776:	f043 0302 	orr.w	r3, r3, #2
 800477a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	4611      	mov	r1, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f003 fc9a 	bl	80080c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	4413      	add	r3, r2
 8004794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004798:	461a      	mov	r2, r3
 800479a:	2340      	movs	r3, #64	; 0x40
 800479c:	6093      	str	r3, [r2, #8]
}
 800479e:	e2ad      	b.n	8004cfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d12a      	bne.n	800480c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c2:	461a      	mov	r2, r3
 80047c4:	2308      	movs	r3, #8
 80047c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	0151      	lsls	r1, r2, #5
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	440a      	add	r2, r1
 80047de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047e2:	f043 0302 	orr.w	r3, r3, #2
 80047e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f003 fc64 	bl	80080c0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	212c      	movs	r1, #44	; 0x2c
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	3361      	adds	r3, #97	; 0x61
 8004806:	2205      	movs	r2, #5
 8004808:	701a      	strb	r2, [r3, #0]
}
 800480a:	e277      	b.n	8004cfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	4413      	add	r3, r2
 8004814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b10      	cmp	r3, #16
 8004820:	d150      	bne.n	80048c4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	212c      	movs	r1, #44	; 0x2c
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	4413      	add	r3, r2
 800482e:	335c      	adds	r3, #92	; 0x5c
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	212c      	movs	r1, #44	; 0x2c
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	4413      	add	r3, r2
 8004840:	3361      	adds	r3, #97	; 0x61
 8004842:	2203      	movs	r2, #3
 8004844:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	212c      	movs	r1, #44	; 0x2c
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	4413      	add	r3, r2
 8004852:	333d      	adds	r3, #61	; 0x3d
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d112      	bne.n	8004880 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	212c      	movs	r1, #44	; 0x2c
 8004860:	fb01 f303 	mul.w	r3, r1, r3
 8004864:	4413      	add	r3, r2
 8004866:	333c      	adds	r3, #60	; 0x3c
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d108      	bne.n	8004880 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	212c      	movs	r1, #44	; 0x2c
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	4413      	add	r3, r2
 800487a:	333d      	adds	r3, #61	; 0x3d
 800487c:	2201      	movs	r2, #1
 800487e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	4413      	add	r3, r2
 8004888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	440a      	add	r2, r1
 8004896:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800489a:	f043 0302 	orr.w	r3, r3, #2
 800489e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	4611      	mov	r1, r2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f003 fc08 	bl	80080c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048bc:	461a      	mov	r2, r3
 80048be:	2310      	movs	r3, #16
 80048c0:	6093      	str	r3, [r2, #8]
}
 80048c2:	e21b      	b.n	8004cfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d174      	bne.n	80049c4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d121      	bne.n	8004926 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	212c      	movs	r1, #44	; 0x2c
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	3361      	adds	r3, #97	; 0x61
 80048f0:	2206      	movs	r2, #6
 80048f2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	440a      	add	r2, r1
 800490a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800490e:	f043 0302 	orr.w	r3, r3, #2
 8004912:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	4611      	mov	r1, r2
 800491e:	4618      	mov	r0, r3
 8004920:	f003 fbce 	bl	80080c0 <USB_HC_Halt>
 8004924:	e044      	b.n	80049b0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	212c      	movs	r1, #44	; 0x2c
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	4413      	add	r3, r2
 8004932:	335c      	adds	r3, #92	; 0x5c
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	202c      	movs	r0, #44	; 0x2c
 800493e:	fb00 f303 	mul.w	r3, r0, r3
 8004942:	440b      	add	r3, r1
 8004944:	335c      	adds	r3, #92	; 0x5c
 8004946:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	212c      	movs	r1, #44	; 0x2c
 800494e:	fb01 f303 	mul.w	r3, r1, r3
 8004952:	4413      	add	r3, r2
 8004954:	335c      	adds	r3, #92	; 0x5c
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b02      	cmp	r3, #2
 800495a:	d920      	bls.n	800499e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	212c      	movs	r1, #44	; 0x2c
 8004962:	fb01 f303 	mul.w	r3, r1, r3
 8004966:	4413      	add	r3, r2
 8004968:	335c      	adds	r3, #92	; 0x5c
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	212c      	movs	r1, #44	; 0x2c
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	4413      	add	r3, r2
 800497a:	3360      	adds	r3, #96	; 0x60
 800497c:	2204      	movs	r2, #4
 800497e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	b2d9      	uxtb	r1, r3
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	202c      	movs	r0, #44	; 0x2c
 800498a:	fb00 f303 	mul.w	r3, r0, r3
 800498e:	4413      	add	r3, r2
 8004990:	3360      	adds	r3, #96	; 0x60
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f006 f9e0 	bl	800ad5c <HAL_HCD_HC_NotifyURBChange_Callback>
 800499c:	e008      	b.n	80049b0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	3360      	adds	r3, #96	; 0x60
 80049ac:	2202      	movs	r2, #2
 80049ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049bc:	461a      	mov	r2, r3
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	6093      	str	r3, [r2, #8]
}
 80049c2:	e19b      	b.n	8004cfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049da:	d134      	bne.n	8004a46 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049f6:	f043 0302 	orr.w	r3, r3, #2
 80049fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	4611      	mov	r1, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f003 fb5a 	bl	80080c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2310      	movs	r3, #16
 8004a1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	212c      	movs	r1, #44	; 0x2c
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3361      	adds	r3, #97	; 0x61
 8004a40:	2208      	movs	r2, #8
 8004a42:	701a      	strb	r2, [r3, #0]
}
 8004a44:	e15a      	b.n	8004cfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	f040 814f 	bne.w	8004cfc <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a78:	f023 0302 	bic.w	r3, r3, #2
 8004a7c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	212c      	movs	r1, #44	; 0x2c
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	4413      	add	r3, r2
 8004a8a:	3361      	adds	r3, #97	; 0x61
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d17d      	bne.n	8004b8e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	212c      	movs	r1, #44	; 0x2c
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3360      	adds	r3, #96	; 0x60
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	212c      	movs	r1, #44	; 0x2c
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	333f      	adds	r3, #63	; 0x3f
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d00a      	beq.n	8004ace <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	212c      	movs	r1, #44	; 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	333f      	adds	r3, #63	; 0x3f
 8004ac6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	f040 8100 	bne.w	8004cce <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d113      	bne.n	8004afe <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	212c      	movs	r1, #44	; 0x2c
 8004adc:	fb01 f303 	mul.w	r3, r1, r3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	3355      	adds	r3, #85	; 0x55
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	f083 0301 	eor.w	r3, r3, #1
 8004aea:	b2d8      	uxtb	r0, r3
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	212c      	movs	r1, #44	; 0x2c
 8004af2:	fb01 f303 	mul.w	r3, r1, r3
 8004af6:	4413      	add	r3, r2
 8004af8:	3355      	adds	r3, #85	; 0x55
 8004afa:	4602      	mov	r2, r0
 8004afc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	f040 80e3 	bne.w	8004cce <HCD_HC_OUT_IRQHandler+0x7cc>
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	212c      	movs	r1, #44	; 0x2c
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	334c      	adds	r3, #76	; 0x4c
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80d8 	beq.w	8004cce <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	212c      	movs	r1, #44	; 0x2c
 8004b24:	fb01 f303 	mul.w	r3, r1, r3
 8004b28:	4413      	add	r3, r2
 8004b2a:	334c      	adds	r3, #76	; 0x4c
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	202c      	movs	r0, #44	; 0x2c
 8004b34:	fb00 f202 	mul.w	r2, r0, r2
 8004b38:	440a      	add	r2, r1
 8004b3a:	3240      	adds	r2, #64	; 0x40
 8004b3c:	8812      	ldrh	r2, [r2, #0]
 8004b3e:	4413      	add	r3, r2
 8004b40:	3b01      	subs	r3, #1
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	202c      	movs	r0, #44	; 0x2c
 8004b48:	fb00 f202 	mul.w	r2, r0, r2
 8004b4c:	440a      	add	r2, r1
 8004b4e:	3240      	adds	r2, #64	; 0x40
 8004b50:	8812      	ldrh	r2, [r2, #0]
 8004b52:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 80b5 	beq.w	8004cce <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	212c      	movs	r1, #44	; 0x2c
 8004b6a:	fb01 f303 	mul.w	r3, r1, r3
 8004b6e:	4413      	add	r3, r2
 8004b70:	3355      	adds	r3, #85	; 0x55
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	f083 0301 	eor.w	r3, r3, #1
 8004b78:	b2d8      	uxtb	r0, r3
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	212c      	movs	r1, #44	; 0x2c
 8004b80:	fb01 f303 	mul.w	r3, r1, r3
 8004b84:	4413      	add	r3, r2
 8004b86:	3355      	adds	r3, #85	; 0x55
 8004b88:	4602      	mov	r2, r0
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	e09f      	b.n	8004cce <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	212c      	movs	r1, #44	; 0x2c
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	3361      	adds	r3, #97	; 0x61
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d109      	bne.n	8004bb6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	212c      	movs	r1, #44	; 0x2c
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	4413      	add	r3, r2
 8004bae:	3360      	adds	r3, #96	; 0x60
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e08b      	b.n	8004cce <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	212c      	movs	r1, #44	; 0x2c
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3361      	adds	r3, #97	; 0x61
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d109      	bne.n	8004bde <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	212c      	movs	r1, #44	; 0x2c
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3360      	adds	r3, #96	; 0x60
 8004bd8:	2202      	movs	r2, #2
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e077      	b.n	8004cce <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	212c      	movs	r1, #44	; 0x2c
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	4413      	add	r3, r2
 8004bea:	3361      	adds	r3, #97	; 0x61
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b05      	cmp	r3, #5
 8004bf0:	d109      	bne.n	8004c06 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	212c      	movs	r1, #44	; 0x2c
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3360      	adds	r3, #96	; 0x60
 8004c00:	2205      	movs	r2, #5
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	e063      	b.n	8004cce <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	3361      	adds	r3, #97	; 0x61
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b06      	cmp	r3, #6
 8004c18:	d009      	beq.n	8004c2e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	212c      	movs	r1, #44	; 0x2c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	3361      	adds	r3, #97	; 0x61
 8004c28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d14f      	bne.n	8004cce <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	212c      	movs	r1, #44	; 0x2c
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	4413      	add	r3, r2
 8004c3a:	335c      	adds	r3, #92	; 0x5c
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	202c      	movs	r0, #44	; 0x2c
 8004c46:	fb00 f303 	mul.w	r3, r0, r3
 8004c4a:	440b      	add	r3, r1
 8004c4c:	335c      	adds	r3, #92	; 0x5c
 8004c4e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	212c      	movs	r1, #44	; 0x2c
 8004c56:	fb01 f303 	mul.w	r3, r1, r3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	335c      	adds	r3, #92	; 0x5c
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d912      	bls.n	8004c8a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	212c      	movs	r1, #44	; 0x2c
 8004c6a:	fb01 f303 	mul.w	r3, r1, r3
 8004c6e:	4413      	add	r3, r2
 8004c70:	335c      	adds	r3, #92	; 0x5c
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	212c      	movs	r1, #44	; 0x2c
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	4413      	add	r3, r2
 8004c82:	3360      	adds	r3, #96	; 0x60
 8004c84:	2204      	movs	r2, #4
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	e021      	b.n	8004cce <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	212c      	movs	r1, #44	; 0x2c
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	4413      	add	r3, r2
 8004c96:	3360      	adds	r3, #96	; 0x60
 8004c98:	2202      	movs	r2, #2
 8004c9a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cb2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cba:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc8:	461a      	mov	r2, r3
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cda:	461a      	mov	r2, r3
 8004cdc:	2302      	movs	r3, #2
 8004cde:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	b2d9      	uxtb	r1, r3
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	202c      	movs	r0, #44	; 0x2c
 8004cea:	fb00 f303 	mul.w	r3, r0, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	3360      	adds	r3, #96	; 0x60
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f006 f830 	bl	800ad5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004cfc:	bf00      	nop
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	0c5b      	lsrs	r3, r3, #17
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d38:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d004      	beq.n	8004d4a <HCD_RXQLVL_IRQHandler+0x46>
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	f000 80a9 	beq.w	8004e9a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004d48:	e0aa      	b.n	8004ea0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 80a6 	beq.w	8004e9e <HCD_RXQLVL_IRQHandler+0x19a>
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3344      	adds	r3, #68	; 0x44
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 809b 	beq.w	8004e9e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	212c      	movs	r1, #44	; 0x2c
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	3350      	adds	r3, #80	; 0x50
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	441a      	add	r2, r3
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	202c      	movs	r0, #44	; 0x2c
 8004d82:	fb00 f303 	mul.w	r3, r0, r3
 8004d86:	440b      	add	r3, r1
 8004d88:	334c      	adds	r3, #76	; 0x4c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d87a      	bhi.n	8004e86 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	212c      	movs	r1, #44	; 0x2c
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	3344      	adds	r3, #68	; 0x44
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	b292      	uxth	r2, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	f002 ff88 	bl	8007cbe <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	212c      	movs	r1, #44	; 0x2c
 8004db4:	fb01 f303 	mul.w	r3, r1, r3
 8004db8:	4413      	add	r3, r2
 8004dba:	3344      	adds	r3, #68	; 0x44
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	441a      	add	r2, r3
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	202c      	movs	r0, #44	; 0x2c
 8004dc8:	fb00 f303 	mul.w	r3, r0, r3
 8004dcc:	440b      	add	r3, r1
 8004dce:	3344      	adds	r3, #68	; 0x44
 8004dd0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	212c      	movs	r1, #44	; 0x2c
 8004dd8:	fb01 f303 	mul.w	r3, r1, r3
 8004ddc:	4413      	add	r3, r2
 8004dde:	3350      	adds	r3, #80	; 0x50
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	441a      	add	r2, r3
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	202c      	movs	r0, #44	; 0x2c
 8004dec:	fb00 f303 	mul.w	r3, r0, r3
 8004df0:	440b      	add	r3, r1
 8004df2:	3350      	adds	r3, #80	; 0x50
 8004df4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	0cdb      	lsrs	r3, r3, #19
 8004e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e0a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	212c      	movs	r1, #44	; 0x2c
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	4413      	add	r3, r2
 8004e18:	3340      	adds	r3, #64	; 0x40
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d13c      	bne.n	8004e9e <HCD_RXQLVL_IRQHandler+0x19a>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d039      	beq.n	8004e9e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e40:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e48:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e56:	461a      	mov	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	212c      	movs	r1, #44	; 0x2c
 8004e62:	fb01 f303 	mul.w	r3, r1, r3
 8004e66:	4413      	add	r3, r2
 8004e68:	3354      	adds	r3, #84	; 0x54
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	f083 0301 	eor.w	r3, r3, #1
 8004e70:	b2d8      	uxtb	r0, r3
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	212c      	movs	r1, #44	; 0x2c
 8004e78:	fb01 f303 	mul.w	r3, r1, r3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3354      	adds	r3, #84	; 0x54
 8004e80:	4602      	mov	r2, r0
 8004e82:	701a      	strb	r2, [r3, #0]
      break;
 8004e84:	e00b      	b.n	8004e9e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	212c      	movs	r1, #44	; 0x2c
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	3360      	adds	r3, #96	; 0x60
 8004e94:	2204      	movs	r2, #4
 8004e96:	701a      	strb	r2, [r3, #0]
      break;
 8004e98:	e001      	b.n	8004e9e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004e9a:	bf00      	nop
 8004e9c:	e000      	b.n	8004ea0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004e9e:	bf00      	nop
  }
}
 8004ea0:	bf00      	nop
 8004ea2:	3728      	adds	r7, #40	; 0x28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ed4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d10b      	bne.n	8004ef8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d102      	bne.n	8004ef0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f005 ff1a 	bl	800ad24 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f043 0302 	orr.w	r3, r3, #2
 8004ef6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d132      	bne.n	8004f68 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f043 0308 	orr.w	r3, r3, #8
 8004f08:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d126      	bne.n	8004f62 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d113      	bne.n	8004f44 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004f22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f26:	d106      	bne.n	8004f36 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2102      	movs	r1, #2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f002 ff3b 	bl	8007daa <USB_InitFSLSPClkSel>
 8004f34:	e011      	b.n	8004f5a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f002 ff34 	bl	8007daa <USB_InitFSLSPClkSel>
 8004f42:	e00a      	b.n	8004f5a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d106      	bne.n	8004f5a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f52:	461a      	mov	r2, r3
 8004f54:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004f58:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f005 ff10 	bl	800ad80 <HAL_HCD_PortEnabled_Callback>
 8004f60:	e002      	b.n	8004f68 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f005 ff1a 	bl	800ad9c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d103      	bne.n	8004f7a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f043 0320 	orr.w	r3, r3, #32
 8004f78:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	6013      	str	r3, [r2, #0]
}
 8004f86:	bf00      	nop
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e237      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d050      	beq.n	8005050 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fae:	4ba3      	ldr	r3, [pc, #652]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d00c      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fba:	4ba0      	ldr	r3, [pc, #640]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d112      	bne.n	8004fec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fc6:	4b9d      	ldr	r3, [pc, #628]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd2:	d10b      	bne.n	8004fec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd4:	4b99      	ldr	r3, [pc, #612]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d036      	beq.n	800504e <HAL_RCC_OscConfig+0xbe>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d132      	bne.n	800504e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e212      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	4b93      	ldr	r3, [pc, #588]	; (8005240 <HAL_RCC_OscConfig+0x2b0>)
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d013      	beq.n	8005026 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffe:	f7fc ffcf 	bl	8001fa0 <HAL_GetTick>
 8005002:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005006:	f7fc ffcb 	bl	8001fa0 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b64      	cmp	r3, #100	; 0x64
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e1fc      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005018:	4b88      	ldr	r3, [pc, #544]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x76>
 8005024:	e014      	b.n	8005050 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005026:	f7fc ffbb 	bl	8001fa0 <HAL_GetTick>
 800502a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800502e:	f7fc ffb7 	bl	8001fa0 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b64      	cmp	r3, #100	; 0x64
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e1e8      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005040:	4b7e      	ldr	r3, [pc, #504]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f0      	bne.n	800502e <HAL_RCC_OscConfig+0x9e>
 800504c:	e000      	b.n	8005050 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800504e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d077      	beq.n	800514c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800505c:	4b77      	ldr	r3, [pc, #476]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 030c 	and.w	r3, r3, #12
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005068:	4b74      	ldr	r3, [pc, #464]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005070:	2b08      	cmp	r3, #8
 8005072:	d126      	bne.n	80050c2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005074:	4b71      	ldr	r3, [pc, #452]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d120      	bne.n	80050c2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005080:	4b6e      	ldr	r3, [pc, #440]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_RCC_OscConfig+0x108>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d001      	beq.n	8005098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e1bc      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005098:	4b68      	ldr	r3, [pc, #416]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	21f8      	movs	r1, #248	; 0xf8
 80050a6:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a8:	69b9      	ldr	r1, [r7, #24]
 80050aa:	fa91 f1a1 	rbit	r1, r1
 80050ae:	6179      	str	r1, [r7, #20]
  return result;
 80050b0:	6979      	ldr	r1, [r7, #20]
 80050b2:	fab1 f181 	clz	r1, r1
 80050b6:	b2c9      	uxtb	r1, r1
 80050b8:	408b      	lsls	r3, r1
 80050ba:	4960      	ldr	r1, [pc, #384]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c0:	e044      	b.n	800514c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d02a      	beq.n	8005120 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050ca:	4b5e      	ldr	r3, [pc, #376]	; (8005244 <HAL_RCC_OscConfig+0x2b4>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7fc ff66 	bl	8001fa0 <HAL_GetTick>
 80050d4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d8:	f7fc ff62 	bl	8001fa0 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e193      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ea:	4b54      	ldr	r3, [pc, #336]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f6:	4b51      	ldr	r3, [pc, #324]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	21f8      	movs	r1, #248	; 0xf8
 8005104:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005106:	6939      	ldr	r1, [r7, #16]
 8005108:	fa91 f1a1 	rbit	r1, r1
 800510c:	60f9      	str	r1, [r7, #12]
  return result;
 800510e:	68f9      	ldr	r1, [r7, #12]
 8005110:	fab1 f181 	clz	r1, r1
 8005114:	b2c9      	uxtb	r1, r1
 8005116:	408b      	lsls	r3, r1
 8005118:	4948      	ldr	r1, [pc, #288]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800511a:	4313      	orrs	r3, r2
 800511c:	600b      	str	r3, [r1, #0]
 800511e:	e015      	b.n	800514c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005120:	4b48      	ldr	r3, [pc, #288]	; (8005244 <HAL_RCC_OscConfig+0x2b4>)
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005126:	f7fc ff3b 	bl	8001fa0 <HAL_GetTick>
 800512a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800512e:	f7fc ff37 	bl	8001fa0 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e168      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005140:	4b3e      	ldr	r3, [pc, #248]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1f0      	bne.n	800512e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d030      	beq.n	80051ba <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d016      	beq.n	800518e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005160:	4b39      	ldr	r3, [pc, #228]	; (8005248 <HAL_RCC_OscConfig+0x2b8>)
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005166:	f7fc ff1b 	bl	8001fa0 <HAL_GetTick>
 800516a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800516e:	f7fc ff17 	bl	8001fa0 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e148      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005180:	4b2e      	ldr	r3, [pc, #184]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <HAL_RCC_OscConfig+0x1de>
 800518c:	e015      	b.n	80051ba <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800518e:	4b2e      	ldr	r3, [pc, #184]	; (8005248 <HAL_RCC_OscConfig+0x2b8>)
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005194:	f7fc ff04 	bl	8001fa0 <HAL_GetTick>
 8005198:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800519c:	f7fc ff00 	bl	8001fa0 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e131      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ae:	4b23      	ldr	r3, [pc, #140]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1f0      	bne.n	800519c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 8088 	beq.w	80052d8 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ce:	4b1b      	ldr	r3, [pc, #108]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d110      	bne.n	80051fc <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051da:	2300      	movs	r3, #0
 80051dc:	60bb      	str	r3, [r7, #8]
 80051de:	4b17      	ldr	r3, [pc, #92]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	4a16      	ldr	r2, [pc, #88]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80051e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ea:	4b14      	ldr	r3, [pc, #80]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051fc:	4b13      	ldr	r3, [pc, #76]	; (800524c <HAL_RCC_OscConfig+0x2bc>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a12      	ldr	r2, [pc, #72]	; (800524c <HAL_RCC_OscConfig+0x2bc>)
 8005202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005206:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	4b10      	ldr	r3, [pc, #64]	; (800524c <HAL_RCC_OscConfig+0x2bc>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d123      	bne.n	800525c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005214:	4b0d      	ldr	r3, [pc, #52]	; (800524c <HAL_RCC_OscConfig+0x2bc>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a0c      	ldr	r2, [pc, #48]	; (800524c <HAL_RCC_OscConfig+0x2bc>)
 800521a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800521e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005220:	f7fc febe 	bl	8001fa0 <HAL_GetTick>
 8005224:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005226:	e013      	b.n	8005250 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005228:	f7fc feba 	bl	8001fa0 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d90c      	bls.n	8005250 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e0eb      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
 800523a:	bf00      	nop
 800523c:	40023800 	.word	0x40023800
 8005240:	40023802 	.word	0x40023802
 8005244:	42470000 	.word	0x42470000
 8005248:	42470e80 	.word	0x42470e80
 800524c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005250:	4b72      	ldr	r3, [pc, #456]	; (800541c <HAL_RCC_OscConfig+0x48c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0e5      	beq.n	8005228 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	4b6f      	ldr	r3, [pc, #444]	; (8005420 <HAL_RCC_OscConfig+0x490>)
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d015      	beq.n	800529a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800526e:	f7fc fe97 	bl	8001fa0 <HAL_GetTick>
 8005272:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005274:	e00a      	b.n	800528c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005276:	f7fc fe93 	bl	8001fa0 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	f241 3288 	movw	r2, #5000	; 0x1388
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e0c2      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528c:	4b65      	ldr	r3, [pc, #404]	; (8005424 <HAL_RCC_OscConfig+0x494>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0ee      	beq.n	8005276 <HAL_RCC_OscConfig+0x2e6>
 8005298:	e014      	b.n	80052c4 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529a:	f7fc fe81 	bl	8001fa0 <HAL_GetTick>
 800529e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a0:	e00a      	b.n	80052b8 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a2:	f7fc fe7d 	bl	8001fa0 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e0ac      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b8:	4b5a      	ldr	r3, [pc, #360]	; (8005424 <HAL_RCC_OscConfig+0x494>)
 80052ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1ee      	bne.n	80052a2 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d105      	bne.n	80052d8 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052cc:	4b55      	ldr	r3, [pc, #340]	; (8005424 <HAL_RCC_OscConfig+0x494>)
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	4a54      	ldr	r2, [pc, #336]	; (8005424 <HAL_RCC_OscConfig+0x494>)
 80052d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8097 	beq.w	8005410 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052e2:	4b50      	ldr	r3, [pc, #320]	; (8005424 <HAL_RCC_OscConfig+0x494>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d061      	beq.n	80053b2 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d146      	bne.n	8005384 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f6:	4b4c      	ldr	r3, [pc, #304]	; (8005428 <HAL_RCC_OscConfig+0x498>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fc:	f7fc fe50 	bl	8001fa0 <HAL_GetTick>
 8005300:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005304:	f7fc fe4c 	bl	8001fa0 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b64      	cmp	r3, #100	; 0x64
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e07d      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005316:	4b43      	ldr	r3, [pc, #268]	; (8005424 <HAL_RCC_OscConfig+0x494>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f0      	bne.n	8005304 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005322:	4b40      	ldr	r3, [pc, #256]	; (8005424 <HAL_RCC_OscConfig+0x494>)
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	4b41      	ldr	r3, [pc, #260]	; (800542c <HAL_RCC_OscConfig+0x49c>)
 8005328:	4013      	ands	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	69d1      	ldr	r1, [r2, #28]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6a12      	ldr	r2, [r2, #32]
 8005332:	4311      	orrs	r1, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005338:	0192      	lsls	r2, r2, #6
 800533a:	4311      	orrs	r1, r2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005340:	0612      	lsls	r2, r2, #24
 8005342:	4311      	orrs	r1, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005348:	0852      	lsrs	r2, r2, #1
 800534a:	3a01      	subs	r2, #1
 800534c:	0412      	lsls	r2, r2, #16
 800534e:	430a      	orrs	r2, r1
 8005350:	4934      	ldr	r1, [pc, #208]	; (8005424 <HAL_RCC_OscConfig+0x494>)
 8005352:	4313      	orrs	r3, r2
 8005354:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005356:	4b34      	ldr	r3, [pc, #208]	; (8005428 <HAL_RCC_OscConfig+0x498>)
 8005358:	2201      	movs	r2, #1
 800535a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535c:	f7fc fe20 	bl	8001fa0 <HAL_GetTick>
 8005360:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005364:	f7fc fe1c 	bl	8001fa0 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e04d      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005376:	4b2b      	ldr	r3, [pc, #172]	; (8005424 <HAL_RCC_OscConfig+0x494>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f0      	beq.n	8005364 <HAL_RCC_OscConfig+0x3d4>
 8005382:	e045      	b.n	8005410 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005384:	4b28      	ldr	r3, [pc, #160]	; (8005428 <HAL_RCC_OscConfig+0x498>)
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538a:	f7fc fe09 	bl	8001fa0 <HAL_GetTick>
 800538e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005392:	f7fc fe05 	bl	8001fa0 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b64      	cmp	r3, #100	; 0x64
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e036      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a4:	4b1f      	ldr	r3, [pc, #124]	; (8005424 <HAL_RCC_OscConfig+0x494>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f0      	bne.n	8005392 <HAL_RCC_OscConfig+0x402>
 80053b0:	e02e      	b.n	8005410 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e029      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80053be:	4b19      	ldr	r3, [pc, #100]	; (8005424 <HAL_RCC_OscConfig+0x494>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d11c      	bne.n	800540c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053dc:	429a      	cmp	r2, r3
 80053de:	d115      	bne.n	800540c <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	099b      	lsrs	r3, r3, #6
 80053e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d10d      	bne.n	800540c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d106      	bne.n	800540c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005408:	429a      	cmp	r2, r3
 800540a:	d001      	beq.n	8005410 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3728      	adds	r7, #40	; 0x28
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40007000 	.word	0x40007000
 8005420:	40023870 	.word	0x40023870
 8005424:	40023800 	.word	0x40023800
 8005428:	42470060 	.word	0x42470060
 800542c:	f0bc8000 	.word	0xf0bc8000

08005430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0d2      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005444:	4b6b      	ldr	r3, [pc, #428]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d90c      	bls.n	800546c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005452:	4b68      	ldr	r3, [pc, #416]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800545a:	4b66      	ldr	r3, [pc, #408]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d001      	beq.n	800546c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0be      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d020      	beq.n	80054ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005484:	4b5c      	ldr	r3, [pc, #368]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4a5b      	ldr	r2, [pc, #364]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 800548a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800548e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800549c:	4b56      	ldr	r3, [pc, #344]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4a55      	ldr	r2, [pc, #340]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a8:	4b53      	ldr	r3, [pc, #332]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	4950      	ldr	r1, [pc, #320]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d040      	beq.n	8005548 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d107      	bne.n	80054de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ce:	4b4a      	ldr	r3, [pc, #296]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d115      	bne.n	8005506 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e085      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d107      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e6:	4b44      	ldr	r3, [pc, #272]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e079      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f6:	4b40      	ldr	r3, [pc, #256]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e071      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005506:	4b3c      	ldr	r3, [pc, #240]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f023 0203 	bic.w	r2, r3, #3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4939      	ldr	r1, [pc, #228]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005514:	4313      	orrs	r3, r2
 8005516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005518:	f7fc fd42 	bl	8001fa0 <HAL_GetTick>
 800551c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551e:	e00a      	b.n	8005536 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005520:	f7fc fd3e 	bl	8001fa0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	; 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e059      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005536:	4b30      	ldr	r3, [pc, #192]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 020c 	and.w	r2, r3, #12
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	429a      	cmp	r2, r3
 8005546:	d1eb      	bne.n	8005520 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005548:	4b2a      	ldr	r3, [pc, #168]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d20c      	bcs.n	8005570 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800555e:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d001      	beq.n	8005570 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e03c      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800557c:	4b1e      	ldr	r3, [pc, #120]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	491b      	ldr	r1, [pc, #108]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800559a:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4913      	ldr	r1, [pc, #76]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80055ae:	f000 f82b 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 80055b2:	4601      	mov	r1, r0
 80055b4:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055bc:	22f0      	movs	r2, #240	; 0xf0
 80055be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	fa92 f2a2 	rbit	r2, r2
 80055c6:	60fa      	str	r2, [r7, #12]
  return result;
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	fab2 f282 	clz	r2, r2
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	40d3      	lsrs	r3, r2
 80055d2:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <HAL_RCC_ClockConfig+0x1cc>)
 80055d4:	5cd3      	ldrb	r3, [r2, r3]
 80055d6:	fa21 f303 	lsr.w	r3, r1, r3
 80055da:	4a09      	ldr	r2, [pc, #36]	; (8005600 <HAL_RCC_ClockConfig+0x1d0>)
 80055dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055de:	4b09      	ldr	r3, [pc, #36]	; (8005604 <HAL_RCC_ClockConfig+0x1d4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fc fb0c 	bl	8001c00 <HAL_InitTick>

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40023c00 	.word	0x40023c00
 80055f8:	40023800 	.word	0x40023800
 80055fc:	0800f840 	.word	0x0800f840
 8005600:	2000000c 	.word	0x2000000c
 8005604:	20000010 	.word	0x20000010

08005608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005608:	b5b0      	push	{r4, r5, r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800560e:	2100      	movs	r1, #0
 8005610:	6079      	str	r1, [r7, #4]
 8005612:	2100      	movs	r1, #0
 8005614:	60f9      	str	r1, [r7, #12]
 8005616:	2100      	movs	r1, #0
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800561a:	2100      	movs	r1, #0
 800561c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800561e:	4952      	ldr	r1, [pc, #328]	; (8005768 <HAL_RCC_GetSysClockFreq+0x160>)
 8005620:	6889      	ldr	r1, [r1, #8]
 8005622:	f001 010c 	and.w	r1, r1, #12
 8005626:	2908      	cmp	r1, #8
 8005628:	d00d      	beq.n	8005646 <HAL_RCC_GetSysClockFreq+0x3e>
 800562a:	2908      	cmp	r1, #8
 800562c:	f200 8094 	bhi.w	8005758 <HAL_RCC_GetSysClockFreq+0x150>
 8005630:	2900      	cmp	r1, #0
 8005632:	d002      	beq.n	800563a <HAL_RCC_GetSysClockFreq+0x32>
 8005634:	2904      	cmp	r1, #4
 8005636:	d003      	beq.n	8005640 <HAL_RCC_GetSysClockFreq+0x38>
 8005638:	e08e      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800563a:	4b4c      	ldr	r3, [pc, #304]	; (800576c <HAL_RCC_GetSysClockFreq+0x164>)
 800563c:	60bb      	str	r3, [r7, #8]
       break;
 800563e:	e08e      	b.n	800575e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005640:	4b4b      	ldr	r3, [pc, #300]	; (8005770 <HAL_RCC_GetSysClockFreq+0x168>)
 8005642:	60bb      	str	r3, [r7, #8]
      break;
 8005644:	e08b      	b.n	800575e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005646:	4948      	ldr	r1, [pc, #288]	; (8005768 <HAL_RCC_GetSysClockFreq+0x160>)
 8005648:	6849      	ldr	r1, [r1, #4]
 800564a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800564e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005650:	4945      	ldr	r1, [pc, #276]	; (8005768 <HAL_RCC_GetSysClockFreq+0x160>)
 8005652:	6849      	ldr	r1, [r1, #4]
 8005654:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005658:	2900      	cmp	r1, #0
 800565a:	d024      	beq.n	80056a6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800565c:	4942      	ldr	r1, [pc, #264]	; (8005768 <HAL_RCC_GetSysClockFreq+0x160>)
 800565e:	6849      	ldr	r1, [r1, #4]
 8005660:	0989      	lsrs	r1, r1, #6
 8005662:	4608      	mov	r0, r1
 8005664:	f04f 0100 	mov.w	r1, #0
 8005668:	f240 14ff 	movw	r4, #511	; 0x1ff
 800566c:	f04f 0500 	mov.w	r5, #0
 8005670:	ea00 0204 	and.w	r2, r0, r4
 8005674:	ea01 0305 	and.w	r3, r1, r5
 8005678:	493d      	ldr	r1, [pc, #244]	; (8005770 <HAL_RCC_GetSysClockFreq+0x168>)
 800567a:	fb01 f003 	mul.w	r0, r1, r3
 800567e:	2100      	movs	r1, #0
 8005680:	fb01 f102 	mul.w	r1, r1, r2
 8005684:	1844      	adds	r4, r0, r1
 8005686:	493a      	ldr	r1, [pc, #232]	; (8005770 <HAL_RCC_GetSysClockFreq+0x168>)
 8005688:	fba2 0101 	umull	r0, r1, r2, r1
 800568c:	1863      	adds	r3, r4, r1
 800568e:	4619      	mov	r1, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	461a      	mov	r2, r3
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	f7fb faa6 	bl	8000be8 <__aeabi_uldivmod>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4613      	mov	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e04a      	b.n	800573c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a6:	4b30      	ldr	r3, [pc, #192]	; (8005768 <HAL_RCC_GetSysClockFreq+0x160>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	099b      	lsrs	r3, r3, #6
 80056ac:	461a      	mov	r2, r3
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80056b6:	f04f 0100 	mov.w	r1, #0
 80056ba:	ea02 0400 	and.w	r4, r2, r0
 80056be:	ea03 0501 	and.w	r5, r3, r1
 80056c2:	4620      	mov	r0, r4
 80056c4:	4629      	mov	r1, r5
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	014b      	lsls	r3, r1, #5
 80056d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80056d4:	0142      	lsls	r2, r0, #5
 80056d6:	4610      	mov	r0, r2
 80056d8:	4619      	mov	r1, r3
 80056da:	1b00      	subs	r0, r0, r4
 80056dc:	eb61 0105 	sbc.w	r1, r1, r5
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	f04f 0300 	mov.w	r3, #0
 80056e8:	018b      	lsls	r3, r1, #6
 80056ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80056ee:	0182      	lsls	r2, r0, #6
 80056f0:	1a12      	subs	r2, r2, r0
 80056f2:	eb63 0301 	sbc.w	r3, r3, r1
 80056f6:	f04f 0000 	mov.w	r0, #0
 80056fa:	f04f 0100 	mov.w	r1, #0
 80056fe:	00d9      	lsls	r1, r3, #3
 8005700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005704:	00d0      	lsls	r0, r2, #3
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	1912      	adds	r2, r2, r4
 800570c:	eb45 0303 	adc.w	r3, r5, r3
 8005710:	f04f 0000 	mov.w	r0, #0
 8005714:	f04f 0100 	mov.w	r1, #0
 8005718:	0299      	lsls	r1, r3, #10
 800571a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800571e:	0290      	lsls	r0, r2, #10
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4610      	mov	r0, r2
 8005726:	4619      	mov	r1, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	461a      	mov	r2, r3
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	f7fb fa5a 	bl	8000be8 <__aeabi_uldivmod>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4613      	mov	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800573c:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <HAL_RCC_GetSysClockFreq+0x160>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	0c1b      	lsrs	r3, r3, #16
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	3301      	adds	r3, #1
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	fbb2 f3f3 	udiv	r3, r2, r3
 8005754:	60bb      	str	r3, [r7, #8]
      break;
 8005756:	e002      	b.n	800575e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005758:	4b04      	ldr	r3, [pc, #16]	; (800576c <HAL_RCC_GetSysClockFreq+0x164>)
 800575a:	60bb      	str	r3, [r7, #8]
      break;
 800575c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800575e:	68bb      	ldr	r3, [r7, #8]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bdb0      	pop	{r4, r5, r7, pc}
 8005768:	40023800 	.word	0x40023800
 800576c:	00f42400 	.word	0x00f42400
 8005770:	017d7840 	.word	0x017d7840

08005774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005778:	4b02      	ldr	r3, [pc, #8]	; (8005784 <HAL_RCC_GetHCLKFreq+0x10>)
 800577a:	681b      	ldr	r3, [r3, #0]
}
 800577c:	4618      	mov	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr
 8005784:	2000000c 	.word	0x2000000c

08005788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800578e:	f7ff fff1 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 8005792:	4601      	mov	r1, r0
 8005794:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800579c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80057a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	fa92 f2a2 	rbit	r2, r2
 80057a8:	603a      	str	r2, [r7, #0]
  return result;
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	fab2 f282 	clz	r2, r2
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	40d3      	lsrs	r3, r2
 80057b4:	4a04      	ldr	r2, [pc, #16]	; (80057c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80057b6:	5cd3      	ldrb	r3, [r2, r3]
 80057b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40023800 	.word	0x40023800
 80057c8:	0800f850 	.word	0x0800f850

080057cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80057d2:	f7ff ffcf 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 80057d6:	4601      	mov	r1, r0
 80057d8:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80057e0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80057e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	fa92 f2a2 	rbit	r2, r2
 80057ec:	603a      	str	r2, [r7, #0]
  return result;
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	fab2 f282 	clz	r2, r2
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	40d3      	lsrs	r3, r2
 80057f8:	4a04      	ldr	r2, [pc, #16]	; (800580c <HAL_RCC_GetPCLK2Freq+0x40>)
 80057fa:	5cd3      	ldrb	r3, [r2, r3]
 80057fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40023800 	.word	0x40023800
 800580c:	0800f850 	.word	0x0800f850

08005810 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	220f      	movs	r2, #15
 800581e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <HAL_RCC_GetClockConfig+0x58>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f003 0203 	and.w	r2, r3, #3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800582c:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <HAL_RCC_GetClockConfig+0x58>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005838:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <HAL_RCC_GetClockConfig+0x58>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005844:	4b08      	ldr	r3, [pc, #32]	; (8005868 <HAL_RCC_GetClockConfig+0x58>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	08db      	lsrs	r3, r3, #3
 800584a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <HAL_RCC_GetClockConfig+0x5c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 020f 	and.w	r2, r3, #15
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	601a      	str	r2, [r3, #0]
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr
 8005868:	40023800 	.word	0x40023800
 800586c:	40023c00 	.word	0x40023c00

08005870 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08a      	sub	sp, #40	; 0x28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d103      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8005890:	2b08      	cmp	r3, #8
 8005892:	d14c      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005894:	4b6d      	ldr	r3, [pc, #436]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800589a:	f7fc fb81 	bl	8001fa0 <HAL_GetTick>
 800589e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058a2:	f7fc fb7d 	bl	8001fa0 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e0c7      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058b4:	4b66      	ldr	r3, [pc, #408]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f0      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80058c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	fa92 f2a2 	rbit	r2, r2
 80058d0:	613a      	str	r2, [r7, #16]
  return result;
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	fab2 f282 	clz	r2, r2
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	fa03 f202 	lsl.w	r2, r3, r2
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80058e6:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e8:	69f9      	ldr	r1, [r7, #28]
 80058ea:	fa91 f1a1 	rbit	r1, r1
 80058ee:	61b9      	str	r1, [r7, #24]
  return result;
 80058f0:	69b9      	ldr	r1, [r7, #24]
 80058f2:	fab1 f181 	clz	r1, r1
 80058f6:	b2c9      	uxtb	r1, r1
 80058f8:	408b      	lsls	r3, r1
 80058fa:	4955      	ldr	r1, [pc, #340]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005902:	4b52      	ldr	r3, [pc, #328]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005904:	2201      	movs	r2, #1
 8005906:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005908:	f7fc fb4a 	bl	8001fa0 <HAL_GetTick>
 800590c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005910:	f7fc fb46 	bl	8001fa0 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e090      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005922:	4b4b      	ldr	r3, [pc, #300]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0f0      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 8083 	beq.w	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	4b43      	ldr	r3, [pc, #268]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	4a42      	ldr	r2, [pc, #264]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594a:	6413      	str	r3, [r2, #64]	; 0x40
 800594c:	4b40      	ldr	r3, [pc, #256]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005958:	4b3e      	ldr	r3, [pc, #248]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a3d      	ldr	r2, [pc, #244]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800595e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005962:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8005964:	f7fc fb1c 	bl	8001fa0 <HAL_GetTick>
 8005968:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800596a:	e008      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800596c:	f7fc fb18 	bl	8001fa0 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e062      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800597e:	4b35      	ldr	r3, [pc, #212]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f0      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800598a:	4b31      	ldr	r3, [pc, #196]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005992:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d02f      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a2:	6a3a      	ldr	r2, [r7, #32]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d028      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059a8:	4b29      	ldr	r3, [pc, #164]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b0:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059b2:	4b29      	ldr	r3, [pc, #164]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80059b4:	2201      	movs	r2, #1
 80059b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059b8:	4b27      	ldr	r3, [pc, #156]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059be:	4a24      	ldr	r2, [pc, #144]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059c4:	4b22      	ldr	r3, [pc, #136]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d114      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059d0:	f7fc fae6 	bl	8001fa0 <HAL_GetTick>
 80059d4:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d6:	e00a      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d8:	f7fc fae2 	bl	8001fa0 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d901      	bls.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e02a      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ee:	4b18      	ldr	r3, [pc, #96]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0ee      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a06:	d10d      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1c:	490c      	ldr	r1, [pc, #48]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	608b      	str	r3, [r1, #8]
 8005a22:	e005      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005a24:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	4a09      	ldr	r2, [pc, #36]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a2e:	6093      	str	r3, [r2, #8]
 8005a30:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a3c:	4904      	ldr	r1, [pc, #16]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3728      	adds	r7, #40	; 0x28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	42470068 	.word	0x42470068
 8005a50:	40023800 	.word	0x40023800
 8005a54:	40007000 	.word	0x40007000
 8005a58:	42470e40 	.word	0x42470e40

08005a5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e07c      	b.n	8005b68 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	7f5b      	ldrb	r3, [r3, #29]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d105      	bne.n	8005a84 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fb ff62 	bl	8001948 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	22ca      	movs	r2, #202	; 0xca
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2253      	movs	r2, #83	; 0x53
 8005a98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 faec 	bl	8006078 <RTC_EnterInitMode>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d008      	beq.n	8005ab8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	22ff      	movs	r2, #255	; 0xff
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e057      	b.n	8005b68 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6899      	ldr	r1, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	68d2      	ldr	r2, [r2, #12]
 8005af2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6919      	ldr	r1, [r3, #16]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	041a      	lsls	r2, r3, #16
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b16:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fa85 	bl	8006028 <HAL_RTC_WaitForSynchro>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	22ff      	movs	r2, #255	; 0xff
 8005b2a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2204      	movs	r2, #4
 8005b30:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e018      	b.n	8005b68 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b44:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699a      	ldr	r2, [r3, #24]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	22ff      	movs	r2, #255	; 0xff
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005b66:	2300      	movs	r3, #0
  }
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	7f1b      	ldrb	r3, [r3, #28]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_RTC_SetTime+0x1c>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e0a3      	b.n	8005cd4 <HAL_RTC_SetTime+0x164>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2202      	movs	r2, #2
 8005b96:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d126      	bne.n	8005bec <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d102      	bne.n	8005bb2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fa8a 	bl	80060d0 <RTC_ByteToBcd2>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fa83 	bl	80060d0 <RTC_ByteToBcd2>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005bce:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	789b      	ldrb	r3, [r3, #2]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fa7b 	bl	80060d0 <RTC_ByteToBcd2>
 8005bda:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005bdc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	78db      	ldrb	r3, [r3, #3]
 8005be4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	e018      	b.n	8005c1e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c0c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c12:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	78db      	ldrb	r3, [r3, #3]
 8005c18:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	22ca      	movs	r2, #202	; 0xca
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2253      	movs	r2, #83	; 0x53
 8005c2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fa22 	bl	8006078 <RTC_EnterInitMode>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	22ff      	movs	r2, #255	; 0xff
 8005c40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2204      	movs	r2, #4
 8005c46:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e040      	b.n	8005cd4 <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c5c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c60:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c70:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6899      	ldr	r1, [r3, #8]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	431a      	orrs	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c98:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 f9c4 	bl	8006028 <HAL_RTC_WaitForSynchro>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00b      	beq.n	8005cbe <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	22ff      	movs	r2, #255	; 0xff
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2204      	movs	r2, #4
 8005cb2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e00a      	b.n	8005cd4 <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	22ff      	movs	r2, #255	; 0xff
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
  }
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd90      	pop	{r4, r7, pc}

08005cdc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cdc:	b590      	push	{r4, r7, lr}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	7f1b      	ldrb	r3, [r3, #28]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_RTC_SetDate+0x1c>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e08d      	b.n	8005e14 <HAL_RTC_SetDate+0x138>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2202      	movs	r2, #2
 8005d02:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10e      	bne.n	8005d28 <HAL_RTC_SetDate+0x4c>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d008      	beq.n	8005d28 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	785b      	ldrb	r3, [r3, #1]
 8005d1a:	f023 0310 	bic.w	r3, r3, #16
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	330a      	adds	r3, #10
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d11c      	bne.n	8005d68 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	78db      	ldrb	r3, [r3, #3]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f9cc 	bl	80060d0 <RTC_ByteToBcd2>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 f9c5 	bl	80060d0 <RTC_ByteToBcd2>
 8005d46:	4603      	mov	r3, r0
 8005d48:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d4a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	789b      	ldrb	r3, [r3, #2]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 f9bd 	bl	80060d0 <RTC_ByteToBcd2>
 8005d56:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005d58:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	e00e      	b.n	8005d86 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	78db      	ldrb	r3, [r3, #3]
 8005d6c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	785b      	ldrb	r3, [r3, #1]
 8005d72:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d74:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005d7a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	22ca      	movs	r2, #202	; 0xca
 8005d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2253      	movs	r2, #83	; 0x53
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f96e 	bl	8006078 <RTC_EnterInitMode>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	22ff      	movs	r2, #255	; 0xff
 8005da8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2204      	movs	r2, #4
 8005dae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e02c      	b.n	8005e14 <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005dc4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005dc8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dd8:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 f924 	bl	8006028 <HAL_RTC_WaitForSynchro>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00b      	beq.n	8005dfe <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	22ff      	movs	r2, #255	; 0xff
 8005dec:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2204      	movs	r2, #4
 8005df2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e00a      	b.n	8005e14 <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	22ff      	movs	r2, #255	; 0xff
 8005e04:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005e12:	2300      	movs	r3, #0
  }
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	371c      	adds	r7, #28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd90      	pop	{r4, r7, pc}

08005e1c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005e1c:	b590      	push	{r4, r7, lr}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	7f1b      	ldrb	r3, [r3, #28]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_RTC_SetAlarm+0x20>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e0f1      	b.n	8006020 <HAL_RTC_SetAlarm+0x204>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2202      	movs	r2, #2
 8005e46:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d136      	bne.n	8005ebc <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d102      	bne.n	8005e62 <HAL_RTC_SetAlarm+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 f932 	bl	80060d0 <RTC_ByteToBcd2>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	785b      	ldrb	r3, [r3, #1]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 f92b 	bl	80060d0 <RTC_ByteToBcd2>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e7e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	789b      	ldrb	r3, [r3, #2]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 f923 	bl	80060d0 <RTC_ByteToBcd2>
 8005e8a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e8c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	78db      	ldrb	r3, [r3, #3]
 8005e94:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005e96:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	7d1b      	ldrb	r3, [r3, #20]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 f916 	bl	80060d0 <RTC_ByteToBcd2>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005ea8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005eb0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	e022      	b.n	8005f02 <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	785b      	ldrb	r3, [r3, #1]
 8005eda:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005edc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005ee2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	78db      	ldrb	r3, [r3, #3]
 8005ee8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005eea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	7d1b      	ldrb	r3, [r3, #20]
 8005ef0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005ef2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005ef8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	22ca      	movs	r2, #202	; 0xca
 8005f08:	625a      	str	r2, [r3, #36]	; 0x24
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2253      	movs	r2, #83	; 0x53
 8005f10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f1a:	d13b      	bne.n	8005f94 <HAL_RTC_SetAlarm+0x178>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f2a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f3a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f3c:	f7fc f830 	bl	8001fa0 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005f42:	e013      	b.n	8005f6c <HAL_RTC_SetAlarm+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f44:	f7fc f82c 	bl	8001fa0 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f52:	d90b      	bls.n	8005f6c <HAL_RTC_SetAlarm+0x150>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	22ff      	movs	r2, #255	; 0xff
 8005f5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2203      	movs	r2, #3
 8005f60:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e059      	b.n	8006020 <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0e4      	beq.n	8005f44 <HAL_RTC_SetAlarm+0x128>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f90:	609a      	str	r2, [r3, #8]
 8005f92:	e03a      	b.n	800600a <HAL_RTC_SetAlarm+0x1ee>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005fa2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fb2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fb4:	f7fb fff4 	bl	8001fa0 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005fba:	e013      	b.n	8005fe4 <HAL_RTC_SetAlarm+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fbc:	f7fb fff0 	bl	8001fa0 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fca:	d90b      	bls.n	8005fe4 <HAL_RTC_SetAlarm+0x1c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	22ff      	movs	r2, #255	; 0xff
 8005fd2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e01d      	b.n	8006020 <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0e4      	beq.n	8005fbc <HAL_RTC_SetAlarm+0x1a0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006008:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	22ff      	movs	r2, #255	; 0xff
 8006010:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	bd90      	pop	{r4, r7, pc}

08006028 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006042:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006044:	f7fb ffac 	bl	8001fa0 <HAL_GetTick>
 8006048:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800604a:	e009      	b.n	8006060 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800604c:	f7fb ffa8 	bl	8001fa0 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800605a:	d901      	bls.n	8006060 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e007      	b.n	8006070 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0ee      	beq.n	800604c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	d119      	bne.n	80060c6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f04f 32ff 	mov.w	r2, #4294967295
 800609a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800609c:	f7fb ff80 	bl	8001fa0 <HAL_GetTick>
 80060a0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060a2:	e009      	b.n	80060b8 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060a4:	f7fb ff7c 	bl	8001fa0 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060b2:	d901      	bls.n	80060b8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e007      	b.n	80060c8 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0ee      	beq.n	80060a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 80060de:	e005      	b.n	80060ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3301      	adds	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80060e6:	79fb      	ldrb	r3, [r7, #7]
 80060e8:	3b0a      	subs	r3, #10
 80060ea:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	2b09      	cmp	r3, #9
 80060f0:	d8f6      	bhi.n	80060e0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	b2db      	uxtb	r3, r3
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	bc80      	pop	{r7}
 8006108:	4770      	bx	lr

0800610a <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b086      	sub	sp, #24
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	7f1b      	ldrb	r3, [r3, #28]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8006122:	2302      	movs	r3, #2
 8006124:	e081      	b.n	800622a <HAL_RTCEx_SetWakeUpTimer+0x120>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2202      	movs	r2, #2
 8006130:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	22ca      	movs	r2, #202	; 0xca
 8006138:	625a      	str	r2, [r3, #36]	; 0x24
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2253      	movs	r2, #83	; 0x53
 8006140:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01e      	beq.n	800618e <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8006150:	f7fb ff26 	bl	8001fa0 <HAL_GetTick>
 8006154:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8006156:	e013      	b.n	8006180 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006158:	f7fb ff22 	bl	8001fa0 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006166:	d90b      	bls.n	8006180 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	22ff      	movs	r2, #255	; 0xff
 800616e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2203      	movs	r2, #3
 8006174:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e054      	b.n	800622a <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f003 0304 	and.w	r3, r3, #4
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e4      	bne.n	8006158 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619c:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800619e:	f7fb feff 	bl	8001fa0 <HAL_GetTick>
 80061a2:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80061a4:	e013      	b.n	80061ce <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061a6:	f7fb fefb 	bl	8001fa0 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b4:	d90b      	bls.n	80061ce <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	22ff      	movs	r2, #255	; 0xff
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2203      	movs	r2, #3
 80061c2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e02d      	b.n	800622a <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0e4      	beq.n	80061a6 <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0207 	bic.w	r2, r2, #7
 80061ea:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6899      	ldr	r1, [r3, #8]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	615a      	str	r2, [r3, #20]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006212:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	22ff      	movs	r2, #255	; 0xff
 800621a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e041      	b.n	80062c8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d106      	bne.n	800625e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7fb fb8b 	bl	8001974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f000 fba1 	bl	80069b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d001      	beq.n	80062e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e04e      	b.n	8006386 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a22      	ldr	r2, [pc, #136]	; (8006390 <HAL_TIM_Base_Start_IT+0xc0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d022      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006312:	d01d      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1e      	ldr	r2, [pc, #120]	; (8006394 <HAL_TIM_Base_Start_IT+0xc4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d018      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1d      	ldr	r2, [pc, #116]	; (8006398 <HAL_TIM_Base_Start_IT+0xc8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d013      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1b      	ldr	r2, [pc, #108]	; (800639c <HAL_TIM_Base_Start_IT+0xcc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00e      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1a      	ldr	r2, [pc, #104]	; (80063a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d009      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a17      	ldr	r2, [pc, #92]	; (80063a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d111      	bne.n	8006374 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b06      	cmp	r3, #6
 8006360:	d010      	beq.n	8006384 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f042 0201 	orr.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006372:	e007      	b.n	8006384 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0201 	orr.w	r2, r2, #1
 8006382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr
 8006390:	40010000 	.word	0x40010000
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40010400 	.word	0x40010400
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40001800 	.word	0x40001800

080063ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e041      	b.n	8006442 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f839 	bl	800644a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f000 fae4 	bl	80069b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr

0800645c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b02      	cmp	r3, #2
 8006470:	d122      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b02      	cmp	r3, #2
 800647e:	d11b      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f06f 0202 	mvn.w	r2, #2
 8006488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa6f 	bl	8006982 <HAL_TIM_IC_CaptureCallback>
 80064a4:	e005      	b.n	80064b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fa62 	bl	8006970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fa71 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d122      	bne.n	800650c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d11b      	bne.n	800650c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0204 	mvn.w	r2, #4
 80064dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2202      	movs	r2, #2
 80064e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa45 	bl	8006982 <HAL_TIM_IC_CaptureCallback>
 80064f8:	e005      	b.n	8006506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fa38 	bl	8006970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fa47 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b08      	cmp	r3, #8
 8006518:	d122      	bne.n	8006560 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b08      	cmp	r3, #8
 8006526:	d11b      	bne.n	8006560 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0208 	mvn.w	r2, #8
 8006530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2204      	movs	r2, #4
 8006536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fa1b 	bl	8006982 <HAL_TIM_IC_CaptureCallback>
 800654c:	e005      	b.n	800655a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fa0e 	bl	8006970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fa1d 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b10      	cmp	r3, #16
 800656c:	d122      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b10      	cmp	r3, #16
 800657a:	d11b      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0210 	mvn.w	r2, #16
 8006584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2208      	movs	r2, #8
 800658a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f9f1 	bl	8006982 <HAL_TIM_IC_CaptureCallback>
 80065a0:	e005      	b.n	80065ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f9e4 	bl	8006970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f9f3 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d10e      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d107      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0201 	mvn.w	r2, #1
 80065d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fb f8f0 	bl	80017c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ea:	2b80      	cmp	r3, #128	; 0x80
 80065ec:	d10e      	bne.n	800660c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f8:	2b80      	cmp	r3, #128	; 0x80
 80065fa:	d107      	bne.n	800660c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fd8a 	bl	8007120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	d10e      	bne.n	8006638 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006624:	2b40      	cmp	r3, #64	; 0x40
 8006626:	d107      	bne.n	8006638 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f9b7 	bl	80069a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b20      	cmp	r3, #32
 8006644:	d10e      	bne.n	8006664 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b20      	cmp	r3, #32
 8006652:	d107      	bne.n	8006664 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f06f 0220 	mvn.w	r2, #32
 800665c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fd55 	bl	800710e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006664:	bf00      	nop
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006682:	2302      	movs	r3, #2
 8006684:	e0ac      	b.n	80067e0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b0c      	cmp	r3, #12
 8006692:	f200 809f 	bhi.w	80067d4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006696:	a201      	add	r2, pc, #4	; (adr r2, 800669c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669c:	080066d1 	.word	0x080066d1
 80066a0:	080067d5 	.word	0x080067d5
 80066a4:	080067d5 	.word	0x080067d5
 80066a8:	080067d5 	.word	0x080067d5
 80066ac:	08006711 	.word	0x08006711
 80066b0:	080067d5 	.word	0x080067d5
 80066b4:	080067d5 	.word	0x080067d5
 80066b8:	080067d5 	.word	0x080067d5
 80066bc:	08006753 	.word	0x08006753
 80066c0:	080067d5 	.word	0x080067d5
 80066c4:	080067d5 	.word	0x080067d5
 80066c8:	080067d5 	.word	0x080067d5
 80066cc:	08006793 	.word	0x08006793
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fa0c 	bl	8006af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	699a      	ldr	r2, [r3, #24]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0208 	orr.w	r2, r2, #8
 80066ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699a      	ldr	r2, [r3, #24]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0204 	bic.w	r2, r2, #4
 80066fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6999      	ldr	r1, [r3, #24]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	691a      	ldr	r2, [r3, #16]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	619a      	str	r2, [r3, #24]
      break;
 800670e:	e062      	b.n	80067d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fa5c 	bl	8006bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800672a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800673a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6999      	ldr	r1, [r3, #24]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	021a      	lsls	r2, r3, #8
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	619a      	str	r2, [r3, #24]
      break;
 8006750:	e041      	b.n	80067d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	4618      	mov	r0, r3
 800675a:	f000 faaf 	bl	8006cbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69da      	ldr	r2, [r3, #28]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f042 0208 	orr.w	r2, r2, #8
 800676c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69da      	ldr	r2, [r3, #28]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0204 	bic.w	r2, r2, #4
 800677c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69d9      	ldr	r1, [r3, #28]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	61da      	str	r2, [r3, #28]
      break;
 8006790:	e021      	b.n	80067d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	4618      	mov	r0, r3
 800679a:	f000 fb03 	bl	8006da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69da      	ldr	r2, [r3, #28]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69da      	ldr	r2, [r3, #28]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69d9      	ldr	r1, [r3, #28]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	021a      	lsls	r2, r3, #8
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	61da      	str	r2, [r3, #28]
      break;
 80067d2:	e000      	b.n	80067d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80067d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_TIM_ConfigClockSource+0x18>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e0b3      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x180>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800681e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006826:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006838:	d03e      	beq.n	80068b8 <HAL_TIM_ConfigClockSource+0xd0>
 800683a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800683e:	f200 8087 	bhi.w	8006950 <HAL_TIM_ConfigClockSource+0x168>
 8006842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006846:	f000 8085 	beq.w	8006954 <HAL_TIM_ConfigClockSource+0x16c>
 800684a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684e:	d87f      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x168>
 8006850:	2b70      	cmp	r3, #112	; 0x70
 8006852:	d01a      	beq.n	800688a <HAL_TIM_ConfigClockSource+0xa2>
 8006854:	2b70      	cmp	r3, #112	; 0x70
 8006856:	d87b      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x168>
 8006858:	2b60      	cmp	r3, #96	; 0x60
 800685a:	d050      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0x116>
 800685c:	2b60      	cmp	r3, #96	; 0x60
 800685e:	d877      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x168>
 8006860:	2b50      	cmp	r3, #80	; 0x50
 8006862:	d03c      	beq.n	80068de <HAL_TIM_ConfigClockSource+0xf6>
 8006864:	2b50      	cmp	r3, #80	; 0x50
 8006866:	d873      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x168>
 8006868:	2b40      	cmp	r3, #64	; 0x40
 800686a:	d058      	beq.n	800691e <HAL_TIM_ConfigClockSource+0x136>
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d86f      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x168>
 8006870:	2b30      	cmp	r3, #48	; 0x30
 8006872:	d064      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x156>
 8006874:	2b30      	cmp	r3, #48	; 0x30
 8006876:	d86b      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x168>
 8006878:	2b20      	cmp	r3, #32
 800687a:	d060      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x156>
 800687c:	2b20      	cmp	r3, #32
 800687e:	d867      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x168>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d05c      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x156>
 8006884:	2b10      	cmp	r3, #16
 8006886:	d05a      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006888:	e062      	b.n	8006950 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6899      	ldr	r1, [r3, #8]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f000 fb4e 	bl	8006f3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	609a      	str	r2, [r3, #8]
      break;
 80068b6:	e04e      	b.n	8006956 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	6899      	ldr	r1, [r3, #8]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f000 fb37 	bl	8006f3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068da:	609a      	str	r2, [r3, #8]
      break;
 80068dc:	e03b      	b.n	8006956 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	6859      	ldr	r1, [r3, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f000 faae 	bl	8006e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2150      	movs	r1, #80	; 0x50
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fb05 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 80068fc:	e02b      	b.n	8006956 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6859      	ldr	r1, [r3, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	461a      	mov	r2, r3
 800690c:	f000 facc 	bl	8006ea8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2160      	movs	r1, #96	; 0x60
 8006916:	4618      	mov	r0, r3
 8006918:	f000 faf5 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 800691c:	e01b      	b.n	8006956 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6859      	ldr	r1, [r3, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	461a      	mov	r2, r3
 800692c:	f000 fa8e 	bl	8006e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2140      	movs	r1, #64	; 0x40
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fae5 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 800693c:	e00b      	b.n	8006956 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4619      	mov	r1, r3
 8006948:	4610      	mov	r0, r2
 800694a:	f000 fadc 	bl	8006f06 <TIM_ITRx_SetConfig>
        break;
 800694e:	e002      	b.n	8006956 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006950:	bf00      	nop
 8006952:	e000      	b.n	8006956 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006954:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	bc80      	pop	{r7}
 8006980:	4770      	bx	lr

08006982 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr

08006994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bc80      	pop	{r7}
 80069a4:	4770      	bx	lr

080069a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr

080069b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a3f      	ldr	r2, [pc, #252]	; (8006ac8 <TIM_Base_SetConfig+0x110>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d013      	beq.n	80069f8 <TIM_Base_SetConfig+0x40>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d6:	d00f      	beq.n	80069f8 <TIM_Base_SetConfig+0x40>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a3c      	ldr	r2, [pc, #240]	; (8006acc <TIM_Base_SetConfig+0x114>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00b      	beq.n	80069f8 <TIM_Base_SetConfig+0x40>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a3b      	ldr	r2, [pc, #236]	; (8006ad0 <TIM_Base_SetConfig+0x118>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d007      	beq.n	80069f8 <TIM_Base_SetConfig+0x40>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a3a      	ldr	r2, [pc, #232]	; (8006ad4 <TIM_Base_SetConfig+0x11c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d003      	beq.n	80069f8 <TIM_Base_SetConfig+0x40>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a39      	ldr	r2, [pc, #228]	; (8006ad8 <TIM_Base_SetConfig+0x120>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d108      	bne.n	8006a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2e      	ldr	r2, [pc, #184]	; (8006ac8 <TIM_Base_SetConfig+0x110>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d02b      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a18:	d027      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a2b      	ldr	r2, [pc, #172]	; (8006acc <TIM_Base_SetConfig+0x114>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d023      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a2a      	ldr	r2, [pc, #168]	; (8006ad0 <TIM_Base_SetConfig+0x118>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d01f      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a29      	ldr	r2, [pc, #164]	; (8006ad4 <TIM_Base_SetConfig+0x11c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d01b      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a28      	ldr	r2, [pc, #160]	; (8006ad8 <TIM_Base_SetConfig+0x120>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d017      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a27      	ldr	r2, [pc, #156]	; (8006adc <TIM_Base_SetConfig+0x124>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d013      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a26      	ldr	r2, [pc, #152]	; (8006ae0 <TIM_Base_SetConfig+0x128>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d00f      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a25      	ldr	r2, [pc, #148]	; (8006ae4 <TIM_Base_SetConfig+0x12c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00b      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a24      	ldr	r2, [pc, #144]	; (8006ae8 <TIM_Base_SetConfig+0x130>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d007      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a23      	ldr	r2, [pc, #140]	; (8006aec <TIM_Base_SetConfig+0x134>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d003      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a22      	ldr	r2, [pc, #136]	; (8006af0 <TIM_Base_SetConfig+0x138>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d108      	bne.n	8006a7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a09      	ldr	r2, [pc, #36]	; (8006ac8 <TIM_Base_SetConfig+0x110>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d003      	beq.n	8006ab0 <TIM_Base_SetConfig+0xf8>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a0b      	ldr	r2, [pc, #44]	; (8006ad8 <TIM_Base_SetConfig+0x120>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d103      	bne.n	8006ab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	615a      	str	r2, [r3, #20]
}
 8006abe:	bf00      	nop
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr
 8006ac8:	40010000 	.word	0x40010000
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	40000800 	.word	0x40000800
 8006ad4:	40000c00 	.word	0x40000c00
 8006ad8:	40010400 	.word	0x40010400
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40014400 	.word	0x40014400
 8006ae4:	40014800 	.word	0x40014800
 8006ae8:	40001800 	.word	0x40001800
 8006aec:	40001c00 	.word	0x40001c00
 8006af0:	40002000 	.word	0x40002000

08006af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f023 0201 	bic.w	r2, r3, #1
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0303 	bic.w	r3, r3, #3
 8006b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f023 0302 	bic.w	r3, r3, #2
 8006b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a20      	ldr	r2, [pc, #128]	; (8006bcc <TIM_OC1_SetConfig+0xd8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d003      	beq.n	8006b58 <TIM_OC1_SetConfig+0x64>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a1f      	ldr	r2, [pc, #124]	; (8006bd0 <TIM_OC1_SetConfig+0xdc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d10c      	bne.n	8006b72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f023 0308 	bic.w	r3, r3, #8
 8006b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f023 0304 	bic.w	r3, r3, #4
 8006b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a15      	ldr	r2, [pc, #84]	; (8006bcc <TIM_OC1_SetConfig+0xd8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d003      	beq.n	8006b82 <TIM_OC1_SetConfig+0x8e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a14      	ldr	r2, [pc, #80]	; (8006bd0 <TIM_OC1_SetConfig+0xdc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d111      	bne.n	8006ba6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	621a      	str	r2, [r3, #32]
}
 8006bc0:	bf00      	nop
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40010000 	.word	0x40010000
 8006bd0:	40010400 	.word	0x40010400

08006bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f023 0210 	bic.w	r2, r3, #16
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f023 0320 	bic.w	r3, r3, #32
 8006c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a21      	ldr	r2, [pc, #132]	; (8006cb4 <TIM_OC2_SetConfig+0xe0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d003      	beq.n	8006c3c <TIM_OC2_SetConfig+0x68>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a20      	ldr	r2, [pc, #128]	; (8006cb8 <TIM_OC2_SetConfig+0xe4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d10d      	bne.n	8006c58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a16      	ldr	r2, [pc, #88]	; (8006cb4 <TIM_OC2_SetConfig+0xe0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_OC2_SetConfig+0x94>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a15      	ldr	r2, [pc, #84]	; (8006cb8 <TIM_OC2_SetConfig+0xe4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d113      	bne.n	8006c90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr
 8006cb4:	40010000 	.word	0x40010000
 8006cb8:	40010400 	.word	0x40010400

08006cbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0303 	bic.w	r3, r3, #3
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a21      	ldr	r2, [pc, #132]	; (8006d9c <TIM_OC3_SetConfig+0xe0>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_OC3_SetConfig+0x66>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a20      	ldr	r2, [pc, #128]	; (8006da0 <TIM_OC3_SetConfig+0xe4>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d10d      	bne.n	8006d3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	021b      	lsls	r3, r3, #8
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a16      	ldr	r2, [pc, #88]	; (8006d9c <TIM_OC3_SetConfig+0xe0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_OC3_SetConfig+0x92>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a15      	ldr	r2, [pc, #84]	; (8006da0 <TIM_OC3_SetConfig+0xe4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d113      	bne.n	8006d76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	621a      	str	r2, [r3, #32]
}
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40010400 	.word	0x40010400

08006da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	031b      	lsls	r3, r3, #12
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a11      	ldr	r2, [pc, #68]	; (8006e44 <TIM_OC4_SetConfig+0xa0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d003      	beq.n	8006e0c <TIM_OC4_SetConfig+0x68>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a10      	ldr	r2, [pc, #64]	; (8006e48 <TIM_OC4_SetConfig+0xa4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d109      	bne.n	8006e20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	019b      	lsls	r3, r3, #6
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	621a      	str	r2, [r3, #32]
}
 8006e3a:	bf00      	nop
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bc80      	pop	{r7}
 8006e42:	4770      	bx	lr
 8006e44:	40010000 	.word	0x40010000
 8006e48:	40010400 	.word	0x40010400

08006e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	f023 0201 	bic.w	r2, r3, #1
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f023 030a 	bic.w	r3, r3, #10
 8006e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	621a      	str	r2, [r3, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr

08006ea8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f023 0210 	bic.w	r2, r3, #16
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ed2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	031b      	lsls	r3, r3, #12
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ee4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	621a      	str	r2, [r3, #32]
}
 8006efc:	bf00      	nop
 8006efe:	371c      	adds	r7, #28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bc80      	pop	{r7}
 8006f04:	4770      	bx	lr

08006f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f043 0307 	orr.w	r3, r3, #7
 8006f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	609a      	str	r2, [r3, #8]
}
 8006f30:	bf00      	nop
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bc80      	pop	{r7}
 8006f38:	4770      	bx	lr

08006f3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b087      	sub	sp, #28
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	60f8      	str	r0, [r7, #12]
 8006f42:	60b9      	str	r1, [r7, #8]
 8006f44:	607a      	str	r2, [r7, #4]
 8006f46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	021a      	lsls	r2, r3, #8
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	609a      	str	r2, [r3, #8]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr

08006f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e05a      	b.n	8007046 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a20      	ldr	r2, [pc, #128]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d022      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fdc:	d01d      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1c      	ldr	r2, [pc, #112]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d018      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1a      	ldr	r2, [pc, #104]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a19      	ldr	r2, [pc, #100]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00e      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a17      	ldr	r2, [pc, #92]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d009      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a16      	ldr	r2, [pc, #88]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a14      	ldr	r2, [pc, #80]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d10c      	bne.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	4313      	orrs	r3, r2
 800702a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr
 8007050:	40010000 	.word	0x40010000
 8007054:	40000400 	.word	0x40000400
 8007058:	40000800 	.word	0x40000800
 800705c:	40000c00 	.word	0x40000c00
 8007060:	40010400 	.word	0x40010400
 8007064:	40014000 	.word	0x40014000
 8007068:	40001800 	.word	0x40001800

0800706c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007080:	2b01      	cmp	r3, #1
 8007082:	d101      	bne.n	8007088 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007084:	2302      	movs	r3, #2
 8007086:	e03d      	b.n	8007104 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	bc80      	pop	{r7}
 800710c:	4770      	bx	lr

0800710e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr

08007120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	bc80      	pop	{r7}
 8007130:	4770      	bx	lr

08007132 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e03f      	b.n	80071c4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d106      	bne.n	800715e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7fa fccf 	bl	8001afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2224      	movs	r2, #36	; 0x24
 8007162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007174:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fc26 	bl	80079c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	691a      	ldr	r2, [r3, #16]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800718a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	695a      	ldr	r2, [r3, #20]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800719a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08a      	sub	sp, #40	; 0x28
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	603b      	str	r3, [r7, #0]
 80071d8:	4613      	mov	r3, r2
 80071da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b20      	cmp	r3, #32
 80071ea:	d17c      	bne.n	80072e6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <HAL_UART_Transmit+0x2c>
 80071f2:	88fb      	ldrh	r3, [r7, #6]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e075      	b.n	80072e8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_UART_Transmit+0x3e>
 8007206:	2302      	movs	r3, #2
 8007208:	e06e      	b.n	80072e8 <HAL_UART_Transmit+0x11c>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2221      	movs	r2, #33	; 0x21
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007220:	f7fa febe 	bl	8001fa0 <HAL_GetTick>
 8007224:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	88fa      	ldrh	r2, [r7, #6]
 800722a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	88fa      	ldrh	r2, [r7, #6]
 8007230:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723a:	d108      	bne.n	800724e <HAL_UART_Transmit+0x82>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007244:	2300      	movs	r3, #0
 8007246:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	61bb      	str	r3, [r7, #24]
 800724c:	e003      	b.n	8007256 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800725e:	e02a      	b.n	80072b6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2200      	movs	r2, #0
 8007268:	2180      	movs	r1, #128	; 0x80
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 fa12 	bl	8007694 <UART_WaitOnFlagUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e036      	b.n	80072e8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10b      	bne.n	8007298 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800728e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	3302      	adds	r3, #2
 8007294:	61bb      	str	r3, [r7, #24]
 8007296:	e007      	b.n	80072a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	781a      	ldrb	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	3301      	adds	r3, #1
 80072a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1cf      	bne.n	8007260 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2200      	movs	r2, #0
 80072c8:	2140      	movs	r1, #64	; 0x40
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f9e2 	bl	8007694 <UART_WaitOnFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e006      	b.n	80072e8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2220      	movs	r2, #32
 80072de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e000      	b.n	80072e8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80072e6:	2302      	movs	r3, #2
  }
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	; 0x28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007310:	2300      	movs	r3, #0
 8007312:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007314:	2300      	movs	r3, #0
 8007316:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10d      	bne.n	8007342 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	2b00      	cmp	r3, #0
 800732e:	d008      	beq.n	8007342 <HAL_UART_IRQHandler+0x52>
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa9b 	bl	8007876 <UART_Receive_IT>
      return;
 8007340:	e17c      	b.n	800763c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 80b1 	beq.w	80074ac <HAL_UART_IRQHandler+0x1bc>
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	2b00      	cmp	r3, #0
 8007352:	d105      	bne.n	8007360 <HAL_UART_IRQHandler+0x70>
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 80a6 	beq.w	80074ac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <HAL_UART_IRQHandler+0x90>
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007370:	2b00      	cmp	r3, #0
 8007372:	d005      	beq.n	8007380 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	f043 0201 	orr.w	r2, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <HAL_UART_IRQHandler+0xb0>
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d005      	beq.n	80073a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	f043 0202 	orr.w	r2, r3, #2
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <HAL_UART_IRQHandler+0xd0>
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	f043 0204 	orr.w	r2, r3, #4
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	f003 0308 	and.w	r3, r3, #8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00f      	beq.n	80073ea <HAL_UART_IRQHandler+0xfa>
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	f003 0320 	and.w	r3, r3, #32
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d104      	bne.n	80073de <HAL_UART_IRQHandler+0xee>
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	f043 0208 	orr.w	r2, r3, #8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 811f 	beq.w	8007632 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d007      	beq.n	800740e <HAL_UART_IRQHandler+0x11e>
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	f003 0320 	and.w	r3, r3, #32
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fa34 	bl	8007876 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007418:	2b40      	cmp	r3, #64	; 0x40
 800741a:	bf0c      	ite	eq
 800741c:	2301      	moveq	r3, #1
 800741e:	2300      	movne	r3, #0
 8007420:	b2db      	uxtb	r3, r3
 8007422:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007428:	f003 0308 	and.w	r3, r3, #8
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <HAL_UART_IRQHandler+0x146>
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d031      	beq.n	800749a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f976 	bl	8007728 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007446:	2b40      	cmp	r3, #64	; 0x40
 8007448:	d123      	bne.n	8007492 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	695a      	ldr	r2, [r3, #20]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007458:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	2b00      	cmp	r3, #0
 8007460:	d013      	beq.n	800748a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007466:	4a77      	ldr	r2, [pc, #476]	; (8007644 <HAL_UART_IRQHandler+0x354>)
 8007468:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746e:	4618      	mov	r0, r3
 8007470:	f7fb fd4a 	bl	8002f08 <HAL_DMA_Abort_IT>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d016      	beq.n	80074a8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007484:	4610      	mov	r0, r2
 8007486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007488:	e00e      	b.n	80074a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f8ee 	bl	800766c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007490:	e00a      	b.n	80074a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f8ea 	bl	800766c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007498:	e006      	b.n	80074a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f8e6 	bl	800766c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80074a6:	e0c4      	b.n	8007632 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a8:	bf00      	nop
    return;
 80074aa:	e0c2      	b.n	8007632 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	f040 80a2 	bne.w	80075fa <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 809c 	beq.w	80075fa <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8096 	beq.w	80075fa <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ee:	2b40      	cmp	r3, #64	; 0x40
 80074f0:	d14f      	bne.n	8007592 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80074fc:	8a3b      	ldrh	r3, [r7, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 8099 	beq.w	8007636 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007508:	8a3a      	ldrh	r2, [r7, #16]
 800750a:	429a      	cmp	r2, r3
 800750c:	f080 8093 	bcs.w	8007636 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	8a3a      	ldrh	r2, [r7, #16]
 8007514:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007520:	d02b      	beq.n	800757a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007530:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695a      	ldr	r2, [r3, #20]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0201 	bic.w	r2, r2, #1
 8007540:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695a      	ldr	r2, [r3, #20]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007550:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2220      	movs	r2, #32
 8007556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 0210 	bic.w	r2, r2, #16
 800756e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007574:	4618      	mov	r0, r3
 8007576:	f7fb fc57 	bl	8002e28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007582:	b29b      	uxth	r3, r3
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	b29b      	uxth	r3, r3
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f877 	bl	800767e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007590:	e051      	b.n	8007636 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800759a:	b29b      	uxth	r3, r3
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d047      	beq.n	800763a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80075aa:	8a7b      	ldrh	r3, [r7, #18]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d044      	beq.n	800763a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075be:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695a      	ldr	r2, [r3, #20]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0201 	bic.w	r2, r2, #1
 80075ce:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0210 	bic.w	r2, r2, #16
 80075ec:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075ee:	8a7b      	ldrh	r3, [r7, #18]
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f843 	bl	800767e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80075f8:	e01f      	b.n	800763a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007600:	2b00      	cmp	r3, #0
 8007602:	d008      	beq.n	8007616 <HAL_UART_IRQHandler+0x326>
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f8ca 	bl	80077a8 <UART_Transmit_IT>
    return;
 8007614:	e012      	b.n	800763c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00d      	beq.n	800763c <HAL_UART_IRQHandler+0x34c>
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	d008      	beq.n	800763c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f90b 	bl	8007846 <UART_EndTransmit_IT>
    return;
 8007630:	e004      	b.n	800763c <HAL_UART_IRQHandler+0x34c>
    return;
 8007632:	bf00      	nop
 8007634:	e002      	b.n	800763c <HAL_UART_IRQHandler+0x34c>
      return;
 8007636:	bf00      	nop
 8007638:	e000      	b.n	800763c <HAL_UART_IRQHandler+0x34c>
      return;
 800763a:	bf00      	nop
  }
}
 800763c:	3728      	adds	r7, #40	; 0x28
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	08007781 	.word	0x08007781

08007648 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	bc80      	pop	{r7}
 8007658:	4770      	bx	lr

0800765a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	bc80      	pop	{r7}
 800767c:	4770      	bx	lr

0800767e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800768a:	bf00      	nop
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	bc80      	pop	{r7}
 8007692:	4770      	bx	lr

08007694 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	603b      	str	r3, [r7, #0]
 80076a0:	4613      	mov	r3, r2
 80076a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a4:	e02c      	b.n	8007700 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ac:	d028      	beq.n	8007700 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d007      	beq.n	80076c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80076b4:	f7fa fc74 	bl	8001fa0 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d21d      	bcs.n	8007700 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	695a      	ldr	r2, [r3, #20]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0201 	bic.w	r2, r2, #1
 80076e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e00f      	b.n	8007720 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	4013      	ands	r3, r2
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	429a      	cmp	r2, r3
 800770e:	bf0c      	ite	eq
 8007710:	2301      	moveq	r3, #1
 8007712:	2300      	movne	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	461a      	mov	r2, r3
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	429a      	cmp	r2, r3
 800771c:	d0c3      	beq.n	80076a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800773e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	695a      	ldr	r2, [r3, #20]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0201 	bic.w	r2, r2, #1
 800774e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	2b01      	cmp	r3, #1
 8007756:	d107      	bne.n	8007768 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0210 	bic.w	r2, r2, #16
 8007766:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	bc80      	pop	{r7}
 800777e:	4770      	bx	lr

08007780 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f7ff ff66 	bl	800766c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077a0:	bf00      	nop
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b21      	cmp	r3, #33	; 0x21
 80077ba:	d13e      	bne.n	800783a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c4:	d114      	bne.n	80077f0 <UART_Transmit_IT+0x48>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d110      	bne.n	80077f0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	461a      	mov	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	1c9a      	adds	r2, r3, #2
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	621a      	str	r2, [r3, #32]
 80077ee:	e008      	b.n	8007802 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	1c59      	adds	r1, r3, #1
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	6211      	str	r1, [r2, #32]
 80077fa:	781a      	ldrb	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007806:	b29b      	uxth	r3, r3
 8007808:	3b01      	subs	r3, #1
 800780a:	b29b      	uxth	r3, r3
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	4619      	mov	r1, r3
 8007810:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10f      	bne.n	8007836 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007824:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007834:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	e000      	b.n	800783c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800783a:	2302      	movs	r3, #2
  }
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	bc80      	pop	{r7}
 8007844:	4770      	bx	lr

08007846 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800785c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7ff feee 	bl	8007648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b086      	sub	sp, #24
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b22      	cmp	r3, #34	; 0x22
 8007888:	f040 8099 	bne.w	80079be <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007894:	d117      	bne.n	80078c6 <UART_Receive_IT+0x50>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d113      	bne.n	80078c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078be:	1c9a      	adds	r2, r3, #2
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	629a      	str	r2, [r3, #40]	; 0x28
 80078c4:	e026      	b.n	8007914 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80078cc:	2300      	movs	r3, #0
 80078ce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d8:	d007      	beq.n	80078ea <UART_Receive_IT+0x74>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <UART_Receive_IT+0x82>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d106      	bne.n	80078f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e008      	b.n	800790a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007904:	b2da      	uxtb	r2, r3
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790e:	1c5a      	adds	r2, r3, #1
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29b      	uxth	r3, r3
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	4619      	mov	r1, r3
 8007922:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007924:	2b00      	cmp	r3, #0
 8007926:	d148      	bne.n	80079ba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 0220 	bic.w	r2, r2, #32
 8007936:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007946:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695a      	ldr	r2, [r3, #20]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0201 	bic.w	r2, r2, #1
 8007956:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007964:	2b01      	cmp	r3, #1
 8007966:	d123      	bne.n	80079b0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 0210 	bic.w	r2, r2, #16
 800797c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b10      	cmp	r3, #16
 800798a:	d10a      	bne.n	80079a2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff fe68 	bl	800767e <HAL_UARTEx_RxEventCallback>
 80079ae:	e002      	b.n	80079b6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff fe52 	bl	800765a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	e002      	b.n	80079c0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	e000      	b.n	80079c0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80079be:	2302      	movs	r3, #2
  }
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68da      	ldr	r2, [r3, #12]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	431a      	orrs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	431a      	orrs	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007a08:	f023 030c 	bic.w	r3, r3, #12
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	6812      	ldr	r2, [r2, #0]
 8007a10:	68b9      	ldr	r1, [r7, #8]
 8007a12:	430b      	orrs	r3, r1
 8007a14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	699a      	ldr	r2, [r3, #24]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a57      	ldr	r2, [pc, #348]	; (8007b90 <UART_SetConfig+0x1c8>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d004      	beq.n	8007a40 <UART_SetConfig+0x78>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a56      	ldr	r2, [pc, #344]	; (8007b94 <UART_SetConfig+0x1cc>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d103      	bne.n	8007a48 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007a40:	f7fd fec4 	bl	80057cc <HAL_RCC_GetPCLK2Freq>
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	e002      	b.n	8007a4e <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007a48:	f7fd fe9e 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 8007a4c:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a56:	d14c      	bne.n	8007af2 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009a      	lsls	r2, r3, #2
 8007a62:	441a      	add	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6e:	4a4a      	ldr	r2, [pc, #296]	; (8007b98 <UART_SetConfig+0x1d0>)
 8007a70:	fba2 2303 	umull	r2, r3, r2, r3
 8007a74:	095b      	lsrs	r3, r3, #5
 8007a76:	0119      	lsls	r1, r3, #4
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009a      	lsls	r2, r3, #2
 8007a82:	441a      	add	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a8e:	4b42      	ldr	r3, [pc, #264]	; (8007b98 <UART_SetConfig+0x1d0>)
 8007a90:	fba3 0302 	umull	r0, r3, r3, r2
 8007a94:	095b      	lsrs	r3, r3, #5
 8007a96:	2064      	movs	r0, #100	; 0x64
 8007a98:	fb00 f303 	mul.w	r3, r0, r3
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	3332      	adds	r3, #50	; 0x32
 8007aa2:	4a3d      	ldr	r2, [pc, #244]	; (8007b98 <UART_SetConfig+0x1d0>)
 8007aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa8:	095b      	lsrs	r3, r3, #5
 8007aaa:	005b      	lsls	r3, r3, #1
 8007aac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ab0:	4419      	add	r1, r3
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	009a      	lsls	r2, r3, #2
 8007abc:	441a      	add	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ac8:	4b33      	ldr	r3, [pc, #204]	; (8007b98 <UART_SetConfig+0x1d0>)
 8007aca:	fba3 0302 	umull	r0, r3, r3, r2
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	2064      	movs	r0, #100	; 0x64
 8007ad2:	fb00 f303 	mul.w	r3, r0, r3
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	3332      	adds	r3, #50	; 0x32
 8007adc:	4a2e      	ldr	r2, [pc, #184]	; (8007b98 <UART_SetConfig+0x1d0>)
 8007ade:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae2:	095b      	lsrs	r3, r3, #5
 8007ae4:	f003 0207 	and.w	r2, r3, #7
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	440a      	add	r2, r1
 8007aee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007af0:	e04a      	b.n	8007b88 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	009a      	lsls	r2, r3, #2
 8007afc:	441a      	add	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b08:	4a23      	ldr	r2, [pc, #140]	; (8007b98 <UART_SetConfig+0x1d0>)
 8007b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	0119      	lsls	r1, r3, #4
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4613      	mov	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	009a      	lsls	r2, r3, #2
 8007b1c:	441a      	add	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b28:	4b1b      	ldr	r3, [pc, #108]	; (8007b98 <UART_SetConfig+0x1d0>)
 8007b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	2064      	movs	r0, #100	; 0x64
 8007b32:	fb00 f303 	mul.w	r3, r0, r3
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	3332      	adds	r3, #50	; 0x32
 8007b3c:	4a16      	ldr	r2, [pc, #88]	; (8007b98 <UART_SetConfig+0x1d0>)
 8007b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b42:	095b      	lsrs	r3, r3, #5
 8007b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b48:	4419      	add	r1, r3
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	009a      	lsls	r2, r3, #2
 8007b54:	441a      	add	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b60:	4b0d      	ldr	r3, [pc, #52]	; (8007b98 <UART_SetConfig+0x1d0>)
 8007b62:	fba3 0302 	umull	r0, r3, r3, r2
 8007b66:	095b      	lsrs	r3, r3, #5
 8007b68:	2064      	movs	r0, #100	; 0x64
 8007b6a:	fb00 f303 	mul.w	r3, r0, r3
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	3332      	adds	r3, #50	; 0x32
 8007b74:	4a08      	ldr	r2, [pc, #32]	; (8007b98 <UART_SetConfig+0x1d0>)
 8007b76:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	f003 020f 	and.w	r2, r3, #15
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	440a      	add	r2, r1
 8007b86:	609a      	str	r2, [r3, #8]
}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40011000 	.word	0x40011000
 8007b94:	40011400 	.word	0x40011400
 8007b98:	51eb851f 	.word	0x51eb851f

08007b9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f023 0201 	bic.w	r2, r3, #1
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bc80      	pop	{r7}
 8007bba:	4770      	bx	lr

08007bbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	019b      	lsls	r3, r3, #6
 8007bce:	f043 0220 	orr.w	r2, r3, #32
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4a08      	ldr	r2, [pc, #32]	; (8007c00 <USB_FlushTxFifo+0x44>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d901      	bls.n	8007be8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e006      	b.n	8007bf6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	f003 0320 	and.w	r3, r3, #32
 8007bf0:	2b20      	cmp	r3, #32
 8007bf2:	d0f0      	beq.n	8007bd6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bc80      	pop	{r7}
 8007bfe:	4770      	bx	lr
 8007c00:	00030d40 	.word	0x00030d40

08007c04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2210      	movs	r2, #16
 8007c14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4a08      	ldr	r2, [pc, #32]	; (8007c40 <USB_FlushRxFifo+0x3c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d901      	bls.n	8007c28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e006      	b.n	8007c36 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	f003 0310 	and.w	r3, r3, #16
 8007c30:	2b10      	cmp	r3, #16
 8007c32:	d0f0      	beq.n	8007c16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bc80      	pop	{r7}
 8007c3e:	4770      	bx	lr
 8007c40:	00030d40 	.word	0x00030d40

08007c44 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b089      	sub	sp, #36	; 0x24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	461a      	mov	r2, r3
 8007c52:	460b      	mov	r3, r1
 8007c54:	71fb      	strb	r3, [r7, #7]
 8007c56:	4613      	mov	r3, r2
 8007c58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d123      	bne.n	8007cb2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c6a:	88bb      	ldrh	r3, [r7, #4]
 8007c6c:	3303      	adds	r3, #3
 8007c6e:	089b      	lsrs	r3, r3, #2
 8007c70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c72:	2300      	movs	r3, #0
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	e018      	b.n	8007caa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	031a      	lsls	r2, r3, #12
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c84:	461a      	mov	r2, r3
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	3301      	adds	r3, #1
 8007c96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	61bb      	str	r3, [r7, #24]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d3e2      	bcc.n	8007c78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3724      	adds	r7, #36	; 0x24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bc80      	pop	{r7}
 8007cbc:	4770      	bx	lr

08007cbe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b08b      	sub	sp, #44	; 0x2c
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	60f8      	str	r0, [r7, #12]
 8007cc6:	60b9      	str	r1, [r7, #8]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007cd4:	88fb      	ldrh	r3, [r7, #6]
 8007cd6:	089b      	lsrs	r3, r3, #2
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007cdc:	88fb      	ldrh	r3, [r7, #6]
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	623b      	str	r3, [r7, #32]
 8007ce8:	e014      	b.n	8007d14 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	601a      	str	r2, [r3, #0]
    pDest++;
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	3301      	adds	r3, #1
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	3301      	adds	r3, #1
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	3301      	adds	r3, #1
 8007d12:	623b      	str	r3, [r7, #32]
 8007d14:	6a3a      	ldr	r2, [r7, #32]
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d3e6      	bcc.n	8007cea <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d1c:	8bfb      	ldrh	r3, [r7, #30]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d01e      	beq.n	8007d60 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f107 0310 	add.w	r3, r7, #16
 8007d32:	6812      	ldr	r2, [r2, #0]
 8007d34:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	00db      	lsls	r3, r3, #3
 8007d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	701a      	strb	r2, [r3, #0]
      i++;
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	3301      	adds	r3, #1
 8007d52:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007d54:	8bfb      	ldrh	r3, [r7, #30]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d5a:	8bfb      	ldrh	r3, [r7, #30]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1ea      	bne.n	8007d36 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	372c      	adds	r7, #44	; 0x2c
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bc80      	pop	{r7}
 8007d6a:	4770      	bx	lr

08007d6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	4013      	ands	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d84:	68fb      	ldr	r3, [r7, #12]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr

08007d90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	f003 0301 	and.w	r3, r3, #1
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr

08007daa <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b085      	sub	sp, #20
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007dc8:	f023 0303 	bic.w	r3, r3, #3
 8007dcc:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	f003 0303 	and.w	r3, r3, #3
 8007ddc:	68f9      	ldr	r1, [r7, #12]
 8007dde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007de2:	4313      	orrs	r3, r2
 8007de4:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d107      	bne.n	8007dfc <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df2:	461a      	mov	r2, r3
 8007df4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007df8:	6053      	str	r3, [r2, #4]
 8007dfa:	e009      	b.n	8007e10 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d106      	bne.n	8007e10 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f241 7370 	movw	r3, #6000	; 0x1770
 8007e0e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bc80      	pop	{r7}
 8007e1a:	4770      	bx	lr

08007e1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08c      	sub	sp, #48	; 0x30
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	4613      	mov	r3, r2
 8007e28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	785b      	ldrb	r3, [r3, #1]
 8007e32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e38:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d02d      	beq.n	8007ea2 <USB_HC_StartXfer+0x86>
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	791b      	ldrb	r3, [r3, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d129      	bne.n	8007ea2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d117      	bne.n	8007e84 <USB_HC_StartXfer+0x68>
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	79db      	ldrb	r3, [r3, #7]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <USB_HC_StartXfer+0x48>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	79db      	ldrb	r3, [r3, #7]
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d10f      	bne.n	8007e84 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	0151      	lsls	r1, r2, #5
 8007e76:	6a3a      	ldr	r2, [r7, #32]
 8007e78:	440a      	add	r2, r1
 8007e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e82:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007e84:	79fb      	ldrb	r3, [r7, #7]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10b      	bne.n	8007ea2 <USB_HC_StartXfer+0x86>
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	795b      	ldrb	r3, [r3, #5]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d107      	bne.n	8007ea2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	785b      	ldrb	r3, [r3, #1]
 8007e96:	4619      	mov	r1, r3
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 fa2d 	bl	80082f8 <USB_DoPing>
      return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e0f8      	b.n	8008094 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d018      	beq.n	8007edc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	8912      	ldrh	r2, [r2, #8]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	8912      	ldrh	r2, [r2, #8]
 8007eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ebe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007ec0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007ec2:	8b7b      	ldrh	r3, [r7, #26]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d90b      	bls.n	8007ee0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007ec8:	8b7b      	ldrh	r3, [r7, #26]
 8007eca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	8912      	ldrh	r2, [r2, #8]
 8007ed2:	fb02 f203 	mul.w	r2, r2, r3
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	611a      	str	r2, [r3, #16]
 8007eda:	e001      	b.n	8007ee0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007edc:	2301      	movs	r3, #1
 8007ede:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	78db      	ldrb	r3, [r3, #3]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d007      	beq.n	8007ef8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ee8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	8912      	ldrh	r2, [r2, #8]
 8007eee:	fb02 f203 	mul.w	r2, r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	611a      	str	r2, [r3, #16]
 8007ef6:	e003      	b.n	8007f00 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	695a      	ldr	r2, [r3, #20]
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f0a:	04d9      	lsls	r1, r3, #19
 8007f0c:	4b63      	ldr	r3, [pc, #396]	; (800809c <USB_HC_StartXfer+0x280>)
 8007f0e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f10:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	7a9b      	ldrb	r3, [r3, #10]
 8007f16:	075b      	lsls	r3, r3, #29
 8007f18:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f1c:	69f9      	ldr	r1, [r7, #28]
 8007f1e:	0148      	lsls	r0, r1, #5
 8007f20:	6a39      	ldr	r1, [r7, #32]
 8007f22:	4401      	add	r1, r0
 8007f24:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f28:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f2a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d009      	beq.n	8007f46 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	68d9      	ldr	r1, [r3, #12]
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f42:	460a      	mov	r2, r1
 8007f44:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bf0c      	ite	eq
 8007f56:	2301      	moveq	r3, #1
 8007f58:	2300      	movne	r3, #0
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	69fa      	ldr	r2, [r7, #28]
 8007f6e:	0151      	lsls	r1, r2, #5
 8007f70:	6a3a      	ldr	r2, [r7, #32]
 8007f72:	440a      	add	r2, r1
 8007f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f7c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	7e7b      	ldrb	r3, [r7, #25]
 8007f8e:	075b      	lsls	r3, r3, #29
 8007f90:	69f9      	ldr	r1, [r7, #28]
 8007f92:	0148      	lsls	r0, r1, #5
 8007f94:	6a39      	ldr	r1, [r7, #32]
 8007f96:	4401      	add	r1, r0
 8007f98:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fb6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	78db      	ldrb	r3, [r3, #3]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc6:	613b      	str	r3, [r7, #16]
 8007fc8:	e003      	b.n	8007fd2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fd0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fd8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007fec:	79fb      	ldrb	r3, [r7, #7]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e04e      	b.n	8008094 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	78db      	ldrb	r3, [r3, #3]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d149      	bne.n	8008092 <USB_HC_StartXfer+0x276>
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d045      	beq.n	8008092 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	79db      	ldrb	r3, [r3, #7]
 800800a:	2b03      	cmp	r3, #3
 800800c:	d830      	bhi.n	8008070 <USB_HC_StartXfer+0x254>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <USB_HC_StartXfer+0x1f8>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008025 	.word	0x08008025
 8008018:	08008049 	.word	0x08008049
 800801c:	08008025 	.word	0x08008025
 8008020:	08008049 	.word	0x08008049
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	3303      	adds	r3, #3
 800802a:	089b      	lsrs	r3, r3, #2
 800802c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800802e:	8afa      	ldrh	r2, [r7, #22]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	b29b      	uxth	r3, r3
 8008036:	429a      	cmp	r2, r3
 8008038:	d91c      	bls.n	8008074 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	f043 0220 	orr.w	r2, r3, #32
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	619a      	str	r2, [r3, #24]
        }
        break;
 8008046:	e015      	b.n	8008074 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	3303      	adds	r3, #3
 800804e:	089b      	lsrs	r3, r3, #2
 8008050:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008052:	8afa      	ldrh	r2, [r7, #22]
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	b29b      	uxth	r3, r3
 800805e:	429a      	cmp	r2, r3
 8008060:	d90a      	bls.n	8008078 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	619a      	str	r2, [r3, #24]
        }
        break;
 800806e:	e003      	b.n	8008078 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008070:	bf00      	nop
 8008072:	e002      	b.n	800807a <USB_HC_StartXfer+0x25e>
        break;
 8008074:	bf00      	nop
 8008076:	e000      	b.n	800807a <USB_HC_StartXfer+0x25e>
        break;
 8008078:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	68d9      	ldr	r1, [r3, #12]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	785a      	ldrb	r2, [r3, #1]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	b29b      	uxth	r3, r3
 8008088:	2000      	movs	r0, #0
 800808a:	9000      	str	r0, [sp, #0]
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f7ff fdd9 	bl	8007c44 <USB_WritePacket>
  }

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3728      	adds	r7, #40	; 0x28
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	1ff80000 	.word	0x1ff80000

080080a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	b29b      	uxth	r3, r3
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr

080080c0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b089      	sub	sp, #36	; 0x24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	460b      	mov	r3, r1
 80080ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	0c9b      	lsrs	r3, r3, #18
 80080e8:	f003 0303 	and.w	r3, r3, #3
 80080ec:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	0fdb      	lsrs	r3, r3, #31
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f003 0320 	and.w	r3, r3, #32
 800810c:	2b20      	cmp	r3, #32
 800810e:	d104      	bne.n	800811a <USB_HC_Halt+0x5a>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	e0e8      	b.n	80082ec <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <USB_HC_Halt+0x66>
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2b02      	cmp	r3, #2
 8008124:	d173      	bne.n	800820e <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	4413      	add	r3, r2
 800812e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	0151      	lsls	r1, r2, #5
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	440a      	add	r2, r1
 800813c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008144:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f003 0320 	and.w	r3, r3, #32
 800814e:	2b00      	cmp	r3, #0
 8008150:	f040 80cb 	bne.w	80082ea <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d143      	bne.n	80081e8 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	4413      	add	r3, r2
 8008168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	0151      	lsls	r1, r2, #5
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	440a      	add	r2, r1
 8008176:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800817a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800817e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	4413      	add	r3, r2
 8008188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	0151      	lsls	r1, r2, #5
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	440a      	add	r2, r1
 8008196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800819a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800819e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	0151      	lsls	r1, r2, #5
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	440a      	add	r2, r1
 80081b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081be:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	3301      	adds	r3, #1
 80081c4:	61fb      	str	r3, [r7, #28]
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081cc:	d81d      	bhi.n	800820a <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081e4:	d0ec      	beq.n	80081c0 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081e6:	e080      	b.n	80082ea <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	0151      	lsls	r1, r2, #5
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	440a      	add	r2, r1
 80081fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008206:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008208:	e06f      	b.n	80082ea <USB_HC_Halt+0x22a>
            break;
 800820a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800820c:	e06d      	b.n	80082ea <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	4413      	add	r3, r2
 8008216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	69ba      	ldr	r2, [r7, #24]
 8008222:	440a      	add	r2, r1
 8008224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800822c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d143      	bne.n	80082c6 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	4413      	add	r3, r2
 8008246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	0151      	lsls	r1, r2, #5
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	440a      	add	r2, r1
 8008254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800825c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	4413      	add	r3, r2
 8008266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	0151      	lsls	r1, r2, #5
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	440a      	add	r2, r1
 8008274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800827c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	4413      	add	r3, r2
 8008286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	0151      	lsls	r1, r2, #5
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	440a      	add	r2, r1
 8008294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008298:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800829c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	3301      	adds	r3, #1
 80082a2:	61fb      	str	r3, [r7, #28]
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082aa:	d81d      	bhi.n	80082e8 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082c2:	d0ec      	beq.n	800829e <USB_HC_Halt+0x1de>
 80082c4:	e011      	b.n	80082ea <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	0151      	lsls	r1, r2, #5
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	440a      	add	r2, r1
 80082dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	e000      	b.n	80082ea <USB_HC_Halt+0x22a>
          break;
 80082e8:	bf00      	nop
    }
  }

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3724      	adds	r7, #36	; 0x24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bc80      	pop	{r7}
 80082f4:	4770      	bx	lr
	...

080082f8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800830c:	2301      	movs	r3, #1
 800830e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	04da      	lsls	r2, r3, #19
 8008314:	4b14      	ldr	r3, [pc, #80]	; (8008368 <USB_DoPing+0x70>)
 8008316:	4013      	ands	r3, r2
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	0151      	lsls	r1, r2, #5
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	440a      	add	r2, r1
 8008320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008324:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008328:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	015a      	lsls	r2, r3, #5
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	4413      	add	r3, r2
 8008332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008340:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008348:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	4413      	add	r3, r2
 8008352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008356:	461a      	mov	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	bc80      	pop	{r7}
 8008366:	4770      	bx	lr
 8008368:	1ff80000 	.word	0x1ff80000

0800836c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff fc0d 	bl	8007b9c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008382:	2110      	movs	r1, #16
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff fc19 	bl	8007bbc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff fc3a 	bl	8007c04 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008390:	2300      	movs	r3, #0
 8008392:	613b      	str	r3, [r7, #16]
 8008394:	e01f      	b.n	80083d6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4413      	add	r3, r2
 800839e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083bc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ca:	461a      	mov	r2, r3
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	3301      	adds	r3, #1
 80083d4:	613b      	str	r3, [r7, #16]
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	2b0f      	cmp	r3, #15
 80083da:	d9dc      	bls.n	8008396 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80083dc:	2300      	movs	r3, #0
 80083de:	613b      	str	r3, [r7, #16]
 80083e0:	e034      	b.n	800844c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008400:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008408:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	015a      	lsls	r2, r3, #5
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	4413      	add	r3, r2
 8008412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008416:	461a      	mov	r2, r3
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	3301      	adds	r3, #1
 8008420:	617b      	str	r3, [r7, #20]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008428:	d80c      	bhi.n	8008444 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	4413      	add	r3, r2
 8008432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800843c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008440:	d0ec      	beq.n	800841c <USB_StopHost+0xb0>
 8008442:	e000      	b.n	8008446 <USB_StopHost+0xda>
        break;
 8008444:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	3301      	adds	r3, #1
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	2b0f      	cmp	r3, #15
 8008450:	d9c7      	bls.n	80083e2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008458:	461a      	mov	r2, r3
 800845a:	f04f 33ff 	mov.w	r3, #4294967295
 800845e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f04f 32ff 	mov.w	r2, #4294967295
 8008466:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
	...

08008474 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008478:	4904      	ldr	r1, [pc, #16]	; (800848c <MX_FATFS_Init+0x18>)
 800847a:	4805      	ldr	r0, [pc, #20]	; (8008490 <MX_FATFS_Init+0x1c>)
 800847c:	f001 facc 	bl	8009a18 <FATFS_LinkDriver>
 8008480:	4603      	mov	r3, r0
 8008482:	461a      	mov	r2, r3
 8008484:	4b03      	ldr	r3, [pc, #12]	; (8008494 <MX_FATFS_Init+0x20>)
 8008486:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008488:	bf00      	nop
 800848a:	bd80      	pop	{r7, pc}
 800848c:	20004930 	.word	0x20004930
 8008490:	0800f860 	.word	0x0800f860
 8008494:	20004d94 	.word	0x20004d94

08008498 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af02      	add	r7, sp, #8
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80084aa:	69db      	ldr	r3, [r3, #28]
 80084ac:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80084ae:	2301      	movs	r3, #1
 80084b0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80084b2:	2301      	movs	r3, #1
 80084b4:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80084b6:	78fb      	ldrb	r3, [r7, #3]
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	2134      	movs	r1, #52	; 0x34
 80084bc:	fb01 f303 	mul.w	r3, r1, r3
 80084c0:	4413      	add	r3, r2
 80084c2:	3390      	adds	r3, #144	; 0x90
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b07      	cmp	r3, #7
 80084c8:	d04b      	beq.n	8008562 <USBH_MSC_RdWrProcess+0xca>
 80084ca:	2b07      	cmp	r3, #7
 80084cc:	f300 80d2 	bgt.w	8008674 <USBH_MSC_RdWrProcess+0x1dc>
 80084d0:	2b05      	cmp	r3, #5
 80084d2:	f000 8089 	beq.w	80085e8 <USBH_MSC_RdWrProcess+0x150>
 80084d6:	2b06      	cmp	r3, #6
 80084d8:	f040 80cc 	bne.w	8008674 <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80084dc:	78f9      	ldrb	r1, [r7, #3]
 80084de:	2300      	movs	r3, #0
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	2300      	movs	r3, #0
 80084e4:	2200      	movs	r2, #0
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fdb0 	bl	800904c <USBH_MSC_SCSI_Read>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10b      	bne.n	800850e <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	2134      	movs	r1, #52	; 0x34
 80084fc:	fb01 f303 	mul.w	r3, r1, r3
 8008500:	4413      	add	r3, r2
 8008502:	3390      	adds	r3, #144	; 0x90
 8008504:	2201      	movs	r2, #1
 8008506:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	75fb      	strb	r3, [r7, #23]
 800850c:	e01a      	b.n	8008544 <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	2b02      	cmp	r3, #2
 8008512:	d109      	bne.n	8008528 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008514:	78fb      	ldrb	r3, [r7, #3]
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	2134      	movs	r1, #52	; 0x34
 800851a:	fb01 f303 	mul.w	r3, r1, r3
 800851e:	4413      	add	r3, r2
 8008520:	3390      	adds	r3, #144	; 0x90
 8008522:	2205      	movs	r2, #5
 8008524:	701a      	strb	r2, [r3, #0]
 8008526:	e00d      	b.n	8008544 <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	2b04      	cmp	r3, #4
 800852c:	d10a      	bne.n	8008544 <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800852e:	78fb      	ldrb	r3, [r7, #3]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	2134      	movs	r1, #52	; 0x34
 8008534:	fb01 f303 	mul.w	r3, r1, r3
 8008538:	4413      	add	r3, r2
 800853a:	3390      	adds	r3, #144	; 0x90
 800853c:	2208      	movs	r2, #8
 800853e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008540:	2302      	movs	r3, #2
 8008542:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2204      	movs	r2, #4
 8008548:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8008558:	2200      	movs	r2, #0
 800855a:	4619      	mov	r1, r3
 800855c:	f001 fbaa 	bl	8009cb4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008560:	e089      	b.n	8008676 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008562:	78f9      	ldrb	r1, [r7, #3]
 8008564:	2300      	movs	r3, #0
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	2300      	movs	r3, #0
 800856a:	2200      	movs	r2, #0
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fd02 	bl	8008f76 <USBH_MSC_SCSI_Write>
 8008572:	4603      	mov	r3, r0
 8008574:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10b      	bne.n	8008594 <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800857c:	78fb      	ldrb	r3, [r7, #3]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	2134      	movs	r1, #52	; 0x34
 8008582:	fb01 f303 	mul.w	r3, r1, r3
 8008586:	4413      	add	r3, r2
 8008588:	3390      	adds	r3, #144	; 0x90
 800858a:	2201      	movs	r2, #1
 800858c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	75fb      	strb	r3, [r7, #23]
 8008592:	e01a      	b.n	80085ca <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	2b02      	cmp	r3, #2
 8008598:	d109      	bne.n	80085ae <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800859a:	78fb      	ldrb	r3, [r7, #3]
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	2134      	movs	r1, #52	; 0x34
 80085a0:	fb01 f303 	mul.w	r3, r1, r3
 80085a4:	4413      	add	r3, r2
 80085a6:	3390      	adds	r3, #144	; 0x90
 80085a8:	2205      	movs	r2, #5
 80085aa:	701a      	strb	r2, [r3, #0]
 80085ac:	e00d      	b.n	80085ca <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	d10a      	bne.n	80085ca <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	2134      	movs	r1, #52	; 0x34
 80085ba:	fb01 f303 	mul.w	r3, r1, r3
 80085be:	4413      	add	r3, r2
 80085c0:	3390      	adds	r3, #144	; 0x90
 80085c2:	2208      	movs	r2, #8
 80085c4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80085c6:	2302      	movs	r3, #2
 80085c8:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2204      	movs	r2, #4
 80085ce:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80085de:	2200      	movs	r2, #0
 80085e0:	4619      	mov	r1, r3
 80085e2:	f001 fb67 	bl	8009cb4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80085e6:	e046      	b.n	8008676 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	2234      	movs	r2, #52	; 0x34
 80085ec:	fb02 f303 	mul.w	r3, r2, r3
 80085f0:	3398      	adds	r3, #152	; 0x98
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	4413      	add	r3, r2
 80085f6:	1d1a      	adds	r2, r3, #4
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fc41 	bl	8008e84 <USBH_MSC_SCSI_RequestSense>
 8008602:	4603      	mov	r3, r0
 8008604:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d113      	bne.n	8008634 <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	2134      	movs	r1, #52	; 0x34
 8008612:	fb01 f303 	mul.w	r3, r1, r3
 8008616:	4413      	add	r3, r2
 8008618:	3390      	adds	r3, #144	; 0x90
 800861a:	2201      	movs	r2, #1
 800861c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800861e:	78fb      	ldrb	r3, [r7, #3]
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	2134      	movs	r1, #52	; 0x34
 8008624:	fb01 f303 	mul.w	r3, r1, r3
 8008628:	4413      	add	r3, r2
 800862a:	3391      	adds	r3, #145	; 0x91
 800862c:	2202      	movs	r2, #2
 800862e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008630:	2302      	movs	r3, #2
 8008632:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	2b02      	cmp	r3, #2
 8008638:	d00d      	beq.n	8008656 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800863a:	7bfb      	ldrb	r3, [r7, #15]
 800863c:	2b04      	cmp	r3, #4
 800863e:	d10a      	bne.n	8008656 <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	2134      	movs	r1, #52	; 0x34
 8008646:	fb01 f303 	mul.w	r3, r1, r3
 800864a:	4413      	add	r3, r2
 800864c:	3390      	adds	r3, #144	; 0x90
 800864e:	2208      	movs	r2, #8
 8008650:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008652:	2302      	movs	r3, #2
 8008654:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2204      	movs	r2, #4
 800865a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800866a:	2200      	movs	r2, #0
 800866c:	4619      	mov	r1, r3
 800866e:	f001 fb21 	bl	8009cb4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008672:	e000      	b.n	8008676 <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 8008674:	bf00      	nop

  }
  return error;
 8008676:	7dfb      	ldrb	r3, [r7, #23]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b0b      	cmp	r3, #11
 800869e:	d10c      	bne.n	80086ba <USBH_MSC_UnitIsReady+0x3a>
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	2134      	movs	r1, #52	; 0x34
 80086a6:	fb01 f303 	mul.w	r3, r1, r3
 80086aa:	4413      	add	r3, r2
 80086ac:	3391      	adds	r3, #145	; 0x91
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80086b4:	2301      	movs	r3, #1
 80086b6:	73fb      	strb	r3, [r7, #15]
 80086b8:	e001      	b.n	80086be <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80086be:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bc80      	pop	{r7}
 80086c8:	4770      	bx	lr

080086ca <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b086      	sub	sp, #24
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	460b      	mov	r3, r1
 80086d4:	607a      	str	r2, [r7, #4]
 80086d6:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80086de:	69db      	ldr	r3, [r3, #28]
 80086e0:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b0b      	cmp	r3, #11
 80086ea:	d10d      	bne.n	8008708 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	2234      	movs	r2, #52	; 0x34
 80086f0:	fb02 f303 	mul.w	r3, r2, r3
 80086f4:	3390      	adds	r3, #144	; 0x90
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	4413      	add	r3, r2
 80086fa:	2234      	movs	r2, #52	; 0x34
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f002 fd82 	bl	800b208 <memcpy>
    return USBH_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	e000      	b.n	800870a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008708:	2302      	movs	r3, #2
  }
}
 800870a:	4618      	mov	r0, r3
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b088      	sub	sp, #32
 8008716:	af02      	add	r7, sp, #8
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]
 800871e:	460b      	mov	r3, r1
 8008720:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00e      	beq.n	8008756 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800873e:	2b0b      	cmp	r3, #11
 8008740:	d109      	bne.n	8008756 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008742:	7afb      	ldrb	r3, [r7, #11]
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	2134      	movs	r1, #52	; 0x34
 8008748:	fb01 f303 	mul.w	r3, r1, r3
 800874c:	4413      	add	r3, r2
 800874e:	3390      	adds	r3, #144	; 0x90
 8008750:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008752:	2b01      	cmp	r3, #1
 8008754:	d001      	beq.n	800875a <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008756:	2302      	movs	r3, #2
 8008758:	e040      	b.n	80087dc <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2206      	movs	r2, #6
 800875e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008760:	7afb      	ldrb	r3, [r7, #11]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	2134      	movs	r1, #52	; 0x34
 8008766:	fb01 f303 	mul.w	r3, r1, r3
 800876a:	4413      	add	r3, r2
 800876c:	3390      	adds	r3, #144	; 0x90
 800876e:	2206      	movs	r2, #6
 8008770:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	b29a      	uxth	r2, r3
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800877c:	7af9      	ldrb	r1, [r7, #11]
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 fc60 	bl	800904c <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8008792:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008794:	e016      	b.n	80087c4 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	1ad2      	subs	r2, r2, r3
 80087a0:	6a3b      	ldr	r3, [r7, #32]
 80087a2:	f242 7110 	movw	r1, #10000	; 0x2710
 80087a6:	fb01 f303 	mul.w	r3, r1, r3
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d805      	bhi.n	80087ba <USBH_MSC_Read+0xa8>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d104      	bne.n	80087c4 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	2201      	movs	r2, #1
 80087be:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80087c0:	2302      	movs	r3, #2
 80087c2:	e00b      	b.n	80087dc <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80087c4:	7afb      	ldrb	r3, [r7, #11]
 80087c6:	4619      	mov	r1, r3
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f7ff fe65 	bl	8008498 <USBH_MSC_RdWrProcess>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d0e0      	beq.n	8008796 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2201      	movs	r2, #1
 80087d8:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	607a      	str	r2, [r7, #4]
 80087ee:	603b      	str	r3, [r7, #0]
 80087f0:	460b      	mov	r3, r1
 80087f2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00e      	beq.n	8008828 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008810:	2b0b      	cmp	r3, #11
 8008812:	d109      	bne.n	8008828 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008814:	7afb      	ldrb	r3, [r7, #11]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	2134      	movs	r1, #52	; 0x34
 800881a:	fb01 f303 	mul.w	r3, r1, r3
 800881e:	4413      	add	r3, r2
 8008820:	3390      	adds	r3, #144	; 0x90
 8008822:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008824:	2b01      	cmp	r3, #1
 8008826:	d001      	beq.n	800882c <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008828:	2302      	movs	r3, #2
 800882a:	e040      	b.n	80088ae <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2207      	movs	r2, #7
 8008830:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008832:	7afb      	ldrb	r3, [r7, #11]
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	2134      	movs	r1, #52	; 0x34
 8008838:	fb01 f303 	mul.w	r3, r1, r3
 800883c:	4413      	add	r3, r2
 800883e:	3390      	adds	r3, #144	; 0x90
 8008840:	2207      	movs	r2, #7
 8008842:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008844:	7afb      	ldrb	r3, [r7, #11]
 8008846:	b29a      	uxth	r2, r3
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800884e:	7af9      	ldrb	r1, [r7, #11]
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f000 fb8c 	bl	8008f76 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8008864:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008866:	e016      	b.n	8008896 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	1ad2      	subs	r2, r2, r3
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	f242 7110 	movw	r1, #10000	; 0x2710
 8008878:	fb01 f303 	mul.w	r3, r1, r3
 800887c:	429a      	cmp	r2, r3
 800887e:	d805      	bhi.n	800888c <USBH_MSC_Write+0xa8>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d104      	bne.n	8008896 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2201      	movs	r2, #1
 8008890:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008892:	2302      	movs	r3, #2
 8008894:	e00b      	b.n	80088ae <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008896:	7afb      	ldrb	r3, [r7, #11]
 8008898:	4619      	mov	r1, r3
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f7ff fdfc 	bl	8008498 <USBH_MSC_RdWrProcess>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d0e0      	beq.n	8008868 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2201      	movs	r2, #1
 80088aa:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2221      	movs	r2, #33	; 0x21
 80088c2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	22ff      	movs	r2, #255	; 0xff
 80088c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80088dc:	2200      	movs	r2, #0
 80088de:	2100      	movs	r1, #0
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fcff 	bl	80092e4 <USBH_CtlReq>
 80088e6:	4603      	mov	r3, r0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80088fc:	2301      	movs	r3, #1
 80088fe:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008900:	2301      	movs	r3, #1
 8008902:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008904:	2301      	movs	r3, #1
 8008906:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008908:	2300      	movs	r3, #0
 800890a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008912:	69db      	ldr	r3, [r3, #28]
 8008914:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008920:	3b01      	subs	r3, #1
 8008922:	2b0a      	cmp	r3, #10
 8008924:	f200 822a 	bhi.w	8008d7c <USBH_MSC_BOT_Process+0x48c>
 8008928:	a201      	add	r2, pc, #4	; (adr r2, 8008930 <USBH_MSC_BOT_Process+0x40>)
 800892a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892e:	bf00      	nop
 8008930:	0800895d 	.word	0x0800895d
 8008934:	08008985 	.word	0x08008985
 8008938:	08008a43 	.word	0x08008a43
 800893c:	08008a61 	.word	0x08008a61
 8008940:	08008b1d 	.word	0x08008b1d
 8008944:	08008b3f 	.word	0x08008b3f
 8008948:	08008c2b 	.word	0x08008c2b
 800894c:	08008c47 	.word	0x08008c47
 8008950:	08008cd1 	.word	0x08008cd1
 8008954:	08008d01 	.word	0x08008d01
 8008958:	08008d63 	.word	0x08008d63
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	78fa      	ldrb	r2, [r7, #3]
 8008960:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	795b      	ldrb	r3, [r3, #5]
 8008976:	2201      	movs	r2, #1
 8008978:	9200      	str	r2, [sp, #0]
 800897a:	221f      	movs	r2, #31
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 ffa2 	bl	80098c6 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008982:	e20a      	b.n	8008d9a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	795b      	ldrb	r3, [r3, #5]
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f002 fa73 	bl	800ae76 <USBH_LL_GetURBState>
 8008990:	4603      	mov	r3, r0
 8008992:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008994:	7d3b      	ldrb	r3, [r7, #20]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d126      	bne.n	80089e8 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00f      	beq.n	80089c2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80089a8:	b25b      	sxtb	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	da04      	bge.n	80089b8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2203      	movs	r2, #3
 80089b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80089b6:	e008      	b.n	80089ca <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	2205      	movs	r2, #5
 80089bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80089c0:	e003      	b.n	80089ca <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2207      	movs	r2, #7
 80089c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2202      	movs	r2, #2
 80089ce:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80089de:	2200      	movs	r2, #0
 80089e0:	4619      	mov	r1, r3
 80089e2:	f001 f967 	bl	8009cb4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089e6:	e1cb      	b.n	8008d80 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089e8:	7d3b      	ldrb	r3, [r7, #20]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d112      	bne.n	8008a14 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2202      	movs	r2, #2
 80089fa:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	f001 f951 	bl	8009cb4 <osMessagePut>
      break;
 8008a12:	e1b5      	b.n	8008d80 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 8008a14:	7d3b      	ldrb	r3, [r7, #20]
 8008a16:	2b05      	cmp	r3, #5
 8008a18:	f040 81b2 	bne.w	8008d80 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	220a      	movs	r2, #10
 8008a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8008a38:	2200      	movs	r2, #0
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	f001 f93a 	bl	8009cb4 <osMessagePut>
      break;
 8008a40:	e19e      	b.n	8008d80 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	895a      	ldrh	r2, [r3, #10]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	791b      	ldrb	r3, [r3, #4]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 ff5d 	bl	8009910 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2204      	movs	r2, #4
 8008a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8008a5e:	e19c      	b.n	8008d9a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	791b      	ldrb	r3, [r3, #4]
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f002 fa05 	bl	800ae76 <USBH_LL_GetURBState>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008a70:	7d3b      	ldrb	r3, [r7, #20]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d13b      	bne.n	8008aee <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	8952      	ldrh	r2, [r2, #10]
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d910      	bls.n	8008aa4 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	8952      	ldrh	r2, [r2, #10]
 8008a8c:	441a      	add	r2, r3
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	8952      	ldrh	r2, [r2, #10]
 8008a9c:	1a9a      	subs	r2, r3, r2
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	65da      	str	r2, [r3, #92]	; 0x5c
 8008aa2:	e002      	b.n	8008aaa <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00a      	beq.n	8008ac8 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	895a      	ldrh	r2, [r3, #10]
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	791b      	ldrb	r3, [r3, #4]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 ff25 	bl	8009910 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008ac6:	e15d      	b.n	8008d84 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	2207      	movs	r2, #7
 8008acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	f001 f8e4 	bl	8009cb4 <osMessagePut>
      break;
 8008aec:	e14a      	b.n	8008d84 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 8008aee:	7d3b      	ldrb	r3, [r7, #20]
 8008af0:	2b05      	cmp	r3, #5
 8008af2:	f040 8147 	bne.w	8008d84 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	2209      	movs	r2, #9
 8008afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2202      	movs	r2, #2
 8008b02:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8008b12:	2200      	movs	r2, #0
 8008b14:	4619      	mov	r1, r3
 8008b16:	f001 f8cd 	bl	8009cb4 <osMessagePut>
      break;
 8008b1a:	e133      	b.n	8008d84 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	891a      	ldrh	r2, [r3, #8]
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	795b      	ldrb	r3, [r3, #5]
 8008b2a:	2001      	movs	r0, #1
 8008b2c:	9000      	str	r0, [sp, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fec9 	bl	80098c6 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	2206      	movs	r2, #6
 8008b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b3c:	e12d      	b.n	8008d9a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	795b      	ldrb	r3, [r3, #5]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f002 f996 	bl	800ae76 <USBH_LL_GetURBState>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008b4e:	7d3b      	ldrb	r3, [r7, #20]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d13d      	bne.n	8008bd0 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	8912      	ldrh	r2, [r2, #8]
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d910      	bls.n	8008b82 <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	8912      	ldrh	r2, [r2, #8]
 8008b6a:	441a      	add	r2, r3
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	8912      	ldrh	r2, [r2, #8]
 8008b7a:	1a9a      	subs	r2, r3, r2
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b80:	e002      	b.n	8008b88 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	2200      	movs	r2, #0
 8008b86:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00c      	beq.n	8008baa <USBH_MSC_BOT_Process+0x2ba>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	891a      	ldrh	r2, [r3, #8]
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	795b      	ldrb	r3, [r3, #5]
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	9000      	str	r0, [sp, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fe8f 	bl	80098c6 <USBH_BulkSendData>
 8008ba8:	e003      	b.n	8008bb2 <USBH_MSC_BOT_Process+0x2c2>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	2207      	movs	r2, #7
 8008bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	4619      	mov	r1, r3
 8008bca:	f001 f873 	bl	8009cb4 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 8008bce:	e0db      	b.n	8008d88 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008bd0:	7d3b      	ldrb	r3, [r7, #20]
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d112      	bne.n	8008bfc <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	2205      	movs	r2, #5
 8008bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2202      	movs	r2, #2
 8008be2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	f001 f85d 	bl	8009cb4 <osMessagePut>
      break;
 8008bfa:	e0c5      	b.n	8008d88 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 8008bfc:	7d3b      	ldrb	r3, [r7, #20]
 8008bfe:	2b05      	cmp	r3, #5
 8008c00:	f040 80c2 	bne.w	8008d88 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	220a      	movs	r2, #10
 8008c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8008c20:	2200      	movs	r2, #0
 8008c22:	4619      	mov	r1, r3
 8008c24:	f001 f846 	bl	8009cb4 <osMessagePut>
      break;
 8008c28:	e0ae      	b.n	8008d88 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	791b      	ldrb	r3, [r3, #4]
 8008c34:	220d      	movs	r2, #13
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fe6a 	bl	8009910 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	2208      	movs	r2, #8
 8008c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c44:	e0a9      	b.n	8008d9a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	791b      	ldrb	r3, [r3, #4]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f002 f912 	bl	800ae76 <USBH_LL_GetURBState>
 8008c52:	4603      	mov	r3, r0
 8008c54:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008c56:	7d3b      	ldrb	r3, [r7, #20]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d123      	bne.n	8008ca4 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f8c5 	bl	8008dfc <USBH_MSC_DecodeCSW>
 8008c72:	4603      	mov	r3, r0
 8008c74:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008c76:	7d7b      	ldrb	r3, [r7, #21]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d102      	bne.n	8008c82 <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	75fb      	strb	r3, [r7, #23]
 8008c80:	e001      	b.n	8008c86 <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 8008c82:	2302      	movs	r3, #2
 8008c84:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	f001 f809 	bl	8009cb4 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 8008ca2:	e073      	b.n	8008d8c <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 8008ca4:	7d3b      	ldrb	r3, [r7, #20]
 8008ca6:	2b05      	cmp	r3, #5
 8008ca8:	d170      	bne.n	8008d8c <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	2209      	movs	r2, #9
 8008cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	4619      	mov	r1, r3
 8008cca:	f000 fff3 	bl	8009cb4 <osMessagePut>
      break;
 8008cce:	e05d      	b.n	8008d8c <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f864 	bl	8008da4 <USBH_MSC_BOT_Abort>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008ce0:	7dbb      	ldrb	r3, [r7, #22]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d104      	bne.n	8008cf0 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	2207      	movs	r2, #7
 8008cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008cee:	e04f      	b.n	8008d90 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008cf0:	7dbb      	ldrb	r3, [r7, #22]
 8008cf2:	2b04      	cmp	r3, #4
 8008cf4:	d14c      	bne.n	8008d90 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	220b      	movs	r2, #11
 8008cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008cfe:	e047      	b.n	8008d90 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008d00:	78fb      	ldrb	r3, [r7, #3]
 8008d02:	2201      	movs	r2, #1
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f84c 	bl	8008da4 <USBH_MSC_BOT_Abort>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008d10:	7dbb      	ldrb	r3, [r7, #22]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d11d      	bne.n	8008d52 <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	795b      	ldrb	r3, [r3, #5]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f002 f8ec 	bl	800aefa <USBH_LL_GetToggle>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	7959      	ldrb	r1, [r3, #5]
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	f1c3 0301 	rsb	r3, r3, #1
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	461a      	mov	r2, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f002 f8b1 	bl	800ae9c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	791b      	ldrb	r3, [r3, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f002 f8aa 	bl	800ae9c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	2209      	movs	r2, #9
 8008d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008d50:	e020      	b.n	8008d94 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 8008d52:	7dbb      	ldrb	r3, [r7, #22]
 8008d54:	2b04      	cmp	r3, #4
 8008d56:	d11d      	bne.n	8008d94 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	220b      	movs	r2, #11
 8008d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d60:	e018      	b.n	8008d94 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff fda7 	bl	80088b6 <USBH_MSC_BOT_REQ_Reset>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d112      	bne.n	8008d98 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008d7a:	e00d      	b.n	8008d98 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 8008d7c:	bf00      	nop
 8008d7e:	e00c      	b.n	8008d9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 8008d80:	bf00      	nop
 8008d82:	e00a      	b.n	8008d9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 8008d84:	bf00      	nop
 8008d86:	e008      	b.n	8008d9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 8008d88:	bf00      	nop
 8008d8a:	e006      	b.n	8008d9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 8008d8c:	bf00      	nop
 8008d8e:	e004      	b.n	8008d9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 8008d90:	bf00      	nop
 8008d92:	e002      	b.n	8008d9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 8008d94:	bf00      	nop
 8008d96:	e000      	b.n	8008d9a <USBH_MSC_BOT_Process+0x4aa>
      break;
 8008d98:	bf00      	nop
  }
  return status;
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3718      	adds	r7, #24
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
 8008db0:	4613      	mov	r3, r2
 8008db2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008db4:	2302      	movs	r3, #2
 8008db6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008dbe:	69db      	ldr	r3, [r3, #28]
 8008dc0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008dc2:	78bb      	ldrb	r3, [r7, #2]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <USBH_MSC_BOT_Abort+0x2a>
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d009      	beq.n	8008de0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008dcc:	e011      	b.n	8008df2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	79db      	ldrb	r3, [r3, #7]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fa61 	bl	800929c <USBH_ClrFeature>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	73fb      	strb	r3, [r7, #15]
      break;
 8008dde:	e008      	b.n	8008df2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	799b      	ldrb	r3, [r3, #6]
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fa58 	bl	800929c <USBH_ClrFeature>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]
      break;
 8008df0:	bf00      	nop
  }
  return status;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	791b      	ldrb	r3, [r3, #4]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 ffe8 	bl	800adee <USBH_LL_GetLastXferSize>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b0d      	cmp	r3, #13
 8008e22:	d002      	beq.n	8008e2a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008e24:	2302      	movs	r3, #2
 8008e26:	73fb      	strb	r3, [r7, #15]
 8008e28:	e024      	b.n	8008e74 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e2e:	4a14      	ldr	r2, [pc, #80]	; (8008e80 <USBH_MSC_DecodeCSW+0x84>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d11d      	bne.n	8008e70 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d119      	bne.n	8008e74 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d102      	bne.n	8008e50 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	73fb      	strb	r3, [r7, #15]
 8008e4e:	e011      	b.n	8008e74 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d102      	bne.n	8008e60 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	73fb      	strb	r3, [r7, #15]
 8008e5e:	e009      	b.n	8008e74 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d104      	bne.n	8008e74 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	73fb      	strb	r3, [r7, #15]
 8008e6e:	e001      	b.n	8008e74 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008e70:	2302      	movs	r3, #2
 8008e72:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	53425355 	.word	0x53425355

08008e84 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008e92:	2302      	movs	r3, #2
 8008e94:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d002      	beq.n	8008eb0 <USBH_MSC_SCSI_RequestSense+0x2c>
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d03d      	beq.n	8008f2a <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8008eae:	e05d      	b.n	8008f6c <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	220e      	movs	r2, #14
 8008eb4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2280      	movs	r2, #128	; 0x80
 8008eba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	220a      	movs	r2, #10
 8008ec2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	3363      	adds	r3, #99	; 0x63
 8008eca:	2210      	movs	r2, #16
 8008ecc:	2100      	movs	r1, #0
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f002 f9a8 	bl	800b224 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	2203      	movs	r2, #3
 8008ed8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008edc:	7afb      	ldrb	r3, [r7, #11]
 8008ede:	015b      	lsls	r3, r3, #5
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	220e      	movs	r2, #14
 8008efc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	2202      	movs	r2, #2
 8008f14:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f103 0210 	add.w	r2, r3, #16
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008f24:	2301      	movs	r3, #1
 8008f26:	75fb      	strb	r3, [r7, #23]
      break;
 8008f28:	e020      	b.n	8008f6c <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008f2a:	7afb      	ldrb	r3, [r7, #11]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f7ff fcde 	bl	80088f0 <USBH_MSC_BOT_Process>
 8008f34:	4603      	mov	r3, r0
 8008f36:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d115      	bne.n	8008f6a <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f44:	3302      	adds	r3, #2
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	f003 030f 	and.w	r3, r3, #15
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f58:	7b1a      	ldrb	r2, [r3, #12]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f64:	7b5a      	ldrb	r2, [r3, #13]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	709a      	strb	r2, [r3, #2]
      break;
 8008f6a:	bf00      	nop
  }

  return error;
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	607a      	str	r2, [r7, #4]
 8008f80:	603b      	str	r3, [r7, #0]
 8008f82:	460b      	mov	r3, r1
 8008f84:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008f86:	2302      	movs	r3, #2
 8008f88:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d002      	beq.n	8008fa4 <USBH_MSC_SCSI_Write+0x2e>
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d047      	beq.n	8009032 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008fa2:	e04e      	b.n	8009042 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008faa:	461a      	mov	r2, r3
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	fb03 f202 	mul.w	r2, r3, r2
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	220a      	movs	r2, #10
 8008fc2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	3363      	adds	r3, #99	; 0x63
 8008fca:	2210      	movs	r2, #16
 8008fcc:	2100      	movs	r1, #0
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f002 f928 	bl	800b224 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	222a      	movs	r2, #42	; 0x2a
 8008fd8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008fdc:	79fa      	ldrb	r2, [r7, #7]
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008fe4:	79ba      	ldrb	r2, [r7, #6]
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008fec:	797a      	ldrb	r2, [r7, #5]
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008ff4:	1d3b      	adds	r3, r7, #4
 8008ff6:	781a      	ldrb	r2, [r3, #0]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008ffe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009008:	f107 0320 	add.w	r3, r7, #32
 800900c:	781a      	ldrb	r2, [r3, #0]
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	2202      	movs	r2, #2
 8009020:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800902c:	2301      	movs	r3, #1
 800902e:	75fb      	strb	r3, [r7, #23]
      break;
 8009030:	e007      	b.n	8009042 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009032:	7afb      	ldrb	r3, [r7, #11]
 8009034:	4619      	mov	r1, r3
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f7ff fc5a 	bl	80088f0 <USBH_MSC_BOT_Process>
 800903c:	4603      	mov	r3, r0
 800903e:	75fb      	strb	r3, [r7, #23]
      break;
 8009040:	bf00      	nop
  }

  return error;
 8009042:	7dfb      	ldrb	r3, [r7, #23]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3718      	adds	r7, #24
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	607a      	str	r2, [r7, #4]
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	460b      	mov	r3, r1
 800905a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800905c:	2302      	movs	r3, #2
 800905e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009066:	69db      	ldr	r3, [r3, #28]
 8009068:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009070:	2b01      	cmp	r3, #1
 8009072:	d002      	beq.n	800907a <USBH_MSC_SCSI_Read+0x2e>
 8009074:	2b02      	cmp	r3, #2
 8009076:	d047      	beq.n	8009108 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009078:	e04e      	b.n	8009118 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009080:	461a      	mov	r2, r3
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	fb03 f202 	mul.w	r2, r3, r2
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	2280      	movs	r2, #128	; 0x80
 8009090:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	220a      	movs	r2, #10
 8009098:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	3363      	adds	r3, #99	; 0x63
 80090a0:	2210      	movs	r2, #16
 80090a2:	2100      	movs	r1, #0
 80090a4:	4618      	mov	r0, r3
 80090a6:	f002 f8bd 	bl	800b224 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	2228      	movs	r2, #40	; 0x28
 80090ae:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80090b2:	79fa      	ldrb	r2, [r7, #7]
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80090ba:	79ba      	ldrb	r2, [r7, #6]
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80090c2:	797a      	ldrb	r2, [r7, #5]
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80090ca:	1d3b      	adds	r3, r7, #4
 80090cc:	781a      	ldrb	r2, [r3, #0]
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80090d4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80090de:	f107 0320 	add.w	r3, r7, #32
 80090e2:	781a      	ldrb	r2, [r3, #0]
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2202      	movs	r2, #2
 80090f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009102:	2301      	movs	r3, #1
 8009104:	75fb      	strb	r3, [r7, #23]
      break;
 8009106:	e007      	b.n	8009118 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009108:	7afb      	ldrb	r3, [r7, #11]
 800910a:	4619      	mov	r1, r3
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f7ff fbef 	bl	80088f0 <USBH_MSC_BOT_Process>
 8009112:	4603      	mov	r3, r0
 8009114:	75fb      	strb	r3, [r7, #23]
      break;
 8009116:	bf00      	nop
  }

  return error;
 8009118:	7dfb      	ldrb	r3, [r7, #23]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009130:	1c5a      	adds	r2, r3, #1
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f804 	bl	8009146 <USBH_HandleSof>
}
 800913e:	bf00      	nop
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b0b      	cmp	r3, #11
 8009156:	d10a      	bne.n	800916e <USBH_HandleSof+0x28>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	4798      	blx	r3
  }
}
 800916e:	bf00      	nop
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800919a:	2200      	movs	r2, #0
 800919c:	4619      	mov	r1, r3
 800919e:	f000 fd89 	bl	8009cb4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80091a2:	bf00      	nop
}
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 80091ba:	bf00      	nop
}
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	bc80      	pop	{r7}
 80091c2:	4770      	bx	lr

080091c4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80091f8:	2200      	movs	r2, #0
 80091fa:	4619      	mov	r1, r3
 80091fc:	f000 fd5a 	bl	8009cb4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f001 fdc4 	bl	800adb8 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	791b      	ldrb	r3, [r3, #4]
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fb88 	bl	800994c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	795b      	ldrb	r3, [r3, #5]
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fb82 	bl	800994c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800925c:	2200      	movs	r2, #0
 800925e:	4619      	mov	r1, r3
 8009260:	f000 fd28 	bl	8009cb4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800928a:	2200      	movs	r2, #0
 800928c:	4619      	mov	r1, r3
 800928e:	f000 fd11 	bl	8009cb4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	789b      	ldrb	r3, [r3, #2]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d10f      	bne.n	80092d0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80092c2:	78fb      	ldrb	r3, [r7, #3]
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80092d0:	2200      	movs	r2, #0
 80092d2:	2100      	movs	r1, #0
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f805 	bl	80092e4 <USBH_CtlReq>
 80092da:	4603      	mov	r3, r0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	4613      	mov	r3, r2
 80092f0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80092f2:	2301      	movs	r3, #1
 80092f4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	789b      	ldrb	r3, [r3, #2]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d002      	beq.n	8009304 <USBH_CtlReq+0x20>
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d01d      	beq.n	800933e <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 8009302:	e042      	b.n	800938a <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	88fa      	ldrh	r2, [r7, #6]
 800930e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2201      	movs	r2, #1
 8009314:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2202      	movs	r2, #2
 800931a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800931c:	2301      	movs	r3, #1
 800931e:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2203      	movs	r2, #3
 8009324:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009334:	2200      	movs	r2, #0
 8009336:	4619      	mov	r1, r3
 8009338:	f000 fcbc 	bl	8009cb4 <osMessagePut>
      break;
 800933c:	e025      	b.n	800938a <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f000 f828 	bl	8009394 <USBH_HandleControl>
 8009344:	4603      	mov	r3, r0
 8009346:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009348:	7dfb      	ldrb	r3, [r7, #23]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d108      	bne.n	8009360 <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2201      	movs	r2, #1
 8009352:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	75fb      	strb	r3, [r7, #23]
      break;
 800935e:	e013      	b.n	8009388 <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	2b03      	cmp	r3, #3
 8009364:	d108      	bne.n	8009378 <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2201      	movs	r2, #1
 800936a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009372:	2303      	movs	r3, #3
 8009374:	75fb      	strb	r3, [r7, #23]
      break;
 8009376:	e007      	b.n	8009388 <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 8009378:	7dfb      	ldrb	r3, [r7, #23]
 800937a:	2b02      	cmp	r3, #2
 800937c:	d104      	bne.n	8009388 <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 8009384:	2302      	movs	r3, #2
 8009386:	75fb      	strb	r3, [r7, #23]
      break;
 8009388:	bf00      	nop
  }
  return status;
 800938a:	7dfb      	ldrb	r3, [r7, #23]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af02      	add	r7, sp, #8
 800939a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800939c:	2301      	movs	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80093a0:	2300      	movs	r3, #0
 80093a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	7e1b      	ldrb	r3, [r3, #24]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	2b0a      	cmp	r3, #10
 80093ac:	f200 821d 	bhi.w	80097ea <USBH_HandleControl+0x456>
 80093b0:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <USBH_HandleControl+0x24>)
 80093b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b6:	bf00      	nop
 80093b8:	080093e5 	.word	0x080093e5
 80093bc:	080093ff 	.word	0x080093ff
 80093c0:	080094a1 	.word	0x080094a1
 80093c4:	080094c7 	.word	0x080094c7
 80093c8:	08009553 	.word	0x08009553
 80093cc:	0800957d 	.word	0x0800957d
 80093d0:	0800963f 	.word	0x0800963f
 80093d4:	08009661 	.word	0x08009661
 80093d8:	080096f3 	.word	0x080096f3
 80093dc:	08009719 	.word	0x08009719
 80093e0:	080097ab 	.word	0x080097ab
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f103 0110 	add.w	r1, r3, #16
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	795b      	ldrb	r3, [r3, #5]
 80093ee:	461a      	mov	r2, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fa0b 	bl	800980c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2202      	movs	r2, #2
 80093fa:	761a      	strb	r2, [r3, #24]
      break;
 80093fc:	e200      	b.n	8009800 <USBH_HandleControl+0x46c>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	795b      	ldrb	r3, [r3, #5]
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f001 fd36 	bl	800ae76 <USBH_LL_GetURBState>
 800940a:	4603      	mov	r3, r0
 800940c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d12c      	bne.n	800946e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	7c1b      	ldrb	r3, [r3, #16]
 8009418:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800941c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	8adb      	ldrh	r3, [r3, #22]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00a      	beq.n	800943c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009426:	7b7b      	ldrb	r3, [r7, #13]
 8009428:	2b80      	cmp	r3, #128	; 0x80
 800942a:	d103      	bne.n	8009434 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2203      	movs	r2, #3
 8009430:	761a      	strb	r2, [r3, #24]
 8009432:	e00d      	b.n	8009450 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2205      	movs	r2, #5
 8009438:	761a      	strb	r2, [r3, #24]
 800943a:	e009      	b.n	8009450 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800943c:	7b7b      	ldrb	r3, [r7, #13]
 800943e:	2b80      	cmp	r3, #128	; 0x80
 8009440:	d103      	bne.n	800944a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2209      	movs	r2, #9
 8009446:	761a      	strb	r2, [r3, #24]
 8009448:	e002      	b.n	8009450 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2207      	movs	r2, #7
 800944e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2203      	movs	r2, #3
 8009454:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009464:	2200      	movs	r2, #0
 8009466:	4619      	mov	r1, r3
 8009468:	f000 fc24 	bl	8009cb4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800946c:	e1bf      	b.n	80097ee <USBH_HandleControl+0x45a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	2b04      	cmp	r3, #4
 8009472:	d003      	beq.n	800947c <USBH_HandleControl+0xe8>
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	2b02      	cmp	r3, #2
 8009478:	f040 81b9 	bne.w	80097ee <USBH_HandleControl+0x45a>
          phost->Control.state = CTRL_ERROR;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	220b      	movs	r2, #11
 8009480:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2203      	movs	r2, #3
 8009486:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009496:	2200      	movs	r2, #0
 8009498:	4619      	mov	r1, r3
 800949a:	f000 fc0b 	bl	8009cb4 <osMessagePut>
      break;
 800949e:	e1a6      	b.n	80097ee <USBH_HandleControl+0x45a>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6899      	ldr	r1, [r3, #8]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	899a      	ldrh	r2, [r3, #12]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	791b      	ldrb	r3, [r3, #4]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f9e6 	bl	800988a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2204      	movs	r2, #4
 80094c2:	761a      	strb	r2, [r3, #24]
      break;
 80094c4:	e19c      	b.n	8009800 <USBH_HandleControl+0x46c>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	791b      	ldrb	r3, [r3, #4]
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f001 fcd2 	bl	800ae76 <USBH_LL_GetURBState>
 80094d2:	4603      	mov	r3, r0
 80094d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80094d6:	7bbb      	ldrb	r3, [r7, #14]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d110      	bne.n	80094fe <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2209      	movs	r2, #9
 80094e0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2203      	movs	r2, #3
 80094e6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80094f6:	2200      	movs	r2, #0
 80094f8:	4619      	mov	r1, r3
 80094fa:	f000 fbdb 	bl	8009cb4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	2b05      	cmp	r3, #5
 8009502:	d110      	bne.n	8009526 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009504:	2303      	movs	r3, #3
 8009506:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2203      	movs	r2, #3
 800950c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800951c:	2200      	movs	r2, #0
 800951e:	4619      	mov	r1, r3
 8009520:	f000 fbc8 	bl	8009cb4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009524:	e165      	b.n	80097f2 <USBH_HandleControl+0x45e>
        if (URB_Status == USBH_URB_ERROR)
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	2b04      	cmp	r3, #4
 800952a:	f040 8162 	bne.w	80097f2 <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	220b      	movs	r2, #11
 8009532:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2203      	movs	r2, #3
 8009538:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009548:	2200      	movs	r2, #0
 800954a:	4619      	mov	r1, r3
 800954c:	f000 fbb2 	bl	8009cb4 <osMessagePut>
      break;
 8009550:	e14f      	b.n	80097f2 <USBH_HandleControl+0x45e>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6899      	ldr	r1, [r3, #8]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	899a      	ldrh	r2, [r3, #12]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	795b      	ldrb	r3, [r3, #5]
 800955e:	2001      	movs	r0, #1
 8009560:	9000      	str	r0, [sp, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f96c 	bl	8009840 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800956e:	b29a      	uxth	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2206      	movs	r2, #6
 8009578:	761a      	strb	r2, [r3, #24]
      break;
 800957a:	e141      	b.n	8009800 <USBH_HandleControl+0x46c>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	795b      	ldrb	r3, [r3, #5]
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f001 fc77 	bl	800ae76 <USBH_LL_GetURBState>
 8009588:	4603      	mov	r3, r0
 800958a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d111      	bne.n	80095b6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2207      	movs	r2, #7
 8009596:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2203      	movs	r2, #3
 800959c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80095ac:	2200      	movs	r2, #0
 80095ae:	4619      	mov	r1, r3
 80095b0:	f000 fb80 	bl	8009cb4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80095b4:	e11f      	b.n	80097f6 <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_STALL)
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	2b05      	cmp	r3, #5
 80095ba:	d113      	bne.n	80095e4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	220c      	movs	r2, #12
 80095c0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80095c2:	2303      	movs	r3, #3
 80095c4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2203      	movs	r2, #3
 80095ca:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80095da:	2200      	movs	r2, #0
 80095dc:	4619      	mov	r1, r3
 80095de:	f000 fb69 	bl	8009cb4 <osMessagePut>
      break;
 80095e2:	e108      	b.n	80097f6 <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_NOTREADY)
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d111      	bne.n	800960e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2205      	movs	r2, #5
 80095ee:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2203      	movs	r2, #3
 80095f4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009604:	2200      	movs	r2, #0
 8009606:	4619      	mov	r1, r3
 8009608:	f000 fb54 	bl	8009cb4 <osMessagePut>
      break;
 800960c:	e0f3      	b.n	80097f6 <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 800960e:	7bbb      	ldrb	r3, [r7, #14]
 8009610:	2b04      	cmp	r3, #4
 8009612:	f040 80f0 	bne.w	80097f6 <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	220b      	movs	r2, #11
 800961a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800961c:	2302      	movs	r3, #2
 800961e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2203      	movs	r2, #3
 8009624:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009634:	2200      	movs	r2, #0
 8009636:	4619      	mov	r1, r3
 8009638:	f000 fb3c 	bl	8009cb4 <osMessagePut>
      break;
 800963c:	e0db      	b.n	80097f6 <USBH_HandleControl+0x462>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	791b      	ldrb	r3, [r3, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	2100      	movs	r1, #0
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f91f 	bl	800988a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009652:	b29a      	uxth	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2208      	movs	r2, #8
 800965c:	761a      	strb	r2, [r3, #24]

      break;
 800965e:	e0cf      	b.n	8009800 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	791b      	ldrb	r3, [r3, #4]
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f001 fc05 	bl	800ae76 <USBH_LL_GetURBState>
 800966c:	4603      	mov	r3, r0
 800966e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009670:	7bbb      	ldrb	r3, [r7, #14]
 8009672:	2b01      	cmp	r3, #1
 8009674:	d113      	bne.n	800969e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	220d      	movs	r2, #13
 800967a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2203      	movs	r2, #3
 8009684:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009694:	2200      	movs	r2, #0
 8009696:	4619      	mov	r1, r3
 8009698:	f000 fb0c 	bl	8009cb4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800969c:	e0ad      	b.n	80097fa <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_ERROR)
 800969e:	7bbb      	ldrb	r3, [r7, #14]
 80096a0:	2b04      	cmp	r3, #4
 80096a2:	d111      	bne.n	80096c8 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	220b      	movs	r2, #11
 80096a8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2203      	movs	r2, #3
 80096ae:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80096be:	2200      	movs	r2, #0
 80096c0:	4619      	mov	r1, r3
 80096c2:	f000 faf7 	bl	8009cb4 <osMessagePut>
      break;
 80096c6:	e098      	b.n	80097fa <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_STALL)
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
 80096ca:	2b05      	cmp	r3, #5
 80096cc:	f040 8095 	bne.w	80097fa <USBH_HandleControl+0x466>
          status = USBH_NOT_SUPPORTED;
 80096d0:	2303      	movs	r3, #3
 80096d2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2203      	movs	r2, #3
 80096d8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80096e8:	2200      	movs	r2, #0
 80096ea:	4619      	mov	r1, r3
 80096ec:	f000 fae2 	bl	8009cb4 <osMessagePut>
      break;
 80096f0:	e083      	b.n	80097fa <USBH_HandleControl+0x466>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	795b      	ldrb	r3, [r3, #5]
 80096f6:	2201      	movs	r2, #1
 80096f8:	9200      	str	r2, [sp, #0]
 80096fa:	2200      	movs	r2, #0
 80096fc:	2100      	movs	r1, #0
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f89e 	bl	8009840 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800970a:	b29a      	uxth	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	220a      	movs	r2, #10
 8009714:	761a      	strb	r2, [r3, #24]
      break;
 8009716:	e073      	b.n	8009800 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	795b      	ldrb	r3, [r3, #5]
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f001 fba9 	bl	800ae76 <USBH_LL_GetURBState>
 8009724:	4603      	mov	r3, r0
 8009726:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d113      	bne.n	8009756 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	220d      	movs	r2, #13
 8009736:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2203      	movs	r2, #3
 800973c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800974c:	2200      	movs	r2, #0
 800974e:	4619      	mov	r1, r3
 8009750:	f000 fab0 	bl	8009cb4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009754:	e053      	b.n	80097fe <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	2b02      	cmp	r3, #2
 800975a:	d111      	bne.n	8009780 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2209      	movs	r2, #9
 8009760:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2203      	movs	r2, #3
 8009766:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009776:	2200      	movs	r2, #0
 8009778:	4619      	mov	r1, r3
 800977a:	f000 fa9b 	bl	8009cb4 <osMessagePut>
      break;
 800977e:	e03e      	b.n	80097fe <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_ERROR)
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	2b04      	cmp	r3, #4
 8009784:	d13b      	bne.n	80097fe <USBH_HandleControl+0x46a>
          phost->Control.state = CTRL_ERROR;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	220b      	movs	r2, #11
 800978a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2203      	movs	r2, #3
 8009790:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80097a0:	2200      	movs	r2, #0
 80097a2:	4619      	mov	r1, r3
 80097a4:	f000 fa86 	bl	8009cb4 <osMessagePut>
      break;
 80097a8:	e029      	b.n	80097fe <USBH_HandleControl+0x46a>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	7e5b      	ldrb	r3, [r3, #25]
 80097ae:	3301      	adds	r3, #1
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	765a      	strb	r2, [r3, #25]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	7e5b      	ldrb	r3, [r3, #25]
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d806      	bhi.n	80097cc <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80097ca:	e019      	b.n	8009800 <USBH_HandleControl+0x46c>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80097d2:	2106      	movs	r1, #6
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80097e4:	2302      	movs	r3, #2
 80097e6:	73fb      	strb	r3, [r7, #15]
      break;
 80097e8:	e00a      	b.n	8009800 <USBH_HandleControl+0x46c>

    default:
      break;
 80097ea:	bf00      	nop
 80097ec:	e008      	b.n	8009800 <USBH_HandleControl+0x46c>
      break;
 80097ee:	bf00      	nop
 80097f0:	e006      	b.n	8009800 <USBH_HandleControl+0x46c>
      break;
 80097f2:	bf00      	nop
 80097f4:	e004      	b.n	8009800 <USBH_HandleControl+0x46c>
      break;
 80097f6:	bf00      	nop
 80097f8:	e002      	b.n	8009800 <USBH_HandleControl+0x46c>
      break;
 80097fa:	bf00      	nop
 80097fc:	e000      	b.n	8009800 <USBH_HandleControl+0x46c>
      break;
 80097fe:	bf00      	nop
  }

  return status;
 8009800:	7bfb      	ldrb	r3, [r7, #15]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop

0800980c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af04      	add	r7, sp, #16
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	4613      	mov	r3, r2
 8009818:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800981a:	79f9      	ldrb	r1, [r7, #7]
 800981c:	2300      	movs	r3, #0
 800981e:	9303      	str	r3, [sp, #12]
 8009820:	2308      	movs	r3, #8
 8009822:	9302      	str	r3, [sp, #8]
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	2300      	movs	r3, #0
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	2300      	movs	r3, #0
 800982e:	2200      	movs	r2, #0
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f001 faef 	bl	800ae14 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af04      	add	r7, sp, #16
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	4611      	mov	r1, r2
 800984c:	461a      	mov	r2, r3
 800984e:	460b      	mov	r3, r1
 8009850:	80fb      	strh	r3, [r7, #6]
 8009852:	4613      	mov	r3, r2
 8009854:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009860:	2300      	movs	r3, #0
 8009862:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009864:	7979      	ldrb	r1, [r7, #5]
 8009866:	7e3b      	ldrb	r3, [r7, #24]
 8009868:	9303      	str	r3, [sp, #12]
 800986a:	88fb      	ldrh	r3, [r7, #6]
 800986c:	9302      	str	r3, [sp, #8]
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	2301      	movs	r3, #1
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	2300      	movs	r3, #0
 8009878:	2200      	movs	r2, #0
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f001 faca 	bl	800ae14 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b088      	sub	sp, #32
 800988e:	af04      	add	r7, sp, #16
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	4611      	mov	r1, r2
 8009896:	461a      	mov	r2, r3
 8009898:	460b      	mov	r3, r1
 800989a:	80fb      	strh	r3, [r7, #6]
 800989c:	4613      	mov	r3, r2
 800989e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80098a0:	7979      	ldrb	r1, [r7, #5]
 80098a2:	2300      	movs	r3, #0
 80098a4:	9303      	str	r3, [sp, #12]
 80098a6:	88fb      	ldrh	r3, [r7, #6]
 80098a8:	9302      	str	r3, [sp, #8]
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	2301      	movs	r3, #1
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	2300      	movs	r3, #0
 80098b4:	2201      	movs	r2, #1
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f001 faac 	bl	800ae14 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80098bc:	2300      	movs	r3, #0

}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b088      	sub	sp, #32
 80098ca:	af04      	add	r7, sp, #16
 80098cc:	60f8      	str	r0, [r7, #12]
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	4611      	mov	r1, r2
 80098d2:	461a      	mov	r2, r3
 80098d4:	460b      	mov	r3, r1
 80098d6:	80fb      	strh	r3, [r7, #6]
 80098d8:	4613      	mov	r3, r2
 80098da:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80098e6:	2300      	movs	r3, #0
 80098e8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80098ea:	7979      	ldrb	r1, [r7, #5]
 80098ec:	7e3b      	ldrb	r3, [r7, #24]
 80098ee:	9303      	str	r3, [sp, #12]
 80098f0:	88fb      	ldrh	r3, [r7, #6]
 80098f2:	9302      	str	r3, [sp, #8]
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	9301      	str	r3, [sp, #4]
 80098f8:	2301      	movs	r3, #1
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	2302      	movs	r3, #2
 80098fe:	2200      	movs	r2, #0
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f001 fa87 	bl	800ae14 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af04      	add	r7, sp, #16
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	4611      	mov	r1, r2
 800991c:	461a      	mov	r2, r3
 800991e:	460b      	mov	r3, r1
 8009920:	80fb      	strh	r3, [r7, #6]
 8009922:	4613      	mov	r3, r2
 8009924:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009926:	7979      	ldrb	r1, [r7, #5]
 8009928:	2300      	movs	r3, #0
 800992a:	9303      	str	r3, [sp, #12]
 800992c:	88fb      	ldrh	r3, [r7, #6]
 800992e:	9302      	str	r3, [sp, #8]
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	9301      	str	r3, [sp, #4]
 8009934:	2301      	movs	r3, #1
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	2302      	movs	r3, #2
 800993a:	2201      	movs	r2, #1
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f001 fa69 	bl	800ae14 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009958:	78fb      	ldrb	r3, [r7, #3]
 800995a:	2b0a      	cmp	r3, #10
 800995c:	d80b      	bhi.n	8009976 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800995e:	78fa      	ldrb	r2, [r7, #3]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	32e0      	adds	r2, #224	; 0xe0
 8009964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009968:	78fa      	ldrb	r2, [r7, #3]
 800996a:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	32e0      	adds	r2, #224	; 0xe0
 8009972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	bc80      	pop	{r7}
 8009980:	4770      	bx	lr
	...

08009984 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	4613      	mov	r3, r2
 8009990:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009992:	2301      	movs	r3, #1
 8009994:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009996:	2300      	movs	r3, #0
 8009998:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800999a:	4b1e      	ldr	r3, [pc, #120]	; (8009a14 <FATFS_LinkDriverEx+0x90>)
 800999c:	7a5b      	ldrb	r3, [r3, #9]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d831      	bhi.n	8009a08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80099a4:	4b1b      	ldr	r3, [pc, #108]	; (8009a14 <FATFS_LinkDriverEx+0x90>)
 80099a6:	7a5b      	ldrb	r3, [r3, #9]
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	461a      	mov	r2, r3
 80099ac:	4b19      	ldr	r3, [pc, #100]	; (8009a14 <FATFS_LinkDriverEx+0x90>)
 80099ae:	2100      	movs	r1, #0
 80099b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80099b2:	4b18      	ldr	r3, [pc, #96]	; (8009a14 <FATFS_LinkDriverEx+0x90>)
 80099b4:	7a5b      	ldrb	r3, [r3, #9]
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	4a16      	ldr	r2, [pc, #88]	; (8009a14 <FATFS_LinkDriverEx+0x90>)
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80099c2:	4b14      	ldr	r3, [pc, #80]	; (8009a14 <FATFS_LinkDriverEx+0x90>)
 80099c4:	7a5b      	ldrb	r3, [r3, #9]
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	461a      	mov	r2, r3
 80099ca:	4b12      	ldr	r3, [pc, #72]	; (8009a14 <FATFS_LinkDriverEx+0x90>)
 80099cc:	4413      	add	r3, r2
 80099ce:	79fa      	ldrb	r2, [r7, #7]
 80099d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80099d2:	4b10      	ldr	r3, [pc, #64]	; (8009a14 <FATFS_LinkDriverEx+0x90>)
 80099d4:	7a5b      	ldrb	r3, [r3, #9]
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	1c5a      	adds	r2, r3, #1
 80099da:	b2d1      	uxtb	r1, r2
 80099dc:	4a0d      	ldr	r2, [pc, #52]	; (8009a14 <FATFS_LinkDriverEx+0x90>)
 80099de:	7251      	strb	r1, [r2, #9]
 80099e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80099e2:	7dbb      	ldrb	r3, [r7, #22]
 80099e4:	3330      	adds	r3, #48	; 0x30
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	3301      	adds	r3, #1
 80099f0:	223a      	movs	r2, #58	; 0x3a
 80099f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	3302      	adds	r3, #2
 80099f8:	222f      	movs	r2, #47	; 0x2f
 80099fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	3303      	adds	r3, #3
 8009a00:	2200      	movs	r2, #0
 8009a02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	371c      	adds	r7, #28
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bc80      	pop	{r7}
 8009a12:	4770      	bx	lr
 8009a14:	20000364 	.word	0x20000364

08009a18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009a22:	2200      	movs	r2, #0
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7ff ffac 	bl	8009984 <FATFS_LinkDriverEx>
 8009a2c:	4603      	mov	r3, r0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	71fb      	strb	r3, [r7, #7]
  return RES_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bc80      	pop	{r7}
 8009a4a:	4770      	bx	lr

08009a4c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	4603      	mov	r3, r0
 8009a54:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	73fb      	strb	r3, [r7, #15]
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 8009a5a:	79fb      	ldrb	r3, [r7, #7]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	4808      	ldr	r0, [pc, #32]	; (8009a80 <USBH_status+0x34>)
 8009a60:	f7fe fe0e 	bl	8008680 <USBH_MSC_UnitIsReady>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d002      	beq.n	8009a70 <USBH_status+0x24>
  {
    res = RES_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73fb      	strb	r3, [r7, #15]
 8009a6e:	e001      	b.n	8009a74 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	73fb      	strb	r3, [r7, #15]
  }
  
  return res;
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20004d98 	.word	0x20004d98

08009a84 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b094      	sub	sp, #80	; 0x50
 8009a88:	af02      	add	r7, sp, #8
 8009a8a:	60b9      	str	r1, [r7, #8]
 8009a8c:	607a      	str	r2, [r7, #4]
 8009a8e:	603b      	str	r3, [r7, #0]
 8009a90:	4603      	mov	r3, r0
 8009a92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	f003 0303 	and.w	r3, r3, #3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d002      	beq.n	8009ab0 <USBH_read+0x2c>
      {
        break;
      }
    }
#else
    return res;
 8009aaa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009aae:	e02c      	b.n	8009b0a <USBH_read+0x86>
#endif
  }
  else
  {
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 8009ab0:	7bf9      	ldrb	r1, [r7, #15]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	4816      	ldr	r0, [pc, #88]	; (8009b14 <USBH_read+0x90>)
 8009abc:	f7fe fe29 	bl	8008712 <USBH_MSC_Read>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 8009ac6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d103      	bne.n	8009ad6 <USBH_read+0x52>
  {
    res = RES_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009ad4:	e017      	b.n	8009b06 <USBH_read+0x82>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 8009ad6:	f107 0210 	add.w	r2, r7, #16
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
 8009adc:	4619      	mov	r1, r3
 8009ade:	480d      	ldr	r0, [pc, #52]	; (8009b14 <USBH_read+0x90>)
 8009ae0:	f7fe fdf3 	bl	80086ca <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 8009ae4:	7f7b      	ldrb	r3, [r7, #29]
 8009ae6:	2b3a      	cmp	r3, #58	; 0x3a
 8009ae8:	d005      	beq.n	8009af6 <USBH_read+0x72>
 8009aea:	2b3a      	cmp	r3, #58	; 0x3a
 8009aec:	dc07      	bgt.n	8009afe <USBH_read+0x7a>
 8009aee:	2b04      	cmp	r3, #4
 8009af0:	d001      	beq.n	8009af6 <USBH_read+0x72>
 8009af2:	2b28      	cmp	r3, #40	; 0x28
 8009af4:	d103      	bne.n	8009afe <USBH_read+0x7a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE: 
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
 8009af6:	2303      	movs	r3, #3
 8009af8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8009afc:	e003      	b.n	8009b06 <USBH_read+0x82>
      
    default:
      res = RES_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009b04:	bf00      	nop
    }
  }
  
  return res;
 8009b06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3748      	adds	r7, #72	; 0x48
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20004d98 	.word	0x20004d98

08009b18 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b094      	sub	sp, #80	; 0x50
 8009b1c:	af02      	add	r7, sp, #8
 8009b1e:	60b9      	str	r1, [r7, #8]
 8009b20:	607a      	str	r2, [r7, #4]
 8009b22:	603b      	str	r3, [r7, #0]
 8009b24:	4603      	mov	r3, r0
 8009b26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR; 
 8009b28:	2301      	movs	r3, #1
 8009b2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;  
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d002      	beq.n	8009b44 <USBH_write+0x2c>
      {
        break;
      }
    }
#else
    return res;
 8009b3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b42:	e034      	b.n	8009bae <USBH_write+0x96>
#endif
  }
  else
  {
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 8009b44:	7bf9      	ldrb	r1, [r7, #15]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	481a      	ldr	r0, [pc, #104]	; (8009bb8 <USBH_write+0xa0>)
 8009b50:	f7fe fe48 	bl	80087e4 <USBH_MSC_Write>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 8009b5a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d103      	bne.n	8009b6a <USBH_write+0x52>
  {
    res = RES_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009b68:	e01f      	b.n	8009baa <USBH_write+0x92>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 8009b6a:	f107 0210 	add.w	r2, r7, #16
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	4619      	mov	r1, r3
 8009b72:	4811      	ldr	r0, [pc, #68]	; (8009bb8 <USBH_write+0xa0>)
 8009b74:	f7fe fda9 	bl	80086ca <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 8009b78:	7f7b      	ldrb	r3, [r7, #29]
 8009b7a:	2b3a      	cmp	r3, #58	; 0x3a
 8009b7c:	d00d      	beq.n	8009b9a <USBH_write+0x82>
 8009b7e:	2b3a      	cmp	r3, #58	; 0x3a
 8009b80:	dc0f      	bgt.n	8009ba2 <USBH_write+0x8a>
 8009b82:	2b28      	cmp	r3, #40	; 0x28
 8009b84:	d009      	beq.n	8009b9a <USBH_write+0x82>
 8009b86:	2b28      	cmp	r3, #40	; 0x28
 8009b88:	dc0b      	bgt.n	8009ba2 <USBH_write+0x8a>
 8009b8a:	2b04      	cmp	r3, #4
 8009b8c:	d005      	beq.n	8009b9a <USBH_write+0x82>
 8009b8e:	2b27      	cmp	r3, #39	; 0x27
 8009b90:	d107      	bne.n	8009ba2 <USBH_write+0x8a>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009b92:	2302      	movs	r3, #2
 8009b94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009b98:	e007      	b.n	8009baa <USBH_write+0x92>
      
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");      
      res = RES_NOTRDY;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8009ba0:	e003      	b.n	8009baa <USBH_write+0x92>
      
    default:
      res = RES_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009ba8:	bf00      	nop
    }
  }
  
  return res;   
 8009baa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3748      	adds	r7, #72	; 0x48
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	20004d98 	.word	0x20004d98

08009bbc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b090      	sub	sp, #64	; 0x40
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	603a      	str	r2, [r7, #0]
 8009bc6:	71fb      	strb	r3, [r7, #7]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;
  
  switch (cmd)
 8009bd2:	79bb      	ldrb	r3, [r7, #6]
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d850      	bhi.n	8009c7a <USBH_ioctl+0xbe>
 8009bd8:	a201      	add	r2, pc, #4	; (adr r2, 8009be0 <USBH_ioctl+0x24>)
 8009bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bde:	bf00      	nop
 8009be0:	08009bf1 	.word	0x08009bf1
 8009be4:	08009bf9 	.word	0x08009bf9
 8009be8:	08009c23 	.word	0x08009c23
 8009bec:	08009c4f 	.word	0x08009c4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC: 
    res = RES_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009bf6:	e043      	b.n	8009c80 <USBH_ioctl+0xc4>
    
  /* Get number of sectors on the disk (DWORD) */  
  case GET_SECTOR_COUNT : 
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 8009bf8:	f107 0208 	add.w	r2, r7, #8
 8009bfc:	79fb      	ldrb	r3, [r7, #7]
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4822      	ldr	r0, [pc, #136]	; (8009c8c <USBH_ioctl+0xd0>)
 8009c02:	f7fe fd62 	bl	80086ca <USBH_MSC_GetLUNInfo>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d106      	bne.n	8009c1a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009c12:	2300      	movs	r3, #0
 8009c14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009c18:	e032      	b.n	8009c80 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009c20:	e02e      	b.n	8009c80 <USBH_ioctl+0xc4>
    
  /* Get R/W sector size (WORD) */  
  case GET_SECTOR_SIZE :	
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 8009c22:	f107 0208 	add.w	r2, r7, #8
 8009c26:	79fb      	ldrb	r3, [r7, #7]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4818      	ldr	r0, [pc, #96]	; (8009c8c <USBH_ioctl+0xd0>)
 8009c2c:	f7fe fd4d 	bl	80086ca <USBH_MSC_GetLUNInfo>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d107      	bne.n	8009c46 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009c36:	8a3b      	ldrh	r3, [r7, #16]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009c44:	e01c      	b.n	8009c80 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009c4c:	e018      	b.n	8009c80 <USBH_ioctl+0xc4>
    
    /* Get erase block size in unit of sector (DWORD) */ 
  case GET_BLOCK_SIZE : 
    
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 8009c4e:	f107 0208 	add.w	r2, r7, #8
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	4619      	mov	r1, r3
 8009c56:	480d      	ldr	r0, [pc, #52]	; (8009c8c <USBH_ioctl+0xd0>)
 8009c58:	f7fe fd37 	bl	80086ca <USBH_MSC_GetLUNInfo>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d107      	bne.n	8009c72 <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009c62:	8a3b      	ldrh	r3, [r7, #16]
 8009c64:	461a      	mov	r2, r3
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009c70:	e006      	b.n	8009c80 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009c78:	e002      	b.n	8009c80 <USBH_ioctl+0xc4>
    
  default:
    res = RES_PARERR;
 8009c7a:	2304      	movs	r3, #4
 8009c7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  return res;
 8009c80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3740      	adds	r7, #64	; 0x40
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	20004d98 	.word	0x20004d98

08009c90 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c96:	f3ef 8305 	mrs	r3, IPSR
 8009c9a:	607b      	str	r3, [r7, #4]
  return(result);
 8009c9c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	bf14      	ite	ne
 8009ca2:	2301      	movne	r3, #1
 8009ca4:	2300      	moveq	r3, #0
 8009ca6:	b2db      	uxtb	r3, r3
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bc80      	pop	{r7}
 8009cb0:	4770      	bx	lr
	...

08009cb4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d101      	bne.n	8009cd2 <osMessagePut+0x1e>
    ticks = 1;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009cd2:	f7ff ffdd 	bl	8009c90 <inHandlerMode>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d018      	beq.n	8009d0e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009cdc:	f107 0210 	add.w	r2, r7, #16
 8009ce0:	f107 0108 	add.w	r1, r7, #8
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f000 f9a6 	bl	800a038 <xQueueGenericSendFromISR>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d001      	beq.n	8009cf6 <osMessagePut+0x42>
      return osErrorOS;
 8009cf2:	23ff      	movs	r3, #255	; 0xff
 8009cf4:	e018      	b.n	8009d28 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d014      	beq.n	8009d26 <osMessagePut+0x72>
 8009cfc:	4b0c      	ldr	r3, [pc, #48]	; (8009d30 <osMessagePut+0x7c>)
 8009cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	e00b      	b.n	8009d26 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009d0e:	f107 0108 	add.w	r1, r7, #8
 8009d12:	2300      	movs	r3, #0
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f890 	bl	8009e3c <xQueueGenericSend>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d001      	beq.n	8009d26 <osMessagePut+0x72>
      return osErrorOS;
 8009d22:	23ff      	movs	r3, #255	; 0xff
 8009d24:	e000      	b.n	8009d28 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3718      	adds	r7, #24
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	e000ed04 	.word	0xe000ed04

08009d34 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	689a      	ldr	r2, [r3, #8]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	601a      	str	r2, [r3, #0]
}
 8009d70:	bf00      	nop
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bc80      	pop	{r7}
 8009d78:	4770      	bx	lr

08009d7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b085      	sub	sp, #20
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d90:	d103      	bne.n	8009d9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	60fb      	str	r3, [r7, #12]
 8009d98:	e00c      	b.n	8009db4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	3308      	adds	r3, #8
 8009d9e:	60fb      	str	r3, [r7, #12]
 8009da0:	e002      	b.n	8009da8 <vListInsert+0x2e>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d2f6      	bcs.n	8009da2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	683a      	ldr	r2, [r7, #0]
 8009dc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	601a      	str	r2, [r3, #0]
}
 8009de0:	bf00      	nop
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bc80      	pop	{r7}
 8009de8:	4770      	bx	lr

08009dea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009dea:	b480      	push	{r7}
 8009dec:	b085      	sub	sp, #20
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	6892      	ldr	r2, [r2, #8]
 8009e00:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	6852      	ldr	r2, [r2, #4]
 8009e0a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d103      	bne.n	8009e1e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	689a      	ldr	r2, [r3, #8]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	1e5a      	subs	r2, r3, #1
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bc80      	pop	{r7}
 8009e3a:	4770      	bx	lr

08009e3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08e      	sub	sp, #56	; 0x38
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
 8009e48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10a      	bne.n	8009e6e <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e6a:	bf00      	nop
 8009e6c:	e7fe      	b.n	8009e6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d103      	bne.n	8009e7c <xQueueGenericSend+0x40>
 8009e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <xQueueGenericSend+0x44>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e000      	b.n	8009e82 <xQueueGenericSend+0x46>
 8009e80:	2300      	movs	r3, #0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10a      	bne.n	8009e9c <xQueueGenericSend+0x60>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e98:	bf00      	nop
 8009e9a:	e7fe      	b.n	8009e9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d103      	bne.n	8009eaa <xQueueGenericSend+0x6e>
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d101      	bne.n	8009eae <xQueueGenericSend+0x72>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e000      	b.n	8009eb0 <xQueueGenericSend+0x74>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <xQueueGenericSend+0x8e>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	623b      	str	r3, [r7, #32]
}
 8009ec6:	bf00      	nop
 8009ec8:	e7fe      	b.n	8009ec8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009eca:	f000 fd19 	bl	800a900 <xTaskGetSchedulerState>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d102      	bne.n	8009eda <xQueueGenericSend+0x9e>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <xQueueGenericSend+0xa2>
 8009eda:	2301      	movs	r3, #1
 8009edc:	e000      	b.n	8009ee0 <xQueueGenericSend+0xa4>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <xQueueGenericSend+0xbe>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	61fb      	str	r3, [r7, #28]
}
 8009ef6:	bf00      	nop
 8009ef8:	e7fe      	b.n	8009ef8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009efa:	f000 fe25 	bl	800ab48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d302      	bcc.n	8009f10 <xQueueGenericSend+0xd4>
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d129      	bne.n	8009f64 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	68b9      	ldr	r1, [r7, #8]
 8009f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f16:	f000 f927 	bl	800a168 <prvCopyDataToQueue>
 8009f1a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d010      	beq.n	8009f46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	3324      	adds	r3, #36	; 0x24
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 fbdf 	bl	800a6ec <xTaskRemoveFromEventList>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d013      	beq.n	8009f5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f34:	4b3f      	ldr	r3, [pc, #252]	; (800a034 <xQueueGenericSend+0x1f8>)
 8009f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f3a:	601a      	str	r2, [r3, #0]
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	e00a      	b.n	8009f5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d007      	beq.n	8009f5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f4c:	4b39      	ldr	r3, [pc, #228]	; (800a034 <xQueueGenericSend+0x1f8>)
 8009f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f52:	601a      	str	r2, [r3, #0]
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f5c:	f000 fe24 	bl	800aba8 <vPortExitCritical>
				return pdPASS;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e063      	b.n	800a02c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d103      	bne.n	8009f72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f6a:	f000 fe1d 	bl	800aba8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e05c      	b.n	800a02c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d106      	bne.n	8009f86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f78:	f107 0314 	add.w	r3, r7, #20
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fc17 	bl	800a7b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f82:	2301      	movs	r3, #1
 8009f84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f86:	f000 fe0f 	bl	800aba8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f8a:	f000 f9c1 	bl	800a310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f8e:	f000 fddb 	bl	800ab48 <vPortEnterCritical>
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f98:	b25b      	sxtb	r3, r3
 8009f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f9e:	d103      	bne.n	8009fa8 <xQueueGenericSend+0x16c>
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fae:	b25b      	sxtb	r3, r3
 8009fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb4:	d103      	bne.n	8009fbe <xQueueGenericSend+0x182>
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fbe:	f000 fdf3 	bl	800aba8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fc2:	1d3a      	adds	r2, r7, #4
 8009fc4:	f107 0314 	add.w	r3, r7, #20
 8009fc8:	4611      	mov	r1, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f000 fc06 	bl	800a7dc <xTaskCheckForTimeOut>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d124      	bne.n	800a020 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fd8:	f000 f982 	bl	800a2e0 <prvIsQueueFull>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d018      	beq.n	800a014 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	3310      	adds	r3, #16
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	4611      	mov	r1, r2
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 fb5a 	bl	800a6a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ff2:	f000 f923 	bl	800a23c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009ff6:	f000 f999 	bl	800a32c <xTaskResumeAll>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f47f af7c 	bne.w	8009efa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a002:	4b0c      	ldr	r3, [pc, #48]	; (800a034 <xQueueGenericSend+0x1f8>)
 800a004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	e772      	b.n	8009efa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a016:	f000 f911 	bl	800a23c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a01a:	f000 f987 	bl	800a32c <xTaskResumeAll>
 800a01e:	e76c      	b.n	8009efa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a022:	f000 f90b 	bl	800a23c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a026:	f000 f981 	bl	800a32c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a02a:	2300      	movs	r3, #0
		}
	}
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3738      	adds	r7, #56	; 0x38
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	e000ed04 	.word	0xe000ed04

0800a038 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08e      	sub	sp, #56	; 0x38
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
 800a044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10a      	bne.n	800a066 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d103      	bne.n	800a074 <xQueueGenericSendFromISR+0x3c>
 800a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a070:	2b00      	cmp	r3, #0
 800a072:	d101      	bne.n	800a078 <xQueueGenericSendFromISR+0x40>
 800a074:	2301      	movs	r3, #1
 800a076:	e000      	b.n	800a07a <xQueueGenericSendFromISR+0x42>
 800a078:	2300      	movs	r3, #0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10a      	bne.n	800a094 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	623b      	str	r3, [r7, #32]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b02      	cmp	r3, #2
 800a098:	d103      	bne.n	800a0a2 <xQueueGenericSendFromISR+0x6a>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d101      	bne.n	800a0a6 <xQueueGenericSendFromISR+0x6e>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e000      	b.n	800a0a8 <xQueueGenericSendFromISR+0x70>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10a      	bne.n	800a0c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	61fb      	str	r3, [r7, #28]
}
 800a0be:	bf00      	nop
 800a0c0:	e7fe      	b.n	800a0c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0c2:	f000 fde3 	bl	800ac8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a0c6:	f3ef 8211 	mrs	r2, BASEPRI
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	61ba      	str	r2, [r7, #24]
 800a0dc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a0de:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d302      	bcc.n	800a0f4 <xQueueGenericSendFromISR+0xbc>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d12c      	bne.n	800a14e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	68b9      	ldr	r1, [r7, #8]
 800a102:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a104:	f000 f830 	bl	800a168 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a108:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a110:	d112      	bne.n	800a138 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a116:	2b00      	cmp	r3, #0
 800a118:	d016      	beq.n	800a148 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11c:	3324      	adds	r3, #36	; 0x24
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 fae4 	bl	800a6ec <xTaskRemoveFromEventList>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00e      	beq.n	800a148 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00b      	beq.n	800a148 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	601a      	str	r2, [r3, #0]
 800a136:	e007      	b.n	800a148 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a138:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a13c:	3301      	adds	r3, #1
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	b25a      	sxtb	r2, r3
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a148:	2301      	movs	r3, #1
 800a14a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a14c:	e001      	b.n	800a152 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	637b      	str	r3, [r7, #52]	; 0x34
 800a152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a154:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a15c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a160:	4618      	mov	r0, r3
 800a162:	3738      	adds	r7, #56	; 0x38
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a174:	2300      	movs	r3, #0
 800a176:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10d      	bne.n	800a1a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d14d      	bne.n	800a22a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	4618      	mov	r0, r3
 800a194:	f000 fbd2 	bl	800a93c <xTaskPriorityDisinherit>
 800a198:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	605a      	str	r2, [r3, #4]
 800a1a0:	e043      	b.n	800a22a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d119      	bne.n	800a1dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6898      	ldr	r0, [r3, #8]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	68b9      	ldr	r1, [r7, #8]
 800a1b4:	f001 f828 	bl	800b208 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	689a      	ldr	r2, [r3, #8]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c0:	441a      	add	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	689a      	ldr	r2, [r3, #8]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d32b      	bcc.n	800a22a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	609a      	str	r2, [r3, #8]
 800a1da:	e026      	b.n	800a22a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	68d8      	ldr	r0, [r3, #12]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	68b9      	ldr	r1, [r7, #8]
 800a1e8:	f001 f80e 	bl	800b208 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	68da      	ldr	r2, [r3, #12]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f4:	425b      	negs	r3, r3
 800a1f6:	441a      	add	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	68da      	ldr	r2, [r3, #12]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	429a      	cmp	r2, r3
 800a206:	d207      	bcs.n	800a218 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a210:	425b      	negs	r3, r3
 800a212:	441a      	add	r2, r3
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d105      	bne.n	800a22a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	3b01      	subs	r3, #1
 800a228:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a232:	697b      	ldr	r3, [r7, #20]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a244:	f000 fc80 	bl	800ab48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a24e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a250:	e011      	b.n	800a276 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	2b00      	cmp	r3, #0
 800a258:	d012      	beq.n	800a280 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3324      	adds	r3, #36	; 0x24
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 fa44 	bl	800a6ec <xTaskRemoveFromEventList>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a26a:	f000 fb19 	bl	800a8a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
 800a270:	3b01      	subs	r3, #1
 800a272:	b2db      	uxtb	r3, r3
 800a274:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	dce9      	bgt.n	800a252 <prvUnlockQueue+0x16>
 800a27e:	e000      	b.n	800a282 <prvUnlockQueue+0x46>
					break;
 800a280:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	22ff      	movs	r2, #255	; 0xff
 800a286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a28a:	f000 fc8d 	bl	800aba8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a28e:	f000 fc5b 	bl	800ab48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a298:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a29a:	e011      	b.n	800a2c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d012      	beq.n	800a2ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3310      	adds	r3, #16
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 fa1f 	bl	800a6ec <xTaskRemoveFromEventList>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2b4:	f000 faf4 	bl	800a8a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2b8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	dce9      	bgt.n	800a29c <prvUnlockQueue+0x60>
 800a2c8:	e000      	b.n	800a2cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	22ff      	movs	r2, #255	; 0xff
 800a2d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a2d4:	f000 fc68 	bl	800aba8 <vPortExitCritical>
}
 800a2d8:	bf00      	nop
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2e8:	f000 fc2e 	bl	800ab48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d102      	bne.n	800a2fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	e001      	b.n	800a302 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a2fe:	2300      	movs	r3, #0
 800a300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a302:	f000 fc51 	bl	800aba8 <vPortExitCritical>

	return xReturn;
 800a306:	68fb      	ldr	r3, [r7, #12]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a310:	b480      	push	{r7}
 800a312:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a314:	4b04      	ldr	r3, [pc, #16]	; (800a328 <vTaskSuspendAll+0x18>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3301      	adds	r3, #1
 800a31a:	4a03      	ldr	r2, [pc, #12]	; (800a328 <vTaskSuspendAll+0x18>)
 800a31c:	6013      	str	r3, [r2, #0]
}
 800a31e:	bf00      	nop
 800a320:	46bd      	mov	sp, r7
 800a322:	bc80      	pop	{r7}
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	20000450 	.word	0x20000450

0800a32c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a332:	2300      	movs	r3, #0
 800a334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a336:	2300      	movs	r3, #0
 800a338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a33a:	4b41      	ldr	r3, [pc, #260]	; (800a440 <xTaskResumeAll+0x114>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10a      	bne.n	800a358 <xTaskResumeAll+0x2c>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	603b      	str	r3, [r7, #0]
}
 800a354:	bf00      	nop
 800a356:	e7fe      	b.n	800a356 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a358:	f000 fbf6 	bl	800ab48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a35c:	4b38      	ldr	r3, [pc, #224]	; (800a440 <xTaskResumeAll+0x114>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3b01      	subs	r3, #1
 800a362:	4a37      	ldr	r2, [pc, #220]	; (800a440 <xTaskResumeAll+0x114>)
 800a364:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a366:	4b36      	ldr	r3, [pc, #216]	; (800a440 <xTaskResumeAll+0x114>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d161      	bne.n	800a432 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a36e:	4b35      	ldr	r3, [pc, #212]	; (800a444 <xTaskResumeAll+0x118>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d05d      	beq.n	800a432 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a376:	e02e      	b.n	800a3d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a378:	4b33      	ldr	r3, [pc, #204]	; (800a448 <xTaskResumeAll+0x11c>)
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	3318      	adds	r3, #24
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff fd30 	bl	8009dea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3304      	adds	r3, #4
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff fd2b 	bl	8009dea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a398:	2201      	movs	r2, #1
 800a39a:	409a      	lsls	r2, r3
 800a39c:	4b2b      	ldr	r3, [pc, #172]	; (800a44c <xTaskResumeAll+0x120>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	4a2a      	ldr	r2, [pc, #168]	; (800a44c <xTaskResumeAll+0x120>)
 800a3a4:	6013      	str	r3, [r2, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4a27      	ldr	r2, [pc, #156]	; (800a450 <xTaskResumeAll+0x124>)
 800a3b4:	441a      	add	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	4610      	mov	r0, r2
 800a3be:	f7ff fcb9 	bl	8009d34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c6:	4b23      	ldr	r3, [pc, #140]	; (800a454 <xTaskResumeAll+0x128>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d302      	bcc.n	800a3d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a3d0:	4b21      	ldr	r3, [pc, #132]	; (800a458 <xTaskResumeAll+0x12c>)
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3d6:	4b1c      	ldr	r3, [pc, #112]	; (800a448 <xTaskResumeAll+0x11c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1cc      	bne.n	800a378 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3e4:	f000 fa68 	bl	800a8b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a3e8:	4b1c      	ldr	r3, [pc, #112]	; (800a45c <xTaskResumeAll+0x130>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d010      	beq.n	800a416 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3f4:	f000 f836 	bl	800a464 <xTaskIncrementTick>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a3fe:	4b16      	ldr	r3, [pc, #88]	; (800a458 <xTaskResumeAll+0x12c>)
 800a400:	2201      	movs	r2, #1
 800a402:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3b01      	subs	r3, #1
 800a408:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1f1      	bne.n	800a3f4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a410:	4b12      	ldr	r3, [pc, #72]	; (800a45c <xTaskResumeAll+0x130>)
 800a412:	2200      	movs	r2, #0
 800a414:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a416:	4b10      	ldr	r3, [pc, #64]	; (800a458 <xTaskResumeAll+0x12c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d009      	beq.n	800a432 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a41e:	2301      	movs	r3, #1
 800a420:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a422:	4b0f      	ldr	r3, [pc, #60]	; (800a460 <xTaskResumeAll+0x134>)
 800a424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a432:	f000 fbb9 	bl	800aba8 <vPortExitCritical>

	return xAlreadyYielded;
 800a436:	68bb      	ldr	r3, [r7, #8]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	20000450 	.word	0x20000450
 800a444:	20000430 	.word	0x20000430
 800a448:	20000408 	.word	0x20000408
 800a44c:	20000438 	.word	0x20000438
 800a450:	20000374 	.word	0x20000374
 800a454:	20000370 	.word	0x20000370
 800a458:	20000444 	.word	0x20000444
 800a45c:	20000440 	.word	0x20000440
 800a460:	e000ed04 	.word	0xe000ed04

0800a464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a46a:	2300      	movs	r3, #0
 800a46c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a46e:	4b51      	ldr	r3, [pc, #324]	; (800a5b4 <xTaskIncrementTick+0x150>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	f040 808d 	bne.w	800a592 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a478:	4b4f      	ldr	r3, [pc, #316]	; (800a5b8 <xTaskIncrementTick+0x154>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3301      	adds	r3, #1
 800a47e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a480:	4a4d      	ldr	r2, [pc, #308]	; (800a5b8 <xTaskIncrementTick+0x154>)
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d120      	bne.n	800a4ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a48c:	4b4b      	ldr	r3, [pc, #300]	; (800a5bc <xTaskIncrementTick+0x158>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00a      	beq.n	800a4ac <xTaskIncrementTick+0x48>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	603b      	str	r3, [r7, #0]
}
 800a4a8:	bf00      	nop
 800a4aa:	e7fe      	b.n	800a4aa <xTaskIncrementTick+0x46>
 800a4ac:	4b43      	ldr	r3, [pc, #268]	; (800a5bc <xTaskIncrementTick+0x158>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	60fb      	str	r3, [r7, #12]
 800a4b2:	4b43      	ldr	r3, [pc, #268]	; (800a5c0 <xTaskIncrementTick+0x15c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a41      	ldr	r2, [pc, #260]	; (800a5bc <xTaskIncrementTick+0x158>)
 800a4b8:	6013      	str	r3, [r2, #0]
 800a4ba:	4a41      	ldr	r2, [pc, #260]	; (800a5c0 <xTaskIncrementTick+0x15c>)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	4b40      	ldr	r3, [pc, #256]	; (800a5c4 <xTaskIncrementTick+0x160>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	4a3f      	ldr	r2, [pc, #252]	; (800a5c4 <xTaskIncrementTick+0x160>)
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	f000 f9f5 	bl	800a8b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4ce:	4b3e      	ldr	r3, [pc, #248]	; (800a5c8 <xTaskIncrementTick+0x164>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d34d      	bcc.n	800a574 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4d8:	4b38      	ldr	r3, [pc, #224]	; (800a5bc <xTaskIncrementTick+0x158>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <xTaskIncrementTick+0x82>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e000      	b.n	800a4e8 <xTaskIncrementTick+0x84>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d004      	beq.n	800a4f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ec:	4b36      	ldr	r3, [pc, #216]	; (800a5c8 <xTaskIncrementTick+0x164>)
 800a4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f2:	601a      	str	r2, [r3, #0]
					break;
 800a4f4:	e03e      	b.n	800a574 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a4f6:	4b31      	ldr	r3, [pc, #196]	; (800a5bc <xTaskIncrementTick+0x158>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d203      	bcs.n	800a516 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a50e:	4a2e      	ldr	r2, [pc, #184]	; (800a5c8 <xTaskIncrementTick+0x164>)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6013      	str	r3, [r2, #0]
						break;
 800a514:	e02e      	b.n	800a574 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	3304      	adds	r3, #4
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7ff fc65 	bl	8009dea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a524:	2b00      	cmp	r3, #0
 800a526:	d004      	beq.n	800a532 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	3318      	adds	r3, #24
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7ff fc5c 	bl	8009dea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a536:	2201      	movs	r2, #1
 800a538:	409a      	lsls	r2, r3
 800a53a:	4b24      	ldr	r3, [pc, #144]	; (800a5cc <xTaskIncrementTick+0x168>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4313      	orrs	r3, r2
 800a540:	4a22      	ldr	r2, [pc, #136]	; (800a5cc <xTaskIncrementTick+0x168>)
 800a542:	6013      	str	r3, [r2, #0]
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a548:	4613      	mov	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4a1f      	ldr	r2, [pc, #124]	; (800a5d0 <xTaskIncrementTick+0x16c>)
 800a552:	441a      	add	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	3304      	adds	r3, #4
 800a558:	4619      	mov	r1, r3
 800a55a:	4610      	mov	r0, r2
 800a55c:	f7ff fbea 	bl	8009d34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a564:	4b1b      	ldr	r3, [pc, #108]	; (800a5d4 <xTaskIncrementTick+0x170>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d3b4      	bcc.n	800a4d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a56e:	2301      	movs	r3, #1
 800a570:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a572:	e7b1      	b.n	800a4d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a574:	4b17      	ldr	r3, [pc, #92]	; (800a5d4 <xTaskIncrementTick+0x170>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57a:	4915      	ldr	r1, [pc, #84]	; (800a5d0 <xTaskIncrementTick+0x16c>)
 800a57c:	4613      	mov	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4413      	add	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	440b      	add	r3, r1
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d907      	bls.n	800a59c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800a58c:	2301      	movs	r3, #1
 800a58e:	617b      	str	r3, [r7, #20]
 800a590:	e004      	b.n	800a59c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a592:	4b11      	ldr	r3, [pc, #68]	; (800a5d8 <xTaskIncrementTick+0x174>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	3301      	adds	r3, #1
 800a598:	4a0f      	ldr	r2, [pc, #60]	; (800a5d8 <xTaskIncrementTick+0x174>)
 800a59a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a59c:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <xTaskIncrementTick+0x178>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a5a8:	697b      	ldr	r3, [r7, #20]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3718      	adds	r7, #24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20000450 	.word	0x20000450
 800a5b8:	20000434 	.word	0x20000434
 800a5bc:	20000400 	.word	0x20000400
 800a5c0:	20000404 	.word	0x20000404
 800a5c4:	20000448 	.word	0x20000448
 800a5c8:	2000044c 	.word	0x2000044c
 800a5cc:	20000438 	.word	0x20000438
 800a5d0:	20000374 	.word	0x20000374
 800a5d4:	20000370 	.word	0x20000370
 800a5d8:	20000440 	.word	0x20000440
 800a5dc:	20000444 	.word	0x20000444

0800a5e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5e6:	4b29      	ldr	r3, [pc, #164]	; (800a68c <vTaskSwitchContext+0xac>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d003      	beq.n	800a5f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5ee:	4b28      	ldr	r3, [pc, #160]	; (800a690 <vTaskSwitchContext+0xb0>)
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5f4:	e044      	b.n	800a680 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a5f6:	4b26      	ldr	r3, [pc, #152]	; (800a690 <vTaskSwitchContext+0xb0>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a5fc:	4b25      	ldr	r3, [pc, #148]	; (800a694 <vTaskSwitchContext+0xb4>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	fab3 f383 	clz	r3, r3
 800a608:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a60a:	7afb      	ldrb	r3, [r7, #11]
 800a60c:	f1c3 031f 	rsb	r3, r3, #31
 800a610:	617b      	str	r3, [r7, #20]
 800a612:	4921      	ldr	r1, [pc, #132]	; (800a698 <vTaskSwitchContext+0xb8>)
 800a614:	697a      	ldr	r2, [r7, #20]
 800a616:	4613      	mov	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	440b      	add	r3, r1
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10a      	bne.n	800a63c <vTaskSwitchContext+0x5c>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	607b      	str	r3, [r7, #4]
}
 800a638:	bf00      	nop
 800a63a:	e7fe      	b.n	800a63a <vTaskSwitchContext+0x5a>
 800a63c:	697a      	ldr	r2, [r7, #20]
 800a63e:	4613      	mov	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4a14      	ldr	r2, [pc, #80]	; (800a698 <vTaskSwitchContext+0xb8>)
 800a648:	4413      	add	r3, r2
 800a64a:	613b      	str	r3, [r7, #16]
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	685a      	ldr	r2, [r3, #4]
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	605a      	str	r2, [r3, #4]
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	3308      	adds	r3, #8
 800a65e:	429a      	cmp	r2, r3
 800a660:	d104      	bne.n	800a66c <vTaskSwitchContext+0x8c>
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	605a      	str	r2, [r3, #4]
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	4a0a      	ldr	r2, [pc, #40]	; (800a69c <vTaskSwitchContext+0xbc>)
 800a674:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a676:	4b09      	ldr	r3, [pc, #36]	; (800a69c <vTaskSwitchContext+0xbc>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	334c      	adds	r3, #76	; 0x4c
 800a67c:	4a08      	ldr	r2, [pc, #32]	; (800a6a0 <vTaskSwitchContext+0xc0>)
 800a67e:	6013      	str	r3, [r2, #0]
}
 800a680:	bf00      	nop
 800a682:	371c      	adds	r7, #28
 800a684:	46bd      	mov	sp, r7
 800a686:	bc80      	pop	{r7}
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	20000450 	.word	0x20000450
 800a690:	20000444 	.word	0x20000444
 800a694:	20000438 	.word	0x20000438
 800a698:	20000374 	.word	0x20000374
 800a69c:	20000370 	.word	0x20000370
 800a6a0:	2000001c 	.word	0x2000001c

0800a6a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10a      	bne.n	800a6ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	60fb      	str	r3, [r7, #12]
}
 800a6c6:	bf00      	nop
 800a6c8:	e7fe      	b.n	800a6c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6ca:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <vTaskPlaceOnEventList+0x44>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3318      	adds	r3, #24
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff fb51 	bl	8009d7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6d8:	2101      	movs	r1, #1
 800a6da:	6838      	ldr	r0, [r7, #0]
 800a6dc:	f000 f9b4 	bl	800aa48 <prvAddCurrentTaskToDelayedList>
}
 800a6e0:	bf00      	nop
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	20000370 	.word	0x20000370

0800a6ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10a      	bne.n	800a718 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	60fb      	str	r3, [r7, #12]
}
 800a714:	bf00      	nop
 800a716:	e7fe      	b.n	800a716 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	3318      	adds	r3, #24
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7ff fb64 	bl	8009dea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a722:	4b1d      	ldr	r3, [pc, #116]	; (800a798 <xTaskRemoveFromEventList+0xac>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d11c      	bne.n	800a764 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	3304      	adds	r3, #4
 800a72e:	4618      	mov	r0, r3
 800a730:	f7ff fb5b 	bl	8009dea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a738:	2201      	movs	r2, #1
 800a73a:	409a      	lsls	r2, r3
 800a73c:	4b17      	ldr	r3, [pc, #92]	; (800a79c <xTaskRemoveFromEventList+0xb0>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4313      	orrs	r3, r2
 800a742:	4a16      	ldr	r2, [pc, #88]	; (800a79c <xTaskRemoveFromEventList+0xb0>)
 800a744:	6013      	str	r3, [r2, #0]
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a74a:	4613      	mov	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4413      	add	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4a13      	ldr	r2, [pc, #76]	; (800a7a0 <xTaskRemoveFromEventList+0xb4>)
 800a754:	441a      	add	r2, r3
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	3304      	adds	r3, #4
 800a75a:	4619      	mov	r1, r3
 800a75c:	4610      	mov	r0, r2
 800a75e:	f7ff fae9 	bl	8009d34 <vListInsertEnd>
 800a762:	e005      	b.n	800a770 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	3318      	adds	r3, #24
 800a768:	4619      	mov	r1, r3
 800a76a:	480e      	ldr	r0, [pc, #56]	; (800a7a4 <xTaskRemoveFromEventList+0xb8>)
 800a76c:	f7ff fae2 	bl	8009d34 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a774:	4b0c      	ldr	r3, [pc, #48]	; (800a7a8 <xTaskRemoveFromEventList+0xbc>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d905      	bls.n	800a78a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a77e:	2301      	movs	r3, #1
 800a780:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a782:	4b0a      	ldr	r3, [pc, #40]	; (800a7ac <xTaskRemoveFromEventList+0xc0>)
 800a784:	2201      	movs	r2, #1
 800a786:	601a      	str	r2, [r3, #0]
 800a788:	e001      	b.n	800a78e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a78a:	2300      	movs	r3, #0
 800a78c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a78e:	697b      	ldr	r3, [r7, #20]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	20000450 	.word	0x20000450
 800a79c:	20000438 	.word	0x20000438
 800a7a0:	20000374 	.word	0x20000374
 800a7a4:	20000408 	.word	0x20000408
 800a7a8:	20000370 	.word	0x20000370
 800a7ac:	20000444 	.word	0x20000444

0800a7b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7b8:	4b06      	ldr	r3, [pc, #24]	; (800a7d4 <vTaskInternalSetTimeOutState+0x24>)
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7c0:	4b05      	ldr	r3, [pc, #20]	; (800a7d8 <vTaskInternalSetTimeOutState+0x28>)
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	605a      	str	r2, [r3, #4]
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bc80      	pop	{r7}
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	20000448 	.word	0x20000448
 800a7d8:	20000434 	.word	0x20000434

0800a7dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d10a      	bne.n	800a802 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	613b      	str	r3, [r7, #16]
}
 800a7fe:	bf00      	nop
 800a800:	e7fe      	b.n	800a800 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10a      	bne.n	800a81e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80c:	f383 8811 	msr	BASEPRI, r3
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	60fb      	str	r3, [r7, #12]
}
 800a81a:	bf00      	nop
 800a81c:	e7fe      	b.n	800a81c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a81e:	f000 f993 	bl	800ab48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a822:	4b1d      	ldr	r3, [pc, #116]	; (800a898 <xTaskCheckForTimeOut+0xbc>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	69ba      	ldr	r2, [r7, #24]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83a:	d102      	bne.n	800a842 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a83c:	2300      	movs	r3, #0
 800a83e:	61fb      	str	r3, [r7, #28]
 800a840:	e023      	b.n	800a88a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	4b15      	ldr	r3, [pc, #84]	; (800a89c <xTaskCheckForTimeOut+0xc0>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d007      	beq.n	800a85e <xTaskCheckForTimeOut+0x82>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	69ba      	ldr	r2, [r7, #24]
 800a854:	429a      	cmp	r2, r3
 800a856:	d302      	bcc.n	800a85e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a858:	2301      	movs	r3, #1
 800a85a:	61fb      	str	r3, [r7, #28]
 800a85c:	e015      	b.n	800a88a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	429a      	cmp	r2, r3
 800a866:	d20b      	bcs.n	800a880 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	1ad2      	subs	r2, r2, r3
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7ff ff9b 	bl	800a7b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a87a:	2300      	movs	r3, #0
 800a87c:	61fb      	str	r3, [r7, #28]
 800a87e:	e004      	b.n	800a88a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a886:	2301      	movs	r3, #1
 800a888:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a88a:	f000 f98d 	bl	800aba8 <vPortExitCritical>

	return xReturn;
 800a88e:	69fb      	ldr	r3, [r7, #28]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3720      	adds	r7, #32
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	20000434 	.word	0x20000434
 800a89c:	20000448 	.word	0x20000448

0800a8a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8a4:	4b03      	ldr	r3, [pc, #12]	; (800a8b4 <vTaskMissedYield+0x14>)
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	601a      	str	r2, [r3, #0]
}
 800a8aa:	bf00      	nop
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bc80      	pop	{r7}
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	20000444 	.word	0x20000444

0800a8b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8be:	4b0e      	ldr	r3, [pc, #56]	; (800a8f8 <prvResetNextTaskUnblockTime+0x40>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d101      	bne.n	800a8cc <prvResetNextTaskUnblockTime+0x14>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e000      	b.n	800a8ce <prvResetNextTaskUnblockTime+0x16>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d004      	beq.n	800a8dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8d2:	4b0a      	ldr	r3, [pc, #40]	; (800a8fc <prvResetNextTaskUnblockTime+0x44>)
 800a8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8da:	e008      	b.n	800a8ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a8dc:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <prvResetNextTaskUnblockTime+0x40>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	4a04      	ldr	r2, [pc, #16]	; (800a8fc <prvResetNextTaskUnblockTime+0x44>)
 800a8ec:	6013      	str	r3, [r2, #0]
}
 800a8ee:	bf00      	nop
 800a8f0:	370c      	adds	r7, #12
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bc80      	pop	{r7}
 800a8f6:	4770      	bx	lr
 800a8f8:	20000400 	.word	0x20000400
 800a8fc:	2000044c 	.word	0x2000044c

0800a900 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a906:	4b0b      	ldr	r3, [pc, #44]	; (800a934 <xTaskGetSchedulerState+0x34>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d102      	bne.n	800a914 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a90e:	2301      	movs	r3, #1
 800a910:	607b      	str	r3, [r7, #4]
 800a912:	e008      	b.n	800a926 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a914:	4b08      	ldr	r3, [pc, #32]	; (800a938 <xTaskGetSchedulerState+0x38>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d102      	bne.n	800a922 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a91c:	2302      	movs	r3, #2
 800a91e:	607b      	str	r3, [r7, #4]
 800a920:	e001      	b.n	800a926 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a922:	2300      	movs	r3, #0
 800a924:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a926:	687b      	ldr	r3, [r7, #4]
	}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bc80      	pop	{r7}
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	2000043c 	.word	0x2000043c
 800a938:	20000450 	.word	0x20000450

0800a93c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a948:	2300      	movs	r3, #0
 800a94a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d06e      	beq.n	800aa30 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a952:	4b3a      	ldr	r3, [pc, #232]	; (800aa3c <xTaskPriorityDisinherit+0x100>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d00a      	beq.n	800a972 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	60fb      	str	r3, [r7, #12]
}
 800a96e:	bf00      	nop
 800a970:	e7fe      	b.n	800a970 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a976:	2b00      	cmp	r3, #0
 800a978:	d10a      	bne.n	800a990 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	60bb      	str	r3, [r7, #8]
}
 800a98c:	bf00      	nop
 800a98e:	e7fe      	b.n	800a98e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a994:	1e5a      	subs	r2, r3, #1
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d044      	beq.n	800aa30 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d140      	bne.n	800aa30 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7ff fa19 	bl	8009dea <uxListRemove>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d115      	bne.n	800a9ea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c2:	491f      	ldr	r1, [pc, #124]	; (800aa40 <xTaskPriorityDisinherit+0x104>)
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	440b      	add	r3, r1
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10a      	bne.n	800a9ea <xTaskPriorityDisinherit+0xae>
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d8:	2201      	movs	r2, #1
 800a9da:	fa02 f303 	lsl.w	r3, r2, r3
 800a9de:	43da      	mvns	r2, r3
 800a9e0:	4b18      	ldr	r3, [pc, #96]	; (800aa44 <xTaskPriorityDisinherit+0x108>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	4a17      	ldr	r2, [pc, #92]	; (800aa44 <xTaskPriorityDisinherit+0x108>)
 800a9e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f6:	f1c3 0207 	rsb	r2, r3, #7
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa02:	2201      	movs	r2, #1
 800aa04:	409a      	lsls	r2, r3
 800aa06:	4b0f      	ldr	r3, [pc, #60]	; (800aa44 <xTaskPriorityDisinherit+0x108>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	4a0d      	ldr	r2, [pc, #52]	; (800aa44 <xTaskPriorityDisinherit+0x108>)
 800aa0e:	6013      	str	r3, [r2, #0]
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa14:	4613      	mov	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4a08      	ldr	r2, [pc, #32]	; (800aa40 <xTaskPriorityDisinherit+0x104>)
 800aa1e:	441a      	add	r2, r3
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	3304      	adds	r3, #4
 800aa24:	4619      	mov	r1, r3
 800aa26:	4610      	mov	r0, r2
 800aa28:	f7ff f984 	bl	8009d34 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa30:	697b      	ldr	r3, [r7, #20]
	}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3718      	adds	r7, #24
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20000370 	.word	0x20000370
 800aa40:	20000374 	.word	0x20000374
 800aa44:	20000438 	.word	0x20000438

0800aa48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa52:	4b29      	ldr	r3, [pc, #164]	; (800aaf8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa58:	4b28      	ldr	r3, [pc, #160]	; (800aafc <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	3304      	adds	r3, #4
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7ff f9c3 	bl	8009dea <uxListRemove>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10b      	bne.n	800aa82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800aa6a:	4b24      	ldr	r3, [pc, #144]	; (800aafc <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	2201      	movs	r2, #1
 800aa72:	fa02 f303 	lsl.w	r3, r2, r3
 800aa76:	43da      	mvns	r2, r3
 800aa78:	4b21      	ldr	r3, [pc, #132]	; (800ab00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	4a20      	ldr	r2, [pc, #128]	; (800ab00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aa80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa88:	d10a      	bne.n	800aaa0 <prvAddCurrentTaskToDelayedList+0x58>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d007      	beq.n	800aaa0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa90:	4b1a      	ldr	r3, [pc, #104]	; (800aafc <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3304      	adds	r3, #4
 800aa96:	4619      	mov	r1, r3
 800aa98:	481a      	ldr	r0, [pc, #104]	; (800ab04 <prvAddCurrentTaskToDelayedList+0xbc>)
 800aa9a:	f7ff f94b 	bl	8009d34 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa9e:	e026      	b.n	800aaee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aaa8:	4b14      	ldr	r3, [pc, #80]	; (800aafc <prvAddCurrentTaskToDelayedList+0xb4>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aab0:	68ba      	ldr	r2, [r7, #8]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d209      	bcs.n	800aacc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aab8:	4b13      	ldr	r3, [pc, #76]	; (800ab08 <prvAddCurrentTaskToDelayedList+0xc0>)
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	4b0f      	ldr	r3, [pc, #60]	; (800aafc <prvAddCurrentTaskToDelayedList+0xb4>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3304      	adds	r3, #4
 800aac2:	4619      	mov	r1, r3
 800aac4:	4610      	mov	r0, r2
 800aac6:	f7ff f958 	bl	8009d7a <vListInsert>
}
 800aaca:	e010      	b.n	800aaee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aacc:	4b0f      	ldr	r3, [pc, #60]	; (800ab0c <prvAddCurrentTaskToDelayedList+0xc4>)
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <prvAddCurrentTaskToDelayedList+0xb4>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3304      	adds	r3, #4
 800aad6:	4619      	mov	r1, r3
 800aad8:	4610      	mov	r0, r2
 800aada:	f7ff f94e 	bl	8009d7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aade:	4b0c      	ldr	r3, [pc, #48]	; (800ab10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d202      	bcs.n	800aaee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800aae8:	4a09      	ldr	r2, [pc, #36]	; (800ab10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	6013      	str	r3, [r2, #0]
}
 800aaee:	bf00      	nop
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	20000434 	.word	0x20000434
 800aafc:	20000370 	.word	0x20000370
 800ab00:	20000438 	.word	0x20000438
 800ab04:	2000041c 	.word	0x2000041c
 800ab08:	20000404 	.word	0x20000404
 800ab0c:	20000400 	.word	0x20000400
 800ab10:	2000044c 	.word	0x2000044c
	...

0800ab20 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab20:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <pxCurrentTCBConst2>)
 800ab22:	6819      	ldr	r1, [r3, #0]
 800ab24:	6808      	ldr	r0, [r1, #0]
 800ab26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ab2a:	f380 8809 	msr	PSP, r0
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f04f 0000 	mov.w	r0, #0
 800ab36:	f380 8811 	msr	BASEPRI, r0
 800ab3a:	f04e 0e0d 	orr.w	lr, lr, #13
 800ab3e:	4770      	bx	lr

0800ab40 <pxCurrentTCBConst2>:
 800ab40:	20000370 	.word	0x20000370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop

0800ab48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	607b      	str	r3, [r7, #4]
}
 800ab60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab62:	4b0f      	ldr	r3, [pc, #60]	; (800aba0 <vPortEnterCritical+0x58>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3301      	adds	r3, #1
 800ab68:	4a0d      	ldr	r2, [pc, #52]	; (800aba0 <vPortEnterCritical+0x58>)
 800ab6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab6c:	4b0c      	ldr	r3, [pc, #48]	; (800aba0 <vPortEnterCritical+0x58>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d10f      	bne.n	800ab94 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab74:	4b0b      	ldr	r3, [pc, #44]	; (800aba4 <vPortEnterCritical+0x5c>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00a      	beq.n	800ab94 <vPortEnterCritical+0x4c>
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	603b      	str	r3, [r7, #0]
}
 800ab90:	bf00      	nop
 800ab92:	e7fe      	b.n	800ab92 <vPortEnterCritical+0x4a>
	}
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bc80      	pop	{r7}
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	20000018 	.word	0x20000018
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abae:	4b11      	ldr	r3, [pc, #68]	; (800abf4 <vPortExitCritical+0x4c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10a      	bne.n	800abcc <vPortExitCritical+0x24>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	607b      	str	r3, [r7, #4]
}
 800abc8:	bf00      	nop
 800abca:	e7fe      	b.n	800abca <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800abcc:	4b09      	ldr	r3, [pc, #36]	; (800abf4 <vPortExitCritical+0x4c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	3b01      	subs	r3, #1
 800abd2:	4a08      	ldr	r2, [pc, #32]	; (800abf4 <vPortExitCritical+0x4c>)
 800abd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800abd6:	4b07      	ldr	r3, [pc, #28]	; (800abf4 <vPortExitCritical+0x4c>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d105      	bne.n	800abea <vPortExitCritical+0x42>
 800abde:	2300      	movs	r3, #0
 800abe0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	f383 8811 	msr	BASEPRI, r3
}
 800abe8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800abea:	bf00      	nop
 800abec:	370c      	adds	r7, #12
 800abee:	46bd      	mov	sp, r7
 800abf0:	bc80      	pop	{r7}
 800abf2:	4770      	bx	lr
 800abf4:	20000018 	.word	0x20000018
	...

0800ac00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac00:	f3ef 8009 	mrs	r0, PSP
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	4b0d      	ldr	r3, [pc, #52]	; (800ac40 <pxCurrentTCBConst>)
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ac10:	6010      	str	r0, [r2, #0]
 800ac12:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ac16:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac1a:	f380 8811 	msr	BASEPRI, r0
 800ac1e:	f7ff fcdf 	bl	800a5e0 <vTaskSwitchContext>
 800ac22:	f04f 0000 	mov.w	r0, #0
 800ac26:	f380 8811 	msr	BASEPRI, r0
 800ac2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ac2e:	6819      	ldr	r1, [r3, #0]
 800ac30:	6808      	ldr	r0, [r1, #0]
 800ac32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ac36:	f380 8809 	msr	PSP, r0
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	4770      	bx	lr

0800ac40 <pxCurrentTCBConst>:
 800ac40:	20000370 	.word	0x20000370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac44:	bf00      	nop
 800ac46:	bf00      	nop

0800ac48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	607b      	str	r3, [r7, #4]
}
 800ac60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac62:	f7ff fbff 	bl	800a464 <xTaskIncrementTick>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d003      	beq.n	800ac74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac6c:	4b06      	ldr	r3, [pc, #24]	; (800ac88 <SysTick_Handler+0x40>)
 800ac6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	2300      	movs	r3, #0
 800ac76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	f383 8811 	msr	BASEPRI, r3
}
 800ac7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac80:	bf00      	nop
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	e000ed04 	.word	0xe000ed04

0800ac8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac92:	f3ef 8305 	mrs	r3, IPSR
 800ac96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2b0f      	cmp	r3, #15
 800ac9c:	d914      	bls.n	800acc8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac9e:	4a16      	ldr	r2, [pc, #88]	; (800acf8 <vPortValidateInterruptPriority+0x6c>)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	4413      	add	r3, r2
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aca8:	4b14      	ldr	r3, [pc, #80]	; (800acfc <vPortValidateInterruptPriority+0x70>)
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	7afa      	ldrb	r2, [r7, #11]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d20a      	bcs.n	800acc8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800acb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	607b      	str	r3, [r7, #4]
}
 800acc4:	bf00      	nop
 800acc6:	e7fe      	b.n	800acc6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800acc8:	4b0d      	ldr	r3, [pc, #52]	; (800ad00 <vPortValidateInterruptPriority+0x74>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800acd0:	4b0c      	ldr	r3, [pc, #48]	; (800ad04 <vPortValidateInterruptPriority+0x78>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d90a      	bls.n	800acee <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	603b      	str	r3, [r7, #0]
}
 800acea:	bf00      	nop
 800acec:	e7fe      	b.n	800acec <vPortValidateInterruptPriority+0x60>
	}
 800acee:	bf00      	nop
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bc80      	pop	{r7}
 800acf6:	4770      	bx	lr
 800acf8:	e000e3f0 	.word	0xe000e3f0
 800acfc:	20000454 	.word	0x20000454
 800ad00:	e000ed0c 	.word	0xe000ed0c
 800ad04:	20000458 	.word	0x20000458

0800ad08 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fe fa03 	bl	8009122 <USBH_LL_IncTimer>
}
 800ad1c:	bf00      	nop
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fe fa46 	bl	80091c4 <USBH_LL_Connect>
}
 800ad38:	bf00      	nop
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe fa5b 	bl	800920a <USBH_LL_Disconnect>
}
 800ad54:	bf00      	nop
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	460b      	mov	r3, r1
 800ad66:	70fb      	strb	r3, [r7, #3]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fe fa7b 	bl	800926e <USBH_LL_NotifyURBChange>
#endif
}
 800ad78:	bf00      	nop
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fe f9f1 	bl	8009176 <USBH_LL_PortEnabled>
}
 800ad94:	bf00      	nop
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fe f9fd 	bl	80091aa <USBH_LL_PortDisabled>
}
 800adb0:	bf00      	nop
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800adce:	4618      	mov	r0, r3
 800add0:	f7f8 ff32 	bl	8003c38 <HAL_HCD_Stop>
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800add8:	7bfb      	ldrb	r3, [r7, #15]
 800adda:	4618      	mov	r0, r3
 800addc:	f000 f8bc 	bl	800af58 <USBH_Get_USB_Status>
 800ade0:	4603      	mov	r3, r0
 800ade2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ade4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b082      	sub	sp, #8
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	460b      	mov	r3, r1
 800adf8:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ae00:	78fa      	ldrb	r2, [r7, #3]
 800ae02:	4611      	mov	r1, r2
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7f8 ff47 	bl	8003c98 <HAL_HCD_HC_GetXferCount>
 800ae0a:	4603      	mov	r3, r0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ae14:	b590      	push	{r4, r7, lr}
 800ae16:	b089      	sub	sp, #36	; 0x24
 800ae18:	af04      	add	r7, sp, #16
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	4608      	mov	r0, r1
 800ae1e:	4611      	mov	r1, r2
 800ae20:	461a      	mov	r2, r3
 800ae22:	4603      	mov	r3, r0
 800ae24:	70fb      	strb	r3, [r7, #3]
 800ae26:	460b      	mov	r3, r1
 800ae28:	70bb      	strb	r3, [r7, #2]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800ae3c:	787c      	ldrb	r4, [r7, #1]
 800ae3e:	78ba      	ldrb	r2, [r7, #2]
 800ae40:	78f9      	ldrb	r1, [r7, #3]
 800ae42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ae46:	9303      	str	r3, [sp, #12]
 800ae48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae4a:	9302      	str	r3, [sp, #8]
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4e:	9301      	str	r3, [sp, #4]
 800ae50:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae54:	9300      	str	r3, [sp, #0]
 800ae56:	4623      	mov	r3, r4
 800ae58:	f7f8 fc94 	bl	8003784 <HAL_HCD_HC_SubmitRequest>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 f878 	bl	800af58 <USBH_Get_USB_Status>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3714      	adds	r7, #20
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd90      	pop	{r4, r7, pc}

0800ae76 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	460b      	mov	r3, r1
 800ae80:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ae88:	78fa      	ldrb	r2, [r7, #3]
 800ae8a:	4611      	mov	r1, r2
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7f8 fef0 	bl	8003c72 <HAL_HCD_HC_GetURBState>
 800ae92:	4603      	mov	r3, r0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	460b      	mov	r3, r1
 800aea6:	70fb      	strb	r3, [r7, #3]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aeb2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aeb4:	78fb      	ldrb	r3, [r7, #3]
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	212c      	movs	r1, #44	; 0x2c
 800aeba:	fb01 f303 	mul.w	r3, r1, r3
 800aebe:	4413      	add	r3, r2
 800aec0:	333b      	adds	r3, #59	; 0x3b
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d009      	beq.n	800aedc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aec8:	78fb      	ldrb	r3, [r7, #3]
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	212c      	movs	r1, #44	; 0x2c
 800aece:	fb01 f303 	mul.w	r3, r1, r3
 800aed2:	4413      	add	r3, r2
 800aed4:	3354      	adds	r3, #84	; 0x54
 800aed6:	78ba      	ldrb	r2, [r7, #2]
 800aed8:	701a      	strb	r2, [r3, #0]
 800aeda:	e008      	b.n	800aeee <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aedc:	78fb      	ldrb	r3, [r7, #3]
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	212c      	movs	r1, #44	; 0x2c
 800aee2:	fb01 f303 	mul.w	r3, r1, r3
 800aee6:	4413      	add	r3, r2
 800aee8:	3355      	adds	r3, #85	; 0x55
 800aeea:	78ba      	ldrb	r2, [r7, #2]
 800aeec:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3714      	adds	r7, #20
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bc80      	pop	{r7}
 800aef8:	4770      	bx	lr

0800aefa <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b085      	sub	sp, #20
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	460b      	mov	r3, r1
 800af04:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800af06:	2300      	movs	r3, #0
 800af08:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800af10:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800af12:	78fb      	ldrb	r3, [r7, #3]
 800af14:	68ba      	ldr	r2, [r7, #8]
 800af16:	212c      	movs	r1, #44	; 0x2c
 800af18:	fb01 f303 	mul.w	r3, r1, r3
 800af1c:	4413      	add	r3, r2
 800af1e:	333b      	adds	r3, #59	; 0x3b
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d009      	beq.n	800af3a <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800af26:	78fb      	ldrb	r3, [r7, #3]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	212c      	movs	r1, #44	; 0x2c
 800af2c:	fb01 f303 	mul.w	r3, r1, r3
 800af30:	4413      	add	r3, r2
 800af32:	3354      	adds	r3, #84	; 0x54
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	73fb      	strb	r3, [r7, #15]
 800af38:	e008      	b.n	800af4c <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800af3a:	78fb      	ldrb	r3, [r7, #3]
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	212c      	movs	r1, #44	; 0x2c
 800af40:	fb01 f303 	mul.w	r3, r1, r3
 800af44:	4413      	add	r3, r2
 800af46:	3355      	adds	r3, #85	; 0x55
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3714      	adds	r7, #20
 800af52:	46bd      	mov	sp, r7
 800af54:	bc80      	pop	{r7}
 800af56:	4770      	bx	lr

0800af58 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af66:	79fb      	ldrb	r3, [r7, #7]
 800af68:	2b03      	cmp	r3, #3
 800af6a:	d817      	bhi.n	800af9c <USBH_Get_USB_Status+0x44>
 800af6c:	a201      	add	r2, pc, #4	; (adr r2, 800af74 <USBH_Get_USB_Status+0x1c>)
 800af6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af72:	bf00      	nop
 800af74:	0800af85 	.word	0x0800af85
 800af78:	0800af8b 	.word	0x0800af8b
 800af7c:	0800af91 	.word	0x0800af91
 800af80:	0800af97 	.word	0x0800af97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800af84:	2300      	movs	r3, #0
 800af86:	73fb      	strb	r3, [r7, #15]
    break;
 800af88:	e00b      	b.n	800afa2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800af8a:	2302      	movs	r3, #2
 800af8c:	73fb      	strb	r3, [r7, #15]
    break;
 800af8e:	e008      	b.n	800afa2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800af90:	2301      	movs	r3, #1
 800af92:	73fb      	strb	r3, [r7, #15]
    break;
 800af94:	e005      	b.n	800afa2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800af96:	2302      	movs	r3, #2
 800af98:	73fb      	strb	r3, [r7, #15]
    break;
 800af9a:	e002      	b.n	800afa2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800af9c:	2302      	movs	r3, #2
 800af9e:	73fb      	strb	r3, [r7, #15]
    break;
 800afa0:	bf00      	nop
  }
  return usb_status;
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bc80      	pop	{r7}
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop

0800afb0 <__errno>:
 800afb0:	4b01      	ldr	r3, [pc, #4]	; (800afb8 <__errno+0x8>)
 800afb2:	6818      	ldr	r0, [r3, #0]
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	2000001c 	.word	0x2000001c

0800afbc <std>:
 800afbc:	2300      	movs	r3, #0
 800afbe:	b510      	push	{r4, lr}
 800afc0:	4604      	mov	r4, r0
 800afc2:	e9c0 3300 	strd	r3, r3, [r0]
 800afc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afca:	6083      	str	r3, [r0, #8]
 800afcc:	8181      	strh	r1, [r0, #12]
 800afce:	6643      	str	r3, [r0, #100]	; 0x64
 800afd0:	81c2      	strh	r2, [r0, #14]
 800afd2:	6183      	str	r3, [r0, #24]
 800afd4:	4619      	mov	r1, r3
 800afd6:	2208      	movs	r2, #8
 800afd8:	305c      	adds	r0, #92	; 0x5c
 800afda:	f000 f923 	bl	800b224 <memset>
 800afde:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <std+0x38>)
 800afe0:	6224      	str	r4, [r4, #32]
 800afe2:	6263      	str	r3, [r4, #36]	; 0x24
 800afe4:	4b04      	ldr	r3, [pc, #16]	; (800aff8 <std+0x3c>)
 800afe6:	62a3      	str	r3, [r4, #40]	; 0x28
 800afe8:	4b04      	ldr	r3, [pc, #16]	; (800affc <std+0x40>)
 800afea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afec:	4b04      	ldr	r3, [pc, #16]	; (800b000 <std+0x44>)
 800afee:	6323      	str	r3, [r4, #48]	; 0x30
 800aff0:	bd10      	pop	{r4, pc}
 800aff2:	bf00      	nop
 800aff4:	0800c0cd 	.word	0x0800c0cd
 800aff8:	0800c0ef 	.word	0x0800c0ef
 800affc:	0800c127 	.word	0x0800c127
 800b000:	0800c14b 	.word	0x0800c14b

0800b004 <_cleanup_r>:
 800b004:	4901      	ldr	r1, [pc, #4]	; (800b00c <_cleanup_r+0x8>)
 800b006:	f000 b8af 	b.w	800b168 <_fwalk_reent>
 800b00a:	bf00      	nop
 800b00c:	0800dce9 	.word	0x0800dce9

0800b010 <__sfmoreglue>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	2568      	movs	r5, #104	; 0x68
 800b014:	1e4a      	subs	r2, r1, #1
 800b016:	4355      	muls	r5, r2
 800b018:	460e      	mov	r6, r1
 800b01a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b01e:	f000 f955 	bl	800b2cc <_malloc_r>
 800b022:	4604      	mov	r4, r0
 800b024:	b140      	cbz	r0, 800b038 <__sfmoreglue+0x28>
 800b026:	2100      	movs	r1, #0
 800b028:	e9c0 1600 	strd	r1, r6, [r0]
 800b02c:	300c      	adds	r0, #12
 800b02e:	60a0      	str	r0, [r4, #8]
 800b030:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b034:	f000 f8f6 	bl	800b224 <memset>
 800b038:	4620      	mov	r0, r4
 800b03a:	bd70      	pop	{r4, r5, r6, pc}

0800b03c <__sfp_lock_acquire>:
 800b03c:	4801      	ldr	r0, [pc, #4]	; (800b044 <__sfp_lock_acquire+0x8>)
 800b03e:	f000 b8d8 	b.w	800b1f2 <__retarget_lock_acquire_recursive>
 800b042:	bf00      	nop
 800b044:	20005480 	.word	0x20005480

0800b048 <__sfp_lock_release>:
 800b048:	4801      	ldr	r0, [pc, #4]	; (800b050 <__sfp_lock_release+0x8>)
 800b04a:	f000 b8d3 	b.w	800b1f4 <__retarget_lock_release_recursive>
 800b04e:	bf00      	nop
 800b050:	20005480 	.word	0x20005480

0800b054 <__sinit_lock_acquire>:
 800b054:	4801      	ldr	r0, [pc, #4]	; (800b05c <__sinit_lock_acquire+0x8>)
 800b056:	f000 b8cc 	b.w	800b1f2 <__retarget_lock_acquire_recursive>
 800b05a:	bf00      	nop
 800b05c:	2000547b 	.word	0x2000547b

0800b060 <__sinit_lock_release>:
 800b060:	4801      	ldr	r0, [pc, #4]	; (800b068 <__sinit_lock_release+0x8>)
 800b062:	f000 b8c7 	b.w	800b1f4 <__retarget_lock_release_recursive>
 800b066:	bf00      	nop
 800b068:	2000547b 	.word	0x2000547b

0800b06c <__sinit>:
 800b06c:	b510      	push	{r4, lr}
 800b06e:	4604      	mov	r4, r0
 800b070:	f7ff fff0 	bl	800b054 <__sinit_lock_acquire>
 800b074:	69a3      	ldr	r3, [r4, #24]
 800b076:	b11b      	cbz	r3, 800b080 <__sinit+0x14>
 800b078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b07c:	f7ff bff0 	b.w	800b060 <__sinit_lock_release>
 800b080:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b084:	6523      	str	r3, [r4, #80]	; 0x50
 800b086:	4b13      	ldr	r3, [pc, #76]	; (800b0d4 <__sinit+0x68>)
 800b088:	4a13      	ldr	r2, [pc, #76]	; (800b0d8 <__sinit+0x6c>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b08e:	42a3      	cmp	r3, r4
 800b090:	bf08      	it	eq
 800b092:	2301      	moveq	r3, #1
 800b094:	4620      	mov	r0, r4
 800b096:	bf08      	it	eq
 800b098:	61a3      	streq	r3, [r4, #24]
 800b09a:	f000 f81f 	bl	800b0dc <__sfp>
 800b09e:	6060      	str	r0, [r4, #4]
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f000 f81b 	bl	800b0dc <__sfp>
 800b0a6:	60a0      	str	r0, [r4, #8]
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f000 f817 	bl	800b0dc <__sfp>
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2104      	movs	r1, #4
 800b0b2:	60e0      	str	r0, [r4, #12]
 800b0b4:	6860      	ldr	r0, [r4, #4]
 800b0b6:	f7ff ff81 	bl	800afbc <std>
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	2109      	movs	r1, #9
 800b0be:	68a0      	ldr	r0, [r4, #8]
 800b0c0:	f7ff ff7c 	bl	800afbc <std>
 800b0c4:	2202      	movs	r2, #2
 800b0c6:	2112      	movs	r1, #18
 800b0c8:	68e0      	ldr	r0, [r4, #12]
 800b0ca:	f7ff ff77 	bl	800afbc <std>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	61a3      	str	r3, [r4, #24]
 800b0d2:	e7d1      	b.n	800b078 <__sinit+0xc>
 800b0d4:	0800f8d4 	.word	0x0800f8d4
 800b0d8:	0800b005 	.word	0x0800b005

0800b0dc <__sfp>:
 800b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0de:	4607      	mov	r7, r0
 800b0e0:	f7ff ffac 	bl	800b03c <__sfp_lock_acquire>
 800b0e4:	4b1e      	ldr	r3, [pc, #120]	; (800b160 <__sfp+0x84>)
 800b0e6:	681e      	ldr	r6, [r3, #0]
 800b0e8:	69b3      	ldr	r3, [r6, #24]
 800b0ea:	b913      	cbnz	r3, 800b0f2 <__sfp+0x16>
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7ff ffbd 	bl	800b06c <__sinit>
 800b0f2:	3648      	adds	r6, #72	; 0x48
 800b0f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	d503      	bpl.n	800b104 <__sfp+0x28>
 800b0fc:	6833      	ldr	r3, [r6, #0]
 800b0fe:	b30b      	cbz	r3, 800b144 <__sfp+0x68>
 800b100:	6836      	ldr	r6, [r6, #0]
 800b102:	e7f7      	b.n	800b0f4 <__sfp+0x18>
 800b104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b108:	b9d5      	cbnz	r5, 800b140 <__sfp+0x64>
 800b10a:	4b16      	ldr	r3, [pc, #88]	; (800b164 <__sfp+0x88>)
 800b10c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b110:	60e3      	str	r3, [r4, #12]
 800b112:	6665      	str	r5, [r4, #100]	; 0x64
 800b114:	f000 f86c 	bl	800b1f0 <__retarget_lock_init_recursive>
 800b118:	f7ff ff96 	bl	800b048 <__sfp_lock_release>
 800b11c:	2208      	movs	r2, #8
 800b11e:	4629      	mov	r1, r5
 800b120:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b124:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b128:	6025      	str	r5, [r4, #0]
 800b12a:	61a5      	str	r5, [r4, #24]
 800b12c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b130:	f000 f878 	bl	800b224 <memset>
 800b134:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b138:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b13c:	4620      	mov	r0, r4
 800b13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b140:	3468      	adds	r4, #104	; 0x68
 800b142:	e7d9      	b.n	800b0f8 <__sfp+0x1c>
 800b144:	2104      	movs	r1, #4
 800b146:	4638      	mov	r0, r7
 800b148:	f7ff ff62 	bl	800b010 <__sfmoreglue>
 800b14c:	4604      	mov	r4, r0
 800b14e:	6030      	str	r0, [r6, #0]
 800b150:	2800      	cmp	r0, #0
 800b152:	d1d5      	bne.n	800b100 <__sfp+0x24>
 800b154:	f7ff ff78 	bl	800b048 <__sfp_lock_release>
 800b158:	230c      	movs	r3, #12
 800b15a:	603b      	str	r3, [r7, #0]
 800b15c:	e7ee      	b.n	800b13c <__sfp+0x60>
 800b15e:	bf00      	nop
 800b160:	0800f8d4 	.word	0x0800f8d4
 800b164:	ffff0001 	.word	0xffff0001

0800b168 <_fwalk_reent>:
 800b168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b16c:	4606      	mov	r6, r0
 800b16e:	4688      	mov	r8, r1
 800b170:	2700      	movs	r7, #0
 800b172:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b176:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b17a:	f1b9 0901 	subs.w	r9, r9, #1
 800b17e:	d505      	bpl.n	800b18c <_fwalk_reent+0x24>
 800b180:	6824      	ldr	r4, [r4, #0]
 800b182:	2c00      	cmp	r4, #0
 800b184:	d1f7      	bne.n	800b176 <_fwalk_reent+0xe>
 800b186:	4638      	mov	r0, r7
 800b188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b18c:	89ab      	ldrh	r3, [r5, #12]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d907      	bls.n	800b1a2 <_fwalk_reent+0x3a>
 800b192:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b196:	3301      	adds	r3, #1
 800b198:	d003      	beq.n	800b1a2 <_fwalk_reent+0x3a>
 800b19a:	4629      	mov	r1, r5
 800b19c:	4630      	mov	r0, r6
 800b19e:	47c0      	blx	r8
 800b1a0:	4307      	orrs	r7, r0
 800b1a2:	3568      	adds	r5, #104	; 0x68
 800b1a4:	e7e9      	b.n	800b17a <_fwalk_reent+0x12>
	...

0800b1a8 <__libc_init_array>:
 800b1a8:	b570      	push	{r4, r5, r6, lr}
 800b1aa:	2600      	movs	r6, #0
 800b1ac:	4d0c      	ldr	r5, [pc, #48]	; (800b1e0 <__libc_init_array+0x38>)
 800b1ae:	4c0d      	ldr	r4, [pc, #52]	; (800b1e4 <__libc_init_array+0x3c>)
 800b1b0:	1b64      	subs	r4, r4, r5
 800b1b2:	10a4      	asrs	r4, r4, #2
 800b1b4:	42a6      	cmp	r6, r4
 800b1b6:	d109      	bne.n	800b1cc <__libc_init_array+0x24>
 800b1b8:	f004 fb36 	bl	800f828 <_init>
 800b1bc:	2600      	movs	r6, #0
 800b1be:	4d0a      	ldr	r5, [pc, #40]	; (800b1e8 <__libc_init_array+0x40>)
 800b1c0:	4c0a      	ldr	r4, [pc, #40]	; (800b1ec <__libc_init_array+0x44>)
 800b1c2:	1b64      	subs	r4, r4, r5
 800b1c4:	10a4      	asrs	r4, r4, #2
 800b1c6:	42a6      	cmp	r6, r4
 800b1c8:	d105      	bne.n	800b1d6 <__libc_init_array+0x2e>
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}
 800b1cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1d0:	4798      	blx	r3
 800b1d2:	3601      	adds	r6, #1
 800b1d4:	e7ee      	b.n	800b1b4 <__libc_init_array+0xc>
 800b1d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1da:	4798      	blx	r3
 800b1dc:	3601      	adds	r6, #1
 800b1de:	e7f2      	b.n	800b1c6 <__libc_init_array+0x1e>
 800b1e0:	0800fd34 	.word	0x0800fd34
 800b1e4:	0800fd34 	.word	0x0800fd34
 800b1e8:	0800fd34 	.word	0x0800fd34
 800b1ec:	0800fd38 	.word	0x0800fd38

0800b1f0 <__retarget_lock_init_recursive>:
 800b1f0:	4770      	bx	lr

0800b1f2 <__retarget_lock_acquire_recursive>:
 800b1f2:	4770      	bx	lr

0800b1f4 <__retarget_lock_release_recursive>:
 800b1f4:	4770      	bx	lr
	...

0800b1f8 <malloc>:
 800b1f8:	4b02      	ldr	r3, [pc, #8]	; (800b204 <malloc+0xc>)
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	f000 b865 	b.w	800b2cc <_malloc_r>
 800b202:	bf00      	nop
 800b204:	2000001c 	.word	0x2000001c

0800b208 <memcpy>:
 800b208:	440a      	add	r2, r1
 800b20a:	4291      	cmp	r1, r2
 800b20c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b210:	d100      	bne.n	800b214 <memcpy+0xc>
 800b212:	4770      	bx	lr
 800b214:	b510      	push	{r4, lr}
 800b216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b21a:	4291      	cmp	r1, r2
 800b21c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b220:	d1f9      	bne.n	800b216 <memcpy+0xe>
 800b222:	bd10      	pop	{r4, pc}

0800b224 <memset>:
 800b224:	4603      	mov	r3, r0
 800b226:	4402      	add	r2, r0
 800b228:	4293      	cmp	r3, r2
 800b22a:	d100      	bne.n	800b22e <memset+0xa>
 800b22c:	4770      	bx	lr
 800b22e:	f803 1b01 	strb.w	r1, [r3], #1
 800b232:	e7f9      	b.n	800b228 <memset+0x4>

0800b234 <_free_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	4605      	mov	r5, r0
 800b238:	2900      	cmp	r1, #0
 800b23a:	d043      	beq.n	800b2c4 <_free_r+0x90>
 800b23c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b240:	1f0c      	subs	r4, r1, #4
 800b242:	2b00      	cmp	r3, #0
 800b244:	bfb8      	it	lt
 800b246:	18e4      	addlt	r4, r4, r3
 800b248:	f003 f926 	bl	800e498 <__malloc_lock>
 800b24c:	4a1e      	ldr	r2, [pc, #120]	; (800b2c8 <_free_r+0x94>)
 800b24e:	6813      	ldr	r3, [r2, #0]
 800b250:	4610      	mov	r0, r2
 800b252:	b933      	cbnz	r3, 800b262 <_free_r+0x2e>
 800b254:	6063      	str	r3, [r4, #4]
 800b256:	6014      	str	r4, [r2, #0]
 800b258:	4628      	mov	r0, r5
 800b25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b25e:	f003 b921 	b.w	800e4a4 <__malloc_unlock>
 800b262:	42a3      	cmp	r3, r4
 800b264:	d90a      	bls.n	800b27c <_free_r+0x48>
 800b266:	6821      	ldr	r1, [r4, #0]
 800b268:	1862      	adds	r2, r4, r1
 800b26a:	4293      	cmp	r3, r2
 800b26c:	bf01      	itttt	eq
 800b26e:	681a      	ldreq	r2, [r3, #0]
 800b270:	685b      	ldreq	r3, [r3, #4]
 800b272:	1852      	addeq	r2, r2, r1
 800b274:	6022      	streq	r2, [r4, #0]
 800b276:	6063      	str	r3, [r4, #4]
 800b278:	6004      	str	r4, [r0, #0]
 800b27a:	e7ed      	b.n	800b258 <_free_r+0x24>
 800b27c:	461a      	mov	r2, r3
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	b10b      	cbz	r3, 800b286 <_free_r+0x52>
 800b282:	42a3      	cmp	r3, r4
 800b284:	d9fa      	bls.n	800b27c <_free_r+0x48>
 800b286:	6811      	ldr	r1, [r2, #0]
 800b288:	1850      	adds	r0, r2, r1
 800b28a:	42a0      	cmp	r0, r4
 800b28c:	d10b      	bne.n	800b2a6 <_free_r+0x72>
 800b28e:	6820      	ldr	r0, [r4, #0]
 800b290:	4401      	add	r1, r0
 800b292:	1850      	adds	r0, r2, r1
 800b294:	4283      	cmp	r3, r0
 800b296:	6011      	str	r1, [r2, #0]
 800b298:	d1de      	bne.n	800b258 <_free_r+0x24>
 800b29a:	6818      	ldr	r0, [r3, #0]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	4401      	add	r1, r0
 800b2a0:	6011      	str	r1, [r2, #0]
 800b2a2:	6053      	str	r3, [r2, #4]
 800b2a4:	e7d8      	b.n	800b258 <_free_r+0x24>
 800b2a6:	d902      	bls.n	800b2ae <_free_r+0x7a>
 800b2a8:	230c      	movs	r3, #12
 800b2aa:	602b      	str	r3, [r5, #0]
 800b2ac:	e7d4      	b.n	800b258 <_free_r+0x24>
 800b2ae:	6820      	ldr	r0, [r4, #0]
 800b2b0:	1821      	adds	r1, r4, r0
 800b2b2:	428b      	cmp	r3, r1
 800b2b4:	bf01      	itttt	eq
 800b2b6:	6819      	ldreq	r1, [r3, #0]
 800b2b8:	685b      	ldreq	r3, [r3, #4]
 800b2ba:	1809      	addeq	r1, r1, r0
 800b2bc:	6021      	streq	r1, [r4, #0]
 800b2be:	6063      	str	r3, [r4, #4]
 800b2c0:	6054      	str	r4, [r2, #4]
 800b2c2:	e7c9      	b.n	800b258 <_free_r+0x24>
 800b2c4:	bd38      	pop	{r3, r4, r5, pc}
 800b2c6:	bf00      	nop
 800b2c8:	2000045c 	.word	0x2000045c

0800b2cc <_malloc_r>:
 800b2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ce:	1ccd      	adds	r5, r1, #3
 800b2d0:	f025 0503 	bic.w	r5, r5, #3
 800b2d4:	3508      	adds	r5, #8
 800b2d6:	2d0c      	cmp	r5, #12
 800b2d8:	bf38      	it	cc
 800b2da:	250c      	movcc	r5, #12
 800b2dc:	2d00      	cmp	r5, #0
 800b2de:	4606      	mov	r6, r0
 800b2e0:	db01      	blt.n	800b2e6 <_malloc_r+0x1a>
 800b2e2:	42a9      	cmp	r1, r5
 800b2e4:	d903      	bls.n	800b2ee <_malloc_r+0x22>
 800b2e6:	230c      	movs	r3, #12
 800b2e8:	6033      	str	r3, [r6, #0]
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2ee:	f003 f8d3 	bl	800e498 <__malloc_lock>
 800b2f2:	4921      	ldr	r1, [pc, #132]	; (800b378 <_malloc_r+0xac>)
 800b2f4:	680a      	ldr	r2, [r1, #0]
 800b2f6:	4614      	mov	r4, r2
 800b2f8:	b99c      	cbnz	r4, 800b322 <_malloc_r+0x56>
 800b2fa:	4f20      	ldr	r7, [pc, #128]	; (800b37c <_malloc_r+0xb0>)
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	b923      	cbnz	r3, 800b30a <_malloc_r+0x3e>
 800b300:	4621      	mov	r1, r4
 800b302:	4630      	mov	r0, r6
 800b304:	f000 feae 	bl	800c064 <_sbrk_r>
 800b308:	6038      	str	r0, [r7, #0]
 800b30a:	4629      	mov	r1, r5
 800b30c:	4630      	mov	r0, r6
 800b30e:	f000 fea9 	bl	800c064 <_sbrk_r>
 800b312:	1c43      	adds	r3, r0, #1
 800b314:	d123      	bne.n	800b35e <_malloc_r+0x92>
 800b316:	230c      	movs	r3, #12
 800b318:	4630      	mov	r0, r6
 800b31a:	6033      	str	r3, [r6, #0]
 800b31c:	f003 f8c2 	bl	800e4a4 <__malloc_unlock>
 800b320:	e7e3      	b.n	800b2ea <_malloc_r+0x1e>
 800b322:	6823      	ldr	r3, [r4, #0]
 800b324:	1b5b      	subs	r3, r3, r5
 800b326:	d417      	bmi.n	800b358 <_malloc_r+0x8c>
 800b328:	2b0b      	cmp	r3, #11
 800b32a:	d903      	bls.n	800b334 <_malloc_r+0x68>
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	441c      	add	r4, r3
 800b330:	6025      	str	r5, [r4, #0]
 800b332:	e004      	b.n	800b33e <_malloc_r+0x72>
 800b334:	6863      	ldr	r3, [r4, #4]
 800b336:	42a2      	cmp	r2, r4
 800b338:	bf0c      	ite	eq
 800b33a:	600b      	streq	r3, [r1, #0]
 800b33c:	6053      	strne	r3, [r2, #4]
 800b33e:	4630      	mov	r0, r6
 800b340:	f003 f8b0 	bl	800e4a4 <__malloc_unlock>
 800b344:	f104 000b 	add.w	r0, r4, #11
 800b348:	1d23      	adds	r3, r4, #4
 800b34a:	f020 0007 	bic.w	r0, r0, #7
 800b34e:	1ac2      	subs	r2, r0, r3
 800b350:	d0cc      	beq.n	800b2ec <_malloc_r+0x20>
 800b352:	1a1b      	subs	r3, r3, r0
 800b354:	50a3      	str	r3, [r4, r2]
 800b356:	e7c9      	b.n	800b2ec <_malloc_r+0x20>
 800b358:	4622      	mov	r2, r4
 800b35a:	6864      	ldr	r4, [r4, #4]
 800b35c:	e7cc      	b.n	800b2f8 <_malloc_r+0x2c>
 800b35e:	1cc4      	adds	r4, r0, #3
 800b360:	f024 0403 	bic.w	r4, r4, #3
 800b364:	42a0      	cmp	r0, r4
 800b366:	d0e3      	beq.n	800b330 <_malloc_r+0x64>
 800b368:	1a21      	subs	r1, r4, r0
 800b36a:	4630      	mov	r0, r6
 800b36c:	f000 fe7a 	bl	800c064 <_sbrk_r>
 800b370:	3001      	adds	r0, #1
 800b372:	d1dd      	bne.n	800b330 <_malloc_r+0x64>
 800b374:	e7cf      	b.n	800b316 <_malloc_r+0x4a>
 800b376:	bf00      	nop
 800b378:	2000045c 	.word	0x2000045c
 800b37c:	20000460 	.word	0x20000460

0800b380 <__cvt>:
 800b380:	2b00      	cmp	r3, #0
 800b382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b386:	461f      	mov	r7, r3
 800b388:	bfbb      	ittet	lt
 800b38a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b38e:	461f      	movlt	r7, r3
 800b390:	2300      	movge	r3, #0
 800b392:	232d      	movlt	r3, #45	; 0x2d
 800b394:	b088      	sub	sp, #32
 800b396:	4614      	mov	r4, r2
 800b398:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b39a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b39c:	7013      	strb	r3, [r2, #0]
 800b39e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b3a4:	f023 0820 	bic.w	r8, r3, #32
 800b3a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b3ac:	d005      	beq.n	800b3ba <__cvt+0x3a>
 800b3ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b3b2:	d100      	bne.n	800b3b6 <__cvt+0x36>
 800b3b4:	3501      	adds	r5, #1
 800b3b6:	2302      	movs	r3, #2
 800b3b8:	e000      	b.n	800b3bc <__cvt+0x3c>
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	aa07      	add	r2, sp, #28
 800b3be:	9204      	str	r2, [sp, #16]
 800b3c0:	aa06      	add	r2, sp, #24
 800b3c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b3c6:	e9cd 3500 	strd	r3, r5, [sp]
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	463b      	mov	r3, r7
 800b3ce:	f001 fe17 	bl	800d000 <_dtoa_r>
 800b3d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	d102      	bne.n	800b3e0 <__cvt+0x60>
 800b3da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3dc:	07db      	lsls	r3, r3, #31
 800b3de:	d522      	bpl.n	800b426 <__cvt+0xa6>
 800b3e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b3e4:	eb06 0905 	add.w	r9, r6, r5
 800b3e8:	d110      	bne.n	800b40c <__cvt+0x8c>
 800b3ea:	7833      	ldrb	r3, [r6, #0]
 800b3ec:	2b30      	cmp	r3, #48	; 0x30
 800b3ee:	d10a      	bne.n	800b406 <__cvt+0x86>
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	4639      	mov	r1, r7
 800b3f8:	f7f5 fb16 	bl	8000a28 <__aeabi_dcmpeq>
 800b3fc:	b918      	cbnz	r0, 800b406 <__cvt+0x86>
 800b3fe:	f1c5 0501 	rsb	r5, r5, #1
 800b402:	f8ca 5000 	str.w	r5, [sl]
 800b406:	f8da 3000 	ldr.w	r3, [sl]
 800b40a:	4499      	add	r9, r3
 800b40c:	2200      	movs	r2, #0
 800b40e:	2300      	movs	r3, #0
 800b410:	4620      	mov	r0, r4
 800b412:	4639      	mov	r1, r7
 800b414:	f7f5 fb08 	bl	8000a28 <__aeabi_dcmpeq>
 800b418:	b108      	cbz	r0, 800b41e <__cvt+0x9e>
 800b41a:	f8cd 901c 	str.w	r9, [sp, #28]
 800b41e:	2230      	movs	r2, #48	; 0x30
 800b420:	9b07      	ldr	r3, [sp, #28]
 800b422:	454b      	cmp	r3, r9
 800b424:	d307      	bcc.n	800b436 <__cvt+0xb6>
 800b426:	4630      	mov	r0, r6
 800b428:	9b07      	ldr	r3, [sp, #28]
 800b42a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b42c:	1b9b      	subs	r3, r3, r6
 800b42e:	6013      	str	r3, [r2, #0]
 800b430:	b008      	add	sp, #32
 800b432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b436:	1c59      	adds	r1, r3, #1
 800b438:	9107      	str	r1, [sp, #28]
 800b43a:	701a      	strb	r2, [r3, #0]
 800b43c:	e7f0      	b.n	800b420 <__cvt+0xa0>

0800b43e <__exponent>:
 800b43e:	4603      	mov	r3, r0
 800b440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b442:	2900      	cmp	r1, #0
 800b444:	f803 2b02 	strb.w	r2, [r3], #2
 800b448:	bfb6      	itet	lt
 800b44a:	222d      	movlt	r2, #45	; 0x2d
 800b44c:	222b      	movge	r2, #43	; 0x2b
 800b44e:	4249      	neglt	r1, r1
 800b450:	2909      	cmp	r1, #9
 800b452:	7042      	strb	r2, [r0, #1]
 800b454:	dd2b      	ble.n	800b4ae <__exponent+0x70>
 800b456:	f10d 0407 	add.w	r4, sp, #7
 800b45a:	46a4      	mov	ip, r4
 800b45c:	270a      	movs	r7, #10
 800b45e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b462:	460a      	mov	r2, r1
 800b464:	46a6      	mov	lr, r4
 800b466:	fb07 1516 	mls	r5, r7, r6, r1
 800b46a:	2a63      	cmp	r2, #99	; 0x63
 800b46c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800b470:	4631      	mov	r1, r6
 800b472:	f104 34ff 	add.w	r4, r4, #4294967295
 800b476:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b47a:	dcf0      	bgt.n	800b45e <__exponent+0x20>
 800b47c:	3130      	adds	r1, #48	; 0x30
 800b47e:	f1ae 0502 	sub.w	r5, lr, #2
 800b482:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b486:	4629      	mov	r1, r5
 800b488:	1c44      	adds	r4, r0, #1
 800b48a:	4561      	cmp	r1, ip
 800b48c:	d30a      	bcc.n	800b4a4 <__exponent+0x66>
 800b48e:	f10d 0209 	add.w	r2, sp, #9
 800b492:	eba2 020e 	sub.w	r2, r2, lr
 800b496:	4565      	cmp	r5, ip
 800b498:	bf88      	it	hi
 800b49a:	2200      	movhi	r2, #0
 800b49c:	4413      	add	r3, r2
 800b49e:	1a18      	subs	r0, r3, r0
 800b4a0:	b003      	add	sp, #12
 800b4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4a8:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b4ac:	e7ed      	b.n	800b48a <__exponent+0x4c>
 800b4ae:	2330      	movs	r3, #48	; 0x30
 800b4b0:	3130      	adds	r1, #48	; 0x30
 800b4b2:	7083      	strb	r3, [r0, #2]
 800b4b4:	70c1      	strb	r1, [r0, #3]
 800b4b6:	1d03      	adds	r3, r0, #4
 800b4b8:	e7f1      	b.n	800b49e <__exponent+0x60>
	...

0800b4bc <_printf_float>:
 800b4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c0:	b091      	sub	sp, #68	; 0x44
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b4c8:	4616      	mov	r6, r2
 800b4ca:	461f      	mov	r7, r3
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	f002 ffad 	bl	800e42c <_localeconv_r>
 800b4d2:	6803      	ldr	r3, [r0, #0]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4d8:	f7f4 fe7a 	bl	80001d0 <strlen>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	930e      	str	r3, [sp, #56]	; 0x38
 800b4e0:	f8d8 3000 	ldr.w	r3, [r8]
 800b4e4:	900a      	str	r0, [sp, #40]	; 0x28
 800b4e6:	3307      	adds	r3, #7
 800b4e8:	f023 0307 	bic.w	r3, r3, #7
 800b4ec:	f103 0208 	add.w	r2, r3, #8
 800b4f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b4f4:	f8d4 b000 	ldr.w	fp, [r4]
 800b4f8:	f8c8 2000 	str.w	r2, [r8]
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b504:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b508:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b50c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b50e:	f04f 32ff 	mov.w	r2, #4294967295
 800b512:	4640      	mov	r0, r8
 800b514:	4b9c      	ldr	r3, [pc, #624]	; (800b788 <_printf_float+0x2cc>)
 800b516:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b518:	f7f5 fab8 	bl	8000a8c <__aeabi_dcmpun>
 800b51c:	bb70      	cbnz	r0, 800b57c <_printf_float+0xc0>
 800b51e:	f04f 32ff 	mov.w	r2, #4294967295
 800b522:	4640      	mov	r0, r8
 800b524:	4b98      	ldr	r3, [pc, #608]	; (800b788 <_printf_float+0x2cc>)
 800b526:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b528:	f7f5 fa92 	bl	8000a50 <__aeabi_dcmple>
 800b52c:	bb30      	cbnz	r0, 800b57c <_printf_float+0xc0>
 800b52e:	2200      	movs	r2, #0
 800b530:	2300      	movs	r3, #0
 800b532:	4640      	mov	r0, r8
 800b534:	4651      	mov	r1, sl
 800b536:	f7f5 fa81 	bl	8000a3c <__aeabi_dcmplt>
 800b53a:	b110      	cbz	r0, 800b542 <_printf_float+0x86>
 800b53c:	232d      	movs	r3, #45	; 0x2d
 800b53e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b542:	4b92      	ldr	r3, [pc, #584]	; (800b78c <_printf_float+0x2d0>)
 800b544:	4892      	ldr	r0, [pc, #584]	; (800b790 <_printf_float+0x2d4>)
 800b546:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b54a:	bf94      	ite	ls
 800b54c:	4698      	movls	r8, r3
 800b54e:	4680      	movhi	r8, r0
 800b550:	2303      	movs	r3, #3
 800b552:	f04f 0a00 	mov.w	sl, #0
 800b556:	6123      	str	r3, [r4, #16]
 800b558:	f02b 0304 	bic.w	r3, fp, #4
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	4633      	mov	r3, r6
 800b560:	4621      	mov	r1, r4
 800b562:	4628      	mov	r0, r5
 800b564:	9700      	str	r7, [sp, #0]
 800b566:	aa0f      	add	r2, sp, #60	; 0x3c
 800b568:	f000 f9d4 	bl	800b914 <_printf_common>
 800b56c:	3001      	adds	r0, #1
 800b56e:	f040 8090 	bne.w	800b692 <_printf_float+0x1d6>
 800b572:	f04f 30ff 	mov.w	r0, #4294967295
 800b576:	b011      	add	sp, #68	; 0x44
 800b578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57c:	4642      	mov	r2, r8
 800b57e:	4653      	mov	r3, sl
 800b580:	4640      	mov	r0, r8
 800b582:	4651      	mov	r1, sl
 800b584:	f7f5 fa82 	bl	8000a8c <__aeabi_dcmpun>
 800b588:	b148      	cbz	r0, 800b59e <_printf_float+0xe2>
 800b58a:	f1ba 0f00 	cmp.w	sl, #0
 800b58e:	bfb8      	it	lt
 800b590:	232d      	movlt	r3, #45	; 0x2d
 800b592:	4880      	ldr	r0, [pc, #512]	; (800b794 <_printf_float+0x2d8>)
 800b594:	bfb8      	it	lt
 800b596:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b59a:	4b7f      	ldr	r3, [pc, #508]	; (800b798 <_printf_float+0x2dc>)
 800b59c:	e7d3      	b.n	800b546 <_printf_float+0x8a>
 800b59e:	6863      	ldr	r3, [r4, #4]
 800b5a0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b5a4:	1c5a      	adds	r2, r3, #1
 800b5a6:	d142      	bne.n	800b62e <_printf_float+0x172>
 800b5a8:	2306      	movs	r3, #6
 800b5aa:	6063      	str	r3, [r4, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	9206      	str	r2, [sp, #24]
 800b5b0:	aa0e      	add	r2, sp, #56	; 0x38
 800b5b2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b5b6:	aa0d      	add	r2, sp, #52	; 0x34
 800b5b8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b5bc:	9203      	str	r2, [sp, #12]
 800b5be:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b5c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b5c6:	6023      	str	r3, [r4, #0]
 800b5c8:	6863      	ldr	r3, [r4, #4]
 800b5ca:	4642      	mov	r2, r8
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	4653      	mov	r3, sl
 800b5d2:	910b      	str	r1, [sp, #44]	; 0x2c
 800b5d4:	f7ff fed4 	bl	800b380 <__cvt>
 800b5d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5da:	4680      	mov	r8, r0
 800b5dc:	2947      	cmp	r1, #71	; 0x47
 800b5de:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b5e0:	d108      	bne.n	800b5f4 <_printf_float+0x138>
 800b5e2:	1cc8      	adds	r0, r1, #3
 800b5e4:	db02      	blt.n	800b5ec <_printf_float+0x130>
 800b5e6:	6863      	ldr	r3, [r4, #4]
 800b5e8:	4299      	cmp	r1, r3
 800b5ea:	dd40      	ble.n	800b66e <_printf_float+0x1b2>
 800b5ec:	f1a9 0902 	sub.w	r9, r9, #2
 800b5f0:	fa5f f989 	uxtb.w	r9, r9
 800b5f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b5f8:	d81f      	bhi.n	800b63a <_printf_float+0x17e>
 800b5fa:	464a      	mov	r2, r9
 800b5fc:	3901      	subs	r1, #1
 800b5fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b602:	910d      	str	r1, [sp, #52]	; 0x34
 800b604:	f7ff ff1b 	bl	800b43e <__exponent>
 800b608:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b60a:	4682      	mov	sl, r0
 800b60c:	1813      	adds	r3, r2, r0
 800b60e:	2a01      	cmp	r2, #1
 800b610:	6123      	str	r3, [r4, #16]
 800b612:	dc02      	bgt.n	800b61a <_printf_float+0x15e>
 800b614:	6822      	ldr	r2, [r4, #0]
 800b616:	07d2      	lsls	r2, r2, #31
 800b618:	d501      	bpl.n	800b61e <_printf_float+0x162>
 800b61a:	3301      	adds	r3, #1
 800b61c:	6123      	str	r3, [r4, #16]
 800b61e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b622:	2b00      	cmp	r3, #0
 800b624:	d09b      	beq.n	800b55e <_printf_float+0xa2>
 800b626:	232d      	movs	r3, #45	; 0x2d
 800b628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b62c:	e797      	b.n	800b55e <_printf_float+0xa2>
 800b62e:	2947      	cmp	r1, #71	; 0x47
 800b630:	d1bc      	bne.n	800b5ac <_printf_float+0xf0>
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1ba      	bne.n	800b5ac <_printf_float+0xf0>
 800b636:	2301      	movs	r3, #1
 800b638:	e7b7      	b.n	800b5aa <_printf_float+0xee>
 800b63a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b63e:	d118      	bne.n	800b672 <_printf_float+0x1b6>
 800b640:	2900      	cmp	r1, #0
 800b642:	6863      	ldr	r3, [r4, #4]
 800b644:	dd0b      	ble.n	800b65e <_printf_float+0x1a2>
 800b646:	6121      	str	r1, [r4, #16]
 800b648:	b913      	cbnz	r3, 800b650 <_printf_float+0x194>
 800b64a:	6822      	ldr	r2, [r4, #0]
 800b64c:	07d0      	lsls	r0, r2, #31
 800b64e:	d502      	bpl.n	800b656 <_printf_float+0x19a>
 800b650:	3301      	adds	r3, #1
 800b652:	440b      	add	r3, r1
 800b654:	6123      	str	r3, [r4, #16]
 800b656:	f04f 0a00 	mov.w	sl, #0
 800b65a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b65c:	e7df      	b.n	800b61e <_printf_float+0x162>
 800b65e:	b913      	cbnz	r3, 800b666 <_printf_float+0x1aa>
 800b660:	6822      	ldr	r2, [r4, #0]
 800b662:	07d2      	lsls	r2, r2, #31
 800b664:	d501      	bpl.n	800b66a <_printf_float+0x1ae>
 800b666:	3302      	adds	r3, #2
 800b668:	e7f4      	b.n	800b654 <_printf_float+0x198>
 800b66a:	2301      	movs	r3, #1
 800b66c:	e7f2      	b.n	800b654 <_printf_float+0x198>
 800b66e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b674:	4299      	cmp	r1, r3
 800b676:	db05      	blt.n	800b684 <_printf_float+0x1c8>
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	6121      	str	r1, [r4, #16]
 800b67c:	07d8      	lsls	r0, r3, #31
 800b67e:	d5ea      	bpl.n	800b656 <_printf_float+0x19a>
 800b680:	1c4b      	adds	r3, r1, #1
 800b682:	e7e7      	b.n	800b654 <_printf_float+0x198>
 800b684:	2900      	cmp	r1, #0
 800b686:	bfcc      	ite	gt
 800b688:	2201      	movgt	r2, #1
 800b68a:	f1c1 0202 	rsble	r2, r1, #2
 800b68e:	4413      	add	r3, r2
 800b690:	e7e0      	b.n	800b654 <_printf_float+0x198>
 800b692:	6823      	ldr	r3, [r4, #0]
 800b694:	055a      	lsls	r2, r3, #21
 800b696:	d407      	bmi.n	800b6a8 <_printf_float+0x1ec>
 800b698:	6923      	ldr	r3, [r4, #16]
 800b69a:	4642      	mov	r2, r8
 800b69c:	4631      	mov	r1, r6
 800b69e:	4628      	mov	r0, r5
 800b6a0:	47b8      	blx	r7
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	d12b      	bne.n	800b6fe <_printf_float+0x242>
 800b6a6:	e764      	b.n	800b572 <_printf_float+0xb6>
 800b6a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b6ac:	f240 80dd 	bls.w	800b86a <_printf_float+0x3ae>
 800b6b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	f7f5 f9b6 	bl	8000a28 <__aeabi_dcmpeq>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d033      	beq.n	800b728 <_printf_float+0x26c>
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	4631      	mov	r1, r6
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	4a35      	ldr	r2, [pc, #212]	; (800b79c <_printf_float+0x2e0>)
 800b6c8:	47b8      	blx	r7
 800b6ca:	3001      	adds	r0, #1
 800b6cc:	f43f af51 	beq.w	800b572 <_printf_float+0xb6>
 800b6d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	db02      	blt.n	800b6de <_printf_float+0x222>
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	07d8      	lsls	r0, r3, #31
 800b6dc:	d50f      	bpl.n	800b6fe <_printf_float+0x242>
 800b6de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6e2:	4631      	mov	r1, r6
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	47b8      	blx	r7
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	f43f af42 	beq.w	800b572 <_printf_float+0xb6>
 800b6ee:	f04f 0800 	mov.w	r8, #0
 800b6f2:	f104 091a 	add.w	r9, r4, #26
 800b6f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	4543      	cmp	r3, r8
 800b6fc:	dc09      	bgt.n	800b712 <_printf_float+0x256>
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	079b      	lsls	r3, r3, #30
 800b702:	f100 8102 	bmi.w	800b90a <_printf_float+0x44e>
 800b706:	68e0      	ldr	r0, [r4, #12]
 800b708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b70a:	4298      	cmp	r0, r3
 800b70c:	bfb8      	it	lt
 800b70e:	4618      	movlt	r0, r3
 800b710:	e731      	b.n	800b576 <_printf_float+0xba>
 800b712:	2301      	movs	r3, #1
 800b714:	464a      	mov	r2, r9
 800b716:	4631      	mov	r1, r6
 800b718:	4628      	mov	r0, r5
 800b71a:	47b8      	blx	r7
 800b71c:	3001      	adds	r0, #1
 800b71e:	f43f af28 	beq.w	800b572 <_printf_float+0xb6>
 800b722:	f108 0801 	add.w	r8, r8, #1
 800b726:	e7e6      	b.n	800b6f6 <_printf_float+0x23a>
 800b728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dc38      	bgt.n	800b7a0 <_printf_float+0x2e4>
 800b72e:	2301      	movs	r3, #1
 800b730:	4631      	mov	r1, r6
 800b732:	4628      	mov	r0, r5
 800b734:	4a19      	ldr	r2, [pc, #100]	; (800b79c <_printf_float+0x2e0>)
 800b736:	47b8      	blx	r7
 800b738:	3001      	adds	r0, #1
 800b73a:	f43f af1a 	beq.w	800b572 <_printf_float+0xb6>
 800b73e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b742:	4313      	orrs	r3, r2
 800b744:	d102      	bne.n	800b74c <_printf_float+0x290>
 800b746:	6823      	ldr	r3, [r4, #0]
 800b748:	07d9      	lsls	r1, r3, #31
 800b74a:	d5d8      	bpl.n	800b6fe <_printf_float+0x242>
 800b74c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b750:	4631      	mov	r1, r6
 800b752:	4628      	mov	r0, r5
 800b754:	47b8      	blx	r7
 800b756:	3001      	adds	r0, #1
 800b758:	f43f af0b 	beq.w	800b572 <_printf_float+0xb6>
 800b75c:	f04f 0900 	mov.w	r9, #0
 800b760:	f104 0a1a 	add.w	sl, r4, #26
 800b764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b766:	425b      	negs	r3, r3
 800b768:	454b      	cmp	r3, r9
 800b76a:	dc01      	bgt.n	800b770 <_printf_float+0x2b4>
 800b76c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b76e:	e794      	b.n	800b69a <_printf_float+0x1de>
 800b770:	2301      	movs	r3, #1
 800b772:	4652      	mov	r2, sl
 800b774:	4631      	mov	r1, r6
 800b776:	4628      	mov	r0, r5
 800b778:	47b8      	blx	r7
 800b77a:	3001      	adds	r0, #1
 800b77c:	f43f aef9 	beq.w	800b572 <_printf_float+0xb6>
 800b780:	f109 0901 	add.w	r9, r9, #1
 800b784:	e7ee      	b.n	800b764 <_printf_float+0x2a8>
 800b786:	bf00      	nop
 800b788:	7fefffff 	.word	0x7fefffff
 800b78c:	0800f8d8 	.word	0x0800f8d8
 800b790:	0800f8dc 	.word	0x0800f8dc
 800b794:	0800f8e4 	.word	0x0800f8e4
 800b798:	0800f8e0 	.word	0x0800f8e0
 800b79c:	0800f8e8 	.word	0x0800f8e8
 800b7a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	bfa8      	it	ge
 800b7a8:	461a      	movge	r2, r3
 800b7aa:	2a00      	cmp	r2, #0
 800b7ac:	4691      	mov	r9, r2
 800b7ae:	dc37      	bgt.n	800b820 <_printf_float+0x364>
 800b7b0:	f04f 0b00 	mov.w	fp, #0
 800b7b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7b8:	f104 021a 	add.w	r2, r4, #26
 800b7bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b7c0:	ebaa 0309 	sub.w	r3, sl, r9
 800b7c4:	455b      	cmp	r3, fp
 800b7c6:	dc33      	bgt.n	800b830 <_printf_float+0x374>
 800b7c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	db3b      	blt.n	800b848 <_printf_float+0x38c>
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	07da      	lsls	r2, r3, #31
 800b7d4:	d438      	bmi.n	800b848 <_printf_float+0x38c>
 800b7d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b7da:	eba2 030a 	sub.w	r3, r2, sl
 800b7de:	eba2 0901 	sub.w	r9, r2, r1
 800b7e2:	4599      	cmp	r9, r3
 800b7e4:	bfa8      	it	ge
 800b7e6:	4699      	movge	r9, r3
 800b7e8:	f1b9 0f00 	cmp.w	r9, #0
 800b7ec:	dc34      	bgt.n	800b858 <_printf_float+0x39c>
 800b7ee:	f04f 0800 	mov.w	r8, #0
 800b7f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7f6:	f104 0a1a 	add.w	sl, r4, #26
 800b7fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b7fe:	1a9b      	subs	r3, r3, r2
 800b800:	eba3 0309 	sub.w	r3, r3, r9
 800b804:	4543      	cmp	r3, r8
 800b806:	f77f af7a 	ble.w	800b6fe <_printf_float+0x242>
 800b80a:	2301      	movs	r3, #1
 800b80c:	4652      	mov	r2, sl
 800b80e:	4631      	mov	r1, r6
 800b810:	4628      	mov	r0, r5
 800b812:	47b8      	blx	r7
 800b814:	3001      	adds	r0, #1
 800b816:	f43f aeac 	beq.w	800b572 <_printf_float+0xb6>
 800b81a:	f108 0801 	add.w	r8, r8, #1
 800b81e:	e7ec      	b.n	800b7fa <_printf_float+0x33e>
 800b820:	4613      	mov	r3, r2
 800b822:	4631      	mov	r1, r6
 800b824:	4642      	mov	r2, r8
 800b826:	4628      	mov	r0, r5
 800b828:	47b8      	blx	r7
 800b82a:	3001      	adds	r0, #1
 800b82c:	d1c0      	bne.n	800b7b0 <_printf_float+0x2f4>
 800b82e:	e6a0      	b.n	800b572 <_printf_float+0xb6>
 800b830:	2301      	movs	r3, #1
 800b832:	4631      	mov	r1, r6
 800b834:	4628      	mov	r0, r5
 800b836:	920b      	str	r2, [sp, #44]	; 0x2c
 800b838:	47b8      	blx	r7
 800b83a:	3001      	adds	r0, #1
 800b83c:	f43f ae99 	beq.w	800b572 <_printf_float+0xb6>
 800b840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b842:	f10b 0b01 	add.w	fp, fp, #1
 800b846:	e7b9      	b.n	800b7bc <_printf_float+0x300>
 800b848:	4631      	mov	r1, r6
 800b84a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b84e:	4628      	mov	r0, r5
 800b850:	47b8      	blx	r7
 800b852:	3001      	adds	r0, #1
 800b854:	d1bf      	bne.n	800b7d6 <_printf_float+0x31a>
 800b856:	e68c      	b.n	800b572 <_printf_float+0xb6>
 800b858:	464b      	mov	r3, r9
 800b85a:	4631      	mov	r1, r6
 800b85c:	4628      	mov	r0, r5
 800b85e:	eb08 020a 	add.w	r2, r8, sl
 800b862:	47b8      	blx	r7
 800b864:	3001      	adds	r0, #1
 800b866:	d1c2      	bne.n	800b7ee <_printf_float+0x332>
 800b868:	e683      	b.n	800b572 <_printf_float+0xb6>
 800b86a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b86c:	2a01      	cmp	r2, #1
 800b86e:	dc01      	bgt.n	800b874 <_printf_float+0x3b8>
 800b870:	07db      	lsls	r3, r3, #31
 800b872:	d537      	bpl.n	800b8e4 <_printf_float+0x428>
 800b874:	2301      	movs	r3, #1
 800b876:	4642      	mov	r2, r8
 800b878:	4631      	mov	r1, r6
 800b87a:	4628      	mov	r0, r5
 800b87c:	47b8      	blx	r7
 800b87e:	3001      	adds	r0, #1
 800b880:	f43f ae77 	beq.w	800b572 <_printf_float+0xb6>
 800b884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b888:	4631      	mov	r1, r6
 800b88a:	4628      	mov	r0, r5
 800b88c:	47b8      	blx	r7
 800b88e:	3001      	adds	r0, #1
 800b890:	f43f ae6f 	beq.w	800b572 <_printf_float+0xb6>
 800b894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b898:	2200      	movs	r2, #0
 800b89a:	2300      	movs	r3, #0
 800b89c:	f7f5 f8c4 	bl	8000a28 <__aeabi_dcmpeq>
 800b8a0:	b9d8      	cbnz	r0, 800b8da <_printf_float+0x41e>
 800b8a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8a4:	f108 0201 	add.w	r2, r8, #1
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	4631      	mov	r1, r6
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	47b8      	blx	r7
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	d10e      	bne.n	800b8d2 <_printf_float+0x416>
 800b8b4:	e65d      	b.n	800b572 <_printf_float+0xb6>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	464a      	mov	r2, r9
 800b8ba:	4631      	mov	r1, r6
 800b8bc:	4628      	mov	r0, r5
 800b8be:	47b8      	blx	r7
 800b8c0:	3001      	adds	r0, #1
 800b8c2:	f43f ae56 	beq.w	800b572 <_printf_float+0xb6>
 800b8c6:	f108 0801 	add.w	r8, r8, #1
 800b8ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	4543      	cmp	r3, r8
 800b8d0:	dcf1      	bgt.n	800b8b6 <_printf_float+0x3fa>
 800b8d2:	4653      	mov	r3, sl
 800b8d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b8d8:	e6e0      	b.n	800b69c <_printf_float+0x1e0>
 800b8da:	f04f 0800 	mov.w	r8, #0
 800b8de:	f104 091a 	add.w	r9, r4, #26
 800b8e2:	e7f2      	b.n	800b8ca <_printf_float+0x40e>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	4642      	mov	r2, r8
 800b8e8:	e7df      	b.n	800b8aa <_printf_float+0x3ee>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	464a      	mov	r2, r9
 800b8ee:	4631      	mov	r1, r6
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	47b8      	blx	r7
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	f43f ae3c 	beq.w	800b572 <_printf_float+0xb6>
 800b8fa:	f108 0801 	add.w	r8, r8, #1
 800b8fe:	68e3      	ldr	r3, [r4, #12]
 800b900:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b902:	1a5b      	subs	r3, r3, r1
 800b904:	4543      	cmp	r3, r8
 800b906:	dcf0      	bgt.n	800b8ea <_printf_float+0x42e>
 800b908:	e6fd      	b.n	800b706 <_printf_float+0x24a>
 800b90a:	f04f 0800 	mov.w	r8, #0
 800b90e:	f104 0919 	add.w	r9, r4, #25
 800b912:	e7f4      	b.n	800b8fe <_printf_float+0x442>

0800b914 <_printf_common>:
 800b914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b918:	4616      	mov	r6, r2
 800b91a:	4699      	mov	r9, r3
 800b91c:	688a      	ldr	r2, [r1, #8]
 800b91e:	690b      	ldr	r3, [r1, #16]
 800b920:	4607      	mov	r7, r0
 800b922:	4293      	cmp	r3, r2
 800b924:	bfb8      	it	lt
 800b926:	4613      	movlt	r3, r2
 800b928:	6033      	str	r3, [r6, #0]
 800b92a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b92e:	460c      	mov	r4, r1
 800b930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b934:	b10a      	cbz	r2, 800b93a <_printf_common+0x26>
 800b936:	3301      	adds	r3, #1
 800b938:	6033      	str	r3, [r6, #0]
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	0699      	lsls	r1, r3, #26
 800b93e:	bf42      	ittt	mi
 800b940:	6833      	ldrmi	r3, [r6, #0]
 800b942:	3302      	addmi	r3, #2
 800b944:	6033      	strmi	r3, [r6, #0]
 800b946:	6825      	ldr	r5, [r4, #0]
 800b948:	f015 0506 	ands.w	r5, r5, #6
 800b94c:	d106      	bne.n	800b95c <_printf_common+0x48>
 800b94e:	f104 0a19 	add.w	sl, r4, #25
 800b952:	68e3      	ldr	r3, [r4, #12]
 800b954:	6832      	ldr	r2, [r6, #0]
 800b956:	1a9b      	subs	r3, r3, r2
 800b958:	42ab      	cmp	r3, r5
 800b95a:	dc28      	bgt.n	800b9ae <_printf_common+0x9a>
 800b95c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b960:	1e13      	subs	r3, r2, #0
 800b962:	6822      	ldr	r2, [r4, #0]
 800b964:	bf18      	it	ne
 800b966:	2301      	movne	r3, #1
 800b968:	0692      	lsls	r2, r2, #26
 800b96a:	d42d      	bmi.n	800b9c8 <_printf_common+0xb4>
 800b96c:	4649      	mov	r1, r9
 800b96e:	4638      	mov	r0, r7
 800b970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b974:	47c0      	blx	r8
 800b976:	3001      	adds	r0, #1
 800b978:	d020      	beq.n	800b9bc <_printf_common+0xa8>
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	68e5      	ldr	r5, [r4, #12]
 800b97e:	f003 0306 	and.w	r3, r3, #6
 800b982:	2b04      	cmp	r3, #4
 800b984:	bf18      	it	ne
 800b986:	2500      	movne	r5, #0
 800b988:	6832      	ldr	r2, [r6, #0]
 800b98a:	f04f 0600 	mov.w	r6, #0
 800b98e:	68a3      	ldr	r3, [r4, #8]
 800b990:	bf08      	it	eq
 800b992:	1aad      	subeq	r5, r5, r2
 800b994:	6922      	ldr	r2, [r4, #16]
 800b996:	bf08      	it	eq
 800b998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b99c:	4293      	cmp	r3, r2
 800b99e:	bfc4      	itt	gt
 800b9a0:	1a9b      	subgt	r3, r3, r2
 800b9a2:	18ed      	addgt	r5, r5, r3
 800b9a4:	341a      	adds	r4, #26
 800b9a6:	42b5      	cmp	r5, r6
 800b9a8:	d11a      	bne.n	800b9e0 <_printf_common+0xcc>
 800b9aa:	2000      	movs	r0, #0
 800b9ac:	e008      	b.n	800b9c0 <_printf_common+0xac>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	4652      	mov	r2, sl
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	4638      	mov	r0, r7
 800b9b6:	47c0      	blx	r8
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	d103      	bne.n	800b9c4 <_printf_common+0xb0>
 800b9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c4:	3501      	adds	r5, #1
 800b9c6:	e7c4      	b.n	800b952 <_printf_common+0x3e>
 800b9c8:	2030      	movs	r0, #48	; 0x30
 800b9ca:	18e1      	adds	r1, r4, r3
 800b9cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9d0:	1c5a      	adds	r2, r3, #1
 800b9d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9d6:	4422      	add	r2, r4
 800b9d8:	3302      	adds	r3, #2
 800b9da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9de:	e7c5      	b.n	800b96c <_printf_common+0x58>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	4622      	mov	r2, r4
 800b9e4:	4649      	mov	r1, r9
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	47c0      	blx	r8
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	d0e6      	beq.n	800b9bc <_printf_common+0xa8>
 800b9ee:	3601      	adds	r6, #1
 800b9f0:	e7d9      	b.n	800b9a6 <_printf_common+0x92>
	...

0800b9f4 <_printf_i>:
 800b9f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f8:	460c      	mov	r4, r1
 800b9fa:	7e27      	ldrb	r7, [r4, #24]
 800b9fc:	4691      	mov	r9, r2
 800b9fe:	2f78      	cmp	r7, #120	; 0x78
 800ba00:	4680      	mov	r8, r0
 800ba02:	469a      	mov	sl, r3
 800ba04:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba0a:	d807      	bhi.n	800ba1c <_printf_i+0x28>
 800ba0c:	2f62      	cmp	r7, #98	; 0x62
 800ba0e:	d80a      	bhi.n	800ba26 <_printf_i+0x32>
 800ba10:	2f00      	cmp	r7, #0
 800ba12:	f000 80d9 	beq.w	800bbc8 <_printf_i+0x1d4>
 800ba16:	2f58      	cmp	r7, #88	; 0x58
 800ba18:	f000 80a4 	beq.w	800bb64 <_printf_i+0x170>
 800ba1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba24:	e03a      	b.n	800ba9c <_printf_i+0xa8>
 800ba26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba2a:	2b15      	cmp	r3, #21
 800ba2c:	d8f6      	bhi.n	800ba1c <_printf_i+0x28>
 800ba2e:	a001      	add	r0, pc, #4	; (adr r0, 800ba34 <_printf_i+0x40>)
 800ba30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ba34:	0800ba8d 	.word	0x0800ba8d
 800ba38:	0800baa1 	.word	0x0800baa1
 800ba3c:	0800ba1d 	.word	0x0800ba1d
 800ba40:	0800ba1d 	.word	0x0800ba1d
 800ba44:	0800ba1d 	.word	0x0800ba1d
 800ba48:	0800ba1d 	.word	0x0800ba1d
 800ba4c:	0800baa1 	.word	0x0800baa1
 800ba50:	0800ba1d 	.word	0x0800ba1d
 800ba54:	0800ba1d 	.word	0x0800ba1d
 800ba58:	0800ba1d 	.word	0x0800ba1d
 800ba5c:	0800ba1d 	.word	0x0800ba1d
 800ba60:	0800bbaf 	.word	0x0800bbaf
 800ba64:	0800bad1 	.word	0x0800bad1
 800ba68:	0800bb91 	.word	0x0800bb91
 800ba6c:	0800ba1d 	.word	0x0800ba1d
 800ba70:	0800ba1d 	.word	0x0800ba1d
 800ba74:	0800bbd1 	.word	0x0800bbd1
 800ba78:	0800ba1d 	.word	0x0800ba1d
 800ba7c:	0800bad1 	.word	0x0800bad1
 800ba80:	0800ba1d 	.word	0x0800ba1d
 800ba84:	0800ba1d 	.word	0x0800ba1d
 800ba88:	0800bb99 	.word	0x0800bb99
 800ba8c:	680b      	ldr	r3, [r1, #0]
 800ba8e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba92:	1d1a      	adds	r2, r3, #4
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	600a      	str	r2, [r1, #0]
 800ba98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e0a4      	b.n	800bbea <_printf_i+0x1f6>
 800baa0:	6825      	ldr	r5, [r4, #0]
 800baa2:	6808      	ldr	r0, [r1, #0]
 800baa4:	062e      	lsls	r6, r5, #24
 800baa6:	f100 0304 	add.w	r3, r0, #4
 800baaa:	d50a      	bpl.n	800bac2 <_printf_i+0xce>
 800baac:	6805      	ldr	r5, [r0, #0]
 800baae:	600b      	str	r3, [r1, #0]
 800bab0:	2d00      	cmp	r5, #0
 800bab2:	da03      	bge.n	800babc <_printf_i+0xc8>
 800bab4:	232d      	movs	r3, #45	; 0x2d
 800bab6:	426d      	negs	r5, r5
 800bab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800babc:	230a      	movs	r3, #10
 800babe:	485e      	ldr	r0, [pc, #376]	; (800bc38 <_printf_i+0x244>)
 800bac0:	e019      	b.n	800baf6 <_printf_i+0x102>
 800bac2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bac6:	6805      	ldr	r5, [r0, #0]
 800bac8:	600b      	str	r3, [r1, #0]
 800baca:	bf18      	it	ne
 800bacc:	b22d      	sxthne	r5, r5
 800bace:	e7ef      	b.n	800bab0 <_printf_i+0xbc>
 800bad0:	680b      	ldr	r3, [r1, #0]
 800bad2:	6825      	ldr	r5, [r4, #0]
 800bad4:	1d18      	adds	r0, r3, #4
 800bad6:	6008      	str	r0, [r1, #0]
 800bad8:	0628      	lsls	r0, r5, #24
 800bada:	d501      	bpl.n	800bae0 <_printf_i+0xec>
 800badc:	681d      	ldr	r5, [r3, #0]
 800bade:	e002      	b.n	800bae6 <_printf_i+0xf2>
 800bae0:	0669      	lsls	r1, r5, #25
 800bae2:	d5fb      	bpl.n	800badc <_printf_i+0xe8>
 800bae4:	881d      	ldrh	r5, [r3, #0]
 800bae6:	2f6f      	cmp	r7, #111	; 0x6f
 800bae8:	bf0c      	ite	eq
 800baea:	2308      	moveq	r3, #8
 800baec:	230a      	movne	r3, #10
 800baee:	4852      	ldr	r0, [pc, #328]	; (800bc38 <_printf_i+0x244>)
 800baf0:	2100      	movs	r1, #0
 800baf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800baf6:	6866      	ldr	r6, [r4, #4]
 800baf8:	2e00      	cmp	r6, #0
 800bafa:	bfa8      	it	ge
 800bafc:	6821      	ldrge	r1, [r4, #0]
 800bafe:	60a6      	str	r6, [r4, #8]
 800bb00:	bfa4      	itt	ge
 800bb02:	f021 0104 	bicge.w	r1, r1, #4
 800bb06:	6021      	strge	r1, [r4, #0]
 800bb08:	b90d      	cbnz	r5, 800bb0e <_printf_i+0x11a>
 800bb0a:	2e00      	cmp	r6, #0
 800bb0c:	d04d      	beq.n	800bbaa <_printf_i+0x1b6>
 800bb0e:	4616      	mov	r6, r2
 800bb10:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb14:	fb03 5711 	mls	r7, r3, r1, r5
 800bb18:	5dc7      	ldrb	r7, [r0, r7]
 800bb1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb1e:	462f      	mov	r7, r5
 800bb20:	42bb      	cmp	r3, r7
 800bb22:	460d      	mov	r5, r1
 800bb24:	d9f4      	bls.n	800bb10 <_printf_i+0x11c>
 800bb26:	2b08      	cmp	r3, #8
 800bb28:	d10b      	bne.n	800bb42 <_printf_i+0x14e>
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	07df      	lsls	r7, r3, #31
 800bb2e:	d508      	bpl.n	800bb42 <_printf_i+0x14e>
 800bb30:	6923      	ldr	r3, [r4, #16]
 800bb32:	6861      	ldr	r1, [r4, #4]
 800bb34:	4299      	cmp	r1, r3
 800bb36:	bfde      	ittt	le
 800bb38:	2330      	movle	r3, #48	; 0x30
 800bb3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb42:	1b92      	subs	r2, r2, r6
 800bb44:	6122      	str	r2, [r4, #16]
 800bb46:	464b      	mov	r3, r9
 800bb48:	4621      	mov	r1, r4
 800bb4a:	4640      	mov	r0, r8
 800bb4c:	f8cd a000 	str.w	sl, [sp]
 800bb50:	aa03      	add	r2, sp, #12
 800bb52:	f7ff fedf 	bl	800b914 <_printf_common>
 800bb56:	3001      	adds	r0, #1
 800bb58:	d14c      	bne.n	800bbf4 <_printf_i+0x200>
 800bb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5e:	b004      	add	sp, #16
 800bb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb64:	4834      	ldr	r0, [pc, #208]	; (800bc38 <_printf_i+0x244>)
 800bb66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb6a:	680e      	ldr	r6, [r1, #0]
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	f856 5b04 	ldr.w	r5, [r6], #4
 800bb72:	061f      	lsls	r7, r3, #24
 800bb74:	600e      	str	r6, [r1, #0]
 800bb76:	d514      	bpl.n	800bba2 <_printf_i+0x1ae>
 800bb78:	07d9      	lsls	r1, r3, #31
 800bb7a:	bf44      	itt	mi
 800bb7c:	f043 0320 	orrmi.w	r3, r3, #32
 800bb80:	6023      	strmi	r3, [r4, #0]
 800bb82:	b91d      	cbnz	r5, 800bb8c <_printf_i+0x198>
 800bb84:	6823      	ldr	r3, [r4, #0]
 800bb86:	f023 0320 	bic.w	r3, r3, #32
 800bb8a:	6023      	str	r3, [r4, #0]
 800bb8c:	2310      	movs	r3, #16
 800bb8e:	e7af      	b.n	800baf0 <_printf_i+0xfc>
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	f043 0320 	orr.w	r3, r3, #32
 800bb96:	6023      	str	r3, [r4, #0]
 800bb98:	2378      	movs	r3, #120	; 0x78
 800bb9a:	4828      	ldr	r0, [pc, #160]	; (800bc3c <_printf_i+0x248>)
 800bb9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bba0:	e7e3      	b.n	800bb6a <_printf_i+0x176>
 800bba2:	065e      	lsls	r6, r3, #25
 800bba4:	bf48      	it	mi
 800bba6:	b2ad      	uxthmi	r5, r5
 800bba8:	e7e6      	b.n	800bb78 <_printf_i+0x184>
 800bbaa:	4616      	mov	r6, r2
 800bbac:	e7bb      	b.n	800bb26 <_printf_i+0x132>
 800bbae:	680b      	ldr	r3, [r1, #0]
 800bbb0:	6826      	ldr	r6, [r4, #0]
 800bbb2:	1d1d      	adds	r5, r3, #4
 800bbb4:	6960      	ldr	r0, [r4, #20]
 800bbb6:	600d      	str	r5, [r1, #0]
 800bbb8:	0635      	lsls	r5, r6, #24
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	d501      	bpl.n	800bbc2 <_printf_i+0x1ce>
 800bbbe:	6018      	str	r0, [r3, #0]
 800bbc0:	e002      	b.n	800bbc8 <_printf_i+0x1d4>
 800bbc2:	0671      	lsls	r1, r6, #25
 800bbc4:	d5fb      	bpl.n	800bbbe <_printf_i+0x1ca>
 800bbc6:	8018      	strh	r0, [r3, #0]
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4616      	mov	r6, r2
 800bbcc:	6123      	str	r3, [r4, #16]
 800bbce:	e7ba      	b.n	800bb46 <_printf_i+0x152>
 800bbd0:	680b      	ldr	r3, [r1, #0]
 800bbd2:	1d1a      	adds	r2, r3, #4
 800bbd4:	600a      	str	r2, [r1, #0]
 800bbd6:	681e      	ldr	r6, [r3, #0]
 800bbd8:	2100      	movs	r1, #0
 800bbda:	4630      	mov	r0, r6
 800bbdc:	6862      	ldr	r2, [r4, #4]
 800bbde:	f002 fc4d 	bl	800e47c <memchr>
 800bbe2:	b108      	cbz	r0, 800bbe8 <_printf_i+0x1f4>
 800bbe4:	1b80      	subs	r0, r0, r6
 800bbe6:	6060      	str	r0, [r4, #4]
 800bbe8:	6863      	ldr	r3, [r4, #4]
 800bbea:	6123      	str	r3, [r4, #16]
 800bbec:	2300      	movs	r3, #0
 800bbee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbf2:	e7a8      	b.n	800bb46 <_printf_i+0x152>
 800bbf4:	4632      	mov	r2, r6
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	4640      	mov	r0, r8
 800bbfa:	6923      	ldr	r3, [r4, #16]
 800bbfc:	47d0      	blx	sl
 800bbfe:	3001      	adds	r0, #1
 800bc00:	d0ab      	beq.n	800bb5a <_printf_i+0x166>
 800bc02:	6823      	ldr	r3, [r4, #0]
 800bc04:	079b      	lsls	r3, r3, #30
 800bc06:	d413      	bmi.n	800bc30 <_printf_i+0x23c>
 800bc08:	68e0      	ldr	r0, [r4, #12]
 800bc0a:	9b03      	ldr	r3, [sp, #12]
 800bc0c:	4298      	cmp	r0, r3
 800bc0e:	bfb8      	it	lt
 800bc10:	4618      	movlt	r0, r3
 800bc12:	e7a4      	b.n	800bb5e <_printf_i+0x16a>
 800bc14:	2301      	movs	r3, #1
 800bc16:	4632      	mov	r2, r6
 800bc18:	4649      	mov	r1, r9
 800bc1a:	4640      	mov	r0, r8
 800bc1c:	47d0      	blx	sl
 800bc1e:	3001      	adds	r0, #1
 800bc20:	d09b      	beq.n	800bb5a <_printf_i+0x166>
 800bc22:	3501      	adds	r5, #1
 800bc24:	68e3      	ldr	r3, [r4, #12]
 800bc26:	9903      	ldr	r1, [sp, #12]
 800bc28:	1a5b      	subs	r3, r3, r1
 800bc2a:	42ab      	cmp	r3, r5
 800bc2c:	dcf2      	bgt.n	800bc14 <_printf_i+0x220>
 800bc2e:	e7eb      	b.n	800bc08 <_printf_i+0x214>
 800bc30:	2500      	movs	r5, #0
 800bc32:	f104 0619 	add.w	r6, r4, #25
 800bc36:	e7f5      	b.n	800bc24 <_printf_i+0x230>
 800bc38:	0800f8ea 	.word	0x0800f8ea
 800bc3c:	0800f8fb 	.word	0x0800f8fb

0800bc40 <_scanf_float>:
 800bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc44:	b087      	sub	sp, #28
 800bc46:	9303      	str	r3, [sp, #12]
 800bc48:	688b      	ldr	r3, [r1, #8]
 800bc4a:	4617      	mov	r7, r2
 800bc4c:	1e5a      	subs	r2, r3, #1
 800bc4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bc52:	bf85      	ittet	hi
 800bc54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bc58:	195b      	addhi	r3, r3, r5
 800bc5a:	2300      	movls	r3, #0
 800bc5c:	9302      	strhi	r3, [sp, #8]
 800bc5e:	bf88      	it	hi
 800bc60:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bc64:	468b      	mov	fp, r1
 800bc66:	f04f 0500 	mov.w	r5, #0
 800bc6a:	bf8c      	ite	hi
 800bc6c:	608b      	strhi	r3, [r1, #8]
 800bc6e:	9302      	strls	r3, [sp, #8]
 800bc70:	680b      	ldr	r3, [r1, #0]
 800bc72:	4680      	mov	r8, r0
 800bc74:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bc78:	f84b 3b1c 	str.w	r3, [fp], #28
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	465e      	mov	r6, fp
 800bc80:	46aa      	mov	sl, r5
 800bc82:	46a9      	mov	r9, r5
 800bc84:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bc88:	9501      	str	r5, [sp, #4]
 800bc8a:	68a2      	ldr	r2, [r4, #8]
 800bc8c:	b152      	cbz	r2, 800bca4 <_scanf_float+0x64>
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	2b4e      	cmp	r3, #78	; 0x4e
 800bc94:	d864      	bhi.n	800bd60 <_scanf_float+0x120>
 800bc96:	2b40      	cmp	r3, #64	; 0x40
 800bc98:	d83c      	bhi.n	800bd14 <_scanf_float+0xd4>
 800bc9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bc9e:	b2c8      	uxtb	r0, r1
 800bca0:	280e      	cmp	r0, #14
 800bca2:	d93a      	bls.n	800bd1a <_scanf_float+0xda>
 800bca4:	f1b9 0f00 	cmp.w	r9, #0
 800bca8:	d003      	beq.n	800bcb2 <_scanf_float+0x72>
 800bcaa:	6823      	ldr	r3, [r4, #0]
 800bcac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcb0:	6023      	str	r3, [r4, #0]
 800bcb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bcb6:	f1ba 0f01 	cmp.w	sl, #1
 800bcba:	f200 8113 	bhi.w	800bee4 <_scanf_float+0x2a4>
 800bcbe:	455e      	cmp	r6, fp
 800bcc0:	f200 8105 	bhi.w	800bece <_scanf_float+0x28e>
 800bcc4:	2501      	movs	r5, #1
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	b007      	add	sp, #28
 800bcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bcd2:	2a0d      	cmp	r2, #13
 800bcd4:	d8e6      	bhi.n	800bca4 <_scanf_float+0x64>
 800bcd6:	a101      	add	r1, pc, #4	; (adr r1, 800bcdc <_scanf_float+0x9c>)
 800bcd8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bcdc:	0800be1b 	.word	0x0800be1b
 800bce0:	0800bca5 	.word	0x0800bca5
 800bce4:	0800bca5 	.word	0x0800bca5
 800bce8:	0800bca5 	.word	0x0800bca5
 800bcec:	0800be7b 	.word	0x0800be7b
 800bcf0:	0800be53 	.word	0x0800be53
 800bcf4:	0800bca5 	.word	0x0800bca5
 800bcf8:	0800bca5 	.word	0x0800bca5
 800bcfc:	0800be29 	.word	0x0800be29
 800bd00:	0800bca5 	.word	0x0800bca5
 800bd04:	0800bca5 	.word	0x0800bca5
 800bd08:	0800bca5 	.word	0x0800bca5
 800bd0c:	0800bca5 	.word	0x0800bca5
 800bd10:	0800bde1 	.word	0x0800bde1
 800bd14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bd18:	e7db      	b.n	800bcd2 <_scanf_float+0x92>
 800bd1a:	290e      	cmp	r1, #14
 800bd1c:	d8c2      	bhi.n	800bca4 <_scanf_float+0x64>
 800bd1e:	a001      	add	r0, pc, #4	; (adr r0, 800bd24 <_scanf_float+0xe4>)
 800bd20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bd24:	0800bdd3 	.word	0x0800bdd3
 800bd28:	0800bca5 	.word	0x0800bca5
 800bd2c:	0800bdd3 	.word	0x0800bdd3
 800bd30:	0800be67 	.word	0x0800be67
 800bd34:	0800bca5 	.word	0x0800bca5
 800bd38:	0800bd81 	.word	0x0800bd81
 800bd3c:	0800bdbd 	.word	0x0800bdbd
 800bd40:	0800bdbd 	.word	0x0800bdbd
 800bd44:	0800bdbd 	.word	0x0800bdbd
 800bd48:	0800bdbd 	.word	0x0800bdbd
 800bd4c:	0800bdbd 	.word	0x0800bdbd
 800bd50:	0800bdbd 	.word	0x0800bdbd
 800bd54:	0800bdbd 	.word	0x0800bdbd
 800bd58:	0800bdbd 	.word	0x0800bdbd
 800bd5c:	0800bdbd 	.word	0x0800bdbd
 800bd60:	2b6e      	cmp	r3, #110	; 0x6e
 800bd62:	d809      	bhi.n	800bd78 <_scanf_float+0x138>
 800bd64:	2b60      	cmp	r3, #96	; 0x60
 800bd66:	d8b2      	bhi.n	800bcce <_scanf_float+0x8e>
 800bd68:	2b54      	cmp	r3, #84	; 0x54
 800bd6a:	d077      	beq.n	800be5c <_scanf_float+0x21c>
 800bd6c:	2b59      	cmp	r3, #89	; 0x59
 800bd6e:	d199      	bne.n	800bca4 <_scanf_float+0x64>
 800bd70:	2d07      	cmp	r5, #7
 800bd72:	d197      	bne.n	800bca4 <_scanf_float+0x64>
 800bd74:	2508      	movs	r5, #8
 800bd76:	e029      	b.n	800bdcc <_scanf_float+0x18c>
 800bd78:	2b74      	cmp	r3, #116	; 0x74
 800bd7a:	d06f      	beq.n	800be5c <_scanf_float+0x21c>
 800bd7c:	2b79      	cmp	r3, #121	; 0x79
 800bd7e:	e7f6      	b.n	800bd6e <_scanf_float+0x12e>
 800bd80:	6821      	ldr	r1, [r4, #0]
 800bd82:	05c8      	lsls	r0, r1, #23
 800bd84:	d51a      	bpl.n	800bdbc <_scanf_float+0x17c>
 800bd86:	9b02      	ldr	r3, [sp, #8]
 800bd88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bd8c:	6021      	str	r1, [r4, #0]
 800bd8e:	f109 0901 	add.w	r9, r9, #1
 800bd92:	b11b      	cbz	r3, 800bd9c <_scanf_float+0x15c>
 800bd94:	3b01      	subs	r3, #1
 800bd96:	3201      	adds	r2, #1
 800bd98:	9302      	str	r3, [sp, #8]
 800bd9a:	60a2      	str	r2, [r4, #8]
 800bd9c:	68a3      	ldr	r3, [r4, #8]
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	60a3      	str	r3, [r4, #8]
 800bda2:	6923      	ldr	r3, [r4, #16]
 800bda4:	3301      	adds	r3, #1
 800bda6:	6123      	str	r3, [r4, #16]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	607b      	str	r3, [r7, #4]
 800bdb0:	f340 8084 	ble.w	800bebc <_scanf_float+0x27c>
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	603b      	str	r3, [r7, #0]
 800bdba:	e766      	b.n	800bc8a <_scanf_float+0x4a>
 800bdbc:	eb1a 0f05 	cmn.w	sl, r5
 800bdc0:	f47f af70 	bne.w	800bca4 <_scanf_float+0x64>
 800bdc4:	6822      	ldr	r2, [r4, #0]
 800bdc6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bdca:	6022      	str	r2, [r4, #0]
 800bdcc:	f806 3b01 	strb.w	r3, [r6], #1
 800bdd0:	e7e4      	b.n	800bd9c <_scanf_float+0x15c>
 800bdd2:	6822      	ldr	r2, [r4, #0]
 800bdd4:	0610      	lsls	r0, r2, #24
 800bdd6:	f57f af65 	bpl.w	800bca4 <_scanf_float+0x64>
 800bdda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bdde:	e7f4      	b.n	800bdca <_scanf_float+0x18a>
 800bde0:	f1ba 0f00 	cmp.w	sl, #0
 800bde4:	d10e      	bne.n	800be04 <_scanf_float+0x1c4>
 800bde6:	f1b9 0f00 	cmp.w	r9, #0
 800bdea:	d10e      	bne.n	800be0a <_scanf_float+0x1ca>
 800bdec:	6822      	ldr	r2, [r4, #0]
 800bdee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bdf2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bdf6:	d108      	bne.n	800be0a <_scanf_float+0x1ca>
 800bdf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bdfc:	f04f 0a01 	mov.w	sl, #1
 800be00:	6022      	str	r2, [r4, #0]
 800be02:	e7e3      	b.n	800bdcc <_scanf_float+0x18c>
 800be04:	f1ba 0f02 	cmp.w	sl, #2
 800be08:	d055      	beq.n	800beb6 <_scanf_float+0x276>
 800be0a:	2d01      	cmp	r5, #1
 800be0c:	d002      	beq.n	800be14 <_scanf_float+0x1d4>
 800be0e:	2d04      	cmp	r5, #4
 800be10:	f47f af48 	bne.w	800bca4 <_scanf_float+0x64>
 800be14:	3501      	adds	r5, #1
 800be16:	b2ed      	uxtb	r5, r5
 800be18:	e7d8      	b.n	800bdcc <_scanf_float+0x18c>
 800be1a:	f1ba 0f01 	cmp.w	sl, #1
 800be1e:	f47f af41 	bne.w	800bca4 <_scanf_float+0x64>
 800be22:	f04f 0a02 	mov.w	sl, #2
 800be26:	e7d1      	b.n	800bdcc <_scanf_float+0x18c>
 800be28:	b97d      	cbnz	r5, 800be4a <_scanf_float+0x20a>
 800be2a:	f1b9 0f00 	cmp.w	r9, #0
 800be2e:	f47f af3c 	bne.w	800bcaa <_scanf_float+0x6a>
 800be32:	6822      	ldr	r2, [r4, #0]
 800be34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800be38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800be3c:	f47f af39 	bne.w	800bcb2 <_scanf_float+0x72>
 800be40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800be44:	2501      	movs	r5, #1
 800be46:	6022      	str	r2, [r4, #0]
 800be48:	e7c0      	b.n	800bdcc <_scanf_float+0x18c>
 800be4a:	2d03      	cmp	r5, #3
 800be4c:	d0e2      	beq.n	800be14 <_scanf_float+0x1d4>
 800be4e:	2d05      	cmp	r5, #5
 800be50:	e7de      	b.n	800be10 <_scanf_float+0x1d0>
 800be52:	2d02      	cmp	r5, #2
 800be54:	f47f af26 	bne.w	800bca4 <_scanf_float+0x64>
 800be58:	2503      	movs	r5, #3
 800be5a:	e7b7      	b.n	800bdcc <_scanf_float+0x18c>
 800be5c:	2d06      	cmp	r5, #6
 800be5e:	f47f af21 	bne.w	800bca4 <_scanf_float+0x64>
 800be62:	2507      	movs	r5, #7
 800be64:	e7b2      	b.n	800bdcc <_scanf_float+0x18c>
 800be66:	6822      	ldr	r2, [r4, #0]
 800be68:	0591      	lsls	r1, r2, #22
 800be6a:	f57f af1b 	bpl.w	800bca4 <_scanf_float+0x64>
 800be6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800be72:	6022      	str	r2, [r4, #0]
 800be74:	f8cd 9004 	str.w	r9, [sp, #4]
 800be78:	e7a8      	b.n	800bdcc <_scanf_float+0x18c>
 800be7a:	6822      	ldr	r2, [r4, #0]
 800be7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800be80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800be84:	d006      	beq.n	800be94 <_scanf_float+0x254>
 800be86:	0550      	lsls	r0, r2, #21
 800be88:	f57f af0c 	bpl.w	800bca4 <_scanf_float+0x64>
 800be8c:	f1b9 0f00 	cmp.w	r9, #0
 800be90:	f43f af0f 	beq.w	800bcb2 <_scanf_float+0x72>
 800be94:	0591      	lsls	r1, r2, #22
 800be96:	bf58      	it	pl
 800be98:	9901      	ldrpl	r1, [sp, #4]
 800be9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800be9e:	bf58      	it	pl
 800bea0:	eba9 0101 	subpl.w	r1, r9, r1
 800bea4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bea8:	f04f 0900 	mov.w	r9, #0
 800beac:	bf58      	it	pl
 800beae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800beb2:	6022      	str	r2, [r4, #0]
 800beb4:	e78a      	b.n	800bdcc <_scanf_float+0x18c>
 800beb6:	f04f 0a03 	mov.w	sl, #3
 800beba:	e787      	b.n	800bdcc <_scanf_float+0x18c>
 800bebc:	4639      	mov	r1, r7
 800bebe:	4640      	mov	r0, r8
 800bec0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bec4:	4798      	blx	r3
 800bec6:	2800      	cmp	r0, #0
 800bec8:	f43f aedf 	beq.w	800bc8a <_scanf_float+0x4a>
 800becc:	e6ea      	b.n	800bca4 <_scanf_float+0x64>
 800bece:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bed2:	463a      	mov	r2, r7
 800bed4:	4640      	mov	r0, r8
 800bed6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800beda:	4798      	blx	r3
 800bedc:	6923      	ldr	r3, [r4, #16]
 800bede:	3b01      	subs	r3, #1
 800bee0:	6123      	str	r3, [r4, #16]
 800bee2:	e6ec      	b.n	800bcbe <_scanf_float+0x7e>
 800bee4:	1e6b      	subs	r3, r5, #1
 800bee6:	2b06      	cmp	r3, #6
 800bee8:	d825      	bhi.n	800bf36 <_scanf_float+0x2f6>
 800beea:	2d02      	cmp	r5, #2
 800beec:	d836      	bhi.n	800bf5c <_scanf_float+0x31c>
 800beee:	455e      	cmp	r6, fp
 800bef0:	f67f aee8 	bls.w	800bcc4 <_scanf_float+0x84>
 800bef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bef8:	463a      	mov	r2, r7
 800befa:	4640      	mov	r0, r8
 800befc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bf00:	4798      	blx	r3
 800bf02:	6923      	ldr	r3, [r4, #16]
 800bf04:	3b01      	subs	r3, #1
 800bf06:	6123      	str	r3, [r4, #16]
 800bf08:	e7f1      	b.n	800beee <_scanf_float+0x2ae>
 800bf0a:	9802      	ldr	r0, [sp, #8]
 800bf0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bf14:	463a      	mov	r2, r7
 800bf16:	9002      	str	r0, [sp, #8]
 800bf18:	4640      	mov	r0, r8
 800bf1a:	4798      	blx	r3
 800bf1c:	6923      	ldr	r3, [r4, #16]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	6123      	str	r3, [r4, #16]
 800bf22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf26:	fa5f fa8a 	uxtb.w	sl, sl
 800bf2a:	f1ba 0f02 	cmp.w	sl, #2
 800bf2e:	d1ec      	bne.n	800bf0a <_scanf_float+0x2ca>
 800bf30:	3d03      	subs	r5, #3
 800bf32:	b2ed      	uxtb	r5, r5
 800bf34:	1b76      	subs	r6, r6, r5
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	05da      	lsls	r2, r3, #23
 800bf3a:	d52f      	bpl.n	800bf9c <_scanf_float+0x35c>
 800bf3c:	055b      	lsls	r3, r3, #21
 800bf3e:	d510      	bpl.n	800bf62 <_scanf_float+0x322>
 800bf40:	455e      	cmp	r6, fp
 800bf42:	f67f aebf 	bls.w	800bcc4 <_scanf_float+0x84>
 800bf46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf4a:	463a      	mov	r2, r7
 800bf4c:	4640      	mov	r0, r8
 800bf4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bf52:	4798      	blx	r3
 800bf54:	6923      	ldr	r3, [r4, #16]
 800bf56:	3b01      	subs	r3, #1
 800bf58:	6123      	str	r3, [r4, #16]
 800bf5a:	e7f1      	b.n	800bf40 <_scanf_float+0x300>
 800bf5c:	46aa      	mov	sl, r5
 800bf5e:	9602      	str	r6, [sp, #8]
 800bf60:	e7df      	b.n	800bf22 <_scanf_float+0x2e2>
 800bf62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bf66:	6923      	ldr	r3, [r4, #16]
 800bf68:	2965      	cmp	r1, #101	; 0x65
 800bf6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bf6e:	f106 35ff 	add.w	r5, r6, #4294967295
 800bf72:	6123      	str	r3, [r4, #16]
 800bf74:	d00c      	beq.n	800bf90 <_scanf_float+0x350>
 800bf76:	2945      	cmp	r1, #69	; 0x45
 800bf78:	d00a      	beq.n	800bf90 <_scanf_float+0x350>
 800bf7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf7e:	463a      	mov	r2, r7
 800bf80:	4640      	mov	r0, r8
 800bf82:	4798      	blx	r3
 800bf84:	6923      	ldr	r3, [r4, #16]
 800bf86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	1eb5      	subs	r5, r6, #2
 800bf8e:	6123      	str	r3, [r4, #16]
 800bf90:	463a      	mov	r2, r7
 800bf92:	4640      	mov	r0, r8
 800bf94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf98:	4798      	blx	r3
 800bf9a:	462e      	mov	r6, r5
 800bf9c:	6825      	ldr	r5, [r4, #0]
 800bf9e:	f015 0510 	ands.w	r5, r5, #16
 800bfa2:	d159      	bne.n	800c058 <_scanf_float+0x418>
 800bfa4:	7035      	strb	r5, [r6, #0]
 800bfa6:	6823      	ldr	r3, [r4, #0]
 800bfa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bfac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfb0:	d11c      	bne.n	800bfec <_scanf_float+0x3ac>
 800bfb2:	9b01      	ldr	r3, [sp, #4]
 800bfb4:	454b      	cmp	r3, r9
 800bfb6:	eba3 0209 	sub.w	r2, r3, r9
 800bfba:	d124      	bne.n	800c006 <_scanf_float+0x3c6>
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	4659      	mov	r1, fp
 800bfc0:	4640      	mov	r0, r8
 800bfc2:	f000 fedd 	bl	800cd80 <_strtod_r>
 800bfc6:	f8d4 c000 	ldr.w	ip, [r4]
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	f01c 0f02 	tst.w	ip, #2
 800bfd0:	4606      	mov	r6, r0
 800bfd2:	460f      	mov	r7, r1
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	d021      	beq.n	800c01c <_scanf_float+0x3dc>
 800bfd8:	9903      	ldr	r1, [sp, #12]
 800bfda:	1d1a      	adds	r2, r3, #4
 800bfdc:	600a      	str	r2, [r1, #0]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	e9c3 6700 	strd	r6, r7, [r3]
 800bfe4:	68e3      	ldr	r3, [r4, #12]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	60e3      	str	r3, [r4, #12]
 800bfea:	e66c      	b.n	800bcc6 <_scanf_float+0x86>
 800bfec:	9b04      	ldr	r3, [sp, #16]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d0e4      	beq.n	800bfbc <_scanf_float+0x37c>
 800bff2:	9905      	ldr	r1, [sp, #20]
 800bff4:	230a      	movs	r3, #10
 800bff6:	462a      	mov	r2, r5
 800bff8:	4640      	mov	r0, r8
 800bffa:	3101      	adds	r1, #1
 800bffc:	f000 ff4c 	bl	800ce98 <_strtol_r>
 800c000:	9b04      	ldr	r3, [sp, #16]
 800c002:	9e05      	ldr	r6, [sp, #20]
 800c004:	1ac2      	subs	r2, r0, r3
 800c006:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c00a:	429e      	cmp	r6, r3
 800c00c:	bf28      	it	cs
 800c00e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c012:	4630      	mov	r0, r6
 800c014:	4911      	ldr	r1, [pc, #68]	; (800c05c <_scanf_float+0x41c>)
 800c016:	f000 f839 	bl	800c08c <siprintf>
 800c01a:	e7cf      	b.n	800bfbc <_scanf_float+0x37c>
 800c01c:	f01c 0f04 	tst.w	ip, #4
 800c020:	f103 0e04 	add.w	lr, r3, #4
 800c024:	d003      	beq.n	800c02e <_scanf_float+0x3ee>
 800c026:	9903      	ldr	r1, [sp, #12]
 800c028:	f8c1 e000 	str.w	lr, [r1]
 800c02c:	e7d7      	b.n	800bfde <_scanf_float+0x39e>
 800c02e:	9a03      	ldr	r2, [sp, #12]
 800c030:	f8c2 e000 	str.w	lr, [r2]
 800c034:	f8d3 8000 	ldr.w	r8, [r3]
 800c038:	4602      	mov	r2, r0
 800c03a:	460b      	mov	r3, r1
 800c03c:	f7f4 fd26 	bl	8000a8c <__aeabi_dcmpun>
 800c040:	b128      	cbz	r0, 800c04e <_scanf_float+0x40e>
 800c042:	4807      	ldr	r0, [pc, #28]	; (800c060 <_scanf_float+0x420>)
 800c044:	f000 f81e 	bl	800c084 <nanf>
 800c048:	f8c8 0000 	str.w	r0, [r8]
 800c04c:	e7ca      	b.n	800bfe4 <_scanf_float+0x3a4>
 800c04e:	4630      	mov	r0, r6
 800c050:	4639      	mov	r1, r7
 800c052:	f7f4 fd79 	bl	8000b48 <__aeabi_d2f>
 800c056:	e7f7      	b.n	800c048 <_scanf_float+0x408>
 800c058:	2500      	movs	r5, #0
 800c05a:	e634      	b.n	800bcc6 <_scanf_float+0x86>
 800c05c:	0800f90c 	.word	0x0800f90c
 800c060:	0800fd28 	.word	0x0800fd28

0800c064 <_sbrk_r>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	2300      	movs	r3, #0
 800c068:	4d05      	ldr	r5, [pc, #20]	; (800c080 <_sbrk_r+0x1c>)
 800c06a:	4604      	mov	r4, r0
 800c06c:	4608      	mov	r0, r1
 800c06e:	602b      	str	r3, [r5, #0]
 800c070:	f7f5 fefc 	bl	8001e6c <_sbrk>
 800c074:	1c43      	adds	r3, r0, #1
 800c076:	d102      	bne.n	800c07e <_sbrk_r+0x1a>
 800c078:	682b      	ldr	r3, [r5, #0]
 800c07a:	b103      	cbz	r3, 800c07e <_sbrk_r+0x1a>
 800c07c:	6023      	str	r3, [r4, #0]
 800c07e:	bd38      	pop	{r3, r4, r5, pc}
 800c080:	20005484 	.word	0x20005484

0800c084 <nanf>:
 800c084:	4800      	ldr	r0, [pc, #0]	; (800c088 <nanf+0x4>)
 800c086:	4770      	bx	lr
 800c088:	7fc00000 	.word	0x7fc00000

0800c08c <siprintf>:
 800c08c:	b40e      	push	{r1, r2, r3}
 800c08e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c092:	b500      	push	{lr}
 800c094:	b09c      	sub	sp, #112	; 0x70
 800c096:	ab1d      	add	r3, sp, #116	; 0x74
 800c098:	9002      	str	r0, [sp, #8]
 800c09a:	9006      	str	r0, [sp, #24]
 800c09c:	9107      	str	r1, [sp, #28]
 800c09e:	9104      	str	r1, [sp, #16]
 800c0a0:	4808      	ldr	r0, [pc, #32]	; (800c0c4 <siprintf+0x38>)
 800c0a2:	4909      	ldr	r1, [pc, #36]	; (800c0c8 <siprintf+0x3c>)
 800c0a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0a8:	9105      	str	r1, [sp, #20]
 800c0aa:	6800      	ldr	r0, [r0, #0]
 800c0ac:	a902      	add	r1, sp, #8
 800c0ae:	9301      	str	r3, [sp, #4]
 800c0b0:	f002 ff20 	bl	800eef4 <_svfiprintf_r>
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	9b02      	ldr	r3, [sp, #8]
 800c0b8:	701a      	strb	r2, [r3, #0]
 800c0ba:	b01c      	add	sp, #112	; 0x70
 800c0bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0c0:	b003      	add	sp, #12
 800c0c2:	4770      	bx	lr
 800c0c4:	2000001c 	.word	0x2000001c
 800c0c8:	ffff0208 	.word	0xffff0208

0800c0cc <__sread>:
 800c0cc:	b510      	push	{r4, lr}
 800c0ce:	460c      	mov	r4, r1
 800c0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0d4:	f003 f80e 	bl	800f0f4 <_read_r>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	bfab      	itete	ge
 800c0dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0de:	89a3      	ldrhlt	r3, [r4, #12]
 800c0e0:	181b      	addge	r3, r3, r0
 800c0e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0e6:	bfac      	ite	ge
 800c0e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0ea:	81a3      	strhlt	r3, [r4, #12]
 800c0ec:	bd10      	pop	{r4, pc}

0800c0ee <__swrite>:
 800c0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f2:	461f      	mov	r7, r3
 800c0f4:	898b      	ldrh	r3, [r1, #12]
 800c0f6:	4605      	mov	r5, r0
 800c0f8:	05db      	lsls	r3, r3, #23
 800c0fa:	460c      	mov	r4, r1
 800c0fc:	4616      	mov	r6, r2
 800c0fe:	d505      	bpl.n	800c10c <__swrite+0x1e>
 800c100:	2302      	movs	r3, #2
 800c102:	2200      	movs	r2, #0
 800c104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c108:	f002 f994 	bl	800e434 <_lseek_r>
 800c10c:	89a3      	ldrh	r3, [r4, #12]
 800c10e:	4632      	mov	r2, r6
 800c110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c114:	81a3      	strh	r3, [r4, #12]
 800c116:	4628      	mov	r0, r5
 800c118:	463b      	mov	r3, r7
 800c11a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c11e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c122:	f000 bebb 	b.w	800ce9c <_write_r>

0800c126 <__sseek>:
 800c126:	b510      	push	{r4, lr}
 800c128:	460c      	mov	r4, r1
 800c12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c12e:	f002 f981 	bl	800e434 <_lseek_r>
 800c132:	1c43      	adds	r3, r0, #1
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	bf15      	itete	ne
 800c138:	6560      	strne	r0, [r4, #84]	; 0x54
 800c13a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c13e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c142:	81a3      	strheq	r3, [r4, #12]
 800c144:	bf18      	it	ne
 800c146:	81a3      	strhne	r3, [r4, #12]
 800c148:	bd10      	pop	{r4, pc}

0800c14a <__sclose>:
 800c14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c14e:	f000 beb7 	b.w	800cec0 <_close_r>

0800c152 <sulp>:
 800c152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c156:	460f      	mov	r7, r1
 800c158:	4690      	mov	r8, r2
 800c15a:	f002 fd19 	bl	800eb90 <__ulp>
 800c15e:	4604      	mov	r4, r0
 800c160:	460d      	mov	r5, r1
 800c162:	f1b8 0f00 	cmp.w	r8, #0
 800c166:	d011      	beq.n	800c18c <sulp+0x3a>
 800c168:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c16c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c170:	2b00      	cmp	r3, #0
 800c172:	dd0b      	ble.n	800c18c <sulp+0x3a>
 800c174:	2400      	movs	r4, #0
 800c176:	051b      	lsls	r3, r3, #20
 800c178:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c17c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c180:	4622      	mov	r2, r4
 800c182:	462b      	mov	r3, r5
 800c184:	f7f4 f9e8 	bl	8000558 <__aeabi_dmul>
 800c188:	4604      	mov	r4, r0
 800c18a:	460d      	mov	r5, r1
 800c18c:	4620      	mov	r0, r4
 800c18e:	4629      	mov	r1, r5
 800c190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c194:	0000      	movs	r0, r0
	...

0800c198 <_strtod_l>:
 800c198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19c:	469b      	mov	fp, r3
 800c19e:	2300      	movs	r3, #0
 800c1a0:	b0a1      	sub	sp, #132	; 0x84
 800c1a2:	931c      	str	r3, [sp, #112]	; 0x70
 800c1a4:	4ba1      	ldr	r3, [pc, #644]	; (800c42c <_strtod_l+0x294>)
 800c1a6:	4682      	mov	sl, r0
 800c1a8:	681f      	ldr	r7, [r3, #0]
 800c1aa:	460e      	mov	r6, r1
 800c1ac:	4638      	mov	r0, r7
 800c1ae:	9217      	str	r2, [sp, #92]	; 0x5c
 800c1b0:	f7f4 f80e 	bl	80001d0 <strlen>
 800c1b4:	f04f 0800 	mov.w	r8, #0
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	f04f 0900 	mov.w	r9, #0
 800c1be:	961b      	str	r6, [sp, #108]	; 0x6c
 800c1c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1c2:	781a      	ldrb	r2, [r3, #0]
 800c1c4:	2a2b      	cmp	r2, #43	; 0x2b
 800c1c6:	d04c      	beq.n	800c262 <_strtod_l+0xca>
 800c1c8:	d83a      	bhi.n	800c240 <_strtod_l+0xa8>
 800c1ca:	2a0d      	cmp	r2, #13
 800c1cc:	d833      	bhi.n	800c236 <_strtod_l+0x9e>
 800c1ce:	2a08      	cmp	r2, #8
 800c1d0:	d833      	bhi.n	800c23a <_strtod_l+0xa2>
 800c1d2:	2a00      	cmp	r2, #0
 800c1d4:	d03d      	beq.n	800c252 <_strtod_l+0xba>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	930c      	str	r3, [sp, #48]	; 0x30
 800c1da:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c1dc:	782b      	ldrb	r3, [r5, #0]
 800c1de:	2b30      	cmp	r3, #48	; 0x30
 800c1e0:	f040 80af 	bne.w	800c342 <_strtod_l+0x1aa>
 800c1e4:	786b      	ldrb	r3, [r5, #1]
 800c1e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c1ea:	2b58      	cmp	r3, #88	; 0x58
 800c1ec:	d16c      	bne.n	800c2c8 <_strtod_l+0x130>
 800c1ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1f0:	4650      	mov	r0, sl
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	ab1c      	add	r3, sp, #112	; 0x70
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	4a8d      	ldr	r2, [pc, #564]	; (800c430 <_strtod_l+0x298>)
 800c1fa:	f8cd b008 	str.w	fp, [sp, #8]
 800c1fe:	ab1d      	add	r3, sp, #116	; 0x74
 800c200:	a91b      	add	r1, sp, #108	; 0x6c
 800c202:	f001 fe15 	bl	800de30 <__gethex>
 800c206:	f010 0607 	ands.w	r6, r0, #7
 800c20a:	4604      	mov	r4, r0
 800c20c:	d005      	beq.n	800c21a <_strtod_l+0x82>
 800c20e:	2e06      	cmp	r6, #6
 800c210:	d129      	bne.n	800c266 <_strtod_l+0xce>
 800c212:	2300      	movs	r3, #0
 800c214:	3501      	adds	r5, #1
 800c216:	951b      	str	r5, [sp, #108]	; 0x6c
 800c218:	930c      	str	r3, [sp, #48]	; 0x30
 800c21a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f040 8596 	bne.w	800cd4e <_strtod_l+0xbb6>
 800c222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c224:	b1d3      	cbz	r3, 800c25c <_strtod_l+0xc4>
 800c226:	4642      	mov	r2, r8
 800c228:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c22c:	4610      	mov	r0, r2
 800c22e:	4619      	mov	r1, r3
 800c230:	b021      	add	sp, #132	; 0x84
 800c232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c236:	2a20      	cmp	r2, #32
 800c238:	d1cd      	bne.n	800c1d6 <_strtod_l+0x3e>
 800c23a:	3301      	adds	r3, #1
 800c23c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c23e:	e7bf      	b.n	800c1c0 <_strtod_l+0x28>
 800c240:	2a2d      	cmp	r2, #45	; 0x2d
 800c242:	d1c8      	bne.n	800c1d6 <_strtod_l+0x3e>
 800c244:	2201      	movs	r2, #1
 800c246:	920c      	str	r2, [sp, #48]	; 0x30
 800c248:	1c5a      	adds	r2, r3, #1
 800c24a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c24c:	785b      	ldrb	r3, [r3, #1]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1c3      	bne.n	800c1da <_strtod_l+0x42>
 800c252:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c254:	961b      	str	r6, [sp, #108]	; 0x6c
 800c256:	2b00      	cmp	r3, #0
 800c258:	f040 8577 	bne.w	800cd4a <_strtod_l+0xbb2>
 800c25c:	4642      	mov	r2, r8
 800c25e:	464b      	mov	r3, r9
 800c260:	e7e4      	b.n	800c22c <_strtod_l+0x94>
 800c262:	2200      	movs	r2, #0
 800c264:	e7ef      	b.n	800c246 <_strtod_l+0xae>
 800c266:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c268:	b13a      	cbz	r2, 800c27a <_strtod_l+0xe2>
 800c26a:	2135      	movs	r1, #53	; 0x35
 800c26c:	a81e      	add	r0, sp, #120	; 0x78
 800c26e:	f002 fd93 	bl	800ed98 <__copybits>
 800c272:	4650      	mov	r0, sl
 800c274:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c276:	f002 f95b 	bl	800e530 <_Bfree>
 800c27a:	3e01      	subs	r6, #1
 800c27c:	2e05      	cmp	r6, #5
 800c27e:	d807      	bhi.n	800c290 <_strtod_l+0xf8>
 800c280:	e8df f006 	tbb	[pc, r6]
 800c284:	1d180b0e 	.word	0x1d180b0e
 800c288:	030e      	.short	0x030e
 800c28a:	f04f 0900 	mov.w	r9, #0
 800c28e:	46c8      	mov	r8, r9
 800c290:	0721      	lsls	r1, r4, #28
 800c292:	d5c2      	bpl.n	800c21a <_strtod_l+0x82>
 800c294:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800c298:	e7bf      	b.n	800c21a <_strtod_l+0x82>
 800c29a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800c29e:	e7f7      	b.n	800c290 <_strtod_l+0xf8>
 800c2a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c2a2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800c2a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c2aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c2ae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c2b2:	e7ed      	b.n	800c290 <_strtod_l+0xf8>
 800c2b4:	f04f 0800 	mov.w	r8, #0
 800c2b8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c434 <_strtod_l+0x29c>
 800c2bc:	e7e8      	b.n	800c290 <_strtod_l+0xf8>
 800c2be:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c2c2:	f04f 38ff 	mov.w	r8, #4294967295
 800c2c6:	e7e3      	b.n	800c290 <_strtod_l+0xf8>
 800c2c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2ca:	1c5a      	adds	r2, r3, #1
 800c2cc:	921b      	str	r2, [sp, #108]	; 0x6c
 800c2ce:	785b      	ldrb	r3, [r3, #1]
 800c2d0:	2b30      	cmp	r3, #48	; 0x30
 800c2d2:	d0f9      	beq.n	800c2c8 <_strtod_l+0x130>
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d0a0      	beq.n	800c21a <_strtod_l+0x82>
 800c2d8:	2301      	movs	r3, #1
 800c2da:	9307      	str	r3, [sp, #28]
 800c2dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2de:	220a      	movs	r2, #10
 800c2e0:	9308      	str	r3, [sp, #32]
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	469b      	mov	fp, r3
 800c2e6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c2ea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c2ec:	7805      	ldrb	r5, [r0, #0]
 800c2ee:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800c2f2:	b2d9      	uxtb	r1, r3
 800c2f4:	2909      	cmp	r1, #9
 800c2f6:	d926      	bls.n	800c346 <_strtod_l+0x1ae>
 800c2f8:	4622      	mov	r2, r4
 800c2fa:	4639      	mov	r1, r7
 800c2fc:	f002 ff12 	bl	800f124 <strncmp>
 800c300:	2800      	cmp	r0, #0
 800c302:	d032      	beq.n	800c36a <_strtod_l+0x1d2>
 800c304:	2000      	movs	r0, #0
 800c306:	462b      	mov	r3, r5
 800c308:	465c      	mov	r4, fp
 800c30a:	4602      	mov	r2, r0
 800c30c:	9004      	str	r0, [sp, #16]
 800c30e:	2b65      	cmp	r3, #101	; 0x65
 800c310:	d001      	beq.n	800c316 <_strtod_l+0x17e>
 800c312:	2b45      	cmp	r3, #69	; 0x45
 800c314:	d113      	bne.n	800c33e <_strtod_l+0x1a6>
 800c316:	b91c      	cbnz	r4, 800c320 <_strtod_l+0x188>
 800c318:	9b07      	ldr	r3, [sp, #28]
 800c31a:	4303      	orrs	r3, r0
 800c31c:	d099      	beq.n	800c252 <_strtod_l+0xba>
 800c31e:	2400      	movs	r4, #0
 800c320:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c322:	1c73      	adds	r3, r6, #1
 800c324:	931b      	str	r3, [sp, #108]	; 0x6c
 800c326:	7873      	ldrb	r3, [r6, #1]
 800c328:	2b2b      	cmp	r3, #43	; 0x2b
 800c32a:	d078      	beq.n	800c41e <_strtod_l+0x286>
 800c32c:	2b2d      	cmp	r3, #45	; 0x2d
 800c32e:	d07b      	beq.n	800c428 <_strtod_l+0x290>
 800c330:	2700      	movs	r7, #0
 800c332:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c336:	2909      	cmp	r1, #9
 800c338:	f240 8082 	bls.w	800c440 <_strtod_l+0x2a8>
 800c33c:	961b      	str	r6, [sp, #108]	; 0x6c
 800c33e:	2500      	movs	r5, #0
 800c340:	e09e      	b.n	800c480 <_strtod_l+0x2e8>
 800c342:	2300      	movs	r3, #0
 800c344:	e7c9      	b.n	800c2da <_strtod_l+0x142>
 800c346:	f1bb 0f08 	cmp.w	fp, #8
 800c34a:	bfd5      	itete	le
 800c34c:	9906      	ldrle	r1, [sp, #24]
 800c34e:	9905      	ldrgt	r1, [sp, #20]
 800c350:	fb02 3301 	mlale	r3, r2, r1, r3
 800c354:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c358:	f100 0001 	add.w	r0, r0, #1
 800c35c:	bfd4      	ite	le
 800c35e:	9306      	strle	r3, [sp, #24]
 800c360:	9305      	strgt	r3, [sp, #20]
 800c362:	f10b 0b01 	add.w	fp, fp, #1
 800c366:	901b      	str	r0, [sp, #108]	; 0x6c
 800c368:	e7bf      	b.n	800c2ea <_strtod_l+0x152>
 800c36a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c36c:	191a      	adds	r2, r3, r4
 800c36e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c370:	5d1b      	ldrb	r3, [r3, r4]
 800c372:	f1bb 0f00 	cmp.w	fp, #0
 800c376:	d036      	beq.n	800c3e6 <_strtod_l+0x24e>
 800c378:	465c      	mov	r4, fp
 800c37a:	9004      	str	r0, [sp, #16]
 800c37c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c380:	2a09      	cmp	r2, #9
 800c382:	d912      	bls.n	800c3aa <_strtod_l+0x212>
 800c384:	2201      	movs	r2, #1
 800c386:	e7c2      	b.n	800c30e <_strtod_l+0x176>
 800c388:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c38a:	3001      	adds	r0, #1
 800c38c:	1c5a      	adds	r2, r3, #1
 800c38e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c390:	785b      	ldrb	r3, [r3, #1]
 800c392:	2b30      	cmp	r3, #48	; 0x30
 800c394:	d0f8      	beq.n	800c388 <_strtod_l+0x1f0>
 800c396:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c39a:	2a08      	cmp	r2, #8
 800c39c:	f200 84dc 	bhi.w	800cd58 <_strtod_l+0xbc0>
 800c3a0:	9004      	str	r0, [sp, #16]
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	4604      	mov	r4, r0
 800c3a6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c3a8:	9208      	str	r2, [sp, #32]
 800c3aa:	3b30      	subs	r3, #48	; 0x30
 800c3ac:	f100 0201 	add.w	r2, r0, #1
 800c3b0:	d013      	beq.n	800c3da <_strtod_l+0x242>
 800c3b2:	9904      	ldr	r1, [sp, #16]
 800c3b4:	1905      	adds	r5, r0, r4
 800c3b6:	4411      	add	r1, r2
 800c3b8:	9104      	str	r1, [sp, #16]
 800c3ba:	4622      	mov	r2, r4
 800c3bc:	210a      	movs	r1, #10
 800c3be:	42aa      	cmp	r2, r5
 800c3c0:	d113      	bne.n	800c3ea <_strtod_l+0x252>
 800c3c2:	1822      	adds	r2, r4, r0
 800c3c4:	2a08      	cmp	r2, #8
 800c3c6:	f104 0401 	add.w	r4, r4, #1
 800c3ca:	4404      	add	r4, r0
 800c3cc:	dc1b      	bgt.n	800c406 <_strtod_l+0x26e>
 800c3ce:	220a      	movs	r2, #10
 800c3d0:	9906      	ldr	r1, [sp, #24]
 800c3d2:	fb02 3301 	mla	r3, r2, r1, r3
 800c3d6:	9306      	str	r3, [sp, #24]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3dc:	4610      	mov	r0, r2
 800c3de:	1c59      	adds	r1, r3, #1
 800c3e0:	911b      	str	r1, [sp, #108]	; 0x6c
 800c3e2:	785b      	ldrb	r3, [r3, #1]
 800c3e4:	e7ca      	b.n	800c37c <_strtod_l+0x1e4>
 800c3e6:	4658      	mov	r0, fp
 800c3e8:	e7d3      	b.n	800c392 <_strtod_l+0x1fa>
 800c3ea:	2a08      	cmp	r2, #8
 800c3ec:	dc04      	bgt.n	800c3f8 <_strtod_l+0x260>
 800c3ee:	9f06      	ldr	r7, [sp, #24]
 800c3f0:	434f      	muls	r7, r1
 800c3f2:	9706      	str	r7, [sp, #24]
 800c3f4:	3201      	adds	r2, #1
 800c3f6:	e7e2      	b.n	800c3be <_strtod_l+0x226>
 800c3f8:	1c57      	adds	r7, r2, #1
 800c3fa:	2f10      	cmp	r7, #16
 800c3fc:	bfde      	ittt	le
 800c3fe:	9f05      	ldrle	r7, [sp, #20]
 800c400:	434f      	mulle	r7, r1
 800c402:	9705      	strle	r7, [sp, #20]
 800c404:	e7f6      	b.n	800c3f4 <_strtod_l+0x25c>
 800c406:	2c10      	cmp	r4, #16
 800c408:	bfdf      	itttt	le
 800c40a:	220a      	movle	r2, #10
 800c40c:	9905      	ldrle	r1, [sp, #20]
 800c40e:	fb02 3301 	mlale	r3, r2, r1, r3
 800c412:	9305      	strle	r3, [sp, #20]
 800c414:	e7e0      	b.n	800c3d8 <_strtod_l+0x240>
 800c416:	2300      	movs	r3, #0
 800c418:	2201      	movs	r2, #1
 800c41a:	9304      	str	r3, [sp, #16]
 800c41c:	e77c      	b.n	800c318 <_strtod_l+0x180>
 800c41e:	2700      	movs	r7, #0
 800c420:	1cb3      	adds	r3, r6, #2
 800c422:	931b      	str	r3, [sp, #108]	; 0x6c
 800c424:	78b3      	ldrb	r3, [r6, #2]
 800c426:	e784      	b.n	800c332 <_strtod_l+0x19a>
 800c428:	2701      	movs	r7, #1
 800c42a:	e7f9      	b.n	800c420 <_strtod_l+0x288>
 800c42c:	0800fb68 	.word	0x0800fb68
 800c430:	0800f914 	.word	0x0800f914
 800c434:	7ff00000 	.word	0x7ff00000
 800c438:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c43a:	1c59      	adds	r1, r3, #1
 800c43c:	911b      	str	r1, [sp, #108]	; 0x6c
 800c43e:	785b      	ldrb	r3, [r3, #1]
 800c440:	2b30      	cmp	r3, #48	; 0x30
 800c442:	d0f9      	beq.n	800c438 <_strtod_l+0x2a0>
 800c444:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800c448:	2908      	cmp	r1, #8
 800c44a:	f63f af78 	bhi.w	800c33e <_strtod_l+0x1a6>
 800c44e:	f04f 0e0a 	mov.w	lr, #10
 800c452:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800c456:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c458:	9309      	str	r3, [sp, #36]	; 0x24
 800c45a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c45c:	1c59      	adds	r1, r3, #1
 800c45e:	911b      	str	r1, [sp, #108]	; 0x6c
 800c460:	785b      	ldrb	r3, [r3, #1]
 800c462:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800c466:	2d09      	cmp	r5, #9
 800c468:	d935      	bls.n	800c4d6 <_strtod_l+0x33e>
 800c46a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c46c:	1b49      	subs	r1, r1, r5
 800c46e:	2908      	cmp	r1, #8
 800c470:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c474:	dc02      	bgt.n	800c47c <_strtod_l+0x2e4>
 800c476:	4565      	cmp	r5, ip
 800c478:	bfa8      	it	ge
 800c47a:	4665      	movge	r5, ip
 800c47c:	b107      	cbz	r7, 800c480 <_strtod_l+0x2e8>
 800c47e:	426d      	negs	r5, r5
 800c480:	2c00      	cmp	r4, #0
 800c482:	d14c      	bne.n	800c51e <_strtod_l+0x386>
 800c484:	9907      	ldr	r1, [sp, #28]
 800c486:	4301      	orrs	r1, r0
 800c488:	f47f aec7 	bne.w	800c21a <_strtod_l+0x82>
 800c48c:	2a00      	cmp	r2, #0
 800c48e:	f47f aee0 	bne.w	800c252 <_strtod_l+0xba>
 800c492:	2b69      	cmp	r3, #105	; 0x69
 800c494:	d026      	beq.n	800c4e4 <_strtod_l+0x34c>
 800c496:	dc23      	bgt.n	800c4e0 <_strtod_l+0x348>
 800c498:	2b49      	cmp	r3, #73	; 0x49
 800c49a:	d023      	beq.n	800c4e4 <_strtod_l+0x34c>
 800c49c:	2b4e      	cmp	r3, #78	; 0x4e
 800c49e:	f47f aed8 	bne.w	800c252 <_strtod_l+0xba>
 800c4a2:	499c      	ldr	r1, [pc, #624]	; (800c714 <_strtod_l+0x57c>)
 800c4a4:	a81b      	add	r0, sp, #108	; 0x6c
 800c4a6:	f001 ff11 	bl	800e2cc <__match>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	f43f aed1 	beq.w	800c252 <_strtod_l+0xba>
 800c4b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	2b28      	cmp	r3, #40	; 0x28
 800c4b6:	d12c      	bne.n	800c512 <_strtod_l+0x37a>
 800c4b8:	4997      	ldr	r1, [pc, #604]	; (800c718 <_strtod_l+0x580>)
 800c4ba:	aa1e      	add	r2, sp, #120	; 0x78
 800c4bc:	a81b      	add	r0, sp, #108	; 0x6c
 800c4be:	f001 ff19 	bl	800e2f4 <__hexnan>
 800c4c2:	2805      	cmp	r0, #5
 800c4c4:	d125      	bne.n	800c512 <_strtod_l+0x37a>
 800c4c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c4c8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c4cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c4d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c4d4:	e6a1      	b.n	800c21a <_strtod_l+0x82>
 800c4d6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800c4da:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c4de:	e7bc      	b.n	800c45a <_strtod_l+0x2c2>
 800c4e0:	2b6e      	cmp	r3, #110	; 0x6e
 800c4e2:	e7dc      	b.n	800c49e <_strtod_l+0x306>
 800c4e4:	498d      	ldr	r1, [pc, #564]	; (800c71c <_strtod_l+0x584>)
 800c4e6:	a81b      	add	r0, sp, #108	; 0x6c
 800c4e8:	f001 fef0 	bl	800e2cc <__match>
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	f43f aeb0 	beq.w	800c252 <_strtod_l+0xba>
 800c4f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4f4:	498a      	ldr	r1, [pc, #552]	; (800c720 <_strtod_l+0x588>)
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	a81b      	add	r0, sp, #108	; 0x6c
 800c4fa:	931b      	str	r3, [sp, #108]	; 0x6c
 800c4fc:	f001 fee6 	bl	800e2cc <__match>
 800c500:	b910      	cbnz	r0, 800c508 <_strtod_l+0x370>
 800c502:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c504:	3301      	adds	r3, #1
 800c506:	931b      	str	r3, [sp, #108]	; 0x6c
 800c508:	f04f 0800 	mov.w	r8, #0
 800c50c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800c730 <_strtod_l+0x598>
 800c510:	e683      	b.n	800c21a <_strtod_l+0x82>
 800c512:	4884      	ldr	r0, [pc, #528]	; (800c724 <_strtod_l+0x58c>)
 800c514:	f002 fe00 	bl	800f118 <nan>
 800c518:	4680      	mov	r8, r0
 800c51a:	4689      	mov	r9, r1
 800c51c:	e67d      	b.n	800c21a <_strtod_l+0x82>
 800c51e:	9b04      	ldr	r3, [sp, #16]
 800c520:	f1bb 0f00 	cmp.w	fp, #0
 800c524:	bf08      	it	eq
 800c526:	46a3      	moveq	fp, r4
 800c528:	1aeb      	subs	r3, r5, r3
 800c52a:	2c10      	cmp	r4, #16
 800c52c:	9806      	ldr	r0, [sp, #24]
 800c52e:	4626      	mov	r6, r4
 800c530:	9307      	str	r3, [sp, #28]
 800c532:	bfa8      	it	ge
 800c534:	2610      	movge	r6, #16
 800c536:	f7f3 ff95 	bl	8000464 <__aeabi_ui2d>
 800c53a:	2c09      	cmp	r4, #9
 800c53c:	4680      	mov	r8, r0
 800c53e:	4689      	mov	r9, r1
 800c540:	dd13      	ble.n	800c56a <_strtod_l+0x3d2>
 800c542:	4b79      	ldr	r3, [pc, #484]	; (800c728 <_strtod_l+0x590>)
 800c544:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c548:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c54c:	f7f4 f804 	bl	8000558 <__aeabi_dmul>
 800c550:	4680      	mov	r8, r0
 800c552:	9805      	ldr	r0, [sp, #20]
 800c554:	4689      	mov	r9, r1
 800c556:	f7f3 ff85 	bl	8000464 <__aeabi_ui2d>
 800c55a:	4602      	mov	r2, r0
 800c55c:	460b      	mov	r3, r1
 800c55e:	4640      	mov	r0, r8
 800c560:	4649      	mov	r1, r9
 800c562:	f7f3 fe43 	bl	80001ec <__adddf3>
 800c566:	4680      	mov	r8, r0
 800c568:	4689      	mov	r9, r1
 800c56a:	2c0f      	cmp	r4, #15
 800c56c:	dc36      	bgt.n	800c5dc <_strtod_l+0x444>
 800c56e:	9b07      	ldr	r3, [sp, #28]
 800c570:	2b00      	cmp	r3, #0
 800c572:	f43f ae52 	beq.w	800c21a <_strtod_l+0x82>
 800c576:	dd22      	ble.n	800c5be <_strtod_l+0x426>
 800c578:	2b16      	cmp	r3, #22
 800c57a:	dc09      	bgt.n	800c590 <_strtod_l+0x3f8>
 800c57c:	4c6a      	ldr	r4, [pc, #424]	; (800c728 <_strtod_l+0x590>)
 800c57e:	4642      	mov	r2, r8
 800c580:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800c584:	464b      	mov	r3, r9
 800c586:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c58a:	f7f3 ffe5 	bl	8000558 <__aeabi_dmul>
 800c58e:	e7c3      	b.n	800c518 <_strtod_l+0x380>
 800c590:	9a07      	ldr	r2, [sp, #28]
 800c592:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c596:	4293      	cmp	r3, r2
 800c598:	db20      	blt.n	800c5dc <_strtod_l+0x444>
 800c59a:	4d63      	ldr	r5, [pc, #396]	; (800c728 <_strtod_l+0x590>)
 800c59c:	f1c4 040f 	rsb	r4, r4, #15
 800c5a0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c5a4:	4642      	mov	r2, r8
 800c5a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5aa:	464b      	mov	r3, r9
 800c5ac:	f7f3 ffd4 	bl	8000558 <__aeabi_dmul>
 800c5b0:	9b07      	ldr	r3, [sp, #28]
 800c5b2:	1b1c      	subs	r4, r3, r4
 800c5b4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c5b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5bc:	e7e5      	b.n	800c58a <_strtod_l+0x3f2>
 800c5be:	9b07      	ldr	r3, [sp, #28]
 800c5c0:	3316      	adds	r3, #22
 800c5c2:	db0b      	blt.n	800c5dc <_strtod_l+0x444>
 800c5c4:	9b04      	ldr	r3, [sp, #16]
 800c5c6:	4a58      	ldr	r2, [pc, #352]	; (800c728 <_strtod_l+0x590>)
 800c5c8:	1b5d      	subs	r5, r3, r5
 800c5ca:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c5ce:	4640      	mov	r0, r8
 800c5d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5d4:	4649      	mov	r1, r9
 800c5d6:	f7f4 f8e9 	bl	80007ac <__aeabi_ddiv>
 800c5da:	e79d      	b.n	800c518 <_strtod_l+0x380>
 800c5dc:	9b07      	ldr	r3, [sp, #28]
 800c5de:	1ba6      	subs	r6, r4, r6
 800c5e0:	441e      	add	r6, r3
 800c5e2:	2e00      	cmp	r6, #0
 800c5e4:	dd71      	ble.n	800c6ca <_strtod_l+0x532>
 800c5e6:	f016 030f 	ands.w	r3, r6, #15
 800c5ea:	d00a      	beq.n	800c602 <_strtod_l+0x46a>
 800c5ec:	494e      	ldr	r1, [pc, #312]	; (800c728 <_strtod_l+0x590>)
 800c5ee:	4642      	mov	r2, r8
 800c5f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c5f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5f8:	464b      	mov	r3, r9
 800c5fa:	f7f3 ffad 	bl	8000558 <__aeabi_dmul>
 800c5fe:	4680      	mov	r8, r0
 800c600:	4689      	mov	r9, r1
 800c602:	f036 060f 	bics.w	r6, r6, #15
 800c606:	d050      	beq.n	800c6aa <_strtod_l+0x512>
 800c608:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800c60c:	dd27      	ble.n	800c65e <_strtod_l+0x4c6>
 800c60e:	f04f 0b00 	mov.w	fp, #0
 800c612:	f8cd b010 	str.w	fp, [sp, #16]
 800c616:	f8cd b020 	str.w	fp, [sp, #32]
 800c61a:	f8cd b018 	str.w	fp, [sp, #24]
 800c61e:	2322      	movs	r3, #34	; 0x22
 800c620:	f04f 0800 	mov.w	r8, #0
 800c624:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c730 <_strtod_l+0x598>
 800c628:	f8ca 3000 	str.w	r3, [sl]
 800c62c:	9b08      	ldr	r3, [sp, #32]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f43f adf3 	beq.w	800c21a <_strtod_l+0x82>
 800c634:	4650      	mov	r0, sl
 800c636:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c638:	f001 ff7a 	bl	800e530 <_Bfree>
 800c63c:	4650      	mov	r0, sl
 800c63e:	9906      	ldr	r1, [sp, #24]
 800c640:	f001 ff76 	bl	800e530 <_Bfree>
 800c644:	4650      	mov	r0, sl
 800c646:	9904      	ldr	r1, [sp, #16]
 800c648:	f001 ff72 	bl	800e530 <_Bfree>
 800c64c:	4650      	mov	r0, sl
 800c64e:	9908      	ldr	r1, [sp, #32]
 800c650:	f001 ff6e 	bl	800e530 <_Bfree>
 800c654:	4659      	mov	r1, fp
 800c656:	4650      	mov	r0, sl
 800c658:	f001 ff6a 	bl	800e530 <_Bfree>
 800c65c:	e5dd      	b.n	800c21a <_strtod_l+0x82>
 800c65e:	2300      	movs	r3, #0
 800c660:	4640      	mov	r0, r8
 800c662:	4649      	mov	r1, r9
 800c664:	461f      	mov	r7, r3
 800c666:	1136      	asrs	r6, r6, #4
 800c668:	2e01      	cmp	r6, #1
 800c66a:	dc21      	bgt.n	800c6b0 <_strtod_l+0x518>
 800c66c:	b10b      	cbz	r3, 800c672 <_strtod_l+0x4da>
 800c66e:	4680      	mov	r8, r0
 800c670:	4689      	mov	r9, r1
 800c672:	4b2e      	ldr	r3, [pc, #184]	; (800c72c <_strtod_l+0x594>)
 800c674:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c678:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c67c:	4642      	mov	r2, r8
 800c67e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c682:	464b      	mov	r3, r9
 800c684:	f7f3 ff68 	bl	8000558 <__aeabi_dmul>
 800c688:	4b29      	ldr	r3, [pc, #164]	; (800c730 <_strtod_l+0x598>)
 800c68a:	460a      	mov	r2, r1
 800c68c:	400b      	ands	r3, r1
 800c68e:	4929      	ldr	r1, [pc, #164]	; (800c734 <_strtod_l+0x59c>)
 800c690:	4680      	mov	r8, r0
 800c692:	428b      	cmp	r3, r1
 800c694:	d8bb      	bhi.n	800c60e <_strtod_l+0x476>
 800c696:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c69a:	428b      	cmp	r3, r1
 800c69c:	bf86      	itte	hi
 800c69e:	f04f 38ff 	movhi.w	r8, #4294967295
 800c6a2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800c738 <_strtod_l+0x5a0>
 800c6a6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	9305      	str	r3, [sp, #20]
 800c6ae:	e07e      	b.n	800c7ae <_strtod_l+0x616>
 800c6b0:	07f2      	lsls	r2, r6, #31
 800c6b2:	d507      	bpl.n	800c6c4 <_strtod_l+0x52c>
 800c6b4:	4b1d      	ldr	r3, [pc, #116]	; (800c72c <_strtod_l+0x594>)
 800c6b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	f7f3 ff4b 	bl	8000558 <__aeabi_dmul>
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	3701      	adds	r7, #1
 800c6c6:	1076      	asrs	r6, r6, #1
 800c6c8:	e7ce      	b.n	800c668 <_strtod_l+0x4d0>
 800c6ca:	d0ee      	beq.n	800c6aa <_strtod_l+0x512>
 800c6cc:	4276      	negs	r6, r6
 800c6ce:	f016 020f 	ands.w	r2, r6, #15
 800c6d2:	d00a      	beq.n	800c6ea <_strtod_l+0x552>
 800c6d4:	4b14      	ldr	r3, [pc, #80]	; (800c728 <_strtod_l+0x590>)
 800c6d6:	4640      	mov	r0, r8
 800c6d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6dc:	4649      	mov	r1, r9
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	f7f4 f863 	bl	80007ac <__aeabi_ddiv>
 800c6e6:	4680      	mov	r8, r0
 800c6e8:	4689      	mov	r9, r1
 800c6ea:	1136      	asrs	r6, r6, #4
 800c6ec:	d0dd      	beq.n	800c6aa <_strtod_l+0x512>
 800c6ee:	2e1f      	cmp	r6, #31
 800c6f0:	dd24      	ble.n	800c73c <_strtod_l+0x5a4>
 800c6f2:	f04f 0b00 	mov.w	fp, #0
 800c6f6:	f8cd b010 	str.w	fp, [sp, #16]
 800c6fa:	f8cd b020 	str.w	fp, [sp, #32]
 800c6fe:	f8cd b018 	str.w	fp, [sp, #24]
 800c702:	2322      	movs	r3, #34	; 0x22
 800c704:	f04f 0800 	mov.w	r8, #0
 800c708:	f04f 0900 	mov.w	r9, #0
 800c70c:	f8ca 3000 	str.w	r3, [sl]
 800c710:	e78c      	b.n	800c62c <_strtod_l+0x494>
 800c712:	bf00      	nop
 800c714:	0800f8e5 	.word	0x0800f8e5
 800c718:	0800f928 	.word	0x0800f928
 800c71c:	0800f8dd 	.word	0x0800f8dd
 800c720:	0800fa6c 	.word	0x0800fa6c
 800c724:	0800fd28 	.word	0x0800fd28
 800c728:	0800fc08 	.word	0x0800fc08
 800c72c:	0800fbe0 	.word	0x0800fbe0
 800c730:	7ff00000 	.word	0x7ff00000
 800c734:	7ca00000 	.word	0x7ca00000
 800c738:	7fefffff 	.word	0x7fefffff
 800c73c:	f016 0310 	ands.w	r3, r6, #16
 800c740:	bf18      	it	ne
 800c742:	236a      	movne	r3, #106	; 0x6a
 800c744:	4640      	mov	r0, r8
 800c746:	9305      	str	r3, [sp, #20]
 800c748:	4649      	mov	r1, r9
 800c74a:	2300      	movs	r3, #0
 800c74c:	4fb2      	ldr	r7, [pc, #712]	; (800ca18 <_strtod_l+0x880>)
 800c74e:	07f2      	lsls	r2, r6, #31
 800c750:	d504      	bpl.n	800c75c <_strtod_l+0x5c4>
 800c752:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c756:	f7f3 feff 	bl	8000558 <__aeabi_dmul>
 800c75a:	2301      	movs	r3, #1
 800c75c:	1076      	asrs	r6, r6, #1
 800c75e:	f107 0708 	add.w	r7, r7, #8
 800c762:	d1f4      	bne.n	800c74e <_strtod_l+0x5b6>
 800c764:	b10b      	cbz	r3, 800c76a <_strtod_l+0x5d2>
 800c766:	4680      	mov	r8, r0
 800c768:	4689      	mov	r9, r1
 800c76a:	9b05      	ldr	r3, [sp, #20]
 800c76c:	b1bb      	cbz	r3, 800c79e <_strtod_l+0x606>
 800c76e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800c772:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c776:	2b00      	cmp	r3, #0
 800c778:	4649      	mov	r1, r9
 800c77a:	dd10      	ble.n	800c79e <_strtod_l+0x606>
 800c77c:	2b1f      	cmp	r3, #31
 800c77e:	f340 812b 	ble.w	800c9d8 <_strtod_l+0x840>
 800c782:	2b34      	cmp	r3, #52	; 0x34
 800c784:	bfd8      	it	le
 800c786:	f04f 32ff 	movle.w	r2, #4294967295
 800c78a:	f04f 0800 	mov.w	r8, #0
 800c78e:	bfcf      	iteee	gt
 800c790:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c794:	3b20      	suble	r3, #32
 800c796:	fa02 f303 	lslle.w	r3, r2, r3
 800c79a:	ea03 0901 	andle.w	r9, r3, r1
 800c79e:	2200      	movs	r2, #0
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	4640      	mov	r0, r8
 800c7a4:	4649      	mov	r1, r9
 800c7a6:	f7f4 f93f 	bl	8000a28 <__aeabi_dcmpeq>
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d1a1      	bne.n	800c6f2 <_strtod_l+0x55a>
 800c7ae:	9b06      	ldr	r3, [sp, #24]
 800c7b0:	465a      	mov	r2, fp
 800c7b2:	9300      	str	r3, [sp, #0]
 800c7b4:	4650      	mov	r0, sl
 800c7b6:	4623      	mov	r3, r4
 800c7b8:	9908      	ldr	r1, [sp, #32]
 800c7ba:	f001 ff25 	bl	800e608 <__s2b>
 800c7be:	9008      	str	r0, [sp, #32]
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	f43f af24 	beq.w	800c60e <_strtod_l+0x476>
 800c7c6:	9b04      	ldr	r3, [sp, #16]
 800c7c8:	f04f 0b00 	mov.w	fp, #0
 800c7cc:	1b5d      	subs	r5, r3, r5
 800c7ce:	9b07      	ldr	r3, [sp, #28]
 800c7d0:	f8cd b010 	str.w	fp, [sp, #16]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	bfb4      	ite	lt
 800c7d8:	462b      	movlt	r3, r5
 800c7da:	2300      	movge	r3, #0
 800c7dc:	930e      	str	r3, [sp, #56]	; 0x38
 800c7de:	9b07      	ldr	r3, [sp, #28]
 800c7e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c7e4:	9316      	str	r3, [sp, #88]	; 0x58
 800c7e6:	9b08      	ldr	r3, [sp, #32]
 800c7e8:	4650      	mov	r0, sl
 800c7ea:	6859      	ldr	r1, [r3, #4]
 800c7ec:	f001 fe60 	bl	800e4b0 <_Balloc>
 800c7f0:	9006      	str	r0, [sp, #24]
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	f43f af13 	beq.w	800c61e <_strtod_l+0x486>
 800c7f8:	9b08      	ldr	r3, [sp, #32]
 800c7fa:	300c      	adds	r0, #12
 800c7fc:	691a      	ldr	r2, [r3, #16]
 800c7fe:	f103 010c 	add.w	r1, r3, #12
 800c802:	3202      	adds	r2, #2
 800c804:	0092      	lsls	r2, r2, #2
 800c806:	f7fe fcff 	bl	800b208 <memcpy>
 800c80a:	ab1e      	add	r3, sp, #120	; 0x78
 800c80c:	9301      	str	r3, [sp, #4]
 800c80e:	ab1d      	add	r3, sp, #116	; 0x74
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	4642      	mov	r2, r8
 800c814:	464b      	mov	r3, r9
 800c816:	4650      	mov	r0, sl
 800c818:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800c81c:	f002 fa32 	bl	800ec84 <__d2b>
 800c820:	901c      	str	r0, [sp, #112]	; 0x70
 800c822:	2800      	cmp	r0, #0
 800c824:	f43f aefb 	beq.w	800c61e <_strtod_l+0x486>
 800c828:	2101      	movs	r1, #1
 800c82a:	4650      	mov	r0, sl
 800c82c:	f001 ff84 	bl	800e738 <__i2b>
 800c830:	4603      	mov	r3, r0
 800c832:	9004      	str	r0, [sp, #16]
 800c834:	2800      	cmp	r0, #0
 800c836:	f43f aef2 	beq.w	800c61e <_strtod_l+0x486>
 800c83a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c83c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c83e:	2d00      	cmp	r5, #0
 800c840:	bfab      	itete	ge
 800c842:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c844:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c846:	18ee      	addge	r6, r5, r3
 800c848:	1b5c      	sublt	r4, r3, r5
 800c84a:	9b05      	ldr	r3, [sp, #20]
 800c84c:	bfa8      	it	ge
 800c84e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800c850:	eba5 0503 	sub.w	r5, r5, r3
 800c854:	4415      	add	r5, r2
 800c856:	4b71      	ldr	r3, [pc, #452]	; (800ca1c <_strtod_l+0x884>)
 800c858:	f105 35ff 	add.w	r5, r5, #4294967295
 800c85c:	bfb8      	it	lt
 800c85e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800c860:	429d      	cmp	r5, r3
 800c862:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c866:	f280 80c9 	bge.w	800c9fc <_strtod_l+0x864>
 800c86a:	1b5b      	subs	r3, r3, r5
 800c86c:	2b1f      	cmp	r3, #31
 800c86e:	f04f 0701 	mov.w	r7, #1
 800c872:	eba2 0203 	sub.w	r2, r2, r3
 800c876:	f300 80b6 	bgt.w	800c9e6 <_strtod_l+0x84e>
 800c87a:	2500      	movs	r5, #0
 800c87c:	fa07 f303 	lsl.w	r3, r7, r3
 800c880:	930f      	str	r3, [sp, #60]	; 0x3c
 800c882:	18b7      	adds	r7, r6, r2
 800c884:	9b05      	ldr	r3, [sp, #20]
 800c886:	42be      	cmp	r6, r7
 800c888:	4414      	add	r4, r2
 800c88a:	441c      	add	r4, r3
 800c88c:	4633      	mov	r3, r6
 800c88e:	bfa8      	it	ge
 800c890:	463b      	movge	r3, r7
 800c892:	42a3      	cmp	r3, r4
 800c894:	bfa8      	it	ge
 800c896:	4623      	movge	r3, r4
 800c898:	2b00      	cmp	r3, #0
 800c89a:	bfc2      	ittt	gt
 800c89c:	1aff      	subgt	r7, r7, r3
 800c89e:	1ae4      	subgt	r4, r4, r3
 800c8a0:	1af6      	subgt	r6, r6, r3
 800c8a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	dd17      	ble.n	800c8d8 <_strtod_l+0x740>
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	4650      	mov	r0, sl
 800c8ac:	9904      	ldr	r1, [sp, #16]
 800c8ae:	f001 fffd 	bl	800e8ac <__pow5mult>
 800c8b2:	9004      	str	r0, [sp, #16]
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	f43f aeb2 	beq.w	800c61e <_strtod_l+0x486>
 800c8ba:	4601      	mov	r1, r0
 800c8bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c8be:	4650      	mov	r0, sl
 800c8c0:	f001 ff50 	bl	800e764 <__multiply>
 800c8c4:	9009      	str	r0, [sp, #36]	; 0x24
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	f43f aea9 	beq.w	800c61e <_strtod_l+0x486>
 800c8cc:	4650      	mov	r0, sl
 800c8ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c8d0:	f001 fe2e 	bl	800e530 <_Bfree>
 800c8d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8d6:	931c      	str	r3, [sp, #112]	; 0x70
 800c8d8:	2f00      	cmp	r7, #0
 800c8da:	f300 8093 	bgt.w	800ca04 <_strtod_l+0x86c>
 800c8de:	9b07      	ldr	r3, [sp, #28]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	dd08      	ble.n	800c8f6 <_strtod_l+0x75e>
 800c8e4:	4650      	mov	r0, sl
 800c8e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c8e8:	9906      	ldr	r1, [sp, #24]
 800c8ea:	f001 ffdf 	bl	800e8ac <__pow5mult>
 800c8ee:	9006      	str	r0, [sp, #24]
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	f43f ae94 	beq.w	800c61e <_strtod_l+0x486>
 800c8f6:	2c00      	cmp	r4, #0
 800c8f8:	dd08      	ble.n	800c90c <_strtod_l+0x774>
 800c8fa:	4622      	mov	r2, r4
 800c8fc:	4650      	mov	r0, sl
 800c8fe:	9906      	ldr	r1, [sp, #24]
 800c900:	f002 f82e 	bl	800e960 <__lshift>
 800c904:	9006      	str	r0, [sp, #24]
 800c906:	2800      	cmp	r0, #0
 800c908:	f43f ae89 	beq.w	800c61e <_strtod_l+0x486>
 800c90c:	2e00      	cmp	r6, #0
 800c90e:	dd08      	ble.n	800c922 <_strtod_l+0x78a>
 800c910:	4632      	mov	r2, r6
 800c912:	4650      	mov	r0, sl
 800c914:	9904      	ldr	r1, [sp, #16]
 800c916:	f002 f823 	bl	800e960 <__lshift>
 800c91a:	9004      	str	r0, [sp, #16]
 800c91c:	2800      	cmp	r0, #0
 800c91e:	f43f ae7e 	beq.w	800c61e <_strtod_l+0x486>
 800c922:	4650      	mov	r0, sl
 800c924:	9a06      	ldr	r2, [sp, #24]
 800c926:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c928:	f002 f8a2 	bl	800ea70 <__mdiff>
 800c92c:	4683      	mov	fp, r0
 800c92e:	2800      	cmp	r0, #0
 800c930:	f43f ae75 	beq.w	800c61e <_strtod_l+0x486>
 800c934:	2400      	movs	r4, #0
 800c936:	68c3      	ldr	r3, [r0, #12]
 800c938:	9904      	ldr	r1, [sp, #16]
 800c93a:	60c4      	str	r4, [r0, #12]
 800c93c:	930d      	str	r3, [sp, #52]	; 0x34
 800c93e:	f002 f87b 	bl	800ea38 <__mcmp>
 800c942:	42a0      	cmp	r0, r4
 800c944:	da70      	bge.n	800ca28 <_strtod_l+0x890>
 800c946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c948:	ea53 0308 	orrs.w	r3, r3, r8
 800c94c:	f040 8096 	bne.w	800ca7c <_strtod_l+0x8e4>
 800c950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c954:	2b00      	cmp	r3, #0
 800c956:	f040 8091 	bne.w	800ca7c <_strtod_l+0x8e4>
 800c95a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c95e:	0d1b      	lsrs	r3, r3, #20
 800c960:	051b      	lsls	r3, r3, #20
 800c962:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c966:	f240 8089 	bls.w	800ca7c <_strtod_l+0x8e4>
 800c96a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800c96e:	b923      	cbnz	r3, 800c97a <_strtod_l+0x7e2>
 800c970:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c974:	2b01      	cmp	r3, #1
 800c976:	f340 8081 	ble.w	800ca7c <_strtod_l+0x8e4>
 800c97a:	4659      	mov	r1, fp
 800c97c:	2201      	movs	r2, #1
 800c97e:	4650      	mov	r0, sl
 800c980:	f001 ffee 	bl	800e960 <__lshift>
 800c984:	9904      	ldr	r1, [sp, #16]
 800c986:	4683      	mov	fp, r0
 800c988:	f002 f856 	bl	800ea38 <__mcmp>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	dd75      	ble.n	800ca7c <_strtod_l+0x8e4>
 800c990:	9905      	ldr	r1, [sp, #20]
 800c992:	464b      	mov	r3, r9
 800c994:	4a22      	ldr	r2, [pc, #136]	; (800ca20 <_strtod_l+0x888>)
 800c996:	2900      	cmp	r1, #0
 800c998:	f000 8091 	beq.w	800cabe <_strtod_l+0x926>
 800c99c:	ea02 0109 	and.w	r1, r2, r9
 800c9a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c9a4:	f300 808b 	bgt.w	800cabe <_strtod_l+0x926>
 800c9a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c9ac:	f77f aea9 	ble.w	800c702 <_strtod_l+0x56a>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	4a1c      	ldr	r2, [pc, #112]	; (800ca24 <_strtod_l+0x88c>)
 800c9b4:	4640      	mov	r0, r8
 800c9b6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c9ba:	4649      	mov	r1, r9
 800c9bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c9c0:	f7f3 fdca 	bl	8000558 <__aeabi_dmul>
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	4303      	orrs	r3, r0
 800c9c8:	bf08      	it	eq
 800c9ca:	2322      	moveq	r3, #34	; 0x22
 800c9cc:	4680      	mov	r8, r0
 800c9ce:	4689      	mov	r9, r1
 800c9d0:	bf08      	it	eq
 800c9d2:	f8ca 3000 	streq.w	r3, [sl]
 800c9d6:	e62d      	b.n	800c634 <_strtod_l+0x49c>
 800c9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e0:	ea03 0808 	and.w	r8, r3, r8
 800c9e4:	e6db      	b.n	800c79e <_strtod_l+0x606>
 800c9e6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800c9ea:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800c9ee:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800c9f2:	35e2      	adds	r5, #226	; 0xe2
 800c9f4:	fa07 f505 	lsl.w	r5, r7, r5
 800c9f8:	970f      	str	r7, [sp, #60]	; 0x3c
 800c9fa:	e742      	b.n	800c882 <_strtod_l+0x6ea>
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	2500      	movs	r5, #0
 800ca00:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca02:	e73e      	b.n	800c882 <_strtod_l+0x6ea>
 800ca04:	463a      	mov	r2, r7
 800ca06:	4650      	mov	r0, sl
 800ca08:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ca0a:	f001 ffa9 	bl	800e960 <__lshift>
 800ca0e:	901c      	str	r0, [sp, #112]	; 0x70
 800ca10:	2800      	cmp	r0, #0
 800ca12:	f47f af64 	bne.w	800c8de <_strtod_l+0x746>
 800ca16:	e602      	b.n	800c61e <_strtod_l+0x486>
 800ca18:	0800f940 	.word	0x0800f940
 800ca1c:	fffffc02 	.word	0xfffffc02
 800ca20:	7ff00000 	.word	0x7ff00000
 800ca24:	39500000 	.word	0x39500000
 800ca28:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ca2c:	d166      	bne.n	800cafc <_strtod_l+0x964>
 800ca2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca34:	b35a      	cbz	r2, 800ca8e <_strtod_l+0x8f6>
 800ca36:	4a9c      	ldr	r2, [pc, #624]	; (800cca8 <_strtod_l+0xb10>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d12c      	bne.n	800ca96 <_strtod_l+0x8fe>
 800ca3c:	9b05      	ldr	r3, [sp, #20]
 800ca3e:	4640      	mov	r0, r8
 800ca40:	b303      	cbz	r3, 800ca84 <_strtod_l+0x8ec>
 800ca42:	464b      	mov	r3, r9
 800ca44:	4a99      	ldr	r2, [pc, #612]	; (800ccac <_strtod_l+0xb14>)
 800ca46:	f04f 31ff 	mov.w	r1, #4294967295
 800ca4a:	401a      	ands	r2, r3
 800ca4c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ca50:	d81b      	bhi.n	800ca8a <_strtod_l+0x8f2>
 800ca52:	0d12      	lsrs	r2, r2, #20
 800ca54:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ca58:	fa01 f303 	lsl.w	r3, r1, r3
 800ca5c:	4298      	cmp	r0, r3
 800ca5e:	d11a      	bne.n	800ca96 <_strtod_l+0x8fe>
 800ca60:	4b93      	ldr	r3, [pc, #588]	; (800ccb0 <_strtod_l+0xb18>)
 800ca62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d102      	bne.n	800ca6e <_strtod_l+0x8d6>
 800ca68:	3001      	adds	r0, #1
 800ca6a:	f43f add8 	beq.w	800c61e <_strtod_l+0x486>
 800ca6e:	f04f 0800 	mov.w	r8, #0
 800ca72:	4b8e      	ldr	r3, [pc, #568]	; (800ccac <_strtod_l+0xb14>)
 800ca74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca76:	401a      	ands	r2, r3
 800ca78:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800ca7c:	9b05      	ldr	r3, [sp, #20]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d196      	bne.n	800c9b0 <_strtod_l+0x818>
 800ca82:	e5d7      	b.n	800c634 <_strtod_l+0x49c>
 800ca84:	f04f 33ff 	mov.w	r3, #4294967295
 800ca88:	e7e8      	b.n	800ca5c <_strtod_l+0x8c4>
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	e7e6      	b.n	800ca5c <_strtod_l+0x8c4>
 800ca8e:	ea53 0308 	orrs.w	r3, r3, r8
 800ca92:	f43f af7d 	beq.w	800c990 <_strtod_l+0x7f8>
 800ca96:	b1e5      	cbz	r5, 800cad2 <_strtod_l+0x93a>
 800ca98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca9a:	421d      	tst	r5, r3
 800ca9c:	d0ee      	beq.n	800ca7c <_strtod_l+0x8e4>
 800ca9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caa0:	4640      	mov	r0, r8
 800caa2:	4649      	mov	r1, r9
 800caa4:	9a05      	ldr	r2, [sp, #20]
 800caa6:	b1c3      	cbz	r3, 800cada <_strtod_l+0x942>
 800caa8:	f7ff fb53 	bl	800c152 <sulp>
 800caac:	4602      	mov	r2, r0
 800caae:	460b      	mov	r3, r1
 800cab0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cab4:	f7f3 fb9a 	bl	80001ec <__adddf3>
 800cab8:	4680      	mov	r8, r0
 800caba:	4689      	mov	r9, r1
 800cabc:	e7de      	b.n	800ca7c <_strtod_l+0x8e4>
 800cabe:	4013      	ands	r3, r2
 800cac0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cac4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cac8:	f04f 38ff 	mov.w	r8, #4294967295
 800cacc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cad0:	e7d4      	b.n	800ca7c <_strtod_l+0x8e4>
 800cad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cad4:	ea13 0f08 	tst.w	r3, r8
 800cad8:	e7e0      	b.n	800ca9c <_strtod_l+0x904>
 800cada:	f7ff fb3a 	bl	800c152 <sulp>
 800cade:	4602      	mov	r2, r0
 800cae0:	460b      	mov	r3, r1
 800cae2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cae6:	f7f3 fb7f 	bl	80001e8 <__aeabi_dsub>
 800caea:	2200      	movs	r2, #0
 800caec:	2300      	movs	r3, #0
 800caee:	4680      	mov	r8, r0
 800caf0:	4689      	mov	r9, r1
 800caf2:	f7f3 ff99 	bl	8000a28 <__aeabi_dcmpeq>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d0c0      	beq.n	800ca7c <_strtod_l+0x8e4>
 800cafa:	e602      	b.n	800c702 <_strtod_l+0x56a>
 800cafc:	4658      	mov	r0, fp
 800cafe:	9904      	ldr	r1, [sp, #16]
 800cb00:	f002 f91c 	bl	800ed3c <__ratio>
 800cb04:	2200      	movs	r2, #0
 800cb06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	460f      	mov	r7, r1
 800cb0e:	f7f3 ff9f 	bl	8000a50 <__aeabi_dcmple>
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d075      	beq.n	800cc02 <_strtod_l+0xa6a>
 800cb16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d047      	beq.n	800cbac <_strtod_l+0xa14>
 800cb1c:	2600      	movs	r6, #0
 800cb1e:	4f65      	ldr	r7, [pc, #404]	; (800ccb4 <_strtod_l+0xb1c>)
 800cb20:	4d64      	ldr	r5, [pc, #400]	; (800ccb4 <_strtod_l+0xb1c>)
 800cb22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb28:	0d1b      	lsrs	r3, r3, #20
 800cb2a:	051b      	lsls	r3, r3, #20
 800cb2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb30:	4b61      	ldr	r3, [pc, #388]	; (800ccb8 <_strtod_l+0xb20>)
 800cb32:	429a      	cmp	r2, r3
 800cb34:	f040 80c8 	bne.w	800ccc8 <_strtod_l+0xb30>
 800cb38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cb3c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800cb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb42:	4640      	mov	r0, r8
 800cb44:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800cb48:	4649      	mov	r1, r9
 800cb4a:	f002 f821 	bl	800eb90 <__ulp>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	4630      	mov	r0, r6
 800cb54:	4639      	mov	r1, r7
 800cb56:	f7f3 fcff 	bl	8000558 <__aeabi_dmul>
 800cb5a:	4642      	mov	r2, r8
 800cb5c:	464b      	mov	r3, r9
 800cb5e:	f7f3 fb45 	bl	80001ec <__adddf3>
 800cb62:	460b      	mov	r3, r1
 800cb64:	4951      	ldr	r1, [pc, #324]	; (800ccac <_strtod_l+0xb14>)
 800cb66:	4a55      	ldr	r2, [pc, #340]	; (800ccbc <_strtod_l+0xb24>)
 800cb68:	4019      	ands	r1, r3
 800cb6a:	4291      	cmp	r1, r2
 800cb6c:	4680      	mov	r8, r0
 800cb6e:	d95e      	bls.n	800cc2e <_strtod_l+0xa96>
 800cb70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb72:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d103      	bne.n	800cb82 <_strtod_l+0x9ea>
 800cb7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	f43f ad4e 	beq.w	800c61e <_strtod_l+0x486>
 800cb82:	f04f 38ff 	mov.w	r8, #4294967295
 800cb86:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800ccb0 <_strtod_l+0xb18>
 800cb8a:	4650      	mov	r0, sl
 800cb8c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cb8e:	f001 fccf 	bl	800e530 <_Bfree>
 800cb92:	4650      	mov	r0, sl
 800cb94:	9906      	ldr	r1, [sp, #24]
 800cb96:	f001 fccb 	bl	800e530 <_Bfree>
 800cb9a:	4650      	mov	r0, sl
 800cb9c:	9904      	ldr	r1, [sp, #16]
 800cb9e:	f001 fcc7 	bl	800e530 <_Bfree>
 800cba2:	4659      	mov	r1, fp
 800cba4:	4650      	mov	r0, sl
 800cba6:	f001 fcc3 	bl	800e530 <_Bfree>
 800cbaa:	e61c      	b.n	800c7e6 <_strtod_l+0x64e>
 800cbac:	f1b8 0f00 	cmp.w	r8, #0
 800cbb0:	d119      	bne.n	800cbe6 <_strtod_l+0xa4e>
 800cbb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbb8:	b9e3      	cbnz	r3, 800cbf4 <_strtod_l+0xa5c>
 800cbba:	2200      	movs	r2, #0
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	4639      	mov	r1, r7
 800cbc0:	4b3c      	ldr	r3, [pc, #240]	; (800ccb4 <_strtod_l+0xb1c>)
 800cbc2:	f7f3 ff3b 	bl	8000a3c <__aeabi_dcmplt>
 800cbc6:	b9c8      	cbnz	r0, 800cbfc <_strtod_l+0xa64>
 800cbc8:	2200      	movs	r2, #0
 800cbca:	4630      	mov	r0, r6
 800cbcc:	4639      	mov	r1, r7
 800cbce:	4b3c      	ldr	r3, [pc, #240]	; (800ccc0 <_strtod_l+0xb28>)
 800cbd0:	f7f3 fcc2 	bl	8000558 <__aeabi_dmul>
 800cbd4:	4604      	mov	r4, r0
 800cbd6:	460d      	mov	r5, r1
 800cbd8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800cbdc:	9418      	str	r4, [sp, #96]	; 0x60
 800cbde:	9319      	str	r3, [sp, #100]	; 0x64
 800cbe0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800cbe4:	e79d      	b.n	800cb22 <_strtod_l+0x98a>
 800cbe6:	f1b8 0f01 	cmp.w	r8, #1
 800cbea:	d103      	bne.n	800cbf4 <_strtod_l+0xa5c>
 800cbec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f43f ad87 	beq.w	800c702 <_strtod_l+0x56a>
 800cbf4:	2600      	movs	r6, #0
 800cbf6:	2400      	movs	r4, #0
 800cbf8:	4f32      	ldr	r7, [pc, #200]	; (800ccc4 <_strtod_l+0xb2c>)
 800cbfa:	e791      	b.n	800cb20 <_strtod_l+0x988>
 800cbfc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800cbfe:	4d30      	ldr	r5, [pc, #192]	; (800ccc0 <_strtod_l+0xb28>)
 800cc00:	e7ea      	b.n	800cbd8 <_strtod_l+0xa40>
 800cc02:	4b2f      	ldr	r3, [pc, #188]	; (800ccc0 <_strtod_l+0xb28>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	4630      	mov	r0, r6
 800cc08:	4639      	mov	r1, r7
 800cc0a:	f7f3 fca5 	bl	8000558 <__aeabi_dmul>
 800cc0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc10:	4604      	mov	r4, r0
 800cc12:	460d      	mov	r5, r1
 800cc14:	b933      	cbnz	r3, 800cc24 <_strtod_l+0xa8c>
 800cc16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc1a:	9010      	str	r0, [sp, #64]	; 0x40
 800cc1c:	9311      	str	r3, [sp, #68]	; 0x44
 800cc1e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cc22:	e77e      	b.n	800cb22 <_strtod_l+0x98a>
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800cc2c:	e7f7      	b.n	800cc1e <_strtod_l+0xa86>
 800cc2e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800cc32:	9b05      	ldr	r3, [sp, #20]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1a8      	bne.n	800cb8a <_strtod_l+0x9f2>
 800cc38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cc3e:	0d1b      	lsrs	r3, r3, #20
 800cc40:	051b      	lsls	r3, r3, #20
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d1a1      	bne.n	800cb8a <_strtod_l+0x9f2>
 800cc46:	4620      	mov	r0, r4
 800cc48:	4629      	mov	r1, r5
 800cc4a:	f7f3 ffe5 	bl	8000c18 <__aeabi_d2lz>
 800cc4e:	f7f3 fc55 	bl	80004fc <__aeabi_l2d>
 800cc52:	4602      	mov	r2, r0
 800cc54:	460b      	mov	r3, r1
 800cc56:	4620      	mov	r0, r4
 800cc58:	4629      	mov	r1, r5
 800cc5a:	f7f3 fac5 	bl	80001e8 <__aeabi_dsub>
 800cc5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc64:	ea43 0308 	orr.w	r3, r3, r8
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	460d      	mov	r5, r1
 800cc6e:	d066      	beq.n	800cd3e <_strtod_l+0xba6>
 800cc70:	a309      	add	r3, pc, #36	; (adr r3, 800cc98 <_strtod_l+0xb00>)
 800cc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc76:	f7f3 fee1 	bl	8000a3c <__aeabi_dcmplt>
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	f47f acda 	bne.w	800c634 <_strtod_l+0x49c>
 800cc80:	a307      	add	r3, pc, #28	; (adr r3, 800cca0 <_strtod_l+0xb08>)
 800cc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc86:	4620      	mov	r0, r4
 800cc88:	4629      	mov	r1, r5
 800cc8a:	f7f3 fef5 	bl	8000a78 <__aeabi_dcmpgt>
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	f43f af7b 	beq.w	800cb8a <_strtod_l+0x9f2>
 800cc94:	e4ce      	b.n	800c634 <_strtod_l+0x49c>
 800cc96:	bf00      	nop
 800cc98:	94a03595 	.word	0x94a03595
 800cc9c:	3fdfffff 	.word	0x3fdfffff
 800cca0:	35afe535 	.word	0x35afe535
 800cca4:	3fe00000 	.word	0x3fe00000
 800cca8:	000fffff 	.word	0x000fffff
 800ccac:	7ff00000 	.word	0x7ff00000
 800ccb0:	7fefffff 	.word	0x7fefffff
 800ccb4:	3ff00000 	.word	0x3ff00000
 800ccb8:	7fe00000 	.word	0x7fe00000
 800ccbc:	7c9fffff 	.word	0x7c9fffff
 800ccc0:	3fe00000 	.word	0x3fe00000
 800ccc4:	bff00000 	.word	0xbff00000
 800ccc8:	9b05      	ldr	r3, [sp, #20]
 800ccca:	b313      	cbz	r3, 800cd12 <_strtod_l+0xb7a>
 800cccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ccd2:	d81e      	bhi.n	800cd12 <_strtod_l+0xb7a>
 800ccd4:	a326      	add	r3, pc, #152	; (adr r3, 800cd70 <_strtod_l+0xbd8>)
 800ccd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccda:	4620      	mov	r0, r4
 800ccdc:	4629      	mov	r1, r5
 800ccde:	f7f3 feb7 	bl	8000a50 <__aeabi_dcmple>
 800cce2:	b190      	cbz	r0, 800cd0a <_strtod_l+0xb72>
 800cce4:	4629      	mov	r1, r5
 800cce6:	4620      	mov	r0, r4
 800cce8:	f7f3 ff0e 	bl	8000b08 <__aeabi_d2uiz>
 800ccec:	2801      	cmp	r0, #1
 800ccee:	bf38      	it	cc
 800ccf0:	2001      	movcc	r0, #1
 800ccf2:	f7f3 fbb7 	bl	8000464 <__aeabi_ui2d>
 800ccf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	460d      	mov	r5, r1
 800ccfc:	b9d3      	cbnz	r3, 800cd34 <_strtod_l+0xb9c>
 800ccfe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd02:	9012      	str	r0, [sp, #72]	; 0x48
 800cd04:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd06:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800cd0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd0c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800cd10:	1a9f      	subs	r7, r3, r2
 800cd12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cd16:	f001 ff3b 	bl	800eb90 <__ulp>
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	4630      	mov	r0, r6
 800cd20:	4639      	mov	r1, r7
 800cd22:	f7f3 fc19 	bl	8000558 <__aeabi_dmul>
 800cd26:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cd2a:	f7f3 fa5f 	bl	80001ec <__adddf3>
 800cd2e:	4680      	mov	r8, r0
 800cd30:	4689      	mov	r9, r1
 800cd32:	e77e      	b.n	800cc32 <_strtod_l+0xa9a>
 800cd34:	4602      	mov	r2, r0
 800cd36:	460b      	mov	r3, r1
 800cd38:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800cd3c:	e7e3      	b.n	800cd06 <_strtod_l+0xb6e>
 800cd3e:	a30e      	add	r3, pc, #56	; (adr r3, 800cd78 <_strtod_l+0xbe0>)
 800cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd44:	f7f3 fe7a 	bl	8000a3c <__aeabi_dcmplt>
 800cd48:	e7a1      	b.n	800cc8e <_strtod_l+0xaf6>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	930c      	str	r3, [sp, #48]	; 0x30
 800cd4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cd52:	6013      	str	r3, [r2, #0]
 800cd54:	f7ff ba65 	b.w	800c222 <_strtod_l+0x8a>
 800cd58:	2b65      	cmp	r3, #101	; 0x65
 800cd5a:	f43f ab5c 	beq.w	800c416 <_strtod_l+0x27e>
 800cd5e:	2b45      	cmp	r3, #69	; 0x45
 800cd60:	f43f ab59 	beq.w	800c416 <_strtod_l+0x27e>
 800cd64:	2201      	movs	r2, #1
 800cd66:	f7ff bb8d 	b.w	800c484 <_strtod_l+0x2ec>
 800cd6a:	bf00      	nop
 800cd6c:	f3af 8000 	nop.w
 800cd70:	ffc00000 	.word	0xffc00000
 800cd74:	41dfffff 	.word	0x41dfffff
 800cd78:	94a03595 	.word	0x94a03595
 800cd7c:	3fcfffff 	.word	0x3fcfffff

0800cd80 <_strtod_r>:
 800cd80:	4b01      	ldr	r3, [pc, #4]	; (800cd88 <_strtod_r+0x8>)
 800cd82:	f7ff ba09 	b.w	800c198 <_strtod_l>
 800cd86:	bf00      	nop
 800cd88:	20000084 	.word	0x20000084

0800cd8c <_strtol_l.isra.0>:
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd92:	4686      	mov	lr, r0
 800cd94:	d001      	beq.n	800cd9a <_strtol_l.isra.0+0xe>
 800cd96:	2b24      	cmp	r3, #36	; 0x24
 800cd98:	d906      	bls.n	800cda8 <_strtol_l.isra.0+0x1c>
 800cd9a:	f7fe f909 	bl	800afb0 <__errno>
 800cd9e:	2316      	movs	r3, #22
 800cda0:	6003      	str	r3, [r0, #0]
 800cda2:	2000      	movs	r0, #0
 800cda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda8:	468c      	mov	ip, r1
 800cdaa:	4e3a      	ldr	r6, [pc, #232]	; (800ce94 <_strtol_l.isra.0+0x108>)
 800cdac:	4660      	mov	r0, ip
 800cdae:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800cdb2:	5da5      	ldrb	r5, [r4, r6]
 800cdb4:	f015 0508 	ands.w	r5, r5, #8
 800cdb8:	d1f8      	bne.n	800cdac <_strtol_l.isra.0+0x20>
 800cdba:	2c2d      	cmp	r4, #45	; 0x2d
 800cdbc:	d133      	bne.n	800ce26 <_strtol_l.isra.0+0x9a>
 800cdbe:	f04f 0801 	mov.w	r8, #1
 800cdc2:	f89c 4000 	ldrb.w	r4, [ip]
 800cdc6:	f100 0c02 	add.w	ip, r0, #2
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d05d      	beq.n	800ce8a <_strtol_l.isra.0+0xfe>
 800cdce:	2b10      	cmp	r3, #16
 800cdd0:	d10c      	bne.n	800cdec <_strtol_l.isra.0+0x60>
 800cdd2:	2c30      	cmp	r4, #48	; 0x30
 800cdd4:	d10a      	bne.n	800cdec <_strtol_l.isra.0+0x60>
 800cdd6:	f89c 0000 	ldrb.w	r0, [ip]
 800cdda:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cdde:	2858      	cmp	r0, #88	; 0x58
 800cde0:	d14e      	bne.n	800ce80 <_strtol_l.isra.0+0xf4>
 800cde2:	2310      	movs	r3, #16
 800cde4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800cde8:	f10c 0c02 	add.w	ip, ip, #2
 800cdec:	2500      	movs	r5, #0
 800cdee:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800cdf2:	3f01      	subs	r7, #1
 800cdf4:	fbb7 f9f3 	udiv	r9, r7, r3
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	fb03 7a19 	mls	sl, r3, r9, r7
 800cdfe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ce02:	2e09      	cmp	r6, #9
 800ce04:	d818      	bhi.n	800ce38 <_strtol_l.isra.0+0xac>
 800ce06:	4634      	mov	r4, r6
 800ce08:	42a3      	cmp	r3, r4
 800ce0a:	dd24      	ble.n	800ce56 <_strtol_l.isra.0+0xca>
 800ce0c:	2d00      	cmp	r5, #0
 800ce0e:	db1f      	blt.n	800ce50 <_strtol_l.isra.0+0xc4>
 800ce10:	4581      	cmp	r9, r0
 800ce12:	d31d      	bcc.n	800ce50 <_strtol_l.isra.0+0xc4>
 800ce14:	d101      	bne.n	800ce1a <_strtol_l.isra.0+0x8e>
 800ce16:	45a2      	cmp	sl, r4
 800ce18:	db1a      	blt.n	800ce50 <_strtol_l.isra.0+0xc4>
 800ce1a:	2501      	movs	r5, #1
 800ce1c:	fb00 4003 	mla	r0, r0, r3, r4
 800ce20:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ce24:	e7eb      	b.n	800cdfe <_strtol_l.isra.0+0x72>
 800ce26:	2c2b      	cmp	r4, #43	; 0x2b
 800ce28:	bf08      	it	eq
 800ce2a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ce2e:	46a8      	mov	r8, r5
 800ce30:	bf08      	it	eq
 800ce32:	f100 0c02 	addeq.w	ip, r0, #2
 800ce36:	e7c8      	b.n	800cdca <_strtol_l.isra.0+0x3e>
 800ce38:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ce3c:	2e19      	cmp	r6, #25
 800ce3e:	d801      	bhi.n	800ce44 <_strtol_l.isra.0+0xb8>
 800ce40:	3c37      	subs	r4, #55	; 0x37
 800ce42:	e7e1      	b.n	800ce08 <_strtol_l.isra.0+0x7c>
 800ce44:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ce48:	2e19      	cmp	r6, #25
 800ce4a:	d804      	bhi.n	800ce56 <_strtol_l.isra.0+0xca>
 800ce4c:	3c57      	subs	r4, #87	; 0x57
 800ce4e:	e7db      	b.n	800ce08 <_strtol_l.isra.0+0x7c>
 800ce50:	f04f 35ff 	mov.w	r5, #4294967295
 800ce54:	e7e4      	b.n	800ce20 <_strtol_l.isra.0+0x94>
 800ce56:	2d00      	cmp	r5, #0
 800ce58:	da08      	bge.n	800ce6c <_strtol_l.isra.0+0xe0>
 800ce5a:	2322      	movs	r3, #34	; 0x22
 800ce5c:	4638      	mov	r0, r7
 800ce5e:	f8ce 3000 	str.w	r3, [lr]
 800ce62:	2a00      	cmp	r2, #0
 800ce64:	d09e      	beq.n	800cda4 <_strtol_l.isra.0+0x18>
 800ce66:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ce6a:	e007      	b.n	800ce7c <_strtol_l.isra.0+0xf0>
 800ce6c:	f1b8 0f00 	cmp.w	r8, #0
 800ce70:	d000      	beq.n	800ce74 <_strtol_l.isra.0+0xe8>
 800ce72:	4240      	negs	r0, r0
 800ce74:	2a00      	cmp	r2, #0
 800ce76:	d095      	beq.n	800cda4 <_strtol_l.isra.0+0x18>
 800ce78:	2d00      	cmp	r5, #0
 800ce7a:	d1f4      	bne.n	800ce66 <_strtol_l.isra.0+0xda>
 800ce7c:	6011      	str	r1, [r2, #0]
 800ce7e:	e791      	b.n	800cda4 <_strtol_l.isra.0+0x18>
 800ce80:	2430      	movs	r4, #48	; 0x30
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d1b2      	bne.n	800cdec <_strtol_l.isra.0+0x60>
 800ce86:	2308      	movs	r3, #8
 800ce88:	e7b0      	b.n	800cdec <_strtol_l.isra.0+0x60>
 800ce8a:	2c30      	cmp	r4, #48	; 0x30
 800ce8c:	d0a3      	beq.n	800cdd6 <_strtol_l.isra.0+0x4a>
 800ce8e:	230a      	movs	r3, #10
 800ce90:	e7ac      	b.n	800cdec <_strtol_l.isra.0+0x60>
 800ce92:	bf00      	nop
 800ce94:	0800f969 	.word	0x0800f969

0800ce98 <_strtol_r>:
 800ce98:	f7ff bf78 	b.w	800cd8c <_strtol_l.isra.0>

0800ce9c <_write_r>:
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	4604      	mov	r4, r0
 800cea0:	4608      	mov	r0, r1
 800cea2:	4611      	mov	r1, r2
 800cea4:	2200      	movs	r2, #0
 800cea6:	4d05      	ldr	r5, [pc, #20]	; (800cebc <_write_r+0x20>)
 800cea8:	602a      	str	r2, [r5, #0]
 800ceaa:	461a      	mov	r2, r3
 800ceac:	f7f4 ff92 	bl	8001dd4 <_write>
 800ceb0:	1c43      	adds	r3, r0, #1
 800ceb2:	d102      	bne.n	800ceba <_write_r+0x1e>
 800ceb4:	682b      	ldr	r3, [r5, #0]
 800ceb6:	b103      	cbz	r3, 800ceba <_write_r+0x1e>
 800ceb8:	6023      	str	r3, [r4, #0]
 800ceba:	bd38      	pop	{r3, r4, r5, pc}
 800cebc:	20005484 	.word	0x20005484

0800cec0 <_close_r>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	2300      	movs	r3, #0
 800cec4:	4d05      	ldr	r5, [pc, #20]	; (800cedc <_close_r+0x1c>)
 800cec6:	4604      	mov	r4, r0
 800cec8:	4608      	mov	r0, r1
 800ceca:	602b      	str	r3, [r5, #0]
 800cecc:	f7f4 ff9e 	bl	8001e0c <_close>
 800ced0:	1c43      	adds	r3, r0, #1
 800ced2:	d102      	bne.n	800ceda <_close_r+0x1a>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	b103      	cbz	r3, 800ceda <_close_r+0x1a>
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	20005484 	.word	0x20005484

0800cee0 <quorem>:
 800cee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee4:	6903      	ldr	r3, [r0, #16]
 800cee6:	690c      	ldr	r4, [r1, #16]
 800cee8:	4607      	mov	r7, r0
 800ceea:	42a3      	cmp	r3, r4
 800ceec:	f2c0 8083 	blt.w	800cff6 <quorem+0x116>
 800cef0:	3c01      	subs	r4, #1
 800cef2:	f100 0514 	add.w	r5, r0, #20
 800cef6:	f101 0814 	add.w	r8, r1, #20
 800cefa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cefe:	9301      	str	r3, [sp, #4]
 800cf00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cf14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf18:	d332      	bcc.n	800cf80 <quorem+0xa0>
 800cf1a:	f04f 0e00 	mov.w	lr, #0
 800cf1e:	4640      	mov	r0, r8
 800cf20:	46ac      	mov	ip, r5
 800cf22:	46f2      	mov	sl, lr
 800cf24:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf28:	b293      	uxth	r3, r2
 800cf2a:	fb06 e303 	mla	r3, r6, r3, lr
 800cf2e:	0c12      	lsrs	r2, r2, #16
 800cf30:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cf34:	fb06 e202 	mla	r2, r6, r2, lr
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	ebaa 0303 	sub.w	r3, sl, r3
 800cf3e:	f8dc a000 	ldr.w	sl, [ip]
 800cf42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf46:	fa1f fa8a 	uxth.w	sl, sl
 800cf4a:	4453      	add	r3, sl
 800cf4c:	fa1f fa82 	uxth.w	sl, r2
 800cf50:	f8dc 2000 	ldr.w	r2, [ip]
 800cf54:	4581      	cmp	r9, r0
 800cf56:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800cf5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf64:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cf68:	f84c 3b04 	str.w	r3, [ip], #4
 800cf6c:	d2da      	bcs.n	800cf24 <quorem+0x44>
 800cf6e:	f855 300b 	ldr.w	r3, [r5, fp]
 800cf72:	b92b      	cbnz	r3, 800cf80 <quorem+0xa0>
 800cf74:	9b01      	ldr	r3, [sp, #4]
 800cf76:	3b04      	subs	r3, #4
 800cf78:	429d      	cmp	r5, r3
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	d32f      	bcc.n	800cfde <quorem+0xfe>
 800cf7e:	613c      	str	r4, [r7, #16]
 800cf80:	4638      	mov	r0, r7
 800cf82:	f001 fd59 	bl	800ea38 <__mcmp>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	db25      	blt.n	800cfd6 <quorem+0xf6>
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	f04f 0c00 	mov.w	ip, #0
 800cf90:	3601      	adds	r6, #1
 800cf92:	f858 1b04 	ldr.w	r1, [r8], #4
 800cf96:	f8d0 e000 	ldr.w	lr, [r0]
 800cf9a:	b28b      	uxth	r3, r1
 800cf9c:	ebac 0303 	sub.w	r3, ip, r3
 800cfa0:	fa1f f28e 	uxth.w	r2, lr
 800cfa4:	4413      	add	r3, r2
 800cfa6:	0c0a      	lsrs	r2, r1, #16
 800cfa8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cfac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfb6:	45c1      	cmp	r9, r8
 800cfb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cfbc:	f840 3b04 	str.w	r3, [r0], #4
 800cfc0:	d2e7      	bcs.n	800cf92 <quorem+0xb2>
 800cfc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfca:	b922      	cbnz	r2, 800cfd6 <quorem+0xf6>
 800cfcc:	3b04      	subs	r3, #4
 800cfce:	429d      	cmp	r5, r3
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	d30a      	bcc.n	800cfea <quorem+0x10a>
 800cfd4:	613c      	str	r4, [r7, #16]
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	b003      	add	sp, #12
 800cfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfde:	6812      	ldr	r2, [r2, #0]
 800cfe0:	3b04      	subs	r3, #4
 800cfe2:	2a00      	cmp	r2, #0
 800cfe4:	d1cb      	bne.n	800cf7e <quorem+0x9e>
 800cfe6:	3c01      	subs	r4, #1
 800cfe8:	e7c6      	b.n	800cf78 <quorem+0x98>
 800cfea:	6812      	ldr	r2, [r2, #0]
 800cfec:	3b04      	subs	r3, #4
 800cfee:	2a00      	cmp	r2, #0
 800cff0:	d1f0      	bne.n	800cfd4 <quorem+0xf4>
 800cff2:	3c01      	subs	r4, #1
 800cff4:	e7eb      	b.n	800cfce <quorem+0xee>
 800cff6:	2000      	movs	r0, #0
 800cff8:	e7ee      	b.n	800cfd8 <quorem+0xf8>
 800cffa:	0000      	movs	r0, r0
 800cffc:	0000      	movs	r0, r0
	...

0800d000 <_dtoa_r>:
 800d000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d004:	4616      	mov	r6, r2
 800d006:	461f      	mov	r7, r3
 800d008:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d00a:	b099      	sub	sp, #100	; 0x64
 800d00c:	4605      	mov	r5, r0
 800d00e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d012:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800d016:	b974      	cbnz	r4, 800d036 <_dtoa_r+0x36>
 800d018:	2010      	movs	r0, #16
 800d01a:	f7fe f8ed 	bl	800b1f8 <malloc>
 800d01e:	4602      	mov	r2, r0
 800d020:	6268      	str	r0, [r5, #36]	; 0x24
 800d022:	b920      	cbnz	r0, 800d02e <_dtoa_r+0x2e>
 800d024:	21ea      	movs	r1, #234	; 0xea
 800d026:	4bae      	ldr	r3, [pc, #696]	; (800d2e0 <_dtoa_r+0x2e0>)
 800d028:	48ae      	ldr	r0, [pc, #696]	; (800d2e4 <_dtoa_r+0x2e4>)
 800d02a:	f002 f89b 	bl	800f164 <__assert_func>
 800d02e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d032:	6004      	str	r4, [r0, #0]
 800d034:	60c4      	str	r4, [r0, #12]
 800d036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d038:	6819      	ldr	r1, [r3, #0]
 800d03a:	b151      	cbz	r1, 800d052 <_dtoa_r+0x52>
 800d03c:	685a      	ldr	r2, [r3, #4]
 800d03e:	2301      	movs	r3, #1
 800d040:	4093      	lsls	r3, r2
 800d042:	604a      	str	r2, [r1, #4]
 800d044:	608b      	str	r3, [r1, #8]
 800d046:	4628      	mov	r0, r5
 800d048:	f001 fa72 	bl	800e530 <_Bfree>
 800d04c:	2200      	movs	r2, #0
 800d04e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d050:	601a      	str	r2, [r3, #0]
 800d052:	1e3b      	subs	r3, r7, #0
 800d054:	bfaf      	iteee	ge
 800d056:	2300      	movge	r3, #0
 800d058:	2201      	movlt	r2, #1
 800d05a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d05e:	9305      	strlt	r3, [sp, #20]
 800d060:	bfa8      	it	ge
 800d062:	f8c8 3000 	strge.w	r3, [r8]
 800d066:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800d06a:	4b9f      	ldr	r3, [pc, #636]	; (800d2e8 <_dtoa_r+0x2e8>)
 800d06c:	bfb8      	it	lt
 800d06e:	f8c8 2000 	strlt.w	r2, [r8]
 800d072:	ea33 0309 	bics.w	r3, r3, r9
 800d076:	d119      	bne.n	800d0ac <_dtoa_r+0xac>
 800d078:	f242 730f 	movw	r3, #9999	; 0x270f
 800d07c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d07e:	6013      	str	r3, [r2, #0]
 800d080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d084:	4333      	orrs	r3, r6
 800d086:	f000 8580 	beq.w	800db8a <_dtoa_r+0xb8a>
 800d08a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d08c:	b953      	cbnz	r3, 800d0a4 <_dtoa_r+0xa4>
 800d08e:	4b97      	ldr	r3, [pc, #604]	; (800d2ec <_dtoa_r+0x2ec>)
 800d090:	e022      	b.n	800d0d8 <_dtoa_r+0xd8>
 800d092:	4b97      	ldr	r3, [pc, #604]	; (800d2f0 <_dtoa_r+0x2f0>)
 800d094:	9308      	str	r3, [sp, #32]
 800d096:	3308      	adds	r3, #8
 800d098:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d09a:	6013      	str	r3, [r2, #0]
 800d09c:	9808      	ldr	r0, [sp, #32]
 800d09e:	b019      	add	sp, #100	; 0x64
 800d0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a4:	4b91      	ldr	r3, [pc, #580]	; (800d2ec <_dtoa_r+0x2ec>)
 800d0a6:	9308      	str	r3, [sp, #32]
 800d0a8:	3303      	adds	r3, #3
 800d0aa:	e7f5      	b.n	800d098 <_dtoa_r+0x98>
 800d0ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d0b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800d0b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	f7f3 fcb4 	bl	8000a28 <__aeabi_dcmpeq>
 800d0c0:	4680      	mov	r8, r0
 800d0c2:	b158      	cbz	r0, 800d0dc <_dtoa_r+0xdc>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d0c8:	6013      	str	r3, [r2, #0]
 800d0ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f000 8559 	beq.w	800db84 <_dtoa_r+0xb84>
 800d0d2:	4888      	ldr	r0, [pc, #544]	; (800d2f4 <_dtoa_r+0x2f4>)
 800d0d4:	6018      	str	r0, [r3, #0]
 800d0d6:	1e43      	subs	r3, r0, #1
 800d0d8:	9308      	str	r3, [sp, #32]
 800d0da:	e7df      	b.n	800d09c <_dtoa_r+0x9c>
 800d0dc:	ab16      	add	r3, sp, #88	; 0x58
 800d0de:	9301      	str	r3, [sp, #4]
 800d0e0:	ab17      	add	r3, sp, #92	; 0x5c
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d0ea:	f001 fdcb 	bl	800ec84 <__d2b>
 800d0ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d0f2:	4682      	mov	sl, r0
 800d0f4:	2c00      	cmp	r4, #0
 800d0f6:	d07e      	beq.n	800d1f6 <_dtoa_r+0x1f6>
 800d0f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d0fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d102:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d106:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800d10a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d10e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800d112:	2200      	movs	r2, #0
 800d114:	4b78      	ldr	r3, [pc, #480]	; (800d2f8 <_dtoa_r+0x2f8>)
 800d116:	f7f3 f867 	bl	80001e8 <__aeabi_dsub>
 800d11a:	a36b      	add	r3, pc, #428	; (adr r3, 800d2c8 <_dtoa_r+0x2c8>)
 800d11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d120:	f7f3 fa1a 	bl	8000558 <__aeabi_dmul>
 800d124:	a36a      	add	r3, pc, #424	; (adr r3, 800d2d0 <_dtoa_r+0x2d0>)
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	f7f3 f85f 	bl	80001ec <__adddf3>
 800d12e:	4606      	mov	r6, r0
 800d130:	4620      	mov	r0, r4
 800d132:	460f      	mov	r7, r1
 800d134:	f7f3 f9a6 	bl	8000484 <__aeabi_i2d>
 800d138:	a367      	add	r3, pc, #412	; (adr r3, 800d2d8 <_dtoa_r+0x2d8>)
 800d13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13e:	f7f3 fa0b 	bl	8000558 <__aeabi_dmul>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
 800d146:	4630      	mov	r0, r6
 800d148:	4639      	mov	r1, r7
 800d14a:	f7f3 f84f 	bl	80001ec <__adddf3>
 800d14e:	4606      	mov	r6, r0
 800d150:	460f      	mov	r7, r1
 800d152:	f7f3 fcb1 	bl	8000ab8 <__aeabi_d2iz>
 800d156:	2200      	movs	r2, #0
 800d158:	4681      	mov	r9, r0
 800d15a:	2300      	movs	r3, #0
 800d15c:	4630      	mov	r0, r6
 800d15e:	4639      	mov	r1, r7
 800d160:	f7f3 fc6c 	bl	8000a3c <__aeabi_dcmplt>
 800d164:	b148      	cbz	r0, 800d17a <_dtoa_r+0x17a>
 800d166:	4648      	mov	r0, r9
 800d168:	f7f3 f98c 	bl	8000484 <__aeabi_i2d>
 800d16c:	4632      	mov	r2, r6
 800d16e:	463b      	mov	r3, r7
 800d170:	f7f3 fc5a 	bl	8000a28 <__aeabi_dcmpeq>
 800d174:	b908      	cbnz	r0, 800d17a <_dtoa_r+0x17a>
 800d176:	f109 39ff 	add.w	r9, r9, #4294967295
 800d17a:	f1b9 0f16 	cmp.w	r9, #22
 800d17e:	d857      	bhi.n	800d230 <_dtoa_r+0x230>
 800d180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d184:	4b5d      	ldr	r3, [pc, #372]	; (800d2fc <_dtoa_r+0x2fc>)
 800d186:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18e:	f7f3 fc55 	bl	8000a3c <__aeabi_dcmplt>
 800d192:	2800      	cmp	r0, #0
 800d194:	d04e      	beq.n	800d234 <_dtoa_r+0x234>
 800d196:	2300      	movs	r3, #0
 800d198:	f109 39ff 	add.w	r9, r9, #4294967295
 800d19c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d19e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d1a0:	1b1c      	subs	r4, r3, r4
 800d1a2:	1e63      	subs	r3, r4, #1
 800d1a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a6:	bf49      	itett	mi
 800d1a8:	f1c4 0301 	rsbmi	r3, r4, #1
 800d1ac:	2300      	movpl	r3, #0
 800d1ae:	9306      	strmi	r3, [sp, #24]
 800d1b0:	2300      	movmi	r3, #0
 800d1b2:	bf54      	ite	pl
 800d1b4:	9306      	strpl	r3, [sp, #24]
 800d1b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d1b8:	f1b9 0f00 	cmp.w	r9, #0
 800d1bc:	db3c      	blt.n	800d238 <_dtoa_r+0x238>
 800d1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1c0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d1c4:	444b      	add	r3, r9
 800d1c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	930a      	str	r3, [sp, #40]	; 0x28
 800d1cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d1ce:	2b09      	cmp	r3, #9
 800d1d0:	d86c      	bhi.n	800d2ac <_dtoa_r+0x2ac>
 800d1d2:	2b05      	cmp	r3, #5
 800d1d4:	bfc4      	itt	gt
 800d1d6:	3b04      	subgt	r3, #4
 800d1d8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d1da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d1dc:	bfc8      	it	gt
 800d1de:	2400      	movgt	r4, #0
 800d1e0:	f1a3 0302 	sub.w	r3, r3, #2
 800d1e4:	bfd8      	it	le
 800d1e6:	2401      	movle	r4, #1
 800d1e8:	2b03      	cmp	r3, #3
 800d1ea:	f200 808b 	bhi.w	800d304 <_dtoa_r+0x304>
 800d1ee:	e8df f003 	tbb	[pc, r3]
 800d1f2:	4f2d      	.short	0x4f2d
 800d1f4:	5b4d      	.short	0x5b4d
 800d1f6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d1fa:	441c      	add	r4, r3
 800d1fc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d200:	2b20      	cmp	r3, #32
 800d202:	bfc3      	ittte	gt
 800d204:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d208:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800d20c:	fa09 f303 	lslgt.w	r3, r9, r3
 800d210:	f1c3 0320 	rsble	r3, r3, #32
 800d214:	bfc6      	itte	gt
 800d216:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d21a:	4318      	orrgt	r0, r3
 800d21c:	fa06 f003 	lslle.w	r0, r6, r3
 800d220:	f7f3 f920 	bl	8000464 <__aeabi_ui2d>
 800d224:	2301      	movs	r3, #1
 800d226:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d22a:	3c01      	subs	r4, #1
 800d22c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d22e:	e770      	b.n	800d112 <_dtoa_r+0x112>
 800d230:	2301      	movs	r3, #1
 800d232:	e7b3      	b.n	800d19c <_dtoa_r+0x19c>
 800d234:	900f      	str	r0, [sp, #60]	; 0x3c
 800d236:	e7b2      	b.n	800d19e <_dtoa_r+0x19e>
 800d238:	9b06      	ldr	r3, [sp, #24]
 800d23a:	eba3 0309 	sub.w	r3, r3, r9
 800d23e:	9306      	str	r3, [sp, #24]
 800d240:	f1c9 0300 	rsb	r3, r9, #0
 800d244:	930a      	str	r3, [sp, #40]	; 0x28
 800d246:	2300      	movs	r3, #0
 800d248:	930e      	str	r3, [sp, #56]	; 0x38
 800d24a:	e7bf      	b.n	800d1cc <_dtoa_r+0x1cc>
 800d24c:	2300      	movs	r3, #0
 800d24e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d250:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d252:	2b00      	cmp	r3, #0
 800d254:	dc59      	bgt.n	800d30a <_dtoa_r+0x30a>
 800d256:	f04f 0b01 	mov.w	fp, #1
 800d25a:	465b      	mov	r3, fp
 800d25c:	f8cd b008 	str.w	fp, [sp, #8]
 800d260:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800d264:	2200      	movs	r2, #0
 800d266:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d268:	6042      	str	r2, [r0, #4]
 800d26a:	2204      	movs	r2, #4
 800d26c:	f102 0614 	add.w	r6, r2, #20
 800d270:	429e      	cmp	r6, r3
 800d272:	6841      	ldr	r1, [r0, #4]
 800d274:	d94f      	bls.n	800d316 <_dtoa_r+0x316>
 800d276:	4628      	mov	r0, r5
 800d278:	f001 f91a 	bl	800e4b0 <_Balloc>
 800d27c:	9008      	str	r0, [sp, #32]
 800d27e:	2800      	cmp	r0, #0
 800d280:	d14d      	bne.n	800d31e <_dtoa_r+0x31e>
 800d282:	4602      	mov	r2, r0
 800d284:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d288:	4b1d      	ldr	r3, [pc, #116]	; (800d300 <_dtoa_r+0x300>)
 800d28a:	e6cd      	b.n	800d028 <_dtoa_r+0x28>
 800d28c:	2301      	movs	r3, #1
 800d28e:	e7de      	b.n	800d24e <_dtoa_r+0x24e>
 800d290:	2300      	movs	r3, #0
 800d292:	930b      	str	r3, [sp, #44]	; 0x2c
 800d294:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d296:	eb09 0b03 	add.w	fp, r9, r3
 800d29a:	f10b 0301 	add.w	r3, fp, #1
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	9302      	str	r3, [sp, #8]
 800d2a2:	bfb8      	it	lt
 800d2a4:	2301      	movlt	r3, #1
 800d2a6:	e7dd      	b.n	800d264 <_dtoa_r+0x264>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e7f2      	b.n	800d292 <_dtoa_r+0x292>
 800d2ac:	2401      	movs	r4, #1
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	940b      	str	r4, [sp, #44]	; 0x2c
 800d2b2:	9322      	str	r3, [sp, #136]	; 0x88
 800d2b4:	f04f 3bff 	mov.w	fp, #4294967295
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	2312      	movs	r3, #18
 800d2bc:	f8cd b008 	str.w	fp, [sp, #8]
 800d2c0:	9223      	str	r2, [sp, #140]	; 0x8c
 800d2c2:	e7cf      	b.n	800d264 <_dtoa_r+0x264>
 800d2c4:	f3af 8000 	nop.w
 800d2c8:	636f4361 	.word	0x636f4361
 800d2cc:	3fd287a7 	.word	0x3fd287a7
 800d2d0:	8b60c8b3 	.word	0x8b60c8b3
 800d2d4:	3fc68a28 	.word	0x3fc68a28
 800d2d8:	509f79fb 	.word	0x509f79fb
 800d2dc:	3fd34413 	.word	0x3fd34413
 800d2e0:	0800fa76 	.word	0x0800fa76
 800d2e4:	0800fa8d 	.word	0x0800fa8d
 800d2e8:	7ff00000 	.word	0x7ff00000
 800d2ec:	0800fa72 	.word	0x0800fa72
 800d2f0:	0800fa69 	.word	0x0800fa69
 800d2f4:	0800f8e9 	.word	0x0800f8e9
 800d2f8:	3ff80000 	.word	0x3ff80000
 800d2fc:	0800fc08 	.word	0x0800fc08
 800d300:	0800faec 	.word	0x0800faec
 800d304:	2301      	movs	r3, #1
 800d306:	930b      	str	r3, [sp, #44]	; 0x2c
 800d308:	e7d4      	b.n	800d2b4 <_dtoa_r+0x2b4>
 800d30a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800d30e:	465b      	mov	r3, fp
 800d310:	f8cd b008 	str.w	fp, [sp, #8]
 800d314:	e7a6      	b.n	800d264 <_dtoa_r+0x264>
 800d316:	3101      	adds	r1, #1
 800d318:	6041      	str	r1, [r0, #4]
 800d31a:	0052      	lsls	r2, r2, #1
 800d31c:	e7a6      	b.n	800d26c <_dtoa_r+0x26c>
 800d31e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d320:	9a08      	ldr	r2, [sp, #32]
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	9b02      	ldr	r3, [sp, #8]
 800d326:	2b0e      	cmp	r3, #14
 800d328:	f200 80a8 	bhi.w	800d47c <_dtoa_r+0x47c>
 800d32c:	2c00      	cmp	r4, #0
 800d32e:	f000 80a5 	beq.w	800d47c <_dtoa_r+0x47c>
 800d332:	f1b9 0f00 	cmp.w	r9, #0
 800d336:	dd34      	ble.n	800d3a2 <_dtoa_r+0x3a2>
 800d338:	4a9a      	ldr	r2, [pc, #616]	; (800d5a4 <_dtoa_r+0x5a4>)
 800d33a:	f009 030f 	and.w	r3, r9, #15
 800d33e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d342:	f419 7f80 	tst.w	r9, #256	; 0x100
 800d346:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d34a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d34e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800d352:	d016      	beq.n	800d382 <_dtoa_r+0x382>
 800d354:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d358:	4b93      	ldr	r3, [pc, #588]	; (800d5a8 <_dtoa_r+0x5a8>)
 800d35a:	2703      	movs	r7, #3
 800d35c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d360:	f7f3 fa24 	bl	80007ac <__aeabi_ddiv>
 800d364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d368:	f004 040f 	and.w	r4, r4, #15
 800d36c:	4e8e      	ldr	r6, [pc, #568]	; (800d5a8 <_dtoa_r+0x5a8>)
 800d36e:	b954      	cbnz	r4, 800d386 <_dtoa_r+0x386>
 800d370:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d378:	f7f3 fa18 	bl	80007ac <__aeabi_ddiv>
 800d37c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d380:	e029      	b.n	800d3d6 <_dtoa_r+0x3d6>
 800d382:	2702      	movs	r7, #2
 800d384:	e7f2      	b.n	800d36c <_dtoa_r+0x36c>
 800d386:	07e1      	lsls	r1, r4, #31
 800d388:	d508      	bpl.n	800d39c <_dtoa_r+0x39c>
 800d38a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d38e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d392:	f7f3 f8e1 	bl	8000558 <__aeabi_dmul>
 800d396:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d39a:	3701      	adds	r7, #1
 800d39c:	1064      	asrs	r4, r4, #1
 800d39e:	3608      	adds	r6, #8
 800d3a0:	e7e5      	b.n	800d36e <_dtoa_r+0x36e>
 800d3a2:	f000 80a5 	beq.w	800d4f0 <_dtoa_r+0x4f0>
 800d3a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d3aa:	f1c9 0400 	rsb	r4, r9, #0
 800d3ae:	4b7d      	ldr	r3, [pc, #500]	; (800d5a4 <_dtoa_r+0x5a4>)
 800d3b0:	f004 020f 	and.w	r2, r4, #15
 800d3b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	f7f3 f8cc 	bl	8000558 <__aeabi_dmul>
 800d3c0:	2702      	movs	r7, #2
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3c8:	4e77      	ldr	r6, [pc, #476]	; (800d5a8 <_dtoa_r+0x5a8>)
 800d3ca:	1124      	asrs	r4, r4, #4
 800d3cc:	2c00      	cmp	r4, #0
 800d3ce:	f040 8084 	bne.w	800d4da <_dtoa_r+0x4da>
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d1d2      	bne.n	800d37c <_dtoa_r+0x37c>
 800d3d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f000 808b 	beq.w	800d4f4 <_dtoa_r+0x4f4>
 800d3de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d3e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d3e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	4b6f      	ldr	r3, [pc, #444]	; (800d5ac <_dtoa_r+0x5ac>)
 800d3ee:	f7f3 fb25 	bl	8000a3c <__aeabi_dcmplt>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d07e      	beq.n	800d4f4 <_dtoa_r+0x4f4>
 800d3f6:	9b02      	ldr	r3, [sp, #8]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d07b      	beq.n	800d4f4 <_dtoa_r+0x4f4>
 800d3fc:	f1bb 0f00 	cmp.w	fp, #0
 800d400:	dd38      	ble.n	800d474 <_dtoa_r+0x474>
 800d402:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d406:	2200      	movs	r2, #0
 800d408:	4b69      	ldr	r3, [pc, #420]	; (800d5b0 <_dtoa_r+0x5b0>)
 800d40a:	f7f3 f8a5 	bl	8000558 <__aeabi_dmul>
 800d40e:	465c      	mov	r4, fp
 800d410:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d414:	f109 38ff 	add.w	r8, r9, #4294967295
 800d418:	3701      	adds	r7, #1
 800d41a:	4638      	mov	r0, r7
 800d41c:	f7f3 f832 	bl	8000484 <__aeabi_i2d>
 800d420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d424:	f7f3 f898 	bl	8000558 <__aeabi_dmul>
 800d428:	2200      	movs	r2, #0
 800d42a:	4b62      	ldr	r3, [pc, #392]	; (800d5b4 <_dtoa_r+0x5b4>)
 800d42c:	f7f2 fede 	bl	80001ec <__adddf3>
 800d430:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d434:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d438:	9611      	str	r6, [sp, #68]	; 0x44
 800d43a:	2c00      	cmp	r4, #0
 800d43c:	d15d      	bne.n	800d4fa <_dtoa_r+0x4fa>
 800d43e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d442:	2200      	movs	r2, #0
 800d444:	4b5c      	ldr	r3, [pc, #368]	; (800d5b8 <_dtoa_r+0x5b8>)
 800d446:	f7f2 fecf 	bl	80001e8 <__aeabi_dsub>
 800d44a:	4602      	mov	r2, r0
 800d44c:	460b      	mov	r3, r1
 800d44e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d452:	4633      	mov	r3, r6
 800d454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d456:	f7f3 fb0f 	bl	8000a78 <__aeabi_dcmpgt>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	f040 829e 	bne.w	800d99c <_dtoa_r+0x99c>
 800d460:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d464:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d466:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d46a:	f7f3 fae7 	bl	8000a3c <__aeabi_dcmplt>
 800d46e:	2800      	cmp	r0, #0
 800d470:	f040 8292 	bne.w	800d998 <_dtoa_r+0x998>
 800d474:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800d478:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d47c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d47e:	2b00      	cmp	r3, #0
 800d480:	f2c0 8153 	blt.w	800d72a <_dtoa_r+0x72a>
 800d484:	f1b9 0f0e 	cmp.w	r9, #14
 800d488:	f300 814f 	bgt.w	800d72a <_dtoa_r+0x72a>
 800d48c:	4b45      	ldr	r3, [pc, #276]	; (800d5a4 <_dtoa_r+0x5a4>)
 800d48e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d492:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d496:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d49a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f280 80db 	bge.w	800d658 <_dtoa_r+0x658>
 800d4a2:	9b02      	ldr	r3, [sp, #8]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f300 80d7 	bgt.w	800d658 <_dtoa_r+0x658>
 800d4aa:	f040 8274 	bne.w	800d996 <_dtoa_r+0x996>
 800d4ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	4b40      	ldr	r3, [pc, #256]	; (800d5b8 <_dtoa_r+0x5b8>)
 800d4b6:	f7f3 f84f 	bl	8000558 <__aeabi_dmul>
 800d4ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4be:	f7f3 fad1 	bl	8000a64 <__aeabi_dcmpge>
 800d4c2:	9c02      	ldr	r4, [sp, #8]
 800d4c4:	4626      	mov	r6, r4
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	f040 824a 	bne.w	800d960 <_dtoa_r+0x960>
 800d4cc:	2331      	movs	r3, #49	; 0x31
 800d4ce:	9f08      	ldr	r7, [sp, #32]
 800d4d0:	f109 0901 	add.w	r9, r9, #1
 800d4d4:	f807 3b01 	strb.w	r3, [r7], #1
 800d4d8:	e246      	b.n	800d968 <_dtoa_r+0x968>
 800d4da:	07e2      	lsls	r2, r4, #31
 800d4dc:	d505      	bpl.n	800d4ea <_dtoa_r+0x4ea>
 800d4de:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d4e2:	f7f3 f839 	bl	8000558 <__aeabi_dmul>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	3701      	adds	r7, #1
 800d4ea:	1064      	asrs	r4, r4, #1
 800d4ec:	3608      	adds	r6, #8
 800d4ee:	e76d      	b.n	800d3cc <_dtoa_r+0x3cc>
 800d4f0:	2702      	movs	r7, #2
 800d4f2:	e770      	b.n	800d3d6 <_dtoa_r+0x3d6>
 800d4f4:	46c8      	mov	r8, r9
 800d4f6:	9c02      	ldr	r4, [sp, #8]
 800d4f8:	e78f      	b.n	800d41a <_dtoa_r+0x41a>
 800d4fa:	9908      	ldr	r1, [sp, #32]
 800d4fc:	4b29      	ldr	r3, [pc, #164]	; (800d5a4 <_dtoa_r+0x5a4>)
 800d4fe:	4421      	add	r1, r4
 800d500:	9112      	str	r1, [sp, #72]	; 0x48
 800d502:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d504:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d508:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d50c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d510:	2900      	cmp	r1, #0
 800d512:	d055      	beq.n	800d5c0 <_dtoa_r+0x5c0>
 800d514:	2000      	movs	r0, #0
 800d516:	4929      	ldr	r1, [pc, #164]	; (800d5bc <_dtoa_r+0x5bc>)
 800d518:	f7f3 f948 	bl	80007ac <__aeabi_ddiv>
 800d51c:	463b      	mov	r3, r7
 800d51e:	4632      	mov	r2, r6
 800d520:	f7f2 fe62 	bl	80001e8 <__aeabi_dsub>
 800d524:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d528:	9f08      	ldr	r7, [sp, #32]
 800d52a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d52e:	f7f3 fac3 	bl	8000ab8 <__aeabi_d2iz>
 800d532:	4604      	mov	r4, r0
 800d534:	f7f2 ffa6 	bl	8000484 <__aeabi_i2d>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d540:	f7f2 fe52 	bl	80001e8 <__aeabi_dsub>
 800d544:	4602      	mov	r2, r0
 800d546:	460b      	mov	r3, r1
 800d548:	3430      	adds	r4, #48	; 0x30
 800d54a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d54e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d552:	f807 4b01 	strb.w	r4, [r7], #1
 800d556:	f7f3 fa71 	bl	8000a3c <__aeabi_dcmplt>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	d174      	bne.n	800d648 <_dtoa_r+0x648>
 800d55e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d562:	2000      	movs	r0, #0
 800d564:	4911      	ldr	r1, [pc, #68]	; (800d5ac <_dtoa_r+0x5ac>)
 800d566:	f7f2 fe3f 	bl	80001e8 <__aeabi_dsub>
 800d56a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d56e:	f7f3 fa65 	bl	8000a3c <__aeabi_dcmplt>
 800d572:	2800      	cmp	r0, #0
 800d574:	f040 80b6 	bne.w	800d6e4 <_dtoa_r+0x6e4>
 800d578:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d57a:	429f      	cmp	r7, r3
 800d57c:	f43f af7a 	beq.w	800d474 <_dtoa_r+0x474>
 800d580:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d584:	2200      	movs	r2, #0
 800d586:	4b0a      	ldr	r3, [pc, #40]	; (800d5b0 <_dtoa_r+0x5b0>)
 800d588:	f7f2 ffe6 	bl	8000558 <__aeabi_dmul>
 800d58c:	2200      	movs	r2, #0
 800d58e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d596:	4b06      	ldr	r3, [pc, #24]	; (800d5b0 <_dtoa_r+0x5b0>)
 800d598:	f7f2 ffde 	bl	8000558 <__aeabi_dmul>
 800d59c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5a0:	e7c3      	b.n	800d52a <_dtoa_r+0x52a>
 800d5a2:	bf00      	nop
 800d5a4:	0800fc08 	.word	0x0800fc08
 800d5a8:	0800fbe0 	.word	0x0800fbe0
 800d5ac:	3ff00000 	.word	0x3ff00000
 800d5b0:	40240000 	.word	0x40240000
 800d5b4:	401c0000 	.word	0x401c0000
 800d5b8:	40140000 	.word	0x40140000
 800d5bc:	3fe00000 	.word	0x3fe00000
 800d5c0:	4630      	mov	r0, r6
 800d5c2:	4639      	mov	r1, r7
 800d5c4:	f7f2 ffc8 	bl	8000558 <__aeabi_dmul>
 800d5c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d5ce:	9c08      	ldr	r4, [sp, #32]
 800d5d0:	9314      	str	r3, [sp, #80]	; 0x50
 800d5d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5d6:	f7f3 fa6f 	bl	8000ab8 <__aeabi_d2iz>
 800d5da:	9015      	str	r0, [sp, #84]	; 0x54
 800d5dc:	f7f2 ff52 	bl	8000484 <__aeabi_i2d>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5e8:	f7f2 fdfe 	bl	80001e8 <__aeabi_dsub>
 800d5ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5ee:	4606      	mov	r6, r0
 800d5f0:	3330      	adds	r3, #48	; 0x30
 800d5f2:	f804 3b01 	strb.w	r3, [r4], #1
 800d5f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5f8:	460f      	mov	r7, r1
 800d5fa:	429c      	cmp	r4, r3
 800d5fc:	f04f 0200 	mov.w	r2, #0
 800d600:	d124      	bne.n	800d64c <_dtoa_r+0x64c>
 800d602:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d606:	4bb3      	ldr	r3, [pc, #716]	; (800d8d4 <_dtoa_r+0x8d4>)
 800d608:	f7f2 fdf0 	bl	80001ec <__adddf3>
 800d60c:	4602      	mov	r2, r0
 800d60e:	460b      	mov	r3, r1
 800d610:	4630      	mov	r0, r6
 800d612:	4639      	mov	r1, r7
 800d614:	f7f3 fa30 	bl	8000a78 <__aeabi_dcmpgt>
 800d618:	2800      	cmp	r0, #0
 800d61a:	d162      	bne.n	800d6e2 <_dtoa_r+0x6e2>
 800d61c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d620:	2000      	movs	r0, #0
 800d622:	49ac      	ldr	r1, [pc, #688]	; (800d8d4 <_dtoa_r+0x8d4>)
 800d624:	f7f2 fde0 	bl	80001e8 <__aeabi_dsub>
 800d628:	4602      	mov	r2, r0
 800d62a:	460b      	mov	r3, r1
 800d62c:	4630      	mov	r0, r6
 800d62e:	4639      	mov	r1, r7
 800d630:	f7f3 fa04 	bl	8000a3c <__aeabi_dcmplt>
 800d634:	2800      	cmp	r0, #0
 800d636:	f43f af1d 	beq.w	800d474 <_dtoa_r+0x474>
 800d63a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d63c:	1e7b      	subs	r3, r7, #1
 800d63e:	9314      	str	r3, [sp, #80]	; 0x50
 800d640:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d644:	2b30      	cmp	r3, #48	; 0x30
 800d646:	d0f8      	beq.n	800d63a <_dtoa_r+0x63a>
 800d648:	46c1      	mov	r9, r8
 800d64a:	e03a      	b.n	800d6c2 <_dtoa_r+0x6c2>
 800d64c:	4ba2      	ldr	r3, [pc, #648]	; (800d8d8 <_dtoa_r+0x8d8>)
 800d64e:	f7f2 ff83 	bl	8000558 <__aeabi_dmul>
 800d652:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d656:	e7bc      	b.n	800d5d2 <_dtoa_r+0x5d2>
 800d658:	9f08      	ldr	r7, [sp, #32]
 800d65a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d65e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d662:	f7f3 f8a3 	bl	80007ac <__aeabi_ddiv>
 800d666:	f7f3 fa27 	bl	8000ab8 <__aeabi_d2iz>
 800d66a:	4604      	mov	r4, r0
 800d66c:	f7f2 ff0a 	bl	8000484 <__aeabi_i2d>
 800d670:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d674:	f7f2 ff70 	bl	8000558 <__aeabi_dmul>
 800d678:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d67c:	460b      	mov	r3, r1
 800d67e:	4602      	mov	r2, r0
 800d680:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d684:	f7f2 fdb0 	bl	80001e8 <__aeabi_dsub>
 800d688:	f807 6b01 	strb.w	r6, [r7], #1
 800d68c:	9e08      	ldr	r6, [sp, #32]
 800d68e:	9b02      	ldr	r3, [sp, #8]
 800d690:	1bbe      	subs	r6, r7, r6
 800d692:	42b3      	cmp	r3, r6
 800d694:	d13a      	bne.n	800d70c <_dtoa_r+0x70c>
 800d696:	4602      	mov	r2, r0
 800d698:	460b      	mov	r3, r1
 800d69a:	f7f2 fda7 	bl	80001ec <__adddf3>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d6aa:	f7f3 f9e5 	bl	8000a78 <__aeabi_dcmpgt>
 800d6ae:	bb58      	cbnz	r0, 800d708 <_dtoa_r+0x708>
 800d6b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d6b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6b8:	f7f3 f9b6 	bl	8000a28 <__aeabi_dcmpeq>
 800d6bc:	b108      	cbz	r0, 800d6c2 <_dtoa_r+0x6c2>
 800d6be:	07e1      	lsls	r1, r4, #31
 800d6c0:	d422      	bmi.n	800d708 <_dtoa_r+0x708>
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	4651      	mov	r1, sl
 800d6c6:	f000 ff33 	bl	800e530 <_Bfree>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	703b      	strb	r3, [r7, #0]
 800d6ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d6d0:	f109 0001 	add.w	r0, r9, #1
 800d6d4:	6018      	str	r0, [r3, #0]
 800d6d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f43f acdf 	beq.w	800d09c <_dtoa_r+0x9c>
 800d6de:	601f      	str	r7, [r3, #0]
 800d6e0:	e4dc      	b.n	800d09c <_dtoa_r+0x9c>
 800d6e2:	4627      	mov	r7, r4
 800d6e4:	463b      	mov	r3, r7
 800d6e6:	461f      	mov	r7, r3
 800d6e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6ec:	2a39      	cmp	r2, #57	; 0x39
 800d6ee:	d107      	bne.n	800d700 <_dtoa_r+0x700>
 800d6f0:	9a08      	ldr	r2, [sp, #32]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d1f7      	bne.n	800d6e6 <_dtoa_r+0x6e6>
 800d6f6:	2230      	movs	r2, #48	; 0x30
 800d6f8:	9908      	ldr	r1, [sp, #32]
 800d6fa:	f108 0801 	add.w	r8, r8, #1
 800d6fe:	700a      	strb	r2, [r1, #0]
 800d700:	781a      	ldrb	r2, [r3, #0]
 800d702:	3201      	adds	r2, #1
 800d704:	701a      	strb	r2, [r3, #0]
 800d706:	e79f      	b.n	800d648 <_dtoa_r+0x648>
 800d708:	46c8      	mov	r8, r9
 800d70a:	e7eb      	b.n	800d6e4 <_dtoa_r+0x6e4>
 800d70c:	2200      	movs	r2, #0
 800d70e:	4b72      	ldr	r3, [pc, #456]	; (800d8d8 <_dtoa_r+0x8d8>)
 800d710:	f7f2 ff22 	bl	8000558 <__aeabi_dmul>
 800d714:	4602      	mov	r2, r0
 800d716:	460b      	mov	r3, r1
 800d718:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d71c:	2200      	movs	r2, #0
 800d71e:	2300      	movs	r3, #0
 800d720:	f7f3 f982 	bl	8000a28 <__aeabi_dcmpeq>
 800d724:	2800      	cmp	r0, #0
 800d726:	d098      	beq.n	800d65a <_dtoa_r+0x65a>
 800d728:	e7cb      	b.n	800d6c2 <_dtoa_r+0x6c2>
 800d72a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d72c:	2a00      	cmp	r2, #0
 800d72e:	f000 80cd 	beq.w	800d8cc <_dtoa_r+0x8cc>
 800d732:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d734:	2a01      	cmp	r2, #1
 800d736:	f300 80af 	bgt.w	800d898 <_dtoa_r+0x898>
 800d73a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d73c:	2a00      	cmp	r2, #0
 800d73e:	f000 80a7 	beq.w	800d890 <_dtoa_r+0x890>
 800d742:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d746:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d748:	9f06      	ldr	r7, [sp, #24]
 800d74a:	9a06      	ldr	r2, [sp, #24]
 800d74c:	2101      	movs	r1, #1
 800d74e:	441a      	add	r2, r3
 800d750:	9206      	str	r2, [sp, #24]
 800d752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d754:	4628      	mov	r0, r5
 800d756:	441a      	add	r2, r3
 800d758:	9209      	str	r2, [sp, #36]	; 0x24
 800d75a:	f000 ffed 	bl	800e738 <__i2b>
 800d75e:	4606      	mov	r6, r0
 800d760:	2f00      	cmp	r7, #0
 800d762:	dd0c      	ble.n	800d77e <_dtoa_r+0x77e>
 800d764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d766:	2b00      	cmp	r3, #0
 800d768:	dd09      	ble.n	800d77e <_dtoa_r+0x77e>
 800d76a:	42bb      	cmp	r3, r7
 800d76c:	bfa8      	it	ge
 800d76e:	463b      	movge	r3, r7
 800d770:	9a06      	ldr	r2, [sp, #24]
 800d772:	1aff      	subs	r7, r7, r3
 800d774:	1ad2      	subs	r2, r2, r3
 800d776:	9206      	str	r2, [sp, #24]
 800d778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d77a:	1ad3      	subs	r3, r2, r3
 800d77c:	9309      	str	r3, [sp, #36]	; 0x24
 800d77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d780:	b1f3      	cbz	r3, 800d7c0 <_dtoa_r+0x7c0>
 800d782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d784:	2b00      	cmp	r3, #0
 800d786:	f000 80a9 	beq.w	800d8dc <_dtoa_r+0x8dc>
 800d78a:	2c00      	cmp	r4, #0
 800d78c:	dd10      	ble.n	800d7b0 <_dtoa_r+0x7b0>
 800d78e:	4631      	mov	r1, r6
 800d790:	4622      	mov	r2, r4
 800d792:	4628      	mov	r0, r5
 800d794:	f001 f88a 	bl	800e8ac <__pow5mult>
 800d798:	4652      	mov	r2, sl
 800d79a:	4601      	mov	r1, r0
 800d79c:	4606      	mov	r6, r0
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f000 ffe0 	bl	800e764 <__multiply>
 800d7a4:	4680      	mov	r8, r0
 800d7a6:	4651      	mov	r1, sl
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	f000 fec1 	bl	800e530 <_Bfree>
 800d7ae:	46c2      	mov	sl, r8
 800d7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7b2:	1b1a      	subs	r2, r3, r4
 800d7b4:	d004      	beq.n	800d7c0 <_dtoa_r+0x7c0>
 800d7b6:	4651      	mov	r1, sl
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	f001 f877 	bl	800e8ac <__pow5mult>
 800d7be:	4682      	mov	sl, r0
 800d7c0:	2101      	movs	r1, #1
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	f000 ffb8 	bl	800e738 <__i2b>
 800d7c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f340 8087 	ble.w	800d8e0 <_dtoa_r+0x8e0>
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	4601      	mov	r1, r0
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	f001 f868 	bl	800e8ac <__pow5mult>
 800d7dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d7de:	4604      	mov	r4, r0
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	f340 8080 	ble.w	800d8e6 <_dtoa_r+0x8e6>
 800d7e6:	f04f 0800 	mov.w	r8, #0
 800d7ea:	6923      	ldr	r3, [r4, #16]
 800d7ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d7f0:	6918      	ldr	r0, [r3, #16]
 800d7f2:	f000 ff53 	bl	800e69c <__hi0bits>
 800d7f6:	f1c0 0020 	rsb	r0, r0, #32
 800d7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7fc:	4418      	add	r0, r3
 800d7fe:	f010 001f 	ands.w	r0, r0, #31
 800d802:	f000 8092 	beq.w	800d92a <_dtoa_r+0x92a>
 800d806:	f1c0 0320 	rsb	r3, r0, #32
 800d80a:	2b04      	cmp	r3, #4
 800d80c:	f340 808a 	ble.w	800d924 <_dtoa_r+0x924>
 800d810:	f1c0 001c 	rsb	r0, r0, #28
 800d814:	9b06      	ldr	r3, [sp, #24]
 800d816:	4407      	add	r7, r0
 800d818:	4403      	add	r3, r0
 800d81a:	9306      	str	r3, [sp, #24]
 800d81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d81e:	4403      	add	r3, r0
 800d820:	9309      	str	r3, [sp, #36]	; 0x24
 800d822:	9b06      	ldr	r3, [sp, #24]
 800d824:	2b00      	cmp	r3, #0
 800d826:	dd05      	ble.n	800d834 <_dtoa_r+0x834>
 800d828:	4651      	mov	r1, sl
 800d82a:	461a      	mov	r2, r3
 800d82c:	4628      	mov	r0, r5
 800d82e:	f001 f897 	bl	800e960 <__lshift>
 800d832:	4682      	mov	sl, r0
 800d834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d836:	2b00      	cmp	r3, #0
 800d838:	dd05      	ble.n	800d846 <_dtoa_r+0x846>
 800d83a:	4621      	mov	r1, r4
 800d83c:	461a      	mov	r2, r3
 800d83e:	4628      	mov	r0, r5
 800d840:	f001 f88e 	bl	800e960 <__lshift>
 800d844:	4604      	mov	r4, r0
 800d846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d070      	beq.n	800d92e <_dtoa_r+0x92e>
 800d84c:	4621      	mov	r1, r4
 800d84e:	4650      	mov	r0, sl
 800d850:	f001 f8f2 	bl	800ea38 <__mcmp>
 800d854:	2800      	cmp	r0, #0
 800d856:	da6a      	bge.n	800d92e <_dtoa_r+0x92e>
 800d858:	2300      	movs	r3, #0
 800d85a:	4651      	mov	r1, sl
 800d85c:	220a      	movs	r2, #10
 800d85e:	4628      	mov	r0, r5
 800d860:	f000 fe88 	bl	800e574 <__multadd>
 800d864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d866:	4682      	mov	sl, r0
 800d868:	f109 39ff 	add.w	r9, r9, #4294967295
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f000 8193 	beq.w	800db98 <_dtoa_r+0xb98>
 800d872:	4631      	mov	r1, r6
 800d874:	2300      	movs	r3, #0
 800d876:	220a      	movs	r2, #10
 800d878:	4628      	mov	r0, r5
 800d87a:	f000 fe7b 	bl	800e574 <__multadd>
 800d87e:	f1bb 0f00 	cmp.w	fp, #0
 800d882:	4606      	mov	r6, r0
 800d884:	f300 8093 	bgt.w	800d9ae <_dtoa_r+0x9ae>
 800d888:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	dc57      	bgt.n	800d93e <_dtoa_r+0x93e>
 800d88e:	e08e      	b.n	800d9ae <_dtoa_r+0x9ae>
 800d890:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d892:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d896:	e756      	b.n	800d746 <_dtoa_r+0x746>
 800d898:	9b02      	ldr	r3, [sp, #8]
 800d89a:	1e5c      	subs	r4, r3, #1
 800d89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d89e:	42a3      	cmp	r3, r4
 800d8a0:	bfb7      	itett	lt
 800d8a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d8a4:	1b1c      	subge	r4, r3, r4
 800d8a6:	1ae2      	sublt	r2, r4, r3
 800d8a8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d8aa:	bfbe      	ittt	lt
 800d8ac:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d8ae:	189b      	addlt	r3, r3, r2
 800d8b0:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d8b2:	9b02      	ldr	r3, [sp, #8]
 800d8b4:	bfb8      	it	lt
 800d8b6:	2400      	movlt	r4, #0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	bfbb      	ittet	lt
 800d8bc:	9b06      	ldrlt	r3, [sp, #24]
 800d8be:	9a02      	ldrlt	r2, [sp, #8]
 800d8c0:	9f06      	ldrge	r7, [sp, #24]
 800d8c2:	1a9f      	sublt	r7, r3, r2
 800d8c4:	bfac      	ite	ge
 800d8c6:	9b02      	ldrge	r3, [sp, #8]
 800d8c8:	2300      	movlt	r3, #0
 800d8ca:	e73e      	b.n	800d74a <_dtoa_r+0x74a>
 800d8cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d8ce:	9f06      	ldr	r7, [sp, #24]
 800d8d0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d8d2:	e745      	b.n	800d760 <_dtoa_r+0x760>
 800d8d4:	3fe00000 	.word	0x3fe00000
 800d8d8:	40240000 	.word	0x40240000
 800d8dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8de:	e76a      	b.n	800d7b6 <_dtoa_r+0x7b6>
 800d8e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	dc19      	bgt.n	800d91a <_dtoa_r+0x91a>
 800d8e6:	9b04      	ldr	r3, [sp, #16]
 800d8e8:	b9bb      	cbnz	r3, 800d91a <_dtoa_r+0x91a>
 800d8ea:	9b05      	ldr	r3, [sp, #20]
 800d8ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8f0:	b99b      	cbnz	r3, 800d91a <_dtoa_r+0x91a>
 800d8f2:	9b05      	ldr	r3, [sp, #20]
 800d8f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8f8:	0d1b      	lsrs	r3, r3, #20
 800d8fa:	051b      	lsls	r3, r3, #20
 800d8fc:	b183      	cbz	r3, 800d920 <_dtoa_r+0x920>
 800d8fe:	f04f 0801 	mov.w	r8, #1
 800d902:	9b06      	ldr	r3, [sp, #24]
 800d904:	3301      	adds	r3, #1
 800d906:	9306      	str	r3, [sp, #24]
 800d908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d90a:	3301      	adds	r3, #1
 800d90c:	9309      	str	r3, [sp, #36]	; 0x24
 800d90e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d910:	2b00      	cmp	r3, #0
 800d912:	f47f af6a 	bne.w	800d7ea <_dtoa_r+0x7ea>
 800d916:	2001      	movs	r0, #1
 800d918:	e76f      	b.n	800d7fa <_dtoa_r+0x7fa>
 800d91a:	f04f 0800 	mov.w	r8, #0
 800d91e:	e7f6      	b.n	800d90e <_dtoa_r+0x90e>
 800d920:	4698      	mov	r8, r3
 800d922:	e7f4      	b.n	800d90e <_dtoa_r+0x90e>
 800d924:	f43f af7d 	beq.w	800d822 <_dtoa_r+0x822>
 800d928:	4618      	mov	r0, r3
 800d92a:	301c      	adds	r0, #28
 800d92c:	e772      	b.n	800d814 <_dtoa_r+0x814>
 800d92e:	9b02      	ldr	r3, [sp, #8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	dc36      	bgt.n	800d9a2 <_dtoa_r+0x9a2>
 800d934:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d936:	2b02      	cmp	r3, #2
 800d938:	dd33      	ble.n	800d9a2 <_dtoa_r+0x9a2>
 800d93a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d93e:	f1bb 0f00 	cmp.w	fp, #0
 800d942:	d10d      	bne.n	800d960 <_dtoa_r+0x960>
 800d944:	4621      	mov	r1, r4
 800d946:	465b      	mov	r3, fp
 800d948:	2205      	movs	r2, #5
 800d94a:	4628      	mov	r0, r5
 800d94c:	f000 fe12 	bl	800e574 <__multadd>
 800d950:	4601      	mov	r1, r0
 800d952:	4604      	mov	r4, r0
 800d954:	4650      	mov	r0, sl
 800d956:	f001 f86f 	bl	800ea38 <__mcmp>
 800d95a:	2800      	cmp	r0, #0
 800d95c:	f73f adb6 	bgt.w	800d4cc <_dtoa_r+0x4cc>
 800d960:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d962:	9f08      	ldr	r7, [sp, #32]
 800d964:	ea6f 0903 	mvn.w	r9, r3
 800d968:	f04f 0800 	mov.w	r8, #0
 800d96c:	4621      	mov	r1, r4
 800d96e:	4628      	mov	r0, r5
 800d970:	f000 fdde 	bl	800e530 <_Bfree>
 800d974:	2e00      	cmp	r6, #0
 800d976:	f43f aea4 	beq.w	800d6c2 <_dtoa_r+0x6c2>
 800d97a:	f1b8 0f00 	cmp.w	r8, #0
 800d97e:	d005      	beq.n	800d98c <_dtoa_r+0x98c>
 800d980:	45b0      	cmp	r8, r6
 800d982:	d003      	beq.n	800d98c <_dtoa_r+0x98c>
 800d984:	4641      	mov	r1, r8
 800d986:	4628      	mov	r0, r5
 800d988:	f000 fdd2 	bl	800e530 <_Bfree>
 800d98c:	4631      	mov	r1, r6
 800d98e:	4628      	mov	r0, r5
 800d990:	f000 fdce 	bl	800e530 <_Bfree>
 800d994:	e695      	b.n	800d6c2 <_dtoa_r+0x6c2>
 800d996:	2400      	movs	r4, #0
 800d998:	4626      	mov	r6, r4
 800d99a:	e7e1      	b.n	800d960 <_dtoa_r+0x960>
 800d99c:	46c1      	mov	r9, r8
 800d99e:	4626      	mov	r6, r4
 800d9a0:	e594      	b.n	800d4cc <_dtoa_r+0x4cc>
 800d9a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9a4:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f000 80fc 	beq.w	800dba6 <_dtoa_r+0xba6>
 800d9ae:	2f00      	cmp	r7, #0
 800d9b0:	dd05      	ble.n	800d9be <_dtoa_r+0x9be>
 800d9b2:	4631      	mov	r1, r6
 800d9b4:	463a      	mov	r2, r7
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	f000 ffd2 	bl	800e960 <__lshift>
 800d9bc:	4606      	mov	r6, r0
 800d9be:	f1b8 0f00 	cmp.w	r8, #0
 800d9c2:	d05c      	beq.n	800da7e <_dtoa_r+0xa7e>
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	6871      	ldr	r1, [r6, #4]
 800d9c8:	f000 fd72 	bl	800e4b0 <_Balloc>
 800d9cc:	4607      	mov	r7, r0
 800d9ce:	b928      	cbnz	r0, 800d9dc <_dtoa_r+0x9dc>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d9d6:	4b7e      	ldr	r3, [pc, #504]	; (800dbd0 <_dtoa_r+0xbd0>)
 800d9d8:	f7ff bb26 	b.w	800d028 <_dtoa_r+0x28>
 800d9dc:	6932      	ldr	r2, [r6, #16]
 800d9de:	f106 010c 	add.w	r1, r6, #12
 800d9e2:	3202      	adds	r2, #2
 800d9e4:	0092      	lsls	r2, r2, #2
 800d9e6:	300c      	adds	r0, #12
 800d9e8:	f7fd fc0e 	bl	800b208 <memcpy>
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	4639      	mov	r1, r7
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	f000 ffb5 	bl	800e960 <__lshift>
 800d9f6:	46b0      	mov	r8, r6
 800d9f8:	4606      	mov	r6, r0
 800d9fa:	9b08      	ldr	r3, [sp, #32]
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	9302      	str	r3, [sp, #8]
 800da00:	9b08      	ldr	r3, [sp, #32]
 800da02:	445b      	add	r3, fp
 800da04:	930a      	str	r3, [sp, #40]	; 0x28
 800da06:	9b04      	ldr	r3, [sp, #16]
 800da08:	f003 0301 	and.w	r3, r3, #1
 800da0c:	9309      	str	r3, [sp, #36]	; 0x24
 800da0e:	9b02      	ldr	r3, [sp, #8]
 800da10:	4621      	mov	r1, r4
 800da12:	4650      	mov	r0, sl
 800da14:	f103 3bff 	add.w	fp, r3, #4294967295
 800da18:	f7ff fa62 	bl	800cee0 <quorem>
 800da1c:	4603      	mov	r3, r0
 800da1e:	4641      	mov	r1, r8
 800da20:	3330      	adds	r3, #48	; 0x30
 800da22:	9004      	str	r0, [sp, #16]
 800da24:	4650      	mov	r0, sl
 800da26:	930b      	str	r3, [sp, #44]	; 0x2c
 800da28:	f001 f806 	bl	800ea38 <__mcmp>
 800da2c:	4632      	mov	r2, r6
 800da2e:	9006      	str	r0, [sp, #24]
 800da30:	4621      	mov	r1, r4
 800da32:	4628      	mov	r0, r5
 800da34:	f001 f81c 	bl	800ea70 <__mdiff>
 800da38:	68c2      	ldr	r2, [r0, #12]
 800da3a:	4607      	mov	r7, r0
 800da3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da3e:	bb02      	cbnz	r2, 800da82 <_dtoa_r+0xa82>
 800da40:	4601      	mov	r1, r0
 800da42:	4650      	mov	r0, sl
 800da44:	f000 fff8 	bl	800ea38 <__mcmp>
 800da48:	4602      	mov	r2, r0
 800da4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da4c:	4639      	mov	r1, r7
 800da4e:	4628      	mov	r0, r5
 800da50:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800da54:	f000 fd6c 	bl	800e530 <_Bfree>
 800da58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800da5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da5c:	9f02      	ldr	r7, [sp, #8]
 800da5e:	ea43 0102 	orr.w	r1, r3, r2
 800da62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da64:	430b      	orrs	r3, r1
 800da66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da68:	d10d      	bne.n	800da86 <_dtoa_r+0xa86>
 800da6a:	2b39      	cmp	r3, #57	; 0x39
 800da6c:	d027      	beq.n	800dabe <_dtoa_r+0xabe>
 800da6e:	9a06      	ldr	r2, [sp, #24]
 800da70:	2a00      	cmp	r2, #0
 800da72:	dd01      	ble.n	800da78 <_dtoa_r+0xa78>
 800da74:	9b04      	ldr	r3, [sp, #16]
 800da76:	3331      	adds	r3, #49	; 0x31
 800da78:	f88b 3000 	strb.w	r3, [fp]
 800da7c:	e776      	b.n	800d96c <_dtoa_r+0x96c>
 800da7e:	4630      	mov	r0, r6
 800da80:	e7b9      	b.n	800d9f6 <_dtoa_r+0x9f6>
 800da82:	2201      	movs	r2, #1
 800da84:	e7e2      	b.n	800da4c <_dtoa_r+0xa4c>
 800da86:	9906      	ldr	r1, [sp, #24]
 800da88:	2900      	cmp	r1, #0
 800da8a:	db04      	blt.n	800da96 <_dtoa_r+0xa96>
 800da8c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800da8e:	4301      	orrs	r1, r0
 800da90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da92:	4301      	orrs	r1, r0
 800da94:	d120      	bne.n	800dad8 <_dtoa_r+0xad8>
 800da96:	2a00      	cmp	r2, #0
 800da98:	ddee      	ble.n	800da78 <_dtoa_r+0xa78>
 800da9a:	4651      	mov	r1, sl
 800da9c:	2201      	movs	r2, #1
 800da9e:	4628      	mov	r0, r5
 800daa0:	9302      	str	r3, [sp, #8]
 800daa2:	f000 ff5d 	bl	800e960 <__lshift>
 800daa6:	4621      	mov	r1, r4
 800daa8:	4682      	mov	sl, r0
 800daaa:	f000 ffc5 	bl	800ea38 <__mcmp>
 800daae:	2800      	cmp	r0, #0
 800dab0:	9b02      	ldr	r3, [sp, #8]
 800dab2:	dc02      	bgt.n	800daba <_dtoa_r+0xaba>
 800dab4:	d1e0      	bne.n	800da78 <_dtoa_r+0xa78>
 800dab6:	07da      	lsls	r2, r3, #31
 800dab8:	d5de      	bpl.n	800da78 <_dtoa_r+0xa78>
 800daba:	2b39      	cmp	r3, #57	; 0x39
 800dabc:	d1da      	bne.n	800da74 <_dtoa_r+0xa74>
 800dabe:	2339      	movs	r3, #57	; 0x39
 800dac0:	f88b 3000 	strb.w	r3, [fp]
 800dac4:	463b      	mov	r3, r7
 800dac6:	461f      	mov	r7, r3
 800dac8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800dacc:	3b01      	subs	r3, #1
 800dace:	2a39      	cmp	r2, #57	; 0x39
 800dad0:	d050      	beq.n	800db74 <_dtoa_r+0xb74>
 800dad2:	3201      	adds	r2, #1
 800dad4:	701a      	strb	r2, [r3, #0]
 800dad6:	e749      	b.n	800d96c <_dtoa_r+0x96c>
 800dad8:	2a00      	cmp	r2, #0
 800dada:	dd03      	ble.n	800dae4 <_dtoa_r+0xae4>
 800dadc:	2b39      	cmp	r3, #57	; 0x39
 800dade:	d0ee      	beq.n	800dabe <_dtoa_r+0xabe>
 800dae0:	3301      	adds	r3, #1
 800dae2:	e7c9      	b.n	800da78 <_dtoa_r+0xa78>
 800dae4:	9a02      	ldr	r2, [sp, #8]
 800dae6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dae8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800daec:	428a      	cmp	r2, r1
 800daee:	d02a      	beq.n	800db46 <_dtoa_r+0xb46>
 800daf0:	4651      	mov	r1, sl
 800daf2:	2300      	movs	r3, #0
 800daf4:	220a      	movs	r2, #10
 800daf6:	4628      	mov	r0, r5
 800daf8:	f000 fd3c 	bl	800e574 <__multadd>
 800dafc:	45b0      	cmp	r8, r6
 800dafe:	4682      	mov	sl, r0
 800db00:	f04f 0300 	mov.w	r3, #0
 800db04:	f04f 020a 	mov.w	r2, #10
 800db08:	4641      	mov	r1, r8
 800db0a:	4628      	mov	r0, r5
 800db0c:	d107      	bne.n	800db1e <_dtoa_r+0xb1e>
 800db0e:	f000 fd31 	bl	800e574 <__multadd>
 800db12:	4680      	mov	r8, r0
 800db14:	4606      	mov	r6, r0
 800db16:	9b02      	ldr	r3, [sp, #8]
 800db18:	3301      	adds	r3, #1
 800db1a:	9302      	str	r3, [sp, #8]
 800db1c:	e777      	b.n	800da0e <_dtoa_r+0xa0e>
 800db1e:	f000 fd29 	bl	800e574 <__multadd>
 800db22:	4631      	mov	r1, r6
 800db24:	4680      	mov	r8, r0
 800db26:	2300      	movs	r3, #0
 800db28:	220a      	movs	r2, #10
 800db2a:	4628      	mov	r0, r5
 800db2c:	f000 fd22 	bl	800e574 <__multadd>
 800db30:	4606      	mov	r6, r0
 800db32:	e7f0      	b.n	800db16 <_dtoa_r+0xb16>
 800db34:	f1bb 0f00 	cmp.w	fp, #0
 800db38:	bfcc      	ite	gt
 800db3a:	465f      	movgt	r7, fp
 800db3c:	2701      	movle	r7, #1
 800db3e:	f04f 0800 	mov.w	r8, #0
 800db42:	9a08      	ldr	r2, [sp, #32]
 800db44:	4417      	add	r7, r2
 800db46:	4651      	mov	r1, sl
 800db48:	2201      	movs	r2, #1
 800db4a:	4628      	mov	r0, r5
 800db4c:	9302      	str	r3, [sp, #8]
 800db4e:	f000 ff07 	bl	800e960 <__lshift>
 800db52:	4621      	mov	r1, r4
 800db54:	4682      	mov	sl, r0
 800db56:	f000 ff6f 	bl	800ea38 <__mcmp>
 800db5a:	2800      	cmp	r0, #0
 800db5c:	dcb2      	bgt.n	800dac4 <_dtoa_r+0xac4>
 800db5e:	d102      	bne.n	800db66 <_dtoa_r+0xb66>
 800db60:	9b02      	ldr	r3, [sp, #8]
 800db62:	07db      	lsls	r3, r3, #31
 800db64:	d4ae      	bmi.n	800dac4 <_dtoa_r+0xac4>
 800db66:	463b      	mov	r3, r7
 800db68:	461f      	mov	r7, r3
 800db6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db6e:	2a30      	cmp	r2, #48	; 0x30
 800db70:	d0fa      	beq.n	800db68 <_dtoa_r+0xb68>
 800db72:	e6fb      	b.n	800d96c <_dtoa_r+0x96c>
 800db74:	9a08      	ldr	r2, [sp, #32]
 800db76:	429a      	cmp	r2, r3
 800db78:	d1a5      	bne.n	800dac6 <_dtoa_r+0xac6>
 800db7a:	2331      	movs	r3, #49	; 0x31
 800db7c:	f109 0901 	add.w	r9, r9, #1
 800db80:	7013      	strb	r3, [r2, #0]
 800db82:	e6f3      	b.n	800d96c <_dtoa_r+0x96c>
 800db84:	4b13      	ldr	r3, [pc, #76]	; (800dbd4 <_dtoa_r+0xbd4>)
 800db86:	f7ff baa7 	b.w	800d0d8 <_dtoa_r+0xd8>
 800db8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f47f aa80 	bne.w	800d092 <_dtoa_r+0x92>
 800db92:	4b11      	ldr	r3, [pc, #68]	; (800dbd8 <_dtoa_r+0xbd8>)
 800db94:	f7ff baa0 	b.w	800d0d8 <_dtoa_r+0xd8>
 800db98:	f1bb 0f00 	cmp.w	fp, #0
 800db9c:	dc03      	bgt.n	800dba6 <_dtoa_r+0xba6>
 800db9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dba0:	2b02      	cmp	r3, #2
 800dba2:	f73f aecc 	bgt.w	800d93e <_dtoa_r+0x93e>
 800dba6:	9f08      	ldr	r7, [sp, #32]
 800dba8:	4621      	mov	r1, r4
 800dbaa:	4650      	mov	r0, sl
 800dbac:	f7ff f998 	bl	800cee0 <quorem>
 800dbb0:	9a08      	ldr	r2, [sp, #32]
 800dbb2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dbb6:	f807 3b01 	strb.w	r3, [r7], #1
 800dbba:	1aba      	subs	r2, r7, r2
 800dbbc:	4593      	cmp	fp, r2
 800dbbe:	ddb9      	ble.n	800db34 <_dtoa_r+0xb34>
 800dbc0:	4651      	mov	r1, sl
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	220a      	movs	r2, #10
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	f000 fcd4 	bl	800e574 <__multadd>
 800dbcc:	4682      	mov	sl, r0
 800dbce:	e7eb      	b.n	800dba8 <_dtoa_r+0xba8>
 800dbd0:	0800faec 	.word	0x0800faec
 800dbd4:	0800f8e8 	.word	0x0800f8e8
 800dbd8:	0800fa69 	.word	0x0800fa69

0800dbdc <__sflush_r>:
 800dbdc:	898a      	ldrh	r2, [r1, #12]
 800dbde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe2:	4605      	mov	r5, r0
 800dbe4:	0710      	lsls	r0, r2, #28
 800dbe6:	460c      	mov	r4, r1
 800dbe8:	d458      	bmi.n	800dc9c <__sflush_r+0xc0>
 800dbea:	684b      	ldr	r3, [r1, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	dc05      	bgt.n	800dbfc <__sflush_r+0x20>
 800dbf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	dc02      	bgt.n	800dbfc <__sflush_r+0x20>
 800dbf6:	2000      	movs	r0, #0
 800dbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbfe:	2e00      	cmp	r6, #0
 800dc00:	d0f9      	beq.n	800dbf6 <__sflush_r+0x1a>
 800dc02:	2300      	movs	r3, #0
 800dc04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc08:	682f      	ldr	r7, [r5, #0]
 800dc0a:	602b      	str	r3, [r5, #0]
 800dc0c:	d032      	beq.n	800dc74 <__sflush_r+0x98>
 800dc0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc10:	89a3      	ldrh	r3, [r4, #12]
 800dc12:	075a      	lsls	r2, r3, #29
 800dc14:	d505      	bpl.n	800dc22 <__sflush_r+0x46>
 800dc16:	6863      	ldr	r3, [r4, #4]
 800dc18:	1ac0      	subs	r0, r0, r3
 800dc1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc1c:	b10b      	cbz	r3, 800dc22 <__sflush_r+0x46>
 800dc1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc20:	1ac0      	subs	r0, r0, r3
 800dc22:	2300      	movs	r3, #0
 800dc24:	4602      	mov	r2, r0
 800dc26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc28:	4628      	mov	r0, r5
 800dc2a:	6a21      	ldr	r1, [r4, #32]
 800dc2c:	47b0      	blx	r6
 800dc2e:	1c43      	adds	r3, r0, #1
 800dc30:	89a3      	ldrh	r3, [r4, #12]
 800dc32:	d106      	bne.n	800dc42 <__sflush_r+0x66>
 800dc34:	6829      	ldr	r1, [r5, #0]
 800dc36:	291d      	cmp	r1, #29
 800dc38:	d82c      	bhi.n	800dc94 <__sflush_r+0xb8>
 800dc3a:	4a2a      	ldr	r2, [pc, #168]	; (800dce4 <__sflush_r+0x108>)
 800dc3c:	40ca      	lsrs	r2, r1
 800dc3e:	07d6      	lsls	r6, r2, #31
 800dc40:	d528      	bpl.n	800dc94 <__sflush_r+0xb8>
 800dc42:	2200      	movs	r2, #0
 800dc44:	6062      	str	r2, [r4, #4]
 800dc46:	6922      	ldr	r2, [r4, #16]
 800dc48:	04d9      	lsls	r1, r3, #19
 800dc4a:	6022      	str	r2, [r4, #0]
 800dc4c:	d504      	bpl.n	800dc58 <__sflush_r+0x7c>
 800dc4e:	1c42      	adds	r2, r0, #1
 800dc50:	d101      	bne.n	800dc56 <__sflush_r+0x7a>
 800dc52:	682b      	ldr	r3, [r5, #0]
 800dc54:	b903      	cbnz	r3, 800dc58 <__sflush_r+0x7c>
 800dc56:	6560      	str	r0, [r4, #84]	; 0x54
 800dc58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc5a:	602f      	str	r7, [r5, #0]
 800dc5c:	2900      	cmp	r1, #0
 800dc5e:	d0ca      	beq.n	800dbf6 <__sflush_r+0x1a>
 800dc60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc64:	4299      	cmp	r1, r3
 800dc66:	d002      	beq.n	800dc6e <__sflush_r+0x92>
 800dc68:	4628      	mov	r0, r5
 800dc6a:	f7fd fae3 	bl	800b234 <_free_r>
 800dc6e:	2000      	movs	r0, #0
 800dc70:	6360      	str	r0, [r4, #52]	; 0x34
 800dc72:	e7c1      	b.n	800dbf8 <__sflush_r+0x1c>
 800dc74:	6a21      	ldr	r1, [r4, #32]
 800dc76:	2301      	movs	r3, #1
 800dc78:	4628      	mov	r0, r5
 800dc7a:	47b0      	blx	r6
 800dc7c:	1c41      	adds	r1, r0, #1
 800dc7e:	d1c7      	bne.n	800dc10 <__sflush_r+0x34>
 800dc80:	682b      	ldr	r3, [r5, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d0c4      	beq.n	800dc10 <__sflush_r+0x34>
 800dc86:	2b1d      	cmp	r3, #29
 800dc88:	d001      	beq.n	800dc8e <__sflush_r+0xb2>
 800dc8a:	2b16      	cmp	r3, #22
 800dc8c:	d101      	bne.n	800dc92 <__sflush_r+0xb6>
 800dc8e:	602f      	str	r7, [r5, #0]
 800dc90:	e7b1      	b.n	800dbf6 <__sflush_r+0x1a>
 800dc92:	89a3      	ldrh	r3, [r4, #12]
 800dc94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc98:	81a3      	strh	r3, [r4, #12]
 800dc9a:	e7ad      	b.n	800dbf8 <__sflush_r+0x1c>
 800dc9c:	690f      	ldr	r7, [r1, #16]
 800dc9e:	2f00      	cmp	r7, #0
 800dca0:	d0a9      	beq.n	800dbf6 <__sflush_r+0x1a>
 800dca2:	0793      	lsls	r3, r2, #30
 800dca4:	bf18      	it	ne
 800dca6:	2300      	movne	r3, #0
 800dca8:	680e      	ldr	r6, [r1, #0]
 800dcaa:	bf08      	it	eq
 800dcac:	694b      	ldreq	r3, [r1, #20]
 800dcae:	eba6 0807 	sub.w	r8, r6, r7
 800dcb2:	600f      	str	r7, [r1, #0]
 800dcb4:	608b      	str	r3, [r1, #8]
 800dcb6:	f1b8 0f00 	cmp.w	r8, #0
 800dcba:	dd9c      	ble.n	800dbf6 <__sflush_r+0x1a>
 800dcbc:	4643      	mov	r3, r8
 800dcbe:	463a      	mov	r2, r7
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	6a21      	ldr	r1, [r4, #32]
 800dcc4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dcc6:	47b0      	blx	r6
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	dc06      	bgt.n	800dcda <__sflush_r+0xfe>
 800dccc:	89a3      	ldrh	r3, [r4, #12]
 800dcce:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcd6:	81a3      	strh	r3, [r4, #12]
 800dcd8:	e78e      	b.n	800dbf8 <__sflush_r+0x1c>
 800dcda:	4407      	add	r7, r0
 800dcdc:	eba8 0800 	sub.w	r8, r8, r0
 800dce0:	e7e9      	b.n	800dcb6 <__sflush_r+0xda>
 800dce2:	bf00      	nop
 800dce4:	20400001 	.word	0x20400001

0800dce8 <_fflush_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	690b      	ldr	r3, [r1, #16]
 800dcec:	4605      	mov	r5, r0
 800dcee:	460c      	mov	r4, r1
 800dcf0:	b913      	cbnz	r3, 800dcf8 <_fflush_r+0x10>
 800dcf2:	2500      	movs	r5, #0
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	bd38      	pop	{r3, r4, r5, pc}
 800dcf8:	b118      	cbz	r0, 800dd02 <_fflush_r+0x1a>
 800dcfa:	6983      	ldr	r3, [r0, #24]
 800dcfc:	b90b      	cbnz	r3, 800dd02 <_fflush_r+0x1a>
 800dcfe:	f7fd f9b5 	bl	800b06c <__sinit>
 800dd02:	4b14      	ldr	r3, [pc, #80]	; (800dd54 <_fflush_r+0x6c>)
 800dd04:	429c      	cmp	r4, r3
 800dd06:	d11b      	bne.n	800dd40 <_fflush_r+0x58>
 800dd08:	686c      	ldr	r4, [r5, #4]
 800dd0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d0ef      	beq.n	800dcf2 <_fflush_r+0xa>
 800dd12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd14:	07d0      	lsls	r0, r2, #31
 800dd16:	d404      	bmi.n	800dd22 <_fflush_r+0x3a>
 800dd18:	0599      	lsls	r1, r3, #22
 800dd1a:	d402      	bmi.n	800dd22 <_fflush_r+0x3a>
 800dd1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd1e:	f7fd fa68 	bl	800b1f2 <__retarget_lock_acquire_recursive>
 800dd22:	4628      	mov	r0, r5
 800dd24:	4621      	mov	r1, r4
 800dd26:	f7ff ff59 	bl	800dbdc <__sflush_r>
 800dd2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd2c:	4605      	mov	r5, r0
 800dd2e:	07da      	lsls	r2, r3, #31
 800dd30:	d4e0      	bmi.n	800dcf4 <_fflush_r+0xc>
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	059b      	lsls	r3, r3, #22
 800dd36:	d4dd      	bmi.n	800dcf4 <_fflush_r+0xc>
 800dd38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd3a:	f7fd fa5b 	bl	800b1f4 <__retarget_lock_release_recursive>
 800dd3e:	e7d9      	b.n	800dcf4 <_fflush_r+0xc>
 800dd40:	4b05      	ldr	r3, [pc, #20]	; (800dd58 <_fflush_r+0x70>)
 800dd42:	429c      	cmp	r4, r3
 800dd44:	d101      	bne.n	800dd4a <_fflush_r+0x62>
 800dd46:	68ac      	ldr	r4, [r5, #8]
 800dd48:	e7df      	b.n	800dd0a <_fflush_r+0x22>
 800dd4a:	4b04      	ldr	r3, [pc, #16]	; (800dd5c <_fflush_r+0x74>)
 800dd4c:	429c      	cmp	r4, r3
 800dd4e:	bf08      	it	eq
 800dd50:	68ec      	ldreq	r4, [r5, #12]
 800dd52:	e7da      	b.n	800dd0a <_fflush_r+0x22>
 800dd54:	0800f894 	.word	0x0800f894
 800dd58:	0800f8b4 	.word	0x0800f8b4
 800dd5c:	0800f874 	.word	0x0800f874

0800dd60 <rshift>:
 800dd60:	6903      	ldr	r3, [r0, #16]
 800dd62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd6a:	f100 0414 	add.w	r4, r0, #20
 800dd6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd72:	dd46      	ble.n	800de02 <rshift+0xa2>
 800dd74:	f011 011f 	ands.w	r1, r1, #31
 800dd78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd80:	d10c      	bne.n	800dd9c <rshift+0x3c>
 800dd82:	4629      	mov	r1, r5
 800dd84:	f100 0710 	add.w	r7, r0, #16
 800dd88:	42b1      	cmp	r1, r6
 800dd8a:	d335      	bcc.n	800ddf8 <rshift+0x98>
 800dd8c:	1a9b      	subs	r3, r3, r2
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	1eea      	subs	r2, r5, #3
 800dd92:	4296      	cmp	r6, r2
 800dd94:	bf38      	it	cc
 800dd96:	2300      	movcc	r3, #0
 800dd98:	4423      	add	r3, r4
 800dd9a:	e015      	b.n	800ddc8 <rshift+0x68>
 800dd9c:	46a1      	mov	r9, r4
 800dd9e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dda2:	f1c1 0820 	rsb	r8, r1, #32
 800dda6:	40cf      	lsrs	r7, r1
 800dda8:	f105 0e04 	add.w	lr, r5, #4
 800ddac:	4576      	cmp	r6, lr
 800ddae:	46f4      	mov	ip, lr
 800ddb0:	d816      	bhi.n	800dde0 <rshift+0x80>
 800ddb2:	1a9b      	subs	r3, r3, r2
 800ddb4:	009a      	lsls	r2, r3, #2
 800ddb6:	3a04      	subs	r2, #4
 800ddb8:	3501      	adds	r5, #1
 800ddba:	42ae      	cmp	r6, r5
 800ddbc:	bf38      	it	cc
 800ddbe:	2200      	movcc	r2, #0
 800ddc0:	18a3      	adds	r3, r4, r2
 800ddc2:	50a7      	str	r7, [r4, r2]
 800ddc4:	b107      	cbz	r7, 800ddc8 <rshift+0x68>
 800ddc6:	3304      	adds	r3, #4
 800ddc8:	42a3      	cmp	r3, r4
 800ddca:	eba3 0204 	sub.w	r2, r3, r4
 800ddce:	bf08      	it	eq
 800ddd0:	2300      	moveq	r3, #0
 800ddd2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ddd6:	6102      	str	r2, [r0, #16]
 800ddd8:	bf08      	it	eq
 800ddda:	6143      	streq	r3, [r0, #20]
 800dddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dde0:	f8dc c000 	ldr.w	ip, [ip]
 800dde4:	fa0c fc08 	lsl.w	ip, ip, r8
 800dde8:	ea4c 0707 	orr.w	r7, ip, r7
 800ddec:	f849 7b04 	str.w	r7, [r9], #4
 800ddf0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddf4:	40cf      	lsrs	r7, r1
 800ddf6:	e7d9      	b.n	800ddac <rshift+0x4c>
 800ddf8:	f851 cb04 	ldr.w	ip, [r1], #4
 800ddfc:	f847 cf04 	str.w	ip, [r7, #4]!
 800de00:	e7c2      	b.n	800dd88 <rshift+0x28>
 800de02:	4623      	mov	r3, r4
 800de04:	e7e0      	b.n	800ddc8 <rshift+0x68>

0800de06 <__hexdig_fun>:
 800de06:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800de0a:	2b09      	cmp	r3, #9
 800de0c:	d802      	bhi.n	800de14 <__hexdig_fun+0xe>
 800de0e:	3820      	subs	r0, #32
 800de10:	b2c0      	uxtb	r0, r0
 800de12:	4770      	bx	lr
 800de14:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800de18:	2b05      	cmp	r3, #5
 800de1a:	d801      	bhi.n	800de20 <__hexdig_fun+0x1a>
 800de1c:	3847      	subs	r0, #71	; 0x47
 800de1e:	e7f7      	b.n	800de10 <__hexdig_fun+0xa>
 800de20:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800de24:	2b05      	cmp	r3, #5
 800de26:	d801      	bhi.n	800de2c <__hexdig_fun+0x26>
 800de28:	3827      	subs	r0, #39	; 0x27
 800de2a:	e7f1      	b.n	800de10 <__hexdig_fun+0xa>
 800de2c:	2000      	movs	r0, #0
 800de2e:	4770      	bx	lr

0800de30 <__gethex>:
 800de30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de34:	b08b      	sub	sp, #44	; 0x2c
 800de36:	9306      	str	r3, [sp, #24]
 800de38:	4bb9      	ldr	r3, [pc, #740]	; (800e120 <__gethex+0x2f0>)
 800de3a:	9002      	str	r0, [sp, #8]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	468b      	mov	fp, r1
 800de40:	4618      	mov	r0, r3
 800de42:	4690      	mov	r8, r2
 800de44:	9303      	str	r3, [sp, #12]
 800de46:	f7f2 f9c3 	bl	80001d0 <strlen>
 800de4a:	4682      	mov	sl, r0
 800de4c:	9b03      	ldr	r3, [sp, #12]
 800de4e:	f8db 2000 	ldr.w	r2, [fp]
 800de52:	4403      	add	r3, r0
 800de54:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800de58:	9307      	str	r3, [sp, #28]
 800de5a:	1c93      	adds	r3, r2, #2
 800de5c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800de60:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de64:	32fe      	adds	r2, #254	; 0xfe
 800de66:	18d1      	adds	r1, r2, r3
 800de68:	461f      	mov	r7, r3
 800de6a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800de6e:	9101      	str	r1, [sp, #4]
 800de70:	2830      	cmp	r0, #48	; 0x30
 800de72:	d0f8      	beq.n	800de66 <__gethex+0x36>
 800de74:	f7ff ffc7 	bl	800de06 <__hexdig_fun>
 800de78:	4604      	mov	r4, r0
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d13a      	bne.n	800def4 <__gethex+0xc4>
 800de7e:	4652      	mov	r2, sl
 800de80:	4638      	mov	r0, r7
 800de82:	9903      	ldr	r1, [sp, #12]
 800de84:	f001 f94e 	bl	800f124 <strncmp>
 800de88:	4605      	mov	r5, r0
 800de8a:	2800      	cmp	r0, #0
 800de8c:	d166      	bne.n	800df5c <__gethex+0x12c>
 800de8e:	f817 000a 	ldrb.w	r0, [r7, sl]
 800de92:	eb07 060a 	add.w	r6, r7, sl
 800de96:	f7ff ffb6 	bl	800de06 <__hexdig_fun>
 800de9a:	2800      	cmp	r0, #0
 800de9c:	d060      	beq.n	800df60 <__gethex+0x130>
 800de9e:	4633      	mov	r3, r6
 800dea0:	7818      	ldrb	r0, [r3, #0]
 800dea2:	461f      	mov	r7, r3
 800dea4:	2830      	cmp	r0, #48	; 0x30
 800dea6:	f103 0301 	add.w	r3, r3, #1
 800deaa:	d0f9      	beq.n	800dea0 <__gethex+0x70>
 800deac:	f7ff ffab 	bl	800de06 <__hexdig_fun>
 800deb0:	2301      	movs	r3, #1
 800deb2:	fab0 f480 	clz	r4, r0
 800deb6:	4635      	mov	r5, r6
 800deb8:	0964      	lsrs	r4, r4, #5
 800deba:	9301      	str	r3, [sp, #4]
 800debc:	463a      	mov	r2, r7
 800debe:	4616      	mov	r6, r2
 800dec0:	7830      	ldrb	r0, [r6, #0]
 800dec2:	3201      	adds	r2, #1
 800dec4:	f7ff ff9f 	bl	800de06 <__hexdig_fun>
 800dec8:	2800      	cmp	r0, #0
 800deca:	d1f8      	bne.n	800debe <__gethex+0x8e>
 800decc:	4652      	mov	r2, sl
 800dece:	4630      	mov	r0, r6
 800ded0:	9903      	ldr	r1, [sp, #12]
 800ded2:	f001 f927 	bl	800f124 <strncmp>
 800ded6:	b980      	cbnz	r0, 800defa <__gethex+0xca>
 800ded8:	b94d      	cbnz	r5, 800deee <__gethex+0xbe>
 800deda:	eb06 050a 	add.w	r5, r6, sl
 800dede:	462a      	mov	r2, r5
 800dee0:	4616      	mov	r6, r2
 800dee2:	7830      	ldrb	r0, [r6, #0]
 800dee4:	3201      	adds	r2, #1
 800dee6:	f7ff ff8e 	bl	800de06 <__hexdig_fun>
 800deea:	2800      	cmp	r0, #0
 800deec:	d1f8      	bne.n	800dee0 <__gethex+0xb0>
 800deee:	1bad      	subs	r5, r5, r6
 800def0:	00ad      	lsls	r5, r5, #2
 800def2:	e004      	b.n	800defe <__gethex+0xce>
 800def4:	2400      	movs	r4, #0
 800def6:	4625      	mov	r5, r4
 800def8:	e7e0      	b.n	800debc <__gethex+0x8c>
 800defa:	2d00      	cmp	r5, #0
 800defc:	d1f7      	bne.n	800deee <__gethex+0xbe>
 800defe:	7833      	ldrb	r3, [r6, #0]
 800df00:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800df04:	2b50      	cmp	r3, #80	; 0x50
 800df06:	d139      	bne.n	800df7c <__gethex+0x14c>
 800df08:	7873      	ldrb	r3, [r6, #1]
 800df0a:	2b2b      	cmp	r3, #43	; 0x2b
 800df0c:	d02a      	beq.n	800df64 <__gethex+0x134>
 800df0e:	2b2d      	cmp	r3, #45	; 0x2d
 800df10:	d02c      	beq.n	800df6c <__gethex+0x13c>
 800df12:	f04f 0900 	mov.w	r9, #0
 800df16:	1c71      	adds	r1, r6, #1
 800df18:	7808      	ldrb	r0, [r1, #0]
 800df1a:	f7ff ff74 	bl	800de06 <__hexdig_fun>
 800df1e:	1e43      	subs	r3, r0, #1
 800df20:	b2db      	uxtb	r3, r3
 800df22:	2b18      	cmp	r3, #24
 800df24:	d82a      	bhi.n	800df7c <__gethex+0x14c>
 800df26:	f1a0 0210 	sub.w	r2, r0, #16
 800df2a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df2e:	f7ff ff6a 	bl	800de06 <__hexdig_fun>
 800df32:	1e43      	subs	r3, r0, #1
 800df34:	b2db      	uxtb	r3, r3
 800df36:	2b18      	cmp	r3, #24
 800df38:	d91b      	bls.n	800df72 <__gethex+0x142>
 800df3a:	f1b9 0f00 	cmp.w	r9, #0
 800df3e:	d000      	beq.n	800df42 <__gethex+0x112>
 800df40:	4252      	negs	r2, r2
 800df42:	4415      	add	r5, r2
 800df44:	f8cb 1000 	str.w	r1, [fp]
 800df48:	b1d4      	cbz	r4, 800df80 <__gethex+0x150>
 800df4a:	9b01      	ldr	r3, [sp, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	bf14      	ite	ne
 800df50:	2700      	movne	r7, #0
 800df52:	2706      	moveq	r7, #6
 800df54:	4638      	mov	r0, r7
 800df56:	b00b      	add	sp, #44	; 0x2c
 800df58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5c:	463e      	mov	r6, r7
 800df5e:	4625      	mov	r5, r4
 800df60:	2401      	movs	r4, #1
 800df62:	e7cc      	b.n	800defe <__gethex+0xce>
 800df64:	f04f 0900 	mov.w	r9, #0
 800df68:	1cb1      	adds	r1, r6, #2
 800df6a:	e7d5      	b.n	800df18 <__gethex+0xe8>
 800df6c:	f04f 0901 	mov.w	r9, #1
 800df70:	e7fa      	b.n	800df68 <__gethex+0x138>
 800df72:	230a      	movs	r3, #10
 800df74:	fb03 0202 	mla	r2, r3, r2, r0
 800df78:	3a10      	subs	r2, #16
 800df7a:	e7d6      	b.n	800df2a <__gethex+0xfa>
 800df7c:	4631      	mov	r1, r6
 800df7e:	e7e1      	b.n	800df44 <__gethex+0x114>
 800df80:	4621      	mov	r1, r4
 800df82:	1bf3      	subs	r3, r6, r7
 800df84:	3b01      	subs	r3, #1
 800df86:	2b07      	cmp	r3, #7
 800df88:	dc0a      	bgt.n	800dfa0 <__gethex+0x170>
 800df8a:	9802      	ldr	r0, [sp, #8]
 800df8c:	f000 fa90 	bl	800e4b0 <_Balloc>
 800df90:	4604      	mov	r4, r0
 800df92:	b940      	cbnz	r0, 800dfa6 <__gethex+0x176>
 800df94:	4602      	mov	r2, r0
 800df96:	21de      	movs	r1, #222	; 0xde
 800df98:	4b62      	ldr	r3, [pc, #392]	; (800e124 <__gethex+0x2f4>)
 800df9a:	4863      	ldr	r0, [pc, #396]	; (800e128 <__gethex+0x2f8>)
 800df9c:	f001 f8e2 	bl	800f164 <__assert_func>
 800dfa0:	3101      	adds	r1, #1
 800dfa2:	105b      	asrs	r3, r3, #1
 800dfa4:	e7ef      	b.n	800df86 <__gethex+0x156>
 800dfa6:	f04f 0b00 	mov.w	fp, #0
 800dfaa:	f100 0914 	add.w	r9, r0, #20
 800dfae:	f1ca 0301 	rsb	r3, sl, #1
 800dfb2:	f8cd 9010 	str.w	r9, [sp, #16]
 800dfb6:	f8cd b004 	str.w	fp, [sp, #4]
 800dfba:	9308      	str	r3, [sp, #32]
 800dfbc:	42b7      	cmp	r7, r6
 800dfbe:	d33f      	bcc.n	800e040 <__gethex+0x210>
 800dfc0:	9f04      	ldr	r7, [sp, #16]
 800dfc2:	9b01      	ldr	r3, [sp, #4]
 800dfc4:	f847 3b04 	str.w	r3, [r7], #4
 800dfc8:	eba7 0709 	sub.w	r7, r7, r9
 800dfcc:	10bf      	asrs	r7, r7, #2
 800dfce:	6127      	str	r7, [r4, #16]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f000 fb63 	bl	800e69c <__hi0bits>
 800dfd6:	017f      	lsls	r7, r7, #5
 800dfd8:	f8d8 6000 	ldr.w	r6, [r8]
 800dfdc:	1a3f      	subs	r7, r7, r0
 800dfde:	42b7      	cmp	r7, r6
 800dfe0:	dd62      	ble.n	800e0a8 <__gethex+0x278>
 800dfe2:	1bbf      	subs	r7, r7, r6
 800dfe4:	4639      	mov	r1, r7
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	f000 fef9 	bl	800edde <__any_on>
 800dfec:	4682      	mov	sl, r0
 800dfee:	b1a8      	cbz	r0, 800e01c <__gethex+0x1ec>
 800dff0:	f04f 0a01 	mov.w	sl, #1
 800dff4:	1e7b      	subs	r3, r7, #1
 800dff6:	1159      	asrs	r1, r3, #5
 800dff8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dffc:	f003 021f 	and.w	r2, r3, #31
 800e000:	fa0a f202 	lsl.w	r2, sl, r2
 800e004:	420a      	tst	r2, r1
 800e006:	d009      	beq.n	800e01c <__gethex+0x1ec>
 800e008:	4553      	cmp	r3, sl
 800e00a:	dd05      	ble.n	800e018 <__gethex+0x1e8>
 800e00c:	4620      	mov	r0, r4
 800e00e:	1eb9      	subs	r1, r7, #2
 800e010:	f000 fee5 	bl	800edde <__any_on>
 800e014:	2800      	cmp	r0, #0
 800e016:	d144      	bne.n	800e0a2 <__gethex+0x272>
 800e018:	f04f 0a02 	mov.w	sl, #2
 800e01c:	4639      	mov	r1, r7
 800e01e:	4620      	mov	r0, r4
 800e020:	f7ff fe9e 	bl	800dd60 <rshift>
 800e024:	443d      	add	r5, r7
 800e026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e02a:	42ab      	cmp	r3, r5
 800e02c:	da4a      	bge.n	800e0c4 <__gethex+0x294>
 800e02e:	4621      	mov	r1, r4
 800e030:	9802      	ldr	r0, [sp, #8]
 800e032:	f000 fa7d 	bl	800e530 <_Bfree>
 800e036:	2300      	movs	r3, #0
 800e038:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e03a:	27a3      	movs	r7, #163	; 0xa3
 800e03c:	6013      	str	r3, [r2, #0]
 800e03e:	e789      	b.n	800df54 <__gethex+0x124>
 800e040:	1e73      	subs	r3, r6, #1
 800e042:	9a07      	ldr	r2, [sp, #28]
 800e044:	9305      	str	r3, [sp, #20]
 800e046:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d019      	beq.n	800e082 <__gethex+0x252>
 800e04e:	f1bb 0f20 	cmp.w	fp, #32
 800e052:	d107      	bne.n	800e064 <__gethex+0x234>
 800e054:	9b04      	ldr	r3, [sp, #16]
 800e056:	9a01      	ldr	r2, [sp, #4]
 800e058:	f843 2b04 	str.w	r2, [r3], #4
 800e05c:	9304      	str	r3, [sp, #16]
 800e05e:	2300      	movs	r3, #0
 800e060:	469b      	mov	fp, r3
 800e062:	9301      	str	r3, [sp, #4]
 800e064:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e068:	f7ff fecd 	bl	800de06 <__hexdig_fun>
 800e06c:	9b01      	ldr	r3, [sp, #4]
 800e06e:	f000 000f 	and.w	r0, r0, #15
 800e072:	fa00 f00b 	lsl.w	r0, r0, fp
 800e076:	4303      	orrs	r3, r0
 800e078:	9301      	str	r3, [sp, #4]
 800e07a:	f10b 0b04 	add.w	fp, fp, #4
 800e07e:	9b05      	ldr	r3, [sp, #20]
 800e080:	e00d      	b.n	800e09e <__gethex+0x26e>
 800e082:	9b05      	ldr	r3, [sp, #20]
 800e084:	9a08      	ldr	r2, [sp, #32]
 800e086:	4413      	add	r3, r2
 800e088:	42bb      	cmp	r3, r7
 800e08a:	d3e0      	bcc.n	800e04e <__gethex+0x21e>
 800e08c:	4618      	mov	r0, r3
 800e08e:	4652      	mov	r2, sl
 800e090:	9903      	ldr	r1, [sp, #12]
 800e092:	9309      	str	r3, [sp, #36]	; 0x24
 800e094:	f001 f846 	bl	800f124 <strncmp>
 800e098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e09a:	2800      	cmp	r0, #0
 800e09c:	d1d7      	bne.n	800e04e <__gethex+0x21e>
 800e09e:	461e      	mov	r6, r3
 800e0a0:	e78c      	b.n	800dfbc <__gethex+0x18c>
 800e0a2:	f04f 0a03 	mov.w	sl, #3
 800e0a6:	e7b9      	b.n	800e01c <__gethex+0x1ec>
 800e0a8:	da09      	bge.n	800e0be <__gethex+0x28e>
 800e0aa:	1bf7      	subs	r7, r6, r7
 800e0ac:	4621      	mov	r1, r4
 800e0ae:	463a      	mov	r2, r7
 800e0b0:	9802      	ldr	r0, [sp, #8]
 800e0b2:	f000 fc55 	bl	800e960 <__lshift>
 800e0b6:	4604      	mov	r4, r0
 800e0b8:	1bed      	subs	r5, r5, r7
 800e0ba:	f100 0914 	add.w	r9, r0, #20
 800e0be:	f04f 0a00 	mov.w	sl, #0
 800e0c2:	e7b0      	b.n	800e026 <__gethex+0x1f6>
 800e0c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e0c8:	42a8      	cmp	r0, r5
 800e0ca:	dd71      	ble.n	800e1b0 <__gethex+0x380>
 800e0cc:	1b45      	subs	r5, r0, r5
 800e0ce:	42ae      	cmp	r6, r5
 800e0d0:	dc34      	bgt.n	800e13c <__gethex+0x30c>
 800e0d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	d028      	beq.n	800e12c <__gethex+0x2fc>
 800e0da:	2b03      	cmp	r3, #3
 800e0dc:	d02a      	beq.n	800e134 <__gethex+0x304>
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d115      	bne.n	800e10e <__gethex+0x2de>
 800e0e2:	42ae      	cmp	r6, r5
 800e0e4:	d113      	bne.n	800e10e <__gethex+0x2de>
 800e0e6:	2e01      	cmp	r6, #1
 800e0e8:	d10b      	bne.n	800e102 <__gethex+0x2d2>
 800e0ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e0ee:	9a06      	ldr	r2, [sp, #24]
 800e0f0:	2762      	movs	r7, #98	; 0x62
 800e0f2:	6013      	str	r3, [r2, #0]
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	6123      	str	r3, [r4, #16]
 800e0f8:	f8c9 3000 	str.w	r3, [r9]
 800e0fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e0fe:	601c      	str	r4, [r3, #0]
 800e100:	e728      	b.n	800df54 <__gethex+0x124>
 800e102:	4620      	mov	r0, r4
 800e104:	1e71      	subs	r1, r6, #1
 800e106:	f000 fe6a 	bl	800edde <__any_on>
 800e10a:	2800      	cmp	r0, #0
 800e10c:	d1ed      	bne.n	800e0ea <__gethex+0x2ba>
 800e10e:	4621      	mov	r1, r4
 800e110:	9802      	ldr	r0, [sp, #8]
 800e112:	f000 fa0d 	bl	800e530 <_Bfree>
 800e116:	2300      	movs	r3, #0
 800e118:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e11a:	2750      	movs	r7, #80	; 0x50
 800e11c:	6013      	str	r3, [r2, #0]
 800e11e:	e719      	b.n	800df54 <__gethex+0x124>
 800e120:	0800fb68 	.word	0x0800fb68
 800e124:	0800faec 	.word	0x0800faec
 800e128:	0800fafd 	.word	0x0800fafd
 800e12c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d1ed      	bne.n	800e10e <__gethex+0x2de>
 800e132:	e7da      	b.n	800e0ea <__gethex+0x2ba>
 800e134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e136:	2b00      	cmp	r3, #0
 800e138:	d1d7      	bne.n	800e0ea <__gethex+0x2ba>
 800e13a:	e7e8      	b.n	800e10e <__gethex+0x2de>
 800e13c:	1e6f      	subs	r7, r5, #1
 800e13e:	f1ba 0f00 	cmp.w	sl, #0
 800e142:	d132      	bne.n	800e1aa <__gethex+0x37a>
 800e144:	b127      	cbz	r7, 800e150 <__gethex+0x320>
 800e146:	4639      	mov	r1, r7
 800e148:	4620      	mov	r0, r4
 800e14a:	f000 fe48 	bl	800edde <__any_on>
 800e14e:	4682      	mov	sl, r0
 800e150:	2101      	movs	r1, #1
 800e152:	117b      	asrs	r3, r7, #5
 800e154:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e158:	f007 071f 	and.w	r7, r7, #31
 800e15c:	fa01 f707 	lsl.w	r7, r1, r7
 800e160:	421f      	tst	r7, r3
 800e162:	f04f 0702 	mov.w	r7, #2
 800e166:	4629      	mov	r1, r5
 800e168:	4620      	mov	r0, r4
 800e16a:	bf18      	it	ne
 800e16c:	f04a 0a02 	orrne.w	sl, sl, #2
 800e170:	1b76      	subs	r6, r6, r5
 800e172:	f7ff fdf5 	bl	800dd60 <rshift>
 800e176:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e17a:	f1ba 0f00 	cmp.w	sl, #0
 800e17e:	d048      	beq.n	800e212 <__gethex+0x3e2>
 800e180:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e184:	2b02      	cmp	r3, #2
 800e186:	d015      	beq.n	800e1b4 <__gethex+0x384>
 800e188:	2b03      	cmp	r3, #3
 800e18a:	d017      	beq.n	800e1bc <__gethex+0x38c>
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d109      	bne.n	800e1a4 <__gethex+0x374>
 800e190:	f01a 0f02 	tst.w	sl, #2
 800e194:	d006      	beq.n	800e1a4 <__gethex+0x374>
 800e196:	f8d9 0000 	ldr.w	r0, [r9]
 800e19a:	ea4a 0a00 	orr.w	sl, sl, r0
 800e19e:	f01a 0f01 	tst.w	sl, #1
 800e1a2:	d10e      	bne.n	800e1c2 <__gethex+0x392>
 800e1a4:	f047 0710 	orr.w	r7, r7, #16
 800e1a8:	e033      	b.n	800e212 <__gethex+0x3e2>
 800e1aa:	f04f 0a01 	mov.w	sl, #1
 800e1ae:	e7cf      	b.n	800e150 <__gethex+0x320>
 800e1b0:	2701      	movs	r7, #1
 800e1b2:	e7e2      	b.n	800e17a <__gethex+0x34a>
 800e1b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1b6:	f1c3 0301 	rsb	r3, r3, #1
 800e1ba:	9315      	str	r3, [sp, #84]	; 0x54
 800e1bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d0f0      	beq.n	800e1a4 <__gethex+0x374>
 800e1c2:	f04f 0c00 	mov.w	ip, #0
 800e1c6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e1ca:	f104 0314 	add.w	r3, r4, #20
 800e1ce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e1d2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e1e0:	d01c      	beq.n	800e21c <__gethex+0x3ec>
 800e1e2:	3201      	adds	r2, #1
 800e1e4:	6002      	str	r2, [r0, #0]
 800e1e6:	2f02      	cmp	r7, #2
 800e1e8:	f104 0314 	add.w	r3, r4, #20
 800e1ec:	d13d      	bne.n	800e26a <__gethex+0x43a>
 800e1ee:	f8d8 2000 	ldr.w	r2, [r8]
 800e1f2:	3a01      	subs	r2, #1
 800e1f4:	42b2      	cmp	r2, r6
 800e1f6:	d10a      	bne.n	800e20e <__gethex+0x3de>
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	1171      	asrs	r1, r6, #5
 800e1fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e200:	f006 061f 	and.w	r6, r6, #31
 800e204:	fa02 f606 	lsl.w	r6, r2, r6
 800e208:	421e      	tst	r6, r3
 800e20a:	bf18      	it	ne
 800e20c:	4617      	movne	r7, r2
 800e20e:	f047 0720 	orr.w	r7, r7, #32
 800e212:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e214:	601c      	str	r4, [r3, #0]
 800e216:	9b06      	ldr	r3, [sp, #24]
 800e218:	601d      	str	r5, [r3, #0]
 800e21a:	e69b      	b.n	800df54 <__gethex+0x124>
 800e21c:	4299      	cmp	r1, r3
 800e21e:	f843 cc04 	str.w	ip, [r3, #-4]
 800e222:	d8d8      	bhi.n	800e1d6 <__gethex+0x3a6>
 800e224:	68a3      	ldr	r3, [r4, #8]
 800e226:	459b      	cmp	fp, r3
 800e228:	db17      	blt.n	800e25a <__gethex+0x42a>
 800e22a:	6861      	ldr	r1, [r4, #4]
 800e22c:	9802      	ldr	r0, [sp, #8]
 800e22e:	3101      	adds	r1, #1
 800e230:	f000 f93e 	bl	800e4b0 <_Balloc>
 800e234:	4681      	mov	r9, r0
 800e236:	b918      	cbnz	r0, 800e240 <__gethex+0x410>
 800e238:	4602      	mov	r2, r0
 800e23a:	2184      	movs	r1, #132	; 0x84
 800e23c:	4b19      	ldr	r3, [pc, #100]	; (800e2a4 <__gethex+0x474>)
 800e23e:	e6ac      	b.n	800df9a <__gethex+0x16a>
 800e240:	6922      	ldr	r2, [r4, #16]
 800e242:	f104 010c 	add.w	r1, r4, #12
 800e246:	3202      	adds	r2, #2
 800e248:	0092      	lsls	r2, r2, #2
 800e24a:	300c      	adds	r0, #12
 800e24c:	f7fc ffdc 	bl	800b208 <memcpy>
 800e250:	4621      	mov	r1, r4
 800e252:	9802      	ldr	r0, [sp, #8]
 800e254:	f000 f96c 	bl	800e530 <_Bfree>
 800e258:	464c      	mov	r4, r9
 800e25a:	6923      	ldr	r3, [r4, #16]
 800e25c:	1c5a      	adds	r2, r3, #1
 800e25e:	6122      	str	r2, [r4, #16]
 800e260:	2201      	movs	r2, #1
 800e262:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e266:	615a      	str	r2, [r3, #20]
 800e268:	e7bd      	b.n	800e1e6 <__gethex+0x3b6>
 800e26a:	6922      	ldr	r2, [r4, #16]
 800e26c:	455a      	cmp	r2, fp
 800e26e:	dd0b      	ble.n	800e288 <__gethex+0x458>
 800e270:	2101      	movs	r1, #1
 800e272:	4620      	mov	r0, r4
 800e274:	f7ff fd74 	bl	800dd60 <rshift>
 800e278:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e27c:	3501      	adds	r5, #1
 800e27e:	42ab      	cmp	r3, r5
 800e280:	f6ff aed5 	blt.w	800e02e <__gethex+0x1fe>
 800e284:	2701      	movs	r7, #1
 800e286:	e7c2      	b.n	800e20e <__gethex+0x3de>
 800e288:	f016 061f 	ands.w	r6, r6, #31
 800e28c:	d0fa      	beq.n	800e284 <__gethex+0x454>
 800e28e:	449a      	add	sl, r3
 800e290:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e294:	f000 fa02 	bl	800e69c <__hi0bits>
 800e298:	f1c6 0620 	rsb	r6, r6, #32
 800e29c:	42b0      	cmp	r0, r6
 800e29e:	dbe7      	blt.n	800e270 <__gethex+0x440>
 800e2a0:	e7f0      	b.n	800e284 <__gethex+0x454>
 800e2a2:	bf00      	nop
 800e2a4:	0800faec 	.word	0x0800faec

0800e2a8 <L_shift>:
 800e2a8:	f1c2 0208 	rsb	r2, r2, #8
 800e2ac:	0092      	lsls	r2, r2, #2
 800e2ae:	b570      	push	{r4, r5, r6, lr}
 800e2b0:	f1c2 0620 	rsb	r6, r2, #32
 800e2b4:	6843      	ldr	r3, [r0, #4]
 800e2b6:	6804      	ldr	r4, [r0, #0]
 800e2b8:	fa03 f506 	lsl.w	r5, r3, r6
 800e2bc:	432c      	orrs	r4, r5
 800e2be:	40d3      	lsrs	r3, r2
 800e2c0:	6004      	str	r4, [r0, #0]
 800e2c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e2c6:	4288      	cmp	r0, r1
 800e2c8:	d3f4      	bcc.n	800e2b4 <L_shift+0xc>
 800e2ca:	bd70      	pop	{r4, r5, r6, pc}

0800e2cc <__match>:
 800e2cc:	b530      	push	{r4, r5, lr}
 800e2ce:	6803      	ldr	r3, [r0, #0]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2d6:	b914      	cbnz	r4, 800e2de <__match+0x12>
 800e2d8:	6003      	str	r3, [r0, #0]
 800e2da:	2001      	movs	r0, #1
 800e2dc:	bd30      	pop	{r4, r5, pc}
 800e2de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e2e6:	2d19      	cmp	r5, #25
 800e2e8:	bf98      	it	ls
 800e2ea:	3220      	addls	r2, #32
 800e2ec:	42a2      	cmp	r2, r4
 800e2ee:	d0f0      	beq.n	800e2d2 <__match+0x6>
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	e7f3      	b.n	800e2dc <__match+0x10>

0800e2f4 <__hexnan>:
 800e2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f8:	2500      	movs	r5, #0
 800e2fa:	680b      	ldr	r3, [r1, #0]
 800e2fc:	4682      	mov	sl, r0
 800e2fe:	115e      	asrs	r6, r3, #5
 800e300:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e304:	f013 031f 	ands.w	r3, r3, #31
 800e308:	bf18      	it	ne
 800e30a:	3604      	addne	r6, #4
 800e30c:	1f37      	subs	r7, r6, #4
 800e30e:	4690      	mov	r8, r2
 800e310:	46b9      	mov	r9, r7
 800e312:	463c      	mov	r4, r7
 800e314:	46ab      	mov	fp, r5
 800e316:	b087      	sub	sp, #28
 800e318:	6801      	ldr	r1, [r0, #0]
 800e31a:	9301      	str	r3, [sp, #4]
 800e31c:	f846 5c04 	str.w	r5, [r6, #-4]
 800e320:	9502      	str	r5, [sp, #8]
 800e322:	784a      	ldrb	r2, [r1, #1]
 800e324:	1c4b      	adds	r3, r1, #1
 800e326:	9303      	str	r3, [sp, #12]
 800e328:	b342      	cbz	r2, 800e37c <__hexnan+0x88>
 800e32a:	4610      	mov	r0, r2
 800e32c:	9105      	str	r1, [sp, #20]
 800e32e:	9204      	str	r2, [sp, #16]
 800e330:	f7ff fd69 	bl	800de06 <__hexdig_fun>
 800e334:	2800      	cmp	r0, #0
 800e336:	d14f      	bne.n	800e3d8 <__hexnan+0xe4>
 800e338:	9a04      	ldr	r2, [sp, #16]
 800e33a:	9905      	ldr	r1, [sp, #20]
 800e33c:	2a20      	cmp	r2, #32
 800e33e:	d818      	bhi.n	800e372 <__hexnan+0x7e>
 800e340:	9b02      	ldr	r3, [sp, #8]
 800e342:	459b      	cmp	fp, r3
 800e344:	dd13      	ble.n	800e36e <__hexnan+0x7a>
 800e346:	454c      	cmp	r4, r9
 800e348:	d206      	bcs.n	800e358 <__hexnan+0x64>
 800e34a:	2d07      	cmp	r5, #7
 800e34c:	dc04      	bgt.n	800e358 <__hexnan+0x64>
 800e34e:	462a      	mov	r2, r5
 800e350:	4649      	mov	r1, r9
 800e352:	4620      	mov	r0, r4
 800e354:	f7ff ffa8 	bl	800e2a8 <L_shift>
 800e358:	4544      	cmp	r4, r8
 800e35a:	d950      	bls.n	800e3fe <__hexnan+0x10a>
 800e35c:	2300      	movs	r3, #0
 800e35e:	f1a4 0904 	sub.w	r9, r4, #4
 800e362:	f844 3c04 	str.w	r3, [r4, #-4]
 800e366:	461d      	mov	r5, r3
 800e368:	464c      	mov	r4, r9
 800e36a:	f8cd b008 	str.w	fp, [sp, #8]
 800e36e:	9903      	ldr	r1, [sp, #12]
 800e370:	e7d7      	b.n	800e322 <__hexnan+0x2e>
 800e372:	2a29      	cmp	r2, #41	; 0x29
 800e374:	d156      	bne.n	800e424 <__hexnan+0x130>
 800e376:	3102      	adds	r1, #2
 800e378:	f8ca 1000 	str.w	r1, [sl]
 800e37c:	f1bb 0f00 	cmp.w	fp, #0
 800e380:	d050      	beq.n	800e424 <__hexnan+0x130>
 800e382:	454c      	cmp	r4, r9
 800e384:	d206      	bcs.n	800e394 <__hexnan+0xa0>
 800e386:	2d07      	cmp	r5, #7
 800e388:	dc04      	bgt.n	800e394 <__hexnan+0xa0>
 800e38a:	462a      	mov	r2, r5
 800e38c:	4649      	mov	r1, r9
 800e38e:	4620      	mov	r0, r4
 800e390:	f7ff ff8a 	bl	800e2a8 <L_shift>
 800e394:	4544      	cmp	r4, r8
 800e396:	d934      	bls.n	800e402 <__hexnan+0x10e>
 800e398:	4623      	mov	r3, r4
 800e39a:	f1a8 0204 	sub.w	r2, r8, #4
 800e39e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e3a2:	429f      	cmp	r7, r3
 800e3a4:	f842 1f04 	str.w	r1, [r2, #4]!
 800e3a8:	d2f9      	bcs.n	800e39e <__hexnan+0xaa>
 800e3aa:	1b3b      	subs	r3, r7, r4
 800e3ac:	f023 0303 	bic.w	r3, r3, #3
 800e3b0:	3304      	adds	r3, #4
 800e3b2:	3401      	adds	r4, #1
 800e3b4:	3e03      	subs	r6, #3
 800e3b6:	42b4      	cmp	r4, r6
 800e3b8:	bf88      	it	hi
 800e3ba:	2304      	movhi	r3, #4
 800e3bc:	2200      	movs	r2, #0
 800e3be:	4443      	add	r3, r8
 800e3c0:	f843 2b04 	str.w	r2, [r3], #4
 800e3c4:	429f      	cmp	r7, r3
 800e3c6:	d2fb      	bcs.n	800e3c0 <__hexnan+0xcc>
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	b91b      	cbnz	r3, 800e3d4 <__hexnan+0xe0>
 800e3cc:	4547      	cmp	r7, r8
 800e3ce:	d127      	bne.n	800e420 <__hexnan+0x12c>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	603b      	str	r3, [r7, #0]
 800e3d4:	2005      	movs	r0, #5
 800e3d6:	e026      	b.n	800e426 <__hexnan+0x132>
 800e3d8:	3501      	adds	r5, #1
 800e3da:	2d08      	cmp	r5, #8
 800e3dc:	f10b 0b01 	add.w	fp, fp, #1
 800e3e0:	dd06      	ble.n	800e3f0 <__hexnan+0xfc>
 800e3e2:	4544      	cmp	r4, r8
 800e3e4:	d9c3      	bls.n	800e36e <__hexnan+0x7a>
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	2501      	movs	r5, #1
 800e3ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3ee:	3c04      	subs	r4, #4
 800e3f0:	6822      	ldr	r2, [r4, #0]
 800e3f2:	f000 000f 	and.w	r0, r0, #15
 800e3f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e3fa:	6022      	str	r2, [r4, #0]
 800e3fc:	e7b7      	b.n	800e36e <__hexnan+0x7a>
 800e3fe:	2508      	movs	r5, #8
 800e400:	e7b5      	b.n	800e36e <__hexnan+0x7a>
 800e402:	9b01      	ldr	r3, [sp, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d0df      	beq.n	800e3c8 <__hexnan+0xd4>
 800e408:	f04f 32ff 	mov.w	r2, #4294967295
 800e40c:	f1c3 0320 	rsb	r3, r3, #32
 800e410:	fa22 f303 	lsr.w	r3, r2, r3
 800e414:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e418:	401a      	ands	r2, r3
 800e41a:	f846 2c04 	str.w	r2, [r6, #-4]
 800e41e:	e7d3      	b.n	800e3c8 <__hexnan+0xd4>
 800e420:	3f04      	subs	r7, #4
 800e422:	e7d1      	b.n	800e3c8 <__hexnan+0xd4>
 800e424:	2004      	movs	r0, #4
 800e426:	b007      	add	sp, #28
 800e428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e42c <_localeconv_r>:
 800e42c:	4800      	ldr	r0, [pc, #0]	; (800e430 <_localeconv_r+0x4>)
 800e42e:	4770      	bx	lr
 800e430:	20000174 	.word	0x20000174

0800e434 <_lseek_r>:
 800e434:	b538      	push	{r3, r4, r5, lr}
 800e436:	4604      	mov	r4, r0
 800e438:	4608      	mov	r0, r1
 800e43a:	4611      	mov	r1, r2
 800e43c:	2200      	movs	r2, #0
 800e43e:	4d05      	ldr	r5, [pc, #20]	; (800e454 <_lseek_r+0x20>)
 800e440:	602a      	str	r2, [r5, #0]
 800e442:	461a      	mov	r2, r3
 800e444:	f7f3 fd06 	bl	8001e54 <_lseek>
 800e448:	1c43      	adds	r3, r0, #1
 800e44a:	d102      	bne.n	800e452 <_lseek_r+0x1e>
 800e44c:	682b      	ldr	r3, [r5, #0]
 800e44e:	b103      	cbz	r3, 800e452 <_lseek_r+0x1e>
 800e450:	6023      	str	r3, [r4, #0]
 800e452:	bd38      	pop	{r3, r4, r5, pc}
 800e454:	20005484 	.word	0x20005484

0800e458 <__ascii_mbtowc>:
 800e458:	b082      	sub	sp, #8
 800e45a:	b901      	cbnz	r1, 800e45e <__ascii_mbtowc+0x6>
 800e45c:	a901      	add	r1, sp, #4
 800e45e:	b142      	cbz	r2, 800e472 <__ascii_mbtowc+0x1a>
 800e460:	b14b      	cbz	r3, 800e476 <__ascii_mbtowc+0x1e>
 800e462:	7813      	ldrb	r3, [r2, #0]
 800e464:	600b      	str	r3, [r1, #0]
 800e466:	7812      	ldrb	r2, [r2, #0]
 800e468:	1e10      	subs	r0, r2, #0
 800e46a:	bf18      	it	ne
 800e46c:	2001      	movne	r0, #1
 800e46e:	b002      	add	sp, #8
 800e470:	4770      	bx	lr
 800e472:	4610      	mov	r0, r2
 800e474:	e7fb      	b.n	800e46e <__ascii_mbtowc+0x16>
 800e476:	f06f 0001 	mvn.w	r0, #1
 800e47a:	e7f8      	b.n	800e46e <__ascii_mbtowc+0x16>

0800e47c <memchr>:
 800e47c:	4603      	mov	r3, r0
 800e47e:	b510      	push	{r4, lr}
 800e480:	b2c9      	uxtb	r1, r1
 800e482:	4402      	add	r2, r0
 800e484:	4293      	cmp	r3, r2
 800e486:	4618      	mov	r0, r3
 800e488:	d101      	bne.n	800e48e <memchr+0x12>
 800e48a:	2000      	movs	r0, #0
 800e48c:	e003      	b.n	800e496 <memchr+0x1a>
 800e48e:	7804      	ldrb	r4, [r0, #0]
 800e490:	3301      	adds	r3, #1
 800e492:	428c      	cmp	r4, r1
 800e494:	d1f6      	bne.n	800e484 <memchr+0x8>
 800e496:	bd10      	pop	{r4, pc}

0800e498 <__malloc_lock>:
 800e498:	4801      	ldr	r0, [pc, #4]	; (800e4a0 <__malloc_lock+0x8>)
 800e49a:	f7fc beaa 	b.w	800b1f2 <__retarget_lock_acquire_recursive>
 800e49e:	bf00      	nop
 800e4a0:	2000547c 	.word	0x2000547c

0800e4a4 <__malloc_unlock>:
 800e4a4:	4801      	ldr	r0, [pc, #4]	; (800e4ac <__malloc_unlock+0x8>)
 800e4a6:	f7fc bea5 	b.w	800b1f4 <__retarget_lock_release_recursive>
 800e4aa:	bf00      	nop
 800e4ac:	2000547c 	.word	0x2000547c

0800e4b0 <_Balloc>:
 800e4b0:	b570      	push	{r4, r5, r6, lr}
 800e4b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	460d      	mov	r5, r1
 800e4b8:	b976      	cbnz	r6, 800e4d8 <_Balloc+0x28>
 800e4ba:	2010      	movs	r0, #16
 800e4bc:	f7fc fe9c 	bl	800b1f8 <malloc>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	6260      	str	r0, [r4, #36]	; 0x24
 800e4c4:	b920      	cbnz	r0, 800e4d0 <_Balloc+0x20>
 800e4c6:	2166      	movs	r1, #102	; 0x66
 800e4c8:	4b17      	ldr	r3, [pc, #92]	; (800e528 <_Balloc+0x78>)
 800e4ca:	4818      	ldr	r0, [pc, #96]	; (800e52c <_Balloc+0x7c>)
 800e4cc:	f000 fe4a 	bl	800f164 <__assert_func>
 800e4d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4d4:	6006      	str	r6, [r0, #0]
 800e4d6:	60c6      	str	r6, [r0, #12]
 800e4d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e4da:	68f3      	ldr	r3, [r6, #12]
 800e4dc:	b183      	cbz	r3, 800e500 <_Balloc+0x50>
 800e4de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e4e6:	b9b8      	cbnz	r0, 800e518 <_Balloc+0x68>
 800e4e8:	2101      	movs	r1, #1
 800e4ea:	fa01 f605 	lsl.w	r6, r1, r5
 800e4ee:	1d72      	adds	r2, r6, #5
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	0092      	lsls	r2, r2, #2
 800e4f4:	f000 fc94 	bl	800ee20 <_calloc_r>
 800e4f8:	b160      	cbz	r0, 800e514 <_Balloc+0x64>
 800e4fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e4fe:	e00e      	b.n	800e51e <_Balloc+0x6e>
 800e500:	2221      	movs	r2, #33	; 0x21
 800e502:	2104      	movs	r1, #4
 800e504:	4620      	mov	r0, r4
 800e506:	f000 fc8b 	bl	800ee20 <_calloc_r>
 800e50a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e50c:	60f0      	str	r0, [r6, #12]
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d1e4      	bne.n	800e4de <_Balloc+0x2e>
 800e514:	2000      	movs	r0, #0
 800e516:	bd70      	pop	{r4, r5, r6, pc}
 800e518:	6802      	ldr	r2, [r0, #0]
 800e51a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e51e:	2300      	movs	r3, #0
 800e520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e524:	e7f7      	b.n	800e516 <_Balloc+0x66>
 800e526:	bf00      	nop
 800e528:	0800fa76 	.word	0x0800fa76
 800e52c:	0800fb7c 	.word	0x0800fb7c

0800e530 <_Bfree>:
 800e530:	b570      	push	{r4, r5, r6, lr}
 800e532:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e534:	4605      	mov	r5, r0
 800e536:	460c      	mov	r4, r1
 800e538:	b976      	cbnz	r6, 800e558 <_Bfree+0x28>
 800e53a:	2010      	movs	r0, #16
 800e53c:	f7fc fe5c 	bl	800b1f8 <malloc>
 800e540:	4602      	mov	r2, r0
 800e542:	6268      	str	r0, [r5, #36]	; 0x24
 800e544:	b920      	cbnz	r0, 800e550 <_Bfree+0x20>
 800e546:	218a      	movs	r1, #138	; 0x8a
 800e548:	4b08      	ldr	r3, [pc, #32]	; (800e56c <_Bfree+0x3c>)
 800e54a:	4809      	ldr	r0, [pc, #36]	; (800e570 <_Bfree+0x40>)
 800e54c:	f000 fe0a 	bl	800f164 <__assert_func>
 800e550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e554:	6006      	str	r6, [r0, #0]
 800e556:	60c6      	str	r6, [r0, #12]
 800e558:	b13c      	cbz	r4, 800e56a <_Bfree+0x3a>
 800e55a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e55c:	6862      	ldr	r2, [r4, #4]
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e564:	6021      	str	r1, [r4, #0]
 800e566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e56a:	bd70      	pop	{r4, r5, r6, pc}
 800e56c:	0800fa76 	.word	0x0800fa76
 800e570:	0800fb7c 	.word	0x0800fb7c

0800e574 <__multadd>:
 800e574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e578:	4698      	mov	r8, r3
 800e57a:	460c      	mov	r4, r1
 800e57c:	2300      	movs	r3, #0
 800e57e:	690e      	ldr	r6, [r1, #16]
 800e580:	4607      	mov	r7, r0
 800e582:	f101 0014 	add.w	r0, r1, #20
 800e586:	6805      	ldr	r5, [r0, #0]
 800e588:	3301      	adds	r3, #1
 800e58a:	b2a9      	uxth	r1, r5
 800e58c:	fb02 8101 	mla	r1, r2, r1, r8
 800e590:	0c2d      	lsrs	r5, r5, #16
 800e592:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e596:	fb02 c505 	mla	r5, r2, r5, ip
 800e59a:	b289      	uxth	r1, r1
 800e59c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e5a0:	429e      	cmp	r6, r3
 800e5a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e5a6:	f840 1b04 	str.w	r1, [r0], #4
 800e5aa:	dcec      	bgt.n	800e586 <__multadd+0x12>
 800e5ac:	f1b8 0f00 	cmp.w	r8, #0
 800e5b0:	d022      	beq.n	800e5f8 <__multadd+0x84>
 800e5b2:	68a3      	ldr	r3, [r4, #8]
 800e5b4:	42b3      	cmp	r3, r6
 800e5b6:	dc19      	bgt.n	800e5ec <__multadd+0x78>
 800e5b8:	6861      	ldr	r1, [r4, #4]
 800e5ba:	4638      	mov	r0, r7
 800e5bc:	3101      	adds	r1, #1
 800e5be:	f7ff ff77 	bl	800e4b0 <_Balloc>
 800e5c2:	4605      	mov	r5, r0
 800e5c4:	b928      	cbnz	r0, 800e5d2 <__multadd+0x5e>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	21b5      	movs	r1, #181	; 0xb5
 800e5ca:	4b0d      	ldr	r3, [pc, #52]	; (800e600 <__multadd+0x8c>)
 800e5cc:	480d      	ldr	r0, [pc, #52]	; (800e604 <__multadd+0x90>)
 800e5ce:	f000 fdc9 	bl	800f164 <__assert_func>
 800e5d2:	6922      	ldr	r2, [r4, #16]
 800e5d4:	f104 010c 	add.w	r1, r4, #12
 800e5d8:	3202      	adds	r2, #2
 800e5da:	0092      	lsls	r2, r2, #2
 800e5dc:	300c      	adds	r0, #12
 800e5de:	f7fc fe13 	bl	800b208 <memcpy>
 800e5e2:	4621      	mov	r1, r4
 800e5e4:	4638      	mov	r0, r7
 800e5e6:	f7ff ffa3 	bl	800e530 <_Bfree>
 800e5ea:	462c      	mov	r4, r5
 800e5ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e5f0:	3601      	adds	r6, #1
 800e5f2:	f8c3 8014 	str.w	r8, [r3, #20]
 800e5f6:	6126      	str	r6, [r4, #16]
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5fe:	bf00      	nop
 800e600:	0800faec 	.word	0x0800faec
 800e604:	0800fb7c 	.word	0x0800fb7c

0800e608 <__s2b>:
 800e608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e60c:	4615      	mov	r5, r2
 800e60e:	2209      	movs	r2, #9
 800e610:	461f      	mov	r7, r3
 800e612:	3308      	adds	r3, #8
 800e614:	460c      	mov	r4, r1
 800e616:	fb93 f3f2 	sdiv	r3, r3, r2
 800e61a:	4606      	mov	r6, r0
 800e61c:	2201      	movs	r2, #1
 800e61e:	2100      	movs	r1, #0
 800e620:	429a      	cmp	r2, r3
 800e622:	db09      	blt.n	800e638 <__s2b+0x30>
 800e624:	4630      	mov	r0, r6
 800e626:	f7ff ff43 	bl	800e4b0 <_Balloc>
 800e62a:	b940      	cbnz	r0, 800e63e <__s2b+0x36>
 800e62c:	4602      	mov	r2, r0
 800e62e:	21ce      	movs	r1, #206	; 0xce
 800e630:	4b18      	ldr	r3, [pc, #96]	; (800e694 <__s2b+0x8c>)
 800e632:	4819      	ldr	r0, [pc, #100]	; (800e698 <__s2b+0x90>)
 800e634:	f000 fd96 	bl	800f164 <__assert_func>
 800e638:	0052      	lsls	r2, r2, #1
 800e63a:	3101      	adds	r1, #1
 800e63c:	e7f0      	b.n	800e620 <__s2b+0x18>
 800e63e:	9b08      	ldr	r3, [sp, #32]
 800e640:	2d09      	cmp	r5, #9
 800e642:	6143      	str	r3, [r0, #20]
 800e644:	f04f 0301 	mov.w	r3, #1
 800e648:	6103      	str	r3, [r0, #16]
 800e64a:	dd16      	ble.n	800e67a <__s2b+0x72>
 800e64c:	f104 0909 	add.w	r9, r4, #9
 800e650:	46c8      	mov	r8, r9
 800e652:	442c      	add	r4, r5
 800e654:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e658:	4601      	mov	r1, r0
 800e65a:	220a      	movs	r2, #10
 800e65c:	4630      	mov	r0, r6
 800e65e:	3b30      	subs	r3, #48	; 0x30
 800e660:	f7ff ff88 	bl	800e574 <__multadd>
 800e664:	45a0      	cmp	r8, r4
 800e666:	d1f5      	bne.n	800e654 <__s2b+0x4c>
 800e668:	f1a5 0408 	sub.w	r4, r5, #8
 800e66c:	444c      	add	r4, r9
 800e66e:	1b2d      	subs	r5, r5, r4
 800e670:	1963      	adds	r3, r4, r5
 800e672:	42bb      	cmp	r3, r7
 800e674:	db04      	blt.n	800e680 <__s2b+0x78>
 800e676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e67a:	2509      	movs	r5, #9
 800e67c:	340a      	adds	r4, #10
 800e67e:	e7f6      	b.n	800e66e <__s2b+0x66>
 800e680:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e684:	4601      	mov	r1, r0
 800e686:	220a      	movs	r2, #10
 800e688:	4630      	mov	r0, r6
 800e68a:	3b30      	subs	r3, #48	; 0x30
 800e68c:	f7ff ff72 	bl	800e574 <__multadd>
 800e690:	e7ee      	b.n	800e670 <__s2b+0x68>
 800e692:	bf00      	nop
 800e694:	0800faec 	.word	0x0800faec
 800e698:	0800fb7c 	.word	0x0800fb7c

0800e69c <__hi0bits>:
 800e69c:	0c02      	lsrs	r2, r0, #16
 800e69e:	0412      	lsls	r2, r2, #16
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	b9ca      	cbnz	r2, 800e6d8 <__hi0bits+0x3c>
 800e6a4:	0403      	lsls	r3, r0, #16
 800e6a6:	2010      	movs	r0, #16
 800e6a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e6ac:	bf04      	itt	eq
 800e6ae:	021b      	lsleq	r3, r3, #8
 800e6b0:	3008      	addeq	r0, #8
 800e6b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e6b6:	bf04      	itt	eq
 800e6b8:	011b      	lsleq	r3, r3, #4
 800e6ba:	3004      	addeq	r0, #4
 800e6bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e6c0:	bf04      	itt	eq
 800e6c2:	009b      	lsleq	r3, r3, #2
 800e6c4:	3002      	addeq	r0, #2
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	db05      	blt.n	800e6d6 <__hi0bits+0x3a>
 800e6ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800e6ce:	f100 0001 	add.w	r0, r0, #1
 800e6d2:	bf08      	it	eq
 800e6d4:	2020      	moveq	r0, #32
 800e6d6:	4770      	bx	lr
 800e6d8:	2000      	movs	r0, #0
 800e6da:	e7e5      	b.n	800e6a8 <__hi0bits+0xc>

0800e6dc <__lo0bits>:
 800e6dc:	6803      	ldr	r3, [r0, #0]
 800e6de:	4602      	mov	r2, r0
 800e6e0:	f013 0007 	ands.w	r0, r3, #7
 800e6e4:	d00b      	beq.n	800e6fe <__lo0bits+0x22>
 800e6e6:	07d9      	lsls	r1, r3, #31
 800e6e8:	d422      	bmi.n	800e730 <__lo0bits+0x54>
 800e6ea:	0798      	lsls	r0, r3, #30
 800e6ec:	bf49      	itett	mi
 800e6ee:	085b      	lsrmi	r3, r3, #1
 800e6f0:	089b      	lsrpl	r3, r3, #2
 800e6f2:	2001      	movmi	r0, #1
 800e6f4:	6013      	strmi	r3, [r2, #0]
 800e6f6:	bf5c      	itt	pl
 800e6f8:	2002      	movpl	r0, #2
 800e6fa:	6013      	strpl	r3, [r2, #0]
 800e6fc:	4770      	bx	lr
 800e6fe:	b299      	uxth	r1, r3
 800e700:	b909      	cbnz	r1, 800e706 <__lo0bits+0x2a>
 800e702:	2010      	movs	r0, #16
 800e704:	0c1b      	lsrs	r3, r3, #16
 800e706:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e70a:	bf04      	itt	eq
 800e70c:	0a1b      	lsreq	r3, r3, #8
 800e70e:	3008      	addeq	r0, #8
 800e710:	0719      	lsls	r1, r3, #28
 800e712:	bf04      	itt	eq
 800e714:	091b      	lsreq	r3, r3, #4
 800e716:	3004      	addeq	r0, #4
 800e718:	0799      	lsls	r1, r3, #30
 800e71a:	bf04      	itt	eq
 800e71c:	089b      	lsreq	r3, r3, #2
 800e71e:	3002      	addeq	r0, #2
 800e720:	07d9      	lsls	r1, r3, #31
 800e722:	d403      	bmi.n	800e72c <__lo0bits+0x50>
 800e724:	085b      	lsrs	r3, r3, #1
 800e726:	f100 0001 	add.w	r0, r0, #1
 800e72a:	d003      	beq.n	800e734 <__lo0bits+0x58>
 800e72c:	6013      	str	r3, [r2, #0]
 800e72e:	4770      	bx	lr
 800e730:	2000      	movs	r0, #0
 800e732:	4770      	bx	lr
 800e734:	2020      	movs	r0, #32
 800e736:	4770      	bx	lr

0800e738 <__i2b>:
 800e738:	b510      	push	{r4, lr}
 800e73a:	460c      	mov	r4, r1
 800e73c:	2101      	movs	r1, #1
 800e73e:	f7ff feb7 	bl	800e4b0 <_Balloc>
 800e742:	4602      	mov	r2, r0
 800e744:	b928      	cbnz	r0, 800e752 <__i2b+0x1a>
 800e746:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e74a:	4b04      	ldr	r3, [pc, #16]	; (800e75c <__i2b+0x24>)
 800e74c:	4804      	ldr	r0, [pc, #16]	; (800e760 <__i2b+0x28>)
 800e74e:	f000 fd09 	bl	800f164 <__assert_func>
 800e752:	2301      	movs	r3, #1
 800e754:	6144      	str	r4, [r0, #20]
 800e756:	6103      	str	r3, [r0, #16]
 800e758:	bd10      	pop	{r4, pc}
 800e75a:	bf00      	nop
 800e75c:	0800faec 	.word	0x0800faec
 800e760:	0800fb7c 	.word	0x0800fb7c

0800e764 <__multiply>:
 800e764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e768:	4614      	mov	r4, r2
 800e76a:	690a      	ldr	r2, [r1, #16]
 800e76c:	6923      	ldr	r3, [r4, #16]
 800e76e:	460d      	mov	r5, r1
 800e770:	429a      	cmp	r2, r3
 800e772:	bfbe      	ittt	lt
 800e774:	460b      	movlt	r3, r1
 800e776:	4625      	movlt	r5, r4
 800e778:	461c      	movlt	r4, r3
 800e77a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e77e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e782:	68ab      	ldr	r3, [r5, #8]
 800e784:	6869      	ldr	r1, [r5, #4]
 800e786:	eb0a 0709 	add.w	r7, sl, r9
 800e78a:	42bb      	cmp	r3, r7
 800e78c:	b085      	sub	sp, #20
 800e78e:	bfb8      	it	lt
 800e790:	3101      	addlt	r1, #1
 800e792:	f7ff fe8d 	bl	800e4b0 <_Balloc>
 800e796:	b930      	cbnz	r0, 800e7a6 <__multiply+0x42>
 800e798:	4602      	mov	r2, r0
 800e79a:	f240 115d 	movw	r1, #349	; 0x15d
 800e79e:	4b41      	ldr	r3, [pc, #260]	; (800e8a4 <__multiply+0x140>)
 800e7a0:	4841      	ldr	r0, [pc, #260]	; (800e8a8 <__multiply+0x144>)
 800e7a2:	f000 fcdf 	bl	800f164 <__assert_func>
 800e7a6:	f100 0614 	add.w	r6, r0, #20
 800e7aa:	4633      	mov	r3, r6
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e7b2:	4543      	cmp	r3, r8
 800e7b4:	d31e      	bcc.n	800e7f4 <__multiply+0x90>
 800e7b6:	f105 0c14 	add.w	ip, r5, #20
 800e7ba:	f104 0314 	add.w	r3, r4, #20
 800e7be:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e7c2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e7c6:	9202      	str	r2, [sp, #8]
 800e7c8:	ebac 0205 	sub.w	r2, ip, r5
 800e7cc:	3a15      	subs	r2, #21
 800e7ce:	f022 0203 	bic.w	r2, r2, #3
 800e7d2:	3204      	adds	r2, #4
 800e7d4:	f105 0115 	add.w	r1, r5, #21
 800e7d8:	458c      	cmp	ip, r1
 800e7da:	bf38      	it	cc
 800e7dc:	2204      	movcc	r2, #4
 800e7de:	9201      	str	r2, [sp, #4]
 800e7e0:	9a02      	ldr	r2, [sp, #8]
 800e7e2:	9303      	str	r3, [sp, #12]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d808      	bhi.n	800e7fa <__multiply+0x96>
 800e7e8:	2f00      	cmp	r7, #0
 800e7ea:	dc55      	bgt.n	800e898 <__multiply+0x134>
 800e7ec:	6107      	str	r7, [r0, #16]
 800e7ee:	b005      	add	sp, #20
 800e7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f4:	f843 2b04 	str.w	r2, [r3], #4
 800e7f8:	e7db      	b.n	800e7b2 <__multiply+0x4e>
 800e7fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800e7fe:	f1ba 0f00 	cmp.w	sl, #0
 800e802:	d020      	beq.n	800e846 <__multiply+0xe2>
 800e804:	46b1      	mov	r9, r6
 800e806:	2200      	movs	r2, #0
 800e808:	f105 0e14 	add.w	lr, r5, #20
 800e80c:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e810:	f8d9 b000 	ldr.w	fp, [r9]
 800e814:	b2a1      	uxth	r1, r4
 800e816:	fa1f fb8b 	uxth.w	fp, fp
 800e81a:	fb0a b101 	mla	r1, sl, r1, fp
 800e81e:	4411      	add	r1, r2
 800e820:	f8d9 2000 	ldr.w	r2, [r9]
 800e824:	0c24      	lsrs	r4, r4, #16
 800e826:	0c12      	lsrs	r2, r2, #16
 800e828:	fb0a 2404 	mla	r4, sl, r4, r2
 800e82c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e830:	b289      	uxth	r1, r1
 800e832:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e836:	45f4      	cmp	ip, lr
 800e838:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e83c:	f849 1b04 	str.w	r1, [r9], #4
 800e840:	d8e4      	bhi.n	800e80c <__multiply+0xa8>
 800e842:	9901      	ldr	r1, [sp, #4]
 800e844:	5072      	str	r2, [r6, r1]
 800e846:	9a03      	ldr	r2, [sp, #12]
 800e848:	3304      	adds	r3, #4
 800e84a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e84e:	f1b9 0f00 	cmp.w	r9, #0
 800e852:	d01f      	beq.n	800e894 <__multiply+0x130>
 800e854:	46b6      	mov	lr, r6
 800e856:	f04f 0a00 	mov.w	sl, #0
 800e85a:	6834      	ldr	r4, [r6, #0]
 800e85c:	f105 0114 	add.w	r1, r5, #20
 800e860:	880a      	ldrh	r2, [r1, #0]
 800e862:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e866:	b2a4      	uxth	r4, r4
 800e868:	fb09 b202 	mla	r2, r9, r2, fp
 800e86c:	4492      	add	sl, r2
 800e86e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e872:	f84e 4b04 	str.w	r4, [lr], #4
 800e876:	f851 4b04 	ldr.w	r4, [r1], #4
 800e87a:	f8be 2000 	ldrh.w	r2, [lr]
 800e87e:	0c24      	lsrs	r4, r4, #16
 800e880:	fb09 2404 	mla	r4, r9, r4, r2
 800e884:	458c      	cmp	ip, r1
 800e886:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e88a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e88e:	d8e7      	bhi.n	800e860 <__multiply+0xfc>
 800e890:	9a01      	ldr	r2, [sp, #4]
 800e892:	50b4      	str	r4, [r6, r2]
 800e894:	3604      	adds	r6, #4
 800e896:	e7a3      	b.n	800e7e0 <__multiply+0x7c>
 800e898:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d1a5      	bne.n	800e7ec <__multiply+0x88>
 800e8a0:	3f01      	subs	r7, #1
 800e8a2:	e7a1      	b.n	800e7e8 <__multiply+0x84>
 800e8a4:	0800faec 	.word	0x0800faec
 800e8a8:	0800fb7c 	.word	0x0800fb7c

0800e8ac <__pow5mult>:
 800e8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8b0:	4615      	mov	r5, r2
 800e8b2:	f012 0203 	ands.w	r2, r2, #3
 800e8b6:	4606      	mov	r6, r0
 800e8b8:	460f      	mov	r7, r1
 800e8ba:	d007      	beq.n	800e8cc <__pow5mult+0x20>
 800e8bc:	4c25      	ldr	r4, [pc, #148]	; (800e954 <__pow5mult+0xa8>)
 800e8be:	3a01      	subs	r2, #1
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e8c6:	f7ff fe55 	bl	800e574 <__multadd>
 800e8ca:	4607      	mov	r7, r0
 800e8cc:	10ad      	asrs	r5, r5, #2
 800e8ce:	d03d      	beq.n	800e94c <__pow5mult+0xa0>
 800e8d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e8d2:	b97c      	cbnz	r4, 800e8f4 <__pow5mult+0x48>
 800e8d4:	2010      	movs	r0, #16
 800e8d6:	f7fc fc8f 	bl	800b1f8 <malloc>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	6270      	str	r0, [r6, #36]	; 0x24
 800e8de:	b928      	cbnz	r0, 800e8ec <__pow5mult+0x40>
 800e8e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e8e4:	4b1c      	ldr	r3, [pc, #112]	; (800e958 <__pow5mult+0xac>)
 800e8e6:	481d      	ldr	r0, [pc, #116]	; (800e95c <__pow5mult+0xb0>)
 800e8e8:	f000 fc3c 	bl	800f164 <__assert_func>
 800e8ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8f0:	6004      	str	r4, [r0, #0]
 800e8f2:	60c4      	str	r4, [r0, #12]
 800e8f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e8f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e8fc:	b94c      	cbnz	r4, 800e912 <__pow5mult+0x66>
 800e8fe:	f240 2171 	movw	r1, #625	; 0x271
 800e902:	4630      	mov	r0, r6
 800e904:	f7ff ff18 	bl	800e738 <__i2b>
 800e908:	2300      	movs	r3, #0
 800e90a:	4604      	mov	r4, r0
 800e90c:	f8c8 0008 	str.w	r0, [r8, #8]
 800e910:	6003      	str	r3, [r0, #0]
 800e912:	f04f 0900 	mov.w	r9, #0
 800e916:	07eb      	lsls	r3, r5, #31
 800e918:	d50a      	bpl.n	800e930 <__pow5mult+0x84>
 800e91a:	4639      	mov	r1, r7
 800e91c:	4622      	mov	r2, r4
 800e91e:	4630      	mov	r0, r6
 800e920:	f7ff ff20 	bl	800e764 <__multiply>
 800e924:	4680      	mov	r8, r0
 800e926:	4639      	mov	r1, r7
 800e928:	4630      	mov	r0, r6
 800e92a:	f7ff fe01 	bl	800e530 <_Bfree>
 800e92e:	4647      	mov	r7, r8
 800e930:	106d      	asrs	r5, r5, #1
 800e932:	d00b      	beq.n	800e94c <__pow5mult+0xa0>
 800e934:	6820      	ldr	r0, [r4, #0]
 800e936:	b938      	cbnz	r0, 800e948 <__pow5mult+0x9c>
 800e938:	4622      	mov	r2, r4
 800e93a:	4621      	mov	r1, r4
 800e93c:	4630      	mov	r0, r6
 800e93e:	f7ff ff11 	bl	800e764 <__multiply>
 800e942:	6020      	str	r0, [r4, #0]
 800e944:	f8c0 9000 	str.w	r9, [r0]
 800e948:	4604      	mov	r4, r0
 800e94a:	e7e4      	b.n	800e916 <__pow5mult+0x6a>
 800e94c:	4638      	mov	r0, r7
 800e94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e952:	bf00      	nop
 800e954:	0800fcd0 	.word	0x0800fcd0
 800e958:	0800fa76 	.word	0x0800fa76
 800e95c:	0800fb7c 	.word	0x0800fb7c

0800e960 <__lshift>:
 800e960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e964:	460c      	mov	r4, r1
 800e966:	4607      	mov	r7, r0
 800e968:	4691      	mov	r9, r2
 800e96a:	6923      	ldr	r3, [r4, #16]
 800e96c:	6849      	ldr	r1, [r1, #4]
 800e96e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e972:	68a3      	ldr	r3, [r4, #8]
 800e974:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e978:	f108 0601 	add.w	r6, r8, #1
 800e97c:	42b3      	cmp	r3, r6
 800e97e:	db0b      	blt.n	800e998 <__lshift+0x38>
 800e980:	4638      	mov	r0, r7
 800e982:	f7ff fd95 	bl	800e4b0 <_Balloc>
 800e986:	4605      	mov	r5, r0
 800e988:	b948      	cbnz	r0, 800e99e <__lshift+0x3e>
 800e98a:	4602      	mov	r2, r0
 800e98c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e990:	4b27      	ldr	r3, [pc, #156]	; (800ea30 <__lshift+0xd0>)
 800e992:	4828      	ldr	r0, [pc, #160]	; (800ea34 <__lshift+0xd4>)
 800e994:	f000 fbe6 	bl	800f164 <__assert_func>
 800e998:	3101      	adds	r1, #1
 800e99a:	005b      	lsls	r3, r3, #1
 800e99c:	e7ee      	b.n	800e97c <__lshift+0x1c>
 800e99e:	2300      	movs	r3, #0
 800e9a0:	f100 0114 	add.w	r1, r0, #20
 800e9a4:	f100 0210 	add.w	r2, r0, #16
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	4553      	cmp	r3, sl
 800e9ac:	db33      	blt.n	800ea16 <__lshift+0xb6>
 800e9ae:	6920      	ldr	r0, [r4, #16]
 800e9b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e9b4:	f104 0314 	add.w	r3, r4, #20
 800e9b8:	f019 091f 	ands.w	r9, r9, #31
 800e9bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e9c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e9c4:	d02b      	beq.n	800ea1e <__lshift+0xbe>
 800e9c6:	468a      	mov	sl, r1
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	f1c9 0e20 	rsb	lr, r9, #32
 800e9ce:	6818      	ldr	r0, [r3, #0]
 800e9d0:	fa00 f009 	lsl.w	r0, r0, r9
 800e9d4:	4302      	orrs	r2, r0
 800e9d6:	f84a 2b04 	str.w	r2, [sl], #4
 800e9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9de:	459c      	cmp	ip, r3
 800e9e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e9e4:	d8f3      	bhi.n	800e9ce <__lshift+0x6e>
 800e9e6:	ebac 0304 	sub.w	r3, ip, r4
 800e9ea:	3b15      	subs	r3, #21
 800e9ec:	f023 0303 	bic.w	r3, r3, #3
 800e9f0:	3304      	adds	r3, #4
 800e9f2:	f104 0015 	add.w	r0, r4, #21
 800e9f6:	4584      	cmp	ip, r0
 800e9f8:	bf38      	it	cc
 800e9fa:	2304      	movcc	r3, #4
 800e9fc:	50ca      	str	r2, [r1, r3]
 800e9fe:	b10a      	cbz	r2, 800ea04 <__lshift+0xa4>
 800ea00:	f108 0602 	add.w	r6, r8, #2
 800ea04:	3e01      	subs	r6, #1
 800ea06:	4638      	mov	r0, r7
 800ea08:	4621      	mov	r1, r4
 800ea0a:	612e      	str	r6, [r5, #16]
 800ea0c:	f7ff fd90 	bl	800e530 <_Bfree>
 800ea10:	4628      	mov	r0, r5
 800ea12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea16:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea1a:	3301      	adds	r3, #1
 800ea1c:	e7c5      	b.n	800e9aa <__lshift+0x4a>
 800ea1e:	3904      	subs	r1, #4
 800ea20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea24:	459c      	cmp	ip, r3
 800ea26:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea2a:	d8f9      	bhi.n	800ea20 <__lshift+0xc0>
 800ea2c:	e7ea      	b.n	800ea04 <__lshift+0xa4>
 800ea2e:	bf00      	nop
 800ea30:	0800faec 	.word	0x0800faec
 800ea34:	0800fb7c 	.word	0x0800fb7c

0800ea38 <__mcmp>:
 800ea38:	4603      	mov	r3, r0
 800ea3a:	690a      	ldr	r2, [r1, #16]
 800ea3c:	6900      	ldr	r0, [r0, #16]
 800ea3e:	b530      	push	{r4, r5, lr}
 800ea40:	1a80      	subs	r0, r0, r2
 800ea42:	d10d      	bne.n	800ea60 <__mcmp+0x28>
 800ea44:	3314      	adds	r3, #20
 800ea46:	3114      	adds	r1, #20
 800ea48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ea4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ea50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ea54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ea58:	4295      	cmp	r5, r2
 800ea5a:	d002      	beq.n	800ea62 <__mcmp+0x2a>
 800ea5c:	d304      	bcc.n	800ea68 <__mcmp+0x30>
 800ea5e:	2001      	movs	r0, #1
 800ea60:	bd30      	pop	{r4, r5, pc}
 800ea62:	42a3      	cmp	r3, r4
 800ea64:	d3f4      	bcc.n	800ea50 <__mcmp+0x18>
 800ea66:	e7fb      	b.n	800ea60 <__mcmp+0x28>
 800ea68:	f04f 30ff 	mov.w	r0, #4294967295
 800ea6c:	e7f8      	b.n	800ea60 <__mcmp+0x28>
	...

0800ea70 <__mdiff>:
 800ea70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea74:	460c      	mov	r4, r1
 800ea76:	4606      	mov	r6, r0
 800ea78:	4611      	mov	r1, r2
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	4692      	mov	sl, r2
 800ea7e:	f7ff ffdb 	bl	800ea38 <__mcmp>
 800ea82:	1e05      	subs	r5, r0, #0
 800ea84:	d111      	bne.n	800eaaa <__mdiff+0x3a>
 800ea86:	4629      	mov	r1, r5
 800ea88:	4630      	mov	r0, r6
 800ea8a:	f7ff fd11 	bl	800e4b0 <_Balloc>
 800ea8e:	4602      	mov	r2, r0
 800ea90:	b928      	cbnz	r0, 800ea9e <__mdiff+0x2e>
 800ea92:	f240 2132 	movw	r1, #562	; 0x232
 800ea96:	4b3c      	ldr	r3, [pc, #240]	; (800eb88 <__mdiff+0x118>)
 800ea98:	483c      	ldr	r0, [pc, #240]	; (800eb8c <__mdiff+0x11c>)
 800ea9a:	f000 fb63 	bl	800f164 <__assert_func>
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eaa4:	4610      	mov	r0, r2
 800eaa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaaa:	bfa4      	itt	ge
 800eaac:	4653      	movge	r3, sl
 800eaae:	46a2      	movge	sl, r4
 800eab0:	4630      	mov	r0, r6
 800eab2:	f8da 1004 	ldr.w	r1, [sl, #4]
 800eab6:	bfa6      	itte	ge
 800eab8:	461c      	movge	r4, r3
 800eaba:	2500      	movge	r5, #0
 800eabc:	2501      	movlt	r5, #1
 800eabe:	f7ff fcf7 	bl	800e4b0 <_Balloc>
 800eac2:	4602      	mov	r2, r0
 800eac4:	b918      	cbnz	r0, 800eace <__mdiff+0x5e>
 800eac6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eaca:	4b2f      	ldr	r3, [pc, #188]	; (800eb88 <__mdiff+0x118>)
 800eacc:	e7e4      	b.n	800ea98 <__mdiff+0x28>
 800eace:	f100 0814 	add.w	r8, r0, #20
 800ead2:	f8da 7010 	ldr.w	r7, [sl, #16]
 800ead6:	60c5      	str	r5, [r0, #12]
 800ead8:	f04f 0c00 	mov.w	ip, #0
 800eadc:	f10a 0514 	add.w	r5, sl, #20
 800eae0:	f10a 0010 	add.w	r0, sl, #16
 800eae4:	46c2      	mov	sl, r8
 800eae6:	6926      	ldr	r6, [r4, #16]
 800eae8:	f104 0914 	add.w	r9, r4, #20
 800eaec:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800eaf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eaf4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800eaf8:	f859 3b04 	ldr.w	r3, [r9], #4
 800eafc:	fa1f f18b 	uxth.w	r1, fp
 800eb00:	4461      	add	r1, ip
 800eb02:	fa1f fc83 	uxth.w	ip, r3
 800eb06:	0c1b      	lsrs	r3, r3, #16
 800eb08:	eba1 010c 	sub.w	r1, r1, ip
 800eb0c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eb10:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800eb14:	b289      	uxth	r1, r1
 800eb16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800eb1a:	454e      	cmp	r6, r9
 800eb1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800eb20:	f84a 3b04 	str.w	r3, [sl], #4
 800eb24:	d8e6      	bhi.n	800eaf4 <__mdiff+0x84>
 800eb26:	1b33      	subs	r3, r6, r4
 800eb28:	3b15      	subs	r3, #21
 800eb2a:	f023 0303 	bic.w	r3, r3, #3
 800eb2e:	3415      	adds	r4, #21
 800eb30:	3304      	adds	r3, #4
 800eb32:	42a6      	cmp	r6, r4
 800eb34:	bf38      	it	cc
 800eb36:	2304      	movcc	r3, #4
 800eb38:	441d      	add	r5, r3
 800eb3a:	4443      	add	r3, r8
 800eb3c:	461e      	mov	r6, r3
 800eb3e:	462c      	mov	r4, r5
 800eb40:	4574      	cmp	r4, lr
 800eb42:	d30e      	bcc.n	800eb62 <__mdiff+0xf2>
 800eb44:	f10e 0103 	add.w	r1, lr, #3
 800eb48:	1b49      	subs	r1, r1, r5
 800eb4a:	f021 0103 	bic.w	r1, r1, #3
 800eb4e:	3d03      	subs	r5, #3
 800eb50:	45ae      	cmp	lr, r5
 800eb52:	bf38      	it	cc
 800eb54:	2100      	movcc	r1, #0
 800eb56:	4419      	add	r1, r3
 800eb58:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800eb5c:	b18b      	cbz	r3, 800eb82 <__mdiff+0x112>
 800eb5e:	6117      	str	r7, [r2, #16]
 800eb60:	e7a0      	b.n	800eaa4 <__mdiff+0x34>
 800eb62:	f854 8b04 	ldr.w	r8, [r4], #4
 800eb66:	fa1f f188 	uxth.w	r1, r8
 800eb6a:	4461      	add	r1, ip
 800eb6c:	1408      	asrs	r0, r1, #16
 800eb6e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800eb72:	b289      	uxth	r1, r1
 800eb74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eb78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb7c:	f846 1b04 	str.w	r1, [r6], #4
 800eb80:	e7de      	b.n	800eb40 <__mdiff+0xd0>
 800eb82:	3f01      	subs	r7, #1
 800eb84:	e7e8      	b.n	800eb58 <__mdiff+0xe8>
 800eb86:	bf00      	nop
 800eb88:	0800faec 	.word	0x0800faec
 800eb8c:	0800fb7c 	.word	0x0800fb7c

0800eb90 <__ulp>:
 800eb90:	4b11      	ldr	r3, [pc, #68]	; (800ebd8 <__ulp+0x48>)
 800eb92:	400b      	ands	r3, r1
 800eb94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	dd02      	ble.n	800eba2 <__ulp+0x12>
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	4619      	mov	r1, r3
 800eba0:	4770      	bx	lr
 800eba2:	425b      	negs	r3, r3
 800eba4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800eba8:	f04f 0000 	mov.w	r0, #0
 800ebac:	f04f 0100 	mov.w	r1, #0
 800ebb0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ebb4:	da04      	bge.n	800ebc0 <__ulp+0x30>
 800ebb6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ebba:	fa43 f102 	asr.w	r1, r3, r2
 800ebbe:	4770      	bx	lr
 800ebc0:	f1a2 0314 	sub.w	r3, r2, #20
 800ebc4:	2b1e      	cmp	r3, #30
 800ebc6:	bfd6      	itet	le
 800ebc8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ebcc:	2301      	movgt	r3, #1
 800ebce:	fa22 f303 	lsrle.w	r3, r2, r3
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	7ff00000 	.word	0x7ff00000

0800ebdc <__b2d>:
 800ebdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebe0:	6907      	ldr	r7, [r0, #16]
 800ebe2:	f100 0914 	add.w	r9, r0, #20
 800ebe6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800ebea:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800ebee:	f1a7 0804 	sub.w	r8, r7, #4
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	f7ff fd52 	bl	800e69c <__hi0bits>
 800ebf8:	f1c0 0320 	rsb	r3, r0, #32
 800ebfc:	280a      	cmp	r0, #10
 800ebfe:	600b      	str	r3, [r1, #0]
 800ec00:	491f      	ldr	r1, [pc, #124]	; (800ec80 <__b2d+0xa4>)
 800ec02:	dc17      	bgt.n	800ec34 <__b2d+0x58>
 800ec04:	45c1      	cmp	r9, r8
 800ec06:	bf28      	it	cs
 800ec08:	2200      	movcs	r2, #0
 800ec0a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ec0e:	fa26 f30c 	lsr.w	r3, r6, ip
 800ec12:	bf38      	it	cc
 800ec14:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ec18:	ea43 0501 	orr.w	r5, r3, r1
 800ec1c:	f100 0315 	add.w	r3, r0, #21
 800ec20:	fa06 f303 	lsl.w	r3, r6, r3
 800ec24:	fa22 f20c 	lsr.w	r2, r2, ip
 800ec28:	ea43 0402 	orr.w	r4, r3, r2
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	4629      	mov	r1, r5
 800ec30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec34:	45c1      	cmp	r9, r8
 800ec36:	bf2e      	itee	cs
 800ec38:	2200      	movcs	r2, #0
 800ec3a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ec3e:	f1a7 0808 	subcc.w	r8, r7, #8
 800ec42:	f1b0 030b 	subs.w	r3, r0, #11
 800ec46:	d016      	beq.n	800ec76 <__b2d+0x9a>
 800ec48:	f1c3 0720 	rsb	r7, r3, #32
 800ec4c:	fa22 f107 	lsr.w	r1, r2, r7
 800ec50:	45c8      	cmp	r8, r9
 800ec52:	fa06 f603 	lsl.w	r6, r6, r3
 800ec56:	ea46 0601 	orr.w	r6, r6, r1
 800ec5a:	bf94      	ite	ls
 800ec5c:	2100      	movls	r1, #0
 800ec5e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ec62:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800ec66:	fa02 f003 	lsl.w	r0, r2, r3
 800ec6a:	40f9      	lsrs	r1, r7
 800ec6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ec70:	ea40 0401 	orr.w	r4, r0, r1
 800ec74:	e7da      	b.n	800ec2c <__b2d+0x50>
 800ec76:	4614      	mov	r4, r2
 800ec78:	ea46 0501 	orr.w	r5, r6, r1
 800ec7c:	e7d6      	b.n	800ec2c <__b2d+0x50>
 800ec7e:	bf00      	nop
 800ec80:	3ff00000 	.word	0x3ff00000

0800ec84 <__d2b>:
 800ec84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ec88:	2101      	movs	r1, #1
 800ec8a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ec8e:	4690      	mov	r8, r2
 800ec90:	461d      	mov	r5, r3
 800ec92:	f7ff fc0d 	bl	800e4b0 <_Balloc>
 800ec96:	4604      	mov	r4, r0
 800ec98:	b930      	cbnz	r0, 800eca8 <__d2b+0x24>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	f240 310a 	movw	r1, #778	; 0x30a
 800eca0:	4b24      	ldr	r3, [pc, #144]	; (800ed34 <__d2b+0xb0>)
 800eca2:	4825      	ldr	r0, [pc, #148]	; (800ed38 <__d2b+0xb4>)
 800eca4:	f000 fa5e 	bl	800f164 <__assert_func>
 800eca8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ecac:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ecb0:	bb2d      	cbnz	r5, 800ecfe <__d2b+0x7a>
 800ecb2:	9301      	str	r3, [sp, #4]
 800ecb4:	f1b8 0300 	subs.w	r3, r8, #0
 800ecb8:	d026      	beq.n	800ed08 <__d2b+0x84>
 800ecba:	4668      	mov	r0, sp
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	f7ff fd0d 	bl	800e6dc <__lo0bits>
 800ecc2:	9900      	ldr	r1, [sp, #0]
 800ecc4:	b1f0      	cbz	r0, 800ed04 <__d2b+0x80>
 800ecc6:	9a01      	ldr	r2, [sp, #4]
 800ecc8:	f1c0 0320 	rsb	r3, r0, #32
 800eccc:	fa02 f303 	lsl.w	r3, r2, r3
 800ecd0:	430b      	orrs	r3, r1
 800ecd2:	40c2      	lsrs	r2, r0
 800ecd4:	6163      	str	r3, [r4, #20]
 800ecd6:	9201      	str	r2, [sp, #4]
 800ecd8:	9b01      	ldr	r3, [sp, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	bf14      	ite	ne
 800ecde:	2102      	movne	r1, #2
 800ece0:	2101      	moveq	r1, #1
 800ece2:	61a3      	str	r3, [r4, #24]
 800ece4:	6121      	str	r1, [r4, #16]
 800ece6:	b1c5      	cbz	r5, 800ed1a <__d2b+0x96>
 800ece8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ecec:	4405      	add	r5, r0
 800ecee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ecf2:	603d      	str	r5, [r7, #0]
 800ecf4:	6030      	str	r0, [r6, #0]
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	b002      	add	sp, #8
 800ecfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed02:	e7d6      	b.n	800ecb2 <__d2b+0x2e>
 800ed04:	6161      	str	r1, [r4, #20]
 800ed06:	e7e7      	b.n	800ecd8 <__d2b+0x54>
 800ed08:	a801      	add	r0, sp, #4
 800ed0a:	f7ff fce7 	bl	800e6dc <__lo0bits>
 800ed0e:	2101      	movs	r1, #1
 800ed10:	9b01      	ldr	r3, [sp, #4]
 800ed12:	6121      	str	r1, [r4, #16]
 800ed14:	6163      	str	r3, [r4, #20]
 800ed16:	3020      	adds	r0, #32
 800ed18:	e7e5      	b.n	800ece6 <__d2b+0x62>
 800ed1a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ed1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed22:	6038      	str	r0, [r7, #0]
 800ed24:	6918      	ldr	r0, [r3, #16]
 800ed26:	f7ff fcb9 	bl	800e69c <__hi0bits>
 800ed2a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ed2e:	6031      	str	r1, [r6, #0]
 800ed30:	e7e1      	b.n	800ecf6 <__d2b+0x72>
 800ed32:	bf00      	nop
 800ed34:	0800faec 	.word	0x0800faec
 800ed38:	0800fb7c 	.word	0x0800fb7c

0800ed3c <__ratio>:
 800ed3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed40:	4688      	mov	r8, r1
 800ed42:	4669      	mov	r1, sp
 800ed44:	4681      	mov	r9, r0
 800ed46:	f7ff ff49 	bl	800ebdc <__b2d>
 800ed4a:	460f      	mov	r7, r1
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	460d      	mov	r5, r1
 800ed50:	4640      	mov	r0, r8
 800ed52:	a901      	add	r1, sp, #4
 800ed54:	f7ff ff42 	bl	800ebdc <__b2d>
 800ed58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed5c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ed60:	468b      	mov	fp, r1
 800ed62:	eba3 0c02 	sub.w	ip, r3, r2
 800ed66:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ed6a:	1a9b      	subs	r3, r3, r2
 800ed6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	bfd5      	itete	le
 800ed74:	460a      	movle	r2, r1
 800ed76:	462a      	movgt	r2, r5
 800ed78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ed7c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ed80:	bfd8      	it	le
 800ed82:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ed86:	465b      	mov	r3, fp
 800ed88:	4602      	mov	r2, r0
 800ed8a:	4639      	mov	r1, r7
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	f7f1 fd0d 	bl	80007ac <__aeabi_ddiv>
 800ed92:	b003      	add	sp, #12
 800ed94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed98 <__copybits>:
 800ed98:	3901      	subs	r1, #1
 800ed9a:	b570      	push	{r4, r5, r6, lr}
 800ed9c:	1149      	asrs	r1, r1, #5
 800ed9e:	6914      	ldr	r4, [r2, #16]
 800eda0:	3101      	adds	r1, #1
 800eda2:	f102 0314 	add.w	r3, r2, #20
 800eda6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800edaa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800edae:	1f05      	subs	r5, r0, #4
 800edb0:	42a3      	cmp	r3, r4
 800edb2:	d30c      	bcc.n	800edce <__copybits+0x36>
 800edb4:	1aa3      	subs	r3, r4, r2
 800edb6:	3b11      	subs	r3, #17
 800edb8:	f023 0303 	bic.w	r3, r3, #3
 800edbc:	3211      	adds	r2, #17
 800edbe:	42a2      	cmp	r2, r4
 800edc0:	bf88      	it	hi
 800edc2:	2300      	movhi	r3, #0
 800edc4:	4418      	add	r0, r3
 800edc6:	2300      	movs	r3, #0
 800edc8:	4288      	cmp	r0, r1
 800edca:	d305      	bcc.n	800edd8 <__copybits+0x40>
 800edcc:	bd70      	pop	{r4, r5, r6, pc}
 800edce:	f853 6b04 	ldr.w	r6, [r3], #4
 800edd2:	f845 6f04 	str.w	r6, [r5, #4]!
 800edd6:	e7eb      	b.n	800edb0 <__copybits+0x18>
 800edd8:	f840 3b04 	str.w	r3, [r0], #4
 800eddc:	e7f4      	b.n	800edc8 <__copybits+0x30>

0800edde <__any_on>:
 800edde:	f100 0214 	add.w	r2, r0, #20
 800ede2:	6900      	ldr	r0, [r0, #16]
 800ede4:	114b      	asrs	r3, r1, #5
 800ede6:	4298      	cmp	r0, r3
 800ede8:	b510      	push	{r4, lr}
 800edea:	db11      	blt.n	800ee10 <__any_on+0x32>
 800edec:	dd0a      	ble.n	800ee04 <__any_on+0x26>
 800edee:	f011 011f 	ands.w	r1, r1, #31
 800edf2:	d007      	beq.n	800ee04 <__any_on+0x26>
 800edf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800edf8:	fa24 f001 	lsr.w	r0, r4, r1
 800edfc:	fa00 f101 	lsl.w	r1, r0, r1
 800ee00:	428c      	cmp	r4, r1
 800ee02:	d10b      	bne.n	800ee1c <__any_on+0x3e>
 800ee04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d803      	bhi.n	800ee14 <__any_on+0x36>
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	bd10      	pop	{r4, pc}
 800ee10:	4603      	mov	r3, r0
 800ee12:	e7f7      	b.n	800ee04 <__any_on+0x26>
 800ee14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee18:	2900      	cmp	r1, #0
 800ee1a:	d0f5      	beq.n	800ee08 <__any_on+0x2a>
 800ee1c:	2001      	movs	r0, #1
 800ee1e:	e7f6      	b.n	800ee0e <__any_on+0x30>

0800ee20 <_calloc_r>:
 800ee20:	b538      	push	{r3, r4, r5, lr}
 800ee22:	fb02 f501 	mul.w	r5, r2, r1
 800ee26:	4629      	mov	r1, r5
 800ee28:	f7fc fa50 	bl	800b2cc <_malloc_r>
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	b118      	cbz	r0, 800ee38 <_calloc_r+0x18>
 800ee30:	462a      	mov	r2, r5
 800ee32:	2100      	movs	r1, #0
 800ee34:	f7fc f9f6 	bl	800b224 <memset>
 800ee38:	4620      	mov	r0, r4
 800ee3a:	bd38      	pop	{r3, r4, r5, pc}

0800ee3c <__ssputs_r>:
 800ee3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee40:	688e      	ldr	r6, [r1, #8]
 800ee42:	4682      	mov	sl, r0
 800ee44:	429e      	cmp	r6, r3
 800ee46:	460c      	mov	r4, r1
 800ee48:	4690      	mov	r8, r2
 800ee4a:	461f      	mov	r7, r3
 800ee4c:	d838      	bhi.n	800eec0 <__ssputs_r+0x84>
 800ee4e:	898a      	ldrh	r2, [r1, #12]
 800ee50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee54:	d032      	beq.n	800eebc <__ssputs_r+0x80>
 800ee56:	6825      	ldr	r5, [r4, #0]
 800ee58:	6909      	ldr	r1, [r1, #16]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	eba5 0901 	sub.w	r9, r5, r1
 800ee60:	6965      	ldr	r5, [r4, #20]
 800ee62:	444b      	add	r3, r9
 800ee64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee6c:	106d      	asrs	r5, r5, #1
 800ee6e:	429d      	cmp	r5, r3
 800ee70:	bf38      	it	cc
 800ee72:	461d      	movcc	r5, r3
 800ee74:	0553      	lsls	r3, r2, #21
 800ee76:	d531      	bpl.n	800eedc <__ssputs_r+0xa0>
 800ee78:	4629      	mov	r1, r5
 800ee7a:	f7fc fa27 	bl	800b2cc <_malloc_r>
 800ee7e:	4606      	mov	r6, r0
 800ee80:	b950      	cbnz	r0, 800ee98 <__ssputs_r+0x5c>
 800ee82:	230c      	movs	r3, #12
 800ee84:	f04f 30ff 	mov.w	r0, #4294967295
 800ee88:	f8ca 3000 	str.w	r3, [sl]
 800ee8c:	89a3      	ldrh	r3, [r4, #12]
 800ee8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee92:	81a3      	strh	r3, [r4, #12]
 800ee94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee98:	464a      	mov	r2, r9
 800ee9a:	6921      	ldr	r1, [r4, #16]
 800ee9c:	f7fc f9b4 	bl	800b208 <memcpy>
 800eea0:	89a3      	ldrh	r3, [r4, #12]
 800eea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eeaa:	81a3      	strh	r3, [r4, #12]
 800eeac:	6126      	str	r6, [r4, #16]
 800eeae:	444e      	add	r6, r9
 800eeb0:	6026      	str	r6, [r4, #0]
 800eeb2:	463e      	mov	r6, r7
 800eeb4:	6165      	str	r5, [r4, #20]
 800eeb6:	eba5 0509 	sub.w	r5, r5, r9
 800eeba:	60a5      	str	r5, [r4, #8]
 800eebc:	42be      	cmp	r6, r7
 800eebe:	d900      	bls.n	800eec2 <__ssputs_r+0x86>
 800eec0:	463e      	mov	r6, r7
 800eec2:	4632      	mov	r2, r6
 800eec4:	4641      	mov	r1, r8
 800eec6:	6820      	ldr	r0, [r4, #0]
 800eec8:	f000 f97c 	bl	800f1c4 <memmove>
 800eecc:	68a3      	ldr	r3, [r4, #8]
 800eece:	6822      	ldr	r2, [r4, #0]
 800eed0:	1b9b      	subs	r3, r3, r6
 800eed2:	4432      	add	r2, r6
 800eed4:	2000      	movs	r0, #0
 800eed6:	60a3      	str	r3, [r4, #8]
 800eed8:	6022      	str	r2, [r4, #0]
 800eeda:	e7db      	b.n	800ee94 <__ssputs_r+0x58>
 800eedc:	462a      	mov	r2, r5
 800eede:	f000 f98b 	bl	800f1f8 <_realloc_r>
 800eee2:	4606      	mov	r6, r0
 800eee4:	2800      	cmp	r0, #0
 800eee6:	d1e1      	bne.n	800eeac <__ssputs_r+0x70>
 800eee8:	4650      	mov	r0, sl
 800eeea:	6921      	ldr	r1, [r4, #16]
 800eeec:	f7fc f9a2 	bl	800b234 <_free_r>
 800eef0:	e7c7      	b.n	800ee82 <__ssputs_r+0x46>
	...

0800eef4 <_svfiprintf_r>:
 800eef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef8:	4698      	mov	r8, r3
 800eefa:	898b      	ldrh	r3, [r1, #12]
 800eefc:	4607      	mov	r7, r0
 800eefe:	061b      	lsls	r3, r3, #24
 800ef00:	460d      	mov	r5, r1
 800ef02:	4614      	mov	r4, r2
 800ef04:	b09d      	sub	sp, #116	; 0x74
 800ef06:	d50e      	bpl.n	800ef26 <_svfiprintf_r+0x32>
 800ef08:	690b      	ldr	r3, [r1, #16]
 800ef0a:	b963      	cbnz	r3, 800ef26 <_svfiprintf_r+0x32>
 800ef0c:	2140      	movs	r1, #64	; 0x40
 800ef0e:	f7fc f9dd 	bl	800b2cc <_malloc_r>
 800ef12:	6028      	str	r0, [r5, #0]
 800ef14:	6128      	str	r0, [r5, #16]
 800ef16:	b920      	cbnz	r0, 800ef22 <_svfiprintf_r+0x2e>
 800ef18:	230c      	movs	r3, #12
 800ef1a:	603b      	str	r3, [r7, #0]
 800ef1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef20:	e0d1      	b.n	800f0c6 <_svfiprintf_r+0x1d2>
 800ef22:	2340      	movs	r3, #64	; 0x40
 800ef24:	616b      	str	r3, [r5, #20]
 800ef26:	2300      	movs	r3, #0
 800ef28:	9309      	str	r3, [sp, #36]	; 0x24
 800ef2a:	2320      	movs	r3, #32
 800ef2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef30:	2330      	movs	r3, #48	; 0x30
 800ef32:	f04f 0901 	mov.w	r9, #1
 800ef36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f0e0 <_svfiprintf_r+0x1ec>
 800ef3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef42:	4623      	mov	r3, r4
 800ef44:	469a      	mov	sl, r3
 800ef46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef4a:	b10a      	cbz	r2, 800ef50 <_svfiprintf_r+0x5c>
 800ef4c:	2a25      	cmp	r2, #37	; 0x25
 800ef4e:	d1f9      	bne.n	800ef44 <_svfiprintf_r+0x50>
 800ef50:	ebba 0b04 	subs.w	fp, sl, r4
 800ef54:	d00b      	beq.n	800ef6e <_svfiprintf_r+0x7a>
 800ef56:	465b      	mov	r3, fp
 800ef58:	4622      	mov	r2, r4
 800ef5a:	4629      	mov	r1, r5
 800ef5c:	4638      	mov	r0, r7
 800ef5e:	f7ff ff6d 	bl	800ee3c <__ssputs_r>
 800ef62:	3001      	adds	r0, #1
 800ef64:	f000 80aa 	beq.w	800f0bc <_svfiprintf_r+0x1c8>
 800ef68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef6a:	445a      	add	r2, fp
 800ef6c:	9209      	str	r2, [sp, #36]	; 0x24
 800ef6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	f000 80a2 	beq.w	800f0bc <_svfiprintf_r+0x1c8>
 800ef78:	2300      	movs	r3, #0
 800ef7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef82:	f10a 0a01 	add.w	sl, sl, #1
 800ef86:	9304      	str	r3, [sp, #16]
 800ef88:	9307      	str	r3, [sp, #28]
 800ef8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef8e:	931a      	str	r3, [sp, #104]	; 0x68
 800ef90:	4654      	mov	r4, sl
 800ef92:	2205      	movs	r2, #5
 800ef94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef98:	4851      	ldr	r0, [pc, #324]	; (800f0e0 <_svfiprintf_r+0x1ec>)
 800ef9a:	f7ff fa6f 	bl	800e47c <memchr>
 800ef9e:	9a04      	ldr	r2, [sp, #16]
 800efa0:	b9d8      	cbnz	r0, 800efda <_svfiprintf_r+0xe6>
 800efa2:	06d0      	lsls	r0, r2, #27
 800efa4:	bf44      	itt	mi
 800efa6:	2320      	movmi	r3, #32
 800efa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efac:	0711      	lsls	r1, r2, #28
 800efae:	bf44      	itt	mi
 800efb0:	232b      	movmi	r3, #43	; 0x2b
 800efb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efb6:	f89a 3000 	ldrb.w	r3, [sl]
 800efba:	2b2a      	cmp	r3, #42	; 0x2a
 800efbc:	d015      	beq.n	800efea <_svfiprintf_r+0xf6>
 800efbe:	4654      	mov	r4, sl
 800efc0:	2000      	movs	r0, #0
 800efc2:	f04f 0c0a 	mov.w	ip, #10
 800efc6:	9a07      	ldr	r2, [sp, #28]
 800efc8:	4621      	mov	r1, r4
 800efca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efce:	3b30      	subs	r3, #48	; 0x30
 800efd0:	2b09      	cmp	r3, #9
 800efd2:	d94e      	bls.n	800f072 <_svfiprintf_r+0x17e>
 800efd4:	b1b0      	cbz	r0, 800f004 <_svfiprintf_r+0x110>
 800efd6:	9207      	str	r2, [sp, #28]
 800efd8:	e014      	b.n	800f004 <_svfiprintf_r+0x110>
 800efda:	eba0 0308 	sub.w	r3, r0, r8
 800efde:	fa09 f303 	lsl.w	r3, r9, r3
 800efe2:	4313      	orrs	r3, r2
 800efe4:	46a2      	mov	sl, r4
 800efe6:	9304      	str	r3, [sp, #16]
 800efe8:	e7d2      	b.n	800ef90 <_svfiprintf_r+0x9c>
 800efea:	9b03      	ldr	r3, [sp, #12]
 800efec:	1d19      	adds	r1, r3, #4
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	9103      	str	r1, [sp, #12]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	bfbb      	ittet	lt
 800eff6:	425b      	neglt	r3, r3
 800eff8:	f042 0202 	orrlt.w	r2, r2, #2
 800effc:	9307      	strge	r3, [sp, #28]
 800effe:	9307      	strlt	r3, [sp, #28]
 800f000:	bfb8      	it	lt
 800f002:	9204      	strlt	r2, [sp, #16]
 800f004:	7823      	ldrb	r3, [r4, #0]
 800f006:	2b2e      	cmp	r3, #46	; 0x2e
 800f008:	d10c      	bne.n	800f024 <_svfiprintf_r+0x130>
 800f00a:	7863      	ldrb	r3, [r4, #1]
 800f00c:	2b2a      	cmp	r3, #42	; 0x2a
 800f00e:	d135      	bne.n	800f07c <_svfiprintf_r+0x188>
 800f010:	9b03      	ldr	r3, [sp, #12]
 800f012:	3402      	adds	r4, #2
 800f014:	1d1a      	adds	r2, r3, #4
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	9203      	str	r2, [sp, #12]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	bfb8      	it	lt
 800f01e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f022:	9305      	str	r3, [sp, #20]
 800f024:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f0f0 <_svfiprintf_r+0x1fc>
 800f028:	2203      	movs	r2, #3
 800f02a:	4650      	mov	r0, sl
 800f02c:	7821      	ldrb	r1, [r4, #0]
 800f02e:	f7ff fa25 	bl	800e47c <memchr>
 800f032:	b140      	cbz	r0, 800f046 <_svfiprintf_r+0x152>
 800f034:	2340      	movs	r3, #64	; 0x40
 800f036:	eba0 000a 	sub.w	r0, r0, sl
 800f03a:	fa03 f000 	lsl.w	r0, r3, r0
 800f03e:	9b04      	ldr	r3, [sp, #16]
 800f040:	3401      	adds	r4, #1
 800f042:	4303      	orrs	r3, r0
 800f044:	9304      	str	r3, [sp, #16]
 800f046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f04a:	2206      	movs	r2, #6
 800f04c:	4825      	ldr	r0, [pc, #148]	; (800f0e4 <_svfiprintf_r+0x1f0>)
 800f04e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f052:	f7ff fa13 	bl	800e47c <memchr>
 800f056:	2800      	cmp	r0, #0
 800f058:	d038      	beq.n	800f0cc <_svfiprintf_r+0x1d8>
 800f05a:	4b23      	ldr	r3, [pc, #140]	; (800f0e8 <_svfiprintf_r+0x1f4>)
 800f05c:	bb1b      	cbnz	r3, 800f0a6 <_svfiprintf_r+0x1b2>
 800f05e:	9b03      	ldr	r3, [sp, #12]
 800f060:	3307      	adds	r3, #7
 800f062:	f023 0307 	bic.w	r3, r3, #7
 800f066:	3308      	adds	r3, #8
 800f068:	9303      	str	r3, [sp, #12]
 800f06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f06c:	4433      	add	r3, r6
 800f06e:	9309      	str	r3, [sp, #36]	; 0x24
 800f070:	e767      	b.n	800ef42 <_svfiprintf_r+0x4e>
 800f072:	460c      	mov	r4, r1
 800f074:	2001      	movs	r0, #1
 800f076:	fb0c 3202 	mla	r2, ip, r2, r3
 800f07a:	e7a5      	b.n	800efc8 <_svfiprintf_r+0xd4>
 800f07c:	2300      	movs	r3, #0
 800f07e:	f04f 0c0a 	mov.w	ip, #10
 800f082:	4619      	mov	r1, r3
 800f084:	3401      	adds	r4, #1
 800f086:	9305      	str	r3, [sp, #20]
 800f088:	4620      	mov	r0, r4
 800f08a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f08e:	3a30      	subs	r2, #48	; 0x30
 800f090:	2a09      	cmp	r2, #9
 800f092:	d903      	bls.n	800f09c <_svfiprintf_r+0x1a8>
 800f094:	2b00      	cmp	r3, #0
 800f096:	d0c5      	beq.n	800f024 <_svfiprintf_r+0x130>
 800f098:	9105      	str	r1, [sp, #20]
 800f09a:	e7c3      	b.n	800f024 <_svfiprintf_r+0x130>
 800f09c:	4604      	mov	r4, r0
 800f09e:	2301      	movs	r3, #1
 800f0a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0a4:	e7f0      	b.n	800f088 <_svfiprintf_r+0x194>
 800f0a6:	ab03      	add	r3, sp, #12
 800f0a8:	9300      	str	r3, [sp, #0]
 800f0aa:	462a      	mov	r2, r5
 800f0ac:	4638      	mov	r0, r7
 800f0ae:	4b0f      	ldr	r3, [pc, #60]	; (800f0ec <_svfiprintf_r+0x1f8>)
 800f0b0:	a904      	add	r1, sp, #16
 800f0b2:	f7fc fa03 	bl	800b4bc <_printf_float>
 800f0b6:	1c42      	adds	r2, r0, #1
 800f0b8:	4606      	mov	r6, r0
 800f0ba:	d1d6      	bne.n	800f06a <_svfiprintf_r+0x176>
 800f0bc:	89ab      	ldrh	r3, [r5, #12]
 800f0be:	065b      	lsls	r3, r3, #25
 800f0c0:	f53f af2c 	bmi.w	800ef1c <_svfiprintf_r+0x28>
 800f0c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0c6:	b01d      	add	sp, #116	; 0x74
 800f0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0cc:	ab03      	add	r3, sp, #12
 800f0ce:	9300      	str	r3, [sp, #0]
 800f0d0:	462a      	mov	r2, r5
 800f0d2:	4638      	mov	r0, r7
 800f0d4:	4b05      	ldr	r3, [pc, #20]	; (800f0ec <_svfiprintf_r+0x1f8>)
 800f0d6:	a904      	add	r1, sp, #16
 800f0d8:	f7fc fc8c 	bl	800b9f4 <_printf_i>
 800f0dc:	e7eb      	b.n	800f0b6 <_svfiprintf_r+0x1c2>
 800f0de:	bf00      	nop
 800f0e0:	0800fcdc 	.word	0x0800fcdc
 800f0e4:	0800fce6 	.word	0x0800fce6
 800f0e8:	0800b4bd 	.word	0x0800b4bd
 800f0ec:	0800ee3d 	.word	0x0800ee3d
 800f0f0:	0800fce2 	.word	0x0800fce2

0800f0f4 <_read_r>:
 800f0f4:	b538      	push	{r3, r4, r5, lr}
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	4608      	mov	r0, r1
 800f0fa:	4611      	mov	r1, r2
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	4d05      	ldr	r5, [pc, #20]	; (800f114 <_read_r+0x20>)
 800f100:	602a      	str	r2, [r5, #0]
 800f102:	461a      	mov	r2, r3
 800f104:	f7f2 fe49 	bl	8001d9a <_read>
 800f108:	1c43      	adds	r3, r0, #1
 800f10a:	d102      	bne.n	800f112 <_read_r+0x1e>
 800f10c:	682b      	ldr	r3, [r5, #0]
 800f10e:	b103      	cbz	r3, 800f112 <_read_r+0x1e>
 800f110:	6023      	str	r3, [r4, #0]
 800f112:	bd38      	pop	{r3, r4, r5, pc}
 800f114:	20005484 	.word	0x20005484

0800f118 <nan>:
 800f118:	2000      	movs	r0, #0
 800f11a:	4901      	ldr	r1, [pc, #4]	; (800f120 <nan+0x8>)
 800f11c:	4770      	bx	lr
 800f11e:	bf00      	nop
 800f120:	7ff80000 	.word	0x7ff80000

0800f124 <strncmp>:
 800f124:	b510      	push	{r4, lr}
 800f126:	b16a      	cbz	r2, 800f144 <strncmp+0x20>
 800f128:	3901      	subs	r1, #1
 800f12a:	1884      	adds	r4, r0, r2
 800f12c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f130:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f134:	4293      	cmp	r3, r2
 800f136:	d103      	bne.n	800f140 <strncmp+0x1c>
 800f138:	42a0      	cmp	r0, r4
 800f13a:	d001      	beq.n	800f140 <strncmp+0x1c>
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d1f5      	bne.n	800f12c <strncmp+0x8>
 800f140:	1a98      	subs	r0, r3, r2
 800f142:	bd10      	pop	{r4, pc}
 800f144:	4610      	mov	r0, r2
 800f146:	e7fc      	b.n	800f142 <strncmp+0x1e>

0800f148 <__ascii_wctomb>:
 800f148:	4603      	mov	r3, r0
 800f14a:	4608      	mov	r0, r1
 800f14c:	b141      	cbz	r1, 800f160 <__ascii_wctomb+0x18>
 800f14e:	2aff      	cmp	r2, #255	; 0xff
 800f150:	d904      	bls.n	800f15c <__ascii_wctomb+0x14>
 800f152:	228a      	movs	r2, #138	; 0x8a
 800f154:	f04f 30ff 	mov.w	r0, #4294967295
 800f158:	601a      	str	r2, [r3, #0]
 800f15a:	4770      	bx	lr
 800f15c:	2001      	movs	r0, #1
 800f15e:	700a      	strb	r2, [r1, #0]
 800f160:	4770      	bx	lr
	...

0800f164 <__assert_func>:
 800f164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f166:	4614      	mov	r4, r2
 800f168:	461a      	mov	r2, r3
 800f16a:	4b09      	ldr	r3, [pc, #36]	; (800f190 <__assert_func+0x2c>)
 800f16c:	4605      	mov	r5, r0
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	68d8      	ldr	r0, [r3, #12]
 800f172:	b14c      	cbz	r4, 800f188 <__assert_func+0x24>
 800f174:	4b07      	ldr	r3, [pc, #28]	; (800f194 <__assert_func+0x30>)
 800f176:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f17a:	9100      	str	r1, [sp, #0]
 800f17c:	462b      	mov	r3, r5
 800f17e:	4906      	ldr	r1, [pc, #24]	; (800f198 <__assert_func+0x34>)
 800f180:	f000 f80e 	bl	800f1a0 <fiprintf>
 800f184:	f000 fa76 	bl	800f674 <abort>
 800f188:	4b04      	ldr	r3, [pc, #16]	; (800f19c <__assert_func+0x38>)
 800f18a:	461c      	mov	r4, r3
 800f18c:	e7f3      	b.n	800f176 <__assert_func+0x12>
 800f18e:	bf00      	nop
 800f190:	2000001c 	.word	0x2000001c
 800f194:	0800fced 	.word	0x0800fced
 800f198:	0800fcfa 	.word	0x0800fcfa
 800f19c:	0800fd28 	.word	0x0800fd28

0800f1a0 <fiprintf>:
 800f1a0:	b40e      	push	{r1, r2, r3}
 800f1a2:	b503      	push	{r0, r1, lr}
 800f1a4:	4601      	mov	r1, r0
 800f1a6:	ab03      	add	r3, sp, #12
 800f1a8:	4805      	ldr	r0, [pc, #20]	; (800f1c0 <fiprintf+0x20>)
 800f1aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1ae:	6800      	ldr	r0, [r0, #0]
 800f1b0:	9301      	str	r3, [sp, #4]
 800f1b2:	f000 f86f 	bl	800f294 <_vfiprintf_r>
 800f1b6:	b002      	add	sp, #8
 800f1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1bc:	b003      	add	sp, #12
 800f1be:	4770      	bx	lr
 800f1c0:	2000001c 	.word	0x2000001c

0800f1c4 <memmove>:
 800f1c4:	4288      	cmp	r0, r1
 800f1c6:	b510      	push	{r4, lr}
 800f1c8:	eb01 0402 	add.w	r4, r1, r2
 800f1cc:	d902      	bls.n	800f1d4 <memmove+0x10>
 800f1ce:	4284      	cmp	r4, r0
 800f1d0:	4623      	mov	r3, r4
 800f1d2:	d807      	bhi.n	800f1e4 <memmove+0x20>
 800f1d4:	1e43      	subs	r3, r0, #1
 800f1d6:	42a1      	cmp	r1, r4
 800f1d8:	d008      	beq.n	800f1ec <memmove+0x28>
 800f1da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1e2:	e7f8      	b.n	800f1d6 <memmove+0x12>
 800f1e4:	4601      	mov	r1, r0
 800f1e6:	4402      	add	r2, r0
 800f1e8:	428a      	cmp	r2, r1
 800f1ea:	d100      	bne.n	800f1ee <memmove+0x2a>
 800f1ec:	bd10      	pop	{r4, pc}
 800f1ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1f6:	e7f7      	b.n	800f1e8 <memmove+0x24>

0800f1f8 <_realloc_r>:
 800f1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1fa:	4607      	mov	r7, r0
 800f1fc:	4614      	mov	r4, r2
 800f1fe:	460e      	mov	r6, r1
 800f200:	b921      	cbnz	r1, 800f20c <_realloc_r+0x14>
 800f202:	4611      	mov	r1, r2
 800f204:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f208:	f7fc b860 	b.w	800b2cc <_malloc_r>
 800f20c:	b922      	cbnz	r2, 800f218 <_realloc_r+0x20>
 800f20e:	f7fc f811 	bl	800b234 <_free_r>
 800f212:	4625      	mov	r5, r4
 800f214:	4628      	mov	r0, r5
 800f216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f218:	f000 fa98 	bl	800f74c <_malloc_usable_size_r>
 800f21c:	42a0      	cmp	r0, r4
 800f21e:	d20f      	bcs.n	800f240 <_realloc_r+0x48>
 800f220:	4621      	mov	r1, r4
 800f222:	4638      	mov	r0, r7
 800f224:	f7fc f852 	bl	800b2cc <_malloc_r>
 800f228:	4605      	mov	r5, r0
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d0f2      	beq.n	800f214 <_realloc_r+0x1c>
 800f22e:	4631      	mov	r1, r6
 800f230:	4622      	mov	r2, r4
 800f232:	f7fb ffe9 	bl	800b208 <memcpy>
 800f236:	4631      	mov	r1, r6
 800f238:	4638      	mov	r0, r7
 800f23a:	f7fb fffb 	bl	800b234 <_free_r>
 800f23e:	e7e9      	b.n	800f214 <_realloc_r+0x1c>
 800f240:	4635      	mov	r5, r6
 800f242:	e7e7      	b.n	800f214 <_realloc_r+0x1c>

0800f244 <__sfputc_r>:
 800f244:	6893      	ldr	r3, [r2, #8]
 800f246:	b410      	push	{r4}
 800f248:	3b01      	subs	r3, #1
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	6093      	str	r3, [r2, #8]
 800f24e:	da07      	bge.n	800f260 <__sfputc_r+0x1c>
 800f250:	6994      	ldr	r4, [r2, #24]
 800f252:	42a3      	cmp	r3, r4
 800f254:	db01      	blt.n	800f25a <__sfputc_r+0x16>
 800f256:	290a      	cmp	r1, #10
 800f258:	d102      	bne.n	800f260 <__sfputc_r+0x1c>
 800f25a:	bc10      	pop	{r4}
 800f25c:	f000 b94a 	b.w	800f4f4 <__swbuf_r>
 800f260:	6813      	ldr	r3, [r2, #0]
 800f262:	1c58      	adds	r0, r3, #1
 800f264:	6010      	str	r0, [r2, #0]
 800f266:	7019      	strb	r1, [r3, #0]
 800f268:	4608      	mov	r0, r1
 800f26a:	bc10      	pop	{r4}
 800f26c:	4770      	bx	lr

0800f26e <__sfputs_r>:
 800f26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f270:	4606      	mov	r6, r0
 800f272:	460f      	mov	r7, r1
 800f274:	4614      	mov	r4, r2
 800f276:	18d5      	adds	r5, r2, r3
 800f278:	42ac      	cmp	r4, r5
 800f27a:	d101      	bne.n	800f280 <__sfputs_r+0x12>
 800f27c:	2000      	movs	r0, #0
 800f27e:	e007      	b.n	800f290 <__sfputs_r+0x22>
 800f280:	463a      	mov	r2, r7
 800f282:	4630      	mov	r0, r6
 800f284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f288:	f7ff ffdc 	bl	800f244 <__sfputc_r>
 800f28c:	1c43      	adds	r3, r0, #1
 800f28e:	d1f3      	bne.n	800f278 <__sfputs_r+0xa>
 800f290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f294 <_vfiprintf_r>:
 800f294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f298:	460d      	mov	r5, r1
 800f29a:	4614      	mov	r4, r2
 800f29c:	4698      	mov	r8, r3
 800f29e:	4606      	mov	r6, r0
 800f2a0:	b09d      	sub	sp, #116	; 0x74
 800f2a2:	b118      	cbz	r0, 800f2ac <_vfiprintf_r+0x18>
 800f2a4:	6983      	ldr	r3, [r0, #24]
 800f2a6:	b90b      	cbnz	r3, 800f2ac <_vfiprintf_r+0x18>
 800f2a8:	f7fb fee0 	bl	800b06c <__sinit>
 800f2ac:	4b89      	ldr	r3, [pc, #548]	; (800f4d4 <_vfiprintf_r+0x240>)
 800f2ae:	429d      	cmp	r5, r3
 800f2b0:	d11b      	bne.n	800f2ea <_vfiprintf_r+0x56>
 800f2b2:	6875      	ldr	r5, [r6, #4]
 800f2b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2b6:	07d9      	lsls	r1, r3, #31
 800f2b8:	d405      	bmi.n	800f2c6 <_vfiprintf_r+0x32>
 800f2ba:	89ab      	ldrh	r3, [r5, #12]
 800f2bc:	059a      	lsls	r2, r3, #22
 800f2be:	d402      	bmi.n	800f2c6 <_vfiprintf_r+0x32>
 800f2c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2c2:	f7fb ff96 	bl	800b1f2 <__retarget_lock_acquire_recursive>
 800f2c6:	89ab      	ldrh	r3, [r5, #12]
 800f2c8:	071b      	lsls	r3, r3, #28
 800f2ca:	d501      	bpl.n	800f2d0 <_vfiprintf_r+0x3c>
 800f2cc:	692b      	ldr	r3, [r5, #16]
 800f2ce:	b9eb      	cbnz	r3, 800f30c <_vfiprintf_r+0x78>
 800f2d0:	4629      	mov	r1, r5
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	f000 f960 	bl	800f598 <__swsetup_r>
 800f2d8:	b1c0      	cbz	r0, 800f30c <_vfiprintf_r+0x78>
 800f2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2dc:	07dc      	lsls	r4, r3, #31
 800f2de:	d50e      	bpl.n	800f2fe <_vfiprintf_r+0x6a>
 800f2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e4:	b01d      	add	sp, #116	; 0x74
 800f2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ea:	4b7b      	ldr	r3, [pc, #492]	; (800f4d8 <_vfiprintf_r+0x244>)
 800f2ec:	429d      	cmp	r5, r3
 800f2ee:	d101      	bne.n	800f2f4 <_vfiprintf_r+0x60>
 800f2f0:	68b5      	ldr	r5, [r6, #8]
 800f2f2:	e7df      	b.n	800f2b4 <_vfiprintf_r+0x20>
 800f2f4:	4b79      	ldr	r3, [pc, #484]	; (800f4dc <_vfiprintf_r+0x248>)
 800f2f6:	429d      	cmp	r5, r3
 800f2f8:	bf08      	it	eq
 800f2fa:	68f5      	ldreq	r5, [r6, #12]
 800f2fc:	e7da      	b.n	800f2b4 <_vfiprintf_r+0x20>
 800f2fe:	89ab      	ldrh	r3, [r5, #12]
 800f300:	0598      	lsls	r0, r3, #22
 800f302:	d4ed      	bmi.n	800f2e0 <_vfiprintf_r+0x4c>
 800f304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f306:	f7fb ff75 	bl	800b1f4 <__retarget_lock_release_recursive>
 800f30a:	e7e9      	b.n	800f2e0 <_vfiprintf_r+0x4c>
 800f30c:	2300      	movs	r3, #0
 800f30e:	9309      	str	r3, [sp, #36]	; 0x24
 800f310:	2320      	movs	r3, #32
 800f312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f316:	2330      	movs	r3, #48	; 0x30
 800f318:	f04f 0901 	mov.w	r9, #1
 800f31c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f320:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800f4e0 <_vfiprintf_r+0x24c>
 800f324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f328:	4623      	mov	r3, r4
 800f32a:	469a      	mov	sl, r3
 800f32c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f330:	b10a      	cbz	r2, 800f336 <_vfiprintf_r+0xa2>
 800f332:	2a25      	cmp	r2, #37	; 0x25
 800f334:	d1f9      	bne.n	800f32a <_vfiprintf_r+0x96>
 800f336:	ebba 0b04 	subs.w	fp, sl, r4
 800f33a:	d00b      	beq.n	800f354 <_vfiprintf_r+0xc0>
 800f33c:	465b      	mov	r3, fp
 800f33e:	4622      	mov	r2, r4
 800f340:	4629      	mov	r1, r5
 800f342:	4630      	mov	r0, r6
 800f344:	f7ff ff93 	bl	800f26e <__sfputs_r>
 800f348:	3001      	adds	r0, #1
 800f34a:	f000 80aa 	beq.w	800f4a2 <_vfiprintf_r+0x20e>
 800f34e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f350:	445a      	add	r2, fp
 800f352:	9209      	str	r2, [sp, #36]	; 0x24
 800f354:	f89a 3000 	ldrb.w	r3, [sl]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	f000 80a2 	beq.w	800f4a2 <_vfiprintf_r+0x20e>
 800f35e:	2300      	movs	r3, #0
 800f360:	f04f 32ff 	mov.w	r2, #4294967295
 800f364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f368:	f10a 0a01 	add.w	sl, sl, #1
 800f36c:	9304      	str	r3, [sp, #16]
 800f36e:	9307      	str	r3, [sp, #28]
 800f370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f374:	931a      	str	r3, [sp, #104]	; 0x68
 800f376:	4654      	mov	r4, sl
 800f378:	2205      	movs	r2, #5
 800f37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f37e:	4858      	ldr	r0, [pc, #352]	; (800f4e0 <_vfiprintf_r+0x24c>)
 800f380:	f7ff f87c 	bl	800e47c <memchr>
 800f384:	9a04      	ldr	r2, [sp, #16]
 800f386:	b9d8      	cbnz	r0, 800f3c0 <_vfiprintf_r+0x12c>
 800f388:	06d1      	lsls	r1, r2, #27
 800f38a:	bf44      	itt	mi
 800f38c:	2320      	movmi	r3, #32
 800f38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f392:	0713      	lsls	r3, r2, #28
 800f394:	bf44      	itt	mi
 800f396:	232b      	movmi	r3, #43	; 0x2b
 800f398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f39c:	f89a 3000 	ldrb.w	r3, [sl]
 800f3a0:	2b2a      	cmp	r3, #42	; 0x2a
 800f3a2:	d015      	beq.n	800f3d0 <_vfiprintf_r+0x13c>
 800f3a4:	4654      	mov	r4, sl
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	f04f 0c0a 	mov.w	ip, #10
 800f3ac:	9a07      	ldr	r2, [sp, #28]
 800f3ae:	4621      	mov	r1, r4
 800f3b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3b4:	3b30      	subs	r3, #48	; 0x30
 800f3b6:	2b09      	cmp	r3, #9
 800f3b8:	d94e      	bls.n	800f458 <_vfiprintf_r+0x1c4>
 800f3ba:	b1b0      	cbz	r0, 800f3ea <_vfiprintf_r+0x156>
 800f3bc:	9207      	str	r2, [sp, #28]
 800f3be:	e014      	b.n	800f3ea <_vfiprintf_r+0x156>
 800f3c0:	eba0 0308 	sub.w	r3, r0, r8
 800f3c4:	fa09 f303 	lsl.w	r3, r9, r3
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	46a2      	mov	sl, r4
 800f3cc:	9304      	str	r3, [sp, #16]
 800f3ce:	e7d2      	b.n	800f376 <_vfiprintf_r+0xe2>
 800f3d0:	9b03      	ldr	r3, [sp, #12]
 800f3d2:	1d19      	adds	r1, r3, #4
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	9103      	str	r1, [sp, #12]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	bfbb      	ittet	lt
 800f3dc:	425b      	neglt	r3, r3
 800f3de:	f042 0202 	orrlt.w	r2, r2, #2
 800f3e2:	9307      	strge	r3, [sp, #28]
 800f3e4:	9307      	strlt	r3, [sp, #28]
 800f3e6:	bfb8      	it	lt
 800f3e8:	9204      	strlt	r2, [sp, #16]
 800f3ea:	7823      	ldrb	r3, [r4, #0]
 800f3ec:	2b2e      	cmp	r3, #46	; 0x2e
 800f3ee:	d10c      	bne.n	800f40a <_vfiprintf_r+0x176>
 800f3f0:	7863      	ldrb	r3, [r4, #1]
 800f3f2:	2b2a      	cmp	r3, #42	; 0x2a
 800f3f4:	d135      	bne.n	800f462 <_vfiprintf_r+0x1ce>
 800f3f6:	9b03      	ldr	r3, [sp, #12]
 800f3f8:	3402      	adds	r4, #2
 800f3fa:	1d1a      	adds	r2, r3, #4
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	9203      	str	r2, [sp, #12]
 800f400:	2b00      	cmp	r3, #0
 800f402:	bfb8      	it	lt
 800f404:	f04f 33ff 	movlt.w	r3, #4294967295
 800f408:	9305      	str	r3, [sp, #20]
 800f40a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f4f0 <_vfiprintf_r+0x25c>
 800f40e:	2203      	movs	r2, #3
 800f410:	4650      	mov	r0, sl
 800f412:	7821      	ldrb	r1, [r4, #0]
 800f414:	f7ff f832 	bl	800e47c <memchr>
 800f418:	b140      	cbz	r0, 800f42c <_vfiprintf_r+0x198>
 800f41a:	2340      	movs	r3, #64	; 0x40
 800f41c:	eba0 000a 	sub.w	r0, r0, sl
 800f420:	fa03 f000 	lsl.w	r0, r3, r0
 800f424:	9b04      	ldr	r3, [sp, #16]
 800f426:	3401      	adds	r4, #1
 800f428:	4303      	orrs	r3, r0
 800f42a:	9304      	str	r3, [sp, #16]
 800f42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f430:	2206      	movs	r2, #6
 800f432:	482c      	ldr	r0, [pc, #176]	; (800f4e4 <_vfiprintf_r+0x250>)
 800f434:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f438:	f7ff f820 	bl	800e47c <memchr>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	d03f      	beq.n	800f4c0 <_vfiprintf_r+0x22c>
 800f440:	4b29      	ldr	r3, [pc, #164]	; (800f4e8 <_vfiprintf_r+0x254>)
 800f442:	bb1b      	cbnz	r3, 800f48c <_vfiprintf_r+0x1f8>
 800f444:	9b03      	ldr	r3, [sp, #12]
 800f446:	3307      	adds	r3, #7
 800f448:	f023 0307 	bic.w	r3, r3, #7
 800f44c:	3308      	adds	r3, #8
 800f44e:	9303      	str	r3, [sp, #12]
 800f450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f452:	443b      	add	r3, r7
 800f454:	9309      	str	r3, [sp, #36]	; 0x24
 800f456:	e767      	b.n	800f328 <_vfiprintf_r+0x94>
 800f458:	460c      	mov	r4, r1
 800f45a:	2001      	movs	r0, #1
 800f45c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f460:	e7a5      	b.n	800f3ae <_vfiprintf_r+0x11a>
 800f462:	2300      	movs	r3, #0
 800f464:	f04f 0c0a 	mov.w	ip, #10
 800f468:	4619      	mov	r1, r3
 800f46a:	3401      	adds	r4, #1
 800f46c:	9305      	str	r3, [sp, #20]
 800f46e:	4620      	mov	r0, r4
 800f470:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f474:	3a30      	subs	r2, #48	; 0x30
 800f476:	2a09      	cmp	r2, #9
 800f478:	d903      	bls.n	800f482 <_vfiprintf_r+0x1ee>
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d0c5      	beq.n	800f40a <_vfiprintf_r+0x176>
 800f47e:	9105      	str	r1, [sp, #20]
 800f480:	e7c3      	b.n	800f40a <_vfiprintf_r+0x176>
 800f482:	4604      	mov	r4, r0
 800f484:	2301      	movs	r3, #1
 800f486:	fb0c 2101 	mla	r1, ip, r1, r2
 800f48a:	e7f0      	b.n	800f46e <_vfiprintf_r+0x1da>
 800f48c:	ab03      	add	r3, sp, #12
 800f48e:	9300      	str	r3, [sp, #0]
 800f490:	462a      	mov	r2, r5
 800f492:	4630      	mov	r0, r6
 800f494:	4b15      	ldr	r3, [pc, #84]	; (800f4ec <_vfiprintf_r+0x258>)
 800f496:	a904      	add	r1, sp, #16
 800f498:	f7fc f810 	bl	800b4bc <_printf_float>
 800f49c:	4607      	mov	r7, r0
 800f49e:	1c78      	adds	r0, r7, #1
 800f4a0:	d1d6      	bne.n	800f450 <_vfiprintf_r+0x1bc>
 800f4a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4a4:	07d9      	lsls	r1, r3, #31
 800f4a6:	d405      	bmi.n	800f4b4 <_vfiprintf_r+0x220>
 800f4a8:	89ab      	ldrh	r3, [r5, #12]
 800f4aa:	059a      	lsls	r2, r3, #22
 800f4ac:	d402      	bmi.n	800f4b4 <_vfiprintf_r+0x220>
 800f4ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4b0:	f7fb fea0 	bl	800b1f4 <__retarget_lock_release_recursive>
 800f4b4:	89ab      	ldrh	r3, [r5, #12]
 800f4b6:	065b      	lsls	r3, r3, #25
 800f4b8:	f53f af12 	bmi.w	800f2e0 <_vfiprintf_r+0x4c>
 800f4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4be:	e711      	b.n	800f2e4 <_vfiprintf_r+0x50>
 800f4c0:	ab03      	add	r3, sp, #12
 800f4c2:	9300      	str	r3, [sp, #0]
 800f4c4:	462a      	mov	r2, r5
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	4b08      	ldr	r3, [pc, #32]	; (800f4ec <_vfiprintf_r+0x258>)
 800f4ca:	a904      	add	r1, sp, #16
 800f4cc:	f7fc fa92 	bl	800b9f4 <_printf_i>
 800f4d0:	e7e4      	b.n	800f49c <_vfiprintf_r+0x208>
 800f4d2:	bf00      	nop
 800f4d4:	0800f894 	.word	0x0800f894
 800f4d8:	0800f8b4 	.word	0x0800f8b4
 800f4dc:	0800f874 	.word	0x0800f874
 800f4e0:	0800fcdc 	.word	0x0800fcdc
 800f4e4:	0800fce6 	.word	0x0800fce6
 800f4e8:	0800b4bd 	.word	0x0800b4bd
 800f4ec:	0800f26f 	.word	0x0800f26f
 800f4f0:	0800fce2 	.word	0x0800fce2

0800f4f4 <__swbuf_r>:
 800f4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f6:	460e      	mov	r6, r1
 800f4f8:	4614      	mov	r4, r2
 800f4fa:	4605      	mov	r5, r0
 800f4fc:	b118      	cbz	r0, 800f506 <__swbuf_r+0x12>
 800f4fe:	6983      	ldr	r3, [r0, #24]
 800f500:	b90b      	cbnz	r3, 800f506 <__swbuf_r+0x12>
 800f502:	f7fb fdb3 	bl	800b06c <__sinit>
 800f506:	4b21      	ldr	r3, [pc, #132]	; (800f58c <__swbuf_r+0x98>)
 800f508:	429c      	cmp	r4, r3
 800f50a:	d12b      	bne.n	800f564 <__swbuf_r+0x70>
 800f50c:	686c      	ldr	r4, [r5, #4]
 800f50e:	69a3      	ldr	r3, [r4, #24]
 800f510:	60a3      	str	r3, [r4, #8]
 800f512:	89a3      	ldrh	r3, [r4, #12]
 800f514:	071a      	lsls	r2, r3, #28
 800f516:	d52f      	bpl.n	800f578 <__swbuf_r+0x84>
 800f518:	6923      	ldr	r3, [r4, #16]
 800f51a:	b36b      	cbz	r3, 800f578 <__swbuf_r+0x84>
 800f51c:	6923      	ldr	r3, [r4, #16]
 800f51e:	6820      	ldr	r0, [r4, #0]
 800f520:	b2f6      	uxtb	r6, r6
 800f522:	1ac0      	subs	r0, r0, r3
 800f524:	6963      	ldr	r3, [r4, #20]
 800f526:	4637      	mov	r7, r6
 800f528:	4283      	cmp	r3, r0
 800f52a:	dc04      	bgt.n	800f536 <__swbuf_r+0x42>
 800f52c:	4621      	mov	r1, r4
 800f52e:	4628      	mov	r0, r5
 800f530:	f7fe fbda 	bl	800dce8 <_fflush_r>
 800f534:	bb30      	cbnz	r0, 800f584 <__swbuf_r+0x90>
 800f536:	68a3      	ldr	r3, [r4, #8]
 800f538:	3001      	adds	r0, #1
 800f53a:	3b01      	subs	r3, #1
 800f53c:	60a3      	str	r3, [r4, #8]
 800f53e:	6823      	ldr	r3, [r4, #0]
 800f540:	1c5a      	adds	r2, r3, #1
 800f542:	6022      	str	r2, [r4, #0]
 800f544:	701e      	strb	r6, [r3, #0]
 800f546:	6963      	ldr	r3, [r4, #20]
 800f548:	4283      	cmp	r3, r0
 800f54a:	d004      	beq.n	800f556 <__swbuf_r+0x62>
 800f54c:	89a3      	ldrh	r3, [r4, #12]
 800f54e:	07db      	lsls	r3, r3, #31
 800f550:	d506      	bpl.n	800f560 <__swbuf_r+0x6c>
 800f552:	2e0a      	cmp	r6, #10
 800f554:	d104      	bne.n	800f560 <__swbuf_r+0x6c>
 800f556:	4621      	mov	r1, r4
 800f558:	4628      	mov	r0, r5
 800f55a:	f7fe fbc5 	bl	800dce8 <_fflush_r>
 800f55e:	b988      	cbnz	r0, 800f584 <__swbuf_r+0x90>
 800f560:	4638      	mov	r0, r7
 800f562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f564:	4b0a      	ldr	r3, [pc, #40]	; (800f590 <__swbuf_r+0x9c>)
 800f566:	429c      	cmp	r4, r3
 800f568:	d101      	bne.n	800f56e <__swbuf_r+0x7a>
 800f56a:	68ac      	ldr	r4, [r5, #8]
 800f56c:	e7cf      	b.n	800f50e <__swbuf_r+0x1a>
 800f56e:	4b09      	ldr	r3, [pc, #36]	; (800f594 <__swbuf_r+0xa0>)
 800f570:	429c      	cmp	r4, r3
 800f572:	bf08      	it	eq
 800f574:	68ec      	ldreq	r4, [r5, #12]
 800f576:	e7ca      	b.n	800f50e <__swbuf_r+0x1a>
 800f578:	4621      	mov	r1, r4
 800f57a:	4628      	mov	r0, r5
 800f57c:	f000 f80c 	bl	800f598 <__swsetup_r>
 800f580:	2800      	cmp	r0, #0
 800f582:	d0cb      	beq.n	800f51c <__swbuf_r+0x28>
 800f584:	f04f 37ff 	mov.w	r7, #4294967295
 800f588:	e7ea      	b.n	800f560 <__swbuf_r+0x6c>
 800f58a:	bf00      	nop
 800f58c:	0800f894 	.word	0x0800f894
 800f590:	0800f8b4 	.word	0x0800f8b4
 800f594:	0800f874 	.word	0x0800f874

0800f598 <__swsetup_r>:
 800f598:	4b32      	ldr	r3, [pc, #200]	; (800f664 <__swsetup_r+0xcc>)
 800f59a:	b570      	push	{r4, r5, r6, lr}
 800f59c:	681d      	ldr	r5, [r3, #0]
 800f59e:	4606      	mov	r6, r0
 800f5a0:	460c      	mov	r4, r1
 800f5a2:	b125      	cbz	r5, 800f5ae <__swsetup_r+0x16>
 800f5a4:	69ab      	ldr	r3, [r5, #24]
 800f5a6:	b913      	cbnz	r3, 800f5ae <__swsetup_r+0x16>
 800f5a8:	4628      	mov	r0, r5
 800f5aa:	f7fb fd5f 	bl	800b06c <__sinit>
 800f5ae:	4b2e      	ldr	r3, [pc, #184]	; (800f668 <__swsetup_r+0xd0>)
 800f5b0:	429c      	cmp	r4, r3
 800f5b2:	d10f      	bne.n	800f5d4 <__swsetup_r+0x3c>
 800f5b4:	686c      	ldr	r4, [r5, #4]
 800f5b6:	89a3      	ldrh	r3, [r4, #12]
 800f5b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f5bc:	0719      	lsls	r1, r3, #28
 800f5be:	d42c      	bmi.n	800f61a <__swsetup_r+0x82>
 800f5c0:	06dd      	lsls	r5, r3, #27
 800f5c2:	d411      	bmi.n	800f5e8 <__swsetup_r+0x50>
 800f5c4:	2309      	movs	r3, #9
 800f5c6:	6033      	str	r3, [r6, #0]
 800f5c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d0:	81a3      	strh	r3, [r4, #12]
 800f5d2:	e03e      	b.n	800f652 <__swsetup_r+0xba>
 800f5d4:	4b25      	ldr	r3, [pc, #148]	; (800f66c <__swsetup_r+0xd4>)
 800f5d6:	429c      	cmp	r4, r3
 800f5d8:	d101      	bne.n	800f5de <__swsetup_r+0x46>
 800f5da:	68ac      	ldr	r4, [r5, #8]
 800f5dc:	e7eb      	b.n	800f5b6 <__swsetup_r+0x1e>
 800f5de:	4b24      	ldr	r3, [pc, #144]	; (800f670 <__swsetup_r+0xd8>)
 800f5e0:	429c      	cmp	r4, r3
 800f5e2:	bf08      	it	eq
 800f5e4:	68ec      	ldreq	r4, [r5, #12]
 800f5e6:	e7e6      	b.n	800f5b6 <__swsetup_r+0x1e>
 800f5e8:	0758      	lsls	r0, r3, #29
 800f5ea:	d512      	bpl.n	800f612 <__swsetup_r+0x7a>
 800f5ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5ee:	b141      	cbz	r1, 800f602 <__swsetup_r+0x6a>
 800f5f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5f4:	4299      	cmp	r1, r3
 800f5f6:	d002      	beq.n	800f5fe <__swsetup_r+0x66>
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	f7fb fe1b 	bl	800b234 <_free_r>
 800f5fe:	2300      	movs	r3, #0
 800f600:	6363      	str	r3, [r4, #52]	; 0x34
 800f602:	89a3      	ldrh	r3, [r4, #12]
 800f604:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f608:	81a3      	strh	r3, [r4, #12]
 800f60a:	2300      	movs	r3, #0
 800f60c:	6063      	str	r3, [r4, #4]
 800f60e:	6923      	ldr	r3, [r4, #16]
 800f610:	6023      	str	r3, [r4, #0]
 800f612:	89a3      	ldrh	r3, [r4, #12]
 800f614:	f043 0308 	orr.w	r3, r3, #8
 800f618:	81a3      	strh	r3, [r4, #12]
 800f61a:	6923      	ldr	r3, [r4, #16]
 800f61c:	b94b      	cbnz	r3, 800f632 <__swsetup_r+0x9a>
 800f61e:	89a3      	ldrh	r3, [r4, #12]
 800f620:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f628:	d003      	beq.n	800f632 <__swsetup_r+0x9a>
 800f62a:	4621      	mov	r1, r4
 800f62c:	4630      	mov	r0, r6
 800f62e:	f000 f84d 	bl	800f6cc <__smakebuf_r>
 800f632:	89a0      	ldrh	r0, [r4, #12]
 800f634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f638:	f010 0301 	ands.w	r3, r0, #1
 800f63c:	d00a      	beq.n	800f654 <__swsetup_r+0xbc>
 800f63e:	2300      	movs	r3, #0
 800f640:	60a3      	str	r3, [r4, #8]
 800f642:	6963      	ldr	r3, [r4, #20]
 800f644:	425b      	negs	r3, r3
 800f646:	61a3      	str	r3, [r4, #24]
 800f648:	6923      	ldr	r3, [r4, #16]
 800f64a:	b943      	cbnz	r3, 800f65e <__swsetup_r+0xc6>
 800f64c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f650:	d1ba      	bne.n	800f5c8 <__swsetup_r+0x30>
 800f652:	bd70      	pop	{r4, r5, r6, pc}
 800f654:	0781      	lsls	r1, r0, #30
 800f656:	bf58      	it	pl
 800f658:	6963      	ldrpl	r3, [r4, #20]
 800f65a:	60a3      	str	r3, [r4, #8]
 800f65c:	e7f4      	b.n	800f648 <__swsetup_r+0xb0>
 800f65e:	2000      	movs	r0, #0
 800f660:	e7f7      	b.n	800f652 <__swsetup_r+0xba>
 800f662:	bf00      	nop
 800f664:	2000001c 	.word	0x2000001c
 800f668:	0800f894 	.word	0x0800f894
 800f66c:	0800f8b4 	.word	0x0800f8b4
 800f670:	0800f874 	.word	0x0800f874

0800f674 <abort>:
 800f674:	2006      	movs	r0, #6
 800f676:	b508      	push	{r3, lr}
 800f678:	f000 f898 	bl	800f7ac <raise>
 800f67c:	2001      	movs	r0, #1
 800f67e:	f7f2 fb82 	bl	8001d86 <_exit>

0800f682 <__swhatbuf_r>:
 800f682:	b570      	push	{r4, r5, r6, lr}
 800f684:	460e      	mov	r6, r1
 800f686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f68a:	4614      	mov	r4, r2
 800f68c:	2900      	cmp	r1, #0
 800f68e:	461d      	mov	r5, r3
 800f690:	b096      	sub	sp, #88	; 0x58
 800f692:	da07      	bge.n	800f6a4 <__swhatbuf_r+0x22>
 800f694:	2300      	movs	r3, #0
 800f696:	602b      	str	r3, [r5, #0]
 800f698:	89b3      	ldrh	r3, [r6, #12]
 800f69a:	061a      	lsls	r2, r3, #24
 800f69c:	d410      	bmi.n	800f6c0 <__swhatbuf_r+0x3e>
 800f69e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6a2:	e00e      	b.n	800f6c2 <__swhatbuf_r+0x40>
 800f6a4:	466a      	mov	r2, sp
 800f6a6:	f000 f89d 	bl	800f7e4 <_fstat_r>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	dbf2      	blt.n	800f694 <__swhatbuf_r+0x12>
 800f6ae:	9a01      	ldr	r2, [sp, #4]
 800f6b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f6b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f6b8:	425a      	negs	r2, r3
 800f6ba:	415a      	adcs	r2, r3
 800f6bc:	602a      	str	r2, [r5, #0]
 800f6be:	e7ee      	b.n	800f69e <__swhatbuf_r+0x1c>
 800f6c0:	2340      	movs	r3, #64	; 0x40
 800f6c2:	2000      	movs	r0, #0
 800f6c4:	6023      	str	r3, [r4, #0]
 800f6c6:	b016      	add	sp, #88	; 0x58
 800f6c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f6cc <__smakebuf_r>:
 800f6cc:	898b      	ldrh	r3, [r1, #12]
 800f6ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6d0:	079d      	lsls	r5, r3, #30
 800f6d2:	4606      	mov	r6, r0
 800f6d4:	460c      	mov	r4, r1
 800f6d6:	d507      	bpl.n	800f6e8 <__smakebuf_r+0x1c>
 800f6d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f6dc:	6023      	str	r3, [r4, #0]
 800f6de:	6123      	str	r3, [r4, #16]
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	6163      	str	r3, [r4, #20]
 800f6e4:	b002      	add	sp, #8
 800f6e6:	bd70      	pop	{r4, r5, r6, pc}
 800f6e8:	466a      	mov	r2, sp
 800f6ea:	ab01      	add	r3, sp, #4
 800f6ec:	f7ff ffc9 	bl	800f682 <__swhatbuf_r>
 800f6f0:	9900      	ldr	r1, [sp, #0]
 800f6f2:	4605      	mov	r5, r0
 800f6f4:	4630      	mov	r0, r6
 800f6f6:	f7fb fde9 	bl	800b2cc <_malloc_r>
 800f6fa:	b948      	cbnz	r0, 800f710 <__smakebuf_r+0x44>
 800f6fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f700:	059a      	lsls	r2, r3, #22
 800f702:	d4ef      	bmi.n	800f6e4 <__smakebuf_r+0x18>
 800f704:	f023 0303 	bic.w	r3, r3, #3
 800f708:	f043 0302 	orr.w	r3, r3, #2
 800f70c:	81a3      	strh	r3, [r4, #12]
 800f70e:	e7e3      	b.n	800f6d8 <__smakebuf_r+0xc>
 800f710:	4b0d      	ldr	r3, [pc, #52]	; (800f748 <__smakebuf_r+0x7c>)
 800f712:	62b3      	str	r3, [r6, #40]	; 0x28
 800f714:	89a3      	ldrh	r3, [r4, #12]
 800f716:	6020      	str	r0, [r4, #0]
 800f718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f71c:	81a3      	strh	r3, [r4, #12]
 800f71e:	9b00      	ldr	r3, [sp, #0]
 800f720:	6120      	str	r0, [r4, #16]
 800f722:	6163      	str	r3, [r4, #20]
 800f724:	9b01      	ldr	r3, [sp, #4]
 800f726:	b15b      	cbz	r3, 800f740 <__smakebuf_r+0x74>
 800f728:	4630      	mov	r0, r6
 800f72a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f72e:	f000 f86b 	bl	800f808 <_isatty_r>
 800f732:	b128      	cbz	r0, 800f740 <__smakebuf_r+0x74>
 800f734:	89a3      	ldrh	r3, [r4, #12]
 800f736:	f023 0303 	bic.w	r3, r3, #3
 800f73a:	f043 0301 	orr.w	r3, r3, #1
 800f73e:	81a3      	strh	r3, [r4, #12]
 800f740:	89a0      	ldrh	r0, [r4, #12]
 800f742:	4305      	orrs	r5, r0
 800f744:	81a5      	strh	r5, [r4, #12]
 800f746:	e7cd      	b.n	800f6e4 <__smakebuf_r+0x18>
 800f748:	0800b005 	.word	0x0800b005

0800f74c <_malloc_usable_size_r>:
 800f74c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f750:	1f18      	subs	r0, r3, #4
 800f752:	2b00      	cmp	r3, #0
 800f754:	bfbc      	itt	lt
 800f756:	580b      	ldrlt	r3, [r1, r0]
 800f758:	18c0      	addlt	r0, r0, r3
 800f75a:	4770      	bx	lr

0800f75c <_raise_r>:
 800f75c:	291f      	cmp	r1, #31
 800f75e:	b538      	push	{r3, r4, r5, lr}
 800f760:	4604      	mov	r4, r0
 800f762:	460d      	mov	r5, r1
 800f764:	d904      	bls.n	800f770 <_raise_r+0x14>
 800f766:	2316      	movs	r3, #22
 800f768:	6003      	str	r3, [r0, #0]
 800f76a:	f04f 30ff 	mov.w	r0, #4294967295
 800f76e:	bd38      	pop	{r3, r4, r5, pc}
 800f770:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f772:	b112      	cbz	r2, 800f77a <_raise_r+0x1e>
 800f774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f778:	b94b      	cbnz	r3, 800f78e <_raise_r+0x32>
 800f77a:	4620      	mov	r0, r4
 800f77c:	f000 f830 	bl	800f7e0 <_getpid_r>
 800f780:	462a      	mov	r2, r5
 800f782:	4601      	mov	r1, r0
 800f784:	4620      	mov	r0, r4
 800f786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f78a:	f000 b817 	b.w	800f7bc <_kill_r>
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d00a      	beq.n	800f7a8 <_raise_r+0x4c>
 800f792:	1c59      	adds	r1, r3, #1
 800f794:	d103      	bne.n	800f79e <_raise_r+0x42>
 800f796:	2316      	movs	r3, #22
 800f798:	6003      	str	r3, [r0, #0]
 800f79a:	2001      	movs	r0, #1
 800f79c:	e7e7      	b.n	800f76e <_raise_r+0x12>
 800f79e:	2400      	movs	r4, #0
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f7a6:	4798      	blx	r3
 800f7a8:	2000      	movs	r0, #0
 800f7aa:	e7e0      	b.n	800f76e <_raise_r+0x12>

0800f7ac <raise>:
 800f7ac:	4b02      	ldr	r3, [pc, #8]	; (800f7b8 <raise+0xc>)
 800f7ae:	4601      	mov	r1, r0
 800f7b0:	6818      	ldr	r0, [r3, #0]
 800f7b2:	f7ff bfd3 	b.w	800f75c <_raise_r>
 800f7b6:	bf00      	nop
 800f7b8:	2000001c 	.word	0x2000001c

0800f7bc <_kill_r>:
 800f7bc:	b538      	push	{r3, r4, r5, lr}
 800f7be:	2300      	movs	r3, #0
 800f7c0:	4d06      	ldr	r5, [pc, #24]	; (800f7dc <_kill_r+0x20>)
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	4608      	mov	r0, r1
 800f7c6:	4611      	mov	r1, r2
 800f7c8:	602b      	str	r3, [r5, #0]
 800f7ca:	f7f2 facc 	bl	8001d66 <_kill>
 800f7ce:	1c43      	adds	r3, r0, #1
 800f7d0:	d102      	bne.n	800f7d8 <_kill_r+0x1c>
 800f7d2:	682b      	ldr	r3, [r5, #0]
 800f7d4:	b103      	cbz	r3, 800f7d8 <_kill_r+0x1c>
 800f7d6:	6023      	str	r3, [r4, #0]
 800f7d8:	bd38      	pop	{r3, r4, r5, pc}
 800f7da:	bf00      	nop
 800f7dc:	20005484 	.word	0x20005484

0800f7e0 <_getpid_r>:
 800f7e0:	f7f2 baba 	b.w	8001d58 <_getpid>

0800f7e4 <_fstat_r>:
 800f7e4:	b538      	push	{r3, r4, r5, lr}
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	4d06      	ldr	r5, [pc, #24]	; (800f804 <_fstat_r+0x20>)
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	4608      	mov	r0, r1
 800f7ee:	4611      	mov	r1, r2
 800f7f0:	602b      	str	r3, [r5, #0]
 800f7f2:	f7f2 fb16 	bl	8001e22 <_fstat>
 800f7f6:	1c43      	adds	r3, r0, #1
 800f7f8:	d102      	bne.n	800f800 <_fstat_r+0x1c>
 800f7fa:	682b      	ldr	r3, [r5, #0]
 800f7fc:	b103      	cbz	r3, 800f800 <_fstat_r+0x1c>
 800f7fe:	6023      	str	r3, [r4, #0]
 800f800:	bd38      	pop	{r3, r4, r5, pc}
 800f802:	bf00      	nop
 800f804:	20005484 	.word	0x20005484

0800f808 <_isatty_r>:
 800f808:	b538      	push	{r3, r4, r5, lr}
 800f80a:	2300      	movs	r3, #0
 800f80c:	4d05      	ldr	r5, [pc, #20]	; (800f824 <_isatty_r+0x1c>)
 800f80e:	4604      	mov	r4, r0
 800f810:	4608      	mov	r0, r1
 800f812:	602b      	str	r3, [r5, #0]
 800f814:	f7f2 fb14 	bl	8001e40 <_isatty>
 800f818:	1c43      	adds	r3, r0, #1
 800f81a:	d102      	bne.n	800f822 <_isatty_r+0x1a>
 800f81c:	682b      	ldr	r3, [r5, #0]
 800f81e:	b103      	cbz	r3, 800f822 <_isatty_r+0x1a>
 800f820:	6023      	str	r3, [r4, #0]
 800f822:	bd38      	pop	{r3, r4, r5, pc}
 800f824:	20005484 	.word	0x20005484

0800f828 <_init>:
 800f828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f82a:	bf00      	nop
 800f82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f82e:	bc08      	pop	{r3}
 800f830:	469e      	mov	lr, r3
 800f832:	4770      	bx	lr

0800f834 <_fini>:
 800f834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f836:	bf00      	nop
 800f838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f83a:	bc08      	pop	{r3}
 800f83c:	469e      	mov	lr, r3
 800f83e:	4770      	bx	lr
