
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c98  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004e20  08004e20  00014e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e30  08004e30  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e30  08004e30  00014e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e38  08004e38  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000020  08004e5c  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08004e5c  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107fe  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002580  00000000  00000000  00030843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00032dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00033998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207a6  00000000  00000000  00034440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9bb  00000000  00000000  00054be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c45f0  00000000  00000000  000635a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00127b91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003254  00000000  00000000  00127be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e08 	.word	0x08004e08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08004e08 	.word	0x08004e08

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2iz>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ac:	d215      	bcs.n	80008da <__aeabi_d2iz+0x36>
 80008ae:	d511      	bpl.n	80008d4 <__aeabi_d2iz+0x30>
 80008b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d912      	bls.n	80008e0 <__aeabi_d2iz+0x3c>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ca:	fa23 f002 	lsr.w	r0, r3, r2
 80008ce:	bf18      	it	ne
 80008d0:	4240      	negne	r0, r0
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d105      	bne.n	80008ec <__aeabi_d2iz+0x48>
 80008e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	bf08      	it	eq
 80008e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2f>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008fc:	bf24      	itt	cs
 80008fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000906:	d90d      	bls.n	8000924 <__aeabi_d2f+0x30>
 8000908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800090c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000928:	d121      	bne.n	800096e <__aeabi_d2f+0x7a>
 800092a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800092e:	bfbc      	itt	lt
 8000930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000934:	4770      	bxlt	lr
 8000936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800093e:	f1c2 0218 	rsb	r2, r2, #24
 8000942:	f1c2 0c20 	rsb	ip, r2, #32
 8000946:	fa10 f30c 	lsls.w	r3, r0, ip
 800094a:	fa20 f002 	lsr.w	r0, r0, r2
 800094e:	bf18      	it	ne
 8000950:	f040 0001 	orrne.w	r0, r0, #1
 8000954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800095c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000960:	ea40 000c 	orr.w	r0, r0, ip
 8000964:	fa23 f302 	lsr.w	r3, r3, r2
 8000968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800096c:	e7cc      	b.n	8000908 <__aeabi_d2f+0x14>
 800096e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000972:	d107      	bne.n	8000984 <__aeabi_d2f+0x90>
 8000974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000978:	bf1e      	ittt	ne
 800097a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800097e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000982:	4770      	bxne	lr
 8000984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800098c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_frsub>:
 8000994:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000998:	e002      	b.n	80009a0 <__addsf3>
 800099a:	bf00      	nop

0800099c <__aeabi_fsub>:
 800099c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a0 <__addsf3>:
 80009a0:	0042      	lsls	r2, r0, #1
 80009a2:	bf1f      	itttt	ne
 80009a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a8:	ea92 0f03 	teqne	r2, r3
 80009ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b4:	d06a      	beq.n	8000a8c <__addsf3+0xec>
 80009b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009be:	bfc1      	itttt	gt
 80009c0:	18d2      	addgt	r2, r2, r3
 80009c2:	4041      	eorgt	r1, r0
 80009c4:	4048      	eorgt	r0, r1
 80009c6:	4041      	eorgt	r1, r0
 80009c8:	bfb8      	it	lt
 80009ca:	425b      	neglt	r3, r3
 80009cc:	2b19      	cmp	r3, #25
 80009ce:	bf88      	it	hi
 80009d0:	4770      	bxhi	lr
 80009d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009ee:	bf18      	it	ne
 80009f0:	4249      	negne	r1, r1
 80009f2:	ea92 0f03 	teq	r2, r3
 80009f6:	d03f      	beq.n	8000a78 <__addsf3+0xd8>
 80009f8:	f1a2 0201 	sub.w	r2, r2, #1
 80009fc:	fa41 fc03 	asr.w	ip, r1, r3
 8000a00:	eb10 000c 	adds.w	r0, r0, ip
 8000a04:	f1c3 0320 	rsb	r3, r3, #32
 8000a08:	fa01 f103 	lsl.w	r1, r1, r3
 8000a0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a10:	d502      	bpl.n	8000a18 <__addsf3+0x78>
 8000a12:	4249      	negs	r1, r1
 8000a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a1c:	d313      	bcc.n	8000a46 <__addsf3+0xa6>
 8000a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a22:	d306      	bcc.n	8000a32 <__addsf3+0x92>
 8000a24:	0840      	lsrs	r0, r0, #1
 8000a26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a2a:	f102 0201 	add.w	r2, r2, #1
 8000a2e:	2afe      	cmp	r2, #254	; 0xfe
 8000a30:	d251      	bcs.n	8000ad6 <__addsf3+0x136>
 8000a32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3a:	bf08      	it	eq
 8000a3c:	f020 0001 	biceq.w	r0, r0, #1
 8000a40:	ea40 0003 	orr.w	r0, r0, r3
 8000a44:	4770      	bx	lr
 8000a46:	0049      	lsls	r1, r1, #1
 8000a48:	eb40 0000 	adc.w	r0, r0, r0
 8000a4c:	3a01      	subs	r2, #1
 8000a4e:	bf28      	it	cs
 8000a50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a54:	d2ed      	bcs.n	8000a32 <__addsf3+0x92>
 8000a56:	fab0 fc80 	clz	ip, r0
 8000a5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a66:	bfaa      	itet	ge
 8000a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a6c:	4252      	neglt	r2, r2
 8000a6e:	4318      	orrge	r0, r3
 8000a70:	bfbc      	itt	lt
 8000a72:	40d0      	lsrlt	r0, r2
 8000a74:	4318      	orrlt	r0, r3
 8000a76:	4770      	bx	lr
 8000a78:	f092 0f00 	teq	r2, #0
 8000a7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a80:	bf06      	itte	eq
 8000a82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a86:	3201      	addeq	r2, #1
 8000a88:	3b01      	subne	r3, #1
 8000a8a:	e7b5      	b.n	80009f8 <__addsf3+0x58>
 8000a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a9a:	d021      	beq.n	8000ae0 <__addsf3+0x140>
 8000a9c:	ea92 0f03 	teq	r2, r3
 8000aa0:	d004      	beq.n	8000aac <__addsf3+0x10c>
 8000aa2:	f092 0f00 	teq	r2, #0
 8000aa6:	bf08      	it	eq
 8000aa8:	4608      	moveq	r0, r1
 8000aaa:	4770      	bx	lr
 8000aac:	ea90 0f01 	teq	r0, r1
 8000ab0:	bf1c      	itt	ne
 8000ab2:	2000      	movne	r0, #0
 8000ab4:	4770      	bxne	lr
 8000ab6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aba:	d104      	bne.n	8000ac6 <__addsf3+0x126>
 8000abc:	0040      	lsls	r0, r0, #1
 8000abe:	bf28      	it	cs
 8000ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ac4:	4770      	bx	lr
 8000ac6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aca:	bf3c      	itt	cc
 8000acc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad0:	4770      	bxcc	lr
 8000ad2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ade:	4770      	bx	lr
 8000ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ae4:	bf16      	itet	ne
 8000ae6:	4608      	movne	r0, r1
 8000ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aec:	4601      	movne	r1, r0
 8000aee:	0242      	lsls	r2, r0, #9
 8000af0:	bf06      	itte	eq
 8000af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000af6:	ea90 0f01 	teqeq	r0, r1
 8000afa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_ui2f>:
 8000b00:	f04f 0300 	mov.w	r3, #0
 8000b04:	e004      	b.n	8000b10 <__aeabi_i2f+0x8>
 8000b06:	bf00      	nop

08000b08 <__aeabi_i2f>:
 8000b08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b0c:	bf48      	it	mi
 8000b0e:	4240      	negmi	r0, r0
 8000b10:	ea5f 0c00 	movs.w	ip, r0
 8000b14:	bf08      	it	eq
 8000b16:	4770      	bxeq	lr
 8000b18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b1c:	4601      	mov	r1, r0
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	e01c      	b.n	8000b5e <__aeabi_l2f+0x2a>

08000b24 <__aeabi_ul2f>:
 8000b24:	ea50 0201 	orrs.w	r2, r0, r1
 8000b28:	bf08      	it	eq
 8000b2a:	4770      	bxeq	lr
 8000b2c:	f04f 0300 	mov.w	r3, #0
 8000b30:	e00a      	b.n	8000b48 <__aeabi_l2f+0x14>
 8000b32:	bf00      	nop

08000b34 <__aeabi_l2f>:
 8000b34:	ea50 0201 	orrs.w	r2, r0, r1
 8000b38:	bf08      	it	eq
 8000b3a:	4770      	bxeq	lr
 8000b3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b40:	d502      	bpl.n	8000b48 <__aeabi_l2f+0x14>
 8000b42:	4240      	negs	r0, r0
 8000b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b48:	ea5f 0c01 	movs.w	ip, r1
 8000b4c:	bf02      	ittt	eq
 8000b4e:	4684      	moveq	ip, r0
 8000b50:	4601      	moveq	r1, r0
 8000b52:	2000      	moveq	r0, #0
 8000b54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b58:	bf08      	it	eq
 8000b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b62:	fabc f28c 	clz	r2, ip
 8000b66:	3a08      	subs	r2, #8
 8000b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b6c:	db10      	blt.n	8000b90 <__aeabi_l2f+0x5c>
 8000b6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b72:	4463      	add	r3, ip
 8000b74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b78:	f1c2 0220 	rsb	r2, r2, #32
 8000b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b80:	fa20 f202 	lsr.w	r2, r0, r2
 8000b84:	eb43 0002 	adc.w	r0, r3, r2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f102 0220 	add.w	r2, r2, #32
 8000b94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b98:	f1c2 0220 	rsb	r2, r2, #32
 8000b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ba4:	eb43 0002 	adc.w	r0, r3, r2
 8000ba8:	bf08      	it	eq
 8000baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_fmul>:
 8000bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb8:	bf1e      	ittt	ne
 8000bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bbe:	ea92 0f0c 	teqne	r2, ip
 8000bc2:	ea93 0f0c 	teqne	r3, ip
 8000bc6:	d06f      	beq.n	8000ca8 <__aeabi_fmul+0xf8>
 8000bc8:	441a      	add	r2, r3
 8000bca:	ea80 0c01 	eor.w	ip, r0, r1
 8000bce:	0240      	lsls	r0, r0, #9
 8000bd0:	bf18      	it	ne
 8000bd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bd6:	d01e      	beq.n	8000c16 <__aeabi_fmul+0x66>
 8000bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000be4:	fba0 3101 	umull	r3, r1, r0, r1
 8000be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf0:	bf3e      	ittt	cc
 8000bf2:	0049      	lslcc	r1, r1, #1
 8000bf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf8:	005b      	lslcc	r3, r3, #1
 8000bfa:	ea40 0001 	orr.w	r0, r0, r1
 8000bfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c02:	2afd      	cmp	r2, #253	; 0xfd
 8000c04:	d81d      	bhi.n	8000c42 <__aeabi_fmul+0x92>
 8000c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	4770      	bx	lr
 8000c16:	f090 0f00 	teq	r0, #0
 8000c1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c1e:	bf08      	it	eq
 8000c20:	0249      	lsleq	r1, r1, #9
 8000c22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c2a:	3a7f      	subs	r2, #127	; 0x7f
 8000c2c:	bfc2      	ittt	gt
 8000c2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c36:	4770      	bxgt	lr
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	3a01      	subs	r2, #1
 8000c42:	dc5d      	bgt.n	8000d00 <__aeabi_fmul+0x150>
 8000c44:	f112 0f19 	cmn.w	r2, #25
 8000c48:	bfdc      	itt	le
 8000c4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c4e:	4770      	bxle	lr
 8000c50:	f1c2 0200 	rsb	r2, r2, #0
 8000c54:	0041      	lsls	r1, r0, #1
 8000c56:	fa21 f102 	lsr.w	r1, r1, r2
 8000c5a:	f1c2 0220 	rsb	r2, r2, #32
 8000c5e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c62:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c66:	f140 0000 	adc.w	r0, r0, #0
 8000c6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c6e:	bf08      	it	eq
 8000c70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c74:	4770      	bx	lr
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c7e:	bf02      	ittt	eq
 8000c80:	0040      	lsleq	r0, r0, #1
 8000c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c86:	3a01      	subeq	r2, #1
 8000c88:	d0f9      	beq.n	8000c7e <__aeabi_fmul+0xce>
 8000c8a:	ea40 000c 	orr.w	r0, r0, ip
 8000c8e:	f093 0f00 	teq	r3, #0
 8000c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c96:	bf02      	ittt	eq
 8000c98:	0049      	lsleq	r1, r1, #1
 8000c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c9e:	3b01      	subeq	r3, #1
 8000ca0:	d0f9      	beq.n	8000c96 <__aeabi_fmul+0xe6>
 8000ca2:	ea41 010c 	orr.w	r1, r1, ip
 8000ca6:	e78f      	b.n	8000bc8 <__aeabi_fmul+0x18>
 8000ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cac:	ea92 0f0c 	teq	r2, ip
 8000cb0:	bf18      	it	ne
 8000cb2:	ea93 0f0c 	teqne	r3, ip
 8000cb6:	d00a      	beq.n	8000cce <__aeabi_fmul+0x11e>
 8000cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cbc:	bf18      	it	ne
 8000cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cc2:	d1d8      	bne.n	8000c76 <__aeabi_fmul+0xc6>
 8000cc4:	ea80 0001 	eor.w	r0, r0, r1
 8000cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	4770      	bx	lr
 8000cce:	f090 0f00 	teq	r0, #0
 8000cd2:	bf17      	itett	ne
 8000cd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	f091 0f00 	teqne	r1, #0
 8000cde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ce2:	d014      	beq.n	8000d0e <__aeabi_fmul+0x15e>
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	d101      	bne.n	8000cee <__aeabi_fmul+0x13e>
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	d10f      	bne.n	8000d0e <__aeabi_fmul+0x15e>
 8000cee:	ea93 0f0c 	teq	r3, ip
 8000cf2:	d103      	bne.n	8000cfc <__aeabi_fmul+0x14c>
 8000cf4:	024b      	lsls	r3, r1, #9
 8000cf6:	bf18      	it	ne
 8000cf8:	4608      	movne	r0, r1
 8000cfa:	d108      	bne.n	8000d0e <__aeabi_fmul+0x15e>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0c:	4770      	bx	lr
 8000d0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fdiv>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d069      	beq.n	8000e04 <__aeabi_fdiv+0xec>
 8000d30:	eba2 0203 	sub.w	r2, r2, r3
 8000d34:	ea80 0c01 	eor.w	ip, r0, r1
 8000d38:	0249      	lsls	r1, r1, #9
 8000d3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d3e:	d037      	beq.n	8000db0 <__aeabi_fdiv+0x98>
 8000d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d50:	428b      	cmp	r3, r1
 8000d52:	bf38      	it	cc
 8000d54:	005b      	lslcc	r3, r3, #1
 8000d56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	bf24      	itt	cs
 8000d62:	1a5b      	subcs	r3, r3, r1
 8000d64:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d6c:	bf24      	itt	cs
 8000d6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d7a:	bf24      	itt	cs
 8000d7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d88:	bf24      	itt	cs
 8000d8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d9a:	d1e0      	bne.n	8000d5e <__aeabi_fdiv+0x46>
 8000d9c:	2afd      	cmp	r2, #253	; 0xfd
 8000d9e:	f63f af50 	bhi.w	8000c42 <__aeabi_fmul+0x92>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da8:	bf08      	it	eq
 8000daa:	f020 0001 	biceq.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db8:	327f      	adds	r2, #127	; 0x7f
 8000dba:	bfc2      	ittt	gt
 8000dbc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc4:	4770      	bxgt	lr
 8000dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	3a01      	subs	r2, #1
 8000dd0:	e737      	b.n	8000c42 <__aeabi_fmul+0x92>
 8000dd2:	f092 0f00 	teq	r2, #0
 8000dd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0040      	lsleq	r0, r0, #1
 8000dde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000de2:	3a01      	subeq	r2, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fdiv+0xc2>
 8000de6:	ea40 000c 	orr.w	r0, r0, ip
 8000dea:	f093 0f00 	teq	r3, #0
 8000dee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0049      	lsleq	r1, r1, #1
 8000df6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dfa:	3b01      	subeq	r3, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fdiv+0xda>
 8000dfe:	ea41 010c 	orr.w	r1, r1, ip
 8000e02:	e795      	b.n	8000d30 <__aeabi_fdiv+0x18>
 8000e04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d108      	bne.n	8000e20 <__aeabi_fdiv+0x108>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	f47f af7d 	bne.w	8000d0e <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	f47f af70 	bne.w	8000cfc <__aeabi_fmul+0x14c>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e776      	b.n	8000d0e <__aeabi_fmul+0x15e>
 8000e20:	ea93 0f0c 	teq	r3, ip
 8000e24:	d104      	bne.n	8000e30 <__aeabi_fdiv+0x118>
 8000e26:	024b      	lsls	r3, r1, #9
 8000e28:	f43f af4c 	beq.w	8000cc4 <__aeabi_fmul+0x114>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e76e      	b.n	8000d0e <__aeabi_fmul+0x15e>
 8000e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e34:	bf18      	it	ne
 8000e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	d1ca      	bne.n	8000dd2 <__aeabi_fdiv+0xba>
 8000e3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e40:	f47f af5c 	bne.w	8000cfc <__aeabi_fmul+0x14c>
 8000e44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e48:	f47f af3c 	bne.w	8000cc4 <__aeabi_fmul+0x114>
 8000e4c:	e75f      	b.n	8000d0e <__aeabi_fmul+0x15e>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_f2uiz>:
 8000e50:	0042      	lsls	r2, r0, #1
 8000e52:	d20e      	bcs.n	8000e72 <__aeabi_f2uiz+0x22>
 8000e54:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e58:	d30b      	bcc.n	8000e72 <__aeabi_f2uiz+0x22>
 8000e5a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e62:	d409      	bmi.n	8000e78 <__aeabi_f2uiz+0x28>
 8000e64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e6c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e70:	4770      	bx	lr
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	4770      	bx	lr
 8000e78:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_f2uiz+0x32>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d102      	bne.n	8000e88 <__aeabi_f2uiz+0x38>
 8000e82:	f04f 30ff 	mov.w	r0, #4294967295
 8000e86:	4770      	bx	lr
 8000e88:	f04f 0000 	mov.w	r0, #0
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <__aeabi_uldivmod>:
 8000e90:	b953      	cbnz	r3, 8000ea8 <__aeabi_uldivmod+0x18>
 8000e92:	b94a      	cbnz	r2, 8000ea8 <__aeabi_uldivmod+0x18>
 8000e94:	2900      	cmp	r1, #0
 8000e96:	bf08      	it	eq
 8000e98:	2800      	cmpeq	r0, #0
 8000e9a:	bf1c      	itt	ne
 8000e9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ea0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ea4:	f000 b96e 	b.w	8001184 <__aeabi_idiv0>
 8000ea8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eb0:	f000 f806 	bl	8000ec0 <__udivmoddi4>
 8000eb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4770      	bx	lr

08000ec0 <__udivmoddi4>:
 8000ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec4:	9e08      	ldr	r6, [sp, #32]
 8000ec6:	460d      	mov	r5, r1
 8000ec8:	4604      	mov	r4, r0
 8000eca:	468e      	mov	lr, r1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f040 8083 	bne.w	8000fd8 <__udivmoddi4+0x118>
 8000ed2:	428a      	cmp	r2, r1
 8000ed4:	4617      	mov	r7, r2
 8000ed6:	d947      	bls.n	8000f68 <__udivmoddi4+0xa8>
 8000ed8:	fab2 f382 	clz	r3, r2
 8000edc:	b14b      	cbz	r3, 8000ef2 <__udivmoddi4+0x32>
 8000ede:	f1c3 0120 	rsb	r1, r3, #32
 8000ee2:	fa05 fe03 	lsl.w	lr, r5, r3
 8000ee6:	fa20 f101 	lsr.w	r1, r0, r1
 8000eea:	409f      	lsls	r7, r3
 8000eec:	ea41 0e0e 	orr.w	lr, r1, lr
 8000ef0:	409c      	lsls	r4, r3
 8000ef2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ef6:	fbbe fcf8 	udiv	ip, lr, r8
 8000efa:	fa1f f987 	uxth.w	r9, r7
 8000efe:	fb08 e21c 	mls	r2, r8, ip, lr
 8000f02:	fb0c f009 	mul.w	r0, ip, r9
 8000f06:	0c21      	lsrs	r1, r4, #16
 8000f08:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000f0c:	4290      	cmp	r0, r2
 8000f0e:	d90a      	bls.n	8000f26 <__udivmoddi4+0x66>
 8000f10:	18ba      	adds	r2, r7, r2
 8000f12:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000f16:	f080 8118 	bcs.w	800114a <__udivmoddi4+0x28a>
 8000f1a:	4290      	cmp	r0, r2
 8000f1c:	f240 8115 	bls.w	800114a <__udivmoddi4+0x28a>
 8000f20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f24:	443a      	add	r2, r7
 8000f26:	1a12      	subs	r2, r2, r0
 8000f28:	fbb2 f0f8 	udiv	r0, r2, r8
 8000f2c:	fb08 2210 	mls	r2, r8, r0, r2
 8000f30:	fb00 f109 	mul.w	r1, r0, r9
 8000f34:	b2a4      	uxth	r4, r4
 8000f36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f3a:	42a1      	cmp	r1, r4
 8000f3c:	d909      	bls.n	8000f52 <__udivmoddi4+0x92>
 8000f3e:	193c      	adds	r4, r7, r4
 8000f40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f44:	f080 8103 	bcs.w	800114e <__udivmoddi4+0x28e>
 8000f48:	42a1      	cmp	r1, r4
 8000f4a:	f240 8100 	bls.w	800114e <__udivmoddi4+0x28e>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	1a64      	subs	r4, r4, r1
 8000f54:	2100      	movs	r1, #0
 8000f56:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f5a:	b11e      	cbz	r6, 8000f64 <__udivmoddi4+0xa4>
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	40dc      	lsrs	r4, r3
 8000f60:	e9c6 4200 	strd	r4, r2, [r6]
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	b902      	cbnz	r2, 8000f6c <__udivmoddi4+0xac>
 8000f6a:	deff      	udf	#255	; 0xff
 8000f6c:	fab2 f382 	clz	r3, r2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d14f      	bne.n	8001014 <__udivmoddi4+0x154>
 8000f74:	1a8d      	subs	r5, r1, r2
 8000f76:	2101      	movs	r1, #1
 8000f78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000f7c:	fa1f f882 	uxth.w	r8, r2
 8000f80:	fbb5 fcfe 	udiv	ip, r5, lr
 8000f84:	fb0e 551c 	mls	r5, lr, ip, r5
 8000f88:	fb08 f00c 	mul.w	r0, r8, ip
 8000f8c:	0c22      	lsrs	r2, r4, #16
 8000f8e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000f92:	42a8      	cmp	r0, r5
 8000f94:	d907      	bls.n	8000fa6 <__udivmoddi4+0xe6>
 8000f96:	197d      	adds	r5, r7, r5
 8000f98:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000f9c:	d202      	bcs.n	8000fa4 <__udivmoddi4+0xe4>
 8000f9e:	42a8      	cmp	r0, r5
 8000fa0:	f200 80e9 	bhi.w	8001176 <__udivmoddi4+0x2b6>
 8000fa4:	4694      	mov	ip, r2
 8000fa6:	1a2d      	subs	r5, r5, r0
 8000fa8:	fbb5 f0fe 	udiv	r0, r5, lr
 8000fac:	fb0e 5510 	mls	r5, lr, r0, r5
 8000fb0:	fb08 f800 	mul.w	r8, r8, r0
 8000fb4:	b2a4      	uxth	r4, r4
 8000fb6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fba:	45a0      	cmp	r8, r4
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x10e>
 8000fbe:	193c      	adds	r4, r7, r4
 8000fc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fc4:	d202      	bcs.n	8000fcc <__udivmoddi4+0x10c>
 8000fc6:	45a0      	cmp	r8, r4
 8000fc8:	f200 80d9 	bhi.w	800117e <__udivmoddi4+0x2be>
 8000fcc:	4610      	mov	r0, r2
 8000fce:	eba4 0408 	sub.w	r4, r4, r8
 8000fd2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000fd6:	e7c0      	b.n	8000f5a <__udivmoddi4+0x9a>
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x12e>
 8000fdc:	2e00      	cmp	r6, #0
 8000fde:	f000 80b1 	beq.w	8001144 <__udivmoddi4+0x284>
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	e9c6 0500 	strd	r0, r5, [r6]
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fee:	fab3 f183 	clz	r1, r3
 8000ff2:	2900      	cmp	r1, #0
 8000ff4:	d14b      	bne.n	800108e <__udivmoddi4+0x1ce>
 8000ff6:	42ab      	cmp	r3, r5
 8000ff8:	d302      	bcc.n	8001000 <__udivmoddi4+0x140>
 8000ffa:	4282      	cmp	r2, r0
 8000ffc:	f200 80b9 	bhi.w	8001172 <__udivmoddi4+0x2b2>
 8001000:	1a84      	subs	r4, r0, r2
 8001002:	eb65 0303 	sbc.w	r3, r5, r3
 8001006:	2001      	movs	r0, #1
 8001008:	469e      	mov	lr, r3
 800100a:	2e00      	cmp	r6, #0
 800100c:	d0aa      	beq.n	8000f64 <__udivmoddi4+0xa4>
 800100e:	e9c6 4e00 	strd	r4, lr, [r6]
 8001012:	e7a7      	b.n	8000f64 <__udivmoddi4+0xa4>
 8001014:	409f      	lsls	r7, r3
 8001016:	f1c3 0220 	rsb	r2, r3, #32
 800101a:	40d1      	lsrs	r1, r2
 800101c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001020:	fbb1 f0fe 	udiv	r0, r1, lr
 8001024:	fa1f f887 	uxth.w	r8, r7
 8001028:	fb0e 1110 	mls	r1, lr, r0, r1
 800102c:	fa24 f202 	lsr.w	r2, r4, r2
 8001030:	409d      	lsls	r5, r3
 8001032:	fb00 fc08 	mul.w	ip, r0, r8
 8001036:	432a      	orrs	r2, r5
 8001038:	0c15      	lsrs	r5, r2, #16
 800103a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800103e:	45ac      	cmp	ip, r5
 8001040:	fa04 f403 	lsl.w	r4, r4, r3
 8001044:	d909      	bls.n	800105a <__udivmoddi4+0x19a>
 8001046:	197d      	adds	r5, r7, r5
 8001048:	f100 31ff 	add.w	r1, r0, #4294967295
 800104c:	f080 808f 	bcs.w	800116e <__udivmoddi4+0x2ae>
 8001050:	45ac      	cmp	ip, r5
 8001052:	f240 808c 	bls.w	800116e <__udivmoddi4+0x2ae>
 8001056:	3802      	subs	r0, #2
 8001058:	443d      	add	r5, r7
 800105a:	eba5 050c 	sub.w	r5, r5, ip
 800105e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001062:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001066:	fb01 f908 	mul.w	r9, r1, r8
 800106a:	b295      	uxth	r5, r2
 800106c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001070:	45a9      	cmp	r9, r5
 8001072:	d907      	bls.n	8001084 <__udivmoddi4+0x1c4>
 8001074:	197d      	adds	r5, r7, r5
 8001076:	f101 32ff 	add.w	r2, r1, #4294967295
 800107a:	d274      	bcs.n	8001166 <__udivmoddi4+0x2a6>
 800107c:	45a9      	cmp	r9, r5
 800107e:	d972      	bls.n	8001166 <__udivmoddi4+0x2a6>
 8001080:	3902      	subs	r1, #2
 8001082:	443d      	add	r5, r7
 8001084:	eba5 0509 	sub.w	r5, r5, r9
 8001088:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800108c:	e778      	b.n	8000f80 <__udivmoddi4+0xc0>
 800108e:	f1c1 0720 	rsb	r7, r1, #32
 8001092:	408b      	lsls	r3, r1
 8001094:	fa22 fc07 	lsr.w	ip, r2, r7
 8001098:	ea4c 0c03 	orr.w	ip, ip, r3
 800109c:	fa25 f407 	lsr.w	r4, r5, r7
 80010a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80010a4:	fbb4 f9fe 	udiv	r9, r4, lr
 80010a8:	fa1f f88c 	uxth.w	r8, ip
 80010ac:	fb0e 4419 	mls	r4, lr, r9, r4
 80010b0:	fa20 f307 	lsr.w	r3, r0, r7
 80010b4:	fb09 fa08 	mul.w	sl, r9, r8
 80010b8:	408d      	lsls	r5, r1
 80010ba:	431d      	orrs	r5, r3
 80010bc:	0c2b      	lsrs	r3, r5, #16
 80010be:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80010c2:	45a2      	cmp	sl, r4
 80010c4:	fa02 f201 	lsl.w	r2, r2, r1
 80010c8:	fa00 f301 	lsl.w	r3, r0, r1
 80010cc:	d909      	bls.n	80010e2 <__udivmoddi4+0x222>
 80010ce:	eb1c 0404 	adds.w	r4, ip, r4
 80010d2:	f109 30ff 	add.w	r0, r9, #4294967295
 80010d6:	d248      	bcs.n	800116a <__udivmoddi4+0x2aa>
 80010d8:	45a2      	cmp	sl, r4
 80010da:	d946      	bls.n	800116a <__udivmoddi4+0x2aa>
 80010dc:	f1a9 0902 	sub.w	r9, r9, #2
 80010e0:	4464      	add	r4, ip
 80010e2:	eba4 040a 	sub.w	r4, r4, sl
 80010e6:	fbb4 f0fe 	udiv	r0, r4, lr
 80010ea:	fb0e 4410 	mls	r4, lr, r0, r4
 80010ee:	fb00 fa08 	mul.w	sl, r0, r8
 80010f2:	b2ad      	uxth	r5, r5
 80010f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80010f8:	45a2      	cmp	sl, r4
 80010fa:	d908      	bls.n	800110e <__udivmoddi4+0x24e>
 80010fc:	eb1c 0404 	adds.w	r4, ip, r4
 8001100:	f100 35ff 	add.w	r5, r0, #4294967295
 8001104:	d22d      	bcs.n	8001162 <__udivmoddi4+0x2a2>
 8001106:	45a2      	cmp	sl, r4
 8001108:	d92b      	bls.n	8001162 <__udivmoddi4+0x2a2>
 800110a:	3802      	subs	r0, #2
 800110c:	4464      	add	r4, ip
 800110e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001112:	fba0 8902 	umull	r8, r9, r0, r2
 8001116:	eba4 040a 	sub.w	r4, r4, sl
 800111a:	454c      	cmp	r4, r9
 800111c:	46c6      	mov	lr, r8
 800111e:	464d      	mov	r5, r9
 8001120:	d319      	bcc.n	8001156 <__udivmoddi4+0x296>
 8001122:	d016      	beq.n	8001152 <__udivmoddi4+0x292>
 8001124:	b15e      	cbz	r6, 800113e <__udivmoddi4+0x27e>
 8001126:	ebb3 020e 	subs.w	r2, r3, lr
 800112a:	eb64 0405 	sbc.w	r4, r4, r5
 800112e:	fa04 f707 	lsl.w	r7, r4, r7
 8001132:	fa22 f301 	lsr.w	r3, r2, r1
 8001136:	431f      	orrs	r7, r3
 8001138:	40cc      	lsrs	r4, r1
 800113a:	e9c6 7400 	strd	r7, r4, [r6]
 800113e:	2100      	movs	r1, #0
 8001140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001144:	4631      	mov	r1, r6
 8001146:	4630      	mov	r0, r6
 8001148:	e70c      	b.n	8000f64 <__udivmoddi4+0xa4>
 800114a:	468c      	mov	ip, r1
 800114c:	e6eb      	b.n	8000f26 <__udivmoddi4+0x66>
 800114e:	4610      	mov	r0, r2
 8001150:	e6ff      	b.n	8000f52 <__udivmoddi4+0x92>
 8001152:	4543      	cmp	r3, r8
 8001154:	d2e6      	bcs.n	8001124 <__udivmoddi4+0x264>
 8001156:	ebb8 0e02 	subs.w	lr, r8, r2
 800115a:	eb69 050c 	sbc.w	r5, r9, ip
 800115e:	3801      	subs	r0, #1
 8001160:	e7e0      	b.n	8001124 <__udivmoddi4+0x264>
 8001162:	4628      	mov	r0, r5
 8001164:	e7d3      	b.n	800110e <__udivmoddi4+0x24e>
 8001166:	4611      	mov	r1, r2
 8001168:	e78c      	b.n	8001084 <__udivmoddi4+0x1c4>
 800116a:	4681      	mov	r9, r0
 800116c:	e7b9      	b.n	80010e2 <__udivmoddi4+0x222>
 800116e:	4608      	mov	r0, r1
 8001170:	e773      	b.n	800105a <__udivmoddi4+0x19a>
 8001172:	4608      	mov	r0, r1
 8001174:	e749      	b.n	800100a <__udivmoddi4+0x14a>
 8001176:	f1ac 0c02 	sub.w	ip, ip, #2
 800117a:	443d      	add	r5, r7
 800117c:	e713      	b.n	8000fa6 <__udivmoddi4+0xe6>
 800117e:	3802      	subs	r0, #2
 8001180:	443c      	add	r4, r7
 8001182:	e724      	b.n	8000fce <__udivmoddi4+0x10e>

08001184 <__aeabi_idiv0>:
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <get_ADC_values>:
#include "main.h"
#include "ADC_driver.h"
#include "sensors.h"

float get_ADC_values()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <get_ADC_values+0x28>)
 800118e:	f001 fcad 	bl	8002aec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 8001192:	2164      	movs	r1, #100	; 0x64
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <get_ADC_values+0x28>)
 8001196:	f001 fd59 	bl	8002c4c <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc2);//Read value
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <get_ADC_values+0x28>)
 800119c:	f001 fdda 	bl	8002d54 <HAL_ADC_GetValue>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fcac 	bl	8000b00 <__aeabi_ui2f>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200000a8 	.word	0x200000a8

080011b4 <getMedianNum>:
#include "TDS_driver.h"
#include "main.h"
#include "sensors.h"

int getMedianNum(int bArray[], int iFilterLen)
{
 80011b4:	b4b0      	push	{r4, r5, r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	466b      	mov	r3, sp
 80011c0:	461d      	mov	r5, r3
      int bTab[iFilterLen];
 80011c2:	683c      	ldr	r4, [r7, #0]
 80011c4:	1e63      	subs	r3, r4, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	4623      	mov	r3, r4
 80011ca:	4618      	mov	r0, r3
 80011cc:	f04f 0100 	mov.w	r1, #0
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	014b      	lsls	r3, r1, #5
 80011da:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80011de:	0142      	lsls	r2, r0, #5
 80011e0:	4623      	mov	r3, r4
 80011e2:	4618      	mov	r0, r3
 80011e4:	f04f 0100 	mov.w	r1, #0
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	014b      	lsls	r3, r1, #5
 80011f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80011f6:	0142      	lsls	r2, r0, #5
 80011f8:	4623      	mov	r3, r4
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	3307      	adds	r3, #7
 80011fe:	08db      	lsrs	r3, r3, #3
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	ebad 0d03 	sub.w	sp, sp, r3
 8001206:	466b      	mov	r3, sp
 8001208:	3303      	adds	r3, #3
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	60bb      	str	r3, [r7, #8]
      for (char i = 0; i<iFilterLen; i++)
 8001210:	2300      	movs	r3, #0
 8001212:	74fb      	strb	r3, [r7, #19]
 8001214:	e00b      	b.n	800122e <getMedianNum+0x7a>
      bTab[i] = bArray[i];
 8001216:	7cfb      	ldrb	r3, [r7, #19]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	7cfa      	ldrb	r2, [r7, #19]
 8001220:	6819      	ldr	r1, [r3, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (char i = 0; i<iFilterLen; i++)
 8001228:	7cfb      	ldrb	r3, [r7, #19]
 800122a:	3301      	adds	r3, #1
 800122c:	74fb      	strb	r3, [r7, #19]
 800122e:	7cfb      	ldrb	r3, [r7, #19]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	dcef      	bgt.n	8001216 <getMedianNum+0x62>
      int i, j, bTemp;
      for (j = 0; j < iFilterLen - 1; j++)
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	e02e      	b.n	800129a <getMedianNum+0xe6>
      {
      for (i = 0; i < iFilterLen - j - 1; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	e021      	b.n	8001286 <getMedianNum+0xd2>
          {
        if (bTab[i] > bTab[i + 1])
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	1c59      	adds	r1, r3, #1
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001254:	429a      	cmp	r2, r3
 8001256:	dd13      	ble.n	8001280 <getMedianNum+0xcc>
            {
        bTemp = bTab[i];
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	61fb      	str	r3, [r7, #28]
            bTab[i] = bTab[i + 1];
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        bTab[i + 1] = bTemp;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	69f9      	ldr	r1, [r7, #28]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (i = 0; i < iFilterLen - j - 1; i++)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	3b01      	subs	r3, #1
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbd6      	blt.n	8001242 <getMedianNum+0x8e>
      for (j = 0; j < iFilterLen - 1; j++)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	3301      	adds	r3, #1
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbcb      	blt.n	800123c <getMedianNum+0x88>
         }
      }
      }
      if ((iFilterLen & 1) > 0)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dd0a      	ble.n	80012c4 <getMedianNum+0x110>
    bTemp = bTab[(iFilterLen - 1) / 2];
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	0fda      	lsrs	r2, r3, #31
 80012b4:	4413      	add	r3, r2
 80012b6:	105b      	asrs	r3, r3, #1
 80012b8:	461a      	mov	r2, r3
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	e014      	b.n	80012ee <getMedianNum+0x13a>
      else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	0fda      	lsrs	r2, r3, #31
 80012c8:	4413      	add	r3, r2
 80012ca:	105b      	asrs	r3, r3, #1
 80012cc:	461a      	mov	r2, r3
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	0fd9      	lsrs	r1, r3, #31
 80012d8:	440b      	add	r3, r1
 80012da:	105b      	asrs	r3, r3, #1
 80012dc:	1e59      	subs	r1, r3, #1
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012e4:	4413      	add	r3, r2
 80012e6:	0fda      	lsrs	r2, r3, #31
 80012e8:	4413      	add	r3, r2
 80012ea:	105b      	asrs	r3, r3, #1
 80012ec:	61fb      	str	r3, [r7, #28]
      return bTemp;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	46ad      	mov	sp, r5
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bcb0      	pop	{r4, r5, r7}
 80012fa:	4770      	bx	lr

080012fc <fanOn>:

float system_fan_sp = 3.5;
float plant_fan_sp = 3.5;
float heat_cool_fan_sp = 3.5; // set default fan speed values
void fanOn(TIM_HandleTypeDef sys,TIM_HandleTypeDef plant,TIM_HandleTypeDef heat_cool)
{
 80012fc:	b084      	sub	sp, #16
 80012fe:	b598      	push	{r3, r4, r7, lr}
 8001300:	af00      	add	r7, sp, #0
 8001302:	f107 0410 	add.w	r4, r7, #16
 8001306:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   HAL_TIM_PWM_Start(&heat_cool, TIM_CHANNEL_1);	// start heater cooler fan control
 800130a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f002 ff25 	bl	8004160 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;								// sets the PWM frequency of 25Mhz
 8001316:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <fanOn+0xec>)
 8001318:	f640 323f 	movw	r2, #2879	; 0xb3f
 800131c:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;			// sets the fan speed
 800131e:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <fanOn+0xec>)
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fbec 	bl	8000b00 <__aeabi_ui2f>
 8001328:	4602      	mov	r2, r0
 800132a:	4b30      	ldr	r3, [pc, #192]	; (80013ec <fanOn+0xf0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	4610      	mov	r0, r2
 8001332:	f7ff fcf1 	bl	8000d18 <__aeabi_fdiv>
 8001336:	4603      	mov	r3, r0
 8001338:	4c2b      	ldr	r4, [pc, #172]	; (80013e8 <fanOn+0xec>)
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fd88 	bl	8000e50 <__aeabi_f2uiz>
 8001340:	4603      	mov	r3, r0
 8001342:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <fanOn+0xec>)
 8001346:	f245 0214 	movw	r2, #20500	; 0x5014
 800134a:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&sys, TIM_CHANNEL_1);			// start system fan control
 800134c:	2100      	movs	r1, #0
 800134e:	f107 0010 	add.w	r0, r7, #16
 8001352:	f002 ff05 	bl	8004160 <HAL_TIM_PWM_Start>
   TIM3->ARR = 1439;								// sets the PWM frequency of 25Mhz
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <fanOn+0xf4>)
 8001358:	f240 529f 	movw	r2, #1439	; 0x59f
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM3->CCR1 = (TIM3->ARR)/system_fan_sp;				// sets the fan speed
 800135e:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <fanOn+0xf4>)
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fbcc 	bl	8000b00 <__aeabi_ui2f>
 8001368:	4602      	mov	r2, r0
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <fanOn+0xf8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	4610      	mov	r0, r2
 8001372:	f7ff fcd1 	bl	8000d18 <__aeabi_fdiv>
 8001376:	4603      	mov	r3, r0
 8001378:	4c1d      	ldr	r4, [pc, #116]	; (80013f0 <fanOn+0xf4>)
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fd68 	bl	8000e50 <__aeabi_f2uiz>
 8001380:	4603      	mov	r3, r0
 8001382:	6363      	str	r3, [r4, #52]	; 0x34
   TIM3->CNT = 20500;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <fanOn+0xf4>)
 8001386:	f245 0214 	movw	r2, #20500	; 0x5014
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
   TIM1->PSC = 0;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <fanOn+0xec>)
 800138e:	2200      	movs	r2, #0
 8001390:	629a      	str	r2, [r3, #40]	; 0x28

   HAL_TIM_PWM_Start(&plant, TIM_CHANNEL_1);		// start plant fan control
 8001392:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f002 fee1 	bl	8004160 <HAL_TIM_PWM_Start>
   TIM3->ARR = 1439;								// sets the PWM frequency of 25Mhz
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <fanOn+0xf4>)
 80013a0:	f240 529f 	movw	r2, #1439	; 0x59f
 80013a4:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM3->CCR1 = (TIM3->ARR)/plant_fan_sp;				// sets the fan speed
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <fanOn+0xf4>)
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fba8 	bl	8000b00 <__aeabi_ui2f>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <fanOn+0xfc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4619      	mov	r1, r3
 80013b8:	4610      	mov	r0, r2
 80013ba:	f7ff fcad 	bl	8000d18 <__aeabi_fdiv>
 80013be:	4603      	mov	r3, r0
 80013c0:	4c0b      	ldr	r4, [pc, #44]	; (80013f0 <fanOn+0xf4>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fd44 	bl	8000e50 <__aeabi_f2uiz>
 80013c8:	4603      	mov	r3, r0
 80013ca:	6363      	str	r3, [r4, #52]	; 0x34
   TIM3->CNT = 20500;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <fanOn+0xf4>)
 80013ce:	f245 0214 	movw	r2, #20500	; 0x5014
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24
   TIM1->PSC = 0;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <fanOn+0xec>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 80013e2:	b004      	add	sp, #16
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40010000 	.word	0x40010000
 80013ec:	20000008 	.word	0x20000008
 80013f0:	40000400 	.word	0x40000400
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000004 	.word	0x20000004

080013fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	b0b9      	sub	sp, #228	; 0xe4
 8001400:	af32      	add	r7, sp, #200	; 0xc8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001402:	f001 fa9d 	bl	8002940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001406:	f000 f855 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140a:	f000 faff 	bl	8001a0c <MX_GPIO_Init>
  MX_ADC2_Init();
 800140e:	f000 f899 	bl	8001544 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001412:	f000 f8fd 	bl	8001610 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001416:	f000 f99b 	bl	8001750 <MX_TIM2_Init>
  MX_TIM3_Init();
 800141a:	f000 f9e5 	bl	80017e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800141e:	f000 fa59 	bl	80018d4 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001422:	f000 faa5 	bl	8001970 <MX_TIM10_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int runOnce = 1;
 8001426:	2301      	movs	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  while (1)
  {
	 double water_temp = readWaterTemp();
 800142a:	f000 fdeb 	bl	8002004 <readWaterTemp>
 800142e:	e9c7 0102 	strd	r0, r1, [r7, #8]
	 float TDS = readWaterTDS();
 8001432:	f000 fe5d 	bl	80020f0 <readWaterTDS>
 8001436:	6078      	str	r0, [r7, #4]
	  HAL_Delay(100);
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f001 faef 	bl	8002a1c <HAL_Delay>
	  if(runOnce != 0)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f2      	beq.n	800142a <main+0x2e>
	  {
		  fanOn(htim3,htim10,htim1); 	// turn fan control on (sys_fan,plant_fan,heat_cool_fan)
 8001444:	4e17      	ldr	r6, [pc, #92]	; (80014a4 <main+0xa8>)
 8001446:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <main+0xac>)
 8001448:	ab20      	add	r3, sp, #128	; 0x80
 800144a:	4611      	mov	r1, r2
 800144c:	2248      	movs	r2, #72	; 0x48
 800144e:	4618      	mov	r0, r3
 8001450:	f003 fcc4 	bl	8004ddc <memcpy>
 8001454:	4a15      	ldr	r2, [pc, #84]	; (80014ac <main+0xb0>)
 8001456:	ab0e      	add	r3, sp, #56	; 0x38
 8001458:	4611      	mov	r1, r2
 800145a:	2248      	movs	r2, #72	; 0x48
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fcbd 	bl	8004ddc <memcpy>
 8001462:	466d      	mov	r5, sp
 8001464:	f106 0410 	add.w	r4, r6, #16
 8001468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001474:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001478:	e885 0003 	stmia.w	r5, {r0, r1}
 800147c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001480:	f7ff ff3c 	bl	80012fc <fanOn>
		  doseWater(5.0, 5.0, 5.0);		// step the pump motor
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <main+0xb4>)
 800148a:	e9cd 2300 	strd	r2, r3, [sp]
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <main+0xb4>)
 8001494:	f04f 0000 	mov.w	r0, #0
 8001498:	4905      	ldr	r1, [pc, #20]	; (80014b0 <main+0xb4>)
 800149a:	f000 fb52 	bl	8001b42 <doseWater>
		  runOnce = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  {
 80014a2:	e7c2      	b.n	800142a <main+0x2e>
 80014a4:	20000138 	.word	0x20000138
 80014a8:	20000194 	.word	0x20000194
 80014ac:	200000f0 	.word	0x200000f0
 80014b0:	40140000 	.word	0x40140000

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b092      	sub	sp, #72	; 0x48
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0318 	add.w	r3, r7, #24
 80014be:	2230      	movs	r2, #48	; 0x30
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 fc98 	bl	8004df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014da:	2301      	movs	r3, #1
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014de:	2310      	movs	r3, #16
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e2:	2302      	movs	r3, #2
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e6:	2300      	movs	r3, #0
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014ea:	2308      	movs	r3, #8
 80014ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 80014ee:	23d8      	movs	r3, #216	; 0xd8
 80014f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80014f2:	2306      	movs	r3, #6
 80014f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014f6:	2304      	movs	r3, #4
 80014f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 f924 	bl	800374c <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800150a:	f000 fb15 	bl	8001b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001512:	2302      	movs	r3, #2
 8001514:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800151a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800151e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001524:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2102      	movs	r1, #2
 800152a:	4618      	mov	r0, r3
 800152c:	f002 fb5e 	bl	8003bec <HAL_RCC_ClockConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001536:	f000 faff 	bl	8001b38 <Error_Handler>
  }
}
 800153a:	bf00      	nop
 800153c:	3748      	adds	r7, #72	; 0x48
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC2_Init 1 */
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001556:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <MX_ADC2_Init+0xc0>)
 8001558:	2201      	movs	r2, #1
 800155a:	761a      	strb	r2, [r3, #24]
  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <MX_ADC2_Init+0xc0>)
 800155e:	4a2a      	ldr	r2, [pc, #168]	; (8001608 <MX_ADC2_Init+0xc4>)
 8001560:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <MX_ADC2_Init+0xc0>)
 8001564:	2200      	movs	r2, #0
 8001566:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001568:	4b26      	ldr	r3, [pc, #152]	; (8001604 <MX_ADC2_Init+0xc0>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800156e:	4b25      	ldr	r3, [pc, #148]	; (8001604 <MX_ADC2_Init+0xc0>)
 8001570:	2201      	movs	r2, #1
 8001572:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <MX_ADC2_Init+0xc0>)
 8001576:	2200      	movs	r2, #0
 8001578:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <MX_ADC2_Init+0xc0>)
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <MX_ADC2_Init+0xc0>)
 8001584:	2201      	movs	r2, #1
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_ADC2_Init+0xc0>)
 800158a:	2200      	movs	r2, #0
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_ADC2_Init+0xc0>)
 8001590:	4a1e      	ldr	r2, [pc, #120]	; (800160c <MX_ADC2_Init+0xc8>)
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_ADC2_Init+0xc0>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_ADC2_Init+0xc0>)
 800159c:	2202      	movs	r2, #2
 800159e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_ADC2_Init+0xc0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_ADC2_Init+0xc0>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015ae:	4815      	ldr	r0, [pc, #84]	; (8001604 <MX_ADC2_Init+0xc0>)
 80015b0:	f001 fa58 	bl	8002a64 <HAL_ADC_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 80015ba:	f000 fabd 	bl	8001b38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015be:	2304      	movs	r3, #4
 80015c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015c2:	2301      	movs	r3, #1
 80015c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015ca:	463b      	mov	r3, r7
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_ADC2_Init+0xc0>)
 80015d0:	f001 fbcc 	bl	8002d6c <HAL_ADC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_ADC2_Init+0x9a>
  {
    Error_Handler();
 80015da:	f000 faad 	bl	8001b38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015de:	2305      	movs	r3, #5
 80015e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015e6:	463b      	mov	r3, r7
 80015e8:	4619      	mov	r1, r3
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <MX_ADC2_Init+0xc0>)
 80015ec:	f001 fbbe 	bl	8002d6c <HAL_ADC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80015f6:	f000 fa9f 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200000a8 	.word	0x200000a8
 8001608:	40012100 	.word	0x40012100
 800160c:	0f000001 	.word	0x0f000001

08001610 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b096      	sub	sp, #88	; 0x58
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2220      	movs	r2, #32
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f003 fbd5 	bl	8004df8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800164e:	4b3e      	ldr	r3, [pc, #248]	; (8001748 <MX_TIM1_Init+0x138>)
 8001650:	4a3e      	ldr	r2, [pc, #248]	; (800174c <MX_TIM1_Init+0x13c>)
 8001652:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001654:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <MX_TIM1_Init+0x138>)
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <MX_TIM1_Init+0x138>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001660:	4b39      	ldr	r3, [pc, #228]	; (8001748 <MX_TIM1_Init+0x138>)
 8001662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001666:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001668:	4b37      	ldr	r3, [pc, #220]	; (8001748 <MX_TIM1_Init+0x138>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800166e:	4b36      	ldr	r3, [pc, #216]	; (8001748 <MX_TIM1_Init+0x138>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001674:	4b34      	ldr	r3, [pc, #208]	; (8001748 <MX_TIM1_Init+0x138>)
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800167a:	4833      	ldr	r0, [pc, #204]	; (8001748 <MX_TIM1_Init+0x138>)
 800167c:	f002 fc62 	bl	8003f44 <HAL_TIM_Base_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001686:	f000 fa57 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001690:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001694:	4619      	mov	r1, r3
 8001696:	482c      	ldr	r0, [pc, #176]	; (8001748 <MX_TIM1_Init+0x138>)
 8001698:	f002 fee8 	bl	800446c <HAL_TIM_ConfigClockSource>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016a2:	f000 fa49 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016a6:	4828      	ldr	r0, [pc, #160]	; (8001748 <MX_TIM1_Init+0x138>)
 80016a8:	f002 fd02 	bl	80040b0 <HAL_TIM_PWM_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016b2:	f000 fa41 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016c2:	4619      	mov	r1, r3
 80016c4:	4820      	ldr	r0, [pc, #128]	; (8001748 <MX_TIM1_Init+0x138>)
 80016c6:	f003 fa99 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016d0:	f000 fa32 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d4:	2360      	movs	r3, #96	; 0x60
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016e0:	2300      	movs	r3, #0
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016e4:	2304      	movs	r3, #4
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f4:	2200      	movs	r2, #0
 80016f6:	4619      	mov	r1, r3
 80016f8:	4813      	ldr	r0, [pc, #76]	; (8001748 <MX_TIM1_Init+0x138>)
 80016fa:	f002 fdf9 	bl	80042f0 <HAL_TIM_PWM_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001704:	f000 fa18 	bl	8001b38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800171c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001720:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4619      	mov	r1, r3
 800172a:	4807      	ldr	r0, [pc, #28]	; (8001748 <MX_TIM1_Init+0x138>)
 800172c:	f003 fae0 	bl	8004cf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001736:	f000 f9ff 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800173a:	4803      	ldr	r0, [pc, #12]	; (8001748 <MX_TIM1_Init+0x138>)
 800173c:	f000 fed6 	bl	80024ec <HAL_TIM_MspPostInit>

}
 8001740:	bf00      	nop
 8001742:	3758      	adds	r7, #88	; 0x58
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000194 	.word	0x20000194
 800174c:	40010000 	.word	0x40010000

08001750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	463b      	mov	r3, r7
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <MX_TIM2_Init+0x94>)
 800176e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_TIM2_Init+0x94>)
 8001776:	2223      	movs	r2, #35	; 0x23
 8001778:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_TIM2_Init+0x94>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_TIM2_Init+0x94>)
 8001782:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001786:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <MX_TIM2_Init+0x94>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <MX_TIM2_Init+0x94>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001794:	4813      	ldr	r0, [pc, #76]	; (80017e4 <MX_TIM2_Init+0x94>)
 8001796:	f002 fbd5 	bl	8003f44 <HAL_TIM_Base_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017a0:	f000 f9ca 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4619      	mov	r1, r3
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <MX_TIM2_Init+0x94>)
 80017b2:	f002 fe5b 	bl	800446c <HAL_TIM_ConfigClockSource>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017bc:	f000 f9bc 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017c8:	463b      	mov	r3, r7
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_TIM2_Init+0x94>)
 80017ce:	f003 fa15 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017d8:	f000 f9ae 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200001dc 	.word	0x200001dc

080017e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	; 0x38
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	f107 0320 	add.w	r3, r7, #32
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	615a      	str	r2, [r3, #20]
 8001816:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001818:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <MX_TIM3_Init+0xe4>)
 800181a:	4a2d      	ldr	r2, [pc, #180]	; (80018d0 <MX_TIM3_Init+0xe8>)
 800181c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <MX_TIM3_Init+0xe4>)
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b29      	ldr	r3, [pc, #164]	; (80018cc <MX_TIM3_Init+0xe4>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <MX_TIM3_Init+0xe4>)
 800182c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001830:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <MX_TIM3_Init+0xe4>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <MX_TIM3_Init+0xe4>)
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800183e:	4823      	ldr	r0, [pc, #140]	; (80018cc <MX_TIM3_Init+0xe4>)
 8001840:	f002 fb80 	bl	8003f44 <HAL_TIM_Base_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800184a:	f000 f975 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001854:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001858:	4619      	mov	r1, r3
 800185a:	481c      	ldr	r0, [pc, #112]	; (80018cc <MX_TIM3_Init+0xe4>)
 800185c:	f002 fe06 	bl	800446c <HAL_TIM_ConfigClockSource>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001866:	f000 f967 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800186a:	4818      	ldr	r0, [pc, #96]	; (80018cc <MX_TIM3_Init+0xe4>)
 800186c:	f002 fc20 	bl	80040b0 <HAL_TIM_PWM_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001876:	f000 f95f 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001882:	f107 0320 	add.w	r3, r7, #32
 8001886:	4619      	mov	r1, r3
 8001888:	4810      	ldr	r0, [pc, #64]	; (80018cc <MX_TIM3_Init+0xe4>)
 800188a:	f003 f9b7 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001894:	f000 f950 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001898:	2360      	movs	r3, #96	; 0x60
 800189a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	4619      	mov	r1, r3
 80018ae:	4807      	ldr	r0, [pc, #28]	; (80018cc <MX_TIM3_Init+0xe4>)
 80018b0:	f002 fd1e 	bl	80042f0 <HAL_TIM_PWM_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80018ba:	f000 f93d 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018be:	4803      	ldr	r0, [pc, #12]	; (80018cc <MX_TIM3_Init+0xe4>)
 80018c0:	f000 fe14 	bl	80024ec <HAL_TIM_MspPostInit>

}
 80018c4:	bf00      	nop
 80018c6:	3738      	adds	r7, #56	; 0x38
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000138 	.word	0x20000138
 80018d0:	40000400 	.word	0x40000400

080018d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <MX_TIM4_Init+0x94>)
 80018f2:	4a1e      	ldr	r2, [pc, #120]	; (800196c <MX_TIM4_Init+0x98>)
 80018f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_TIM4_Init+0x94>)
 80018f8:	2223      	movs	r2, #35	; 0x23
 80018fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_TIM4_Init+0x94>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_TIM4_Init+0x94>)
 8001904:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001908:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_TIM4_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <MX_TIM4_Init+0x94>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001916:	4814      	ldr	r0, [pc, #80]	; (8001968 <MX_TIM4_Init+0x94>)
 8001918:	f002 fb14 	bl	8003f44 <HAL_TIM_Base_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001922:	f000 f909 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	4619      	mov	r1, r3
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_TIM4_Init+0x94>)
 8001934:	f002 fd9a 	bl	800446c <HAL_TIM_ConfigClockSource>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800193e:	f000 f8fb 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	4619      	mov	r1, r3
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <MX_TIM4_Init+0x94>)
 8001950:	f003 f954 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800195a:	f000 f8ed 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000060 	.word	0x20000060
 800196c:	40000800 	.word	0x40000800

08001970 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
 8001984:	615a      	str	r2, [r3, #20]
 8001986:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <MX_TIM10_Init+0x94>)
 800198a:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <MX_TIM10_Init+0x98>)
 800198c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <MX_TIM10_Init+0x94>)
 8001990:	2200      	movs	r2, #0
 8001992:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <MX_TIM10_Init+0x94>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <MX_TIM10_Init+0x94>)
 800199c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <MX_TIM10_Init+0x94>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <MX_TIM10_Init+0x94>)
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80019ae:	4815      	ldr	r0, [pc, #84]	; (8001a04 <MX_TIM10_Init+0x94>)
 80019b0:	f002 fac8 	bl	8003f44 <HAL_TIM_Base_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80019ba:	f000 f8bd 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80019be:	4811      	ldr	r0, [pc, #68]	; (8001a04 <MX_TIM10_Init+0x94>)
 80019c0:	f002 fb76 	bl	80040b0 <HAL_TIM_PWM_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80019ca:	f000 f8b5 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ce:	2360      	movs	r3, #96	; 0x60
 80019d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	4619      	mov	r1, r3
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM10_Init+0x94>)
 80019e6:	f002 fc83 	bl	80042f0 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80019f0:	f000 f8a2 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM10_Init+0x94>)
 80019f6:	f000 fd79 	bl	80024ec <HAL_TIM_MspPostInit>

}
 80019fa:	bf00      	nop
 80019fc:	3720      	adds	r7, #32
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200000f0 	.word	0x200000f0
 8001a08:	40014400 	.word	0x40014400

08001a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <MX_GPIO_Init+0x120>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a40      	ldr	r2, [pc, #256]	; (8001b2c <MX_GPIO_Init+0x120>)
 8001a2c:	f043 0310 	orr.w	r3, r3, #16
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b3e      	ldr	r3, [pc, #248]	; (8001b2c <MX_GPIO_Init+0x120>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <MX_GPIO_Init+0x120>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a39      	ldr	r2, [pc, #228]	; (8001b2c <MX_GPIO_Init+0x120>)
 8001a48:	f043 0320 	orr.w	r3, r3, #32
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <MX_GPIO_Init+0x120>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <MX_GPIO_Init+0x120>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a32      	ldr	r2, [pc, #200]	; (8001b2c <MX_GPIO_Init+0x120>)
 8001a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <MX_GPIO_Init+0x120>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <MX_GPIO_Init+0x120>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a2b      	ldr	r2, [pc, #172]	; (8001b2c <MX_GPIO_Init+0x120>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <MX_GPIO_Init+0x120>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 8001a92:	2201      	movs	r2, #1
 8001a94:	21fc      	movs	r1, #252	; 0xfc
 8001a96:	4826      	ldr	r0, [pc, #152]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001a98:	f001 fe27 	bl	80036ea <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	4824      	ldr	r0, [pc, #144]	; (8001b34 <MX_GPIO_Init+0x128>)
 8001aa2:	f001 fe22 	bl	80036ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, water_heat_cool_Pin|grow_light_Pin|water_pump_enable_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 8001aac:	4820      	ldr	r0, [pc, #128]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001aae:	f001 fe1c 	bl	80036ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 8001ab2:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8001ab6:	617b      	str	r3, [r7, #20]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4819      	ldr	r0, [pc, #100]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001acc:	f001 fc58 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4813      	ldr	r0, [pc, #76]	; (8001b34 <MX_GPIO_Init+0x128>)
 8001ae8:	f001 fc4a 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin;
 8001aec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	480a      	ldr	r0, [pc, #40]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001b06:	f001 fc3b 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001b1e:	f001 fc2f 	bl	8003380 <HAL_GPIO_Init>

}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40020000 	.word	0x40020000

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <Error_Handler+0x8>

08001b42 <doseWater>:
#include "main.h"



void doseWater(double acid_ml, double base_ml, double nutrient_ml)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b088      	sub	sp, #32
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b4c:	e9c7 2300 	strd	r2, r3, [r7]
	int ph_down_steps = calc_dose_steps(acid_ml);
 8001b50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b54:	f000 f82c 	bl	8001bb0 <calc_dose_steps>
 8001b58:	61f8      	str	r0, [r7, #28]
	int ph_up_steps = calc_dose_steps(base_ml);
 8001b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b5e:	f000 f827 	bl	8001bb0 <calc_dose_steps>
 8001b62:	61b8      	str	r0, [r7, #24]
	int nutrient_steps = calc_dose_steps(nutrient_ml);
 8001b64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b68:	f000 f822 	bl	8001bb0 <calc_dose_steps>
 8001b6c:	6178      	str	r0, [r7, #20]
	step(nutrient_steps,ph_up_steps, ph_down_steps);
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	69b9      	ldr	r1, [r7, #24]
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f000 f9e0 	bl	8001f38 <step>
}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <delay_Stepper>:
#include "peristaltic_driver.h"
#include "main.h"
//extern TIM_HandleTypeDef step_timer;

void delay_Stepper(uint16_t us)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COUNTER(&htim2,0);  			 // set the counter value a 0
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <delay_Stepper+0x2c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8001b92:	bf00      	nop
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <delay_Stepper+0x2c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3f9      	bcc.n	8001b94 <delay_Stepper+0x14>
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	200001dc 	.word	0x200001dc

08001bb0 <calc_dose_steps>:

int calc_dose_steps(double miliLiters)	// takes a dose in mls and returns the number of steps for that volume
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	e9c7 0100 	strd	r0, r1, [r7]
	double steps = 0;
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if	   (miliLiters > 0 && miliLiters <= 1)	steps = (1/0.221)*(miliLiters+0.2012)*(1700);
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bd2:	f7fe fe5d 	bl	8000890 <__aeabi_dcmpgt>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d027      	beq.n	8001c2c <calc_dose_steps+0x7c>
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	4bb3      	ldr	r3, [pc, #716]	; (8001eb0 <calc_dose_steps+0x300>)
 8001be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001be6:	f7fe fe3f 	bl	8000868 <__aeabi_dcmple>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01d      	beq.n	8001c2c <calc_dose_steps+0x7c>
 8001bf0:	a39f      	add	r3, pc, #636	; (adr r3, 8001e70 <calc_dose_steps+0x2c0>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bfa:	f7fe fc15 	bl	8000428 <__adddf3>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	a39c      	add	r3, pc, #624	; (adr r3, 8001e78 <calc_dose_steps+0x2c8>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fadc 	bl	80001c8 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	a399      	add	r3, pc, #612	; (adr r3, 8001e80 <calc_dose_steps+0x2d0>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe fad3 	bl	80001c8 <__aeabi_dmul>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001c2a:	e118      	b.n	8001e5e <calc_dose_steps+0x2ae>
	else if(miliLiters > 1 && miliLiters <= 2)	steps = (1/0.221)*(miliLiters+0.2012)*(1740);
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4b9f      	ldr	r3, [pc, #636]	; (8001eb0 <calc_dose_steps+0x300>)
 8001c32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c36:	f7fe fe2b 	bl	8000890 <__aeabi_dcmpgt>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d028      	beq.n	8001c92 <calc_dose_steps+0xe2>
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c4c:	f7fe fe0c 	bl	8000868 <__aeabi_dcmple>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01d      	beq.n	8001c92 <calc_dose_steps+0xe2>
 8001c56:	a386      	add	r3, pc, #536	; (adr r3, 8001e70 <calc_dose_steps+0x2c0>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c60:	f7fe fbe2 	bl	8000428 <__adddf3>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	a382      	add	r3, pc, #520	; (adr r3, 8001e78 <calc_dose_steps+0x2c8>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe faa9 	bl	80001c8 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	a382      	add	r3, pc, #520	; (adr r3, 8001e88 <calc_dose_steps+0x2d8>)
 8001c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c84:	f7fe faa0 	bl	80001c8 <__aeabi_dmul>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001c90:	e0e5      	b.n	8001e5e <calc_dose_steps+0x2ae>
	else if(miliLiters > 2 && miliLiters <= 3)  steps = (1/0.221)*(miliLiters+0.2012)*(1793);
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c9e:	f7fe fdf7 	bl	8000890 <__aeabi_dcmpgt>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d027      	beq.n	8001cf8 <calc_dose_steps+0x148>
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	4b81      	ldr	r3, [pc, #516]	; (8001eb4 <calc_dose_steps+0x304>)
 8001cae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cb2:	f7fe fdd9 	bl	8000868 <__aeabi_dcmple>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01d      	beq.n	8001cf8 <calc_dose_steps+0x148>
 8001cbc:	a36c      	add	r3, pc, #432	; (adr r3, 8001e70 <calc_dose_steps+0x2c0>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cc6:	f7fe fbaf 	bl	8000428 <__adddf3>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	a369      	add	r3, pc, #420	; (adr r3, 8001e78 <calc_dose_steps+0x2c8>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe fa76 	bl	80001c8 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	a36a      	add	r3, pc, #424	; (adr r3, 8001e90 <calc_dose_steps+0x2e0>)
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	f7fe fa6d 	bl	80001c8 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001cf6:	e0b2      	b.n	8001e5e <calc_dose_steps+0x2ae>
	else if(miliLiters > 3 && miliLiters <= 4)  steps = (1/0.221)*(miliLiters+0.2012)*(1793);
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4b6d      	ldr	r3, [pc, #436]	; (8001eb4 <calc_dose_steps+0x304>)
 8001cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d02:	f7fe fdc5 	bl	8000890 <__aeabi_dcmpgt>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d027      	beq.n	8001d5c <calc_dose_steps+0x1ac>
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	4b69      	ldr	r3, [pc, #420]	; (8001eb8 <calc_dose_steps+0x308>)
 8001d12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d16:	f7fe fda7 	bl	8000868 <__aeabi_dcmple>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01d      	beq.n	8001d5c <calc_dose_steps+0x1ac>
 8001d20:	a353      	add	r3, pc, #332	; (adr r3, 8001e70 <calc_dose_steps+0x2c0>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d2a:	f7fe fb7d 	bl	8000428 <__adddf3>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	a350      	add	r3, pc, #320	; (adr r3, 8001e78 <calc_dose_steps+0x2c8>)
 8001d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3c:	f7fe fa44 	bl	80001c8 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	a351      	add	r3, pc, #324	; (adr r3, 8001e90 <calc_dose_steps+0x2e0>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe fa3b 	bl	80001c8 <__aeabi_dmul>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001d5a:	e080      	b.n	8001e5e <calc_dose_steps+0x2ae>
	else if(miliLiters > 4 && miliLiters <= 5)  steps = (1/0.221)*(miliLiters+0.2012)*(1893);
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	4b55      	ldr	r3, [pc, #340]	; (8001eb8 <calc_dose_steps+0x308>)
 8001d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d66:	f7fe fd93 	bl	8000890 <__aeabi_dcmpgt>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d027      	beq.n	8001dc0 <calc_dose_steps+0x210>
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b51      	ldr	r3, [pc, #324]	; (8001ebc <calc_dose_steps+0x30c>)
 8001d76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d7a:	f7fe fd75 	bl	8000868 <__aeabi_dcmple>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01d      	beq.n	8001dc0 <calc_dose_steps+0x210>
 8001d84:	a33a      	add	r3, pc, #232	; (adr r3, 8001e70 <calc_dose_steps+0x2c0>)
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d8e:	f7fe fb4b 	bl	8000428 <__adddf3>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	a337      	add	r3, pc, #220	; (adr r3, 8001e78 <calc_dose_steps+0x2c8>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fa12 	bl	80001c8 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	a33a      	add	r3, pc, #232	; (adr r3, 8001e98 <calc_dose_steps+0x2e8>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	f7fe fa09 	bl	80001c8 <__aeabi_dmul>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001dbe:	e04e      	b.n	8001e5e <calc_dose_steps+0x2ae>
	else if(miliLiters > 5 && miliLiters <= 30) steps = (1/0.221)*(miliLiters+0.2012)*(1900);
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <calc_dose_steps+0x30c>)
 8001dc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dca:	f7fe fd61 	bl	8000890 <__aeabi_dcmpgt>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d027      	beq.n	8001e24 <calc_dose_steps+0x274>
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <calc_dose_steps+0x310>)
 8001dda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dde:	f7fe fd43 	bl	8000868 <__aeabi_dcmple>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01d      	beq.n	8001e24 <calc_dose_steps+0x274>
 8001de8:	a321      	add	r3, pc, #132	; (adr r3, 8001e70 <calc_dose_steps+0x2c0>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001df2:	f7fe fb19 	bl	8000428 <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	a31e      	add	r3, pc, #120	; (adr r3, 8001e78 <calc_dose_steps+0x2c8>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe f9e0 	bl	80001c8 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	a323      	add	r3, pc, #140	; (adr r3, 8001ea0 <calc_dose_steps+0x2f0>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe f9d7 	bl	80001c8 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001e22:	e01c      	b.n	8001e5e <calc_dose_steps+0x2ae>
	else steps = (1/0.221)*(miliLiters+0.2012)*(1915);
 8001e24:	a312      	add	r3, pc, #72	; (adr r3, 8001e70 <calc_dose_steps+0x2c0>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e2e:	f7fe fafb 	bl	8000428 <__adddf3>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	a30f      	add	r3, pc, #60	; (adr r3, 8001e78 <calc_dose_steps+0x2c8>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	f7fe f9c2 	bl	80001c8 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	a316      	add	r3, pc, #88	; (adr r3, 8001ea8 <calc_dose_steps+0x2f8>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe f9b9 	bl	80001c8 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int)steps;
 8001e5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e62:	f7fe fd1f 	bl	80008a4 <__aeabi_d2iz>
 8001e66:	4603      	mov	r3, r0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	edfa43fe 	.word	0xedfa43fe
 8001e74:	3fc9c0eb 	.word	0x3fc9c0eb
 8001e78:	f2197bf2 	.word	0xf2197bf2
 8001e7c:	4012197b 	.word	0x4012197b
 8001e80:	00000000 	.word	0x00000000
 8001e84:	409a9000 	.word	0x409a9000
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	409b3000 	.word	0x409b3000
 8001e90:	00000000 	.word	0x00000000
 8001e94:	409c0400 	.word	0x409c0400
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	409d9400 	.word	0x409d9400
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	409db000 	.word	0x409db000
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	409dec00 	.word	0x409dec00
 8001eb0:	3ff00000 	.word	0x3ff00000
 8001eb4:	40080000 	.word	0x40080000
 8001eb8:	40100000 	.word	0x40100000
 8001ebc:	40140000 	.word	0x40140000
 8001ec0:	403e0000 	.word	0x403e0000

08001ec4 <disablePumps>:

void disablePumps()
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_7,GPIO_PIN_SET);	// disable all pumps
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <disablePumps+0x28>)
 8001ece:	f001 fc0c 	bl	80036ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2120      	movs	r1, #32
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <disablePumps+0x28>)
 8001ed8:	f001 fc07 	bl	80036ea <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_SET);
 8001edc:	2201      	movs	r2, #1
 8001ede:	2140      	movs	r1, #64	; 0x40
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <disablePumps+0x28>)
 8001ee2:	f001 fc02 	bl	80036ea <HAL_GPIO_WritePin>

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000

08001ef0 <enablePumps>:

void enablePumps(int nutrient_steps, int ph_up_steps, int ph_down_steps)// enable only the pumps that are going to dose
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
	if(nutrient_steps>0)HAL_GPIO_WritePin(GPIOE,128,GPIO_PIN_RESET);		// enable nutrient pump
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	dd04      	ble.n	8001f0c <enablePumps+0x1c>
 8001f02:	2200      	movs	r2, #0
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	480b      	ldr	r0, [pc, #44]	; (8001f34 <enablePumps+0x44>)
 8001f08:	f001 fbef 	bl	80036ea <HAL_GPIO_WritePin>
	if(ph_up_steps>0)	HAL_GPIO_WritePin(GPIOE,64,GPIO_PIN_RESET);		// enable ph down pump
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	dd04      	ble.n	8001f1c <enablePumps+0x2c>
 8001f12:	2200      	movs	r2, #0
 8001f14:	2140      	movs	r1, #64	; 0x40
 8001f16:	4807      	ldr	r0, [pc, #28]	; (8001f34 <enablePumps+0x44>)
 8001f18:	f001 fbe7 	bl	80036ea <HAL_GPIO_WritePin>
	if(ph_down_steps>0)	HAL_GPIO_WritePin(GPIOE,32,GPIO_PIN_RESET);		// enable ph up pump
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	dd04      	ble.n	8001f2c <enablePumps+0x3c>
 8001f22:	2200      	movs	r2, #0
 8001f24:	2120      	movs	r1, #32
 8001f26:	4803      	ldr	r0, [pc, #12]	; (8001f34 <enablePumps+0x44>)
 8001f28:	f001 fbdf 	bl	80036ea <HAL_GPIO_WritePin>
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000

08001f38 <step>:

void step(int nutrient_steps, int ph_up_steps, int ph_down_steps)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
		int most_steps = nutrient_steps;										// find the largest dose in steps. Will be used in step loop
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	617b      	str	r3, [r7, #20]
		if(ph_up_steps>most_steps) most_steps 	= ph_up_steps;
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	dd01      	ble.n	8001f54 <step+0x1c>
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	617b      	str	r3, [r7, #20]
		if(ph_down_steps>most_steps) most_steps = ph_down_steps;
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dd01      	ble.n	8001f60 <step+0x28>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	617b      	str	r3, [r7, #20]
		enablePumps(nutrient_steps,ph_up_steps,ph_down_steps);					// enable only the pumps that are going to dose
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff ffc3 	bl	8001ef0 <enablePumps>
		 HAL_TIM_Base_Start(&htim2);
 8001f6a:	4824      	ldr	r0, [pc, #144]	; (8001ffc <step+0xc4>)
 8001f6c:	f002 f83a 	bl	8003fe4 <HAL_TIM_Base_Start>
		for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	e038      	b.n	8001fe8 <step+0xb0>
		{
			if(i<nutrient_steps)	HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	da03      	bge.n	8001f86 <step+0x4e>
 8001f7e:	2110      	movs	r1, #16
 8001f80:	481f      	ldr	r0, [pc, #124]	; (8002000 <step+0xc8>)
 8001f82:	f001 fbca 	bl	800371a <HAL_GPIO_TogglePin>
			if(i<ph_up_steps)		HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	da03      	bge.n	8001f96 <step+0x5e>
 8001f8e:	2104      	movs	r1, #4
 8001f90:	481b      	ldr	r0, [pc, #108]	; (8002000 <step+0xc8>)
 8001f92:	f001 fbc2 	bl	800371a <HAL_GPIO_TogglePin>
			if(i<ph_down_steps)		HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	da03      	bge.n	8001fa6 <step+0x6e>
 8001f9e:	2108      	movs	r1, #8
 8001fa0:	4817      	ldr	r0, [pc, #92]	; (8002000 <step+0xc8>)
 8001fa2:	f001 fbba 	bl	800371a <HAL_GPIO_TogglePin>
			delay_Stepper(40);
 8001fa6:	2028      	movs	r0, #40	; 0x28
 8001fa8:	f7ff fdea 	bl	8001b80 <delay_Stepper>
			if(i<nutrient_steps)	HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	da03      	bge.n	8001fbc <step+0x84>
 8001fb4:	2110      	movs	r1, #16
 8001fb6:	4812      	ldr	r0, [pc, #72]	; (8002000 <step+0xc8>)
 8001fb8:	f001 fbaf 	bl	800371a <HAL_GPIO_TogglePin>
			if(i<ph_up_steps)		HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	da03      	bge.n	8001fcc <step+0x94>
 8001fc4:	2104      	movs	r1, #4
 8001fc6:	480e      	ldr	r0, [pc, #56]	; (8002000 <step+0xc8>)
 8001fc8:	f001 fba7 	bl	800371a <HAL_GPIO_TogglePin>
			if(i<ph_down_steps)		HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	da03      	bge.n	8001fdc <step+0xa4>
 8001fd4:	2108      	movs	r1, #8
 8001fd6:	480a      	ldr	r0, [pc, #40]	; (8002000 <step+0xc8>)
 8001fd8:	f001 fb9f 	bl	800371a <HAL_GPIO_TogglePin>
			delay_Stepper(40);
 8001fdc:	2028      	movs	r0, #40	; 0x28
 8001fde:	f7ff fdcf 	bl	8001b80 <delay_Stepper>
		for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dbc2      	blt.n	8001f76 <step+0x3e>
		}
		disablePumps();
 8001ff0:	f7ff ff68 	bl	8001ec4 <disablePumps>
}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	200001dc 	.word	0x200001dc
 8002000:	40021000 	.word	0x40021000

08002004 <readWaterTemp>:
uint16_t TEMP;
double Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;
double readWaterTemp(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	 DWT_Delay_Init();
 8002008:	f000 fb28 	bl	800265c <DWT_Delay_Init>

	 Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
 800200c:	2101      	movs	r1, #1
 800200e:	4830      	ldr	r0, [pc, #192]	; (80020d0 <readWaterTemp+0xcc>)
 8002010:	f000 fc30 	bl	8002874 <Set_Pin_Output>
	 HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 1);
 8002014:	2201      	movs	r2, #1
 8002016:	2101      	movs	r1, #1
 8002018:	482d      	ldr	r0, [pc, #180]	; (80020d0 <readWaterTemp+0xcc>)
 800201a:	f001 fb66 	bl	80036ea <HAL_GPIO_WritePin>
	 DWT_Delay_us(100);
 800201e:	2064      	movs	r0, #100	; 0x64
 8002020:	f000 fb4c 	bl	80026bc <DWT_Delay_us>
	 Presence = DS18B20_Start();
 8002024:	f000 fb72 	bl	800270c <DS18B20_Start>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <readWaterTemp+0xd0>)
 800202e:	701a      	strb	r2, [r3, #0]

	 DWT_Delay_us (300);
 8002030:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002034:	f000 fb42 	bl	80026bc <DWT_Delay_us>
	 DS18B20_Write (0xCC);  // skip ROM
 8002038:	20cc      	movs	r0, #204	; 0xcc
 800203a:	f000 fb97 	bl	800276c <DS18B20_Write>
	 DS18B20_Write (0x44);  // convert t
 800203e:	2044      	movs	r0, #68	; 0x44
 8002040:	f000 fb94 	bl	800276c <DS18B20_Write>
	 DWT_Delay_us (800000);
 8002044:	4824      	ldr	r0, [pc, #144]	; (80020d8 <readWaterTemp+0xd4>)
 8002046:	f000 fb39 	bl	80026bc <DWT_Delay_us>

	 Presence = DS18B20_Start();
 800204a:	f000 fb5f 	bl	800270c <DS18B20_Start>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <readWaterTemp+0xd0>)
 8002054:	701a      	strb	r2, [r3, #0]
	 DWT_Delay_us (300);
 8002056:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800205a:	f000 fb2f 	bl	80026bc <DWT_Delay_us>
	 DS18B20_Write (0xCC);  // skip ROM
 800205e:	20cc      	movs	r0, #204	; 0xcc
 8002060:	f000 fb84 	bl	800276c <DS18B20_Write>
	 DS18B20_Write (0xBE);  // Read Scratch-pad
 8002064:	20be      	movs	r0, #190	; 0xbe
 8002066:	f000 fb81 	bl	800276c <DS18B20_Write>

	 Temp_byte1 = DS18B20_Read();
 800206a:	f000 fbc5 	bl	80027f8 <DS18B20_Read>
 800206e:	4603      	mov	r3, r0
 8002070:	461a      	mov	r2, r3
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <readWaterTemp+0xd8>)
 8002074:	701a      	strb	r2, [r3, #0]
	 Temp_byte2 = DS18B20_Read();
 8002076:	f000 fbbf 	bl	80027f8 <DS18B20_Read>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <readWaterTemp+0xdc>)
 8002080:	701a      	strb	r2, [r3, #0]
	 TEMP = (Temp_byte2<<8)|Temp_byte1;
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <readWaterTemp+0xdc>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	b21a      	sxth	r2, r3
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <readWaterTemp+0xd8>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b21b      	sxth	r3, r3
 8002090:	4313      	orrs	r3, r2
 8002092:	b21b      	sxth	r3, r3
 8002094:	b29a      	uxth	r2, r3
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <readWaterTemp+0xe0>)
 8002098:	801a      	strh	r2, [r3, #0]
	 Temperature = (float)TEMP/16;
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <readWaterTemp+0xe0>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fd2e 	bl	8000b00 <__aeabi_ui2f>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fe34 	bl	8000d18 <__aeabi_fdiv>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fb16 	bl	80006e4 <__aeabi_f2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	490a      	ldr	r1, [pc, #40]	; (80020e8 <readWaterTemp+0xe4>)
 80020be:	e9c1 2300 	strd	r2, r3, [r1]
	 return Temperature;
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <readWaterTemp+0xe4>)
 80020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40020000 	.word	0x40020000
 80020d4:	20000050 	.word	0x20000050
 80020d8:	000c3500 	.word	0x000c3500
 80020dc:	200002a0 	.word	0x200002a0
 80020e0:	2000031c 	.word	0x2000031c
 80020e4:	20000224 	.word	0x20000224
 80020e8:	20000048 	.word	0x20000048
 80020ec:	00000000 	.word	0x00000000

080020f0 <readWaterTDS>:
int nutrientBufferIndex = 0,copyIndex = 0;
float averageVoltage = 0,tdsValue = 0,temperature = 25;
int analogBufferTemp[SCOUNT];

float readWaterTDS()
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
	  // Get nutrient level
	for(int i = 0; i<SCOUNT+10; i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e012      	b.n	8002124 <readWaterTDS+0x34>
	{
		get_nutrient_ph_value();
 80020fe:	f000 f8fd 	bl	80022fc <get_nutrient_ph_value>
		if(i>9)nutrientBuffer[i-10] = nutrient_ph_values[1];   // skip first 10 values since they are way off (pH: position 0 Nutrient: position 1)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b09      	cmp	r3, #9
 8002106:	dd07      	ble.n	8002118 <readWaterTDS+0x28>
 8002108:	4b71      	ldr	r3, [pc, #452]	; (80022d0 <readWaterTDS+0x1e0>)
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3b0a      	subs	r3, #10
 8002110:	4611      	mov	r1, r2
 8002112:	4a70      	ldr	r2, [pc, #448]	; (80022d4 <readWaterTDS+0x1e4>)
 8002114:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    HAL_Delay(10);
 8002118:	200a      	movs	r0, #10
 800211a:	f000 fc7f 	bl	8002a1c <HAL_Delay>
	for(int i = 0; i<SCOUNT+10; i++)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3301      	adds	r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b27      	cmp	r3, #39	; 0x27
 8002128:	dde9      	ble.n	80020fe <readWaterTDS+0xe>
	}

   for(copyIndex=0;copyIndex<SCOUNT;copyIndex++) analogBufferTemp[copyIndex]= nutrientBuffer[copyIndex];
 800212a:	4b6b      	ldr	r3, [pc, #428]	; (80022d8 <readWaterTDS+0x1e8>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e00e      	b.n	8002150 <readWaterTDS+0x60>
 8002132:	4b69      	ldr	r3, [pc, #420]	; (80022d8 <readWaterTDS+0x1e8>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b68      	ldr	r3, [pc, #416]	; (80022d8 <readWaterTDS+0x1e8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4966      	ldr	r1, [pc, #408]	; (80022d4 <readWaterTDS+0x1e4>)
 800213c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002140:	4966      	ldr	r1, [pc, #408]	; (80022dc <readWaterTDS+0x1ec>)
 8002142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002146:	4b64      	ldr	r3, [pc, #400]	; (80022d8 <readWaterTDS+0x1e8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	4a62      	ldr	r2, [pc, #392]	; (80022d8 <readWaterTDS+0x1e8>)
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b61      	ldr	r3, [pc, #388]	; (80022d8 <readWaterTDS+0x1e8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b1d      	cmp	r3, #29
 8002156:	ddec      	ble.n	8002132 <readWaterTDS+0x42>
   averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)0.000805664; // read the analog value more stable by the median filtering algorithm, and convert to voltage value
 8002158:	211e      	movs	r1, #30
 800215a:	4860      	ldr	r0, [pc, #384]	; (80022dc <readWaterTDS+0x1ec>)
 800215c:	f7ff f82a 	bl	80011b4 <getMedianNum>
 8002160:	4603      	mov	r3, r0
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fcd0 	bl	8000b08 <__aeabi_i2f>
 8002168:	4603      	mov	r3, r0
 800216a:	495d      	ldr	r1, [pc, #372]	; (80022e0 <readWaterTDS+0x1f0>)
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fd1f 	bl	8000bb0 <__aeabi_fmul>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	4b5b      	ldr	r3, [pc, #364]	; (80022e4 <readWaterTDS+0x1f4>)
 8002178:	601a      	str	r2, [r3, #0]
   float compensationCoefficient=1.0+0.02*(temperature-25.0);    //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 800217a:	4b5b      	ldr	r3, [pc, #364]	; (80022e8 <readWaterTDS+0x1f8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fab0 	bl	80006e4 <__aeabi_f2d>
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	4b58      	ldr	r3, [pc, #352]	; (80022ec <readWaterTDS+0x1fc>)
 800218a:	f7fe f94b 	bl	8000424 <__aeabi_dsub>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	a346      	add	r3, pc, #280	; (adr r3, 80022b0 <readWaterTDS+0x1c0>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fe f814 	bl	80001c8 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <readWaterTDS+0x200>)
 80021ae:	f7fe f93b 	bl	8000428 <__adddf3>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fb9b 	bl	80008f4 <__aeabi_d2f>
 80021be:	4603      	mov	r3, r0
 80021c0:	60bb      	str	r3, [r7, #8]
   float compensationVolatge=averageVoltage/compensationCoefficient;  //temperature compensation
 80021c2:	4b48      	ldr	r3, [pc, #288]	; (80022e4 <readWaterTDS+0x1f4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe fda5 	bl	8000d18 <__aeabi_fdiv>
 80021ce:	4603      	mov	r3, r0
 80021d0:	607b      	str	r3, [r7, #4]
   tdsValue=(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fa86 	bl	80006e4 <__aeabi_f2d>
 80021d8:	a337      	add	r3, pc, #220	; (adr r3, 80022b8 <readWaterTDS+0x1c8>)
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	f7fd fff3 	bl	80001c8 <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4614      	mov	r4, r2
 80021e8:	461d      	mov	r5, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7fe fa7a 	bl	80006e4 <__aeabi_f2d>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4620      	mov	r0, r4
 80021f6:	4629      	mov	r1, r5
 80021f8:	f7fd ffe6 	bl	80001c8 <__aeabi_dmul>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4614      	mov	r4, r2
 8002202:	461d      	mov	r5, r3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7fe fa6d 	bl	80006e4 <__aeabi_f2d>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4620      	mov	r0, r4
 8002210:	4629      	mov	r1, r5
 8002212:	f7fd ffd9 	bl	80001c8 <__aeabi_dmul>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4614      	mov	r4, r2
 800221c:	461d      	mov	r5, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe fa60 	bl	80006e4 <__aeabi_f2d>
 8002224:	a326      	add	r3, pc, #152	; (adr r3, 80022c0 <readWaterTDS+0x1d0>)
 8002226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222a:	f7fd ffcd 	bl	80001c8 <__aeabi_dmul>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4690      	mov	r8, r2
 8002234:	4699      	mov	r9, r3
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fa54 	bl	80006e4 <__aeabi_f2d>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4640      	mov	r0, r8
 8002242:	4649      	mov	r1, r9
 8002244:	f7fd ffc0 	bl	80001c8 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4620      	mov	r0, r4
 800224e:	4629      	mov	r1, r5
 8002250:	f7fe f8e8 	bl	8000424 <__aeabi_dsub>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4614      	mov	r4, r2
 800225a:	461d      	mov	r5, r3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7fe fa41 	bl	80006e4 <__aeabi_f2d>
 8002262:	a319      	add	r3, pc, #100	; (adr r3, 80022c8 <readWaterTDS+0x1d8>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fd ffae 	bl	80001c8 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4620      	mov	r0, r4
 8002272:	4629      	mov	r1, r5
 8002274:	f7fe f8d8 	bl	8000428 <__adddf3>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <readWaterTDS+0x204>)
 8002286:	f7fd ff9f 	bl	80001c8 <__aeabi_dmul>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	f7fe fb2f 	bl	80008f4 <__aeabi_d2f>
 8002296:	4603      	mov	r3, r0
 8002298:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <readWaterTDS+0x208>)
 800229a:	6013      	str	r3, [r2, #0]

	//voltsTDS = (raw*0.000805664); // .000805664 volts per 1 ADC value
	return tdsValue;
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <readWaterTDS+0x208>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022aa:	bf00      	nop
 80022ac:	f3af 8000 	nop.w
 80022b0:	47ae147b 	.word	0x47ae147b
 80022b4:	3f947ae1 	.word	0x3f947ae1
 80022b8:	a3d70a3d 	.word	0xa3d70a3d
 80022bc:	4060ad70 	.word	0x4060ad70
 80022c0:	1eb851ec 	.word	0x1eb851ec
 80022c4:	406ffb85 	.word	0x406ffb85
 80022c8:	b851eb85 	.word	0xb851eb85
 80022cc:	408acb1e 	.word	0x408acb1e
 80022d0:	2000003c 	.word	0x2000003c
 80022d4:	20000228 	.word	0x20000228
 80022d8:	20000054 	.word	0x20000054
 80022dc:	200002a4 	.word	0x200002a4
 80022e0:	3a533332 	.word	0x3a533332
 80022e4:	20000058 	.word	0x20000058
 80022e8:	2000000c 	.word	0x2000000c
 80022ec:	40390000 	.word	0x40390000
 80022f0:	3ff00000 	.word	0x3ff00000
 80022f4:	3fe00000 	.word	0x3fe00000
 80022f8:	2000005c 	.word	0x2000005c

080022fc <get_nutrient_ph_value>:

void get_nutrient_ph_value()
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	nutrient_ph_values[0] = get_ADC_values();
 8002300:	f7fe ff42 	bl	8001188 <get_ADC_values>
 8002304:	4603      	mov	r3, r0
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fda2 	bl	8000e50 <__aeabi_f2uiz>
 800230c:	4603      	mov	r3, r0
 800230e:	4a06      	ldr	r2, [pc, #24]	; (8002328 <get_nutrient_ph_value+0x2c>)
 8002310:	6013      	str	r3, [r2, #0]
	nutrient_ph_values[1] = get_ADC_values();
 8002312:	f7fe ff39 	bl	8001188 <get_ADC_values>
 8002316:	4603      	mov	r3, r0
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fd99 	bl	8000e50 <__aeabi_f2uiz>
 800231e:	4603      	mov	r3, r0
 8002320:	4a01      	ldr	r2, [pc, #4]	; (8002328 <get_nutrient_ph_value+0x2c>)
 8002322:	6053      	str	r3, [r2, #4]
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	2000003c 	.word	0x2000003c

0800232c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_MspInit+0x48>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <HAL_MspInit+0x48>)
 800233c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002340:	6453      	str	r3, [r2, #68]	; 0x44
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_MspInit+0x48>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_MspInit+0x48>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a07      	ldr	r2, [pc, #28]	; (8002374 <HAL_MspInit+0x48>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_MspInit+0x48>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <HAL_ADC_MspInit+0x7c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d127      	bne.n	80023ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_ADC_MspInit+0x80>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <HAL_ADC_MspInit+0x80>)
 80023a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_ADC_MspInit+0x80>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_ADC_MspInit+0x80>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <HAL_ADC_MspInit+0x80>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <HAL_ADC_MspInit+0x80>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN4
    PA5     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = water_ph_Pin|nutrient_level_Pin;
 80023d2:	2330      	movs	r3, #48	; 0x30
 80023d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023d6:	2303      	movs	r3, #3
 80023d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <HAL_ADC_MspInit+0x84>)
 80023e6:	f000 ffcb 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80023ea:	bf00      	nop
 80023ec:	3728      	adds	r7, #40	; 0x28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40012100 	.word	0x40012100
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020000 	.word	0x40020000

08002400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a32      	ldr	r2, [pc, #200]	; (80024d8 <HAL_TIM_Base_MspInit+0xd8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10e      	bne.n	8002430 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	4b31      	ldr	r3, [pc, #196]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	4a30      	ldr	r2, [pc, #192]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6453      	str	r3, [r2, #68]	; 0x44
 8002422:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800242e:	e04e      	b.n	80024ce <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002438:	d10e      	bne.n	8002458 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a26      	ldr	r2, [pc, #152]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	69bb      	ldr	r3, [r7, #24]
}
 8002456:	e03a      	b.n	80024ce <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <HAL_TIM_Base_MspInit+0xe0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	697b      	ldr	r3, [r7, #20]
}
 800247e:	e026      	b.n	80024ce <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	4a12      	ldr	r2, [pc, #72]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	6413      	str	r3, [r2, #64]	; 0x40
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]
}
 80024a6:	e012      	b.n	80024ce <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <HAL_TIM_Base_MspInit+0xe8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10d      	bne.n	80024ce <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a08      	ldr	r2, [pc, #32]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_TIM_Base_MspInit+0xdc>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
}
 80024ce:	bf00      	nop
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	40010000 	.word	0x40010000
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40000400 	.word	0x40000400
 80024e4:	40000800 	.word	0x40000800
 80024e8:	40014400 	.word	0x40014400

080024ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a36      	ldr	r2, [pc, #216]	; (80025e4 <HAL_TIM_MspPostInit+0xf8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d11f      	bne.n	800254e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <HAL_TIM_MspPostInit+0xfc>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a34      	ldr	r2, [pc, #208]	; (80025e8 <HAL_TIM_MspPostInit+0xfc>)
 8002518:	f043 0310 	orr.w	r3, r3, #16
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <HAL_TIM_MspPostInit+0xfc>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin;
 800252a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800252e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800253c:	2301      	movs	r3, #1
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(heat_cool_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	4619      	mov	r1, r3
 8002546:	4829      	ldr	r0, [pc, #164]	; (80025ec <HAL_TIM_MspPostInit+0x100>)
 8002548:	f000 ff1a 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800254c:	e046      	b.n	80025dc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a27      	ldr	r2, [pc, #156]	; (80025f0 <HAL_TIM_MspPostInit+0x104>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d11e      	bne.n	8002596 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <HAL_TIM_MspPostInit+0xfc>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	4a21      	ldr	r2, [pc, #132]	; (80025e8 <HAL_TIM_MspPostInit+0xfc>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6313      	str	r3, [r2, #48]	; 0x30
 8002568:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <HAL_TIM_MspPostInit+0xfc>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = system_fan_speed_Pin;
 8002574:	2340      	movs	r3, #64	; 0x40
 8002576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002580:	2300      	movs	r3, #0
 8002582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002584:	2302      	movs	r3, #2
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(system_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4619      	mov	r1, r3
 800258e:	4819      	ldr	r0, [pc, #100]	; (80025f4 <HAL_TIM_MspPostInit+0x108>)
 8002590:	f000 fef6 	bl	8003380 <HAL_GPIO_Init>
}
 8002594:	e022      	b.n	80025dc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM10)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a17      	ldr	r2, [pc, #92]	; (80025f8 <HAL_TIM_MspPostInit+0x10c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d11d      	bne.n	80025dc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_TIM_MspPostInit+0xfc>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <HAL_TIM_MspPostInit+0xfc>)
 80025aa:	f043 0320 	orr.w	r3, r3, #32
 80025ae:	6313      	str	r3, [r2, #48]	; 0x30
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_TIM_MspPostInit+0xfc>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 80025bc:	2340      	movs	r3, #64	; 0x40
 80025be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80025cc:	2303      	movs	r3, #3
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4619      	mov	r1, r3
 80025d6:	4809      	ldr	r0, [pc, #36]	; (80025fc <HAL_TIM_MspPostInit+0x110>)
 80025d8:	f000 fed2 	bl	8003380 <HAL_GPIO_Init>
}
 80025dc:	bf00      	nop
 80025de:	3728      	adds	r7, #40	; 0x28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40010000 	.word	0x40010000
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40014400 	.word	0x40014400
 80025fc:	40021400 	.word	0x40021400

08002600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <NMI_Handler+0x4>

08002606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260a:	e7fe      	b.n	800260a <HardFault_Handler+0x4>

0800260c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <MemManage_Handler+0x4>

08002612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <BusFault_Handler+0x4>

08002618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <UsageFault_Handler+0x4>

0800261e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002646:	f000 f9cd 	bl	80029e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}

0800264e <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
	...

0800265c <DWT_Delay_Init>:
#include "main.h"
#include "sensors.h"
#include "water_temp_driver.h"

uint32_t DWT_Delay_Init(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002660:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <DWT_Delay_Init+0x58>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <DWT_Delay_Init+0x58>)
 8002666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800266a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <DWT_Delay_Init+0x58>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <DWT_Delay_Init+0x58>)
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002676:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <DWT_Delay_Init+0x5c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <DWT_Delay_Init+0x5c>)
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <DWT_Delay_Init+0x5c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <DWT_Delay_Init+0x5c>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <DWT_Delay_Init+0x5c>)
 8002692:	2200      	movs	r2, #0
 8002694:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8002696:	bf00      	nop
    __ASM volatile ("NOP");
 8002698:	bf00      	nop
    __ASM volatile ("NOP");
 800269a:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <DWT_Delay_Init+0x5c>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80026a4:	2300      	movs	r3, #0
 80026a6:	e000      	b.n	80026aa <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80026a8:	2301      	movs	r3, #1
    }
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000edf0 	.word	0xe000edf0
 80026b8:	e0001000 	.word	0xe0001000

080026bc <DWT_Delay_us>:

 void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <DWT_Delay_us+0x48>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80026ca:	f001 fc31 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4a0d      	ldr	r2, [pc, #52]	; (8002708 <DWT_Delay_us+0x4c>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0c9b      	lsrs	r3, r3, #18
 80026d8:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	fb02 f303 	mul.w	r3, r2, r3
 80026e2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80026e4:	bf00      	nop
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <DWT_Delay_us+0x48>)
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad2      	subs	r2, r2, r3
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	1acb      	subs	r3, r1, r3
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d3f6      	bcc.n	80026e6 <DWT_Delay_us+0x2a>
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	e0001000 	.word	0xe0001000
 8002708:	431bde83 	.word	0x431bde83

0800270c <DS18B20_Start>:


uint8_t DS18B20_Start (void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
 8002716:	2101      	movs	r1, #1
 8002718:	4813      	ldr	r0, [pc, #76]	; (8002768 <DS18B20_Start+0x5c>)
 800271a:	f000 f8ab 	bl	8002874 <Set_Pin_Output>
	HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin low
 800271e:	2200      	movs	r2, #0
 8002720:	2101      	movs	r1, #1
 8002722:	4811      	ldr	r0, [pc, #68]	; (8002768 <DS18B20_Start+0x5c>)
 8002724:	f000 ffe1 	bl	80036ea <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 8002728:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800272c:	f7ff ffc6 	bl	80026bc <DWT_Delay_us>

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);    // set the pin as input
 8002730:	2101      	movs	r1, #1
 8002732:	480d      	ldr	r0, [pc, #52]	; (8002768 <DS18B20_Start+0x5c>)
 8002734:	f000 f8bc 	bl	80028b0 <Set_Pin_Input>
	DWT_Delay_us (80);    // delay according to datasheet
 8002738:	2050      	movs	r0, #80	; 0x50
 800273a:	f7ff ffbf 	bl	80026bc <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 800273e:	2101      	movs	r1, #1
 8002740:	4809      	ldr	r0, [pc, #36]	; (8002768 <DS18B20_Start+0x5c>)
 8002742:	f000 ffbb 	bl	80036bc <HAL_GPIO_ReadPin>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <DS18B20_Start+0x46>
 800274c:	2301      	movs	r3, #1
 800274e:	71fb      	strb	r3, [r7, #7]
 8002750:	e001      	b.n	8002756 <DS18B20_Start+0x4a>
	else Response = -1;
 8002752:	23ff      	movs	r3, #255	; 0xff
 8002754:	71fb      	strb	r3, [r7, #7]

	DWT_Delay_us (400); // 480 us delay totally.
 8002756:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800275a:	f7ff ffaf 	bl	80026bc <DWT_Delay_us>

	return Response;
 800275e:	79fb      	ldrb	r3, [r7, #7]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40020000 	.word	0x40020000

0800276c <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 8002776:	2101      	movs	r1, #1
 8002778:	481e      	ldr	r0, [pc, #120]	; (80027f4 <DS18B20_Write+0x88>)
 800277a:	f000 f87b 	bl	8002874 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	e02e      	b.n	80027e2 <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8002784:	79fa      	ldrb	r2, [r7, #7]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	fa42 f303 	asr.w	r3, r2, r3
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 8002794:	2101      	movs	r1, #1
 8002796:	4817      	ldr	r0, [pc, #92]	; (80027f4 <DS18B20_Write+0x88>)
 8002798:	f000 f86c 	bl	8002874 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 800279c:	2200      	movs	r2, #0
 800279e:	2101      	movs	r1, #1
 80027a0:	4814      	ldr	r0, [pc, #80]	; (80027f4 <DS18B20_Write+0x88>)
 80027a2:	f000 ffa2 	bl	80036ea <HAL_GPIO_WritePin>
			DWT_Delay_us (5);  // wait for 1 us
 80027a6:	2005      	movs	r0, #5
 80027a8:	f7ff ff88 	bl	80026bc <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 80027ac:	2101      	movs	r1, #1
 80027ae:	4811      	ldr	r0, [pc, #68]	; (80027f4 <DS18B20_Write+0x88>)
 80027b0:	f000 f87e 	bl	80028b0 <Set_Pin_Input>
			DWT_Delay_us (65);  // wait for 60 us
 80027b4:	2041      	movs	r0, #65	; 0x41
 80027b6:	f7ff ff81 	bl	80026bc <DWT_Delay_us>
 80027ba:	e00f      	b.n	80027dc <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);
 80027bc:	2101      	movs	r1, #1
 80027be:	480d      	ldr	r0, [pc, #52]	; (80027f4 <DS18B20_Write+0x88>)
 80027c0:	f000 f858 	bl	8002874 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 80027c4:	2200      	movs	r2, #0
 80027c6:	2101      	movs	r1, #1
 80027c8:	480a      	ldr	r0, [pc, #40]	; (80027f4 <DS18B20_Write+0x88>)
 80027ca:	f000 ff8e 	bl	80036ea <HAL_GPIO_WritePin>
			DWT_Delay_us (65);  // wait for 60 us
 80027ce:	2041      	movs	r0, #65	; 0x41
 80027d0:	f7ff ff74 	bl	80026bc <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 80027d4:	2101      	movs	r1, #1
 80027d6:	4807      	ldr	r0, [pc, #28]	; (80027f4 <DS18B20_Write+0x88>)
 80027d8:	f000 f86a 	bl	80028b0 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3301      	adds	r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b07      	cmp	r3, #7
 80027e6:	ddcd      	ble.n	8002784 <DS18B20_Write+0x18>
		}
	}
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40020000 	.word	0x40020000

080027f8 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80027fe:	2300      	movs	r3, #0
 8002800:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 8002802:	2101      	movs	r1, #1
 8002804:	481a      	ldr	r0, [pc, #104]	; (8002870 <DS18B20_Read+0x78>)
 8002806:	f000 f853 	bl	80028b0 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 800280a:	2300      	movs	r3, #0
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	e026      	b.n	800285e <DS18B20_Read+0x66>
	{
		Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set as output
 8002810:	2101      	movs	r1, #1
 8002812:	4817      	ldr	r0, [pc, #92]	; (8002870 <DS18B20_Read+0x78>)
 8002814:	f000 f82e 	bl	8002874 <Set_Pin_Output>

		HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the data pin LOW
 8002818:	2200      	movs	r2, #0
 800281a:	2101      	movs	r1, #1
 800281c:	4814      	ldr	r0, [pc, #80]	; (8002870 <DS18B20_Read+0x78>)
 800281e:	f000 ff64 	bl	80036ea <HAL_GPIO_WritePin>
		DWT_Delay_us (5);  // wait for > 1us
 8002822:	2005      	movs	r0, #5
 8002824:	f7ff ff4a 	bl	80026bc <DWT_Delay_us>

		Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 8002828:	2101      	movs	r1, #1
 800282a:	4811      	ldr	r0, [pc, #68]	; (8002870 <DS18B20_Read+0x78>)
 800282c:	f000 f840 	bl	80028b0 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))  // if the pin is HIGH
 8002830:	2101      	movs	r1, #1
 8002832:	480f      	ldr	r0, [pc, #60]	; (8002870 <DS18B20_Read+0x78>)
 8002834:	f000 ff42 	bl	80036bc <HAL_GPIO_ReadPin>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 800283e:	2201      	movs	r2, #1
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	b25a      	sxtb	r2, r3
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4313      	orrs	r3, r2
 800284e:	b25b      	sxtb	r3, r3
 8002850:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (50);  // wait for 60 us
 8002852:	2032      	movs	r0, #50	; 0x32
 8002854:	f7ff ff32 	bl	80026bc <DWT_Delay_us>
	for (int i=0;i<8;i++)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	3301      	adds	r3, #1
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b07      	cmp	r3, #7
 8002862:	ddd5      	ble.n	8002810 <DS18B20_Read+0x18>
	}
	return value;
 8002864:	79fb      	ldrb	r3, [r7, #7]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40020000 	.word	0x40020000

08002874 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 030c 	add.w	r3, r7, #12
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002890:	887b      	ldrh	r3, [r7, #2]
 8002892:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002894:	2301      	movs	r3, #1
 8002896:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fd6c 	bl	8003380 <HAL_GPIO_Init>
}
 80028a8:	bf00      	nop
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80028cc:	887b      	ldrh	r3, [r7, #2]
 80028ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028d4:	2301      	movs	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fd4e 	bl	8003380 <HAL_GPIO_Init>
}
 80028e4:	bf00      	nop
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028f0:	480d      	ldr	r0, [pc, #52]	; (8002928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028f2:	490e      	ldr	r1, [pc, #56]	; (800292c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028f4:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f8:	e002      	b.n	8002900 <LoopCopyDataInit>

080028fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028fe:	3304      	adds	r3, #4

08002900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002904:	d3f9      	bcc.n	80028fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002906:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002908:	4c0b      	ldr	r4, [pc, #44]	; (8002938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800290a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800290c:	e001      	b.n	8002912 <LoopFillZerobss>

0800290e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800290e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002910:	3204      	adds	r2, #4

08002912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002914:	d3fb      	bcc.n	800290e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002916:	f7ff fe9a 	bl	800264e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800291a:	f002 fa3b 	bl	8004d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800291e:	f7fe fd6d 	bl	80013fc <main>
  bx  lr
 8002922:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002924:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800292c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002930:	08004e40 	.word	0x08004e40
  ldr r2, =_sbss
 8002934:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002938:	20000324 	.word	0x20000324

0800293c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800293c:	e7fe      	b.n	800293c <ADC_IRQHandler>
	...

08002940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002944:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <HAL_Init+0x40>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <HAL_Init+0x40>)
 800294a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800294e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_Init+0x40>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <HAL_Init+0x40>)
 8002956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800295a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <HAL_Init+0x40>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a07      	ldr	r2, [pc, #28]	; (8002980 <HAL_Init+0x40>)
 8002962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002968:	2003      	movs	r0, #3
 800296a:	f000 fcd5 	bl	8003318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800296e:	200f      	movs	r0, #15
 8002970:	f000 f808 	bl	8002984 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002974:	f7ff fcda 	bl	800232c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023c00 	.word	0x40023c00

08002984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_InitTick+0x54>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <HAL_InitTick+0x58>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	4619      	mov	r1, r3
 8002996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800299a:	fbb3 f3f1 	udiv	r3, r3, r1
 800299e:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fcdf 	bl	8003366 <HAL_SYSTICK_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e00e      	b.n	80029d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b0f      	cmp	r3, #15
 80029b6:	d80a      	bhi.n	80029ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b8:	2200      	movs	r2, #0
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	f04f 30ff 	mov.w	r0, #4294967295
 80029c0:	f000 fcb5 	bl	800332e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029c4:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <HAL_InitTick+0x5c>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e000      	b.n	80029d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000010 	.word	0x20000010
 80029dc:	20000018 	.word	0x20000018
 80029e0:	20000014 	.word	0x20000014

080029e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_IncTick+0x1c>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_IncTick+0x20>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	4a03      	ldr	r2, [pc, #12]	; (8002a04 <HAL_IncTick+0x20>)
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	20000018 	.word	0x20000018
 8002a04:	20000320 	.word	0x20000320

08002a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a0c:	4b02      	ldr	r3, [pc, #8]	; (8002a18 <HAL_GetTick+0x10>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	20000320 	.word	0x20000320

08002a1c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a24:	f7ff fff0 	bl	8002a08 <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d005      	beq.n	8002a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <HAL_Delay+0x44>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a42:	bf00      	nop
 8002a44:	f7ff ffe0 	bl	8002a08 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d8f7      	bhi.n	8002a44 <HAL_Delay+0x28>
  {
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000018 	.word	0x20000018

08002a64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e033      	b.n	8002ae2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fc78 	bl	8002378 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002aaa:	f023 0302 	bic.w	r3, r3, #2
 8002aae:	f043 0202 	orr.w	r2, r3, #2
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fa78 	bl	8002fac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f023 0303 	bic.w	r3, r3, #3
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ad2:	e001      	b.n	8002ad8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_Start+0x1a>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e095      	b.n	8002c32 <HAL_ADC_Start+0x146>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d018      	beq.n	8002b4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b2c:	4b43      	ldr	r3, [pc, #268]	; (8002c3c <HAL_ADC_Start+0x150>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a43      	ldr	r2, [pc, #268]	; (8002c40 <HAL_ADC_Start+0x154>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0c9a      	lsrs	r2, r3, #18
 8002b38:	4613      	mov	r3, r2
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	4413      	add	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002b40:	e002      	b.n	8002b48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f9      	bne.n	8002b42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d15d      	bne.n	8002c18 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d007      	beq.n	8002b8e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9a:	d106      	bne.n	8002baa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	f023 0206 	bic.w	r2, r3, #6
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	645a      	str	r2, [r3, #68]	; 0x44
 8002ba8:	e002      	b.n	8002bb0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bc0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_ADC_Start+0x158>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d129      	bne.n	8002c30 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	e020      	b.n	8002c30 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <HAL_ADC_Start+0x15c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d11b      	bne.n	8002c30 <HAL_ADC_Start+0x144>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d114      	bne.n	8002c30 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	e00b      	b.n	8002c30 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f043 0210 	orr.w	r2, r3, #16
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	20000010 	.word	0x20000010
 8002c40:	431bde83 	.word	0x431bde83
 8002c44:	40012300 	.word	0x40012300
 8002c48:	40012000 	.word	0x40012000

08002c4c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c68:	d113      	bne.n	8002c92 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c78:	d10b      	bne.n	8002c92 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0220 	orr.w	r2, r3, #32
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e05c      	b.n	8002d4c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c92:	f7ff feb9 	bl	8002a08 <HAL_GetTick>
 8002c96:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c98:	e01a      	b.n	8002cd0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d016      	beq.n	8002cd0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d007      	beq.n	8002cb8 <HAL_ADC_PollForConversion+0x6c>
 8002ca8:	f7ff feae 	bl	8002a08 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d20b      	bcs.n	8002cd0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f043 0204 	orr.w	r2, r3, #4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e03d      	b.n	8002d4c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d1dd      	bne.n	8002c9a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f06f 0212 	mvn.w	r2, #18
 8002ce6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d123      	bne.n	8002d4a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d11f      	bne.n	8002d4a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d111      	bne.n	8002d4a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f043 0201 	orr.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x1c>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e103      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x224>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b09      	cmp	r3, #9
 8002d96:	d925      	bls.n	8002de4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68d9      	ldr	r1, [r3, #12]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	3b1e      	subs	r3, #30
 8002dae:	2207      	movs	r2, #7
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43da      	mvns	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	400a      	ands	r2, r1
 8002dbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68d9      	ldr	r1, [r3, #12]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4403      	add	r3, r0
 8002dd6:	3b1e      	subs	r3, #30
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	e022      	b.n	8002e2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6919      	ldr	r1, [r3, #16]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	2207      	movs	r2, #7
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	400a      	ands	r2, r1
 8002e06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6919      	ldr	r1, [r3, #16]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	4618      	mov	r0, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4403      	add	r3, r0
 8002e20:	409a      	lsls	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d824      	bhi.n	8002e7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	3b05      	subs	r3, #5
 8002e44:	221f      	movs	r2, #31
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	400a      	ands	r2, r1
 8002e52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	4618      	mov	r0, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3b05      	subs	r3, #5
 8002e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	635a      	str	r2, [r3, #52]	; 0x34
 8002e7a:	e04c      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	d824      	bhi.n	8002ece <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	3b23      	subs	r3, #35	; 0x23
 8002e96:	221f      	movs	r2, #31
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	400a      	ands	r2, r1
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b23      	subs	r3, #35	; 0x23
 8002ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
 8002ecc:	e023      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	3b41      	subs	r3, #65	; 0x41
 8002ee0:	221f      	movs	r2, #31
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	400a      	ands	r2, r1
 8002eee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	4618      	mov	r0, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	3b41      	subs	r3, #65	; 0x41
 8002f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a20      	ldr	r2, [pc, #128]	; (8002f9c <HAL_ADC_ConfigChannel+0x230>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d109      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1c8>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b12      	cmp	r3, #18
 8002f26:	d105      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <HAL_ADC_ConfigChannel+0x234>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <HAL_ADC_ConfigChannel+0x234>)
 8002f2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f32:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <HAL_ADC_ConfigChannel+0x230>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d123      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x21a>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d003      	beq.n	8002f4e <HAL_ADC_ConfigChannel+0x1e2>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b11      	cmp	r3, #17
 8002f4c:	d11b      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f4e:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <HAL_ADC_ConfigChannel+0x234>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <HAL_ADC_ConfigChannel+0x234>)
 8002f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f58:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d111      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_ADC_ConfigChannel+0x238>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <HAL_ADC_ConfigChannel+0x23c>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	0c9a      	lsrs	r2, r3, #18
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002f78:	e002      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f9      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40012000 	.word	0x40012000
 8002fa0:	40012300 	.word	0x40012300
 8002fa4:	20000010 	.word	0x20000010
 8002fa8:	431bde83 	.word	0x431bde83

08002fac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fb4:	4b7e      	ldr	r3, [pc, #504]	; (80031b0 <ADC_Init+0x204>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a7d      	ldr	r2, [pc, #500]	; (80031b0 <ADC_Init+0x204>)
 8002fba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002fbe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002fc0:	4b7b      	ldr	r3, [pc, #492]	; (80031b0 <ADC_Init+0x204>)
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4979      	ldr	r1, [pc, #484]	; (80031b0 <ADC_Init+0x204>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	021a      	lsls	r2, r3, #8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003000:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003022:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6899      	ldr	r1, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	4a5e      	ldr	r2, [pc, #376]	; (80031b4 <ADC_Init+0x208>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d022      	beq.n	8003086 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800304e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6899      	ldr	r1, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003070:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6899      	ldr	r1, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	e00f      	b.n	80030a6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0202 	bic.w	r2, r2, #2
 80030b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	7e1b      	ldrb	r3, [r3, #24]
 80030c0:	005a      	lsls	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d027      	beq.n	8003124 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	3b01      	subs	r3, #1
 80030fa:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80030fe:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	fa92 f2a2 	rbit	r2, r2
 8003106:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	fab2 f282 	clz	r2, r2
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	fa03 f102 	lsl.w	r1, r3, r2
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	e007      	b.n	8003134 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003132:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	3b01      	subs	r3, #1
 8003150:	051a      	lsls	r2, r3, #20
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6899      	ldr	r1, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003176:	025a      	lsls	r2, r3, #9
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6899      	ldr	r1, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	029a      	lsls	r2, r3, #10
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40012300 	.word	0x40012300
 80031b4:	0f000001 	.word	0x0f000001

080031b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d4:	4013      	ands	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ea:	4a04      	ldr	r2, [pc, #16]	; (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	60d3      	str	r3, [r2, #12]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <__NVIC_GetPriorityGrouping+0x18>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	f003 0307 	and.w	r3, r3, #7
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	6039      	str	r1, [r7, #0]
 8003226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322c:	2b00      	cmp	r3, #0
 800322e:	db0a      	blt.n	8003246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	b2da      	uxtb	r2, r3
 8003234:	490c      	ldr	r1, [pc, #48]	; (8003268 <__NVIC_SetPriority+0x4c>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	0112      	lsls	r2, r2, #4
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	440b      	add	r3, r1
 8003240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003244:	e00a      	b.n	800325c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	4908      	ldr	r1, [pc, #32]	; (800326c <__NVIC_SetPriority+0x50>)
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	3b04      	subs	r3, #4
 8003254:	0112      	lsls	r2, r2, #4
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	440b      	add	r3, r1
 800325a:	761a      	strb	r2, [r3, #24]
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	e000e100 	.word	0xe000e100
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	; 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f1c3 0307 	rsb	r3, r3, #7
 800328a:	2b04      	cmp	r3, #4
 800328c:	bf28      	it	cs
 800328e:	2304      	movcs	r3, #4
 8003290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3304      	adds	r3, #4
 8003296:	2b06      	cmp	r3, #6
 8003298:	d902      	bls.n	80032a0 <NVIC_EncodePriority+0x30>
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	3b03      	subs	r3, #3
 800329e:	e000      	b.n	80032a2 <NVIC_EncodePriority+0x32>
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a4:	f04f 32ff 	mov.w	r2, #4294967295
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43da      	mvns	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	401a      	ands	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b8:	f04f 31ff 	mov.w	r1, #4294967295
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	43d9      	mvns	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	4313      	orrs	r3, r2
         );
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3724      	adds	r7, #36	; 0x24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e4:	d301      	bcc.n	80032ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00f      	b.n	800330a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <SysTick_Config+0x40>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f2:	210f      	movs	r1, #15
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	f7ff ff90 	bl	800321c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <SysTick_Config+0x40>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <SysTick_Config+0x40>)
 8003304:	2207      	movs	r2, #7
 8003306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	e000e010 	.word	0xe000e010

08003318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ff49 	bl	80031b8 <__NVIC_SetPriorityGrouping>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800332e:	b580      	push	{r7, lr}
 8003330:	b086      	sub	sp, #24
 8003332:	af00      	add	r7, sp, #0
 8003334:	4603      	mov	r3, r0
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003340:	f7ff ff5e 	bl	8003200 <__NVIC_GetPriorityGrouping>
 8003344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	6978      	ldr	r0, [r7, #20]
 800334c:	f7ff ff90 	bl	8003270 <NVIC_EncodePriority>
 8003350:	4602      	mov	r2, r0
 8003352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff ff5f 	bl	800321c <__NVIC_SetPriority>
}
 800335e:	bf00      	nop
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff ffb0 	bl	80032d4 <SysTick_Config>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800338e:	e16f      	b.n	8003670 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	2101      	movs	r1, #1
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	fa01 f303 	lsl.w	r3, r1, r3
 800339c:	4013      	ands	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8161 	beq.w	800366a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d005      	beq.n	80033c0 <HAL_GPIO_Init+0x40>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d130      	bne.n	8003422 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2203      	movs	r2, #3
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033f6:	2201      	movs	r2, #1
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	f003 0201 	and.w	r2, r3, #1
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b03      	cmp	r3, #3
 800342c:	d017      	beq.n	800345e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	2203      	movs	r2, #3
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d123      	bne.n	80034b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	08da      	lsrs	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3208      	adds	r2, #8
 8003472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	220f      	movs	r2, #15
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	08da      	lsrs	r2, r3, #3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3208      	adds	r2, #8
 80034ac:	6939      	ldr	r1, [r7, #16]
 80034ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2203      	movs	r2, #3
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0203 	and.w	r2, r3, #3
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80bb 	beq.w	800366a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f4:	2300      	movs	r3, #0
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	4b64      	ldr	r3, [pc, #400]	; (800368c <HAL_GPIO_Init+0x30c>)
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	4a63      	ldr	r2, [pc, #396]	; (800368c <HAL_GPIO_Init+0x30c>)
 80034fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003502:	6453      	str	r3, [r2, #68]	; 0x44
 8003504:	4b61      	ldr	r3, [pc, #388]	; (800368c <HAL_GPIO_Init+0x30c>)
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003510:	4a5f      	ldr	r2, [pc, #380]	; (8003690 <HAL_GPIO_Init+0x310>)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	089b      	lsrs	r3, r3, #2
 8003516:	3302      	adds	r3, #2
 8003518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	220f      	movs	r2, #15
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a57      	ldr	r2, [pc, #348]	; (8003694 <HAL_GPIO_Init+0x314>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d031      	beq.n	80035a0 <HAL_GPIO_Init+0x220>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a56      	ldr	r2, [pc, #344]	; (8003698 <HAL_GPIO_Init+0x318>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d02b      	beq.n	800359c <HAL_GPIO_Init+0x21c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a55      	ldr	r2, [pc, #340]	; (800369c <HAL_GPIO_Init+0x31c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d025      	beq.n	8003598 <HAL_GPIO_Init+0x218>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a54      	ldr	r2, [pc, #336]	; (80036a0 <HAL_GPIO_Init+0x320>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d01f      	beq.n	8003594 <HAL_GPIO_Init+0x214>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a53      	ldr	r2, [pc, #332]	; (80036a4 <HAL_GPIO_Init+0x324>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d019      	beq.n	8003590 <HAL_GPIO_Init+0x210>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a52      	ldr	r2, [pc, #328]	; (80036a8 <HAL_GPIO_Init+0x328>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d013      	beq.n	800358c <HAL_GPIO_Init+0x20c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a51      	ldr	r2, [pc, #324]	; (80036ac <HAL_GPIO_Init+0x32c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00d      	beq.n	8003588 <HAL_GPIO_Init+0x208>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a50      	ldr	r2, [pc, #320]	; (80036b0 <HAL_GPIO_Init+0x330>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d007      	beq.n	8003584 <HAL_GPIO_Init+0x204>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a4f      	ldr	r2, [pc, #316]	; (80036b4 <HAL_GPIO_Init+0x334>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_GPIO_Init+0x200>
 800357c:	2308      	movs	r3, #8
 800357e:	e010      	b.n	80035a2 <HAL_GPIO_Init+0x222>
 8003580:	2309      	movs	r3, #9
 8003582:	e00e      	b.n	80035a2 <HAL_GPIO_Init+0x222>
 8003584:	2307      	movs	r3, #7
 8003586:	e00c      	b.n	80035a2 <HAL_GPIO_Init+0x222>
 8003588:	2306      	movs	r3, #6
 800358a:	e00a      	b.n	80035a2 <HAL_GPIO_Init+0x222>
 800358c:	2305      	movs	r3, #5
 800358e:	e008      	b.n	80035a2 <HAL_GPIO_Init+0x222>
 8003590:	2304      	movs	r3, #4
 8003592:	e006      	b.n	80035a2 <HAL_GPIO_Init+0x222>
 8003594:	2303      	movs	r3, #3
 8003596:	e004      	b.n	80035a2 <HAL_GPIO_Init+0x222>
 8003598:	2302      	movs	r3, #2
 800359a:	e002      	b.n	80035a2 <HAL_GPIO_Init+0x222>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_GPIO_Init+0x222>
 80035a0:	2300      	movs	r3, #0
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	f002 0203 	and.w	r2, r2, #3
 80035a8:	0092      	lsls	r2, r2, #2
 80035aa:	4093      	lsls	r3, r2
 80035ac:	461a      	mov	r2, r3
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035b4:	4936      	ldr	r1, [pc, #216]	; (8003690 <HAL_GPIO_Init+0x310>)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	3302      	adds	r3, #2
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c2:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <HAL_GPIO_Init+0x338>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035e6:	4a34      	ldr	r2, [pc, #208]	; (80036b8 <HAL_GPIO_Init+0x338>)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035ec:	4b32      	ldr	r3, [pc, #200]	; (80036b8 <HAL_GPIO_Init+0x338>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003610:	4a29      	ldr	r2, [pc, #164]	; (80036b8 <HAL_GPIO_Init+0x338>)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003616:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <HAL_GPIO_Init+0x338>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	43db      	mvns	r3, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800363a:	4a1f      	ldr	r2, [pc, #124]	; (80036b8 <HAL_GPIO_Init+0x338>)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003640:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_GPIO_Init+0x338>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	43db      	mvns	r3, r3
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003664:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <HAL_GPIO_Init+0x338>)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	3301      	adds	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa22 f303 	lsr.w	r3, r2, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	f47f ae88 	bne.w	8003390 <HAL_GPIO_Init+0x10>
  }
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	40023800 	.word	0x40023800
 8003690:	40013800 	.word	0x40013800
 8003694:	40020000 	.word	0x40020000
 8003698:	40020400 	.word	0x40020400
 800369c:	40020800 	.word	0x40020800
 80036a0:	40020c00 	.word	0x40020c00
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40021400 	.word	0x40021400
 80036ac:	40021800 	.word	0x40021800
 80036b0:	40021c00 	.word	0x40021c00
 80036b4:	40022000 	.word	0x40022000
 80036b8:	40013c00 	.word	0x40013c00

080036bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	887b      	ldrh	r3, [r7, #2]
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
 80036d8:	e001      	b.n	80036de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	807b      	strh	r3, [r7, #2]
 80036f6:	4613      	mov	r3, r2
 80036f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036fa:	787b      	ldrb	r3, [r7, #1]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003700:	887a      	ldrh	r2, [r7, #2]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003706:	e003      	b.n	8003710 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003708:	887b      	ldrh	r3, [r7, #2]
 800370a:	041a      	lsls	r2, r3, #16
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	619a      	str	r2, [r3, #24]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	460b      	mov	r3, r1
 8003724:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800372c:	887a      	ldrh	r2, [r7, #2]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4013      	ands	r3, r2
 8003732:	041a      	lsls	r2, r3, #16
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43d9      	mvns	r1, r3
 8003738:	887b      	ldrh	r3, [r7, #2]
 800373a:	400b      	ands	r3, r1
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	619a      	str	r2, [r3, #24]
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e237      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d050      	beq.n	800380c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800376a:	4ba3      	ldr	r3, [pc, #652]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d00c      	beq.n	8003790 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003776:	4ba0      	ldr	r3, [pc, #640]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800377e:	2b08      	cmp	r3, #8
 8003780:	d112      	bne.n	80037a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003782:	4b9d      	ldr	r3, [pc, #628]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378e:	d10b      	bne.n	80037a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003790:	4b99      	ldr	r3, [pc, #612]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d036      	beq.n	800380a <HAL_RCC_OscConfig+0xbe>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d132      	bne.n	800380a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e212      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4b93      	ldr	r3, [pc, #588]	; (80039fc <HAL_RCC_OscConfig+0x2b0>)
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d013      	beq.n	80037e2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7ff f925 	bl	8002a08 <HAL_GetTick>
 80037be:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c2:	f7ff f921 	bl	8002a08 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b64      	cmp	r3, #100	; 0x64
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e1fc      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d4:	4b88      	ldr	r3, [pc, #544]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x76>
 80037e0:	e014      	b.n	800380c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7ff f911 	bl	8002a08 <HAL_GetTick>
 80037e6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ea:	f7ff f90d 	bl	8002a08 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b64      	cmp	r3, #100	; 0x64
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e1e8      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fc:	4b7e      	ldr	r3, [pc, #504]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f0      	bne.n	80037ea <HAL_RCC_OscConfig+0x9e>
 8003808:	e000      	b.n	800380c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d077      	beq.n	8003908 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003818:	4b77      	ldr	r3, [pc, #476]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003824:	4b74      	ldr	r3, [pc, #464]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382c:	2b08      	cmp	r3, #8
 800382e:	d126      	bne.n	800387e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003830:	4b71      	ldr	r3, [pc, #452]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d120      	bne.n	800387e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383c:	4b6e      	ldr	r3, [pc, #440]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_OscConfig+0x108>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d001      	beq.n	8003854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e1bc      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b68      	ldr	r3, [pc, #416]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	21f8      	movs	r1, #248	; 0xf8
 8003862:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	69b9      	ldr	r1, [r7, #24]
 8003866:	fa91 f1a1 	rbit	r1, r1
 800386a:	6179      	str	r1, [r7, #20]
  return result;
 800386c:	6979      	ldr	r1, [r7, #20]
 800386e:	fab1 f181 	clz	r1, r1
 8003872:	b2c9      	uxtb	r1, r1
 8003874:	408b      	lsls	r3, r1
 8003876:	4960      	ldr	r1, [pc, #384]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387c:	e044      	b.n	8003908 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d02a      	beq.n	80038dc <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003886:	4b5e      	ldr	r3, [pc, #376]	; (8003a00 <HAL_RCC_OscConfig+0x2b4>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7ff f8bc 	bl	8002a08 <HAL_GetTick>
 8003890:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003894:	f7ff f8b8 	bl	8002a08 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e193      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	4b54      	ldr	r3, [pc, #336]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	21f8      	movs	r1, #248	; 0xf8
 80038c0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	6939      	ldr	r1, [r7, #16]
 80038c4:	fa91 f1a1 	rbit	r1, r1
 80038c8:	60f9      	str	r1, [r7, #12]
  return result;
 80038ca:	68f9      	ldr	r1, [r7, #12]
 80038cc:	fab1 f181 	clz	r1, r1
 80038d0:	b2c9      	uxtb	r1, r1
 80038d2:	408b      	lsls	r3, r1
 80038d4:	4948      	ldr	r1, [pc, #288]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
 80038da:	e015      	b.n	8003908 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038dc:	4b48      	ldr	r3, [pc, #288]	; (8003a00 <HAL_RCC_OscConfig+0x2b4>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e2:	f7ff f891 	bl	8002a08 <HAL_GetTick>
 80038e6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ea:	f7ff f88d 	bl	8002a08 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e168      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fc:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f0      	bne.n	80038ea <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d030      	beq.n	8003976 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391c:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <HAL_RCC_OscConfig+0x2b8>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7ff f871 	bl	8002a08 <HAL_GetTick>
 8003926:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392a:	f7ff f86d 	bl	8002a08 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e148      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393c:	4b2e      	ldr	r3, [pc, #184]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 800393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x1de>
 8003948:	e015      	b.n	8003976 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394a:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <HAL_RCC_OscConfig+0x2b8>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003950:	f7ff f85a 	bl	8002a08 <HAL_GetTick>
 8003954:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003958:	f7ff f856 	bl	8002a08 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e131      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396a:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8088 	beq.w	8003a94 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003984:	2300      	movs	r3, #0
 8003986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398a:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d110      	bne.n	80039b8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6413      	str	r3, [r2, #64]	; 0x40
 80039a6:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039b8:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <HAL_RCC_OscConfig+0x2bc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <HAL_RCC_OscConfig+0x2bc>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c4:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <HAL_RCC_OscConfig+0x2bc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d123      	bne.n	8003a18 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_RCC_OscConfig+0x2bc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0c      	ldr	r2, [pc, #48]	; (8003a08 <HAL_RCC_OscConfig+0x2bc>)
 80039d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039dc:	f7ff f814 	bl	8002a08 <HAL_GetTick>
 80039e0:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e2:	e013      	b.n	8003a0c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e4:	f7ff f810 	bl	8002a08 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d90c      	bls.n	8003a0c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e0eb      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40023802 	.word	0x40023802
 8003a00:	42470000 	.word	0x42470000
 8003a04:	42470e80 	.word	0x42470e80
 8003a08:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0c:	4b72      	ldr	r3, [pc, #456]	; (8003bd8 <HAL_RCC_OscConfig+0x48c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0e5      	beq.n	80039e4 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	4b6f      	ldr	r3, [pc, #444]	; (8003bdc <HAL_RCC_OscConfig+0x490>)
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d015      	beq.n	8003a56 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2a:	f7fe ffed 	bl	8002a08 <HAL_GetTick>
 8003a2e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fe ffe9 	bl	8002a08 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e0c2      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a48:	4b65      	ldr	r3, [pc, #404]	; (8003be0 <HAL_RCC_OscConfig+0x494>)
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ee      	beq.n	8003a32 <HAL_RCC_OscConfig+0x2e6>
 8003a54:	e014      	b.n	8003a80 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a56:	f7fe ffd7 	bl	8002a08 <HAL_GetTick>
 8003a5a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5c:	e00a      	b.n	8003a74 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fe ffd3 	bl	8002a08 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e0ac      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a74:	4b5a      	ldr	r3, [pc, #360]	; (8003be0 <HAL_RCC_OscConfig+0x494>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1ee      	bne.n	8003a5e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d105      	bne.n	8003a94 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a88:	4b55      	ldr	r3, [pc, #340]	; (8003be0 <HAL_RCC_OscConfig+0x494>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	4a54      	ldr	r2, [pc, #336]	; (8003be0 <HAL_RCC_OscConfig+0x494>)
 8003a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8097 	beq.w	8003bcc <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a9e:	4b50      	ldr	r3, [pc, #320]	; (8003be0 <HAL_RCC_OscConfig+0x494>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d061      	beq.n	8003b6e <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d146      	bne.n	8003b40 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab2:	4b4c      	ldr	r3, [pc, #304]	; (8003be4 <HAL_RCC_OscConfig+0x498>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fe ffa6 	bl	8002a08 <HAL_GetTick>
 8003abc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe ffa2 	bl	8002a08 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e07d      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <HAL_RCC_OscConfig+0x494>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ade:	4b40      	ldr	r3, [pc, #256]	; (8003be0 <HAL_RCC_OscConfig+0x494>)
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	4b41      	ldr	r3, [pc, #260]	; (8003be8 <HAL_RCC_OscConfig+0x49c>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	69d1      	ldr	r1, [r2, #28]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6a12      	ldr	r2, [r2, #32]
 8003aee:	4311      	orrs	r1, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003af4:	0192      	lsls	r2, r2, #6
 8003af6:	4311      	orrs	r1, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003afc:	0612      	lsls	r2, r2, #24
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b04:	0852      	lsrs	r2, r2, #1
 8003b06:	3a01      	subs	r2, #1
 8003b08:	0412      	lsls	r2, r2, #16
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	4934      	ldr	r1, [pc, #208]	; (8003be0 <HAL_RCC_OscConfig+0x494>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b12:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <HAL_RCC_OscConfig+0x498>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fe ff76 	bl	8002a08 <HAL_GetTick>
 8003b1c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fe ff72 	bl	8002a08 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b64      	cmp	r3, #100	; 0x64
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e04d      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b32:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <HAL_RCC_OscConfig+0x494>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0x3d4>
 8003b3e:	e045      	b.n	8003bcc <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b40:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <HAL_RCC_OscConfig+0x498>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b46:	f7fe ff5f 	bl	8002a08 <HAL_GetTick>
 8003b4a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b4e:	f7fe ff5b 	bl	8002a08 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b64      	cmp	r3, #100	; 0x64
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e036      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b60:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <HAL_RCC_OscConfig+0x494>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f0      	bne.n	8003b4e <HAL_RCC_OscConfig+0x402>
 8003b6c:	e02e      	b.n	8003bcc <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e029      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003b7a:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <HAL_RCC_OscConfig+0x494>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d11c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d115      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d10d      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d106      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3728      	adds	r7, #40	; 0x28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	40023870 	.word	0x40023870
 8003be0:	40023800 	.word	0x40023800
 8003be4:	42470060 	.word	0x42470060
 8003be8:	f0bc8000 	.word	0xf0bc8000

08003bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0d2      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c00:	4b6b      	ldr	r3, [pc, #428]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d90c      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b68      	ldr	r3, [pc, #416]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b66      	ldr	r3, [pc, #408]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0be      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c40:	4b5c      	ldr	r3, [pc, #368]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a5b      	ldr	r2, [pc, #364]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003c58:	4b56      	ldr	r3, [pc, #344]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a55      	ldr	r2, [pc, #340]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4950      	ldr	r1, [pc, #320]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d040      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	4b4a      	ldr	r3, [pc, #296]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d115      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e085      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d107      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca2:	4b44      	ldr	r3, [pc, #272]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e079      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb2:	4b40      	ldr	r3, [pc, #256]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e071      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cc2:	4b3c      	ldr	r3, [pc, #240]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f023 0203 	bic.w	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4939      	ldr	r1, [pc, #228]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cd4:	f7fe fe98 	bl	8002a08 <HAL_GetTick>
 8003cd8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cdc:	f7fe fe94 	bl	8002a08 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e059      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	4b30      	ldr	r3, [pc, #192]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 020c 	and.w	r2, r3, #12
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d1eb      	bne.n	8003cdc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d04:	4b2a      	ldr	r3, [pc, #168]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d20c      	bcs.n	8003d2c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e03c      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	491b      	ldr	r1, [pc, #108]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d56:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4913      	ldr	r1, [pc, #76]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003d6a:	f000 f82b 	bl	8003dc4 <HAL_RCC_GetSysClockFreq>
 8003d6e:	4601      	mov	r1, r0
 8003d70:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d78:	22f0      	movs	r2, #240	; 0xf0
 8003d7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	fa92 f2a2 	rbit	r2, r2
 8003d82:	60fa      	str	r2, [r7, #12]
  return result;
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	fab2 f282 	clz	r2, r2
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	40d3      	lsrs	r3, r2
 8003d8e:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <HAL_RCC_ClockConfig+0x1cc>)
 8003d90:	5cd3      	ldrb	r3, [r2, r3]
 8003d92:	fa21 f303 	lsr.w	r3, r1, r3
 8003d96:	4a09      	ldr	r2, [pc, #36]	; (8003dbc <HAL_RCC_ClockConfig+0x1d0>)
 8003d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_RCC_ClockConfig+0x1d4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fdf0 	bl	8002984 <HAL_InitTick>

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023c00 	.word	0x40023c00
 8003db4:	40023800 	.word	0x40023800
 8003db8:	08004e20 	.word	0x08004e20
 8003dbc:	20000010 	.word	0x20000010
 8003dc0:	20000014 	.word	0x20000014

08003dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc4:	b5b0      	push	{r4, r5, r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dca:	2100      	movs	r1, #0
 8003dcc:	6079      	str	r1, [r7, #4]
 8003dce:	2100      	movs	r1, #0
 8003dd0:	60f9      	str	r1, [r7, #12]
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dda:	4952      	ldr	r1, [pc, #328]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ddc:	6889      	ldr	r1, [r1, #8]
 8003dde:	f001 010c 	and.w	r1, r1, #12
 8003de2:	2908      	cmp	r1, #8
 8003de4:	d00d      	beq.n	8003e02 <HAL_RCC_GetSysClockFreq+0x3e>
 8003de6:	2908      	cmp	r1, #8
 8003de8:	f200 8094 	bhi.w	8003f14 <HAL_RCC_GetSysClockFreq+0x150>
 8003dec:	2900      	cmp	r1, #0
 8003dee:	d002      	beq.n	8003df6 <HAL_RCC_GetSysClockFreq+0x32>
 8003df0:	2904      	cmp	r1, #4
 8003df2:	d003      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x38>
 8003df4:	e08e      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df6:	4b4c      	ldr	r3, [pc, #304]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x164>)
 8003df8:	60bb      	str	r3, [r7, #8]
       break;
 8003dfa:	e08e      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dfc:	4b4b      	ldr	r3, [pc, #300]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x168>)
 8003dfe:	60bb      	str	r3, [r7, #8]
      break;
 8003e00:	e08b      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e02:	4948      	ldr	r1, [pc, #288]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e04:	6849      	ldr	r1, [r1, #4]
 8003e06:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003e0a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e0c:	4945      	ldr	r1, [pc, #276]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e0e:	6849      	ldr	r1, [r1, #4]
 8003e10:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003e14:	2900      	cmp	r1, #0
 8003e16:	d024      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e18:	4942      	ldr	r1, [pc, #264]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e1a:	6849      	ldr	r1, [r1, #4]
 8003e1c:	0989      	lsrs	r1, r1, #6
 8003e1e:	4608      	mov	r0, r1
 8003e20:	f04f 0100 	mov.w	r1, #0
 8003e24:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003e28:	f04f 0500 	mov.w	r5, #0
 8003e2c:	ea00 0204 	and.w	r2, r0, r4
 8003e30:	ea01 0305 	and.w	r3, r1, r5
 8003e34:	493d      	ldr	r1, [pc, #244]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x168>)
 8003e36:	fb01 f003 	mul.w	r0, r1, r3
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	fb01 f102 	mul.w	r1, r1, r2
 8003e40:	1844      	adds	r4, r0, r1
 8003e42:	493a      	ldr	r1, [pc, #232]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x168>)
 8003e44:	fba2 0101 	umull	r0, r1, r2, r1
 8003e48:	1863      	adds	r3, r4, r1
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	f7fd f81c 	bl	8000e90 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	e04a      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e62:	4b30      	ldr	r3, [pc, #192]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	099b      	lsrs	r3, r3, #6
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e72:	f04f 0100 	mov.w	r1, #0
 8003e76:	ea02 0400 	and.w	r4, r2, r0
 8003e7a:	ea03 0501 	and.w	r5, r3, r1
 8003e7e:	4620      	mov	r0, r4
 8003e80:	4629      	mov	r1, r5
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	014b      	lsls	r3, r1, #5
 8003e8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e90:	0142      	lsls	r2, r0, #5
 8003e92:	4610      	mov	r0, r2
 8003e94:	4619      	mov	r1, r3
 8003e96:	1b00      	subs	r0, r0, r4
 8003e98:	eb61 0105 	sbc.w	r1, r1, r5
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	018b      	lsls	r3, r1, #6
 8003ea6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003eaa:	0182      	lsls	r2, r0, #6
 8003eac:	1a12      	subs	r2, r2, r0
 8003eae:	eb63 0301 	sbc.w	r3, r3, r1
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	00d9      	lsls	r1, r3, #3
 8003ebc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ec0:	00d0      	lsls	r0, r2, #3
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	1912      	adds	r2, r2, r4
 8003ec8:	eb45 0303 	adc.w	r3, r5, r3
 8003ecc:	f04f 0000 	mov.w	r0, #0
 8003ed0:	f04f 0100 	mov.w	r1, #0
 8003ed4:	0299      	lsls	r1, r3, #10
 8003ed6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003eda:	0290      	lsls	r0, r2, #10
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	f7fc ffd0 	bl	8000e90 <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	0c1b      	lsrs	r3, r3, #16
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	3301      	adds	r3, #1
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f10:	60bb      	str	r3, [r7, #8]
      break;
 8003f12:	e002      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f14:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f16:	60bb      	str	r3, [r7, #8]
      break;
 8003f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bdb0      	pop	{r4, r5, r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	00f42400 	.word	0x00f42400
 8003f2c:	017d7840 	.word	0x017d7840

08003f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f34:	4b02      	ldr	r3, [pc, #8]	; (8003f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr
 8003f40:	20000010 	.word	0x20000010

08003f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e041      	b.n	8003fda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fe fa48 	bl	8002400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4610      	mov	r0, r2
 8003f84:	f000 fb36 	bl	80045f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d001      	beq.n	8003ffc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e046      	b.n	800408a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a22      	ldr	r2, [pc, #136]	; (8004094 <HAL_TIM_Base_Start+0xb0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d022      	beq.n	8004054 <HAL_TIM_Base_Start+0x70>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004016:	d01d      	beq.n	8004054 <HAL_TIM_Base_Start+0x70>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1e      	ldr	r2, [pc, #120]	; (8004098 <HAL_TIM_Base_Start+0xb4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d018      	beq.n	8004054 <HAL_TIM_Base_Start+0x70>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1d      	ldr	r2, [pc, #116]	; (800409c <HAL_TIM_Base_Start+0xb8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d013      	beq.n	8004054 <HAL_TIM_Base_Start+0x70>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1b      	ldr	r2, [pc, #108]	; (80040a0 <HAL_TIM_Base_Start+0xbc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00e      	beq.n	8004054 <HAL_TIM_Base_Start+0x70>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1a      	ldr	r2, [pc, #104]	; (80040a4 <HAL_TIM_Base_Start+0xc0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d009      	beq.n	8004054 <HAL_TIM_Base_Start+0x70>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a18      	ldr	r2, [pc, #96]	; (80040a8 <HAL_TIM_Base_Start+0xc4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d004      	beq.n	8004054 <HAL_TIM_Base_Start+0x70>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a17      	ldr	r2, [pc, #92]	; (80040ac <HAL_TIM_Base_Start+0xc8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d111      	bne.n	8004078 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b06      	cmp	r3, #6
 8004064:	d010      	beq.n	8004088 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0201 	orr.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004076:	e007      	b.n	8004088 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr
 8004094:	40010000 	.word	0x40010000
 8004098:	40000400 	.word	0x40000400
 800409c:	40000800 	.word	0x40000800
 80040a0:	40000c00 	.word	0x40000c00
 80040a4:	40010400 	.word	0x40010400
 80040a8:	40014000 	.word	0x40014000
 80040ac:	40001800 	.word	0x40001800

080040b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e041      	b.n	8004146 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f839 	bl	800414e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3304      	adds	r3, #4
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f000 fa80 	bl	80045f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d109      	bne.n	8004184 <HAL_TIM_PWM_Start+0x24>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	bf14      	ite	ne
 800417c:	2301      	movne	r3, #1
 800417e:	2300      	moveq	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	e022      	b.n	80041ca <HAL_TIM_PWM_Start+0x6a>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b04      	cmp	r3, #4
 8004188:	d109      	bne.n	800419e <HAL_TIM_PWM_Start+0x3e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	bf14      	ite	ne
 8004196:	2301      	movne	r3, #1
 8004198:	2300      	moveq	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	e015      	b.n	80041ca <HAL_TIM_PWM_Start+0x6a>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d109      	bne.n	80041b8 <HAL_TIM_PWM_Start+0x58>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	bf14      	ite	ne
 80041b0:	2301      	movne	r3, #1
 80041b2:	2300      	moveq	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	e008      	b.n	80041ca <HAL_TIM_PWM_Start+0x6a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e07c      	b.n	80042cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d104      	bne.n	80041e2 <HAL_TIM_PWM_Start+0x82>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e0:	e013      	b.n	800420a <HAL_TIM_PWM_Start+0xaa>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_PWM_Start+0x92>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f0:	e00b      	b.n	800420a <HAL_TIM_PWM_Start+0xaa>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_PWM_Start+0xa2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004200:	e003      	b.n	800420a <HAL_TIM_PWM_Start+0xaa>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2201      	movs	r2, #1
 8004210:	6839      	ldr	r1, [r7, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fcce 	bl	8004bb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a2d      	ldr	r2, [pc, #180]	; (80042d4 <HAL_TIM_PWM_Start+0x174>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_TIM_PWM_Start+0xcc>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <HAL_TIM_PWM_Start+0x178>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d101      	bne.n	8004230 <HAL_TIM_PWM_Start+0xd0>
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <HAL_TIM_PWM_Start+0xd2>
 8004230:	2300      	movs	r3, #0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004244:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a22      	ldr	r2, [pc, #136]	; (80042d4 <HAL_TIM_PWM_Start+0x174>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d022      	beq.n	8004296 <HAL_TIM_PWM_Start+0x136>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004258:	d01d      	beq.n	8004296 <HAL_TIM_PWM_Start+0x136>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1f      	ldr	r2, [pc, #124]	; (80042dc <HAL_TIM_PWM_Start+0x17c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d018      	beq.n	8004296 <HAL_TIM_PWM_Start+0x136>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1d      	ldr	r2, [pc, #116]	; (80042e0 <HAL_TIM_PWM_Start+0x180>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <HAL_TIM_PWM_Start+0x136>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <HAL_TIM_PWM_Start+0x184>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00e      	beq.n	8004296 <HAL_TIM_PWM_Start+0x136>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <HAL_TIM_PWM_Start+0x178>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d009      	beq.n	8004296 <HAL_TIM_PWM_Start+0x136>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <HAL_TIM_PWM_Start+0x188>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d004      	beq.n	8004296 <HAL_TIM_PWM_Start+0x136>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a16      	ldr	r2, [pc, #88]	; (80042ec <HAL_TIM_PWM_Start+0x18c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d111      	bne.n	80042ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b06      	cmp	r3, #6
 80042a6:	d010      	beq.n	80042ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b8:	e007      	b.n	80042ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40010000 	.word	0x40010000
 80042d8:	40010400 	.word	0x40010400
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40014000 	.word	0x40014000
 80042ec:	40001800 	.word	0x40001800

080042f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004306:	2302      	movs	r3, #2
 8004308:	e0ac      	b.n	8004464 <HAL_TIM_PWM_ConfigChannel+0x174>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b0c      	cmp	r3, #12
 8004316:	f200 809f 	bhi.w	8004458 <HAL_TIM_PWM_ConfigChannel+0x168>
 800431a:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004320:	08004355 	.word	0x08004355
 8004324:	08004459 	.word	0x08004459
 8004328:	08004459 	.word	0x08004459
 800432c:	08004459 	.word	0x08004459
 8004330:	08004395 	.word	0x08004395
 8004334:	08004459 	.word	0x08004459
 8004338:	08004459 	.word	0x08004459
 800433c:	08004459 	.word	0x08004459
 8004340:	080043d7 	.word	0x080043d7
 8004344:	08004459 	.word	0x08004459
 8004348:	08004459 	.word	0x08004459
 800434c:	08004459 	.word	0x08004459
 8004350:	08004417 	.word	0x08004417
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f9e8 	bl	8004730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0208 	orr.w	r2, r2, #8
 800436e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0204 	bic.w	r2, r2, #4
 800437e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6999      	ldr	r1, [r3, #24]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	619a      	str	r2, [r3, #24]
      break;
 8004392:	e062      	b.n	800445a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fa38 	bl	8004810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6999      	ldr	r1, [r3, #24]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	021a      	lsls	r2, r3, #8
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	619a      	str	r2, [r3, #24]
      break;
 80043d4:	e041      	b.n	800445a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fa8b 	bl	80048f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0208 	orr.w	r2, r2, #8
 80043f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69da      	ldr	r2, [r3, #28]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0204 	bic.w	r2, r2, #4
 8004400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69d9      	ldr	r1, [r3, #28]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	61da      	str	r2, [r3, #28]
      break;
 8004414:	e021      	b.n	800445a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fadf 	bl	80049e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69d9      	ldr	r1, [r3, #28]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	021a      	lsls	r2, r3, #8
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	61da      	str	r2, [r3, #28]
      break;
 8004456:	e000      	b.n	800445a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004458:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_TIM_ConfigClockSource+0x18>
 8004480:	2302      	movs	r3, #2
 8004482:	e0b3      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x180>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044bc:	d03e      	beq.n	800453c <HAL_TIM_ConfigClockSource+0xd0>
 80044be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c2:	f200 8087 	bhi.w	80045d4 <HAL_TIM_ConfigClockSource+0x168>
 80044c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ca:	f000 8085 	beq.w	80045d8 <HAL_TIM_ConfigClockSource+0x16c>
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d2:	d87f      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x168>
 80044d4:	2b70      	cmp	r3, #112	; 0x70
 80044d6:	d01a      	beq.n	800450e <HAL_TIM_ConfigClockSource+0xa2>
 80044d8:	2b70      	cmp	r3, #112	; 0x70
 80044da:	d87b      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x168>
 80044dc:	2b60      	cmp	r3, #96	; 0x60
 80044de:	d050      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x116>
 80044e0:	2b60      	cmp	r3, #96	; 0x60
 80044e2:	d877      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x168>
 80044e4:	2b50      	cmp	r3, #80	; 0x50
 80044e6:	d03c      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0xf6>
 80044e8:	2b50      	cmp	r3, #80	; 0x50
 80044ea:	d873      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x168>
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d058      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x136>
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d86f      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x168>
 80044f4:	2b30      	cmp	r3, #48	; 0x30
 80044f6:	d064      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x156>
 80044f8:	2b30      	cmp	r3, #48	; 0x30
 80044fa:	d86b      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x168>
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d060      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x156>
 8004500:	2b20      	cmp	r3, #32
 8004502:	d867      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x168>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d05c      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x156>
 8004508:	2b10      	cmp	r3, #16
 800450a:	d05a      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800450c:	e062      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6899      	ldr	r1, [r3, #8]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f000 fb2a 	bl	8004b76 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004530:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	609a      	str	r2, [r3, #8]
      break;
 800453a:	e04e      	b.n	80045da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6899      	ldr	r1, [r3, #8]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f000 fb13 	bl	8004b76 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800455e:	609a      	str	r2, [r3, #8]
      break;
 8004560:	e03b      	b.n	80045da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6859      	ldr	r1, [r3, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	461a      	mov	r2, r3
 8004570:	f000 fa8a 	bl	8004a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2150      	movs	r1, #80	; 0x50
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fae1 	bl	8004b42 <TIM_ITRx_SetConfig>
      break;
 8004580:	e02b      	b.n	80045da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6859      	ldr	r1, [r3, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	461a      	mov	r2, r3
 8004590:	f000 faa8 	bl	8004ae4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2160      	movs	r1, #96	; 0x60
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fad1 	bl	8004b42 <TIM_ITRx_SetConfig>
      break;
 80045a0:	e01b      	b.n	80045da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6859      	ldr	r1, [r3, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f000 fa6a 	bl	8004a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2140      	movs	r1, #64	; 0x40
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fac1 	bl	8004b42 <TIM_ITRx_SetConfig>
      break;
 80045c0:	e00b      	b.n	80045da <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f000 fab8 	bl	8004b42 <TIM_ITRx_SetConfig>
        break;
 80045d2:	e002      	b.n	80045da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045d4:	bf00      	nop
 80045d6:	e000      	b.n	80045da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a3f      	ldr	r2, [pc, #252]	; (8004704 <TIM_Base_SetConfig+0x110>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d013      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004612:	d00f      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a3c      	ldr	r2, [pc, #240]	; (8004708 <TIM_Base_SetConfig+0x114>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00b      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a3b      	ldr	r2, [pc, #236]	; (800470c <TIM_Base_SetConfig+0x118>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d007      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a3a      	ldr	r2, [pc, #232]	; (8004710 <TIM_Base_SetConfig+0x11c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a39      	ldr	r2, [pc, #228]	; (8004714 <TIM_Base_SetConfig+0x120>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a2e      	ldr	r2, [pc, #184]	; (8004704 <TIM_Base_SetConfig+0x110>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d02b      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004654:	d027      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a2b      	ldr	r2, [pc, #172]	; (8004708 <TIM_Base_SetConfig+0x114>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d023      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a2a      	ldr	r2, [pc, #168]	; (800470c <TIM_Base_SetConfig+0x118>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01f      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a29      	ldr	r2, [pc, #164]	; (8004710 <TIM_Base_SetConfig+0x11c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01b      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a28      	ldr	r2, [pc, #160]	; (8004714 <TIM_Base_SetConfig+0x120>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d017      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a27      	ldr	r2, [pc, #156]	; (8004718 <TIM_Base_SetConfig+0x124>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a26      	ldr	r2, [pc, #152]	; (800471c <TIM_Base_SetConfig+0x128>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00f      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a25      	ldr	r2, [pc, #148]	; (8004720 <TIM_Base_SetConfig+0x12c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a24      	ldr	r2, [pc, #144]	; (8004724 <TIM_Base_SetConfig+0x130>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a23      	ldr	r2, [pc, #140]	; (8004728 <TIM_Base_SetConfig+0x134>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a22      	ldr	r2, [pc, #136]	; (800472c <TIM_Base_SetConfig+0x138>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a09      	ldr	r2, [pc, #36]	; (8004704 <TIM_Base_SetConfig+0x110>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_Base_SetConfig+0xf8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a0b      	ldr	r2, [pc, #44]	; (8004714 <TIM_Base_SetConfig+0x120>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d103      	bne.n	80046f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	615a      	str	r2, [r3, #20]
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr
 8004704:	40010000 	.word	0x40010000
 8004708:	40000400 	.word	0x40000400
 800470c:	40000800 	.word	0x40000800
 8004710:	40000c00 	.word	0x40000c00
 8004714:	40010400 	.word	0x40010400
 8004718:	40014000 	.word	0x40014000
 800471c:	40014400 	.word	0x40014400
 8004720:	40014800 	.word	0x40014800
 8004724:	40001800 	.word	0x40001800
 8004728:	40001c00 	.word	0x40001c00
 800472c:	40002000 	.word	0x40002000

08004730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f023 0201 	bic.w	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0303 	bic.w	r3, r3, #3
 8004766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f023 0302 	bic.w	r3, r3, #2
 8004778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a20      	ldr	r2, [pc, #128]	; (8004808 <TIM_OC1_SetConfig+0xd8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_OC1_SetConfig+0x64>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a1f      	ldr	r2, [pc, #124]	; (800480c <TIM_OC1_SetConfig+0xdc>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d10c      	bne.n	80047ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 0308 	bic.w	r3, r3, #8
 800479a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f023 0304 	bic.w	r3, r3, #4
 80047ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a15      	ldr	r2, [pc, #84]	; (8004808 <TIM_OC1_SetConfig+0xd8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d003      	beq.n	80047be <TIM_OC1_SetConfig+0x8e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a14      	ldr	r2, [pc, #80]	; (800480c <TIM_OC1_SetConfig+0xdc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d111      	bne.n	80047e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	621a      	str	r2, [r3, #32]
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40010000 	.word	0x40010000
 800480c:	40010400 	.word	0x40010400

08004810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f023 0210 	bic.w	r2, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f023 0320 	bic.w	r3, r3, #32
 800485a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a21      	ldr	r2, [pc, #132]	; (80048f0 <TIM_OC2_SetConfig+0xe0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_OC2_SetConfig+0x68>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a20      	ldr	r2, [pc, #128]	; (80048f4 <TIM_OC2_SetConfig+0xe4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d10d      	bne.n	8004894 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800487e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004892:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a16      	ldr	r2, [pc, #88]	; (80048f0 <TIM_OC2_SetConfig+0xe0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d003      	beq.n	80048a4 <TIM_OC2_SetConfig+0x94>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a15      	ldr	r2, [pc, #84]	; (80048f4 <TIM_OC2_SetConfig+0xe4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d113      	bne.n	80048cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr
 80048f0:	40010000 	.word	0x40010000
 80048f4:	40010400 	.word	0x40010400

080048f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0303 	bic.w	r3, r3, #3
 800492e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a21      	ldr	r2, [pc, #132]	; (80049d8 <TIM_OC3_SetConfig+0xe0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <TIM_OC3_SetConfig+0x66>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a20      	ldr	r2, [pc, #128]	; (80049dc <TIM_OC3_SetConfig+0xe4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d10d      	bne.n	800497a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <TIM_OC3_SetConfig+0xe0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d003      	beq.n	800498a <TIM_OC3_SetConfig+0x92>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <TIM_OC3_SetConfig+0xe4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d113      	bne.n	80049b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	621a      	str	r2, [r3, #32]
}
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40010000 	.word	0x40010000
 80049dc:	40010400 	.word	0x40010400

080049e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	031b      	lsls	r3, r3, #12
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a11      	ldr	r2, [pc, #68]	; (8004a80 <TIM_OC4_SetConfig+0xa0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_OC4_SetConfig+0x68>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a10      	ldr	r2, [pc, #64]	; (8004a84 <TIM_OC4_SetConfig+0xa4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d109      	bne.n	8004a5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	019b      	lsls	r3, r3, #6
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	621a      	str	r2, [r3, #32]
}
 8004a76:	bf00      	nop
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40010400 	.word	0x40010400

08004a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f023 0201 	bic.w	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f023 030a 	bic.w	r3, r3, #10
 8004ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	621a      	str	r2, [r3, #32]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr

08004ae4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	f023 0210 	bic.w	r2, r3, #16
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	031b      	lsls	r3, r3, #12
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	621a      	str	r2, [r3, #32]
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr

08004b42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f043 0307 	orr.w	r3, r3, #7
 8004b64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	609a      	str	r2, [r3, #8]
}
 8004b6c:	bf00      	nop
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bc80      	pop	{r7}
 8004b74:	4770      	bx	lr

08004b76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b087      	sub	sp, #28
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	021a      	lsls	r2, r3, #8
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	609a      	str	r2, [r3, #8]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	431a      	orrs	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e05a      	b.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a20      	ldr	r2, [pc, #128]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d022      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c60:	d01d      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d018      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1a      	ldr	r2, [pc, #104]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00e      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a16      	ldr	r2, [pc, #88]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a14      	ldr	r2, [pc, #80]	; (8004cec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40000800 	.word	0x40000800
 8004ce0:	40000c00 	.word	0x40000c00
 8004ce4:	40010400 	.word	0x40010400
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	40001800 	.word	0x40001800

08004cf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e03d      	b.n	8004d88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr
	...

08004d94 <__libc_init_array>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	2600      	movs	r6, #0
 8004d98:	4d0c      	ldr	r5, [pc, #48]	; (8004dcc <__libc_init_array+0x38>)
 8004d9a:	4c0d      	ldr	r4, [pc, #52]	; (8004dd0 <__libc_init_array+0x3c>)
 8004d9c:	1b64      	subs	r4, r4, r5
 8004d9e:	10a4      	asrs	r4, r4, #2
 8004da0:	42a6      	cmp	r6, r4
 8004da2:	d109      	bne.n	8004db8 <__libc_init_array+0x24>
 8004da4:	f000 f830 	bl	8004e08 <_init>
 8004da8:	2600      	movs	r6, #0
 8004daa:	4d0a      	ldr	r5, [pc, #40]	; (8004dd4 <__libc_init_array+0x40>)
 8004dac:	4c0a      	ldr	r4, [pc, #40]	; (8004dd8 <__libc_init_array+0x44>)
 8004dae:	1b64      	subs	r4, r4, r5
 8004db0:	10a4      	asrs	r4, r4, #2
 8004db2:	42a6      	cmp	r6, r4
 8004db4:	d105      	bne.n	8004dc2 <__libc_init_array+0x2e>
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dbc:	4798      	blx	r3
 8004dbe:	3601      	adds	r6, #1
 8004dc0:	e7ee      	b.n	8004da0 <__libc_init_array+0xc>
 8004dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc6:	4798      	blx	r3
 8004dc8:	3601      	adds	r6, #1
 8004dca:	e7f2      	b.n	8004db2 <__libc_init_array+0x1e>
 8004dcc:	08004e38 	.word	0x08004e38
 8004dd0:	08004e38 	.word	0x08004e38
 8004dd4:	08004e38 	.word	0x08004e38
 8004dd8:	08004e3c 	.word	0x08004e3c

08004ddc <memcpy>:
 8004ddc:	440a      	add	r2, r1
 8004dde:	4291      	cmp	r1, r2
 8004de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004de4:	d100      	bne.n	8004de8 <memcpy+0xc>
 8004de6:	4770      	bx	lr
 8004de8:	b510      	push	{r4, lr}
 8004dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dee:	4291      	cmp	r1, r2
 8004df0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004df4:	d1f9      	bne.n	8004dea <memcpy+0xe>
 8004df6:	bd10      	pop	{r4, pc}

08004df8 <memset>:
 8004df8:	4603      	mov	r3, r0
 8004dfa:	4402      	add	r2, r0
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d100      	bne.n	8004e02 <memset+0xa>
 8004e00:	4770      	bx	lr
 8004e02:	f803 1b01 	strb.w	r1, [r3], #1
 8004e06:	e7f9      	b.n	8004dfc <memset+0x4>

08004e08 <_init>:
 8004e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0a:	bf00      	nop
 8004e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0e:	bc08      	pop	{r3}
 8004e10:	469e      	mov	lr, r3
 8004e12:	4770      	bx	lr

08004e14 <_fini>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	bf00      	nop
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr
